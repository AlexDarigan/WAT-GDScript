[gd_resource type="Resource" load_steps=57 format=2]

[ext_resource path="res://addons/WAT/resources/results.gd" type="Script" id=1]
[ext_resource path="res://tests/unit/is_not_instance.test.gd" type="Script" id=2]
[ext_resource path="res://tests/unit/file.test.gd" type="Script" id=3]
[ext_resource path="res://tests/integration/scene_director.test.gd" type="Script" id=4]
[ext_resource path="res://tests/integration/on_floor.test.gd" type="Script" id=5]
[ext_resource path="res://tests/unit/is_instance.test.gd" type="Script" id=6]
[ext_resource path="res://tests/unit/object.test.gd" type="Script" id=7]
[ext_resource path="res://tests/unit/equality.test.gd" type="Script" id=8]
[ext_resource path="res://tests/unit/string.test.gd" type="Script" id=9]
[ext_resource path="res://tests/integration/default_args.test.gd" type="Script" id=10]
[ext_resource path="res://tests/unit/boolean.test.gd" type="Script" id=11]
[ext_resource path="res://tests/unit/null.test.gd" type="Script" id=12]
[ext_resource path="res://tests/integration/script_director.test.gd" type="Script" id=13]
[ext_resource path="res://tests/integration/test_double.test.gd" type="Script" id=14]
[ext_resource path="res://tests/unit/range.test.gd" type="Script" id=15]
[ext_resource path="res://tests/unit/parameters.test.gd" type="Script" id=16]
[ext_resource path="res://tests/unit/watcher.test.gd" type="Script" id=17]
[ext_resource path="res://tests/unit/yield.test.gd" type="Script" id=18]
[ext_resource path="res://tests/unit/test.test.gd" type="Script" id=19]
[ext_resource path="res://tests/integration/boolean.test.gd" type="Script" id=20]

[sub_resource type="GDScript" id=1]
script/source = "extends \"res://tests/unit/suite.test.gd\".DummyOne"

[sub_resource type="GDScript" id=2]
script/source = "extends \"res://tests/unit/suite.test.gd\".DummyTwo"

[sub_resource type="GDScript" id=3]
script/source = "extends \"res://tests/unit/suite.test.gd\".DummyOne"

[sub_resource type="GDScript" id=4]
script/source = "extends \"res://tests/unit/suite.test.gd\".DummyTwo"

[sub_resource type="GDScript" id=5]
script/source = "extends \"res://tests/unit/suite.test.gd\".DummyOne"

[sub_resource type="GDScript" id=6]
script/source = "extends \"res://tests/unit/suite.test.gd\".DummyTwo"

[sub_resource type="GDScript" id=7]
script/source = "extends \"res://tests/unit/suite.test.gd\".DummyOne"

[sub_resource type="GDScript" id=8]
script/source = "extends \"res://tests/unit/suite.test.gd\".DummyTwo"

[sub_resource type="GDScript" id=9]
script/source = "extends \"res://tests/unit/suite.test.gd\".DummyTwo"

[sub_resource type="GDScript" id=10]
script/source = "extends \"res://tests/unit/suite.test.gd\".DummyOne"

[sub_resource type="GDScript" id=11]
script/source = "extends \"res://tests/unit/suite.test.gd\".DummyOne"

[sub_resource type="GDScript" id=12]
script/source = "extends \"res://tests/unit/suite.test.gd\".DummyTwo"

[sub_resource type="GDScript" id=13]
script/source = "extends \"res://tests/unit/suite.test.gd\".DummyOne"

[sub_resource type="GDScript" id=14]
script/source = "extends \"res://tests/unit/suite.test.gd\".DummyTwo"

[sub_resource type="GDScript" id=15]
script/source = "extends \"res://tests/unit/suite.test.gd\".DummyOne"

[sub_resource type="GDScript" id=16]
script/source = "extends \"res://tests/unit/suite.test.gd\".DummyTwo"

[sub_resource type="GDScript" id=17]
script/source = "extends \"res://tests/unit/suite.test.gd\".DummyOne"

[sub_resource type="GDScript" id=18]
script/source = "extends \"res://tests/unit/suite.test.gd\".DummyTwo"

[sub_resource type="GDScript" id=19]
script/source = "extends \"res://tests/unit/suite.test.gd\".DummyOne"

[sub_resource type="GDScript" id=20]
script/source = "extends \"res://tests/unit/suite.test.gd\".DummyTwo"

[sub_resource type="GDScript" id=21]
script/source = "extends \"res://tests/unit/suite.test.gd\".DummyOne"

[sub_resource type="GDScript" id=22]
script/source = "extends \"res://tests/unit/suite.test.gd\".DummyTwo"

[sub_resource type="GDScript" id=23]
script/source = "extends \"res://tests/unit/suite.test.gd\".DummyOne"

[sub_resource type="GDScript" id=24]
script/source = "extends \"res://tests/unit/suite.test.gd\".DummyTwo"

[sub_resource type="GDScript" id=25]
script/source = "extends \"res://tests/unit/suite.test.gd\".DummyOne"

[sub_resource type="GDScript" id=26]
script/source = "extends \"res://tests/unit/suite.test.gd\".DummyTwo"

[sub_resource type="GDScript" id=27]
script/source = "extends \"res://tests/unit/suite.test.gd\".DummyOne"

[sub_resource type="GDScript" id=28]
script/source = "extends \"res://tests/unit/suite.test.gd\".DummyTwo"

[sub_resource type="GDScript" id=29]
script/source = "extends \"res://tests/unit/suite.test.gd\".DummyOne"

[sub_resource type="GDScript" id=30]
script/source = "extends \"res://tests/unit/suite.test.gd\".DummyTwo"

[sub_resource type="GDScript" id=31]
script/source = "extends \"res://tests/unit/suite.test.gd\".DummyOne"

[sub_resource type="GDScript" id=32]
script/source = "extends \"res://tests/unit/suite.test.gd\".DummyTwo"

[sub_resource type="GDScript" id=33]
script/source = "extends \"res://tests/unit/suite.test.gd\".DummyOne"

[sub_resource type="GDScript" id=34]
script/source = "extends \"res://tests/unit/suite.test.gd\".DummyTwo"

[sub_resource type="GDScript" id=35]
script/source = "extends \"res://tests/unit/suite.test.gd\".DummyOne"

[sub_resource type="GDScript" id=36]
script/source = "extends \"res://tests/unit/suite.test.gd\".DummyTwo"

[resource]
script = ExtResource( 1 )
results = {
0: [  ],
1609948704: [ {
"context": "Default Args",
"methods": [ {
"assertions": [ {
"actual": "|bool| True == true",
"context": "If this method can be reached then we have doubled a script with default argument(s) properly!",
"expected": "|bool| True == true",
"success": true
} ],
"context": " default arguments of interpolate property",
"fullname": "test_default_arguments_of_interpolate_property",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 1,
"path": "res://tests/integration/default_args.test.gd",
"source": {
"containers": [ "res://tests/integration", "res://tests" ],
"method": "",
"path": "res://tests/integration/default_args.test.gd",
"tags": [  ],
"test": ExtResource( 10 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 1
}, {
"context": "Given a Script Director",
"methods": [ {
"assertions": [ {
"actual": "[Reference:1386] is instance of class: [GDScript:1379]",
"context": "Then we get that inner class back",
"expected": "[Reference:1386] is instance of class: [GDScript:1379]",
"success": true
} ],
"context": "When we double an inner class",
"fullname": "test_When_we_double_an_inner_class",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|Object| [Node:1441] is equal to |Object| [Node:1441]",
"context": "Then we get the same double back",
"expected": "|Object| [Node:1441] is equal to |Object| [Node:1441]",
"success": true
} ],
"context": "When we call the double the second time",
"fullname": "test_When_we_call_double_a_second_time_on",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|Dictionary| {_enter_tree:{arguments:, default_arguments:}, _exit_tree:{arguments:, default_arguments:}, _get:{arguments:a, default_arguments:a}, _get_configuration_warning:{arguments:, default_arguments:}, _get_editor_description:{arguments:, default_arguments:}, _get_import_path:{arguments:, default_arguments:}, _get_property_list:{arguments:, default_arguments:}, _init:{arguments:, default_arguments:}, _input:{arguments:a, default_arguments:a}, _notification:{arguments:a, default_arguments:a}, _physics_process:{arguments:a, default_arguments:a}, _process:{arguments:a, default_arguments:a}, _ready:{arguments:, default_arguments:}, _set:{arguments:a, b, default_arguments:a, b}, _set_editor_description:{arguments:a, default_arguments:a}, _set_import_path:{arguments:a, default_arguments:a}, _to_string:{arguments:, default_arguments:}, _unhandled_input:{arguments:a, default_arguments:a}, _unhandled_key_input:{arguments:a, default_arguments:a}, add:{arguments:a, b, default_arguments:a, b}, add_child:{arguments:a, b, default_arguments:a, b = False}, add_child_below_node:{arguments:a, b, c, default_arguments:a, b, c = False}, add_to_group:{arguments:a, b, default_arguments:a, b = False}, add_user_signal:{arguments:a, b, default_arguments:a, b = []}, call:{arguments:a, default_arguments:a}, call_deferred:{arguments:a, default_arguments:a}, callv:{arguments:a, b, default_arguments:a, b}, can_process:{arguments:, default_arguments:}, can_translate_messages:{arguments:, default_arguments:}, connect:{arguments:a, b, c, d, e, default_arguments:a, b, c, d = [], e = 0}, disconnect:{arguments:a, b, c, default_arguments:a, b, c}, divide:{arguments:a, b, default_arguments:a, b}, duplicate:{arguments:a, default_arguments:a = 15}, emit_signal:{arguments:a, default_arguments:a}, find_node:{arguments:a, b, c, default_arguments:a, b = True, c = True}, find_parent:{arguments:a, default_arguments:a}, free:{arguments:, default_arguments:}, get:{arguments:a, default_arguments:a}, get_child:{arguments:a, default_arguments:a}, get_child_count:{arguments:, default_arguments:}, get_children:{arguments:, default_arguments:}, get_class:{arguments:, default_arguments:}, get_custom_multiplayer:{arguments:, default_arguments:}, get_filename:{arguments:, default_arguments:}, get_groups:{arguments:, default_arguments:}, get_incoming_connections:{arguments:, default_arguments:}, get_index:{arguments:, default_arguments:}, get_indexed:{arguments:a, default_arguments:a}, get_instance_id:{arguments:, default_arguments:}, get_meta:{arguments:a, default_arguments:a}, get_meta_list:{arguments:, default_arguments:}, get_method_list:{arguments:, default_arguments:}, get_multiplayer:{arguments:, default_arguments:}, get_name:{arguments:, default_arguments:}, get_network_master:{arguments:, default_arguments:}, get_node:{arguments:a, default_arguments:a}, get_node_and_resource:{arguments:a, default_arguments:a}, get_node_or_null:{arguments:a, default_arguments:a}, get_owner:{arguments:, default_arguments:}, get_parent:{arguments:, default_arguments:}, get_path:{arguments:, default_arguments:}, get_path_to:{arguments:a, default_arguments:a}, get_pause_mode:{arguments:, default_arguments:}, get_physics_process_delta_time:{arguments:, default_arguments:}, get_position_in_parent:{arguments:, default_arguments:}, get_process_delta_time:{arguments:, default_arguments:}, get_process_priority:{arguments:, default_arguments:}, get_property_list:{arguments:, default_arguments:}, get_scene_instance_load_placeholder:{arguments:, default_arguments:}, get_script:{arguments:, default_arguments:}, get_signal_connection_list:{arguments:a, default_arguments:a}, get_signal_list:{arguments:, default_arguments:}, get_tree:{arguments:, default_arguments:}, get_viewport:{arguments:, default_arguments:}, has_meta:{arguments:a, default_arguments:a}, has_method:{arguments:a, default_arguments:a}, has_node:{arguments:a, default_arguments:a}, has_node_and_resource:{arguments:a, default_arguments:a}, has_signal:{arguments:a, default_arguments:a}, has_user_signal:{arguments:a, default_arguments:a}, is_a_parent_of:{arguments:a, default_arguments:a}, is_blocking_signals:{arguments:, default_arguments:}, is_class:{arguments:a, default_arguments:a}, is_connected:{arguments:a, b, c, default_arguments:a, b, c}, is_displayed_folded:{arguments:, default_arguments:}, is_greater_than:{arguments:a, default_arguments:a}, is_in_group:{arguments:a, default_arguments:a}, is_inside_tree:{arguments:, default_arguments:}, is_network_master:{arguments:, default_arguments:}, is_physics_processing:{arguments:, default_arguments:}, is_physics_processing_internal:{arguments:, default_arguments:}, is_processing:{arguments:, default_arguments:}, is_processing_input:{arguments:, default_arguments:}, is_processing_internal:{arguments:, default_arguments:}, is_processing_unhandled_input:{arguments:, default_arguments:}, is_processing_unhandled_key_input:{arguments:, default_arguments:}, is_queued_for_deletion:{arguments:, default_arguments:}, math_fight:{arguments:, default_arguments:}, move_child:{arguments:a, b, default_arguments:a, b}, multiply:{arguments:a, b, default_arguments:a, b}, notification:{arguments:a, b, default_arguments:a, b = False}, pi:{arguments:, default_arguments:}, print_stray_nodes:{arguments:, default_arguments:}, print_tree:{arguments:, default_arguments:}, print_tree_pretty:{arguments:, default_arguments:}, propagate_call:{arguments:a, b, c, default_arguments:a, b = [], c = False}, propagate_notification:{arguments:a, default_arguments:a}, property_list_changed_notify:{arguments:, default_arguments:}, queue_free:{arguments:, default_arguments:}, raise:{arguments:, default_arguments:}, remove_and_skip:{arguments:, default_arguments:}, remove_child:{arguments:a, default_arguments:a}, remove_from_group:{arguments:a, default_arguments:a}, remove_meta:{arguments:a, default_arguments:a}, replace_by:{arguments:a, b, default_arguments:a, b = False}, request_ready:{arguments:, default_arguments:}, rpc:{arguments:a, default_arguments:a}, rpc_config:{arguments:a, b, default_arguments:a, b}, rpc_id:{arguments:a, b, default_arguments:a, b}, rpc_unreliable:{arguments:a, default_arguments:a}, rpc_unreliable_id:{arguments:a, b, default_arguments:a, b}, rset:{arguments:a, b, default_arguments:a, b}, rset_config:{arguments:a, b, default_arguments:a, b}, rset_id:{arguments:a, b, c, default_arguments:a, b, c}, rset_unreliable:{arguments:a, b, default_arguments:a, b}, rset_unreliable_id:{arguments:a, b, c, default_arguments:a, b, c}, set:{arguments:a, b, default_arguments:a, b}, set_block_signals:{arguments:a, default_arguments:a}, set_custom_multiplayer:{arguments:a, default_arguments:a}, set_deferred:{arguments:a, b, default_arguments:a, b}, set_display_folded:{arguments:a, default_arguments:a}, set_filename:{arguments:a, default_arguments:a}, set_indexed:{arguments:a, b, default_arguments:a, b}, set_message_translation:{arguments:a, default_arguments:a}, set_meta:{arguments:a, b, default_arguments:a, b}, set_name:{arguments:a, default_arguments:a}, set_network_master:{arguments:a, b, default_arguments:a, b = True}, set_owner:{arguments:a, default_arguments:a}, set_pause_mode:{arguments:a, default_arguments:a}, set_physics_process:{arguments:a, default_arguments:a}, set_physics_process_internal:{arguments:a, default_arguments:a}, set_process:{arguments:a, default_arguments:a}, set_process_input:{arguments:a, default_arguments:a}, set_process_internal:{arguments:a, default_arguments:a}, set_process_priority:{arguments:a, default_arguments:a}, set_process_unhandled_input:{arguments:a, default_arguments:a}, set_process_unhandled_key_input:{arguments:a, default_arguments:a}, set_scene_instance_load_placeholder:{arguments:a, default_arguments:a}, set_script:{arguments:a, default_arguments:a}, subtract:{arguments:a, b, default_arguments:a, b}, sum:{arguments:a, default_arguments:a}, to_string:{arguments:, default_arguments:}, tr:{arguments:a, default_arguments:a}, update_configuration_warning:{arguments:, default_arguments:}} is not equal to |Dictionary| {_enter_tree:{arguments:, default_arguments:}, _exit_tree:{arguments:, default_arguments:}, _get:{arguments:a, default_arguments:a}, _get_configuration_warning:{arguments:, default_arguments:}, _get_editor_description:{arguments:, default_arguments:}, _get_import_path:{arguments:, default_arguments:}, _get_property_list:{arguments:, default_arguments:}, _init:{arguments:, default_arguments:}, _input:{arguments:a, default_arguments:a}, _notification:{arguments:a, default_arguments:a}, _physics_process:{arguments:a, default_arguments:a}, _process:{arguments:a, default_arguments:a}, _ready:{arguments:, default_arguments:}, _set:{arguments:a, b, default_arguments:a, b}, _set_editor_description:{arguments:a, default_arguments:a}, _set_import_path:{arguments:a, default_arguments:a}, _to_string:{arguments:, default_arguments:}, _unhandled_input:{arguments:a, default_arguments:a}, _unhandled_key_input:{arguments:a, default_arguments:a}, add:{arguments:a, b, default_arguments:a, b}, add_child:{arguments:a, b, default_arguments:a, b = False}, add_child_below_node:{arguments:a, b, c, default_arguments:a, b, c = False}, add_to_group:{arguments:a, b, default_arguments:a, b = False}, add_user_signal:{arguments:a, b, default_arguments:a, b = []}, call:{arguments:a, default_arguments:a}, call_deferred:{arguments:a, default_arguments:a}, callv:{arguments:a, b, default_arguments:a, b}, can_process:{arguments:, default_arguments:}, can_translate_messages:{arguments:, default_arguments:}, connect:{arguments:a, b, c, d, e, default_arguments:a, b, c, d = [], e = 0}, disconnect:{arguments:a, b, c, default_arguments:a, b, c}, divide:{arguments:a, b, default_arguments:a, b}, duplicate:{arguments:a, default_arguments:a = 15}, emit_signal:{arguments:a, default_arguments:a}, find_node:{arguments:a, b, c, default_arguments:a, b = True, c = True}, find_parent:{arguments:a, default_arguments:a}, free:{arguments:, default_arguments:}, get:{arguments:a, default_arguments:a}, get_child:{arguments:a, default_arguments:a}, get_child_count:{arguments:, default_arguments:}, get_children:{arguments:, default_arguments:}, get_class:{arguments:, default_arguments:}, get_custom_multiplayer:{arguments:, default_arguments:}, get_filename:{arguments:, default_arguments:}, get_groups:{arguments:, default_arguments:}, get_incoming_connections:{arguments:, default_arguments:}, get_index:{arguments:, default_arguments:}, get_indexed:{arguments:a, default_arguments:a}, get_instance_id:{arguments:, default_arguments:}, get_meta:{arguments:a, default_arguments:a}, get_meta_list:{arguments:, default_arguments:}, get_method_list:{arguments:, default_arguments:}, get_multiplayer:{arguments:, default_arguments:}, get_name:{arguments:, default_arguments:}, get_network_master:{arguments:, default_arguments:}, get_node:{arguments:a, default_arguments:a}, get_node_and_resource:{arguments:a, default_arguments:a}, get_node_or_null:{arguments:a, default_arguments:a}, get_owner:{arguments:, default_arguments:}, get_parent:{arguments:, default_arguments:}, get_path:{arguments:, default_arguments:}, get_path_to:{arguments:a, default_arguments:a}, get_pause_mode:{arguments:, default_arguments:}, get_physics_process_delta_time:{arguments:, default_arguments:}, get_position_in_parent:{arguments:, default_arguments:}, get_process_delta_time:{arguments:, default_arguments:}, get_process_priority:{arguments:, default_arguments:}, get_property_list:{arguments:, default_arguments:}, get_scene_instance_load_placeholder:{arguments:, default_arguments:}, get_script:{arguments:, default_arguments:}, get_signal_connection_list:{arguments:a, default_arguments:a}, get_signal_list:{arguments:, default_arguments:}, get_tree:{arguments:, default_arguments:}, get_viewport:{arguments:, default_arguments:}, has_meta:{arguments:a, default_arguments:a}, has_method:{arguments:a, default_arguments:a}, has_node:{arguments:a, default_arguments:a}, has_node_and_resource:{arguments:a, default_arguments:a}, has_signal:{arguments:a, default_arguments:a}, has_user_signal:{arguments:a, default_arguments:a}, is_a_parent_of:{arguments:a, default_arguments:a}, is_blocking_signals:{arguments:, default_arguments:}, is_class:{arguments:a, default_arguments:a}, is_connected:{arguments:a, b, c, default_arguments:a, b, c}, is_displayed_folded:{arguments:, default_arguments:}, is_greater_than:{arguments:a, default_arguments:a}, is_in_group:{arguments:a, default_arguments:a}, is_inside_tree:{arguments:, default_arguments:}, is_network_master:{arguments:, default_arguments:}, is_physics_processing:{arguments:, default_arguments:}, is_physics_processing_internal:{arguments:, default_arguments:}, is_processing:{arguments:, default_arguments:}, is_processing_input:{arguments:, default_arguments:}, is_processing_internal:{arguments:, default_arguments:}, is_processing_unhandled_input:{arguments:, default_arguments:}, is_processing_unhandled_key_input:{arguments:, default_arguments:}, is_queued_for_deletion:{arguments:, default_arguments:}, math_fight:{arguments:, default_arguments:}, move_child:{arguments:a, b, default_arguments:a, b}, multiply:{arguments:a, b, default_arguments:a, b}, notification:{arguments:a, b, default_arguments:a, b = False}, pi:{arguments:, default_arguments:}, print_stray_nodes:{arguments:, default_arguments:}, print_tree:{arguments:, default_arguments:}, print_tree_pretty:{arguments:, default_arguments:}, propagate_call:{arguments:a, b, c, default_arguments:a, b = [], c = False}, propagate_notification:{arguments:a, default_arguments:a}, property_list_changed_notify:{arguments:, default_arguments:}, queue_free:{arguments:, default_arguments:}, raise:{arguments:, default_arguments:}, remove_and_skip:{arguments:, default_arguments:}, remove_child:{arguments:a, default_arguments:a}, remove_from_group:{arguments:a, default_arguments:a}, remove_meta:{arguments:a, default_arguments:a}, replace_by:{arguments:a, b, default_arguments:a, b = False}, request_ready:{arguments:, default_arguments:}, rpc:{arguments:a, default_arguments:a}, rpc_config:{arguments:a, b, default_arguments:a, b}, rpc_id:{arguments:a, b, default_arguments:a, b}, rpc_unreliable:{arguments:a, default_arguments:a}, rpc_unreliable_id:{arguments:a, b, default_arguments:a, b}, rset:{arguments:a, b, default_arguments:a, b}, rset_config:{arguments:a, b, default_arguments:a, b}, rset_id:{arguments:a, b, c, default_arguments:a, b, c}, rset_unreliable:{arguments:a, b, default_arguments:a, b}, rset_unreliable_id:{arguments:a, b, c, default_arguments:a, b, c}, set:{arguments:a, b, default_arguments:a, b}, set_block_signals:{arguments:a, default_arguments:a}, set_custom_multiplayer:{arguments:a, default_arguments:a}, set_deferred:{arguments:a, b, default_arguments:a, b}, set_display_folded:{arguments:a, default_arguments:a}, set_filename:{arguments:a, default_arguments:a}, set_indexed:{arguments:a, b, default_arguments:a, b}, set_message_translation:{arguments:a, default_arguments:a}, set_meta:{arguments:a, b, default_arguments:a, b}, set_name:{arguments:a, default_arguments:a}, set_network_master:{arguments:a, b, default_arguments:a, b = True}, set_owner:{arguments:a, default_arguments:a}, set_pause_mode:{arguments:a, default_arguments:a}, set_physics_process:{arguments:a, default_arguments:a}, set_physics_process_internal:{arguments:a, default_arguments:a}, set_process:{arguments:a, default_arguments:a}, set_process_input:{arguments:a, default_arguments:a}, set_process_internal:{arguments:a, default_arguments:a}, set_process_priority:{arguments:a, default_arguments:a}, set_process_unhandled_input:{arguments:a, default_arguments:a}, set_process_unhandled_key_input:{arguments:a, default_arguments:a}, set_scene_instance_load_placeholder:{arguments:a, default_arguments:a}, set_script:{arguments:a, default_arguments:a}, subtract:{arguments:a, b, default_arguments:a, b}, sum:{arguments:a, default_arguments:a}, to_string:{arguments:, default_arguments:}, tr:{arguments:a, default_arguments:a}, update_configuration_warning:{arguments:, default_arguments:}}",
"context": "Then they do not share resources",
"expected": "|Dictionary| {_enter_tree:{arguments:, default_arguments:}, _exit_tree:{arguments:, default_arguments:}, _get:{arguments:a, default_arguments:a}, _get_configuration_warning:{arguments:, default_arguments:}, _get_editor_description:{arguments:, default_arguments:}, _get_import_path:{arguments:, default_arguments:}, _get_property_list:{arguments:, default_arguments:}, _init:{arguments:, default_arguments:}, _input:{arguments:a, default_arguments:a}, _notification:{arguments:a, default_arguments:a}, _physics_process:{arguments:a, default_arguments:a}, _process:{arguments:a, default_arguments:a}, _ready:{arguments:, default_arguments:}, _set:{arguments:a, b, default_arguments:a, b}, _set_editor_description:{arguments:a, default_arguments:a}, _set_import_path:{arguments:a, default_arguments:a}, _to_string:{arguments:, default_arguments:}, _unhandled_input:{arguments:a, default_arguments:a}, _unhandled_key_input:{arguments:a, default_arguments:a}, add:{arguments:a, b, default_arguments:a, b}, add_child:{arguments:a, b, default_arguments:a, b = False}, add_child_below_node:{arguments:a, b, c, default_arguments:a, b, c = False}, add_to_group:{arguments:a, b, default_arguments:a, b = False}, add_user_signal:{arguments:a, b, default_arguments:a, b = []}, call:{arguments:a, default_arguments:a}, call_deferred:{arguments:a, default_arguments:a}, callv:{arguments:a, b, default_arguments:a, b}, can_process:{arguments:, default_arguments:}, can_translate_messages:{arguments:, default_arguments:}, connect:{arguments:a, b, c, d, e, default_arguments:a, b, c, d = [], e = 0}, disconnect:{arguments:a, b, c, default_arguments:a, b, c}, divide:{arguments:a, b, default_arguments:a, b}, duplicate:{arguments:a, default_arguments:a = 15}, emit_signal:{arguments:a, default_arguments:a}, find_node:{arguments:a, b, c, default_arguments:a, b = True, c = True}, find_parent:{arguments:a, default_arguments:a}, free:{arguments:, default_arguments:}, get:{arguments:a, default_arguments:a}, get_child:{arguments:a, default_arguments:a}, get_child_count:{arguments:, default_arguments:}, get_children:{arguments:, default_arguments:}, get_class:{arguments:, default_arguments:}, get_custom_multiplayer:{arguments:, default_arguments:}, get_filename:{arguments:, default_arguments:}, get_groups:{arguments:, default_arguments:}, get_incoming_connections:{arguments:, default_arguments:}, get_index:{arguments:, default_arguments:}, get_indexed:{arguments:a, default_arguments:a}, get_instance_id:{arguments:, default_arguments:}, get_meta:{arguments:a, default_arguments:a}, get_meta_list:{arguments:, default_arguments:}, get_method_list:{arguments:, default_arguments:}, get_multiplayer:{arguments:, default_arguments:}, get_name:{arguments:, default_arguments:}, get_network_master:{arguments:, default_arguments:}, get_node:{arguments:a, default_arguments:a}, get_node_and_resource:{arguments:a, default_arguments:a}, get_node_or_null:{arguments:a, default_arguments:a}, get_owner:{arguments:, default_arguments:}, get_parent:{arguments:, default_arguments:}, get_path:{arguments:, default_arguments:}, get_path_to:{arguments:a, default_arguments:a}, get_pause_mode:{arguments:, default_arguments:}, get_physics_process_delta_time:{arguments:, default_arguments:}, get_position_in_parent:{arguments:, default_arguments:}, get_process_delta_time:{arguments:, default_arguments:}, get_process_priority:{arguments:, default_arguments:}, get_property_list:{arguments:, default_arguments:}, get_scene_instance_load_placeholder:{arguments:, default_arguments:}, get_script:{arguments:, default_arguments:}, get_signal_connection_list:{arguments:a, default_arguments:a}, get_signal_list:{arguments:, default_arguments:}, get_tree:{arguments:, default_arguments:}, get_viewport:{arguments:, default_arguments:}, has_meta:{arguments:a, default_arguments:a}, has_method:{arguments:a, default_arguments:a}, has_node:{arguments:a, default_arguments:a}, has_node_and_resource:{arguments:a, default_arguments:a}, has_signal:{arguments:a, default_arguments:a}, has_user_signal:{arguments:a, default_arguments:a}, is_a_parent_of:{arguments:a, default_arguments:a}, is_blocking_signals:{arguments:, default_arguments:}, is_class:{arguments:a, default_arguments:a}, is_connected:{arguments:a, b, c, default_arguments:a, b, c}, is_displayed_folded:{arguments:, default_arguments:}, is_greater_than:{arguments:a, default_arguments:a}, is_in_group:{arguments:a, default_arguments:a}, is_inside_tree:{arguments:, default_arguments:}, is_network_master:{arguments:, default_arguments:}, is_physics_processing:{arguments:, default_arguments:}, is_physics_processing_internal:{arguments:, default_arguments:}, is_processing:{arguments:, default_arguments:}, is_processing_input:{arguments:, default_arguments:}, is_processing_internal:{arguments:, default_arguments:}, is_processing_unhandled_input:{arguments:, default_arguments:}, is_processing_unhandled_key_input:{arguments:, default_arguments:}, is_queued_for_deletion:{arguments:, default_arguments:}, math_fight:{arguments:, default_arguments:}, move_child:{arguments:a, b, default_arguments:a, b}, multiply:{arguments:a, b, default_arguments:a, b}, notification:{arguments:a, b, default_arguments:a, b = False}, pi:{arguments:, default_arguments:}, print_stray_nodes:{arguments:, default_arguments:}, print_tree:{arguments:, default_arguments:}, print_tree_pretty:{arguments:, default_arguments:}, propagate_call:{arguments:a, b, c, default_arguments:a, b = [], c = False}, propagate_notification:{arguments:a, default_arguments:a}, property_list_changed_notify:{arguments:, default_arguments:}, queue_free:{arguments:, default_arguments:}, raise:{arguments:, default_arguments:}, remove_and_skip:{arguments:, default_arguments:}, remove_child:{arguments:a, default_arguments:a}, remove_from_group:{arguments:a, default_arguments:a}, remove_meta:{arguments:a, default_arguments:a}, replace_by:{arguments:a, b, default_arguments:a, b = False}, request_ready:{arguments:, default_arguments:}, rpc:{arguments:a, default_arguments:a}, rpc_config:{arguments:a, b, default_arguments:a, b}, rpc_id:{arguments:a, b, default_arguments:a, b}, rpc_unreliable:{arguments:a, default_arguments:a}, rpc_unreliable_id:{arguments:a, b, default_arguments:a, b}, rset:{arguments:a, b, default_arguments:a, b}, rset_config:{arguments:a, b, default_arguments:a, b}, rset_id:{arguments:a, b, c, default_arguments:a, b, c}, rset_unreliable:{arguments:a, b, default_arguments:a, b}, rset_unreliable_id:{arguments:a, b, c, default_arguments:a, b, c}, set:{arguments:a, b, default_arguments:a, b}, set_block_signals:{arguments:a, default_arguments:a}, set_custom_multiplayer:{arguments:a, default_arguments:a}, set_deferred:{arguments:a, b, default_arguments:a, b}, set_display_folded:{arguments:a, default_arguments:a}, set_filename:{arguments:a, default_arguments:a}, set_indexed:{arguments:a, b, default_arguments:a, b}, set_message_translation:{arguments:a, default_arguments:a}, set_meta:{arguments:a, b, default_arguments:a, b}, set_name:{arguments:a, default_arguments:a}, set_network_master:{arguments:a, b, default_arguments:a, b = True}, set_owner:{arguments:a, default_arguments:a}, set_pause_mode:{arguments:a, default_arguments:a}, set_physics_process:{arguments:a, default_arguments:a}, set_physics_process_internal:{arguments:a, default_arguments:a}, set_process:{arguments:a, default_arguments:a}, set_process_input:{arguments:a, default_arguments:a}, set_process_internal:{arguments:a, default_arguments:a}, set_process_priority:{arguments:a, default_arguments:a}, set_process_unhandled_input:{arguments:a, default_arguments:a}, set_process_unhandled_key_input:{arguments:a, default_arguments:a}, set_scene_instance_load_placeholder:{arguments:a, default_arguments:a}, set_script:{arguments:a, default_arguments:a}, subtract:{arguments:a, b, default_arguments:a, b}, sum:{arguments:a, default_arguments:a}, to_string:{arguments:, default_arguments:}, tr:{arguments:a, default_arguments:a}, update_configuration_warning:{arguments:, default_arguments:}} != |Dictionary| {_enter_tree:{arguments:, default_arguments:}, _exit_tree:{arguments:, default_arguments:}, _get:{arguments:a, default_arguments:a}, _get_configuration_warning:{arguments:, default_arguments:}, _get_editor_description:{arguments:, default_arguments:}, _get_import_path:{arguments:, default_arguments:}, _get_property_list:{arguments:, default_arguments:}, _init:{arguments:, default_arguments:}, _input:{arguments:a, default_arguments:a}, _notification:{arguments:a, default_arguments:a}, _physics_process:{arguments:a, default_arguments:a}, _process:{arguments:a, default_arguments:a}, _ready:{arguments:, default_arguments:}, _set:{arguments:a, b, default_arguments:a, b}, _set_editor_description:{arguments:a, default_arguments:a}, _set_import_path:{arguments:a, default_arguments:a}, _to_string:{arguments:, default_arguments:}, _unhandled_input:{arguments:a, default_arguments:a}, _unhandled_key_input:{arguments:a, default_arguments:a}, add:{arguments:a, b, default_arguments:a, b}, add_child:{arguments:a, b, default_arguments:a, b = False}, add_child_below_node:{arguments:a, b, c, default_arguments:a, b, c = False}, add_to_group:{arguments:a, b, default_arguments:a, b = False}, add_user_signal:{arguments:a, b, default_arguments:a, b = []}, call:{arguments:a, default_arguments:a}, call_deferred:{arguments:a, default_arguments:a}, callv:{arguments:a, b, default_arguments:a, b}, can_process:{arguments:, default_arguments:}, can_translate_messages:{arguments:, default_arguments:}, connect:{arguments:a, b, c, d, e, default_arguments:a, b, c, d = [], e = 0}, disconnect:{arguments:a, b, c, default_arguments:a, b, c}, divide:{arguments:a, b, default_arguments:a, b}, duplicate:{arguments:a, default_arguments:a = 15}, emit_signal:{arguments:a, default_arguments:a}, find_node:{arguments:a, b, c, default_arguments:a, b = True, c = True}, find_parent:{arguments:a, default_arguments:a}, free:{arguments:, default_arguments:}, get:{arguments:a, default_arguments:a}, get_child:{arguments:a, default_arguments:a}, get_child_count:{arguments:, default_arguments:}, get_children:{arguments:, default_arguments:}, get_class:{arguments:, default_arguments:}, get_custom_multiplayer:{arguments:, default_arguments:}, get_filename:{arguments:, default_arguments:}, get_groups:{arguments:, default_arguments:}, get_incoming_connections:{arguments:, default_arguments:}, get_index:{arguments:, default_arguments:}, get_indexed:{arguments:a, default_arguments:a}, get_instance_id:{arguments:, default_arguments:}, get_meta:{arguments:a, default_arguments:a}, get_meta_list:{arguments:, default_arguments:}, get_method_list:{arguments:, default_arguments:}, get_multiplayer:{arguments:, default_arguments:}, get_name:{arguments:, default_arguments:}, get_network_master:{arguments:, default_arguments:}, get_node:{arguments:a, default_arguments:a}, get_node_and_resource:{arguments:a, default_arguments:a}, get_node_or_null:{arguments:a, default_arguments:a}, get_owner:{arguments:, default_arguments:}, get_parent:{arguments:, default_arguments:}, get_path:{arguments:, default_arguments:}, get_path_to:{arguments:a, default_arguments:a}, get_pause_mode:{arguments:, default_arguments:}, get_physics_process_delta_time:{arguments:, default_arguments:}, get_position_in_parent:{arguments:, default_arguments:}, get_process_delta_time:{arguments:, default_arguments:}, get_process_priority:{arguments:, default_arguments:}, get_property_list:{arguments:, default_arguments:}, get_scene_instance_load_placeholder:{arguments:, default_arguments:}, get_script:{arguments:, default_arguments:}, get_signal_connection_list:{arguments:a, default_arguments:a}, get_signal_list:{arguments:, default_arguments:}, get_tree:{arguments:, default_arguments:}, get_viewport:{arguments:, default_arguments:}, has_meta:{arguments:a, default_arguments:a}, has_method:{arguments:a, default_arguments:a}, has_node:{arguments:a, default_arguments:a}, has_node_and_resource:{arguments:a, default_arguments:a}, has_signal:{arguments:a, default_arguments:a}, has_user_signal:{arguments:a, default_arguments:a}, is_a_parent_of:{arguments:a, default_arguments:a}, is_blocking_signals:{arguments:, default_arguments:}, is_class:{arguments:a, default_arguments:a}, is_connected:{arguments:a, b, c, default_arguments:a, b, c}, is_displayed_folded:{arguments:, default_arguments:}, is_greater_than:{arguments:a, default_arguments:a}, is_in_group:{arguments:a, default_arguments:a}, is_inside_tree:{arguments:, default_arguments:}, is_network_master:{arguments:, default_arguments:}, is_physics_processing:{arguments:, default_arguments:}, is_physics_processing_internal:{arguments:, default_arguments:}, is_processing:{arguments:, default_arguments:}, is_processing_input:{arguments:, default_arguments:}, is_processing_internal:{arguments:, default_arguments:}, is_processing_unhandled_input:{arguments:, default_arguments:}, is_processing_unhandled_key_input:{arguments:, default_arguments:}, is_queued_for_deletion:{arguments:, default_arguments:}, math_fight:{arguments:, default_arguments:}, move_child:{arguments:a, b, default_arguments:a, b}, multiply:{arguments:a, b, default_arguments:a, b}, notification:{arguments:a, b, default_arguments:a, b = False}, pi:{arguments:, default_arguments:}, print_stray_nodes:{arguments:, default_arguments:}, print_tree:{arguments:, default_arguments:}, print_tree_pretty:{arguments:, default_arguments:}, propagate_call:{arguments:a, b, c, default_arguments:a, b = [], c = False}, propagate_notification:{arguments:a, default_arguments:a}, property_list_changed_notify:{arguments:, default_arguments:}, queue_free:{arguments:, default_arguments:}, raise:{arguments:, default_arguments:}, remove_and_skip:{arguments:, default_arguments:}, remove_child:{arguments:a, default_arguments:a}, remove_from_group:{arguments:a, default_arguments:a}, remove_meta:{arguments:a, default_arguments:a}, replace_by:{arguments:a, b, default_arguments:a, b = False}, request_ready:{arguments:, default_arguments:}, rpc:{arguments:a, default_arguments:a}, rpc_config:{arguments:a, b, default_arguments:a, b}, rpc_id:{arguments:a, b, default_arguments:a, b}, rpc_unreliable:{arguments:a, default_arguments:a}, rpc_unreliable_id:{arguments:a, b, default_arguments:a, b}, rset:{arguments:a, b, default_arguments:a, b}, rset_config:{arguments:a, b, default_arguments:a, b}, rset_id:{arguments:a, b, c, default_arguments:a, b, c}, rset_unreliable:{arguments:a, b, default_arguments:a, b}, rset_unreliable_id:{arguments:a, b, c, default_arguments:a, b, c}, set:{arguments:a, b, default_arguments:a, b}, set_block_signals:{arguments:a, default_arguments:a}, set_custom_multiplayer:{arguments:a, default_arguments:a}, set_deferred:{arguments:a, b, default_arguments:a, b}, set_display_folded:{arguments:a, default_arguments:a}, set_filename:{arguments:a, default_arguments:a}, set_indexed:{arguments:a, b, default_arguments:a, b}, set_message_translation:{arguments:a, default_arguments:a}, set_meta:{arguments:a, b, default_arguments:a, b}, set_name:{arguments:a, default_arguments:a}, set_network_master:{arguments:a, b, default_arguments:a, b = True}, set_owner:{arguments:a, default_arguments:a}, set_pause_mode:{arguments:a, default_arguments:a}, set_physics_process:{arguments:a, default_arguments:a}, set_physics_process_internal:{arguments:a, default_arguments:a}, set_process:{arguments:a, default_arguments:a}, set_process_input:{arguments:a, default_arguments:a}, set_process_internal:{arguments:a, default_arguments:a}, set_process_priority:{arguments:a, default_arguments:a}, set_process_unhandled_input:{arguments:a, default_arguments:a}, set_process_unhandled_key_input:{arguments:a, default_arguments:a}, set_scene_instance_load_placeholder:{arguments:a, default_arguments:a}, set_script:{arguments:a, default_arguments:a}, subtract:{arguments:a, b, default_arguments:a, b}, sum:{arguments:a, default_arguments:a}, to_string:{arguments:, default_arguments:}, tr:{arguments:a, default_arguments:a}, update_configuration_warning:{arguments:, default_arguments:}}",
"success": true
} ],
"context": "When we create two of it for the same script",
"fullname": "test_When_we_create_two_of_it_for_the_same_script",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 3,
"path": "res://tests/integration/script_director.test.gd",
"source": {
"containers": [ "res://tests/integration", "res://tests" ],
"method": "",
"path": "res://tests/integration/script_director.test.gd",
"tags": [  ],
"test": ExtResource( 13 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 3
}, {
"context": "Given is_on_floor",
"methods": [ {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then it can be stubbed",
"expected": "|bool| True == true",
"success": true
} ],
"context": "From a user-defined script",
"fullname": "test_stubbing_is_on_floor_method_from_user_defined_class",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then it can be stubbed",
"expected": "|bool| True == true",
"success": true
} ],
"context": "From a built-in KinematicBody2D2",
"fullname": "test_stubbing_is_on_floor_method_from_builtin_class2",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then it can be stubbed",
"expected": "|bool| True == true",
"success": true
} ],
"context": "From a child node of a scene without scripts",
"fullname": "test_stubbing_is_on_floor_as_child_node_with_no_script",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 3,
"path": "res://tests/integration/on_floor.test.gd",
"source": {
"containers": [ "res://tests/integration", "res://tests" ],
"method": "",
"path": "res://tests/integration/on_floor.test.gd",
"tags": [  ],
"test": ExtResource( 5 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 3
}, {
"context": "Given a Boolean Assertion",
"methods": [ {
"assertions": [ {
"actual": "|bool| True != false",
"context": "",
"expected": "|bool| True == false",
"success": false
} ],
"context": " intentional failure",
"fullname": "test_intentional_failure",
"passed": 0,
"success": false,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then it passes",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When calling asserts.is_true(true)",
"fullname": "test_when_calling_asserts_is_true",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| False == false",
"context": "Then it passes",
"expected": "|bool| False == false",
"success": true
} ],
"context": "When calling asserts.is_false(false)",
"fullname": "test_when_calling_asserts_is_false",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 2,
"path": "res://tests/unit/boolean.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/boolean.test.gd",
"tags": [  ],
"test": ExtResource( 11 ),
"yield_time": 0.0
},
"success": false,
"time_taken": 0.0,
"total": 3
}, {
"context": "Given A File Assertion",
"methods": [ {
"assertions": [ {
"actual": "res://somefile.gd does not exist",
"context": "Then it passes",
"expected": "res://somefile.gd does not exist",
"success": true
} ],
"context": "When calling asserts.file_does_not_exist when there is no file",
"fullname": "test_when_calling_file_does_not_exist_when_there_is_no_file",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "res://tests/unit/file.test.gd exists",
"context": "Then it passes",
"expected": "res://tests/unit/file.test.gd exists",
"success": true
} ],
"context": "When calling asserts.file_exists when the file is this suite",
"fullname": "test_when_calling_file_exists_when_file_is_self",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": " does not exist",
"context": "Then it passes",
"expected": " does not exist",
"success": true
} ],
"context": "When calling asserts file does not exist when path is empty",
"fullname": "test_when_calling_file_does_not_exist_when_path_is_empty",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 3,
"path": "res://tests/unit/file.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/file.test.gd",
"tags": [  ],
"test": ExtResource( 3 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 3
}, {
"context": "Given a Scene Director",
"methods": [ {
"assertions": [ {
"actual": "|int| 9999 is equal to |int| 9999",
"context": "Then we get the stubbed return value",
"expected": "|int| 9999 is equal to |int| 9999",
"success": true
} ],
"context": "When we call a method from the root node that we stubbed",
"fullname": "test_When_we_call_a_method_from_the_root_node_that_we_stubbed",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|NodePath| A is equal to |NodePath| A",
"context": "We have the correct NodePath Set",
"expected": "|NodePath| A is equal to |NodePath| A",
"success": true
} ],
"context": "When we add it to the tree it runs",
"fullname": "test_When_we_add_it_to_the_tree_it_runs",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|Dictionary| {.:[Reference:1484], A:[Reference:1485], A/B:[Reference:1487], C:[Reference:1486], C/D:[Reference:1488]} is not equal to |Dictionary| {.:[Reference:1523], A:[Reference:1524], A/B:[Reference:1526], C:[Reference:1525], C/D:[Reference:1527]}",
"context": "Then they do not share resources",
"expected": "|Dictionary| {.:[Reference:1484], A:[Reference:1485], A/B:[Reference:1487], C:[Reference:1486], C/D:[Reference:1488]} != |Dictionary| {.:[Reference:1523], A:[Reference:1524], A/B:[Reference:1526], C:[Reference:1525], C/D:[Reference:1527]}",
"success": true
} ],
"context": "When we create two of it for the same scene",
"fullname": "test_When_we_create_two_of_it_for_the_same_scene",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 999 is equal to |int| 999",
"context": "Then we get the stubbed return value",
"expected": "|int| 999 is equal to |int| 999",
"success": true
} ],
"context": "When we call a method from a child node that we stubbed",
"fullname": "test_When_we_call_a_method_from_a_child_node_that_we_stubbed",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 99 is equal to |int| 99",
"context": "Then we get the stubbed return value",
"expected": "|int| 99 is equal to |int| 99",
"success": true
} ],
"context": "When we call a method from a grandchild node that we stubbed",
"fullname": "test_When_we_call_a_method_from_a_grandchild_node_that_we_stubbed",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 5,
"path": "res://tests/integration/scene_director.test.gd",
"source": {
"containers": [ "res://tests/integration", "res://tests" ],
"method": "",
"path": "res://tests/integration/scene_director.test.gd",
"tags": [  ],
"test": ExtResource( 4 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 5
}, {
"context": "Given a Null Assertion",
"methods": [ {
"assertions": [ {
"actual": "|Object| [Deleted Object] == null",
"context": "A Freed Node is null in Engine 3.2.2 or greater",
"expected": "|Object| [Deleted Object] == null",
"success": true
} ],
"context": "When calling freed object is null",
"fullname": "test_when_calling_freed_object_is_not_null",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|null| Null == null",
"context": "Then it passes",
"expected": "|null| Null == null",
"success": true
} ],
"context": "When calling asserts.is_null(null)",
"fullname": "test_when_calling_null_is_null",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|Object| [Node:1653] != null",
"context": "Then it passes",
"expected": "|Object| [Node:1653] != null",
"success": true
} ],
"context": "When calling Node is not null",
"fullname": "test_when_calling_node_is_not_null",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 3,
"path": "res://tests/unit/null.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/null.test.gd",
"tags": [  ],
"test": ExtResource( 12 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 3
}, {
"context": "Given an Equality Assertion",
"methods": [ {
"assertions": [ {
"actual": "|int| 2 is equal or greater |int| 1",
"context": "Then it passes",
"expected": "|int| 2 is equal or greater |int| 1",
"success": true
} ],
"context": "When calling asserts.is_equal_or_greater_than(2, 1)",
"fullname": "test_when_calling_is_equal_or_greater_than",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 1 is equal to |int| 1",
"context": "Then it passes",
"expected": "|int| 1 is equal to |int| 1",
"success": true
} ],
"context": "When calling asserts.is_equal(1, 1)",
"fullname": "test_when_calling_is_equal",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 1 is equal or less than |int| 1",
"context": "Then it passes!",
"expected": "|int| 1 is equal or less than |int| 1",
"success": true
} ],
"context": "When calling asserts.is_equal_or_less_than(1, 1)",
"fullname": "test_when_calling_is_equal_or_less_than_with_equal_values",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 5 is not equal to |int| 6",
"context": "Then it passes",
"expected": "|int| 5 != |int| 6",
"success": true
} ],
"context": "When callign asserts.is_not_equal(5, 6)",
"fullname": "test_when_calling_is_not_equal",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 1 is less than |int| 2",
"context": "Then it passes",
"expected": "|int| 1 is less than |int| 2",
"success": true
} ],
"context": "When calling asserts.is_less_than(2, 1)",
"fullname": "test_when_calling_is_less_than",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 1 is equal or greater |int| 1",
"context": "Then it passes",
"expected": "|int| 1 is equal or greater |int| 1",
"success": true
} ],
"context": "When calling asserts.is_equal_or_greater_than(1, 1)",
"fullname": "test_when_calling_is_equal_or_greater_than_with_equal_values",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 2 is greater than |int| 1",
"context": "Then it passes",
"expected": "|int| 2 is greater than |int| 1",
"success": true
} ],
"context": "When calling asserts.is_greater_than(2, 1)",
"fullname": "test_when_calling_is_greater_than",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 7,
"path": "res://tests/unit/equality.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/equality.test.gd",
"tags": [  ],
"test": ExtResource( 8 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 7
}, {
"context": "Given A Range Assertion",
"methods": [ {
"assertions": [ {
"actual": "10 is not in range(0, 10)",
"context": "Then it passes",
"expected": "10 is not in range(0, 10)",
"success": true
} ],
"context": "When calling is (10) not in range (in range(0, 10)",
"fullname": "test_when_calling_is_not_in_range",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "0 is in range(0, 10)",
"context": "Then it passes",
"expected": "0 is in range(0, 10)",
"success": true
} ],
"context": "When calling is (0) in range(0, 10)",
"fullname": "test_when_calling_is_in_range",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 2,
"path": "res://tests/unit/range.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/range.test.gd",
"tags": [  ],
"test": ExtResource( 15 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 2
}, {
"context": "Given the Addition Operator",
"methods": [ {
"assertions": [ {
"actual": "|int| 0 is equal to |int| 0",
"context": "",
"expected": "|int| 0 is equal to |int| 0",
"success": true
} ],
"context": "When we subtract 2 from 2 we get 0",
"fullname": "test_subtract",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 2 is equal to |int| 2",
"context": "",
"expected": "|int| 2 is equal to |int| 2",
"success": true
} ],
"context": "When we subtract 5 from 3 we get 2",
"fullname": "test_subtract",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 1 is equal to |int| 1",
"context": "",
"expected": "|int| 1 is equal to |int| 1",
"success": true
} ],
"context": "When we subtract 7 from 6 we get 1",
"fullname": "test_subtract",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 4 is equal to |int| 4",
"context": "",
"expected": "|int| 4 is equal to |int| 4",
"success": true
} ],
"context": "When we add 2 to 2 we get 4",
"fullname": "test_add",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 8 is equal to |int| 8",
"context": "",
"expected": "|int| 8 is equal to |int| 8",
"success": true
} ],
"context": "When we add 5 to 3 we get 8",
"fullname": "test_add",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 13 is equal to |int| 13",
"context": "",
"expected": "|int| 13 is equal to |int| 13",
"success": true
} ],
"context": "When we add 7 to 6 we get 13",
"fullname": "test_add",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 6,
"path": "res://tests/unit/parameters.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/parameters.test.gd",
"tags": [  ],
"test": ExtResource( 16 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 6
}, {
"context": "Dummy Passing Test",
"methods": [ {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Passing!",
"expected": "|bool| True == true",
"success": true
} ],
"context": "This method passes",
"fullname": "test_this_method_passes",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 1,
"path": "res://tests/unit/suite.test.gd.DummyOne",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/suite.test.gd.DummyOne",
"tags": [  ],
"test": SubResource( 1 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 1
}, {
"context": "Dummy Test 2",
"methods": [ {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Passing!",
"expected": "|bool| True == true",
"success": true
} ],
"context": "This method passes",
"fullname": "test_this_method_passes",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 1,
"path": "res://tests/unit/suite.test.gd.DummyTwo",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/suite.test.gd.DummyTwo",
"tags": [  ],
"test": SubResource( 2 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 1
}, {
"context": "Given a String Assertion",
"methods": [ {
"assertions": [ {
"actual": "impsum does not begin with bleh lorem",
"context": "Then it passes",
"expected": "impsum does not begin with bleh lorem",
"success": true
} ],
"context": "When calling asserts.string_does_not_begin_with('lorem', 'impsum')",
"fullname": "test_when_calling_string_does_not_begin_with",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "lorem impsum contains em im",
"context": "Then it passes",
"expected": "lorem impsum contains em im",
"success": true
} ],
"context": "When calling asserts.string_contains('em im', 'lorem impsum')",
"fullname": "test_when_calling_string_contains",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "lorem impsum begins with lorem",
"context": "Then it passes",
"expected": "lorem impsum begins with lorem",
"success": true
} ],
"context": "When calling asserts.string_begins_with('lorem', 'lorem impsum')",
"fullname": "test_when_calling_string_begins_with",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "impsum does not end with lorem",
"context": "Then it passes",
"expected": "impsum does not end with lorem",
"success": true
} ],
"context": "When calling asserts.string_does_not_end_with('lorem', 'impsum')",
"fullname": "test_when_calling_string_does_not_end_with",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "impsum does not contain beem im",
"context": "Then it passes",
"expected": "impsum does not contain beem im",
"success": true
} ],
"context": "When calling asserts.string_does_not_contain('em im', 'impsum')",
"fullname": "test_when_calling_string_does_not_contain",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "lorem impsum ends with impsum",
"context": "Then it passes",
"expected": "lorem impsum ends with impsum",
"success": true
} ],
"context": "When calling asserts.string_ends_with('impsum', 'lorem impsum')",
"fullname": "test_when_calling_string_ends_with",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 6,
"path": "res://tests/unit/string.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/string.test.gd",
"tags": [  ],
"test": ExtResource( 9 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 6
}, {
"context": "Given a Test Script",
"methods": [ {
"assertions": [ {
"actual": "|bool| True == true",
"context": "if the test didn't break this works",
"expected": "|bool| True == true",
"success": true
} ],
"context": " we can omit describe",
"fullname": "test_we_can_omit_describe",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|int| 2 is equal to |int| 2",
"context": "",
"expected": "|int| 2 is equal to |int| 2",
"success": true
} ],
"context": " when we omit context we can see expected and got under method",
"fullname": "test_when_we_omit_context_we_can_see_expected_and_got_under_method",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|int| 10 is greater than |int| 1",
"context": "We get an array of multiple values back",
"expected": "|int| 10 is greater than |int| 1",
"success": true
}, {
"actual": "|int| 0 is not equal to |int| 9",
"context": "With different values",
"expected": "|int| 0 != |int| 9",
"success": true
}, {
"actual": "|int| 10 is greater than |int| 1",
"context": "And we can track multiple properties",
"expected": "|int| 10 is greater than |int| 1",
"success": true
} ],
"context": "When we record properties",
"fullname": "test_we_can_record_properties",
"passed": 3,
"success": true,
"time": 0.0,
"total": 3
} ],
"passed": 3,
"path": "res://tests/unit/test.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/test.test.gd",
"tags": [  ],
"test": ExtResource( 19 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 3
}, {
"context": "Given a Signal Watcher",
"methods": [ {
"assertions": [ {
"actual": "Signal: example was not emitted from [Node:1766]",
"context": "Then it does not capture the non-emitted signal",
"expected": "Signal: example was not emitted from [Node:1766]",
"success": true
} ],
"context": "When we watch and do not emit a signal",
"fullname": "test_When_we_watch_and_do_not_emit_a_signal",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "signal: multiple was emitted from [Node:1766] 2",
"context": "Then we can track how many times we emitted it",
"expected": "signal: multiple was emitted from [Node:1766] 2",
"success": true
} ],
"context": "When we watch and signal and emit it multiple times",
"fullname": "test_When_we_watch_a_signal_and_emit_it_multiple_times",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Signal: example was emitted from [Node:1766] with arguments: [1, 20, 5]",
"context": "Then it captures any arguments that where passed when the signal was emitted",
"expected": "Signal: example was emitted from [Node:1766] with arguments: [1, 20, 5]",
"success": true
} ],
"context": "When we watch a signal from an object with no bound variables",
"fullname": "test_When_we_watch_a_signal_from_an_object_with_no_bound_variables",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "signal: example was emitted from [Node:1766]",
"context": "Then it captures the emitted signal",
"expected": "signal: example was emitted from [Node:1766]",
"success": true
} ],
"context": "When we watch and emit a signal",
"fullname": "test_When_we_watch_and_emit_a_signal",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 4,
"path": "res://tests/unit/watcher.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/watcher.test.gd",
"tags": [  ],
"test": ExtResource( 17 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 4
}, {
"context": "Given a Test Double",
"methods": [ {
"assertions": [ {
"actual": "method: add was called with arguments: [10, 10]",
"context": "Then we can see that it was called with those arguments",
"expected": "method: add was called with arguments: [10, 10]",
"success": true
} ],
"context": "When we pass arguments to a method call that we are spying on",
"fullname": "test_When_we_pass_arguments_to_a_method_call_that_we_are_spying_on",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 4 is equal to |int| 4",
"context": "Then it calls its super implementation by default",
"expected": "|int| 4 is equal to |int| 4",
"success": true
}, {
"actual": "|int| 9999 is equal to |int| 9999",
"context": "Then it does not call its super implementation when arguments patterns match a different return value",
"expected": "|int| 9999 is equal to |int| 9999",
"success": true
} ],
"context": "When we call a method that we stubbed to call its super implementation by default",
"fullname": "test_When_we_call_a_method_that_we_stubbed_to_call_its_super_implementation_by_default",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|null| Null == null",
"context": "Then we get the stubbed value back",
"expected": "|null| Null == null",
"success": true
} ],
"context": "When we stub a method of a doubled inner class",
"fullname": "test_When_we_stub_a_method_of_a_double_inner_class",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|String| Jackie is equal to |String| Jackie",
"context": "Then we can double the object successfully",
"expected": "|String| Jackie is equal to |String| Jackie",
"success": true
} ],
"context": "When we pass in dependecies on direct",
"fullname": "test_When_we_pass_in_deps_on_direct",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 99 is equal to |int| 99",
"context": "Then it affects the state of the double",
"expected": "|int| 99 is equal to |int| 99",
"success": true
} ],
"context": "When we pass a funcref as a subcall",
"fullname": "test_When_we_pass_a_funcref_as_a_subcall",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|float| 6.283185 is equal to |float| 6.283185",
"context": "Then we can call the static methods of that inner double",
"expected": "|float| 6.283185 is equal to |float| 6.283185",
"success": true
} ],
"context": "When we add an doubled inner class to it",
"fullname": "test_When_we_add_a_doubled_inner_class_to_it",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "(1, 1) is builtin: Vector2",
"context": "Then we can call methods on it",
"expected": "(1, 1) is builtin: Vector2",
"success": true
} ],
"context": "When we double an inner class",
"fullname": "test_When_we_double_an_inner_class",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then it returns true",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we call a method that we have stubbed to return true",
"fullname": "test_When_we_call_a_method_that_we_have_stubbed_to_return_true",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| True is equal to |bool| True",
"context": "Then we can call it",
"expected": "|bool| True is equal to |bool| True",
"success": true
} ],
"context": "When we stubbed a keyworded method by passing in the correct keyword",
"fullname": "test_When_we_stubbed_a_keyword_method_by_passing_in_the_correct_keyword",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|Object| [Node:1706] is equal to |Object| [Node:1706]",
"context": "Then it returns that same node",
"expected": "|Object| [Node:1706] is equal to |Object| [Node:1706]",
"success": true
} ],
"context": "When we call a method that we have stubbed to return a node",
"fullname": "test_When_we_call_a_method_that_we_have_stubbed_to_return_a_node",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 100 is equal to |int| 100",
"context": "Then it returns the default stubbed value when the arguments don't match any pattern",
"expected": "|int| 100 is equal to |int| 100",
"success": true
}, {
"actual": "|int| 1000 is equal to |int| 1000",
"context": "Then it returns the the corresponding value to the pattern the arguments matched",
"expected": "|int| 1000 is equal to |int| 1000",
"success": true
} ],
"context": "When we call a method that was stubbed to return different values based on argument patterns",
"fullname": "test_When_we_call_a_method_that_was_stubbed_to_return_different_values_based_on_argument_patterns",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|String| Jackie is equal to |String| Jackie",
"context": "Then we can double the object successfully",
"expected": "|String| Jackie is equal to |String| Jackie",
"success": true
} ],
"context": "When we pass in dependecies on double",
"fullname": "test_When_we_pass_in_deps_on_double",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|null| Null == null",
"context": "Then we get null",
"expected": "|null| Null == null",
"success": true
} ],
"context": "When we call a method that we have dummied",
"fullname": "test_When_we_call_a_method_that_we_have_dummied",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 9999 is equal to |int| 9999",
"context": "Then it returns the corresponding value when the pattern matches",
"expected": "|int| 9999 is equal to |int| 9999",
"success": true
} ],
"context": "When we call a method that was stubbed with an argument pattern that includes a non-primitive object",
"fullname": "test_When_we_call_a_method_that_was_stubbed_with_an_argument_pattern_that_includes_a_non_primitive_object",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 4 is equal to |int| 4",
"context": "Then we get the correct result",
"expected": "|int| 4 is equal to |int| 4",
"success": true
} ],
"context": "When we call an add(x, y) method that we haven't directed",
"fullname": "test_When_we_call_an_add_method_that_we_have_not_directed",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "add was called",
"context": "Then we can see that it was called at least once",
"expected": "add was called",
"success": true
} ],
"context": "When we call a method that we are spying on",
"fullname": "test_When_we_call_a_method_that_we_are_spying_on",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 9999 is equal to |int| 9999",
"context": "Then it returns the corresponding value when the partial pattern matches",
"expected": "|int| 9999 is equal to |int| 9999",
"success": true
} ],
"context": "When we call a method that was stubbed with a partial (ie using any()) argument pattern",
"fullname": "test_When_we_call_a_method_that_was_stubbed_with_a_partial_argument_pattern",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 99 is equal to |int| 99",
"context": "Then it returns a value",
"expected": "|int| 99 is equal to |int| 99",
"success": true
} ],
"context": "When we pass a funcref as a subcall that returns",
"fullname": "test_When_we_pass_a_funcref_as_a_subcall_that_returns_a_value",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|Array| [10, 5] is equal to |Array| [10, 5]",
"context": "Then it returns a value",
"expected": "|Array| [10, 5] is equal to |Array| [10, 5]",
"success": true
} ],
"context": "When we pass an Object with a call_func function",
"fullname": "test_When_we_pass_an_object_with_callfunc_method_as_a_subcall",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 19,
"path": "res://tests/integration/test_double.test.gd",
"source": {
"containers": [ "res://tests/integration", "res://tests" ],
"method": "",
"path": "res://tests/integration/test_double.test.gd",
"tags": [  ],
"test": ExtResource( 14 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 19
}, {
"context": "Given an Object Assertion",
"methods": [ {
"assertions": [ {
"actual": "[Node:1610] does not have meta: bad_meta",
"context": "Then it passes",
"expected": "[Node:1610] does not have meta: bad_meta",
"success": true
} ],
"context": "When calling asserts.object_does_not_have_meta()",
"fullname": "test_when_calling_does_not_have_meta",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is freed from memory",
"context": "Then it passes",
"expected": "Null is freed from memory",
"success": true
} ],
"context": "When calling asserts.is_freed(freed_object",
"fullname": "test_when_calling_freed_object_is_freed",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:1674] is not freed",
"context": "Then it passes",
"expected": "[Node:1674] is not freed",
"success": true
} ],
"context": "When calling asserts.is_not_freed(unfreed_object)",
"fullname": "test_when_calling_unfreed_object_is_not_freed",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:1610] has meta: dummy",
"context": "Then it passes",
"expected": "[Node:1610] has meta: dummy",
"success": true
}, {
"actual": "[Node:1610] has meta: dummy",
"context": "Then it passes",
"expected": "[Node:1610] has meta: dummy",
"success": true
} ],
"context": "When calling asserts.object_has_meta() after adding metadata",
"fullname": "test_when_calling_has_meta_after_adding_metadata",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "[Node:1610] does not have meta: confusing",
"context": "Then it passes",
"expected": "[Node:1610] does not have meta: confusing",
"success": true
} ],
"context": "When calling asserts.object_has_meta with real key but null val",
"fullname": "test_when_calling_does_not_have_meta_real_key_null_value_pair",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:1610] has method: title",
"context": "Then it passes",
"expected": "[Node:1610] has method: title",
"success": true
} ],
"context": "When calling has_method('title')",
"fullname": "test_when_calling_has_method_title",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:1733] is blocking signals",
"context": "Then it passes",
"expected": "[Node:1733] is blocking signals",
"success": true
} ],
"context": "When calling is blocking signals while blocking signals",
"fullname": "test_is_blocking_signals",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:1610] does not have user signal: false_signal",
"context": "Then it passes",
"expected": "[Node:1610] does not have user signal: false_signal",
"success": true
} ],
"context": "When calling obj_does_not_have_user_signal with fake signal",
"fullname": "test_when_calling_does_not_have_user_signal",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:1610] does not have user signal: builtin_dummy",
"context": "Then it passes",
"expected": "[Node:1610] does not have user signal: builtin_dummy",
"success": true
} ],
"context": "When calling does not have user signal with class signal",
"fullname": "test_when_calling_does_not_have_user_signal_with_class_signal_constant",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:1777] is queued for deletion",
"context": "Then it passes",
"expected": "[Node:1777] is queued for deletion",
"success": true
} ],
"context": "When calling asserts.object_is_queued for deletion after calling queue_free",
"fullname": "test_when_calling_obj_is_queued_for_deletion_after_calling_queue_free",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:1610].builtin_dummy is not connected to [Node:1610].title",
"context": "Then it passes",
"expected": "[Node:1610].builtin_dummy is not connected to [Node:1610].title",
"success": true
} ],
"context": "When calling asserts object is not connected with an invalid connection",
"fullname": "test_when_calling_obj_is_not_connected_with_an_invalid_connection",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:1610] has user signal: dummy_signal",
"context": "Then it passes",
"expected": "[Node:1610] has user signal: dummy_signal",
"success": true
} ],
"context": "When calling obj_has_user_signal after adding a signal",
"fullname": "test_when_calling_has_user_signal_after_adding_a_signal",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:1610].builtin_dummy is connected to [Node:1610].title",
"context": "Then it passes",
"expected": "[Node:1610].builtin_dummy is connected to [Node:1610].title",
"success": true
} ],
"context": "When calling asserts object is connected with a valid connection",
"fullname": "test_when_calling_obj_is_connected_with_a_real_connection",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:1832] is not blocking signals",
"context": "Then it passes",
"expected": "[Node:1832] is not blocking signals",
"success": true
} ],
"context": "When calling is not blocking signals while not blocking signals",
"fullname": "test_is_not_blocking_signals",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:1845] is not queued for deletion",
"context": "Then it passes",
"expected": "[Node:1845] is not queued for deletion",
"success": true
} ],
"context": "When calling asserts.object_is_not_for_queued_deletion after not calling queue free()",
"fullname": "test_when_calling_obj_is_not_for_queued_deletion_after_not_calling_queue_free",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 15,
"path": "res://tests/unit/object.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/object.test.gd",
"tags": [  ],
"test": ExtResource( 7 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 15
}, {
"context": "Given an Is Not Instance of class/type Assertion",
"methods": [ {
"assertions": [ {
"actual": "Null is not builtin: Basis",
"context": "Then it passes",
"expected": "Null is not builtin: Basis",
"success": true
} ],
"context": "when calling asserts.is_not_Basis(null)",
"fullname": "test_when_calling_is_not_Basis",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: float",
"context": "Then it passes",
"expected": "Null is not builtin: float",
"success": true
} ],
"context": "when calling asserts.is_not_float(null)",
"fullname": "test_when_calling_is_not_float",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: PoolByteArray",
"context": "Then it passes",
"expected": "Null is not builtin: PoolByteArray",
"success": true
} ],
"context": "when calling asserts.is_not_PoolByteArray(null)",
"fullname": "test_when_calling_is_not_PoolByteArray",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: NodePath",
"context": "Then it passes",
"expected": "Null is not builtin: NodePath",
"success": true
} ],
"context": "when calling asserts.is_not_NodePath(null)",
"fullname": "test_when_calling_is_not_NodePath",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: PoolStringArray",
"context": "Then it passes",
"expected": "Null is not builtin: PoolStringArray",
"success": true
} ],
"context": "when calling asserts.is_not_PoolStringArray(null)",
"fullname": "test_when_calling_is_not_PoolStringArray",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: RID",
"context": "Then it passes",
"expected": "Null is not builtin: RID",
"success": true
} ],
"context": "when calling asserts.is_not_RID(null)",
"fullname": "test_when_calling_is_not_RID",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Transform2D",
"context": "Then it passes",
"expected": "Null is not builtin: Transform2D",
"success": true
} ],
"context": "when calling asserts.is_not_Transform2D(null)",
"fullname": "test_when_calling_is_not_Transform2D",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Array",
"context": "Then it passes",
"expected": "Null is not builtin: Array",
"success": true
} ],
"context": "when calling asserts.is_not_Array(null)",
"fullname": "test_when_calling_is_not_Array",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: int",
"context": "Then it passes",
"expected": "Null is not builtin: int",
"success": true
} ],
"context": "when calling asserts.is_not_int(null)",
"fullname": "test_when_calling_is_not_int",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: PoolRealArray",
"context": "Then it passes",
"expected": "Null is not builtin: PoolRealArray",
"success": true
} ],
"context": "when calling asserts.is_not_PoolRealArray(null)",
"fullname": "test_when_calling_is_not_PoolRealArray",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: PoolVector2Array",
"context": "Then it passes",
"expected": "Null is not builtin: PoolVector2Array",
"success": true
} ],
"context": "when calling asserts.is_not_PoolVector2Array(null)",
"fullname": "test_when_calling_is_not_PoolVector2Array",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: PoolVector3Array",
"context": "Then it passes",
"expected": "Null is not builtin: PoolVector3Array",
"success": true
} ],
"context": "when calling asserts.is_not_PoolVector3Array(null)",
"fullname": "test_when_calling_is_not_PoolVector3Array",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Quat",
"context": "Then it passes",
"expected": "Null is not builtin: Quat",
"success": true
} ],
"context": "when calling asserts.is_not_Quat(null)",
"fullname": "test_when_calling_is_not_Quat",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: String",
"context": "Then it passes",
"expected": "Null is not builtin: String",
"success": true
} ],
"context": "when calling asserts.is_not_String(null)",
"fullname": "test_when_calling_is_not_String",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Transform",
"context": "Then it passes",
"expected": "Null is not builtin: Transform",
"success": true
} ],
"context": "when calling asserts.is_not_Transform(null)",
"fullname": "test_when_calling_is_not_Transform",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: AABB",
"context": "Then it passes",
"expected": "Null is not builtin: AABB",
"success": true
} ],
"context": "when calling asserts.is_not_AABB(null)",
"fullname": "test_when_calling_is_not_AABB",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: PoolColorArray",
"context": "Then it passes",
"expected": "Null is not builtin: PoolColorArray",
"success": true
} ],
"context": "when calling asserts.is_not_PoolColorArray(null)",
"fullname": "test_when_calling_is_not_PoolColorArray",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: bool",
"context": "Then it passes",
"expected": "Null is not builtin: bool",
"success": true
} ],
"context": "when calling asserts.is_not_bool(null)",
"fullname": "test_when_calling_is_not_bool",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Dictionary",
"context": "Then it passes",
"expected": "Null is not builtin: Dictionary",
"success": true
} ],
"context": "when calling asserts.is_not_Dictionary(null)",
"fullname": "test_when_calling_is_not_Dictionary",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Object",
"context": "Then it passes",
"expected": "Null is not builtin: Object",
"success": true
} ],
"context": "when calling asserts.is_not_Object(null)",
"fullname": "test_when_calling_is_not_Object",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Plane",
"context": "Then it passes",
"expected": "Null is not builtin: Plane",
"success": true
} ],
"context": "when calling asserts.is_not_Plane(null)",
"fullname": "test_when_calling_is_not_Plane",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: PoolIntArray",
"context": "Then it passes",
"expected": "Null is not builtin: PoolIntArray",
"success": true
} ],
"context": "when calling asserts.is_not_PoolIntArray(null)",
"fullname": "test_when_calling_is_not_PoolIntArray",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Color",
"context": "Then it passes",
"expected": "Null is not builtin: Color",
"success": true
} ],
"context": "when calling asserts.is_not_Color(null)",
"fullname": "test_when_calling_is_not_Color",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Rect2",
"context": "Then it passes",
"expected": "Null is not builtin: Rect2",
"success": true
} ],
"context": "when calling asserts.is_not_Rect2(null)",
"fullname": "test_when_calling_is_not_Rect2",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Vector2",
"context": "Then it passes",
"expected": "Null is not builtin: Vector2",
"success": true
} ],
"context": "when calling asserts.is_not_Vector2(null)",
"fullname": "test_when_calling_is_not_Vector2",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Vector3",
"context": "Then it passes",
"expected": "Null is not builtin: Vector3",
"success": true
} ],
"context": "when calling asserts.is_not_Vector3(null)",
"fullname": "test_when_calling_is_not_Vector3",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 26,
"path": "res://tests/unit/is_not_instance.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/is_not_instance.test.gd",
"tags": [  ],
"test": ExtResource( 2 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 26
}, {
"context": "Given an Is Instance of class/type Assertion",
"methods": [ {
"assertions": [ {
"actual": "|PoolColorArray| [PoolColorArray] != null",
"context": "colors is not null",
"expected": "|PoolColorArray| [PoolColorArray] != null",
"success": true
}, {
"actual": "[PoolColorArray] is builtin: PoolColorArray",
"context": "Then it passes",
"expected": "[PoolColorArray] is builtin: PoolColorArray",
"success": true
} ],
"context": "When calling asserts.is_PoolColorArray(colors: PoolColorArray)",
"fullname": "test_when_calling_is_PoolColorArray",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|String|  != null",
"context": "strs is not null",
"expected": "|String|  != null",
"success": true
}, {
"actual": " is builtin: String",
"context": "Then it passes",
"expected": " is builtin: String",
"success": true
} ],
"context": "When calling asserts.is_string(strs: String)",
"fullname": "test_when_calling_is_string",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|PoolStringArray| [] != null",
"context": "strs is not null",
"expected": "|PoolStringArray| [] != null",
"success": true
}, {
"actual": "[] is builtin: PoolStringArray",
"context": "Then it passes",
"expected": "[] is builtin: PoolStringArray",
"success": true
} ],
"context": "When calling is asserts.is_PoolStringArray(strs: PoolStringArray)",
"fullname": "test_when_calling_is_PoolStringArray",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|RID| [RID] != null",
"context": "rid is not null",
"expected": "|RID| [RID] != null",
"success": true
}, {
"actual": "[RID] is builtin: RID",
"context": "Then it passes",
"expected": "[RID] is builtin: RID",
"success": true
} ],
"context": "When calling asserts.is_RID(rid: RID)",
"fullname": "test_when_calling_is_RID",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|Transform2D| ((1, 0), (0, 1), (0, 0)) != null",
"context": "transform2D is not null",
"expected": "|Transform2D| ((1, 0), (0, 1), (0, 0)) != null",
"success": true
}, {
"actual": "((1, 0), (0, 1), (0, 0)) is builtin: Transform2D",
"context": "Then it passes",
"expected": "((1, 0), (0, 1), (0, 0)) is builtin: Transform2D",
"success": true
} ],
"context": "When calling asserts.is_Transform(transform2D: Transform2D)",
"fullname": "test_when_calling_is_Transform2D",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|PoolRealArray| [] != null",
"context": "reals is not null",
"expected": "|PoolRealArray| [] != null",
"success": true
}, {
"actual": "[] is builtin: PoolRealArray",
"context": "Then it passes",
"expected": "[] is builtin: PoolRealArray",
"success": true
} ],
"context": "When calling is asserts.is_PoolRealArray(reals: PoolRealArray)",
"fullname": "test_when_calling_is_PoolRealArray",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|Array| [] != null",
"context": "array is not null",
"expected": "|Array| [] != null",
"success": true
}, {
"actual": "[] is builtin: Array",
"context": "Then it passes",
"expected": "[] is builtin: Array",
"success": true
} ],
"context": "When calling asserts.is_Array(array: Array)",
"fullname": "test_when_calling_is_Array",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|Vector3| (0, 0, 0) != null",
"context": "vec3 is not null",
"expected": "|Vector3| (0, 0, 0) != null",
"success": true
}, {
"actual": "(0, 0, 0) is builtin: Vector3",
"context": "Then it passes",
"expected": "(0, 0, 0) is builtin: Vector3",
"success": true
} ],
"context": "When calling asserts.is_Vector3(vec3: Vector3",
"fullname": "test_when_calling_is_Vector3",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|PoolVector3Array| [] != null",
"context": "vec3s is not null",
"expected": "|PoolVector3Array| [] != null",
"success": true
}, {
"actual": "[] is builtin: PoolVector3Array",
"context": "Then it passes",
"expected": "[] is builtin: PoolVector3Array",
"success": true
} ],
"context": "When calling is asserts.is_PoolVector3Array(vec3s: PoolVector3Array)",
"fullname": "test_when_calling_is_PoolVector3Array",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|PoolByteArray| [PoolByteArray] != null",
"context": "bytes is not null",
"expected": "|PoolByteArray| [PoolByteArray] != null",
"success": true
}, {
"actual": "[PoolByteArray] is builtin: PoolByteArray",
"context": "Then it passes",
"expected": "[PoolByteArray] is builtin: PoolByteArray",
"success": true
} ],
"context": "When calling asserts.is_PoolByteArray(bytes: PoolByteArray)",
"fullname": "test_when_calling_is_PoolByteArray",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|AABB| 0, 0, 0 - 0, 0, 0 != null",
"context": "AABB is not null",
"expected": "|AABB| 0, 0, 0 - 0, 0, 0 != null",
"success": true
}, {
"actual": "0, 0, 0 - 0, 0, 0 is builtin: AABB",
"context": "Then it passes",
"expected": "0, 0, 0 - 0, 0, 0 is builtin: AABB",
"success": true
} ],
"context": "When calling asserts.is_AABB(aabb: AABB)",
"fullname": "test_when_calling_is_AABB",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|PoolVector2Array| [] != null",
"context": "vec2s is not null",
"expected": "|PoolVector2Array| [] != null",
"success": true
}, {
"actual": "[] is builtin: PoolVector2Array",
"context": "Then it passes",
"expected": "[] is builtin: PoolVector2Array",
"success": true
} ],
"context": "When calling is asserts.is_PoolVector2Array(vec2s: PoolVector2Array)",
"fullname": "test_when_calling_is_PoolVector2Array",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|Transform| 1, 0, 0, 0, 1, 0, 0, 0, 1 - 0, 0, 0 != null",
"context": "transform is not null",
"expected": "|Transform| 1, 0, 0, 0, 1, 0, 0, 0, 1 - 0, 0, 0 != null",
"success": true
}, {
"actual": "1, 0, 0, 0, 1, 0, 0, 0, 1 - 0, 0, 0 is builtin: Transform",
"context": "Then it passes",
"expected": "1, 0, 0, 0, 1, 0, 0, 0, 1 - 0, 0, 0 is builtin: Transform",
"success": true
} ],
"context": "When calling asserts.is_Transform(transform: Transform)",
"fullname": "test_when_calling_is_Transform",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|Vector2| (0, 0) != null",
"context": "vec2 is not null",
"expected": "|Vector2| (0, 0) != null",
"success": true
}, {
"actual": "(0, 0) is builtin: Vector2",
"context": "Then it passes",
"expected": "(0, 0) is builtin: Vector2",
"success": true
} ],
"context": "When calling asserts.is_Vector2(vec2)",
"fullname": "test_when_calling_is_Vector2",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "{} is builtin: Dictionary",
"context": "Then it passes",
"expected": "{} is builtin: Dictionary",
"success": true
} ],
"context": "When calling asserts.is_Dictionary({})",
"fullname": "test_when_calling_is_Dictionary",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|NodePath| . != null",
"context": "@'Parent/Child' is not null",
"expected": "|NodePath| . != null",
"success": true
}, {
"actual": ". is builtin: NodePath",
"context": "Then it passes",
"expected": ". is builtin: NodePath",
"success": true
} ],
"context": "When calling asserts.is_NodePath(@'Parent/Child')",
"fullname": "test_when_calling_is_NodePath",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|Basis| ((1, 0, 0), (0, 1, 0), (0, 0, 1)) != null",
"context": "basis is not null",
"expected": "|Basis| ((1, 0, 0), (0, 1, 0), (0, 0, 1)) != null",
"success": true
}, {
"actual": "((1, 0, 0), (0, 1, 0), (0, 0, 1)) is builtin: Basis",
"context": "Then it passes",
"expected": "((1, 0, 0), (0, 1, 0), (0, 0, 1)) is builtin: Basis",
"success": true
} ],
"context": "When calling asserts.is_basis(basis: Basis",
"fullname": "test_when_calling_is_Basis",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "1 is builtin: float",
"context": "Then it passes",
"expected": "1 is builtin: float",
"success": true
} ],
"context": "When calling asserts.is_float(1.0)",
"fullname": "test_when_calling_is_float",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|PoolIntArray| [] != null",
"context": "ints is not null",
"expected": "|PoolIntArray| [] != null",
"success": true
}, {
"actual": "[] is builtin: PoolIntArray",
"context": "Then it passes",
"expected": "[] is builtin: PoolIntArray",
"success": true
} ],
"context": "When calling asserts.is_PoolIntArray(ints: PoolIntArray)",
"fullname": "test_when_calling_is_PoolIntArray",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "True is builtin: bool",
"context": "Then it passes",
"expected": "True is builtin: bool",
"success": true
} ],
"context": "When calling asserts.is_bool(true)",
"fullname": "test_when_calling_is_bool",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|Quat| (0, 0, 0, 1) != null",
"context": "quat is not null",
"expected": "|Quat| (0, 0, 0, 1) != null",
"success": true
}, {
"actual": "(0, 0, 0, 1) is builtin: Quat",
"context": "Then it passes",
"expected": "(0, 0, 0, 1) is builtin: Quat",
"success": true
} ],
"context": "When calling asserts.is_Quat(quat: Quat)",
"fullname": "test_when_calling_is_Quat",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|Color| 0,0,0,1 != null",
"context": "color is not null",
"expected": "|Color| 0,0,0,1 != null",
"success": true
}, {
"actual": "0,0,0,1 is builtin: Color",
"context": "Then it passes",
"expected": "0,0,0,1 is builtin: Color",
"success": true
} ],
"context": "When calling asserts.is_color(color: Color)",
"fullname": "test_when_calling_is_Color",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "1 is builtin: int",
"context": "Then it passes",
"expected": "1 is builtin: int",
"success": true
} ],
"context": "When callign asserts.is_int(1)",
"fullname": "test_when_calling_is_int",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|Rect2| (0, 0, 0, 0) != null",
"context": "rect2 is not null",
"expected": "|Rect2| (0, 0, 0, 0) != null",
"success": true
}, {
"actual": "(0, 0, 0, 0) is builtin: Rect2",
"context": "Then it passes",
"expected": "(0, 0, 0, 0) is builtin: Rect2",
"success": true
} ],
"context": "When calling asserts.is_Rect2(rect2: Rect2)",
"fullname": "test_when_calling_is_Rect2",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|Object| [Node:1869] != null",
"context": "node is not null",
"expected": "|Object| [Node:1869] != null",
"success": true
}, {
"actual": "[Node:1869] is builtin: Object",
"context": "An instance of node is an Object",
"expected": "[Node:1869] is builtin: Object",
"success": true
} ],
"context": "When calling is asserts.object(node: Node)",
"fullname": "test_when_calling_is_object",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|Plane| 0, 0, 0, 0 != null",
"context": "plane is not null",
"expected": "|Plane| 0, 0, 0, 0 != null",
"success": true
}, {
"actual": "0, 0, 0, 0 is builtin: Plane",
"context": "then it passes",
"expected": "0, 0, 0, 0 is builtin: Plane",
"success": true
} ],
"context": "When calling asserts.is_Plane(plane: Plane())",
"fullname": "test_when_calling_is_Plane",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
} ],
"passed": 26,
"path": "res://tests/unit/is_instance.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/is_instance.test.gd",
"tags": [  ],
"test": ExtResource( 6 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 26
}, {
"context": "Given a Yield",
"methods": [ {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then we set var e to true",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then we set var f to true",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we yield twice in execute",
"fullname": "test_When_we_yield_in_execute",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "[100, Null, Null, Null, Null, Null] is builtin: Array",
"context": "Then we get an array",
"expected": "[100, Null, Null, Null, Null, Null] is builtin: Array",
"success": true
}, {
"actual": "|int| 6 is equal to |int| 6",
"context": "Of size 6",
"expected": "|int| 6 is equal to |int| 6",
"success": true
}, {
"actual": "|int| 100 is equal to |int| 100",
"context": "Where element 0 is 100",
"expected": "|int| 100 is equal to |int| 100",
"success": true
} ],
"context": "When yield(self.yield_value()) returns",
"fullname": "test_When_we_yield_we_get_the_return_value",
"passed": 3,
"success": true,
"time": 0.0,
"total": 3
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then we set var a to true",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then we set var b to true",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we yield in start twice",
"fullname": "test_When_we_yield_in_start",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then we set var c to true",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then we set var d to true",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we yield in pre thrice",
"fullname": "test_When_we_yield_in_pre",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then the timeout signal is disconnected",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then the signal-signal is disconnected",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When it is finished",
"fullname": "test_When_yielder_is_finished_signals_are_disconnected",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then the yielder is unpaused",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then the timeout signal of the yielder is connected",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then our signal is connected to the yielder",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we call until signal",
"fullname": "test_When_we_call_until_signal",
"passed": 3,
"success": true,
"time": 0.0,
"total": 3
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then the yielder is paused",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then the timeout signal of the yielder is disconnected",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then our signal to the yielder is disconnected",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When the yielder heres our signal",
"fullname": "test_When_the_yielder_hears_our_signal",
"passed": 3,
"success": true,
"time": 0.0,
"total": 3
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then yielder is not active",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When asserting against a test",
"fullname": "test_Yielder_is_not_active_when_asserting",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then the yielder is paused",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "The timeout signal of the yielder is not connected",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When the yielder times out on until_timeout(0.1)",
"fullname": "test_When_the_yielder_times_out",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then the yielder is paused",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When a signal being yielded on is emitted",
"fullname": "test_When_a_signal_being_yielded_on_is_emitted_the_yielder_is_stopped",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then yielder is unpaused",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "The timeout signal of the yielder is connected",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we call until_timeout (with 1.0)",
"fullname": "test_When_we_call_until_timeout",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
} ],
"passed": 11,
"path": "res://tests/unit/yield.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/yield.test.gd",
"tags": [  ],
"test": ExtResource( 18 ),
"yield_time": 1.9
},
"success": true,
"time_taken": 0.0,
"total": 11
} ],
1610065500: [ {
"context": "Given a Boolean Assertion",
"methods": [ {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then it passes",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When calling asserts.is_true(true)",
"fullname": "test_when_calling_asserts_is_true",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| False == false",
"context": "Then it passes",
"expected": "|bool| False == false",
"success": true
} ],
"context": "When calling asserts.is_false(false)",
"fullname": "test_when_calling_asserts_is_false",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| True != false",
"context": "",
"expected": "|bool| True == false",
"success": false
} ],
"context": " intentional failure",
"fullname": "test_intentional_failure",
"passed": 0,
"success": false,
"time": 0.0,
"total": 1
} ],
"passed": 2,
"path": "res://tests/unit/boolean.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "test_when_calling_asserts_is_true",
"path": "res://tests/unit/boolean.test.gd",
"tags": [  ],
"test": ExtResource( 11 ),
"yield_time": 0.0
},
"success": false,
"time_taken": 0.0,
"total": 3
} ],
1610065553: [  ],
1610065622: [ {
"context": "Given a Boolean Assertion",
"methods": [ {
"assertions": [ {
"actual": "|bool| False == false",
"context": "Then it passes",
"expected": "|bool| False == false",
"success": true
} ],
"context": "When calling asserts.is_false(false)",
"fullname": "test_when_calling_asserts_is_false",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| True != false",
"context": "",
"expected": "|bool| True == false",
"success": false
} ],
"context": " intentional failure",
"fullname": "test_intentional_failure",
"passed": 0,
"success": false,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then it passes",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When calling asserts.is_true(true)",
"fullname": "test_when_calling_asserts_is_true",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 2,
"path": "res://tests/unit/boolean.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/boolean.test.gd",
"tags": [  ],
"test": ExtResource( 11 ),
"yield_time": 0.0
},
"success": false,
"time_taken": 0.0,
"total": 3
} ],
1610065645: [  ],
1610065656: [  ],
1610065697: [  ],
1610065738: [  ],
1610065802: [  ],
1610065814: [  ],
1610065887: [  ],
1610065898: [  ],
1610065938: [  ],
1610065968: [  ],
1610065978: [  ],
1610066003: [  ],
1610066013: [  ],
1610066033: [  ],
1610066045: [  ],
1610066054: [  ],
1610066067: [  ],
1610066103: [  ],
1610066135: [  ],
1610066144: [  ],
1610066152: [  ],
1610066160: [  ],
1610066190: [  ],
1610066208: [  ],
1610066217: [  ],
1610066237: [  ],
1610066252: [  ],
1610066272: [  ],
1610066316: [  ],
1610066359: [  ],
1610066373: [  ],
1610066386: [  ],
1610066449: [  ],
1610066465: [  ],
1610066489: [  ],
1610066511: [  ],
1610066554: [  ],
1610066570: [  ],
1610066587: [ {
"context": "Given a Boolean Assertion",
"methods": [ {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then it passes",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When calling asserts.is_true(true)",
"fullname": "test_when_calling_asserts_is_true",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| True != false",
"context": "",
"expected": "|bool| True == false",
"success": false
} ],
"context": " intentional failure",
"fullname": "test_intentional_failure",
"passed": 0,
"success": false,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| False == false",
"context": "Then it passes",
"expected": "|bool| False == false",
"success": true
} ],
"context": "When calling asserts.is_false(false)",
"fullname": "test_when_calling_asserts_is_false",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 2,
"path": "res://tests/integration/boolean.test.gd",
"source": {
"containers": [ "res://tests/integration", "res://tests" ],
"method": "",
"path": "res://tests/integration/boolean.test.gd",
"tags": [  ],
"test": ExtResource( 20 ),
"yield_time": 0.0
},
"success": false,
"time_taken": 0.0,
"total": 3
}, {
"context": "Default Args",
"methods": [ {
"assertions": [ {
"actual": "|bool| True == true",
"context": "If this method can be reached then we have doubled a script with default argument(s) properly!",
"expected": "|bool| True == true",
"success": true
} ],
"context": " default arguments of interpolate property",
"fullname": "test_default_arguments_of_interpolate_property",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 1,
"path": "res://tests/integration/default_args.test.gd",
"source": {
"containers": [ "res://tests/integration", "res://tests" ],
"method": "",
"path": "res://tests/integration/default_args.test.gd",
"tags": [  ],
"test": ExtResource( 10 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 1
}, {
"context": "Given is_on_floor",
"methods": [ {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then it can be stubbed",
"expected": "|bool| True == true",
"success": true
} ],
"context": "From a user-defined script",
"fullname": "test_stubbing_is_on_floor_method_from_user_defined_class",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then it can be stubbed",
"expected": "|bool| True == true",
"success": true
} ],
"context": "From a built-in KinematicBody2D2",
"fullname": "test_stubbing_is_on_floor_method_from_builtin_class2",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then it can be stubbed",
"expected": "|bool| True == true",
"success": true
} ],
"context": "From a child node of a scene without scripts",
"fullname": "test_stubbing_is_on_floor_as_child_node_with_no_script",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 3,
"path": "res://tests/integration/on_floor.test.gd",
"source": {
"containers": [ "res://tests/integration", "res://tests" ],
"method": "",
"path": "res://tests/integration/on_floor.test.gd",
"tags": [  ],
"test": ExtResource( 5 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 3
}, {
"context": "Given a Scene Director",
"methods": [ {
"assertions": [ {
"actual": "|Dictionary| {.:[Reference:1358], A:[Reference:1359], A/B:[Reference:1361], C:[Reference:1360], C/D:[Reference:1362]} is not equal to |Dictionary| {.:[Reference:1372], A:[Reference:1373], A/B:[Reference:1375], C:[Reference:1374], C/D:[Reference:1376]}",
"context": "Then they do not share resources",
"expected": "|Dictionary| {.:[Reference:1358], A:[Reference:1359], A/B:[Reference:1361], C:[Reference:1360], C/D:[Reference:1362]} != |Dictionary| {.:[Reference:1372], A:[Reference:1373], A/B:[Reference:1375], C:[Reference:1374], C/D:[Reference:1376]}",
"success": true
} ],
"context": "When we create two of it for the same scene",
"fullname": "test_When_we_create_two_of_it_for_the_same_scene",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 9999 is equal to |int| 9999",
"context": "Then we get the stubbed return value",
"expected": "|int| 9999 is equal to |int| 9999",
"success": true
} ],
"context": "When we call a method from the root node that we stubbed",
"fullname": "test_When_we_call_a_method_from_the_root_node_that_we_stubbed",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 99 is equal to |int| 99",
"context": "Then we get the stubbed return value",
"expected": "|int| 99 is equal to |int| 99",
"success": true
} ],
"context": "When we call a method from a grandchild node that we stubbed",
"fullname": "test_When_we_call_a_method_from_a_grandchild_node_that_we_stubbed",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 999 is equal to |int| 999",
"context": "Then we get the stubbed return value",
"expected": "|int| 999 is equal to |int| 999",
"success": true
} ],
"context": "When we call a method from a child node that we stubbed",
"fullname": "test_When_we_call_a_method_from_a_child_node_that_we_stubbed",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|NodePath| A is equal to |NodePath| A",
"context": "We have the correct NodePath Set",
"expected": "|NodePath| A is equal to |NodePath| A",
"success": true
} ],
"context": "When we add it to the tree it runs",
"fullname": "test_When_we_add_it_to_the_tree_it_runs",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 5,
"path": "res://tests/integration/scene_director.test.gd",
"source": {
"containers": [ "res://tests/integration", "res://tests" ],
"method": "",
"path": "res://tests/integration/scene_director.test.gd",
"tags": [  ],
"test": ExtResource( 4 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 5
}, {
"context": "Given a Script Director",
"methods": [ {
"assertions": [ {
"actual": "[Reference:1516] is instance of class: [GDScript:1509]",
"context": "Then we get that inner class back",
"expected": "[Reference:1516] is instance of class: [GDScript:1509]",
"success": true
} ],
"context": "When we double an inner class",
"fullname": "test_When_we_double_an_inner_class",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|Dictionary| {_enter_tree:{arguments:, default_arguments:}, _exit_tree:{arguments:, default_arguments:}, _get:{arguments:a, default_arguments:a}, _get_configuration_warning:{arguments:, default_arguments:}, _get_editor_description:{arguments:, default_arguments:}, _get_import_path:{arguments:, default_arguments:}, _get_property_list:{arguments:, default_arguments:}, _init:{arguments:, default_arguments:}, _input:{arguments:a, default_arguments:a}, _notification:{arguments:a, default_arguments:a}, _physics_process:{arguments:a, default_arguments:a}, _process:{arguments:a, default_arguments:a}, _ready:{arguments:, default_arguments:}, _set:{arguments:a, b, default_arguments:a, b}, _set_editor_description:{arguments:a, default_arguments:a}, _set_import_path:{arguments:a, default_arguments:a}, _to_string:{arguments:, default_arguments:}, _unhandled_input:{arguments:a, default_arguments:a}, _unhandled_key_input:{arguments:a, default_arguments:a}, add:{arguments:a, b, default_arguments:a, b}, add_child:{arguments:a, b, default_arguments:a, b = False}, add_child_below_node:{arguments:a, b, c, default_arguments:a, b, c = False}, add_to_group:{arguments:a, b, default_arguments:a, b = False}, add_user_signal:{arguments:a, b, default_arguments:a, b = []}, call:{arguments:a, default_arguments:a}, call_deferred:{arguments:a, default_arguments:a}, callv:{arguments:a, b, default_arguments:a, b}, can_process:{arguments:, default_arguments:}, can_translate_messages:{arguments:, default_arguments:}, connect:{arguments:a, b, c, d, e, default_arguments:a, b, c, d = [], e = 0}, disconnect:{arguments:a, b, c, default_arguments:a, b, c}, divide:{arguments:a, b, default_arguments:a, b}, duplicate:{arguments:a, default_arguments:a = 15}, emit_signal:{arguments:a, default_arguments:a}, find_node:{arguments:a, b, c, default_arguments:a, b = True, c = True}, find_parent:{arguments:a, default_arguments:a}, free:{arguments:, default_arguments:}, get:{arguments:a, default_arguments:a}, get_child:{arguments:a, default_arguments:a}, get_child_count:{arguments:, default_arguments:}, get_children:{arguments:, default_arguments:}, get_class:{arguments:, default_arguments:}, get_custom_multiplayer:{arguments:, default_arguments:}, get_filename:{arguments:, default_arguments:}, get_groups:{arguments:, default_arguments:}, get_incoming_connections:{arguments:, default_arguments:}, get_index:{arguments:, default_arguments:}, get_indexed:{arguments:a, default_arguments:a}, get_instance_id:{arguments:, default_arguments:}, get_meta:{arguments:a, default_arguments:a}, get_meta_list:{arguments:, default_arguments:}, get_method_list:{arguments:, default_arguments:}, get_multiplayer:{arguments:, default_arguments:}, get_name:{arguments:, default_arguments:}, get_network_master:{arguments:, default_arguments:}, get_node:{arguments:a, default_arguments:a}, get_node_and_resource:{arguments:a, default_arguments:a}, get_node_or_null:{arguments:a, default_arguments:a}, get_owner:{arguments:, default_arguments:}, get_parent:{arguments:, default_arguments:}, get_path:{arguments:, default_arguments:}, get_path_to:{arguments:a, default_arguments:a}, get_pause_mode:{arguments:, default_arguments:}, get_physics_process_delta_time:{arguments:, default_arguments:}, get_position_in_parent:{arguments:, default_arguments:}, get_process_delta_time:{arguments:, default_arguments:}, get_process_priority:{arguments:, default_arguments:}, get_property_list:{arguments:, default_arguments:}, get_scene_instance_load_placeholder:{arguments:, default_arguments:}, get_script:{arguments:, default_arguments:}, get_signal_connection_list:{arguments:a, default_arguments:a}, get_signal_list:{arguments:, default_arguments:}, get_tree:{arguments:, default_arguments:}, get_viewport:{arguments:, default_arguments:}, has_meta:{arguments:a, default_arguments:a}, has_method:{arguments:a, default_arguments:a}, has_node:{arguments:a, default_arguments:a}, has_node_and_resource:{arguments:a, default_arguments:a}, has_signal:{arguments:a, default_arguments:a}, has_user_signal:{arguments:a, default_arguments:a}, is_a_parent_of:{arguments:a, default_arguments:a}, is_blocking_signals:{arguments:, default_arguments:}, is_class:{arguments:a, default_arguments:a}, is_connected:{arguments:a, b, c, default_arguments:a, b, c}, is_displayed_folded:{arguments:, default_arguments:}, is_greater_than:{arguments:a, default_arguments:a}, is_in_group:{arguments:a, default_arguments:a}, is_inside_tree:{arguments:, default_arguments:}, is_network_master:{arguments:, default_arguments:}, is_physics_processing:{arguments:, default_arguments:}, is_physics_processing_internal:{arguments:, default_arguments:}, is_processing:{arguments:, default_arguments:}, is_processing_input:{arguments:, default_arguments:}, is_processing_internal:{arguments:, default_arguments:}, is_processing_unhandled_input:{arguments:, default_arguments:}, is_processing_unhandled_key_input:{arguments:, default_arguments:}, is_queued_for_deletion:{arguments:, default_arguments:}, math_fight:{arguments:, default_arguments:}, move_child:{arguments:a, b, default_arguments:a, b}, multiply:{arguments:a, b, default_arguments:a, b}, notification:{arguments:a, b, default_arguments:a, b = False}, pi:{arguments:, default_arguments:}, print_stray_nodes:{arguments:, default_arguments:}, print_tree:{arguments:, default_arguments:}, print_tree_pretty:{arguments:, default_arguments:}, propagate_call:{arguments:a, b, c, default_arguments:a, b = [], c = False}, propagate_notification:{arguments:a, default_arguments:a}, property_list_changed_notify:{arguments:, default_arguments:}, queue_free:{arguments:, default_arguments:}, raise:{arguments:, default_arguments:}, remove_and_skip:{arguments:, default_arguments:}, remove_child:{arguments:a, default_arguments:a}, remove_from_group:{arguments:a, default_arguments:a}, remove_meta:{arguments:a, default_arguments:a}, replace_by:{arguments:a, b, default_arguments:a, b = False}, request_ready:{arguments:, default_arguments:}, rpc:{arguments:a, default_arguments:a}, rpc_config:{arguments:a, b, default_arguments:a, b}, rpc_id:{arguments:a, b, default_arguments:a, b}, rpc_unreliable:{arguments:a, default_arguments:a}, rpc_unreliable_id:{arguments:a, b, default_arguments:a, b}, rset:{arguments:a, b, default_arguments:a, b}, rset_config:{arguments:a, b, default_arguments:a, b}, rset_id:{arguments:a, b, c, default_arguments:a, b, c}, rset_unreliable:{arguments:a, b, default_arguments:a, b}, rset_unreliable_id:{arguments:a, b, c, default_arguments:a, b, c}, set:{arguments:a, b, default_arguments:a, b}, set_block_signals:{arguments:a, default_arguments:a}, set_custom_multiplayer:{arguments:a, default_arguments:a}, set_deferred:{arguments:a, b, default_arguments:a, b}, set_display_folded:{arguments:a, default_arguments:a}, set_filename:{arguments:a, default_arguments:a}, set_indexed:{arguments:a, b, default_arguments:a, b}, set_message_translation:{arguments:a, default_arguments:a}, set_meta:{arguments:a, b, default_arguments:a, b}, set_name:{arguments:a, default_arguments:a}, set_network_master:{arguments:a, b, default_arguments:a, b = True}, set_owner:{arguments:a, default_arguments:a}, set_pause_mode:{arguments:a, default_arguments:a}, set_physics_process:{arguments:a, default_arguments:a}, set_physics_process_internal:{arguments:a, default_arguments:a}, set_process:{arguments:a, default_arguments:a}, set_process_input:{arguments:a, default_arguments:a}, set_process_internal:{arguments:a, default_arguments:a}, set_process_priority:{arguments:a, default_arguments:a}, set_process_unhandled_input:{arguments:a, default_arguments:a}, set_process_unhandled_key_input:{arguments:a, default_arguments:a}, set_scene_instance_load_placeholder:{arguments:a, default_arguments:a}, set_script:{arguments:a, default_arguments:a}, subtract:{arguments:a, b, default_arguments:a, b}, sum:{arguments:a, default_arguments:a}, to_string:{arguments:, default_arguments:}, tr:{arguments:a, default_arguments:a}, update_configuration_warning:{arguments:, default_arguments:}} is not equal to |Dictionary| {_enter_tree:{arguments:, default_arguments:}, _exit_tree:{arguments:, default_arguments:}, _get:{arguments:a, default_arguments:a}, _get_configuration_warning:{arguments:, default_arguments:}, _get_editor_description:{arguments:, default_arguments:}, _get_import_path:{arguments:, default_arguments:}, _get_property_list:{arguments:, default_arguments:}, _init:{arguments:, default_arguments:}, _input:{arguments:a, default_arguments:a}, _notification:{arguments:a, default_arguments:a}, _physics_process:{arguments:a, default_arguments:a}, _process:{arguments:a, default_arguments:a}, _ready:{arguments:, default_arguments:}, _set:{arguments:a, b, default_arguments:a, b}, _set_editor_description:{arguments:a, default_arguments:a}, _set_import_path:{arguments:a, default_arguments:a}, _to_string:{arguments:, default_arguments:}, _unhandled_input:{arguments:a, default_arguments:a}, _unhandled_key_input:{arguments:a, default_arguments:a}, add:{arguments:a, b, default_arguments:a, b}, add_child:{arguments:a, b, default_arguments:a, b = False}, add_child_below_node:{arguments:a, b, c, default_arguments:a, b, c = False}, add_to_group:{arguments:a, b, default_arguments:a, b = False}, add_user_signal:{arguments:a, b, default_arguments:a, b = []}, call:{arguments:a, default_arguments:a}, call_deferred:{arguments:a, default_arguments:a}, callv:{arguments:a, b, default_arguments:a, b}, can_process:{arguments:, default_arguments:}, can_translate_messages:{arguments:, default_arguments:}, connect:{arguments:a, b, c, d, e, default_arguments:a, b, c, d = [], e = 0}, disconnect:{arguments:a, b, c, default_arguments:a, b, c}, divide:{arguments:a, b, default_arguments:a, b}, duplicate:{arguments:a, default_arguments:a = 15}, emit_signal:{arguments:a, default_arguments:a}, find_node:{arguments:a, b, c, default_arguments:a, b = True, c = True}, find_parent:{arguments:a, default_arguments:a}, free:{arguments:, default_arguments:}, get:{arguments:a, default_arguments:a}, get_child:{arguments:a, default_arguments:a}, get_child_count:{arguments:, default_arguments:}, get_children:{arguments:, default_arguments:}, get_class:{arguments:, default_arguments:}, get_custom_multiplayer:{arguments:, default_arguments:}, get_filename:{arguments:, default_arguments:}, get_groups:{arguments:, default_arguments:}, get_incoming_connections:{arguments:, default_arguments:}, get_index:{arguments:, default_arguments:}, get_indexed:{arguments:a, default_arguments:a}, get_instance_id:{arguments:, default_arguments:}, get_meta:{arguments:a, default_arguments:a}, get_meta_list:{arguments:, default_arguments:}, get_method_list:{arguments:, default_arguments:}, get_multiplayer:{arguments:, default_arguments:}, get_name:{arguments:, default_arguments:}, get_network_master:{arguments:, default_arguments:}, get_node:{arguments:a, default_arguments:a}, get_node_and_resource:{arguments:a, default_arguments:a}, get_node_or_null:{arguments:a, default_arguments:a}, get_owner:{arguments:, default_arguments:}, get_parent:{arguments:, default_arguments:}, get_path:{arguments:, default_arguments:}, get_path_to:{arguments:a, default_arguments:a}, get_pause_mode:{arguments:, default_arguments:}, get_physics_process_delta_time:{arguments:, default_arguments:}, get_position_in_parent:{arguments:, default_arguments:}, get_process_delta_time:{arguments:, default_arguments:}, get_process_priority:{arguments:, default_arguments:}, get_property_list:{arguments:, default_arguments:}, get_scene_instance_load_placeholder:{arguments:, default_arguments:}, get_script:{arguments:, default_arguments:}, get_signal_connection_list:{arguments:a, default_arguments:a}, get_signal_list:{arguments:, default_arguments:}, get_tree:{arguments:, default_arguments:}, get_viewport:{arguments:, default_arguments:}, has_meta:{arguments:a, default_arguments:a}, has_method:{arguments:a, default_arguments:a}, has_node:{arguments:a, default_arguments:a}, has_node_and_resource:{arguments:a, default_arguments:a}, has_signal:{arguments:a, default_arguments:a}, has_user_signal:{arguments:a, default_arguments:a}, is_a_parent_of:{arguments:a, default_arguments:a}, is_blocking_signals:{arguments:, default_arguments:}, is_class:{arguments:a, default_arguments:a}, is_connected:{arguments:a, b, c, default_arguments:a, b, c}, is_displayed_folded:{arguments:, default_arguments:}, is_greater_than:{arguments:a, default_arguments:a}, is_in_group:{arguments:a, default_arguments:a}, is_inside_tree:{arguments:, default_arguments:}, is_network_master:{arguments:, default_arguments:}, is_physics_processing:{arguments:, default_arguments:}, is_physics_processing_internal:{arguments:, default_arguments:}, is_processing:{arguments:, default_arguments:}, is_processing_input:{arguments:, default_arguments:}, is_processing_internal:{arguments:, default_arguments:}, is_processing_unhandled_input:{arguments:, default_arguments:}, is_processing_unhandled_key_input:{arguments:, default_arguments:}, is_queued_for_deletion:{arguments:, default_arguments:}, math_fight:{arguments:, default_arguments:}, move_child:{arguments:a, b, default_arguments:a, b}, multiply:{arguments:a, b, default_arguments:a, b}, notification:{arguments:a, b, default_arguments:a, b = False}, pi:{arguments:, default_arguments:}, print_stray_nodes:{arguments:, default_arguments:}, print_tree:{arguments:, default_arguments:}, print_tree_pretty:{arguments:, default_arguments:}, propagate_call:{arguments:a, b, c, default_arguments:a, b = [], c = False}, propagate_notification:{arguments:a, default_arguments:a}, property_list_changed_notify:{arguments:, default_arguments:}, queue_free:{arguments:, default_arguments:}, raise:{arguments:, default_arguments:}, remove_and_skip:{arguments:, default_arguments:}, remove_child:{arguments:a, default_arguments:a}, remove_from_group:{arguments:a, default_arguments:a}, remove_meta:{arguments:a, default_arguments:a}, replace_by:{arguments:a, b, default_arguments:a, b = False}, request_ready:{arguments:, default_arguments:}, rpc:{arguments:a, default_arguments:a}, rpc_config:{arguments:a, b, default_arguments:a, b}, rpc_id:{arguments:a, b, default_arguments:a, b}, rpc_unreliable:{arguments:a, default_arguments:a}, rpc_unreliable_id:{arguments:a, b, default_arguments:a, b}, rset:{arguments:a, b, default_arguments:a, b}, rset_config:{arguments:a, b, default_arguments:a, b}, rset_id:{arguments:a, b, c, default_arguments:a, b, c}, rset_unreliable:{arguments:a, b, default_arguments:a, b}, rset_unreliable_id:{arguments:a, b, c, default_arguments:a, b, c}, set:{arguments:a, b, default_arguments:a, b}, set_block_signals:{arguments:a, default_arguments:a}, set_custom_multiplayer:{arguments:a, default_arguments:a}, set_deferred:{arguments:a, b, default_arguments:a, b}, set_display_folded:{arguments:a, default_arguments:a}, set_filename:{arguments:a, default_arguments:a}, set_indexed:{arguments:a, b, default_arguments:a, b}, set_message_translation:{arguments:a, default_arguments:a}, set_meta:{arguments:a, b, default_arguments:a, b}, set_name:{arguments:a, default_arguments:a}, set_network_master:{arguments:a, b, default_arguments:a, b = True}, set_owner:{arguments:a, default_arguments:a}, set_pause_mode:{arguments:a, default_arguments:a}, set_physics_process:{arguments:a, default_arguments:a}, set_physics_process_internal:{arguments:a, default_arguments:a}, set_process:{arguments:a, default_arguments:a}, set_process_input:{arguments:a, default_arguments:a}, set_process_internal:{arguments:a, default_arguments:a}, set_process_priority:{arguments:a, default_arguments:a}, set_process_unhandled_input:{arguments:a, default_arguments:a}, set_process_unhandled_key_input:{arguments:a, default_arguments:a}, set_scene_instance_load_placeholder:{arguments:a, default_arguments:a}, set_script:{arguments:a, default_arguments:a}, subtract:{arguments:a, b, default_arguments:a, b}, sum:{arguments:a, default_arguments:a}, to_string:{arguments:, default_arguments:}, tr:{arguments:a, default_arguments:a}, update_configuration_warning:{arguments:, default_arguments:}}",
"context": "Then they do not share resources",
"expected": "|Dictionary| {_enter_tree:{arguments:, default_arguments:}, _exit_tree:{arguments:, default_arguments:}, _get:{arguments:a, default_arguments:a}, _get_configuration_warning:{arguments:, default_arguments:}, _get_editor_description:{arguments:, default_arguments:}, _get_import_path:{arguments:, default_arguments:}, _get_property_list:{arguments:, default_arguments:}, _init:{arguments:, default_arguments:}, _input:{arguments:a, default_arguments:a}, _notification:{arguments:a, default_arguments:a}, _physics_process:{arguments:a, default_arguments:a}, _process:{arguments:a, default_arguments:a}, _ready:{arguments:, default_arguments:}, _set:{arguments:a, b, default_arguments:a, b}, _set_editor_description:{arguments:a, default_arguments:a}, _set_import_path:{arguments:a, default_arguments:a}, _to_string:{arguments:, default_arguments:}, _unhandled_input:{arguments:a, default_arguments:a}, _unhandled_key_input:{arguments:a, default_arguments:a}, add:{arguments:a, b, default_arguments:a, b}, add_child:{arguments:a, b, default_arguments:a, b = False}, add_child_below_node:{arguments:a, b, c, default_arguments:a, b, c = False}, add_to_group:{arguments:a, b, default_arguments:a, b = False}, add_user_signal:{arguments:a, b, default_arguments:a, b = []}, call:{arguments:a, default_arguments:a}, call_deferred:{arguments:a, default_arguments:a}, callv:{arguments:a, b, default_arguments:a, b}, can_process:{arguments:, default_arguments:}, can_translate_messages:{arguments:, default_arguments:}, connect:{arguments:a, b, c, d, e, default_arguments:a, b, c, d = [], e = 0}, disconnect:{arguments:a, b, c, default_arguments:a, b, c}, divide:{arguments:a, b, default_arguments:a, b}, duplicate:{arguments:a, default_arguments:a = 15}, emit_signal:{arguments:a, default_arguments:a}, find_node:{arguments:a, b, c, default_arguments:a, b = True, c = True}, find_parent:{arguments:a, default_arguments:a}, free:{arguments:, default_arguments:}, get:{arguments:a, default_arguments:a}, get_child:{arguments:a, default_arguments:a}, get_child_count:{arguments:, default_arguments:}, get_children:{arguments:, default_arguments:}, get_class:{arguments:, default_arguments:}, get_custom_multiplayer:{arguments:, default_arguments:}, get_filename:{arguments:, default_arguments:}, get_groups:{arguments:, default_arguments:}, get_incoming_connections:{arguments:, default_arguments:}, get_index:{arguments:, default_arguments:}, get_indexed:{arguments:a, default_arguments:a}, get_instance_id:{arguments:, default_arguments:}, get_meta:{arguments:a, default_arguments:a}, get_meta_list:{arguments:, default_arguments:}, get_method_list:{arguments:, default_arguments:}, get_multiplayer:{arguments:, default_arguments:}, get_name:{arguments:, default_arguments:}, get_network_master:{arguments:, default_arguments:}, get_node:{arguments:a, default_arguments:a}, get_node_and_resource:{arguments:a, default_arguments:a}, get_node_or_null:{arguments:a, default_arguments:a}, get_owner:{arguments:, default_arguments:}, get_parent:{arguments:, default_arguments:}, get_path:{arguments:, default_arguments:}, get_path_to:{arguments:a, default_arguments:a}, get_pause_mode:{arguments:, default_arguments:}, get_physics_process_delta_time:{arguments:, default_arguments:}, get_position_in_parent:{arguments:, default_arguments:}, get_process_delta_time:{arguments:, default_arguments:}, get_process_priority:{arguments:, default_arguments:}, get_property_list:{arguments:, default_arguments:}, get_scene_instance_load_placeholder:{arguments:, default_arguments:}, get_script:{arguments:, default_arguments:}, get_signal_connection_list:{arguments:a, default_arguments:a}, get_signal_list:{arguments:, default_arguments:}, get_tree:{arguments:, default_arguments:}, get_viewport:{arguments:, default_arguments:}, has_meta:{arguments:a, default_arguments:a}, has_method:{arguments:a, default_arguments:a}, has_node:{arguments:a, default_arguments:a}, has_node_and_resource:{arguments:a, default_arguments:a}, has_signal:{arguments:a, default_arguments:a}, has_user_signal:{arguments:a, default_arguments:a}, is_a_parent_of:{arguments:a, default_arguments:a}, is_blocking_signals:{arguments:, default_arguments:}, is_class:{arguments:a, default_arguments:a}, is_connected:{arguments:a, b, c, default_arguments:a, b, c}, is_displayed_folded:{arguments:, default_arguments:}, is_greater_than:{arguments:a, default_arguments:a}, is_in_group:{arguments:a, default_arguments:a}, is_inside_tree:{arguments:, default_arguments:}, is_network_master:{arguments:, default_arguments:}, is_physics_processing:{arguments:, default_arguments:}, is_physics_processing_internal:{arguments:, default_arguments:}, is_processing:{arguments:, default_arguments:}, is_processing_input:{arguments:, default_arguments:}, is_processing_internal:{arguments:, default_arguments:}, is_processing_unhandled_input:{arguments:, default_arguments:}, is_processing_unhandled_key_input:{arguments:, default_arguments:}, is_queued_for_deletion:{arguments:, default_arguments:}, math_fight:{arguments:, default_arguments:}, move_child:{arguments:a, b, default_arguments:a, b}, multiply:{arguments:a, b, default_arguments:a, b}, notification:{arguments:a, b, default_arguments:a, b = False}, pi:{arguments:, default_arguments:}, print_stray_nodes:{arguments:, default_arguments:}, print_tree:{arguments:, default_arguments:}, print_tree_pretty:{arguments:, default_arguments:}, propagate_call:{arguments:a, b, c, default_arguments:a, b = [], c = False}, propagate_notification:{arguments:a, default_arguments:a}, property_list_changed_notify:{arguments:, default_arguments:}, queue_free:{arguments:, default_arguments:}, raise:{arguments:, default_arguments:}, remove_and_skip:{arguments:, default_arguments:}, remove_child:{arguments:a, default_arguments:a}, remove_from_group:{arguments:a, default_arguments:a}, remove_meta:{arguments:a, default_arguments:a}, replace_by:{arguments:a, b, default_arguments:a, b = False}, request_ready:{arguments:, default_arguments:}, rpc:{arguments:a, default_arguments:a}, rpc_config:{arguments:a, b, default_arguments:a, b}, rpc_id:{arguments:a, b, default_arguments:a, b}, rpc_unreliable:{arguments:a, default_arguments:a}, rpc_unreliable_id:{arguments:a, b, default_arguments:a, b}, rset:{arguments:a, b, default_arguments:a, b}, rset_config:{arguments:a, b, default_arguments:a, b}, rset_id:{arguments:a, b, c, default_arguments:a, b, c}, rset_unreliable:{arguments:a, b, default_arguments:a, b}, rset_unreliable_id:{arguments:a, b, c, default_arguments:a, b, c}, set:{arguments:a, b, default_arguments:a, b}, set_block_signals:{arguments:a, default_arguments:a}, set_custom_multiplayer:{arguments:a, default_arguments:a}, set_deferred:{arguments:a, b, default_arguments:a, b}, set_display_folded:{arguments:a, default_arguments:a}, set_filename:{arguments:a, default_arguments:a}, set_indexed:{arguments:a, b, default_arguments:a, b}, set_message_translation:{arguments:a, default_arguments:a}, set_meta:{arguments:a, b, default_arguments:a, b}, set_name:{arguments:a, default_arguments:a}, set_network_master:{arguments:a, b, default_arguments:a, b = True}, set_owner:{arguments:a, default_arguments:a}, set_pause_mode:{arguments:a, default_arguments:a}, set_physics_process:{arguments:a, default_arguments:a}, set_physics_process_internal:{arguments:a, default_arguments:a}, set_process:{arguments:a, default_arguments:a}, set_process_input:{arguments:a, default_arguments:a}, set_process_internal:{arguments:a, default_arguments:a}, set_process_priority:{arguments:a, default_arguments:a}, set_process_unhandled_input:{arguments:a, default_arguments:a}, set_process_unhandled_key_input:{arguments:a, default_arguments:a}, set_scene_instance_load_placeholder:{arguments:a, default_arguments:a}, set_script:{arguments:a, default_arguments:a}, subtract:{arguments:a, b, default_arguments:a, b}, sum:{arguments:a, default_arguments:a}, to_string:{arguments:, default_arguments:}, tr:{arguments:a, default_arguments:a}, update_configuration_warning:{arguments:, default_arguments:}} != |Dictionary| {_enter_tree:{arguments:, default_arguments:}, _exit_tree:{arguments:, default_arguments:}, _get:{arguments:a, default_arguments:a}, _get_configuration_warning:{arguments:, default_arguments:}, _get_editor_description:{arguments:, default_arguments:}, _get_import_path:{arguments:, default_arguments:}, _get_property_list:{arguments:, default_arguments:}, _init:{arguments:, default_arguments:}, _input:{arguments:a, default_arguments:a}, _notification:{arguments:a, default_arguments:a}, _physics_process:{arguments:a, default_arguments:a}, _process:{arguments:a, default_arguments:a}, _ready:{arguments:, default_arguments:}, _set:{arguments:a, b, default_arguments:a, b}, _set_editor_description:{arguments:a, default_arguments:a}, _set_import_path:{arguments:a, default_arguments:a}, _to_string:{arguments:, default_arguments:}, _unhandled_input:{arguments:a, default_arguments:a}, _unhandled_key_input:{arguments:a, default_arguments:a}, add:{arguments:a, b, default_arguments:a, b}, add_child:{arguments:a, b, default_arguments:a, b = False}, add_child_below_node:{arguments:a, b, c, default_arguments:a, b, c = False}, add_to_group:{arguments:a, b, default_arguments:a, b = False}, add_user_signal:{arguments:a, b, default_arguments:a, b = []}, call:{arguments:a, default_arguments:a}, call_deferred:{arguments:a, default_arguments:a}, callv:{arguments:a, b, default_arguments:a, b}, can_process:{arguments:, default_arguments:}, can_translate_messages:{arguments:, default_arguments:}, connect:{arguments:a, b, c, d, e, default_arguments:a, b, c, d = [], e = 0}, disconnect:{arguments:a, b, c, default_arguments:a, b, c}, divide:{arguments:a, b, default_arguments:a, b}, duplicate:{arguments:a, default_arguments:a = 15}, emit_signal:{arguments:a, default_arguments:a}, find_node:{arguments:a, b, c, default_arguments:a, b = True, c = True}, find_parent:{arguments:a, default_arguments:a}, free:{arguments:, default_arguments:}, get:{arguments:a, default_arguments:a}, get_child:{arguments:a, default_arguments:a}, get_child_count:{arguments:, default_arguments:}, get_children:{arguments:, default_arguments:}, get_class:{arguments:, default_arguments:}, get_custom_multiplayer:{arguments:, default_arguments:}, get_filename:{arguments:, default_arguments:}, get_groups:{arguments:, default_arguments:}, get_incoming_connections:{arguments:, default_arguments:}, get_index:{arguments:, default_arguments:}, get_indexed:{arguments:a, default_arguments:a}, get_instance_id:{arguments:, default_arguments:}, get_meta:{arguments:a, default_arguments:a}, get_meta_list:{arguments:, default_arguments:}, get_method_list:{arguments:, default_arguments:}, get_multiplayer:{arguments:, default_arguments:}, get_name:{arguments:, default_arguments:}, get_network_master:{arguments:, default_arguments:}, get_node:{arguments:a, default_arguments:a}, get_node_and_resource:{arguments:a, default_arguments:a}, get_node_or_null:{arguments:a, default_arguments:a}, get_owner:{arguments:, default_arguments:}, get_parent:{arguments:, default_arguments:}, get_path:{arguments:, default_arguments:}, get_path_to:{arguments:a, default_arguments:a}, get_pause_mode:{arguments:, default_arguments:}, get_physics_process_delta_time:{arguments:, default_arguments:}, get_position_in_parent:{arguments:, default_arguments:}, get_process_delta_time:{arguments:, default_arguments:}, get_process_priority:{arguments:, default_arguments:}, get_property_list:{arguments:, default_arguments:}, get_scene_instance_load_placeholder:{arguments:, default_arguments:}, get_script:{arguments:, default_arguments:}, get_signal_connection_list:{arguments:a, default_arguments:a}, get_signal_list:{arguments:, default_arguments:}, get_tree:{arguments:, default_arguments:}, get_viewport:{arguments:, default_arguments:}, has_meta:{arguments:a, default_arguments:a}, has_method:{arguments:a, default_arguments:a}, has_node:{arguments:a, default_arguments:a}, has_node_and_resource:{arguments:a, default_arguments:a}, has_signal:{arguments:a, default_arguments:a}, has_user_signal:{arguments:a, default_arguments:a}, is_a_parent_of:{arguments:a, default_arguments:a}, is_blocking_signals:{arguments:, default_arguments:}, is_class:{arguments:a, default_arguments:a}, is_connected:{arguments:a, b, c, default_arguments:a, b, c}, is_displayed_folded:{arguments:, default_arguments:}, is_greater_than:{arguments:a, default_arguments:a}, is_in_group:{arguments:a, default_arguments:a}, is_inside_tree:{arguments:, default_arguments:}, is_network_master:{arguments:, default_arguments:}, is_physics_processing:{arguments:, default_arguments:}, is_physics_processing_internal:{arguments:, default_arguments:}, is_processing:{arguments:, default_arguments:}, is_processing_input:{arguments:, default_arguments:}, is_processing_internal:{arguments:, default_arguments:}, is_processing_unhandled_input:{arguments:, default_arguments:}, is_processing_unhandled_key_input:{arguments:, default_arguments:}, is_queued_for_deletion:{arguments:, default_arguments:}, math_fight:{arguments:, default_arguments:}, move_child:{arguments:a, b, default_arguments:a, b}, multiply:{arguments:a, b, default_arguments:a, b}, notification:{arguments:a, b, default_arguments:a, b = False}, pi:{arguments:, default_arguments:}, print_stray_nodes:{arguments:, default_arguments:}, print_tree:{arguments:, default_arguments:}, print_tree_pretty:{arguments:, default_arguments:}, propagate_call:{arguments:a, b, c, default_arguments:a, b = [], c = False}, propagate_notification:{arguments:a, default_arguments:a}, property_list_changed_notify:{arguments:, default_arguments:}, queue_free:{arguments:, default_arguments:}, raise:{arguments:, default_arguments:}, remove_and_skip:{arguments:, default_arguments:}, remove_child:{arguments:a, default_arguments:a}, remove_from_group:{arguments:a, default_arguments:a}, remove_meta:{arguments:a, default_arguments:a}, replace_by:{arguments:a, b, default_arguments:a, b = False}, request_ready:{arguments:, default_arguments:}, rpc:{arguments:a, default_arguments:a}, rpc_config:{arguments:a, b, default_arguments:a, b}, rpc_id:{arguments:a, b, default_arguments:a, b}, rpc_unreliable:{arguments:a, default_arguments:a}, rpc_unreliable_id:{arguments:a, b, default_arguments:a, b}, rset:{arguments:a, b, default_arguments:a, b}, rset_config:{arguments:a, b, default_arguments:a, b}, rset_id:{arguments:a, b, c, default_arguments:a, b, c}, rset_unreliable:{arguments:a, b, default_arguments:a, b}, rset_unreliable_id:{arguments:a, b, c, default_arguments:a, b, c}, set:{arguments:a, b, default_arguments:a, b}, set_block_signals:{arguments:a, default_arguments:a}, set_custom_multiplayer:{arguments:a, default_arguments:a}, set_deferred:{arguments:a, b, default_arguments:a, b}, set_display_folded:{arguments:a, default_arguments:a}, set_filename:{arguments:a, default_arguments:a}, set_indexed:{arguments:a, b, default_arguments:a, b}, set_message_translation:{arguments:a, default_arguments:a}, set_meta:{arguments:a, b, default_arguments:a, b}, set_name:{arguments:a, default_arguments:a}, set_network_master:{arguments:a, b, default_arguments:a, b = True}, set_owner:{arguments:a, default_arguments:a}, set_pause_mode:{arguments:a, default_arguments:a}, set_physics_process:{arguments:a, default_arguments:a}, set_physics_process_internal:{arguments:a, default_arguments:a}, set_process:{arguments:a, default_arguments:a}, set_process_input:{arguments:a, default_arguments:a}, set_process_internal:{arguments:a, default_arguments:a}, set_process_priority:{arguments:a, default_arguments:a}, set_process_unhandled_input:{arguments:a, default_arguments:a}, set_process_unhandled_key_input:{arguments:a, default_arguments:a}, set_scene_instance_load_placeholder:{arguments:a, default_arguments:a}, set_script:{arguments:a, default_arguments:a}, subtract:{arguments:a, b, default_arguments:a, b}, sum:{arguments:a, default_arguments:a}, to_string:{arguments:, default_arguments:}, tr:{arguments:a, default_arguments:a}, update_configuration_warning:{arguments:, default_arguments:}}",
"success": true
} ],
"context": "When we create two of it for the same script",
"fullname": "test_When_we_create_two_of_it_for_the_same_script",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|Object| [Node:1528] is equal to |Object| [Node:1528]",
"context": "Then we get the same double back",
"expected": "|Object| [Node:1528] is equal to |Object| [Node:1528]",
"success": true
} ],
"context": "When we call the double the second time",
"fullname": "test_When_we_call_double_a_second_time_on",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 3,
"path": "res://tests/integration/script_director.test.gd",
"source": {
"containers": [ "res://tests/integration", "res://tests" ],
"method": "",
"path": "res://tests/integration/script_director.test.gd",
"tags": [  ],
"test": ExtResource( 13 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 3
}, {
"context": "Given a Test Double",
"methods": [ {
"assertions": [ {
"actual": "(1, 1) is builtin: Vector2",
"context": "Then we can call methods on it",
"expected": "(1, 1) is builtin: Vector2",
"success": true
} ],
"context": "When we double an inner class",
"fullname": "test_When_we_double_an_inner_class",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 4 is equal to |int| 4",
"context": "Then we get the correct result",
"expected": "|int| 4 is equal to |int| 4",
"success": true
} ],
"context": "When we call an add(x, y) method that we haven't directed",
"fullname": "test_When_we_call_an_add_method_that_we_have_not_directed",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then it returns true",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we call a method that we have stubbed to return true",
"fullname": "test_When_we_call_a_method_that_we_have_stubbed_to_return_true",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "add was called",
"context": "Then we can see that it was called at least once",
"expected": "add was called",
"success": true
} ],
"context": "When we call a method that we are spying on",
"fullname": "test_When_we_call_a_method_that_we_are_spying_on",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|null| Null == null",
"context": "Then we get null",
"expected": "|null| Null == null",
"success": true
} ],
"context": "When we call a method that we have dummied",
"fullname": "test_When_we_call_a_method_that_we_have_dummied",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|Object| [Node:1564] is equal to |Object| [Node:1564]",
"context": "Then it returns that same node",
"expected": "|Object| [Node:1564] is equal to |Object| [Node:1564]",
"success": true
} ],
"context": "When we call a method that we have stubbed to return a node",
"fullname": "test_When_we_call_a_method_that_we_have_stubbed_to_return_a_node",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "method: add was called with arguments: [10, 10]",
"context": "Then we can see that it was called with those arguments",
"expected": "method: add was called with arguments: [10, 10]",
"success": true
} ],
"context": "When we pass arguments to a method call that we are spying on",
"fullname": "test_When_we_pass_arguments_to_a_method_call_that_we_are_spying_on",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|String| Jackie is equal to |String| Jackie",
"context": "Then we can double the object successfully",
"expected": "|String| Jackie is equal to |String| Jackie",
"success": true
} ],
"context": "When we pass in dependecies on direct",
"fullname": "test_When_we_pass_in_deps_on_direct",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|Array| [10, 5] is equal to |Array| [10, 5]",
"context": "Then it returns a value",
"expected": "|Array| [10, 5] is equal to |Array| [10, 5]",
"success": true
} ],
"context": "When we pass an Object with a call_func function",
"fullname": "test_When_we_pass_an_object_with_callfunc_method_as_a_subcall",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 100 is equal to |int| 100",
"context": "Then it returns the default stubbed value when the arguments don't match any pattern",
"expected": "|int| 100 is equal to |int| 100",
"success": true
}, {
"actual": "|int| 1000 is equal to |int| 1000",
"context": "Then it returns the the corresponding value to the pattern the arguments matched",
"expected": "|int| 1000 is equal to |int| 1000",
"success": true
} ],
"context": "When we call a method that was stubbed to return different values based on argument patterns",
"fullname": "test_When_we_call_a_method_that_was_stubbed_to_return_different_values_based_on_argument_patterns",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|int| 9999 is equal to |int| 9999",
"context": "Then it returns the corresponding value when the pattern matches",
"expected": "|int| 9999 is equal to |int| 9999",
"success": true
} ],
"context": "When we call a method that was stubbed with an argument pattern that includes a non-primitive object",
"fullname": "test_When_we_call_a_method_that_was_stubbed_with_an_argument_pattern_that_includes_a_non_primitive_object",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|float| 6.283185 is equal to |float| 6.283185",
"context": "Then we can call the static methods of that inner double",
"expected": "|float| 6.283185 is equal to |float| 6.283185",
"success": true
} ],
"context": "When we add an doubled inner class to it",
"fullname": "test_When_we_add_a_doubled_inner_class_to_it",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| True is equal to |bool| True",
"context": "Then we can call it",
"expected": "|bool| True is equal to |bool| True",
"success": true
} ],
"context": "When we stubbed a keyworded method by passing in the correct keyword",
"fullname": "test_When_we_stubbed_a_keyword_method_by_passing_in_the_correct_keyword",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|null| Null == null",
"context": "Then we get the stubbed value back",
"expected": "|null| Null == null",
"success": true
} ],
"context": "When we stub a method of a doubled inner class",
"fullname": "test_When_we_stub_a_method_of_a_double_inner_class",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 4 is equal to |int| 4",
"context": "Then it calls its super implementation by default",
"expected": "|int| 4 is equal to |int| 4",
"success": true
}, {
"actual": "|int| 9999 is equal to |int| 9999",
"context": "Then it does not call its super implementation when arguments patterns match a different return value",
"expected": "|int| 9999 is equal to |int| 9999",
"success": true
} ],
"context": "When we call a method that we stubbed to call its super implementation by default",
"fullname": "test_When_we_call_a_method_that_we_stubbed_to_call_its_super_implementation_by_default",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|int| 99 is equal to |int| 99",
"context": "Then it returns a value",
"expected": "|int| 99 is equal to |int| 99",
"success": true
} ],
"context": "When we pass a funcref as a subcall that returns",
"fullname": "test_When_we_pass_a_funcref_as_a_subcall_that_returns_a_value",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|String| Jackie is equal to |String| Jackie",
"context": "Then we can double the object successfully",
"expected": "|String| Jackie is equal to |String| Jackie",
"success": true
} ],
"context": "When we pass in dependecies on double",
"fullname": "test_When_we_pass_in_deps_on_double",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 9999 is equal to |int| 9999",
"context": "Then it returns the corresponding value when the partial pattern matches",
"expected": "|int| 9999 is equal to |int| 9999",
"success": true
} ],
"context": "When we call a method that was stubbed with a partial (ie using any()) argument pattern",
"fullname": "test_When_we_call_a_method_that_was_stubbed_with_a_partial_argument_pattern",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 99 is equal to |int| 99",
"context": "Then it affects the state of the double",
"expected": "|int| 99 is equal to |int| 99",
"success": true
} ],
"context": "When we pass a funcref as a subcall",
"fullname": "test_When_we_pass_a_funcref_as_a_subcall",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 19,
"path": "res://tests/integration/test_double.test.gd",
"source": {
"containers": [ "res://tests/integration", "res://tests" ],
"method": "",
"path": "res://tests/integration/test_double.test.gd",
"tags": [  ],
"test": ExtResource( 14 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 19
}, {
"context": "Given a Boolean Assertion",
"methods": [ {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then it passes",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When calling asserts.is_true(true)",
"fullname": "test_when_calling_asserts_is_true",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| True != false",
"context": "",
"expected": "|bool| True == false",
"success": false
} ],
"context": " intentional failure",
"fullname": "test_intentional_failure",
"passed": 0,
"success": false,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| False == false",
"context": "Then it passes",
"expected": "|bool| False == false",
"success": true
} ],
"context": "When calling asserts.is_false(false)",
"fullname": "test_when_calling_asserts_is_false",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 2,
"path": "res://tests/unit/boolean.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/boolean.test.gd",
"tags": [  ],
"test": ExtResource( 11 ),
"yield_time": 0.0
},
"success": false,
"time_taken": 0.0,
"total": 3
}, {
"context": "Given an Equality Assertion",
"methods": [ {
"assertions": [ {
"actual": "|int| 2 is greater than |int| 1",
"context": "Then it passes",
"expected": "|int| 2 is greater than |int| 1",
"success": true
} ],
"context": "When calling asserts.is_greater_than(2, 1)",
"fullname": "test_when_calling_is_greater_than",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 2 is equal or greater |int| 1",
"context": "Then it passes",
"expected": "|int| 2 is equal or greater |int| 1",
"success": true
} ],
"context": "When calling asserts.is_equal_or_greater_than(2, 1)",
"fullname": "test_when_calling_is_equal_or_greater_than",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 1 is less than |int| 2",
"context": "Then it passes",
"expected": "|int| 1 is less than |int| 2",
"success": true
} ],
"context": "When calling asserts.is_less_than(2, 1)",
"fullname": "test_when_calling_is_less_than",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 1 is equal to |int| 1",
"context": "Then it passes",
"expected": "|int| 1 is equal to |int| 1",
"success": true
} ],
"context": "When calling asserts.is_equal(1, 1)",
"fullname": "test_when_calling_is_equal",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 5 is not equal to |int| 6",
"context": "Then it passes",
"expected": "|int| 5 != |int| 6",
"success": true
} ],
"context": "When callign asserts.is_not_equal(5, 6)",
"fullname": "test_when_calling_is_not_equal",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 1 is equal or less than |int| 1",
"context": "Then it passes!",
"expected": "|int| 1 is equal or less than |int| 1",
"success": true
} ],
"context": "When calling asserts.is_equal_or_less_than(1, 1)",
"fullname": "test_when_calling_is_equal_or_less_than_with_equal_values",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 1 is equal or greater |int| 1",
"context": "Then it passes",
"expected": "|int| 1 is equal or greater |int| 1",
"success": true
} ],
"context": "When calling asserts.is_equal_or_greater_than(1, 1)",
"fullname": "test_when_calling_is_equal_or_greater_than_with_equal_values",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 7,
"path": "res://tests/unit/equality.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/equality.test.gd",
"tags": [  ],
"test": ExtResource( 8 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 7
}, {
"context": "Given A File Assertion",
"methods": [ {
"assertions": [ {
"actual": "res://tests/unit/file.test.gd exists",
"context": "Then it passes",
"expected": "res://tests/unit/file.test.gd exists",
"success": true
} ],
"context": "When calling asserts.file_exists when the file is this suite",
"fullname": "test_when_calling_file_exists_when_file_is_self",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "res://somefile.gd does not exist",
"context": "Then it passes",
"expected": "res://somefile.gd does not exist",
"success": true
} ],
"context": "When calling asserts.file_does_not_exist when there is no file",
"fullname": "test_when_calling_file_does_not_exist_when_there_is_no_file",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": " does not exist",
"context": "Then it passes",
"expected": " does not exist",
"success": true
} ],
"context": "When calling asserts file does not exist when path is empty",
"fullname": "test_when_calling_file_does_not_exist_when_path_is_empty",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 3,
"path": "res://tests/unit/file.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/file.test.gd",
"tags": [  ],
"test": ExtResource( 3 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 3
}, {
"context": "Given an Is Instance of class/type Assertion",
"methods": [ {
"assertions": [ {
"actual": "|Array| [] != null",
"context": "array is not null",
"expected": "|Array| [] != null",
"success": true
}, {
"actual": "[] is builtin: Array",
"context": "Then it passes",
"expected": "[] is builtin: Array",
"success": true
} ],
"context": "When calling asserts.is_Array(array: Array)",
"fullname": "test_when_calling_is_Array",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|Color| 0,0,0,1 != null",
"context": "color is not null",
"expected": "|Color| 0,0,0,1 != null",
"success": true
}, {
"actual": "0,0,0,1 is builtin: Color",
"context": "Then it passes",
"expected": "0,0,0,1 is builtin: Color",
"success": true
} ],
"context": "When calling asserts.is_color(color: Color)",
"fullname": "test_when_calling_is_Color",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|NodePath| . != null",
"context": "@'Parent/Child' is not null",
"expected": "|NodePath| . != null",
"success": true
}, {
"actual": ". is builtin: NodePath",
"context": "Then it passes",
"expected": ". is builtin: NodePath",
"success": true
} ],
"context": "When calling asserts.is_NodePath(@'Parent/Child')",
"fullname": "test_when_calling_is_NodePath",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "True is builtin: bool",
"context": "Then it passes",
"expected": "True is builtin: bool",
"success": true
} ],
"context": "When calling asserts.is_bool(true)",
"fullname": "test_when_calling_is_bool",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|AABB| 0, 0, 0 - 0, 0, 0 != null",
"context": "AABB is not null",
"expected": "|AABB| 0, 0, 0 - 0, 0, 0 != null",
"success": true
}, {
"actual": "0, 0, 0 - 0, 0, 0 is builtin: AABB",
"context": "Then it passes",
"expected": "0, 0, 0 - 0, 0, 0 is builtin: AABB",
"success": true
} ],
"context": "When calling asserts.is_AABB(aabb: AABB)",
"fullname": "test_when_calling_is_AABB",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "{} is builtin: Dictionary",
"context": "Then it passes",
"expected": "{} is builtin: Dictionary",
"success": true
} ],
"context": "When calling asserts.is_Dictionary({})",
"fullname": "test_when_calling_is_Dictionary",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "1 is builtin: float",
"context": "Then it passes",
"expected": "1 is builtin: float",
"success": true
} ],
"context": "When calling asserts.is_float(1.0)",
"fullname": "test_when_calling_is_float",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|Basis| ((1, 0, 0), (0, 1, 0), (0, 0, 1)) != null",
"context": "basis is not null",
"expected": "|Basis| ((1, 0, 0), (0, 1, 0), (0, 0, 1)) != null",
"success": true
}, {
"actual": "((1, 0, 0), (0, 1, 0), (0, 0, 1)) is builtin: Basis",
"context": "Then it passes",
"expected": "((1, 0, 0), (0, 1, 0), (0, 0, 1)) is builtin: Basis",
"success": true
} ],
"context": "When calling asserts.is_basis(basis: Basis",
"fullname": "test_when_calling_is_Basis",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "1 is builtin: int",
"context": "Then it passes",
"expected": "1 is builtin: int",
"success": true
} ],
"context": "When callign asserts.is_int(1)",
"fullname": "test_when_calling_is_int",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|Object| [Node:1707] != null",
"context": "node is not null",
"expected": "|Object| [Node:1707] != null",
"success": true
}, {
"actual": "[Node:1707] is builtin: Object",
"context": "An instance of node is an Object",
"expected": "[Node:1707] is builtin: Object",
"success": true
} ],
"context": "When calling is asserts.object(node: Node)",
"fullname": "test_when_calling_is_object",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|Plane| 0, 0, 0, 0 != null",
"context": "plane is not null",
"expected": "|Plane| 0, 0, 0, 0 != null",
"success": true
}, {
"actual": "0, 0, 0, 0 is builtin: Plane",
"context": "then it passes",
"expected": "0, 0, 0, 0 is builtin: Plane",
"success": true
} ],
"context": "When calling asserts.is_Plane(plane: Plane())",
"fullname": "test_when_calling_is_Plane",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|RID| [RID] != null",
"context": "rid is not null",
"expected": "|RID| [RID] != null",
"success": true
}, {
"actual": "[RID] is builtin: RID",
"context": "Then it passes",
"expected": "[RID] is builtin: RID",
"success": true
} ],
"context": "When calling asserts.is_RID(rid: RID)",
"fullname": "test_when_calling_is_RID",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|Quat| (0, 0, 0, 1) != null",
"context": "quat is not null",
"expected": "|Quat| (0, 0, 0, 1) != null",
"success": true
}, {
"actual": "(0, 0, 0, 1) is builtin: Quat",
"context": "Then it passes",
"expected": "(0, 0, 0, 1) is builtin: Quat",
"success": true
} ],
"context": "When calling asserts.is_Quat(quat: Quat)",
"fullname": "test_when_calling_is_Quat",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|PoolByteArray| [PoolByteArray] != null",
"context": "bytes is not null",
"expected": "|PoolByteArray| [PoolByteArray] != null",
"success": true
}, {
"actual": "[PoolByteArray] is builtin: PoolByteArray",
"context": "Then it passes",
"expected": "[PoolByteArray] is builtin: PoolByteArray",
"success": true
} ],
"context": "When calling asserts.is_PoolByteArray(bytes: PoolByteArray)",
"fullname": "test_when_calling_is_PoolByteArray",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|String|  != null",
"context": "strs is not null",
"expected": "|String|  != null",
"success": true
}, {
"actual": " is builtin: String",
"context": "Then it passes",
"expected": " is builtin: String",
"success": true
} ],
"context": "When calling asserts.is_string(strs: String)",
"fullname": "test_when_calling_is_string",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|Vector3| (0, 0, 0) != null",
"context": "vec3 is not null",
"expected": "|Vector3| (0, 0, 0) != null",
"success": true
}, {
"actual": "(0, 0, 0) is builtin: Vector3",
"context": "Then it passes",
"expected": "(0, 0, 0) is builtin: Vector3",
"success": true
} ],
"context": "When calling asserts.is_Vector3(vec3: Vector3",
"fullname": "test_when_calling_is_Vector3",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|PoolIntArray| [] != null",
"context": "ints is not null",
"expected": "|PoolIntArray| [] != null",
"success": true
}, {
"actual": "[] is builtin: PoolIntArray",
"context": "Then it passes",
"expected": "[] is builtin: PoolIntArray",
"success": true
} ],
"context": "When calling asserts.is_PoolIntArray(ints: PoolIntArray)",
"fullname": "test_when_calling_is_PoolIntArray",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|PoolRealArray| [] != null",
"context": "reals is not null",
"expected": "|PoolRealArray| [] != null",
"success": true
}, {
"actual": "[] is builtin: PoolRealArray",
"context": "Then it passes",
"expected": "[] is builtin: PoolRealArray",
"success": true
} ],
"context": "When calling is asserts.is_PoolRealArray(reals: PoolRealArray)",
"fullname": "test_when_calling_is_PoolRealArray",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|Transform| 1, 0, 0, 0, 1, 0, 0, 0, 1 - 0, 0, 0 != null",
"context": "transform is not null",
"expected": "|Transform| 1, 0, 0, 0, 1, 0, 0, 0, 1 - 0, 0, 0 != null",
"success": true
}, {
"actual": "1, 0, 0, 0, 1, 0, 0, 0, 1 - 0, 0, 0 is builtin: Transform",
"context": "Then it passes",
"expected": "1, 0, 0, 0, 1, 0, 0, 0, 1 - 0, 0, 0 is builtin: Transform",
"success": true
} ],
"context": "When calling asserts.is_Transform(transform: Transform)",
"fullname": "test_when_calling_is_Transform",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|Transform2D| ((1, 0), (0, 1), (0, 0)) != null",
"context": "transform2D is not null",
"expected": "|Transform2D| ((1, 0), (0, 1), (0, 0)) != null",
"success": true
}, {
"actual": "((1, 0), (0, 1), (0, 0)) is builtin: Transform2D",
"context": "Then it passes",
"expected": "((1, 0), (0, 1), (0, 0)) is builtin: Transform2D",
"success": true
} ],
"context": "When calling asserts.is_Transform(transform2D: Transform2D)",
"fullname": "test_when_calling_is_Transform2D",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|PoolVector2Array| [] != null",
"context": "vec2s is not null",
"expected": "|PoolVector2Array| [] != null",
"success": true
}, {
"actual": "[] is builtin: PoolVector2Array",
"context": "Then it passes",
"expected": "[] is builtin: PoolVector2Array",
"success": true
} ],
"context": "When calling is asserts.is_PoolVector2Array(vec2s: PoolVector2Array)",
"fullname": "test_when_calling_is_PoolVector2Array",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|Vector2| (0, 0) != null",
"context": "vec2 is not null",
"expected": "|Vector2| (0, 0) != null",
"success": true
}, {
"actual": "(0, 0) is builtin: Vector2",
"context": "Then it passes",
"expected": "(0, 0) is builtin: Vector2",
"success": true
} ],
"context": "When calling asserts.is_Vector2(vec2)",
"fullname": "test_when_calling_is_Vector2",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|PoolVector3Array| [] != null",
"context": "vec3s is not null",
"expected": "|PoolVector3Array| [] != null",
"success": true
}, {
"actual": "[] is builtin: PoolVector3Array",
"context": "Then it passes",
"expected": "[] is builtin: PoolVector3Array",
"success": true
} ],
"context": "When calling is asserts.is_PoolVector3Array(vec3s: PoolVector3Array)",
"fullname": "test_when_calling_is_PoolVector3Array",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|Rect2| (0, 0, 0, 0) != null",
"context": "rect2 is not null",
"expected": "|Rect2| (0, 0, 0, 0) != null",
"success": true
}, {
"actual": "(0, 0, 0, 0) is builtin: Rect2",
"context": "Then it passes",
"expected": "(0, 0, 0, 0) is builtin: Rect2",
"success": true
} ],
"context": "When calling asserts.is_Rect2(rect2: Rect2)",
"fullname": "test_when_calling_is_Rect2",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|PoolStringArray| [] != null",
"context": "strs is not null",
"expected": "|PoolStringArray| [] != null",
"success": true
}, {
"actual": "[] is builtin: PoolStringArray",
"context": "Then it passes",
"expected": "[] is builtin: PoolStringArray",
"success": true
} ],
"context": "When calling is asserts.is_PoolStringArray(strs: PoolStringArray)",
"fullname": "test_when_calling_is_PoolStringArray",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|PoolColorArray| [PoolColorArray] != null",
"context": "colors is not null",
"expected": "|PoolColorArray| [PoolColorArray] != null",
"success": true
}, {
"actual": "[PoolColorArray] is builtin: PoolColorArray",
"context": "Then it passes",
"expected": "[PoolColorArray] is builtin: PoolColorArray",
"success": true
} ],
"context": "When calling asserts.is_PoolColorArray(colors: PoolColorArray)",
"fullname": "test_when_calling_is_PoolColorArray",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
} ],
"passed": 26,
"path": "res://tests/unit/is_instance.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/is_instance.test.gd",
"tags": [  ],
"test": ExtResource( 6 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 26
}, {
"context": "Given an Is Not Instance of class/type Assertion",
"methods": [ {
"assertions": [ {
"actual": "Null is not builtin: AABB",
"context": "Then it passes",
"expected": "Null is not builtin: AABB",
"success": true
} ],
"context": "when calling asserts.is_not_AABB(null)",
"fullname": "test_when_calling_is_not_AABB",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Array",
"context": "Then it passes",
"expected": "Null is not builtin: Array",
"success": true
} ],
"context": "when calling asserts.is_not_Array(null)",
"fullname": "test_when_calling_is_not_Array",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Basis",
"context": "Then it passes",
"expected": "Null is not builtin: Basis",
"success": true
} ],
"context": "when calling asserts.is_not_Basis(null)",
"fullname": "test_when_calling_is_not_Basis",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: bool",
"context": "Then it passes",
"expected": "Null is not builtin: bool",
"success": true
} ],
"context": "when calling asserts.is_not_bool(null)",
"fullname": "test_when_calling_is_not_bool",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Color",
"context": "Then it passes",
"expected": "Null is not builtin: Color",
"success": true
} ],
"context": "when calling asserts.is_not_Color(null)",
"fullname": "test_when_calling_is_not_Color",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Transform",
"context": "Then it passes",
"expected": "Null is not builtin: Transform",
"success": true
} ],
"context": "when calling asserts.is_not_Transform(null)",
"fullname": "test_when_calling_is_not_Transform",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: PoolIntArray",
"context": "Then it passes",
"expected": "Null is not builtin: PoolIntArray",
"success": true
} ],
"context": "when calling asserts.is_not_PoolIntArray(null)",
"fullname": "test_when_calling_is_not_PoolIntArray",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Rect2",
"context": "Then it passes",
"expected": "Null is not builtin: Rect2",
"success": true
} ],
"context": "when calling asserts.is_not_Rect2(null)",
"fullname": "test_when_calling_is_not_Rect2",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Vector2",
"context": "Then it passes",
"expected": "Null is not builtin: Vector2",
"success": true
} ],
"context": "when calling asserts.is_not_Vector2(null)",
"fullname": "test_when_calling_is_not_Vector2",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: RID",
"context": "Then it passes",
"expected": "Null is not builtin: RID",
"success": true
} ],
"context": "when calling asserts.is_not_RID(null)",
"fullname": "test_when_calling_is_not_RID",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: PoolStringArray",
"context": "Then it passes",
"expected": "Null is not builtin: PoolStringArray",
"success": true
} ],
"context": "when calling asserts.is_not_PoolStringArray(null)",
"fullname": "test_when_calling_is_not_PoolStringArray",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: NodePath",
"context": "Then it passes",
"expected": "Null is not builtin: NodePath",
"success": true
} ],
"context": "when calling asserts.is_not_NodePath(null)",
"fullname": "test_when_calling_is_not_NodePath",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: PoolVector3Array",
"context": "Then it passes",
"expected": "Null is not builtin: PoolVector3Array",
"success": true
} ],
"context": "when calling asserts.is_not_PoolVector3Array(null)",
"fullname": "test_when_calling_is_not_PoolVector3Array",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: float",
"context": "Then it passes",
"expected": "Null is not builtin: float",
"success": true
} ],
"context": "when calling asserts.is_not_float(null)",
"fullname": "test_when_calling_is_not_float",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: String",
"context": "Then it passes",
"expected": "Null is not builtin: String",
"success": true
} ],
"context": "when calling asserts.is_not_String(null)",
"fullname": "test_when_calling_is_not_String",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: PoolColorArray",
"context": "Then it passes",
"expected": "Null is not builtin: PoolColorArray",
"success": true
} ],
"context": "when calling asserts.is_not_PoolColorArray(null)",
"fullname": "test_when_calling_is_not_PoolColorArray",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Transform2D",
"context": "Then it passes",
"expected": "Null is not builtin: Transform2D",
"success": true
} ],
"context": "when calling asserts.is_not_Transform2D(null)",
"fullname": "test_when_calling_is_not_Transform2D",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Plane",
"context": "Then it passes",
"expected": "Null is not builtin: Plane",
"success": true
} ],
"context": "when calling asserts.is_not_Plane(null)",
"fullname": "test_when_calling_is_not_Plane",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Vector3",
"context": "Then it passes",
"expected": "Null is not builtin: Vector3",
"success": true
} ],
"context": "when calling asserts.is_not_Vector3(null)",
"fullname": "test_when_calling_is_not_Vector3",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: PoolVector2Array",
"context": "Then it passes",
"expected": "Null is not builtin: PoolVector2Array",
"success": true
} ],
"context": "when calling asserts.is_not_PoolVector2Array(null)",
"fullname": "test_when_calling_is_not_PoolVector2Array",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: int",
"context": "Then it passes",
"expected": "Null is not builtin: int",
"success": true
} ],
"context": "when calling asserts.is_not_int(null)",
"fullname": "test_when_calling_is_not_int",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Dictionary",
"context": "Then it passes",
"expected": "Null is not builtin: Dictionary",
"success": true
} ],
"context": "when calling asserts.is_not_Dictionary(null)",
"fullname": "test_when_calling_is_not_Dictionary",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Object",
"context": "Then it passes",
"expected": "Null is not builtin: Object",
"success": true
} ],
"context": "when calling asserts.is_not_Object(null)",
"fullname": "test_when_calling_is_not_Object",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: PoolRealArray",
"context": "Then it passes",
"expected": "Null is not builtin: PoolRealArray",
"success": true
} ],
"context": "when calling asserts.is_not_PoolRealArray(null)",
"fullname": "test_when_calling_is_not_PoolRealArray",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: PoolByteArray",
"context": "Then it passes",
"expected": "Null is not builtin: PoolByteArray",
"success": true
} ],
"context": "when calling asserts.is_not_PoolByteArray(null)",
"fullname": "test_when_calling_is_not_PoolByteArray",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Quat",
"context": "Then it passes",
"expected": "Null is not builtin: Quat",
"success": true
} ],
"context": "when calling asserts.is_not_Quat(null)",
"fullname": "test_when_calling_is_not_Quat",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 26,
"path": "res://tests/unit/is_not_instance.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/is_not_instance.test.gd",
"tags": [  ],
"test": ExtResource( 2 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 26
}, {
"context": "Given a Null Assertion",
"methods": [ {
"assertions": [ {
"actual": "|Object| [Node:1774] != null",
"context": "Then it passes",
"expected": "|Object| [Node:1774] != null",
"success": true
} ],
"context": "When calling Node is not null",
"fullname": "test_when_calling_node_is_not_null",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|null| Null == null",
"context": "Then it passes",
"expected": "|null| Null == null",
"success": true
} ],
"context": "When calling asserts.is_null(null)",
"fullname": "test_when_calling_null_is_null",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|Object| [Deleted Object] == null",
"context": "A Freed Node is null in Engine 3.2.2 or greater",
"expected": "|Object| [Deleted Object] == null",
"success": true
} ],
"context": "When calling freed object is null",
"fullname": "test_when_calling_freed_object_is_not_null",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 3,
"path": "res://tests/unit/null.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/null.test.gd",
"tags": [  ],
"test": ExtResource( 12 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 3
}, {
"context": "Given an Object Assertion",
"methods": [ {
"assertions": [ {
"actual": "[Node:1779] does not have user signal: builtin_dummy",
"context": "Then it passes",
"expected": "[Node:1779] does not have user signal: builtin_dummy",
"success": true
} ],
"context": "When calling does not have user signal with class signal",
"fullname": "test_when_calling_does_not_have_user_signal_with_class_signal_constant",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:1779].builtin_dummy is not connected to [Node:1779].title",
"context": "Then it passes",
"expected": "[Node:1779].builtin_dummy is not connected to [Node:1779].title",
"success": true
} ],
"context": "When calling asserts object is not connected with an invalid connection",
"fullname": "test_when_calling_obj_is_not_connected_with_an_invalid_connection",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:1784] is not blocking signals",
"context": "Then it passes",
"expected": "[Node:1784] is not blocking signals",
"success": true
} ],
"context": "When calling is not blocking signals while not blocking signals",
"fullname": "test_is_not_blocking_signals",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:1786] is not queued for deletion",
"context": "Then it passes",
"expected": "[Node:1786] is not queued for deletion",
"success": true
} ],
"context": "When calling asserts.object_is_not_for_queued_deletion after not calling queue free()",
"fullname": "test_when_calling_obj_is_not_for_queued_deletion_after_not_calling_queue_free",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:1779].builtin_dummy is connected to [Node:1779].title",
"context": "Then it passes",
"expected": "[Node:1779].builtin_dummy is connected to [Node:1779].title",
"success": true
} ],
"context": "When calling asserts object is connected with a valid connection",
"fullname": "test_when_calling_obj_is_connected_with_a_real_connection",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:1789] is queued for deletion",
"context": "Then it passes",
"expected": "[Node:1789] is queued for deletion",
"success": true
} ],
"context": "When calling asserts.object_is_queued for deletion after calling queue_free",
"fullname": "test_when_calling_obj_is_queued_for_deletion_after_calling_queue_free",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:1791] is blocking signals",
"context": "Then it passes",
"expected": "[Node:1791] is blocking signals",
"success": true
} ],
"context": "When calling is blocking signals while blocking signals",
"fullname": "test_is_blocking_signals",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:1793] is not freed",
"context": "Then it passes",
"expected": "[Node:1793] is not freed",
"success": true
} ],
"context": "When calling asserts.is_not_freed(unfreed_object)",
"fullname": "test_when_calling_unfreed_object_is_not_freed",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:1779] has meta: dummy",
"context": "Then it passes",
"expected": "[Node:1779] has meta: dummy",
"success": true
}, {
"actual": "[Node:1779] has meta: dummy",
"context": "Then it passes",
"expected": "[Node:1779] has meta: dummy",
"success": true
} ],
"context": "When calling asserts.object_has_meta() after adding metadata",
"fullname": "test_when_calling_has_meta_after_adding_metadata",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "[Node:1779] does not have meta: bad_meta",
"context": "Then it passes",
"expected": "[Node:1779] does not have meta: bad_meta",
"success": true
} ],
"context": "When calling asserts.object_does_not_have_meta()",
"fullname": "test_when_calling_does_not_have_meta",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is freed from memory",
"context": "Then it passes",
"expected": "Null is freed from memory",
"success": true
} ],
"context": "When calling asserts.is_freed(freed_object",
"fullname": "test_when_calling_freed_object_is_freed",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:1779] does not have meta: confusing",
"context": "Then it passes",
"expected": "[Node:1779] does not have meta: confusing",
"success": true
} ],
"context": "When calling asserts.object_has_meta with real key but null val",
"fullname": "test_when_calling_does_not_have_meta_real_key_null_value_pair",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:1779] has method: title",
"context": "Then it passes",
"expected": "[Node:1779] has method: title",
"success": true
} ],
"context": "When calling has_method('title')",
"fullname": "test_when_calling_has_method_title",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:1779] has user signal: dummy_signal",
"context": "Then it passes",
"expected": "[Node:1779] has user signal: dummy_signal",
"success": true
} ],
"context": "When calling obj_has_user_signal after adding a signal",
"fullname": "test_when_calling_has_user_signal_after_adding_a_signal",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:1779] does not have user signal: false_signal",
"context": "Then it passes",
"expected": "[Node:1779] does not have user signal: false_signal",
"success": true
} ],
"context": "When calling obj_does_not_have_user_signal with fake signal",
"fullname": "test_when_calling_does_not_have_user_signal",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 15,
"path": "res://tests/unit/object.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/object.test.gd",
"tags": [  ],
"test": ExtResource( 7 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 15
}, {
"context": "Given the Addition Operator",
"methods": [ {
"assertions": [ {
"actual": "|int| 0 is equal to |int| 0",
"context": "",
"expected": "|int| 0 is equal to |int| 0",
"success": true
} ],
"context": "When we subtract 2 from 2 we get 0",
"fullname": "test_subtract",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 2 is equal to |int| 2",
"context": "",
"expected": "|int| 2 is equal to |int| 2",
"success": true
} ],
"context": "When we subtract 5 from 3 we get 2",
"fullname": "test_subtract",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 1 is equal to |int| 1",
"context": "",
"expected": "|int| 1 is equal to |int| 1",
"success": true
} ],
"context": "When we subtract 7 from 6 we get 1",
"fullname": "test_subtract",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 4 is equal to |int| 4",
"context": "",
"expected": "|int| 4 is equal to |int| 4",
"success": true
} ],
"context": "When we add 2 to 2 we get 4",
"fullname": "test_add",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 8 is equal to |int| 8",
"context": "",
"expected": "|int| 8 is equal to |int| 8",
"success": true
} ],
"context": "When we add 5 to 3 we get 8",
"fullname": "test_add",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 13 is equal to |int| 13",
"context": "",
"expected": "|int| 13 is equal to |int| 13",
"success": true
} ],
"context": "When we add 7 to 6 we get 13",
"fullname": "test_add",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 6,
"path": "res://tests/unit/parameters.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/parameters.test.gd",
"tags": [  ],
"test": ExtResource( 16 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 6
}, {
"context": "Given A Range Assertion",
"methods": [ {
"assertions": [ {
"actual": "0 is in range(0, 10)",
"context": "Then it passes",
"expected": "0 is in range(0, 10)",
"success": true
} ],
"context": "When calling is (0) in range(0, 10)",
"fullname": "test_when_calling_is_in_range",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "10 is not in range(0, 10)",
"context": "Then it passes",
"expected": "10 is not in range(0, 10)",
"success": true
} ],
"context": "When calling is (10) not in range (in range(0, 10)",
"fullname": "test_when_calling_is_not_in_range",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 2,
"path": "res://tests/unit/range.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/range.test.gd",
"tags": [  ],
"test": ExtResource( 15 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 2
}, {
"context": "Given a String Assertion",
"methods": [ {
"assertions": [ {
"actual": "lorem impsum begins with lorem",
"context": "Then it passes",
"expected": "lorem impsum begins with lorem",
"success": true
} ],
"context": "When calling asserts.string_begins_with('lorem', 'lorem impsum')",
"fullname": "test_when_calling_string_begins_with",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "lorem impsum contains em im",
"context": "Then it passes",
"expected": "lorem impsum contains em im",
"success": true
} ],
"context": "When calling asserts.string_contains('em im', 'lorem impsum')",
"fullname": "test_when_calling_string_contains",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "impsum does not begin with bleh lorem",
"context": "Then it passes",
"expected": "impsum does not begin with bleh lorem",
"success": true
} ],
"context": "When calling asserts.string_does_not_begin_with('lorem', 'impsum')",
"fullname": "test_when_calling_string_does_not_begin_with",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "impsum does not end with lorem",
"context": "Then it passes",
"expected": "impsum does not end with lorem",
"success": true
} ],
"context": "When calling asserts.string_does_not_end_with('lorem', 'impsum')",
"fullname": "test_when_calling_string_does_not_end_with",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "impsum does not contain beem im",
"context": "Then it passes",
"expected": "impsum does not contain beem im",
"success": true
} ],
"context": "When calling asserts.string_does_not_contain('em im', 'impsum')",
"fullname": "test_when_calling_string_does_not_contain",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "lorem impsum ends with impsum",
"context": "Then it passes",
"expected": "lorem impsum ends with impsum",
"success": true
} ],
"context": "When calling asserts.string_ends_with('impsum', 'lorem impsum')",
"fullname": "test_when_calling_string_ends_with",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 6,
"path": "res://tests/unit/string.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/string.test.gd",
"tags": [  ],
"test": ExtResource( 9 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 6
}, {
"context": "Dummy Passing Test",
"methods": [ {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Passing!",
"expected": "|bool| True == true",
"success": true
} ],
"context": "This method passes",
"fullname": "test_this_method_passes",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 1,
"path": "res://tests/unit/suite.test.gd.DummyOne",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/suite.test.gd.DummyOne",
"tags": [  ],
"test": SubResource( 3 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 1
}, {
"context": "Dummy Test 2",
"methods": [ {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Passing!",
"expected": "|bool| True == true",
"success": true
} ],
"context": "This method passes",
"fullname": "test_this_method_passes",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 1,
"path": "res://tests/unit/suite.test.gd.DummyTwo",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/suite.test.gd.DummyTwo",
"tags": [  ],
"test": SubResource( 4 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 1
}, {
"context": "Given a Test Script",
"methods": [ {
"assertions": [ {
"actual": "|bool| True == true",
"context": "",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|int| 2 is equal to |int| 2",
"context": "",
"expected": "|int| 2 is equal to |int| 2",
"success": true
} ],
"context": " when we omit context we can see expected and got under method",
"fullname": "test_when_we_omit_context_we_can_see_expected_and_got_under_method",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|int| 10 is greater than |int| 1",
"context": "We get an array of multiple values back",
"expected": "|int| 10 is greater than |int| 1",
"success": true
}, {
"actual": "|int| 0 is not equal to |int| 9",
"context": "With different values",
"expected": "|int| 0 != |int| 9",
"success": true
}, {
"actual": "|int| 10 is greater than |int| 1",
"context": "And we can track multiple properties",
"expected": "|int| 10 is greater than |int| 1",
"success": true
} ],
"context": "When we record properties",
"fullname": "test_we_can_record_properties",
"passed": 3,
"success": true,
"time": 0.0,
"total": 3
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "if the test didn't break this works",
"expected": "|bool| True == true",
"success": true
} ],
"context": " we can omit describe",
"fullname": "test_we_can_omit_describe",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 3,
"path": "res://tests/unit/test.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/test.test.gd",
"tags": [  ],
"test": ExtResource( 19 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 3
}, {
"context": "Given a Signal Watcher",
"methods": [ {
"assertions": [ {
"actual": "signal: multiple was emitted from [Node:1846] 2",
"context": "Then we can track how many times we emitted it",
"expected": "signal: multiple was emitted from [Node:1846] 2",
"success": true
} ],
"context": "When we watch and signal and emit it multiple times",
"fullname": "test_When_we_watch_a_signal_and_emit_it_multiple_times",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "signal: example was emitted from [Node:1846]",
"context": "Then it captures the emitted signal",
"expected": "signal: example was emitted from [Node:1846]",
"success": true
} ],
"context": "When we watch and emit a signal",
"fullname": "test_When_we_watch_and_emit_a_signal",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Signal: example was not emitted from [Node:1846]",
"context": "Then it does not capture the non-emitted signal",
"expected": "Signal: example was not emitted from [Node:1846]",
"success": true
} ],
"context": "When we watch and do not emit a signal",
"fullname": "test_When_we_watch_and_do_not_emit_a_signal",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Signal: example was emitted from [Node:1846] with arguments: [1, 20, 5]",
"context": "Then it captures any arguments that where passed when the signal was emitted",
"expected": "Signal: example was emitted from [Node:1846] with arguments: [1, 20, 5]",
"success": true
} ],
"context": "When we watch a signal from an object with no bound variables",
"fullname": "test_When_we_watch_a_signal_from_an_object_with_no_bound_variables",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 4,
"path": "res://tests/unit/watcher.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/watcher.test.gd",
"tags": [  ],
"test": ExtResource( 17 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 4
}, {
"context": "Given a Yield",
"methods": [ {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then the yielder is unpaused",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then the timeout signal of the yielder is connected",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then our signal is connected to the yielder",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we call until signal",
"fullname": "test_When_we_call_until_signal",
"passed": 3,
"success": true,
"time": 0.0,
"total": 3
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then we set var c to true",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then we set var d to true",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we yield in pre thrice",
"fullname": "test_When_we_yield_in_pre",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then the timeout signal is disconnected",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then the signal-signal is disconnected",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When it is finished",
"fullname": "test_When_yielder_is_finished_signals_are_disconnected",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "[100, Null, Null, Null, Null, Null] is builtin: Array",
"context": "Then we get an array",
"expected": "[100, Null, Null, Null, Null, Null] is builtin: Array",
"success": true
}, {
"actual": "|int| 6 is equal to |int| 6",
"context": "Of size 6",
"expected": "|int| 6 is equal to |int| 6",
"success": true
}, {
"actual": "|int| 100 is equal to |int| 100",
"context": "Where element 0 is 100",
"expected": "|int| 100 is equal to |int| 100",
"success": true
} ],
"context": "When yield(self.yield_value()) returns",
"fullname": "test_When_we_yield_we_get_the_return_value",
"passed": 3,
"success": true,
"time": 0.0,
"total": 3
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then we set var e to true",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then we set var f to true",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we yield twice in execute",
"fullname": "test_When_we_yield_in_execute",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then yielder is not active",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When asserting against a test",
"fullname": "test_Yielder_is_not_active_when_asserting",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then the yielder is paused",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When a signal being yielded on is emitted",
"fullname": "test_When_a_signal_being_yielded_on_is_emitted_the_yielder_is_stopped",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then yielder is unpaused",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "The timeout signal of the yielder is connected",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we call until_timeout (with 1.0)",
"fullname": "test_When_we_call_until_timeout",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then the yielder is paused",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "The timeout signal of the yielder is not connected",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When the yielder times out on until_timeout(0.1)",
"fullname": "test_When_the_yielder_times_out",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then the yielder is paused",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then the timeout signal of the yielder is disconnected",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then our signal to the yielder is disconnected",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When the yielder heres our signal",
"fullname": "test_When_the_yielder_hears_our_signal",
"passed": 3,
"success": true,
"time": 0.0,
"total": 3
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then we set var a to true",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then we set var b to true",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we yield in start twice",
"fullname": "test_When_we_yield_in_start",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
} ],
"passed": 11,
"path": "res://tests/unit/yield.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/yield.test.gd",
"tags": [  ],
"test": ExtResource( 18 ),
"yield_time": 1.9
},
"success": true,
"time_taken": 0.0,
"total": 11
} ],
1610066599: [ {
"context": "Given a Boolean Assertion",
"methods": [ {
"assertions": [ {
"actual": "|bool| True != false",
"context": "",
"expected": "|bool| True == false",
"success": false
} ],
"context": " intentional failure",
"fullname": "test_intentional_failure",
"passed": 0,
"success": false,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then it passes",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When calling asserts.is_true(true)",
"fullname": "test_when_calling_asserts_is_true",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| False == false",
"context": "Then it passes",
"expected": "|bool| False == false",
"success": true
} ],
"context": "When calling asserts.is_false(false)",
"fullname": "test_when_calling_asserts_is_false",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 2,
"path": "res://tests/unit/boolean.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/boolean.test.gd",
"tags": [  ],
"test": ExtResource( 11 ),
"yield_time": 0.0
},
"success": false,
"time_taken": 0.0,
"total": 3
} ],
1611511731: [ {
"context": "Given a Boolean Assertion",
"methods": [ {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then it passes",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When calling asserts.is_true(true)",
"fullname": "test_when_calling_asserts_is_true",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| False == false",
"context": "Then it passes",
"expected": "|bool| False == false",
"success": true
} ],
"context": "When calling asserts.is_false(false)",
"fullname": "test_when_calling_asserts_is_false",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| True != false",
"context": "",
"expected": "|bool| True == false",
"success": false
} ],
"context": " intentional failure",
"fullname": "test_intentional_failure",
"passed": 0,
"success": false,
"time": 0.0,
"total": 1
} ],
"passed": 2,
"path": "res://tests/unit/boolean.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/boolean.test.gd",
"tags": [  ],
"test": ExtResource( 11 ),
"yield_time": 0.0
},
"success": false,
"time_taken": 0.0,
"total": 3
} ],
1611511820: [ {
"context": "Given a Boolean Assertion",
"methods": [ {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then it passes",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When calling asserts.is_true(true)",
"fullname": "test_when_calling_asserts_is_true",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| False == false",
"context": "Then it passes",
"expected": "|bool| False == false",
"success": true
} ],
"context": "When calling asserts.is_false(false)",
"fullname": "test_when_calling_asserts_is_false",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| True != false",
"context": "",
"expected": "|bool| True == false",
"success": false
} ],
"context": " intentional failure",
"fullname": "test_intentional_failure",
"passed": 0,
"success": false,
"time": 0.0,
"total": 1
} ],
"passed": 2,
"path": "res://tests/unit/boolean.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/boolean.test.gd",
"tags": [  ],
"test": ExtResource( 11 ),
"yield_time": 0.0
},
"success": false,
"time_taken": 0.0,
"total": 3
} ],
1611512311: [  ],
1611512339: [  ],
1611512351: [  ],
1611512377: [  ],
1611512414: [ {
"context": "Given a Boolean Assertion",
"methods": [ {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then it passes",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When calling asserts.is_true(true)",
"fullname": "test_when_calling_asserts_is_true",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| False == false",
"context": "Then it passes",
"expected": "|bool| False == false",
"success": true
} ],
"context": "When calling asserts.is_false(false)",
"fullname": "test_when_calling_asserts_is_false",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| True != false",
"context": "",
"expected": "|bool| True == false",
"success": false
} ],
"context": " intentional failure",
"fullname": "test_intentional_failure",
"passed": 0,
"success": false,
"time": 0.0,
"total": 1
} ],
"passed": 2,
"path": "res://tests/unit/boolean.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/boolean.test.gd",
"tags": [  ],
"test": ExtResource( 11 ),
"yield_time": 0.0
},
"success": false,
"time_taken": 0.0,
"total": 3
} ],
1611514220: [ {
"context": "Default Args",
"methods": [ {
"assertions": [ {
"actual": "|bool| True == true",
"context": "If this method can be reached then we have doubled a script with default argument(s) properly!",
"expected": "|bool| True == true",
"success": true
} ],
"context": " default arguments of interpolate property",
"fullname": "test_default_arguments_of_interpolate_property",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 1,
"path": "res://tests/integration/default_args.test.gd",
"source": {
"containers": [ "res://tests/integration", "res://tests" ],
"method": "",
"path": "res://tests/integration/default_args.test.gd",
"tags": [  ],
"test": ExtResource( 10 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 1
}, {
"context": "Given a Boolean Assertion",
"methods": [ {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then it passes",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When calling asserts.is_true(true)",
"fullname": "test_when_calling_asserts_is_true",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| False == false",
"context": "Then it passes",
"expected": "|bool| False == false",
"success": true
} ],
"context": "When calling asserts.is_false(false)",
"fullname": "test_when_calling_asserts_is_false",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| True != false",
"context": "",
"expected": "|bool| True == false",
"success": false
} ],
"context": " intentional failure",
"fullname": "test_intentional_failure",
"passed": 0,
"success": false,
"time": 0.0,
"total": 1
} ],
"passed": 2,
"path": "res://tests/integration/boolean.test.gd",
"source": {
"containers": [ "res://tests/integration", "res://tests" ],
"method": "",
"path": "res://tests/integration/boolean.test.gd",
"tags": [  ],
"test": ExtResource( 20 ),
"yield_time": 0.0
},
"success": false,
"time_taken": 0.0,
"total": 3
}, {
"context": "Given is_on_floor",
"methods": [ {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then it can be stubbed",
"expected": "|bool| True == true",
"success": true
} ],
"context": "From a child node of a scene without scripts",
"fullname": "test_stubbing_is_on_floor_as_child_node_with_no_script",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then it can be stubbed",
"expected": "|bool| True == true",
"success": true
} ],
"context": "From a user-defined script",
"fullname": "test_stubbing_is_on_floor_method_from_user_defined_class",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then it can be stubbed",
"expected": "|bool| True == true",
"success": true
} ],
"context": "From a built-in KinematicBody2D2",
"fullname": "test_stubbing_is_on_floor_method_from_builtin_class2",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 3,
"path": "res://tests/integration/on_floor.test.gd",
"source": {
"containers": [ "res://tests/integration", "res://tests" ],
"method": "",
"path": "res://tests/integration/on_floor.test.gd",
"tags": [  ],
"test": ExtResource( 5 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 3
}, {
"context": "Given a Scene Director",
"methods": [ {
"assertions": [ {
"actual": "|Dictionary| {.:[Reference:1383], A:[Reference:1384], A/B:[Reference:1386], C:[Reference:1385], C/D:[Reference:1387]} is not equal to |Dictionary| {.:[Reference:1419], A:[Reference:1420], A/B:[Reference:1422], C:[Reference:1421], C/D:[Reference:1423]}",
"context": "Then they do not share resources",
"expected": "|Dictionary| {.:[Reference:1383], A:[Reference:1384], A/B:[Reference:1386], C:[Reference:1385], C/D:[Reference:1387]} != |Dictionary| {.:[Reference:1419], A:[Reference:1420], A/B:[Reference:1422], C:[Reference:1421], C/D:[Reference:1423]}",
"success": true
} ],
"context": "When we create two of it for the same scene",
"fullname": "test_When_we_create_two_of_it_for_the_same_scene",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 9999 is equal to |int| 9999",
"context": "Then we get the stubbed return value",
"expected": "|int| 9999 is equal to |int| 9999",
"success": true
} ],
"context": "When we call a method from the root node that we stubbed",
"fullname": "test_When_we_call_a_method_from_the_root_node_that_we_stubbed",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|NodePath| A is equal to |NodePath| A",
"context": "We have the correct NodePath Set",
"expected": "|NodePath| A is equal to |NodePath| A",
"success": true
} ],
"context": "When we add it to the tree it runs",
"fullname": "test_When_we_add_it_to_the_tree_it_runs",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 99 is equal to |int| 99",
"context": "Then we get the stubbed return value",
"expected": "|int| 99 is equal to |int| 99",
"success": true
} ],
"context": "When we call a method from a grandchild node that we stubbed",
"fullname": "test_When_we_call_a_method_from_a_grandchild_node_that_we_stubbed",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 999 is equal to |int| 999",
"context": "Then we get the stubbed return value",
"expected": "|int| 999 is equal to |int| 999",
"success": true
} ],
"context": "When we call a method from a child node that we stubbed",
"fullname": "test_When_we_call_a_method_from_a_child_node_that_we_stubbed",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 5,
"path": "res://tests/integration/scene_director.test.gd",
"source": {
"containers": [ "res://tests/integration", "res://tests" ],
"method": "",
"path": "res://tests/integration/scene_director.test.gd",
"tags": [  ],
"test": ExtResource( 4 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 5
}, {
"context": "Given a Script Director",
"methods": [ {
"assertions": [ {
"actual": "[Reference:1545] is instance of class: [GDScript:1538]",
"context": "Then we get that inner class back",
"expected": "[Reference:1545] is instance of class: [GDScript:1538]",
"success": true
} ],
"context": "When we double an inner class",
"fullname": "test_When_we_double_an_inner_class",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|Object| [Node:1583] is equal to |Object| [Node:1583]",
"context": "Then we get the same double back",
"expected": "|Object| [Node:1583] is equal to |Object| [Node:1583]",
"success": true
} ],
"context": "When we call the double the second time",
"fullname": "test_When_we_call_double_a_second_time_on",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|Dictionary| {_enter_tree:{arguments:, default_arguments:}, _exit_tree:{arguments:, default_arguments:}, _get:{arguments:a, default_arguments:a}, _get_configuration_warning:{arguments:, default_arguments:}, _get_editor_description:{arguments:, default_arguments:}, _get_import_path:{arguments:, default_arguments:}, _get_property_list:{arguments:, default_arguments:}, _init:{arguments:, default_arguments:}, _input:{arguments:a, default_arguments:a}, _notification:{arguments:a, default_arguments:a}, _physics_process:{arguments:a, default_arguments:a}, _process:{arguments:a, default_arguments:a}, _ready:{arguments:, default_arguments:}, _set:{arguments:a, b, default_arguments:a, b}, _set_editor_description:{arguments:a, default_arguments:a}, _set_import_path:{arguments:a, default_arguments:a}, _to_string:{arguments:, default_arguments:}, _unhandled_input:{arguments:a, default_arguments:a}, _unhandled_key_input:{arguments:a, default_arguments:a}, add:{arguments:a, b, default_arguments:a, b}, add_child:{arguments:a, b, default_arguments:a, b = False}, add_child_below_node:{arguments:a, b, c, default_arguments:a, b, c = False}, add_to_group:{arguments:a, b, default_arguments:a, b = False}, add_user_signal:{arguments:a, b, default_arguments:a, b = []}, call:{arguments:a, default_arguments:a}, call_deferred:{arguments:a, default_arguments:a}, callv:{arguments:a, b, default_arguments:a, b}, can_process:{arguments:, default_arguments:}, can_translate_messages:{arguments:, default_arguments:}, connect:{arguments:a, b, c, d, e, default_arguments:a, b, c, d = [], e = 0}, disconnect:{arguments:a, b, c, default_arguments:a, b, c}, divide:{arguments:a, b, default_arguments:a, b}, duplicate:{arguments:a, default_arguments:a = 15}, emit_signal:{arguments:a, default_arguments:a}, find_node:{arguments:a, b, c, default_arguments:a, b = True, c = True}, find_parent:{arguments:a, default_arguments:a}, free:{arguments:, default_arguments:}, get:{arguments:a, default_arguments:a}, get_child:{arguments:a, default_arguments:a}, get_child_count:{arguments:, default_arguments:}, get_children:{arguments:, default_arguments:}, get_class:{arguments:, default_arguments:}, get_custom_multiplayer:{arguments:, default_arguments:}, get_filename:{arguments:, default_arguments:}, get_groups:{arguments:, default_arguments:}, get_incoming_connections:{arguments:, default_arguments:}, get_index:{arguments:, default_arguments:}, get_indexed:{arguments:a, default_arguments:a}, get_instance_id:{arguments:, default_arguments:}, get_meta:{arguments:a, default_arguments:a}, get_meta_list:{arguments:, default_arguments:}, get_method_list:{arguments:, default_arguments:}, get_multiplayer:{arguments:, default_arguments:}, get_name:{arguments:, default_arguments:}, get_network_master:{arguments:, default_arguments:}, get_node:{arguments:a, default_arguments:a}, get_node_and_resource:{arguments:a, default_arguments:a}, get_node_or_null:{arguments:a, default_arguments:a}, get_owner:{arguments:, default_arguments:}, get_parent:{arguments:, default_arguments:}, get_path:{arguments:, default_arguments:}, get_path_to:{arguments:a, default_arguments:a}, get_pause_mode:{arguments:, default_arguments:}, get_physics_process_delta_time:{arguments:, default_arguments:}, get_position_in_parent:{arguments:, default_arguments:}, get_process_delta_time:{arguments:, default_arguments:}, get_process_priority:{arguments:, default_arguments:}, get_property_list:{arguments:, default_arguments:}, get_scene_instance_load_placeholder:{arguments:, default_arguments:}, get_script:{arguments:, default_arguments:}, get_signal_connection_list:{arguments:a, default_arguments:a}, get_signal_list:{arguments:, default_arguments:}, get_tree:{arguments:, default_arguments:}, get_viewport:{arguments:, default_arguments:}, has_meta:{arguments:a, default_arguments:a}, has_method:{arguments:a, default_arguments:a}, has_node:{arguments:a, default_arguments:a}, has_node_and_resource:{arguments:a, default_arguments:a}, has_signal:{arguments:a, default_arguments:a}, has_user_signal:{arguments:a, default_arguments:a}, is_a_parent_of:{arguments:a, default_arguments:a}, is_blocking_signals:{arguments:, default_arguments:}, is_class:{arguments:a, default_arguments:a}, is_connected:{arguments:a, b, c, default_arguments:a, b, c}, is_displayed_folded:{arguments:, default_arguments:}, is_greater_than:{arguments:a, default_arguments:a}, is_in_group:{arguments:a, default_arguments:a}, is_inside_tree:{arguments:, default_arguments:}, is_network_master:{arguments:, default_arguments:}, is_physics_processing:{arguments:, default_arguments:}, is_physics_processing_internal:{arguments:, default_arguments:}, is_processing:{arguments:, default_arguments:}, is_processing_input:{arguments:, default_arguments:}, is_processing_internal:{arguments:, default_arguments:}, is_processing_unhandled_input:{arguments:, default_arguments:}, is_processing_unhandled_key_input:{arguments:, default_arguments:}, is_queued_for_deletion:{arguments:, default_arguments:}, math_fight:{arguments:, default_arguments:}, move_child:{arguments:a, b, default_arguments:a, b}, multiply:{arguments:a, b, default_arguments:a, b}, notification:{arguments:a, b, default_arguments:a, b = False}, pi:{arguments:, default_arguments:}, print_stray_nodes:{arguments:, default_arguments:}, print_tree:{arguments:, default_arguments:}, print_tree_pretty:{arguments:, default_arguments:}, propagate_call:{arguments:a, b, c, default_arguments:a, b = [], c = False}, propagate_notification:{arguments:a, default_arguments:a}, property_list_changed_notify:{arguments:, default_arguments:}, queue_free:{arguments:, default_arguments:}, raise:{arguments:, default_arguments:}, remove_and_skip:{arguments:, default_arguments:}, remove_child:{arguments:a, default_arguments:a}, remove_from_group:{arguments:a, default_arguments:a}, remove_meta:{arguments:a, default_arguments:a}, replace_by:{arguments:a, b, default_arguments:a, b = False}, request_ready:{arguments:, default_arguments:}, rpc:{arguments:a, default_arguments:a}, rpc_config:{arguments:a, b, default_arguments:a, b}, rpc_id:{arguments:a, b, default_arguments:a, b}, rpc_unreliable:{arguments:a, default_arguments:a}, rpc_unreliable_id:{arguments:a, b, default_arguments:a, b}, rset:{arguments:a, b, default_arguments:a, b}, rset_config:{arguments:a, b, default_arguments:a, b}, rset_id:{arguments:a, b, c, default_arguments:a, b, c}, rset_unreliable:{arguments:a, b, default_arguments:a, b}, rset_unreliable_id:{arguments:a, b, c, default_arguments:a, b, c}, set:{arguments:a, b, default_arguments:a, b}, set_block_signals:{arguments:a, default_arguments:a}, set_custom_multiplayer:{arguments:a, default_arguments:a}, set_deferred:{arguments:a, b, default_arguments:a, b}, set_display_folded:{arguments:a, default_arguments:a}, set_filename:{arguments:a, default_arguments:a}, set_indexed:{arguments:a, b, default_arguments:a, b}, set_message_translation:{arguments:a, default_arguments:a}, set_meta:{arguments:a, b, default_arguments:a, b}, set_name:{arguments:a, default_arguments:a}, set_network_master:{arguments:a, b, default_arguments:a, b = True}, set_owner:{arguments:a, default_arguments:a}, set_pause_mode:{arguments:a, default_arguments:a}, set_physics_process:{arguments:a, default_arguments:a}, set_physics_process_internal:{arguments:a, default_arguments:a}, set_process:{arguments:a, default_arguments:a}, set_process_input:{arguments:a, default_arguments:a}, set_process_internal:{arguments:a, default_arguments:a}, set_process_priority:{arguments:a, default_arguments:a}, set_process_unhandled_input:{arguments:a, default_arguments:a}, set_process_unhandled_key_input:{arguments:a, default_arguments:a}, set_scene_instance_load_placeholder:{arguments:a, default_arguments:a}, set_script:{arguments:a, default_arguments:a}, subtract:{arguments:a, b, default_arguments:a, b}, sum:{arguments:a, default_arguments:a}, to_string:{arguments:, default_arguments:}, tr:{arguments:a, default_arguments:a}, update_configuration_warning:{arguments:, default_arguments:}} is not equal to |Dictionary| {_enter_tree:{arguments:, default_arguments:}, _exit_tree:{arguments:, default_arguments:}, _get:{arguments:a, default_arguments:a}, _get_configuration_warning:{arguments:, default_arguments:}, _get_editor_description:{arguments:, default_arguments:}, _get_import_path:{arguments:, default_arguments:}, _get_property_list:{arguments:, default_arguments:}, _init:{arguments:, default_arguments:}, _input:{arguments:a, default_arguments:a}, _notification:{arguments:a, default_arguments:a}, _physics_process:{arguments:a, default_arguments:a}, _process:{arguments:a, default_arguments:a}, _ready:{arguments:, default_arguments:}, _set:{arguments:a, b, default_arguments:a, b}, _set_editor_description:{arguments:a, default_arguments:a}, _set_import_path:{arguments:a, default_arguments:a}, _to_string:{arguments:, default_arguments:}, _unhandled_input:{arguments:a, default_arguments:a}, _unhandled_key_input:{arguments:a, default_arguments:a}, add:{arguments:a, b, default_arguments:a, b}, add_child:{arguments:a, b, default_arguments:a, b = False}, add_child_below_node:{arguments:a, b, c, default_arguments:a, b, c = False}, add_to_group:{arguments:a, b, default_arguments:a, b = False}, add_user_signal:{arguments:a, b, default_arguments:a, b = []}, call:{arguments:a, default_arguments:a}, call_deferred:{arguments:a, default_arguments:a}, callv:{arguments:a, b, default_arguments:a, b}, can_process:{arguments:, default_arguments:}, can_translate_messages:{arguments:, default_arguments:}, connect:{arguments:a, b, c, d, e, default_arguments:a, b, c, d = [], e = 0}, disconnect:{arguments:a, b, c, default_arguments:a, b, c}, divide:{arguments:a, b, default_arguments:a, b}, duplicate:{arguments:a, default_arguments:a = 15}, emit_signal:{arguments:a, default_arguments:a}, find_node:{arguments:a, b, c, default_arguments:a, b = True, c = True}, find_parent:{arguments:a, default_arguments:a}, free:{arguments:, default_arguments:}, get:{arguments:a, default_arguments:a}, get_child:{arguments:a, default_arguments:a}, get_child_count:{arguments:, default_arguments:}, get_children:{arguments:, default_arguments:}, get_class:{arguments:, default_arguments:}, get_custom_multiplayer:{arguments:, default_arguments:}, get_filename:{arguments:, default_arguments:}, get_groups:{arguments:, default_arguments:}, get_incoming_connections:{arguments:, default_arguments:}, get_index:{arguments:, default_arguments:}, get_indexed:{arguments:a, default_arguments:a}, get_instance_id:{arguments:, default_arguments:}, get_meta:{arguments:a, default_arguments:a}, get_meta_list:{arguments:, default_arguments:}, get_method_list:{arguments:, default_arguments:}, get_multiplayer:{arguments:, default_arguments:}, get_name:{arguments:, default_arguments:}, get_network_master:{arguments:, default_arguments:}, get_node:{arguments:a, default_arguments:a}, get_node_and_resource:{arguments:a, default_arguments:a}, get_node_or_null:{arguments:a, default_arguments:a}, get_owner:{arguments:, default_arguments:}, get_parent:{arguments:, default_arguments:}, get_path:{arguments:, default_arguments:}, get_path_to:{arguments:a, default_arguments:a}, get_pause_mode:{arguments:, default_arguments:}, get_physics_process_delta_time:{arguments:, default_arguments:}, get_position_in_parent:{arguments:, default_arguments:}, get_process_delta_time:{arguments:, default_arguments:}, get_process_priority:{arguments:, default_arguments:}, get_property_list:{arguments:, default_arguments:}, get_scene_instance_load_placeholder:{arguments:, default_arguments:}, get_script:{arguments:, default_arguments:}, get_signal_connection_list:{arguments:a, default_arguments:a}, get_signal_list:{arguments:, default_arguments:}, get_tree:{arguments:, default_arguments:}, get_viewport:{arguments:, default_arguments:}, has_meta:{arguments:a, default_arguments:a}, has_method:{arguments:a, default_arguments:a}, has_node:{arguments:a, default_arguments:a}, has_node_and_resource:{arguments:a, default_arguments:a}, has_signal:{arguments:a, default_arguments:a}, has_user_signal:{arguments:a, default_arguments:a}, is_a_parent_of:{arguments:a, default_arguments:a}, is_blocking_signals:{arguments:, default_arguments:}, is_class:{arguments:a, default_arguments:a}, is_connected:{arguments:a, b, c, default_arguments:a, b, c}, is_displayed_folded:{arguments:, default_arguments:}, is_greater_than:{arguments:a, default_arguments:a}, is_in_group:{arguments:a, default_arguments:a}, is_inside_tree:{arguments:, default_arguments:}, is_network_master:{arguments:, default_arguments:}, is_physics_processing:{arguments:, default_arguments:}, is_physics_processing_internal:{arguments:, default_arguments:}, is_processing:{arguments:, default_arguments:}, is_processing_input:{arguments:, default_arguments:}, is_processing_internal:{arguments:, default_arguments:}, is_processing_unhandled_input:{arguments:, default_arguments:}, is_processing_unhandled_key_input:{arguments:, default_arguments:}, is_queued_for_deletion:{arguments:, default_arguments:}, math_fight:{arguments:, default_arguments:}, move_child:{arguments:a, b, default_arguments:a, b}, multiply:{arguments:a, b, default_arguments:a, b}, notification:{arguments:a, b, default_arguments:a, b = False}, pi:{arguments:, default_arguments:}, print_stray_nodes:{arguments:, default_arguments:}, print_tree:{arguments:, default_arguments:}, print_tree_pretty:{arguments:, default_arguments:}, propagate_call:{arguments:a, b, c, default_arguments:a, b = [], c = False}, propagate_notification:{arguments:a, default_arguments:a}, property_list_changed_notify:{arguments:, default_arguments:}, queue_free:{arguments:, default_arguments:}, raise:{arguments:, default_arguments:}, remove_and_skip:{arguments:, default_arguments:}, remove_child:{arguments:a, default_arguments:a}, remove_from_group:{arguments:a, default_arguments:a}, remove_meta:{arguments:a, default_arguments:a}, replace_by:{arguments:a, b, default_arguments:a, b = False}, request_ready:{arguments:, default_arguments:}, rpc:{arguments:a, default_arguments:a}, rpc_config:{arguments:a, b, default_arguments:a, b}, rpc_id:{arguments:a, b, default_arguments:a, b}, rpc_unreliable:{arguments:a, default_arguments:a}, rpc_unreliable_id:{arguments:a, b, default_arguments:a, b}, rset:{arguments:a, b, default_arguments:a, b}, rset_config:{arguments:a, b, default_arguments:a, b}, rset_id:{arguments:a, b, c, default_arguments:a, b, c}, rset_unreliable:{arguments:a, b, default_arguments:a, b}, rset_unreliable_id:{arguments:a, b, c, default_arguments:a, b, c}, set:{arguments:a, b, default_arguments:a, b}, set_block_signals:{arguments:a, default_arguments:a}, set_custom_multiplayer:{arguments:a, default_arguments:a}, set_deferred:{arguments:a, b, default_arguments:a, b}, set_display_folded:{arguments:a, default_arguments:a}, set_filename:{arguments:a, default_arguments:a}, set_indexed:{arguments:a, b, default_arguments:a, b}, set_message_translation:{arguments:a, default_arguments:a}, set_meta:{arguments:a, b, default_arguments:a, b}, set_name:{arguments:a, default_arguments:a}, set_network_master:{arguments:a, b, default_arguments:a, b = True}, set_owner:{arguments:a, default_arguments:a}, set_pause_mode:{arguments:a, default_arguments:a}, set_physics_process:{arguments:a, default_arguments:a}, set_physics_process_internal:{arguments:a, default_arguments:a}, set_process:{arguments:a, default_arguments:a}, set_process_input:{arguments:a, default_arguments:a}, set_process_internal:{arguments:a, default_arguments:a}, set_process_priority:{arguments:a, default_arguments:a}, set_process_unhandled_input:{arguments:a, default_arguments:a}, set_process_unhandled_key_input:{arguments:a, default_arguments:a}, set_scene_instance_load_placeholder:{arguments:a, default_arguments:a}, set_script:{arguments:a, default_arguments:a}, subtract:{arguments:a, b, default_arguments:a, b}, sum:{arguments:a, default_arguments:a}, to_string:{arguments:, default_arguments:}, tr:{arguments:a, default_arguments:a}, update_configuration_warning:{arguments:, default_arguments:}}",
"context": "Then they do not share resources",
"expected": "|Dictionary| {_enter_tree:{arguments:, default_arguments:}, _exit_tree:{arguments:, default_arguments:}, _get:{arguments:a, default_arguments:a}, _get_configuration_warning:{arguments:, default_arguments:}, _get_editor_description:{arguments:, default_arguments:}, _get_import_path:{arguments:, default_arguments:}, _get_property_list:{arguments:, default_arguments:}, _init:{arguments:, default_arguments:}, _input:{arguments:a, default_arguments:a}, _notification:{arguments:a, default_arguments:a}, _physics_process:{arguments:a, default_arguments:a}, _process:{arguments:a, default_arguments:a}, _ready:{arguments:, default_arguments:}, _set:{arguments:a, b, default_arguments:a, b}, _set_editor_description:{arguments:a, default_arguments:a}, _set_import_path:{arguments:a, default_arguments:a}, _to_string:{arguments:, default_arguments:}, _unhandled_input:{arguments:a, default_arguments:a}, _unhandled_key_input:{arguments:a, default_arguments:a}, add:{arguments:a, b, default_arguments:a, b}, add_child:{arguments:a, b, default_arguments:a, b = False}, add_child_below_node:{arguments:a, b, c, default_arguments:a, b, c = False}, add_to_group:{arguments:a, b, default_arguments:a, b = False}, add_user_signal:{arguments:a, b, default_arguments:a, b = []}, call:{arguments:a, default_arguments:a}, call_deferred:{arguments:a, default_arguments:a}, callv:{arguments:a, b, default_arguments:a, b}, can_process:{arguments:, default_arguments:}, can_translate_messages:{arguments:, default_arguments:}, connect:{arguments:a, b, c, d, e, default_arguments:a, b, c, d = [], e = 0}, disconnect:{arguments:a, b, c, default_arguments:a, b, c}, divide:{arguments:a, b, default_arguments:a, b}, duplicate:{arguments:a, default_arguments:a = 15}, emit_signal:{arguments:a, default_arguments:a}, find_node:{arguments:a, b, c, default_arguments:a, b = True, c = True}, find_parent:{arguments:a, default_arguments:a}, free:{arguments:, default_arguments:}, get:{arguments:a, default_arguments:a}, get_child:{arguments:a, default_arguments:a}, get_child_count:{arguments:, default_arguments:}, get_children:{arguments:, default_arguments:}, get_class:{arguments:, default_arguments:}, get_custom_multiplayer:{arguments:, default_arguments:}, get_filename:{arguments:, default_arguments:}, get_groups:{arguments:, default_arguments:}, get_incoming_connections:{arguments:, default_arguments:}, get_index:{arguments:, default_arguments:}, get_indexed:{arguments:a, default_arguments:a}, get_instance_id:{arguments:, default_arguments:}, get_meta:{arguments:a, default_arguments:a}, get_meta_list:{arguments:, default_arguments:}, get_method_list:{arguments:, default_arguments:}, get_multiplayer:{arguments:, default_arguments:}, get_name:{arguments:, default_arguments:}, get_network_master:{arguments:, default_arguments:}, get_node:{arguments:a, default_arguments:a}, get_node_and_resource:{arguments:a, default_arguments:a}, get_node_or_null:{arguments:a, default_arguments:a}, get_owner:{arguments:, default_arguments:}, get_parent:{arguments:, default_arguments:}, get_path:{arguments:, default_arguments:}, get_path_to:{arguments:a, default_arguments:a}, get_pause_mode:{arguments:, default_arguments:}, get_physics_process_delta_time:{arguments:, default_arguments:}, get_position_in_parent:{arguments:, default_arguments:}, get_process_delta_time:{arguments:, default_arguments:}, get_process_priority:{arguments:, default_arguments:}, get_property_list:{arguments:, default_arguments:}, get_scene_instance_load_placeholder:{arguments:, default_arguments:}, get_script:{arguments:, default_arguments:}, get_signal_connection_list:{arguments:a, default_arguments:a}, get_signal_list:{arguments:, default_arguments:}, get_tree:{arguments:, default_arguments:}, get_viewport:{arguments:, default_arguments:}, has_meta:{arguments:a, default_arguments:a}, has_method:{arguments:a, default_arguments:a}, has_node:{arguments:a, default_arguments:a}, has_node_and_resource:{arguments:a, default_arguments:a}, has_signal:{arguments:a, default_arguments:a}, has_user_signal:{arguments:a, default_arguments:a}, is_a_parent_of:{arguments:a, default_arguments:a}, is_blocking_signals:{arguments:, default_arguments:}, is_class:{arguments:a, default_arguments:a}, is_connected:{arguments:a, b, c, default_arguments:a, b, c}, is_displayed_folded:{arguments:, default_arguments:}, is_greater_than:{arguments:a, default_arguments:a}, is_in_group:{arguments:a, default_arguments:a}, is_inside_tree:{arguments:, default_arguments:}, is_network_master:{arguments:, default_arguments:}, is_physics_processing:{arguments:, default_arguments:}, is_physics_processing_internal:{arguments:, default_arguments:}, is_processing:{arguments:, default_arguments:}, is_processing_input:{arguments:, default_arguments:}, is_processing_internal:{arguments:, default_arguments:}, is_processing_unhandled_input:{arguments:, default_arguments:}, is_processing_unhandled_key_input:{arguments:, default_arguments:}, is_queued_for_deletion:{arguments:, default_arguments:}, math_fight:{arguments:, default_arguments:}, move_child:{arguments:a, b, default_arguments:a, b}, multiply:{arguments:a, b, default_arguments:a, b}, notification:{arguments:a, b, default_arguments:a, b = False}, pi:{arguments:, default_arguments:}, print_stray_nodes:{arguments:, default_arguments:}, print_tree:{arguments:, default_arguments:}, print_tree_pretty:{arguments:, default_arguments:}, propagate_call:{arguments:a, b, c, default_arguments:a, b = [], c = False}, propagate_notification:{arguments:a, default_arguments:a}, property_list_changed_notify:{arguments:, default_arguments:}, queue_free:{arguments:, default_arguments:}, raise:{arguments:, default_arguments:}, remove_and_skip:{arguments:, default_arguments:}, remove_child:{arguments:a, default_arguments:a}, remove_from_group:{arguments:a, default_arguments:a}, remove_meta:{arguments:a, default_arguments:a}, replace_by:{arguments:a, b, default_arguments:a, b = False}, request_ready:{arguments:, default_arguments:}, rpc:{arguments:a, default_arguments:a}, rpc_config:{arguments:a, b, default_arguments:a, b}, rpc_id:{arguments:a, b, default_arguments:a, b}, rpc_unreliable:{arguments:a, default_arguments:a}, rpc_unreliable_id:{arguments:a, b, default_arguments:a, b}, rset:{arguments:a, b, default_arguments:a, b}, rset_config:{arguments:a, b, default_arguments:a, b}, rset_id:{arguments:a, b, c, default_arguments:a, b, c}, rset_unreliable:{arguments:a, b, default_arguments:a, b}, rset_unreliable_id:{arguments:a, b, c, default_arguments:a, b, c}, set:{arguments:a, b, default_arguments:a, b}, set_block_signals:{arguments:a, default_arguments:a}, set_custom_multiplayer:{arguments:a, default_arguments:a}, set_deferred:{arguments:a, b, default_arguments:a, b}, set_display_folded:{arguments:a, default_arguments:a}, set_filename:{arguments:a, default_arguments:a}, set_indexed:{arguments:a, b, default_arguments:a, b}, set_message_translation:{arguments:a, default_arguments:a}, set_meta:{arguments:a, b, default_arguments:a, b}, set_name:{arguments:a, default_arguments:a}, set_network_master:{arguments:a, b, default_arguments:a, b = True}, set_owner:{arguments:a, default_arguments:a}, set_pause_mode:{arguments:a, default_arguments:a}, set_physics_process:{arguments:a, default_arguments:a}, set_physics_process_internal:{arguments:a, default_arguments:a}, set_process:{arguments:a, default_arguments:a}, set_process_input:{arguments:a, default_arguments:a}, set_process_internal:{arguments:a, default_arguments:a}, set_process_priority:{arguments:a, default_arguments:a}, set_process_unhandled_input:{arguments:a, default_arguments:a}, set_process_unhandled_key_input:{arguments:a, default_arguments:a}, set_scene_instance_load_placeholder:{arguments:a, default_arguments:a}, set_script:{arguments:a, default_arguments:a}, subtract:{arguments:a, b, default_arguments:a, b}, sum:{arguments:a, default_arguments:a}, to_string:{arguments:, default_arguments:}, tr:{arguments:a, default_arguments:a}, update_configuration_warning:{arguments:, default_arguments:}} != |Dictionary| {_enter_tree:{arguments:, default_arguments:}, _exit_tree:{arguments:, default_arguments:}, _get:{arguments:a, default_arguments:a}, _get_configuration_warning:{arguments:, default_arguments:}, _get_editor_description:{arguments:, default_arguments:}, _get_import_path:{arguments:, default_arguments:}, _get_property_list:{arguments:, default_arguments:}, _init:{arguments:, default_arguments:}, _input:{arguments:a, default_arguments:a}, _notification:{arguments:a, default_arguments:a}, _physics_process:{arguments:a, default_arguments:a}, _process:{arguments:a, default_arguments:a}, _ready:{arguments:, default_arguments:}, _set:{arguments:a, b, default_arguments:a, b}, _set_editor_description:{arguments:a, default_arguments:a}, _set_import_path:{arguments:a, default_arguments:a}, _to_string:{arguments:, default_arguments:}, _unhandled_input:{arguments:a, default_arguments:a}, _unhandled_key_input:{arguments:a, default_arguments:a}, add:{arguments:a, b, default_arguments:a, b}, add_child:{arguments:a, b, default_arguments:a, b = False}, add_child_below_node:{arguments:a, b, c, default_arguments:a, b, c = False}, add_to_group:{arguments:a, b, default_arguments:a, b = False}, add_user_signal:{arguments:a, b, default_arguments:a, b = []}, call:{arguments:a, default_arguments:a}, call_deferred:{arguments:a, default_arguments:a}, callv:{arguments:a, b, default_arguments:a, b}, can_process:{arguments:, default_arguments:}, can_translate_messages:{arguments:, default_arguments:}, connect:{arguments:a, b, c, d, e, default_arguments:a, b, c, d = [], e = 0}, disconnect:{arguments:a, b, c, default_arguments:a, b, c}, divide:{arguments:a, b, default_arguments:a, b}, duplicate:{arguments:a, default_arguments:a = 15}, emit_signal:{arguments:a, default_arguments:a}, find_node:{arguments:a, b, c, default_arguments:a, b = True, c = True}, find_parent:{arguments:a, default_arguments:a}, free:{arguments:, default_arguments:}, get:{arguments:a, default_arguments:a}, get_child:{arguments:a, default_arguments:a}, get_child_count:{arguments:, default_arguments:}, get_children:{arguments:, default_arguments:}, get_class:{arguments:, default_arguments:}, get_custom_multiplayer:{arguments:, default_arguments:}, get_filename:{arguments:, default_arguments:}, get_groups:{arguments:, default_arguments:}, get_incoming_connections:{arguments:, default_arguments:}, get_index:{arguments:, default_arguments:}, get_indexed:{arguments:a, default_arguments:a}, get_instance_id:{arguments:, default_arguments:}, get_meta:{arguments:a, default_arguments:a}, get_meta_list:{arguments:, default_arguments:}, get_method_list:{arguments:, default_arguments:}, get_multiplayer:{arguments:, default_arguments:}, get_name:{arguments:, default_arguments:}, get_network_master:{arguments:, default_arguments:}, get_node:{arguments:a, default_arguments:a}, get_node_and_resource:{arguments:a, default_arguments:a}, get_node_or_null:{arguments:a, default_arguments:a}, get_owner:{arguments:, default_arguments:}, get_parent:{arguments:, default_arguments:}, get_path:{arguments:, default_arguments:}, get_path_to:{arguments:a, default_arguments:a}, get_pause_mode:{arguments:, default_arguments:}, get_physics_process_delta_time:{arguments:, default_arguments:}, get_position_in_parent:{arguments:, default_arguments:}, get_process_delta_time:{arguments:, default_arguments:}, get_process_priority:{arguments:, default_arguments:}, get_property_list:{arguments:, default_arguments:}, get_scene_instance_load_placeholder:{arguments:, default_arguments:}, get_script:{arguments:, default_arguments:}, get_signal_connection_list:{arguments:a, default_arguments:a}, get_signal_list:{arguments:, default_arguments:}, get_tree:{arguments:, default_arguments:}, get_viewport:{arguments:, default_arguments:}, has_meta:{arguments:a, default_arguments:a}, has_method:{arguments:a, default_arguments:a}, has_node:{arguments:a, default_arguments:a}, has_node_and_resource:{arguments:a, default_arguments:a}, has_signal:{arguments:a, default_arguments:a}, has_user_signal:{arguments:a, default_arguments:a}, is_a_parent_of:{arguments:a, default_arguments:a}, is_blocking_signals:{arguments:, default_arguments:}, is_class:{arguments:a, default_arguments:a}, is_connected:{arguments:a, b, c, default_arguments:a, b, c}, is_displayed_folded:{arguments:, default_arguments:}, is_greater_than:{arguments:a, default_arguments:a}, is_in_group:{arguments:a, default_arguments:a}, is_inside_tree:{arguments:, default_arguments:}, is_network_master:{arguments:, default_arguments:}, is_physics_processing:{arguments:, default_arguments:}, is_physics_processing_internal:{arguments:, default_arguments:}, is_processing:{arguments:, default_arguments:}, is_processing_input:{arguments:, default_arguments:}, is_processing_internal:{arguments:, default_arguments:}, is_processing_unhandled_input:{arguments:, default_arguments:}, is_processing_unhandled_key_input:{arguments:, default_arguments:}, is_queued_for_deletion:{arguments:, default_arguments:}, math_fight:{arguments:, default_arguments:}, move_child:{arguments:a, b, default_arguments:a, b}, multiply:{arguments:a, b, default_arguments:a, b}, notification:{arguments:a, b, default_arguments:a, b = False}, pi:{arguments:, default_arguments:}, print_stray_nodes:{arguments:, default_arguments:}, print_tree:{arguments:, default_arguments:}, print_tree_pretty:{arguments:, default_arguments:}, propagate_call:{arguments:a, b, c, default_arguments:a, b = [], c = False}, propagate_notification:{arguments:a, default_arguments:a}, property_list_changed_notify:{arguments:, default_arguments:}, queue_free:{arguments:, default_arguments:}, raise:{arguments:, default_arguments:}, remove_and_skip:{arguments:, default_arguments:}, remove_child:{arguments:a, default_arguments:a}, remove_from_group:{arguments:a, default_arguments:a}, remove_meta:{arguments:a, default_arguments:a}, replace_by:{arguments:a, b, default_arguments:a, b = False}, request_ready:{arguments:, default_arguments:}, rpc:{arguments:a, default_arguments:a}, rpc_config:{arguments:a, b, default_arguments:a, b}, rpc_id:{arguments:a, b, default_arguments:a, b}, rpc_unreliable:{arguments:a, default_arguments:a}, rpc_unreliable_id:{arguments:a, b, default_arguments:a, b}, rset:{arguments:a, b, default_arguments:a, b}, rset_config:{arguments:a, b, default_arguments:a, b}, rset_id:{arguments:a, b, c, default_arguments:a, b, c}, rset_unreliable:{arguments:a, b, default_arguments:a, b}, rset_unreliable_id:{arguments:a, b, c, default_arguments:a, b, c}, set:{arguments:a, b, default_arguments:a, b}, set_block_signals:{arguments:a, default_arguments:a}, set_custom_multiplayer:{arguments:a, default_arguments:a}, set_deferred:{arguments:a, b, default_arguments:a, b}, set_display_folded:{arguments:a, default_arguments:a}, set_filename:{arguments:a, default_arguments:a}, set_indexed:{arguments:a, b, default_arguments:a, b}, set_message_translation:{arguments:a, default_arguments:a}, set_meta:{arguments:a, b, default_arguments:a, b}, set_name:{arguments:a, default_arguments:a}, set_network_master:{arguments:a, b, default_arguments:a, b = True}, set_owner:{arguments:a, default_arguments:a}, set_pause_mode:{arguments:a, default_arguments:a}, set_physics_process:{arguments:a, default_arguments:a}, set_physics_process_internal:{arguments:a, default_arguments:a}, set_process:{arguments:a, default_arguments:a}, set_process_input:{arguments:a, default_arguments:a}, set_process_internal:{arguments:a, default_arguments:a}, set_process_priority:{arguments:a, default_arguments:a}, set_process_unhandled_input:{arguments:a, default_arguments:a}, set_process_unhandled_key_input:{arguments:a, default_arguments:a}, set_scene_instance_load_placeholder:{arguments:a, default_arguments:a}, set_script:{arguments:a, default_arguments:a}, subtract:{arguments:a, b, default_arguments:a, b}, sum:{arguments:a, default_arguments:a}, to_string:{arguments:, default_arguments:}, tr:{arguments:a, default_arguments:a}, update_configuration_warning:{arguments:, default_arguments:}}",
"success": true
} ],
"context": "When we create two of it for the same script",
"fullname": "test_When_we_create_two_of_it_for_the_same_script",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 3,
"path": "res://tests/integration/script_director.test.gd",
"source": {
"containers": [ "res://tests/integration", "res://tests" ],
"method": "",
"path": "res://tests/integration/script_director.test.gd",
"tags": [  ],
"test": ExtResource( 13 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 3
}, {
"context": "Given a Boolean Assertion",
"methods": [ {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then it passes",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When calling asserts.is_true(true)",
"fullname": "test_when_calling_asserts_is_true",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| False == false",
"context": "Then it passes",
"expected": "|bool| False == false",
"success": true
} ],
"context": "When calling asserts.is_false(false)",
"fullname": "test_when_calling_asserts_is_false",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| True != false",
"context": "",
"expected": "|bool| True == false",
"success": false
} ],
"context": " intentional failure",
"fullname": "test_intentional_failure",
"passed": 0,
"success": false,
"time": 0.0,
"total": 1
} ],
"passed": 2,
"path": "res://tests/unit/boolean.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/boolean.test.gd",
"tags": [  ],
"test": ExtResource( 11 ),
"yield_time": 0.0
},
"success": false,
"time_taken": 0.0,
"total": 3
}, {
"context": "Given an Equality Assertion",
"methods": [ {
"assertions": [ {
"actual": "|int| 1 is equal to |int| 1",
"context": "Then it passes",
"expected": "|int| 1 is equal to |int| 1",
"success": true
} ],
"context": "When calling asserts.is_equal(1, 1)",
"fullname": "test_when_calling_is_equal",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 2 is equal or greater |int| 1",
"context": "Then it passes",
"expected": "|int| 2 is equal or greater |int| 1",
"success": true
} ],
"context": "When calling asserts.is_equal_or_greater_than(2, 1)",
"fullname": "test_when_calling_is_equal_or_greater_than",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 2 is greater than |int| 1",
"context": "Then it passes",
"expected": "|int| 2 is greater than |int| 1",
"success": true
} ],
"context": "When calling asserts.is_greater_than(2, 1)",
"fullname": "test_when_calling_is_greater_than",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 1 is less than |int| 2",
"context": "Then it passes",
"expected": "|int| 1 is less than |int| 2",
"success": true
} ],
"context": "When calling asserts.is_less_than(2, 1)",
"fullname": "test_when_calling_is_less_than",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 1 is equal or less than |int| 1",
"context": "Then it passes!",
"expected": "|int| 1 is equal or less than |int| 1",
"success": true
} ],
"context": "When calling asserts.is_equal_or_less_than(1, 1)",
"fullname": "test_when_calling_is_equal_or_less_than_with_equal_values",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 1 is equal or greater |int| 1",
"context": "Then it passes",
"expected": "|int| 1 is equal or greater |int| 1",
"success": true
} ],
"context": "When calling asserts.is_equal_or_greater_than(1, 1)",
"fullname": "test_when_calling_is_equal_or_greater_than_with_equal_values",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 5 is not equal to |int| 6",
"context": "Then it passes",
"expected": "|int| 5 != |int| 6",
"success": true
} ],
"context": "When callign asserts.is_not_equal(5, 6)",
"fullname": "test_when_calling_is_not_equal",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 7,
"path": "res://tests/unit/equality.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/equality.test.gd",
"tags": [  ],
"test": ExtResource( 8 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 7
}, {
"context": "Given A File Assertion",
"methods": [ {
"assertions": [ {
"actual": "res://tests/unit/file.test.gd exists",
"context": "Then it passes",
"expected": "res://tests/unit/file.test.gd exists",
"success": true
} ],
"context": "When calling asserts.file_exists when the file is this suite",
"fullname": "test_when_calling_file_exists_when_file_is_self",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "res://somefile.gd does not exist",
"context": "Then it passes",
"expected": "res://somefile.gd does not exist",
"success": true
} ],
"context": "When calling asserts.file_does_not_exist when there is no file",
"fullname": "test_when_calling_file_does_not_exist_when_there_is_no_file",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": " does not exist",
"context": "Then it passes",
"expected": " does not exist",
"success": true
} ],
"context": "When calling asserts file does not exist when path is empty",
"fullname": "test_when_calling_file_does_not_exist_when_path_is_empty",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 3,
"path": "res://tests/unit/file.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/file.test.gd",
"tags": [  ],
"test": ExtResource( 3 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 3
}, {
"context": "Given a Test Double",
"methods": [ {
"assertions": [ {
"actual": "|int| 4 is equal to |int| 4",
"context": "Then we get the correct result",
"expected": "|int| 4 is equal to |int| 4",
"success": true
} ],
"context": "When we call an add(x, y) method that we haven't directed",
"fullname": "test_When_we_call_an_add_method_that_we_have_not_directed",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|null| Null == null",
"context": "Then we get null",
"expected": "|null| Null == null",
"success": true
} ],
"context": "When we call a method that we have dummied",
"fullname": "test_When_we_call_a_method_that_we_have_dummied",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then it returns true",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we call a method that we have stubbed to return true",
"fullname": "test_When_we_call_a_method_that_we_have_stubbed_to_return_true",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|Object| [Node:1612] is equal to |Object| [Node:1612]",
"context": "Then it returns that same node",
"expected": "|Object| [Node:1612] is equal to |Object| [Node:1612]",
"success": true
} ],
"context": "When we call a method that we have stubbed to return a node",
"fullname": "test_When_we_call_a_method_that_we_have_stubbed_to_return_a_node",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 100 is equal to |int| 100",
"context": "Then it returns the default stubbed value when the arguments don't match any pattern",
"expected": "|int| 100 is equal to |int| 100",
"success": true
}, {
"actual": "|int| 1000 is equal to |int| 1000",
"context": "Then it returns the the corresponding value to the pattern the arguments matched",
"expected": "|int| 1000 is equal to |int| 1000",
"success": true
} ],
"context": "When we call a method that was stubbed to return different values based on argument patterns",
"fullname": "test_When_we_call_a_method_that_was_stubbed_to_return_different_values_based_on_argument_patterns",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|int| 9999 is equal to |int| 9999",
"context": "Then it returns the corresponding value when the pattern matches",
"expected": "|int| 9999 is equal to |int| 9999",
"success": true
} ],
"context": "When we call a method that was stubbed with an argument pattern that includes a non-primitive object",
"fullname": "test_When_we_call_a_method_that_was_stubbed_with_an_argument_pattern_that_includes_a_non_primitive_object",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 9999 is equal to |int| 9999",
"context": "Then it returns the corresponding value when the partial pattern matches",
"expected": "|int| 9999 is equal to |int| 9999",
"success": true
} ],
"context": "When we call a method that was stubbed with a partial (ie using any()) argument pattern",
"fullname": "test_When_we_call_a_method_that_was_stubbed_with_a_partial_argument_pattern",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "add was called",
"context": "Then we can see that it was called at least once",
"expected": "add was called",
"success": true
} ],
"context": "When we call a method that we are spying on",
"fullname": "test_When_we_call_a_method_that_we_are_spying_on",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "method: add was called with arguments: [10, 10]",
"context": "Then we can see that it was called with those arguments",
"expected": "method: add was called with arguments: [10, 10]",
"success": true
} ],
"context": "When we pass arguments to a method call that we are spying on",
"fullname": "test_When_we_pass_arguments_to_a_method_call_that_we_are_spying_on",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 4 is equal to |int| 4",
"context": "Then it calls its super implementation by default",
"expected": "|int| 4 is equal to |int| 4",
"success": true
}, {
"actual": "|int| 9999 is equal to |int| 9999",
"context": "Then it does not call its super implementation when arguments patterns match a different return value",
"expected": "|int| 9999 is equal to |int| 9999",
"success": true
} ],
"context": "When we call a method that we stubbed to call its super implementation by default",
"fullname": "test_When_we_call_a_method_that_we_stubbed_to_call_its_super_implementation_by_default",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|float| 6.283185 is equal to |float| 6.283185",
"context": "Then we can call the static methods of that inner double",
"expected": "|float| 6.283185 is equal to |float| 6.283185",
"success": true
} ],
"context": "When we add an doubled inner class to it",
"fullname": "test_When_we_add_a_doubled_inner_class_to_it",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 99 is equal to |int| 99",
"context": "Then it returns a value",
"expected": "|int| 99 is equal to |int| 99",
"success": true
} ],
"context": "When we pass a funcref as a subcall that returns",
"fullname": "test_When_we_pass_a_funcref_as_a_subcall_that_returns_a_value",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|String| Jackie is equal to |String| Jackie",
"context": "Then we can double the object successfully",
"expected": "|String| Jackie is equal to |String| Jackie",
"success": true
} ],
"context": "When we pass in dependecies on double",
"fullname": "test_When_we_pass_in_deps_on_double",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 99 is equal to |int| 99",
"context": "Then it affects the state of the double",
"expected": "|int| 99 is equal to |int| 99",
"success": true
} ],
"context": "When we pass a funcref as a subcall",
"fullname": "test_When_we_pass_a_funcref_as_a_subcall",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "(1, 1) is builtin: Vector2",
"context": "Then we can call methods on it",
"expected": "(1, 1) is builtin: Vector2",
"success": true
} ],
"context": "When we double an inner class",
"fullname": "test_When_we_double_an_inner_class",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| True is equal to |bool| True",
"context": "Then we can call it",
"expected": "|bool| True is equal to |bool| True",
"success": true
} ],
"context": "When we stubbed a keyworded method by passing in the correct keyword",
"fullname": "test_When_we_stubbed_a_keyword_method_by_passing_in_the_correct_keyword",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|null| Null == null",
"context": "Then we get the stubbed value back",
"expected": "|null| Null == null",
"success": true
} ],
"context": "When we stub a method of a doubled inner class",
"fullname": "test_When_we_stub_a_method_of_a_double_inner_class",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|Array| [10, 5] is equal to |Array| [10, 5]",
"context": "Then it returns a value",
"expected": "|Array| [10, 5] is equal to |Array| [10, 5]",
"success": true
} ],
"context": "When we pass an Object with a call_func function",
"fullname": "test_When_we_pass_an_object_with_callfunc_method_as_a_subcall",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|String| Jackie is equal to |String| Jackie",
"context": "Then we can double the object successfully",
"expected": "|String| Jackie is equal to |String| Jackie",
"success": true
} ],
"context": "When we pass in dependecies on direct",
"fullname": "test_When_we_pass_in_deps_on_direct",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 19,
"path": "res://tests/integration/test_double.test.gd",
"source": {
"containers": [ "res://tests/integration", "res://tests" ],
"method": "",
"path": "res://tests/integration/test_double.test.gd",
"tags": [  ],
"test": ExtResource( 14 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 19
}, {
"context": "Given an Is Instance of class/type Assertion",
"methods": [ {
"assertions": [ {
"actual": "|Basis| ((1, 0, 0), (0, 1, 0), (0, 0, 1)) != null",
"context": "basis is not null",
"expected": "|Basis| ((1, 0, 0), (0, 1, 0), (0, 0, 1)) != null",
"success": true
}, {
"actual": "((1, 0, 0), (0, 1, 0), (0, 0, 1)) is builtin: Basis",
"context": "Then it passes",
"expected": "((1, 0, 0), (0, 1, 0), (0, 0, 1)) is builtin: Basis",
"success": true
} ],
"context": "When calling asserts.is_basis(basis: Basis",
"fullname": "test_when_calling_is_Basis",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "True is builtin: bool",
"context": "Then it passes",
"expected": "True is builtin: bool",
"success": true
} ],
"context": "When calling asserts.is_bool(true)",
"fullname": "test_when_calling_is_bool",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|Color| 0,0,0,1 != null",
"context": "color is not null",
"expected": "|Color| 0,0,0,1 != null",
"success": true
}, {
"actual": "0,0,0,1 is builtin: Color",
"context": "Then it passes",
"expected": "0,0,0,1 is builtin: Color",
"success": true
} ],
"context": "When calling asserts.is_color(color: Color)",
"fullname": "test_when_calling_is_Color",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "{} is builtin: Dictionary",
"context": "Then it passes",
"expected": "{} is builtin: Dictionary",
"success": true
} ],
"context": "When calling asserts.is_Dictionary({})",
"fullname": "test_when_calling_is_Dictionary",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|AABB| 0, 0, 0 - 0, 0, 0 != null",
"context": "AABB is not null",
"expected": "|AABB| 0, 0, 0 - 0, 0, 0 != null",
"success": true
}, {
"actual": "0, 0, 0 - 0, 0, 0 is builtin: AABB",
"context": "Then it passes",
"expected": "0, 0, 0 - 0, 0, 0 is builtin: AABB",
"success": true
} ],
"context": "When calling asserts.is_AABB(aabb: AABB)",
"fullname": "test_when_calling_is_AABB",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|Array| [] != null",
"context": "array is not null",
"expected": "|Array| [] != null",
"success": true
}, {
"actual": "[] is builtin: Array",
"context": "Then it passes",
"expected": "[] is builtin: Array",
"success": true
} ],
"context": "When calling asserts.is_Array(array: Array)",
"fullname": "test_when_calling_is_Array",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|PoolRealArray| [] != null",
"context": "reals is not null",
"expected": "|PoolRealArray| [] != null",
"success": true
}, {
"actual": "[] is builtin: PoolRealArray",
"context": "Then it passes",
"expected": "[] is builtin: PoolRealArray",
"success": true
} ],
"context": "When calling is asserts.is_PoolRealArray(reals: PoolRealArray)",
"fullname": "test_when_calling_is_PoolRealArray",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|Transform| 1, 0, 0, 0, 1, 0, 0, 0, 1 - 0, 0, 0 != null",
"context": "transform is not null",
"expected": "|Transform| 1, 0, 0, 0, 1, 0, 0, 0, 1 - 0, 0, 0 != null",
"success": true
}, {
"actual": "1, 0, 0, 0, 1, 0, 0, 0, 1 - 0, 0, 0 is builtin: Transform",
"context": "Then it passes",
"expected": "1, 0, 0, 0, 1, 0, 0, 0, 1 - 0, 0, 0 is builtin: Transform",
"success": true
} ],
"context": "When calling asserts.is_Transform(transform: Transform)",
"fullname": "test_when_calling_is_Transform",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|PoolVector3Array| [] != null",
"context": "vec3s is not null",
"expected": "|PoolVector3Array| [] != null",
"success": true
}, {
"actual": "[] is builtin: PoolVector3Array",
"context": "Then it passes",
"expected": "[] is builtin: PoolVector3Array",
"success": true
} ],
"context": "When calling is asserts.is_PoolVector3Array(vec3s: PoolVector3Array)",
"fullname": "test_when_calling_is_PoolVector3Array",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|Quat| (0, 0, 0, 1) != null",
"context": "quat is not null",
"expected": "|Quat| (0, 0, 0, 1) != null",
"success": true
}, {
"actual": "(0, 0, 0, 1) is builtin: Quat",
"context": "Then it passes",
"expected": "(0, 0, 0, 1) is builtin: Quat",
"success": true
} ],
"context": "When calling asserts.is_Quat(quat: Quat)",
"fullname": "test_when_calling_is_Quat",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|RID| [RID] != null",
"context": "rid is not null",
"expected": "|RID| [RID] != null",
"success": true
}, {
"actual": "[RID] is builtin: RID",
"context": "Then it passes",
"expected": "[RID] is builtin: RID",
"success": true
} ],
"context": "When calling asserts.is_RID(rid: RID)",
"fullname": "test_when_calling_is_RID",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "1 is builtin: float",
"context": "Then it passes",
"expected": "1 is builtin: float",
"success": true
} ],
"context": "When calling asserts.is_float(1.0)",
"fullname": "test_when_calling_is_float",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|Plane| 0, 0, 0, 0 != null",
"context": "plane is not null",
"expected": "|Plane| 0, 0, 0, 0 != null",
"success": true
}, {
"actual": "0, 0, 0, 0 is builtin: Plane",
"context": "then it passes",
"expected": "0, 0, 0, 0 is builtin: Plane",
"success": true
} ],
"context": "When calling asserts.is_Plane(plane: Plane())",
"fullname": "test_when_calling_is_Plane",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "1 is builtin: int",
"context": "Then it passes",
"expected": "1 is builtin: int",
"success": true
} ],
"context": "When callign asserts.is_int(1)",
"fullname": "test_when_calling_is_int",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|NodePath| . != null",
"context": "@'Parent/Child' is not null",
"expected": "|NodePath| . != null",
"success": true
}, {
"actual": ". is builtin: NodePath",
"context": "Then it passes",
"expected": ". is builtin: NodePath",
"success": true
} ],
"context": "When calling asserts.is_NodePath(@'Parent/Child')",
"fullname": "test_when_calling_is_NodePath",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|Transform2D| ((1, 0), (0, 1), (0, 0)) != null",
"context": "transform2D is not null",
"expected": "|Transform2D| ((1, 0), (0, 1), (0, 0)) != null",
"success": true
}, {
"actual": "((1, 0), (0, 1), (0, 0)) is builtin: Transform2D",
"context": "Then it passes",
"expected": "((1, 0), (0, 1), (0, 0)) is builtin: Transform2D",
"success": true
} ],
"context": "When calling asserts.is_Transform(transform2D: Transform2D)",
"fullname": "test_when_calling_is_Transform2D",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|PoolStringArray| [] != null",
"context": "strs is not null",
"expected": "|PoolStringArray| [] != null",
"success": true
}, {
"actual": "[] is builtin: PoolStringArray",
"context": "Then it passes",
"expected": "[] is builtin: PoolStringArray",
"success": true
} ],
"context": "When calling is asserts.is_PoolStringArray(strs: PoolStringArray)",
"fullname": "test_when_calling_is_PoolStringArray",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|PoolIntArray| [] != null",
"context": "ints is not null",
"expected": "|PoolIntArray| [] != null",
"success": true
}, {
"actual": "[] is builtin: PoolIntArray",
"context": "Then it passes",
"expected": "[] is builtin: PoolIntArray",
"success": true
} ],
"context": "When calling asserts.is_PoolIntArray(ints: PoolIntArray)",
"fullname": "test_when_calling_is_PoolIntArray",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|String|  != null",
"context": "strs is not null",
"expected": "|String|  != null",
"success": true
}, {
"actual": " is builtin: String",
"context": "Then it passes",
"expected": " is builtin: String",
"success": true
} ],
"context": "When calling asserts.is_string(strs: String)",
"fullname": "test_when_calling_is_string",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|Object| [Node:1781] != null",
"context": "node is not null",
"expected": "|Object| [Node:1781] != null",
"success": true
}, {
"actual": "[Node:1781] is builtin: Object",
"context": "An instance of node is an Object",
"expected": "[Node:1781] is builtin: Object",
"success": true
} ],
"context": "When calling is asserts.object(node: Node)",
"fullname": "test_when_calling_is_object",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|Vector3| (0, 0, 0) != null",
"context": "vec3 is not null",
"expected": "|Vector3| (0, 0, 0) != null",
"success": true
}, {
"actual": "(0, 0, 0) is builtin: Vector3",
"context": "Then it passes",
"expected": "(0, 0, 0) is builtin: Vector3",
"success": true
} ],
"context": "When calling asserts.is_Vector3(vec3: Vector3",
"fullname": "test_when_calling_is_Vector3",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|PoolByteArray| [PoolByteArray] != null",
"context": "bytes is not null",
"expected": "|PoolByteArray| [PoolByteArray] != null",
"success": true
}, {
"actual": "[PoolByteArray] is builtin: PoolByteArray",
"context": "Then it passes",
"expected": "[PoolByteArray] is builtin: PoolByteArray",
"success": true
} ],
"context": "When calling asserts.is_PoolByteArray(bytes: PoolByteArray)",
"fullname": "test_when_calling_is_PoolByteArray",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|PoolVector2Array| [] != null",
"context": "vec2s is not null",
"expected": "|PoolVector2Array| [] != null",
"success": true
}, {
"actual": "[] is builtin: PoolVector2Array",
"context": "Then it passes",
"expected": "[] is builtin: PoolVector2Array",
"success": true
} ],
"context": "When calling is asserts.is_PoolVector2Array(vec2s: PoolVector2Array)",
"fullname": "test_when_calling_is_PoolVector2Array",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|PoolColorArray| [PoolColorArray] != null",
"context": "colors is not null",
"expected": "|PoolColorArray| [PoolColorArray] != null",
"success": true
}, {
"actual": "[PoolColorArray] is builtin: PoolColorArray",
"context": "Then it passes",
"expected": "[PoolColorArray] is builtin: PoolColorArray",
"success": true
} ],
"context": "When calling asserts.is_PoolColorArray(colors: PoolColorArray)",
"fullname": "test_when_calling_is_PoolColorArray",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|Rect2| (0, 0, 0, 0) != null",
"context": "rect2 is not null",
"expected": "|Rect2| (0, 0, 0, 0) != null",
"success": true
}, {
"actual": "(0, 0, 0, 0) is builtin: Rect2",
"context": "Then it passes",
"expected": "(0, 0, 0, 0) is builtin: Rect2",
"success": true
} ],
"context": "When calling asserts.is_Rect2(rect2: Rect2)",
"fullname": "test_when_calling_is_Rect2",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|Vector2| (0, 0) != null",
"context": "vec2 is not null",
"expected": "|Vector2| (0, 0) != null",
"success": true
}, {
"actual": "(0, 0) is builtin: Vector2",
"context": "Then it passes",
"expected": "(0, 0) is builtin: Vector2",
"success": true
} ],
"context": "When calling asserts.is_Vector2(vec2)",
"fullname": "test_when_calling_is_Vector2",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
} ],
"passed": 26,
"path": "res://tests/unit/is_instance.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/is_instance.test.gd",
"tags": [  ],
"test": ExtResource( 6 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 26
}, {
"context": "Given an Is Not Instance of class/type Assertion",
"methods": [ {
"assertions": [ {
"actual": "Null is not builtin: NodePath",
"context": "Then it passes",
"expected": "Null is not builtin: NodePath",
"success": true
} ],
"context": "when calling asserts.is_not_NodePath(null)",
"fullname": "test_when_calling_is_not_NodePath",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: PoolRealArray",
"context": "Then it passes",
"expected": "Null is not builtin: PoolRealArray",
"success": true
} ],
"context": "when calling asserts.is_not_PoolRealArray(null)",
"fullname": "test_when_calling_is_not_PoolRealArray",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: PoolStringArray",
"context": "Then it passes",
"expected": "Null is not builtin: PoolStringArray",
"success": true
} ],
"context": "when calling asserts.is_not_PoolStringArray(null)",
"fullname": "test_when_calling_is_not_PoolStringArray",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Basis",
"context": "Then it passes",
"expected": "Null is not builtin: Basis",
"success": true
} ],
"context": "when calling asserts.is_not_Basis(null)",
"fullname": "test_when_calling_is_not_Basis",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: int",
"context": "Then it passes",
"expected": "Null is not builtin: int",
"success": true
} ],
"context": "when calling asserts.is_not_int(null)",
"fullname": "test_when_calling_is_not_int",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: PoolVector3Array",
"context": "Then it passes",
"expected": "Null is not builtin: PoolVector3Array",
"success": true
} ],
"context": "when calling asserts.is_not_PoolVector3Array(null)",
"fullname": "test_when_calling_is_not_PoolVector3Array",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Rect2",
"context": "Then it passes",
"expected": "Null is not builtin: Rect2",
"success": true
} ],
"context": "when calling asserts.is_not_Rect2(null)",
"fullname": "test_when_calling_is_not_Rect2",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: RID",
"context": "Then it passes",
"expected": "Null is not builtin: RID",
"success": true
} ],
"context": "when calling asserts.is_not_RID(null)",
"fullname": "test_when_calling_is_not_RID",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Transform2D",
"context": "Then it passes",
"expected": "Null is not builtin: Transform2D",
"success": true
} ],
"context": "when calling asserts.is_not_Transform2D(null)",
"fullname": "test_when_calling_is_not_Transform2D",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Vector2",
"context": "Then it passes",
"expected": "Null is not builtin: Vector2",
"success": true
} ],
"context": "when calling asserts.is_not_Vector2(null)",
"fullname": "test_when_calling_is_not_Vector2",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Plane",
"context": "Then it passes",
"expected": "Null is not builtin: Plane",
"success": true
} ],
"context": "when calling asserts.is_not_Plane(null)",
"fullname": "test_when_calling_is_not_Plane",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Object",
"context": "Then it passes",
"expected": "Null is not builtin: Object",
"success": true
} ],
"context": "when calling asserts.is_not_Object(null)",
"fullname": "test_when_calling_is_not_Object",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: bool",
"context": "Then it passes",
"expected": "Null is not builtin: bool",
"success": true
} ],
"context": "when calling asserts.is_not_bool(null)",
"fullname": "test_when_calling_is_not_bool",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: PoolByteArray",
"context": "Then it passes",
"expected": "Null is not builtin: PoolByteArray",
"success": true
} ],
"context": "when calling asserts.is_not_PoolByteArray(null)",
"fullname": "test_when_calling_is_not_PoolByteArray",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: float",
"context": "Then it passes",
"expected": "Null is not builtin: float",
"success": true
} ],
"context": "when calling asserts.is_not_float(null)",
"fullname": "test_when_calling_is_not_float",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: PoolColorArray",
"context": "Then it passes",
"expected": "Null is not builtin: PoolColorArray",
"success": true
} ],
"context": "when calling asserts.is_not_PoolColorArray(null)",
"fullname": "test_when_calling_is_not_PoolColorArray",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: PoolIntArray",
"context": "Then it passes",
"expected": "Null is not builtin: PoolIntArray",
"success": true
} ],
"context": "when calling asserts.is_not_PoolIntArray(null)",
"fullname": "test_when_calling_is_not_PoolIntArray",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: PoolVector2Array",
"context": "Then it passes",
"expected": "Null is not builtin: PoolVector2Array",
"success": true
} ],
"context": "when calling asserts.is_not_PoolVector2Array(null)",
"fullname": "test_when_calling_is_not_PoolVector2Array",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Quat",
"context": "Then it passes",
"expected": "Null is not builtin: Quat",
"success": true
} ],
"context": "when calling asserts.is_not_Quat(null)",
"fullname": "test_when_calling_is_not_Quat",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: String",
"context": "Then it passes",
"expected": "Null is not builtin: String",
"success": true
} ],
"context": "when calling asserts.is_not_String(null)",
"fullname": "test_when_calling_is_not_String",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Transform",
"context": "Then it passes",
"expected": "Null is not builtin: Transform",
"success": true
} ],
"context": "when calling asserts.is_not_Transform(null)",
"fullname": "test_when_calling_is_not_Transform",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: AABB",
"context": "Then it passes",
"expected": "Null is not builtin: AABB",
"success": true
} ],
"context": "when calling asserts.is_not_AABB(null)",
"fullname": "test_when_calling_is_not_AABB",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Array",
"context": "Then it passes",
"expected": "Null is not builtin: Array",
"success": true
} ],
"context": "when calling asserts.is_not_Array(null)",
"fullname": "test_when_calling_is_not_Array",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Color",
"context": "Then it passes",
"expected": "Null is not builtin: Color",
"success": true
} ],
"context": "when calling asserts.is_not_Color(null)",
"fullname": "test_when_calling_is_not_Color",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Dictionary",
"context": "Then it passes",
"expected": "Null is not builtin: Dictionary",
"success": true
} ],
"context": "when calling asserts.is_not_Dictionary(null)",
"fullname": "test_when_calling_is_not_Dictionary",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Vector3",
"context": "Then it passes",
"expected": "Null is not builtin: Vector3",
"success": true
} ],
"context": "when calling asserts.is_not_Vector3(null)",
"fullname": "test_when_calling_is_not_Vector3",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 26,
"path": "res://tests/unit/is_not_instance.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/is_not_instance.test.gd",
"tags": [  ],
"test": ExtResource( 2 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 26
}, {
"context": "Given a Null Assertion",
"methods": [ {
"assertions": [ {
"actual": "|null| Null == null",
"context": "Then it passes",
"expected": "|null| Null == null",
"success": true
} ],
"context": "When calling asserts.is_null(null)",
"fullname": "test_when_calling_null_is_null",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|Object| [Deleted Object] == null",
"context": "A Freed Node is null in Engine 3.2.2 or greater",
"expected": "|Object| [Deleted Object] == null",
"success": true
} ],
"context": "When calling freed object is null",
"fullname": "test_when_calling_freed_object_is_not_null",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|Object| [Node:1848] != null",
"context": "Then it passes",
"expected": "|Object| [Node:1848] != null",
"success": true
} ],
"context": "When calling Node is not null",
"fullname": "test_when_calling_node_is_not_null",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 3,
"path": "res://tests/unit/null.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/null.test.gd",
"tags": [  ],
"test": ExtResource( 12 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 3
}, {
"context": "Given an Object Assertion",
"methods": [ {
"assertions": [ {
"actual": "[Node:1838] has meta: dummy",
"context": "Then it passes",
"expected": "[Node:1838] has meta: dummy",
"success": true
}, {
"actual": "[Node:1838] has meta: dummy",
"context": "Then it passes",
"expected": "[Node:1838] has meta: dummy",
"success": true
} ],
"context": "When calling asserts.object_has_meta() after adding metadata",
"fullname": "test_when_calling_has_meta_after_adding_metadata",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "[Node:1838] does not have meta: bad_meta",
"context": "Then it passes",
"expected": "[Node:1838] does not have meta: bad_meta",
"success": true
} ],
"context": "When calling asserts.object_does_not_have_meta()",
"fullname": "test_when_calling_does_not_have_meta",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:1838] does not have meta: confusing",
"context": "Then it passes",
"expected": "[Node:1838] does not have meta: confusing",
"success": true
} ],
"context": "When calling asserts.object_has_meta with real key but null val",
"fullname": "test_when_calling_does_not_have_meta_real_key_null_value_pair",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:1851] is not freed",
"context": "Then it passes",
"expected": "[Node:1851] is not freed",
"success": true
} ],
"context": "When calling asserts.is_not_freed(unfreed_object)",
"fullname": "test_when_calling_unfreed_object_is_not_freed",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:1838] has user signal: dummy_signal",
"context": "Then it passes",
"expected": "[Node:1838] has user signal: dummy_signal",
"success": true
} ],
"context": "When calling obj_has_user_signal after adding a signal",
"fullname": "test_when_calling_has_user_signal_after_adding_a_signal",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:1838] does not have user signal: false_signal",
"context": "Then it passes",
"expected": "[Node:1838] does not have user signal: false_signal",
"success": true
} ],
"context": "When calling obj_does_not_have_user_signal with fake signal",
"fullname": "test_when_calling_does_not_have_user_signal",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:1838] does not have user signal: builtin_dummy",
"context": "Then it passes",
"expected": "[Node:1838] does not have user signal: builtin_dummy",
"success": true
} ],
"context": "When calling does not have user signal with class signal",
"fullname": "test_when_calling_does_not_have_user_signal_with_class_signal_constant",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:1838] has method: title",
"context": "Then it passes",
"expected": "[Node:1838] has method: title",
"success": true
} ],
"context": "When calling has_method('title')",
"fullname": "test_when_calling_has_method_title",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is freed from memory",
"context": "Then it passes",
"expected": "Null is freed from memory",
"success": true
} ],
"context": "When calling asserts.is_freed(freed_object",
"fullname": "test_when_calling_freed_object_is_freed",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:1838].builtin_dummy is connected to [Node:1838].title",
"context": "Then it passes",
"expected": "[Node:1838].builtin_dummy is connected to [Node:1838].title",
"success": true
} ],
"context": "When calling asserts object is connected with a valid connection",
"fullname": "test_when_calling_obj_is_connected_with_a_real_connection",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:1861] is queued for deletion",
"context": "Then it passes",
"expected": "[Node:1861] is queued for deletion",
"success": true
} ],
"context": "When calling asserts.object_is_queued for deletion after calling queue_free",
"fullname": "test_when_calling_obj_is_queued_for_deletion_after_calling_queue_free",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:1863] is not queued for deletion",
"context": "Then it passes",
"expected": "[Node:1863] is not queued for deletion",
"success": true
} ],
"context": "When calling asserts.object_is_not_for_queued_deletion after not calling queue free()",
"fullname": "test_when_calling_obj_is_not_for_queued_deletion_after_not_calling_queue_free",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:1865] is blocking signals",
"context": "Then it passes",
"expected": "[Node:1865] is blocking signals",
"success": true
} ],
"context": "When calling is blocking signals while blocking signals",
"fullname": "test_is_blocking_signals",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:1867] is not blocking signals",
"context": "Then it passes",
"expected": "[Node:1867] is not blocking signals",
"success": true
} ],
"context": "When calling is not blocking signals while not blocking signals",
"fullname": "test_is_not_blocking_signals",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:1838].builtin_dummy is not connected to [Node:1838].title",
"context": "Then it passes",
"expected": "[Node:1838].builtin_dummy is not connected to [Node:1838].title",
"success": true
} ],
"context": "When calling asserts object is not connected with an invalid connection",
"fullname": "test_when_calling_obj_is_not_connected_with_an_invalid_connection",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 15,
"path": "res://tests/unit/object.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/object.test.gd",
"tags": [  ],
"test": ExtResource( 7 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 15
}, {
"context": "Given A Range Assertion",
"methods": [ {
"assertions": [ {
"actual": "0 is in range(0, 10)",
"context": "Then it passes",
"expected": "0 is in range(0, 10)",
"success": true
} ],
"context": "When calling is (0) in range(0, 10)",
"fullname": "test_when_calling_is_in_range",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "10 is not in range(0, 10)",
"context": "Then it passes",
"expected": "10 is not in range(0, 10)",
"success": true
} ],
"context": "When calling is (10) not in range (in range(0, 10)",
"fullname": "test_when_calling_is_not_in_range",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 2,
"path": "res://tests/unit/range.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/range.test.gd",
"tags": [  ],
"test": ExtResource( 15 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 2
}, {
"context": "Given the Addition Operator",
"methods": [ {
"assertions": [ {
"actual": "|int| 0 is equal to |int| 0",
"context": "",
"expected": "|int| 0 is equal to |int| 0",
"success": true
} ],
"context": "When we subtract 2 from 2 we get 0",
"fullname": "test_subtract",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 2 is equal to |int| 2",
"context": "",
"expected": "|int| 2 is equal to |int| 2",
"success": true
} ],
"context": "When we subtract 5 from 3 we get 2",
"fullname": "test_subtract",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 1 is equal to |int| 1",
"context": "",
"expected": "|int| 1 is equal to |int| 1",
"success": true
} ],
"context": "When we subtract 7 from 6 we get 1",
"fullname": "test_subtract",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 4 is equal to |int| 4",
"context": "",
"expected": "|int| 4 is equal to |int| 4",
"success": true
} ],
"context": "When we add 2 to 2 we get 4",
"fullname": "test_add",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 8 is equal to |int| 8",
"context": "",
"expected": "|int| 8 is equal to |int| 8",
"success": true
} ],
"context": "When we add 5 to 3 we get 8",
"fullname": "test_add",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 13 is equal to |int| 13",
"context": "",
"expected": "|int| 13 is equal to |int| 13",
"success": true
} ],
"context": "When we add 7 to 6 we get 13",
"fullname": "test_add",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 6,
"path": "res://tests/unit/parameters.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/parameters.test.gd",
"tags": [  ],
"test": ExtResource( 16 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 6
}, {
"context": "Dummy Passing Test",
"methods": [ {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Passing!",
"expected": "|bool| True == true",
"success": true
} ],
"context": "This method passes",
"fullname": "test_this_method_passes",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 1,
"path": "res://tests/unit/suite.test.gd.DummyOne",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/suite.test.gd.DummyOne",
"tags": [  ],
"test": SubResource( 5 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 1
}, {
"context": "Given a String Assertion",
"methods": [ {
"assertions": [ {
"actual": "lorem impsum ends with impsum",
"context": "Then it passes",
"expected": "lorem impsum ends with impsum",
"success": true
} ],
"context": "When calling asserts.string_ends_with('impsum', 'lorem impsum')",
"fullname": "test_when_calling_string_ends_with",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "impsum does not end with lorem",
"context": "Then it passes",
"expected": "impsum does not end with lorem",
"success": true
} ],
"context": "When calling asserts.string_does_not_end_with('lorem', 'impsum')",
"fullname": "test_when_calling_string_does_not_end_with",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "impsum does not contain beem im",
"context": "Then it passes",
"expected": "impsum does not contain beem im",
"success": true
} ],
"context": "When calling asserts.string_does_not_contain('em im', 'impsum')",
"fullname": "test_when_calling_string_does_not_contain",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "lorem impsum contains em im",
"context": "Then it passes",
"expected": "lorem impsum contains em im",
"success": true
} ],
"context": "When calling asserts.string_contains('em im', 'lorem impsum')",
"fullname": "test_when_calling_string_contains",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "lorem impsum begins with lorem",
"context": "Then it passes",
"expected": "lorem impsum begins with lorem",
"success": true
} ],
"context": "When calling asserts.string_begins_with('lorem', 'lorem impsum')",
"fullname": "test_when_calling_string_begins_with",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "impsum does not begin with bleh lorem",
"context": "Then it passes",
"expected": "impsum does not begin with bleh lorem",
"success": true
} ],
"context": "When calling asserts.string_does_not_begin_with('lorem', 'impsum')",
"fullname": "test_when_calling_string_does_not_begin_with",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 6,
"path": "res://tests/unit/string.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/string.test.gd",
"tags": [  ],
"test": ExtResource( 9 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 6
}, {
"context": "Dummy Test 2",
"methods": [ {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Passing!",
"expected": "|bool| True == true",
"success": true
} ],
"context": "This method passes",
"fullname": "test_this_method_passes",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 1,
"path": "res://tests/unit/suite.test.gd.DummyTwo",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/suite.test.gd.DummyTwo",
"tags": [  ],
"test": SubResource( 6 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 1
}, {
"context": "Given a Test Script",
"methods": [ {
"assertions": [ {
"actual": "|bool| True == true",
"context": "if the test didn't break this works",
"expected": "|bool| True == true",
"success": true
} ],
"context": " we can omit describe",
"fullname": "test_we_can_omit_describe",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 10 is greater than |int| 1",
"context": "We get an array of multiple values back",
"expected": "|int| 10 is greater than |int| 1",
"success": true
}, {
"actual": "|int| 0 is not equal to |int| 9",
"context": "With different values",
"expected": "|int| 0 != |int| 9",
"success": true
}, {
"actual": "|int| 10 is greater than |int| 1",
"context": "And we can track multiple properties",
"expected": "|int| 10 is greater than |int| 1",
"success": true
} ],
"context": "When we record properties",
"fullname": "test_we_can_record_properties",
"passed": 3,
"success": true,
"time": 0.0,
"total": 3
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|int| 2 is equal to |int| 2",
"context": "",
"expected": "|int| 2 is equal to |int| 2",
"success": true
} ],
"context": " when we omit context we can see expected and got under method",
"fullname": "test_when_we_omit_context_we_can_see_expected_and_got_under_method",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
} ],
"passed": 3,
"path": "res://tests/unit/test.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/test.test.gd",
"tags": [  ],
"test": ExtResource( 19 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 3
}, {
"context": "Given a Signal Watcher",
"methods": [ {
"assertions": [ {
"actual": "Signal: example was emitted from [Node:1901] with arguments: [1, 20, 5]",
"context": "Then it captures any arguments that where passed when the signal was emitted",
"expected": "Signal: example was emitted from [Node:1901] with arguments: [1, 20, 5]",
"success": true
} ],
"context": "When we watch a signal from an object with no bound variables",
"fullname": "test_When_we_watch_a_signal_from_an_object_with_no_bound_variables",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "signal: example was emitted from [Node:1901]",
"context": "Then it captures the emitted signal",
"expected": "signal: example was emitted from [Node:1901]",
"success": true
} ],
"context": "When we watch and emit a signal",
"fullname": "test_When_we_watch_and_emit_a_signal",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "signal: multiple was emitted from [Node:1901] 2",
"context": "Then we can track how many times we emitted it",
"expected": "signal: multiple was emitted from [Node:1901] 2",
"success": true
} ],
"context": "When we watch and signal and emit it multiple times",
"fullname": "test_When_we_watch_a_signal_and_emit_it_multiple_times",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Signal: example was not emitted from [Node:1901]",
"context": "Then it does not capture the non-emitted signal",
"expected": "Signal: example was not emitted from [Node:1901]",
"success": true
} ],
"context": "When we watch and do not emit a signal",
"fullname": "test_When_we_watch_and_do_not_emit_a_signal",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 4,
"path": "res://tests/unit/watcher.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/watcher.test.gd",
"tags": [  ],
"test": ExtResource( 17 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 4
}, {
"context": "Given a Yield",
"methods": [ {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then yielder is not active",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When asserting against a test",
"fullname": "test_Yielder_is_not_active_when_asserting",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then the yielder is paused",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When a signal being yielded on is emitted",
"fullname": "test_When_a_signal_being_yielded_on_is_emitted_the_yielder_is_stopped",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then yielder is unpaused",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "The timeout signal of the yielder is connected",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we call until_timeout (with 1.0)",
"fullname": "test_When_we_call_until_timeout",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then the yielder is unpaused",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then the timeout signal of the yielder is connected",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then our signal is connected to the yielder",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we call until signal",
"fullname": "test_When_we_call_until_signal",
"passed": 3,
"success": true,
"time": 0.0,
"total": 3
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then the yielder is paused",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "The timeout signal of the yielder is not connected",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When the yielder times out on until_timeout(0.1)",
"fullname": "test_When_the_yielder_times_out",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then the yielder is paused",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then the timeout signal of the yielder is disconnected",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then our signal to the yielder is disconnected",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When the yielder heres our signal",
"fullname": "test_When_the_yielder_hears_our_signal",
"passed": 3,
"success": true,
"time": 0.0,
"total": 3
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then we set var e to true",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then we set var f to true",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we yield twice in execute",
"fullname": "test_When_we_yield_in_execute",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then we set var a to true",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then we set var b to true",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we yield in start twice",
"fullname": "test_When_we_yield_in_start",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then we set var c to true",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then we set var d to true",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we yield in pre thrice",
"fullname": "test_When_we_yield_in_pre",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "[100, Null, Null, Null, Null, Null] is builtin: Array",
"context": "Then we get an array",
"expected": "[100, Null, Null, Null, Null, Null] is builtin: Array",
"success": true
}, {
"actual": "|int| 6 is equal to |int| 6",
"context": "Of size 6",
"expected": "|int| 6 is equal to |int| 6",
"success": true
}, {
"actual": "|int| 100 is equal to |int| 100",
"context": "Where element 0 is 100",
"expected": "|int| 100 is equal to |int| 100",
"success": true
} ],
"context": "When yield(self.yield_value()) returns",
"fullname": "test_When_we_yield_we_get_the_return_value",
"passed": 3,
"success": true,
"time": 0.0,
"total": 3
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then the timeout signal is disconnected",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then the signal-signal is disconnected",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When it is finished",
"fullname": "test_When_yielder_is_finished_signals_are_disconnected",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
} ],
"passed": 11,
"path": "res://tests/unit/yield.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/yield.test.gd",
"tags": [  ],
"test": ExtResource( 18 ),
"yield_time": 1.9
},
"success": true,
"time_taken": 0.0,
"total": 11
} ],
1611514271: [ {
"context": "Default Args",
"methods": [ {
"assertions": [ {
"actual": "|bool| True == true",
"context": "If this method can be reached then we have doubled a script with default argument(s) properly!",
"expected": "|bool| True == true",
"success": true
} ],
"context": " default arguments of interpolate property",
"fullname": "test_default_arguments_of_interpolate_property",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 1,
"path": "res://tests/integration/default_args.test.gd",
"source": {
"containers": [ "res://tests/integration", "res://tests" ],
"method": "",
"path": "res://tests/integration/default_args.test.gd",
"tags": [  ],
"test": ExtResource( 10 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 1
}, {
"context": "Given a Boolean Assertion",
"methods": [ {
"assertions": [ {
"actual": "|bool| True != false",
"context": "",
"expected": "|bool| True == false",
"success": false
} ],
"context": " intentional failure",
"fullname": "test_intentional_failure",
"passed": 0,
"success": false,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| False == false",
"context": "Then it passes",
"expected": "|bool| False == false",
"success": true
} ],
"context": "When calling asserts.is_false(false)",
"fullname": "test_when_calling_asserts_is_false",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then it passes",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When calling asserts.is_true(true)",
"fullname": "test_when_calling_asserts_is_true",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 2,
"path": "res://tests/integration/boolean.test.gd",
"source": {
"containers": [ "res://tests/integration", "res://tests" ],
"method": "",
"path": "res://tests/integration/boolean.test.gd",
"tags": [  ],
"test": ExtResource( 20 ),
"yield_time": 0.0
},
"success": false,
"time_taken": 0.0,
"total": 3
}, {
"context": "Given is_on_floor",
"methods": [ {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then it can be stubbed",
"expected": "|bool| True == true",
"success": true
} ],
"context": "From a user-defined script",
"fullname": "test_stubbing_is_on_floor_method_from_user_defined_class",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then it can be stubbed",
"expected": "|bool| True == true",
"success": true
} ],
"context": "From a built-in KinematicBody2D2",
"fullname": "test_stubbing_is_on_floor_method_from_builtin_class2",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then it can be stubbed",
"expected": "|bool| True == true",
"success": true
} ],
"context": "From a child node of a scene without scripts",
"fullname": "test_stubbing_is_on_floor_as_child_node_with_no_script",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 3,
"path": "res://tests/integration/on_floor.test.gd",
"source": {
"containers": [ "res://tests/integration", "res://tests" ],
"method": "",
"path": "res://tests/integration/on_floor.test.gd",
"tags": [  ],
"test": ExtResource( 5 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 3
}, {
"context": "Given a Scene Director",
"methods": [ {
"assertions": [ {
"actual": "|Dictionary| {.:[Reference:1319], A:[Reference:1320], A/B:[Reference:1322], C:[Reference:1321], C/D:[Reference:1323]} is not equal to |Dictionary| {.:[Reference:1341], A:[Reference:1342], A/B:[Reference:1344], C:[Reference:1343], C/D:[Reference:1345]}",
"context": "Then they do not share resources",
"expected": "|Dictionary| {.:[Reference:1319], A:[Reference:1320], A/B:[Reference:1322], C:[Reference:1321], C/D:[Reference:1323]} != |Dictionary| {.:[Reference:1341], A:[Reference:1342], A/B:[Reference:1344], C:[Reference:1343], C/D:[Reference:1345]}",
"success": true
} ],
"context": "When we create two of it for the same scene",
"fullname": "test_When_we_create_two_of_it_for_the_same_scene",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 9999 is equal to |int| 9999",
"context": "Then we get the stubbed return value",
"expected": "|int| 9999 is equal to |int| 9999",
"success": true
} ],
"context": "When we call a method from the root node that we stubbed",
"fullname": "test_When_we_call_a_method_from_the_root_node_that_we_stubbed",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 999 is equal to |int| 999",
"context": "Then we get the stubbed return value",
"expected": "|int| 999 is equal to |int| 999",
"success": true
} ],
"context": "When we call a method from a child node that we stubbed",
"fullname": "test_When_we_call_a_method_from_a_child_node_that_we_stubbed",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|NodePath| A is equal to |NodePath| A",
"context": "We have the correct NodePath Set",
"expected": "|NodePath| A is equal to |NodePath| A",
"success": true
} ],
"context": "When we add it to the tree it runs",
"fullname": "test_When_we_add_it_to_the_tree_it_runs",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 99 is equal to |int| 99",
"context": "Then we get the stubbed return value",
"expected": "|int| 99 is equal to |int| 99",
"success": true
} ],
"context": "When we call a method from a grandchild node that we stubbed",
"fullname": "test_When_we_call_a_method_from_a_grandchild_node_that_we_stubbed",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 5,
"path": "res://tests/integration/scene_director.test.gd",
"source": {
"containers": [ "res://tests/integration", "res://tests" ],
"method": "",
"path": "res://tests/integration/scene_director.test.gd",
"tags": [  ],
"test": ExtResource( 4 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 5
}, {
"context": "Given a Script Director",
"methods": [ {
"assertions": [ {
"actual": "[Reference:1481] is instance of class: [GDScript:1474]",
"context": "Then we get that inner class back",
"expected": "[Reference:1481] is instance of class: [GDScript:1474]",
"success": true
} ],
"context": "When we double an inner class",
"fullname": "test_When_we_double_an_inner_class",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|Dictionary| {_enter_tree:{arguments:, default_arguments:}, _exit_tree:{arguments:, default_arguments:}, _get:{arguments:a, default_arguments:a}, _get_configuration_warning:{arguments:, default_arguments:}, _get_editor_description:{arguments:, default_arguments:}, _get_import_path:{arguments:, default_arguments:}, _get_property_list:{arguments:, default_arguments:}, _init:{arguments:, default_arguments:}, _input:{arguments:a, default_arguments:a}, _notification:{arguments:a, default_arguments:a}, _physics_process:{arguments:a, default_arguments:a}, _process:{arguments:a, default_arguments:a}, _ready:{arguments:, default_arguments:}, _set:{arguments:a, b, default_arguments:a, b}, _set_editor_description:{arguments:a, default_arguments:a}, _set_import_path:{arguments:a, default_arguments:a}, _to_string:{arguments:, default_arguments:}, _unhandled_input:{arguments:a, default_arguments:a}, _unhandled_key_input:{arguments:a, default_arguments:a}, add:{arguments:a, b, default_arguments:a, b}, add_child:{arguments:a, b, default_arguments:a, b = False}, add_child_below_node:{arguments:a, b, c, default_arguments:a, b, c = False}, add_to_group:{arguments:a, b, default_arguments:a, b = False}, add_user_signal:{arguments:a, b, default_arguments:a, b = []}, call:{arguments:a, default_arguments:a}, call_deferred:{arguments:a, default_arguments:a}, callv:{arguments:a, b, default_arguments:a, b}, can_process:{arguments:, default_arguments:}, can_translate_messages:{arguments:, default_arguments:}, connect:{arguments:a, b, c, d, e, default_arguments:a, b, c, d = [], e = 0}, disconnect:{arguments:a, b, c, default_arguments:a, b, c}, divide:{arguments:a, b, default_arguments:a, b}, duplicate:{arguments:a, default_arguments:a = 15}, emit_signal:{arguments:a, default_arguments:a}, find_node:{arguments:a, b, c, default_arguments:a, b = True, c = True}, find_parent:{arguments:a, default_arguments:a}, free:{arguments:, default_arguments:}, get:{arguments:a, default_arguments:a}, get_child:{arguments:a, default_arguments:a}, get_child_count:{arguments:, default_arguments:}, get_children:{arguments:, default_arguments:}, get_class:{arguments:, default_arguments:}, get_custom_multiplayer:{arguments:, default_arguments:}, get_filename:{arguments:, default_arguments:}, get_groups:{arguments:, default_arguments:}, get_incoming_connections:{arguments:, default_arguments:}, get_index:{arguments:, default_arguments:}, get_indexed:{arguments:a, default_arguments:a}, get_instance_id:{arguments:, default_arguments:}, get_meta:{arguments:a, default_arguments:a}, get_meta_list:{arguments:, default_arguments:}, get_method_list:{arguments:, default_arguments:}, get_multiplayer:{arguments:, default_arguments:}, get_name:{arguments:, default_arguments:}, get_network_master:{arguments:, default_arguments:}, get_node:{arguments:a, default_arguments:a}, get_node_and_resource:{arguments:a, default_arguments:a}, get_node_or_null:{arguments:a, default_arguments:a}, get_owner:{arguments:, default_arguments:}, get_parent:{arguments:, default_arguments:}, get_path:{arguments:, default_arguments:}, get_path_to:{arguments:a, default_arguments:a}, get_pause_mode:{arguments:, default_arguments:}, get_physics_process_delta_time:{arguments:, default_arguments:}, get_position_in_parent:{arguments:, default_arguments:}, get_process_delta_time:{arguments:, default_arguments:}, get_process_priority:{arguments:, default_arguments:}, get_property_list:{arguments:, default_arguments:}, get_scene_instance_load_placeholder:{arguments:, default_arguments:}, get_script:{arguments:, default_arguments:}, get_signal_connection_list:{arguments:a, default_arguments:a}, get_signal_list:{arguments:, default_arguments:}, get_tree:{arguments:, default_arguments:}, get_viewport:{arguments:, default_arguments:}, has_meta:{arguments:a, default_arguments:a}, has_method:{arguments:a, default_arguments:a}, has_node:{arguments:a, default_arguments:a}, has_node_and_resource:{arguments:a, default_arguments:a}, has_signal:{arguments:a, default_arguments:a}, has_user_signal:{arguments:a, default_arguments:a}, is_a_parent_of:{arguments:a, default_arguments:a}, is_blocking_signals:{arguments:, default_arguments:}, is_class:{arguments:a, default_arguments:a}, is_connected:{arguments:a, b, c, default_arguments:a, b, c}, is_displayed_folded:{arguments:, default_arguments:}, is_greater_than:{arguments:a, default_arguments:a}, is_in_group:{arguments:a, default_arguments:a}, is_inside_tree:{arguments:, default_arguments:}, is_network_master:{arguments:, default_arguments:}, is_physics_processing:{arguments:, default_arguments:}, is_physics_processing_internal:{arguments:, default_arguments:}, is_processing:{arguments:, default_arguments:}, is_processing_input:{arguments:, default_arguments:}, is_processing_internal:{arguments:, default_arguments:}, is_processing_unhandled_input:{arguments:, default_arguments:}, is_processing_unhandled_key_input:{arguments:, default_arguments:}, is_queued_for_deletion:{arguments:, default_arguments:}, math_fight:{arguments:, default_arguments:}, move_child:{arguments:a, b, default_arguments:a, b}, multiply:{arguments:a, b, default_arguments:a, b}, notification:{arguments:a, b, default_arguments:a, b = False}, pi:{arguments:, default_arguments:}, print_stray_nodes:{arguments:, default_arguments:}, print_tree:{arguments:, default_arguments:}, print_tree_pretty:{arguments:, default_arguments:}, propagate_call:{arguments:a, b, c, default_arguments:a, b = [], c = False}, propagate_notification:{arguments:a, default_arguments:a}, property_list_changed_notify:{arguments:, default_arguments:}, queue_free:{arguments:, default_arguments:}, raise:{arguments:, default_arguments:}, remove_and_skip:{arguments:, default_arguments:}, remove_child:{arguments:a, default_arguments:a}, remove_from_group:{arguments:a, default_arguments:a}, remove_meta:{arguments:a, default_arguments:a}, replace_by:{arguments:a, b, default_arguments:a, b = False}, request_ready:{arguments:, default_arguments:}, rpc:{arguments:a, default_arguments:a}, rpc_config:{arguments:a, b, default_arguments:a, b}, rpc_id:{arguments:a, b, default_arguments:a, b}, rpc_unreliable:{arguments:a, default_arguments:a}, rpc_unreliable_id:{arguments:a, b, default_arguments:a, b}, rset:{arguments:a, b, default_arguments:a, b}, rset_config:{arguments:a, b, default_arguments:a, b}, rset_id:{arguments:a, b, c, default_arguments:a, b, c}, rset_unreliable:{arguments:a, b, default_arguments:a, b}, rset_unreliable_id:{arguments:a, b, c, default_arguments:a, b, c}, set:{arguments:a, b, default_arguments:a, b}, set_block_signals:{arguments:a, default_arguments:a}, set_custom_multiplayer:{arguments:a, default_arguments:a}, set_deferred:{arguments:a, b, default_arguments:a, b}, set_display_folded:{arguments:a, default_arguments:a}, set_filename:{arguments:a, default_arguments:a}, set_indexed:{arguments:a, b, default_arguments:a, b}, set_message_translation:{arguments:a, default_arguments:a}, set_meta:{arguments:a, b, default_arguments:a, b}, set_name:{arguments:a, default_arguments:a}, set_network_master:{arguments:a, b, default_arguments:a, b = True}, set_owner:{arguments:a, default_arguments:a}, set_pause_mode:{arguments:a, default_arguments:a}, set_physics_process:{arguments:a, default_arguments:a}, set_physics_process_internal:{arguments:a, default_arguments:a}, set_process:{arguments:a, default_arguments:a}, set_process_input:{arguments:a, default_arguments:a}, set_process_internal:{arguments:a, default_arguments:a}, set_process_priority:{arguments:a, default_arguments:a}, set_process_unhandled_input:{arguments:a, default_arguments:a}, set_process_unhandled_key_input:{arguments:a, default_arguments:a}, set_scene_instance_load_placeholder:{arguments:a, default_arguments:a}, set_script:{arguments:a, default_arguments:a}, subtract:{arguments:a, b, default_arguments:a, b}, sum:{arguments:a, default_arguments:a}, to_string:{arguments:, default_arguments:}, tr:{arguments:a, default_arguments:a}, update_configuration_warning:{arguments:, default_arguments:}} is not equal to |Dictionary| {_enter_tree:{arguments:, default_arguments:}, _exit_tree:{arguments:, default_arguments:}, _get:{arguments:a, default_arguments:a}, _get_configuration_warning:{arguments:, default_arguments:}, _get_editor_description:{arguments:, default_arguments:}, _get_import_path:{arguments:, default_arguments:}, _get_property_list:{arguments:, default_arguments:}, _init:{arguments:, default_arguments:}, _input:{arguments:a, default_arguments:a}, _notification:{arguments:a, default_arguments:a}, _physics_process:{arguments:a, default_arguments:a}, _process:{arguments:a, default_arguments:a}, _ready:{arguments:, default_arguments:}, _set:{arguments:a, b, default_arguments:a, b}, _set_editor_description:{arguments:a, default_arguments:a}, _set_import_path:{arguments:a, default_arguments:a}, _to_string:{arguments:, default_arguments:}, _unhandled_input:{arguments:a, default_arguments:a}, _unhandled_key_input:{arguments:a, default_arguments:a}, add:{arguments:a, b, default_arguments:a, b}, add_child:{arguments:a, b, default_arguments:a, b = False}, add_child_below_node:{arguments:a, b, c, default_arguments:a, b, c = False}, add_to_group:{arguments:a, b, default_arguments:a, b = False}, add_user_signal:{arguments:a, b, default_arguments:a, b = []}, call:{arguments:a, default_arguments:a}, call_deferred:{arguments:a, default_arguments:a}, callv:{arguments:a, b, default_arguments:a, b}, can_process:{arguments:, default_arguments:}, can_translate_messages:{arguments:, default_arguments:}, connect:{arguments:a, b, c, d, e, default_arguments:a, b, c, d = [], e = 0}, disconnect:{arguments:a, b, c, default_arguments:a, b, c}, divide:{arguments:a, b, default_arguments:a, b}, duplicate:{arguments:a, default_arguments:a = 15}, emit_signal:{arguments:a, default_arguments:a}, find_node:{arguments:a, b, c, default_arguments:a, b = True, c = True}, find_parent:{arguments:a, default_arguments:a}, free:{arguments:, default_arguments:}, get:{arguments:a, default_arguments:a}, get_child:{arguments:a, default_arguments:a}, get_child_count:{arguments:, default_arguments:}, get_children:{arguments:, default_arguments:}, get_class:{arguments:, default_arguments:}, get_custom_multiplayer:{arguments:, default_arguments:}, get_filename:{arguments:, default_arguments:}, get_groups:{arguments:, default_arguments:}, get_incoming_connections:{arguments:, default_arguments:}, get_index:{arguments:, default_arguments:}, get_indexed:{arguments:a, default_arguments:a}, get_instance_id:{arguments:, default_arguments:}, get_meta:{arguments:a, default_arguments:a}, get_meta_list:{arguments:, default_arguments:}, get_method_list:{arguments:, default_arguments:}, get_multiplayer:{arguments:, default_arguments:}, get_name:{arguments:, default_arguments:}, get_network_master:{arguments:, default_arguments:}, get_node:{arguments:a, default_arguments:a}, get_node_and_resource:{arguments:a, default_arguments:a}, get_node_or_null:{arguments:a, default_arguments:a}, get_owner:{arguments:, default_arguments:}, get_parent:{arguments:, default_arguments:}, get_path:{arguments:, default_arguments:}, get_path_to:{arguments:a, default_arguments:a}, get_pause_mode:{arguments:, default_arguments:}, get_physics_process_delta_time:{arguments:, default_arguments:}, get_position_in_parent:{arguments:, default_arguments:}, get_process_delta_time:{arguments:, default_arguments:}, get_process_priority:{arguments:, default_arguments:}, get_property_list:{arguments:, default_arguments:}, get_scene_instance_load_placeholder:{arguments:, default_arguments:}, get_script:{arguments:, default_arguments:}, get_signal_connection_list:{arguments:a, default_arguments:a}, get_signal_list:{arguments:, default_arguments:}, get_tree:{arguments:, default_arguments:}, get_viewport:{arguments:, default_arguments:}, has_meta:{arguments:a, default_arguments:a}, has_method:{arguments:a, default_arguments:a}, has_node:{arguments:a, default_arguments:a}, has_node_and_resource:{arguments:a, default_arguments:a}, has_signal:{arguments:a, default_arguments:a}, has_user_signal:{arguments:a, default_arguments:a}, is_a_parent_of:{arguments:a, default_arguments:a}, is_blocking_signals:{arguments:, default_arguments:}, is_class:{arguments:a, default_arguments:a}, is_connected:{arguments:a, b, c, default_arguments:a, b, c}, is_displayed_folded:{arguments:, default_arguments:}, is_greater_than:{arguments:a, default_arguments:a}, is_in_group:{arguments:a, default_arguments:a}, is_inside_tree:{arguments:, default_arguments:}, is_network_master:{arguments:, default_arguments:}, is_physics_processing:{arguments:, default_arguments:}, is_physics_processing_internal:{arguments:, default_arguments:}, is_processing:{arguments:, default_arguments:}, is_processing_input:{arguments:, default_arguments:}, is_processing_internal:{arguments:, default_arguments:}, is_processing_unhandled_input:{arguments:, default_arguments:}, is_processing_unhandled_key_input:{arguments:, default_arguments:}, is_queued_for_deletion:{arguments:, default_arguments:}, math_fight:{arguments:, default_arguments:}, move_child:{arguments:a, b, default_arguments:a, b}, multiply:{arguments:a, b, default_arguments:a, b}, notification:{arguments:a, b, default_arguments:a, b = False}, pi:{arguments:, default_arguments:}, print_stray_nodes:{arguments:, default_arguments:}, print_tree:{arguments:, default_arguments:}, print_tree_pretty:{arguments:, default_arguments:}, propagate_call:{arguments:a, b, c, default_arguments:a, b = [], c = False}, propagate_notification:{arguments:a, default_arguments:a}, property_list_changed_notify:{arguments:, default_arguments:}, queue_free:{arguments:, default_arguments:}, raise:{arguments:, default_arguments:}, remove_and_skip:{arguments:, default_arguments:}, remove_child:{arguments:a, default_arguments:a}, remove_from_group:{arguments:a, default_arguments:a}, remove_meta:{arguments:a, default_arguments:a}, replace_by:{arguments:a, b, default_arguments:a, b = False}, request_ready:{arguments:, default_arguments:}, rpc:{arguments:a, default_arguments:a}, rpc_config:{arguments:a, b, default_arguments:a, b}, rpc_id:{arguments:a, b, default_arguments:a, b}, rpc_unreliable:{arguments:a, default_arguments:a}, rpc_unreliable_id:{arguments:a, b, default_arguments:a, b}, rset:{arguments:a, b, default_arguments:a, b}, rset_config:{arguments:a, b, default_arguments:a, b}, rset_id:{arguments:a, b, c, default_arguments:a, b, c}, rset_unreliable:{arguments:a, b, default_arguments:a, b}, rset_unreliable_id:{arguments:a, b, c, default_arguments:a, b, c}, set:{arguments:a, b, default_arguments:a, b}, set_block_signals:{arguments:a, default_arguments:a}, set_custom_multiplayer:{arguments:a, default_arguments:a}, set_deferred:{arguments:a, b, default_arguments:a, b}, set_display_folded:{arguments:a, default_arguments:a}, set_filename:{arguments:a, default_arguments:a}, set_indexed:{arguments:a, b, default_arguments:a, b}, set_message_translation:{arguments:a, default_arguments:a}, set_meta:{arguments:a, b, default_arguments:a, b}, set_name:{arguments:a, default_arguments:a}, set_network_master:{arguments:a, b, default_arguments:a, b = True}, set_owner:{arguments:a, default_arguments:a}, set_pause_mode:{arguments:a, default_arguments:a}, set_physics_process:{arguments:a, default_arguments:a}, set_physics_process_internal:{arguments:a, default_arguments:a}, set_process:{arguments:a, default_arguments:a}, set_process_input:{arguments:a, default_arguments:a}, set_process_internal:{arguments:a, default_arguments:a}, set_process_priority:{arguments:a, default_arguments:a}, set_process_unhandled_input:{arguments:a, default_arguments:a}, set_process_unhandled_key_input:{arguments:a, default_arguments:a}, set_scene_instance_load_placeholder:{arguments:a, default_arguments:a}, set_script:{arguments:a, default_arguments:a}, subtract:{arguments:a, b, default_arguments:a, b}, sum:{arguments:a, default_arguments:a}, to_string:{arguments:, default_arguments:}, tr:{arguments:a, default_arguments:a}, update_configuration_warning:{arguments:, default_arguments:}}",
"context": "Then they do not share resources",
"expected": "|Dictionary| {_enter_tree:{arguments:, default_arguments:}, _exit_tree:{arguments:, default_arguments:}, _get:{arguments:a, default_arguments:a}, _get_configuration_warning:{arguments:, default_arguments:}, _get_editor_description:{arguments:, default_arguments:}, _get_import_path:{arguments:, default_arguments:}, _get_property_list:{arguments:, default_arguments:}, _init:{arguments:, default_arguments:}, _input:{arguments:a, default_arguments:a}, _notification:{arguments:a, default_arguments:a}, _physics_process:{arguments:a, default_arguments:a}, _process:{arguments:a, default_arguments:a}, _ready:{arguments:, default_arguments:}, _set:{arguments:a, b, default_arguments:a, b}, _set_editor_description:{arguments:a, default_arguments:a}, _set_import_path:{arguments:a, default_arguments:a}, _to_string:{arguments:, default_arguments:}, _unhandled_input:{arguments:a, default_arguments:a}, _unhandled_key_input:{arguments:a, default_arguments:a}, add:{arguments:a, b, default_arguments:a, b}, add_child:{arguments:a, b, default_arguments:a, b = False}, add_child_below_node:{arguments:a, b, c, default_arguments:a, b, c = False}, add_to_group:{arguments:a, b, default_arguments:a, b = False}, add_user_signal:{arguments:a, b, default_arguments:a, b = []}, call:{arguments:a, default_arguments:a}, call_deferred:{arguments:a, default_arguments:a}, callv:{arguments:a, b, default_arguments:a, b}, can_process:{arguments:, default_arguments:}, can_translate_messages:{arguments:, default_arguments:}, connect:{arguments:a, b, c, d, e, default_arguments:a, b, c, d = [], e = 0}, disconnect:{arguments:a, b, c, default_arguments:a, b, c}, divide:{arguments:a, b, default_arguments:a, b}, duplicate:{arguments:a, default_arguments:a = 15}, emit_signal:{arguments:a, default_arguments:a}, find_node:{arguments:a, b, c, default_arguments:a, b = True, c = True}, find_parent:{arguments:a, default_arguments:a}, free:{arguments:, default_arguments:}, get:{arguments:a, default_arguments:a}, get_child:{arguments:a, default_arguments:a}, get_child_count:{arguments:, default_arguments:}, get_children:{arguments:, default_arguments:}, get_class:{arguments:, default_arguments:}, get_custom_multiplayer:{arguments:, default_arguments:}, get_filename:{arguments:, default_arguments:}, get_groups:{arguments:, default_arguments:}, get_incoming_connections:{arguments:, default_arguments:}, get_index:{arguments:, default_arguments:}, get_indexed:{arguments:a, default_arguments:a}, get_instance_id:{arguments:, default_arguments:}, get_meta:{arguments:a, default_arguments:a}, get_meta_list:{arguments:, default_arguments:}, get_method_list:{arguments:, default_arguments:}, get_multiplayer:{arguments:, default_arguments:}, get_name:{arguments:, default_arguments:}, get_network_master:{arguments:, default_arguments:}, get_node:{arguments:a, default_arguments:a}, get_node_and_resource:{arguments:a, default_arguments:a}, get_node_or_null:{arguments:a, default_arguments:a}, get_owner:{arguments:, default_arguments:}, get_parent:{arguments:, default_arguments:}, get_path:{arguments:, default_arguments:}, get_path_to:{arguments:a, default_arguments:a}, get_pause_mode:{arguments:, default_arguments:}, get_physics_process_delta_time:{arguments:, default_arguments:}, get_position_in_parent:{arguments:, default_arguments:}, get_process_delta_time:{arguments:, default_arguments:}, get_process_priority:{arguments:, default_arguments:}, get_property_list:{arguments:, default_arguments:}, get_scene_instance_load_placeholder:{arguments:, default_arguments:}, get_script:{arguments:, default_arguments:}, get_signal_connection_list:{arguments:a, default_arguments:a}, get_signal_list:{arguments:, default_arguments:}, get_tree:{arguments:, default_arguments:}, get_viewport:{arguments:, default_arguments:}, has_meta:{arguments:a, default_arguments:a}, has_method:{arguments:a, default_arguments:a}, has_node:{arguments:a, default_arguments:a}, has_node_and_resource:{arguments:a, default_arguments:a}, has_signal:{arguments:a, default_arguments:a}, has_user_signal:{arguments:a, default_arguments:a}, is_a_parent_of:{arguments:a, default_arguments:a}, is_blocking_signals:{arguments:, default_arguments:}, is_class:{arguments:a, default_arguments:a}, is_connected:{arguments:a, b, c, default_arguments:a, b, c}, is_displayed_folded:{arguments:, default_arguments:}, is_greater_than:{arguments:a, default_arguments:a}, is_in_group:{arguments:a, default_arguments:a}, is_inside_tree:{arguments:, default_arguments:}, is_network_master:{arguments:, default_arguments:}, is_physics_processing:{arguments:, default_arguments:}, is_physics_processing_internal:{arguments:, default_arguments:}, is_processing:{arguments:, default_arguments:}, is_processing_input:{arguments:, default_arguments:}, is_processing_internal:{arguments:, default_arguments:}, is_processing_unhandled_input:{arguments:, default_arguments:}, is_processing_unhandled_key_input:{arguments:, default_arguments:}, is_queued_for_deletion:{arguments:, default_arguments:}, math_fight:{arguments:, default_arguments:}, move_child:{arguments:a, b, default_arguments:a, b}, multiply:{arguments:a, b, default_arguments:a, b}, notification:{arguments:a, b, default_arguments:a, b = False}, pi:{arguments:, default_arguments:}, print_stray_nodes:{arguments:, default_arguments:}, print_tree:{arguments:, default_arguments:}, print_tree_pretty:{arguments:, default_arguments:}, propagate_call:{arguments:a, b, c, default_arguments:a, b = [], c = False}, propagate_notification:{arguments:a, default_arguments:a}, property_list_changed_notify:{arguments:, default_arguments:}, queue_free:{arguments:, default_arguments:}, raise:{arguments:, default_arguments:}, remove_and_skip:{arguments:, default_arguments:}, remove_child:{arguments:a, default_arguments:a}, remove_from_group:{arguments:a, default_arguments:a}, remove_meta:{arguments:a, default_arguments:a}, replace_by:{arguments:a, b, default_arguments:a, b = False}, request_ready:{arguments:, default_arguments:}, rpc:{arguments:a, default_arguments:a}, rpc_config:{arguments:a, b, default_arguments:a, b}, rpc_id:{arguments:a, b, default_arguments:a, b}, rpc_unreliable:{arguments:a, default_arguments:a}, rpc_unreliable_id:{arguments:a, b, default_arguments:a, b}, rset:{arguments:a, b, default_arguments:a, b}, rset_config:{arguments:a, b, default_arguments:a, b}, rset_id:{arguments:a, b, c, default_arguments:a, b, c}, rset_unreliable:{arguments:a, b, default_arguments:a, b}, rset_unreliable_id:{arguments:a, b, c, default_arguments:a, b, c}, set:{arguments:a, b, default_arguments:a, b}, set_block_signals:{arguments:a, default_arguments:a}, set_custom_multiplayer:{arguments:a, default_arguments:a}, set_deferred:{arguments:a, b, default_arguments:a, b}, set_display_folded:{arguments:a, default_arguments:a}, set_filename:{arguments:a, default_arguments:a}, set_indexed:{arguments:a, b, default_arguments:a, b}, set_message_translation:{arguments:a, default_arguments:a}, set_meta:{arguments:a, b, default_arguments:a, b}, set_name:{arguments:a, default_arguments:a}, set_network_master:{arguments:a, b, default_arguments:a, b = True}, set_owner:{arguments:a, default_arguments:a}, set_pause_mode:{arguments:a, default_arguments:a}, set_physics_process:{arguments:a, default_arguments:a}, set_physics_process_internal:{arguments:a, default_arguments:a}, set_process:{arguments:a, default_arguments:a}, set_process_input:{arguments:a, default_arguments:a}, set_process_internal:{arguments:a, default_arguments:a}, set_process_priority:{arguments:a, default_arguments:a}, set_process_unhandled_input:{arguments:a, default_arguments:a}, set_process_unhandled_key_input:{arguments:a, default_arguments:a}, set_scene_instance_load_placeholder:{arguments:a, default_arguments:a}, set_script:{arguments:a, default_arguments:a}, subtract:{arguments:a, b, default_arguments:a, b}, sum:{arguments:a, default_arguments:a}, to_string:{arguments:, default_arguments:}, tr:{arguments:a, default_arguments:a}, update_configuration_warning:{arguments:, default_arguments:}} != |Dictionary| {_enter_tree:{arguments:, default_arguments:}, _exit_tree:{arguments:, default_arguments:}, _get:{arguments:a, default_arguments:a}, _get_configuration_warning:{arguments:, default_arguments:}, _get_editor_description:{arguments:, default_arguments:}, _get_import_path:{arguments:, default_arguments:}, _get_property_list:{arguments:, default_arguments:}, _init:{arguments:, default_arguments:}, _input:{arguments:a, default_arguments:a}, _notification:{arguments:a, default_arguments:a}, _physics_process:{arguments:a, default_arguments:a}, _process:{arguments:a, default_arguments:a}, _ready:{arguments:, default_arguments:}, _set:{arguments:a, b, default_arguments:a, b}, _set_editor_description:{arguments:a, default_arguments:a}, _set_import_path:{arguments:a, default_arguments:a}, _to_string:{arguments:, default_arguments:}, _unhandled_input:{arguments:a, default_arguments:a}, _unhandled_key_input:{arguments:a, default_arguments:a}, add:{arguments:a, b, default_arguments:a, b}, add_child:{arguments:a, b, default_arguments:a, b = False}, add_child_below_node:{arguments:a, b, c, default_arguments:a, b, c = False}, add_to_group:{arguments:a, b, default_arguments:a, b = False}, add_user_signal:{arguments:a, b, default_arguments:a, b = []}, call:{arguments:a, default_arguments:a}, call_deferred:{arguments:a, default_arguments:a}, callv:{arguments:a, b, default_arguments:a, b}, can_process:{arguments:, default_arguments:}, can_translate_messages:{arguments:, default_arguments:}, connect:{arguments:a, b, c, d, e, default_arguments:a, b, c, d = [], e = 0}, disconnect:{arguments:a, b, c, default_arguments:a, b, c}, divide:{arguments:a, b, default_arguments:a, b}, duplicate:{arguments:a, default_arguments:a = 15}, emit_signal:{arguments:a, default_arguments:a}, find_node:{arguments:a, b, c, default_arguments:a, b = True, c = True}, find_parent:{arguments:a, default_arguments:a}, free:{arguments:, default_arguments:}, get:{arguments:a, default_arguments:a}, get_child:{arguments:a, default_arguments:a}, get_child_count:{arguments:, default_arguments:}, get_children:{arguments:, default_arguments:}, get_class:{arguments:, default_arguments:}, get_custom_multiplayer:{arguments:, default_arguments:}, get_filename:{arguments:, default_arguments:}, get_groups:{arguments:, default_arguments:}, get_incoming_connections:{arguments:, default_arguments:}, get_index:{arguments:, default_arguments:}, get_indexed:{arguments:a, default_arguments:a}, get_instance_id:{arguments:, default_arguments:}, get_meta:{arguments:a, default_arguments:a}, get_meta_list:{arguments:, default_arguments:}, get_method_list:{arguments:, default_arguments:}, get_multiplayer:{arguments:, default_arguments:}, get_name:{arguments:, default_arguments:}, get_network_master:{arguments:, default_arguments:}, get_node:{arguments:a, default_arguments:a}, get_node_and_resource:{arguments:a, default_arguments:a}, get_node_or_null:{arguments:a, default_arguments:a}, get_owner:{arguments:, default_arguments:}, get_parent:{arguments:, default_arguments:}, get_path:{arguments:, default_arguments:}, get_path_to:{arguments:a, default_arguments:a}, get_pause_mode:{arguments:, default_arguments:}, get_physics_process_delta_time:{arguments:, default_arguments:}, get_position_in_parent:{arguments:, default_arguments:}, get_process_delta_time:{arguments:, default_arguments:}, get_process_priority:{arguments:, default_arguments:}, get_property_list:{arguments:, default_arguments:}, get_scene_instance_load_placeholder:{arguments:, default_arguments:}, get_script:{arguments:, default_arguments:}, get_signal_connection_list:{arguments:a, default_arguments:a}, get_signal_list:{arguments:, default_arguments:}, get_tree:{arguments:, default_arguments:}, get_viewport:{arguments:, default_arguments:}, has_meta:{arguments:a, default_arguments:a}, has_method:{arguments:a, default_arguments:a}, has_node:{arguments:a, default_arguments:a}, has_node_and_resource:{arguments:a, default_arguments:a}, has_signal:{arguments:a, default_arguments:a}, has_user_signal:{arguments:a, default_arguments:a}, is_a_parent_of:{arguments:a, default_arguments:a}, is_blocking_signals:{arguments:, default_arguments:}, is_class:{arguments:a, default_arguments:a}, is_connected:{arguments:a, b, c, default_arguments:a, b, c}, is_displayed_folded:{arguments:, default_arguments:}, is_greater_than:{arguments:a, default_arguments:a}, is_in_group:{arguments:a, default_arguments:a}, is_inside_tree:{arguments:, default_arguments:}, is_network_master:{arguments:, default_arguments:}, is_physics_processing:{arguments:, default_arguments:}, is_physics_processing_internal:{arguments:, default_arguments:}, is_processing:{arguments:, default_arguments:}, is_processing_input:{arguments:, default_arguments:}, is_processing_internal:{arguments:, default_arguments:}, is_processing_unhandled_input:{arguments:, default_arguments:}, is_processing_unhandled_key_input:{arguments:, default_arguments:}, is_queued_for_deletion:{arguments:, default_arguments:}, math_fight:{arguments:, default_arguments:}, move_child:{arguments:a, b, default_arguments:a, b}, multiply:{arguments:a, b, default_arguments:a, b}, notification:{arguments:a, b, default_arguments:a, b = False}, pi:{arguments:, default_arguments:}, print_stray_nodes:{arguments:, default_arguments:}, print_tree:{arguments:, default_arguments:}, print_tree_pretty:{arguments:, default_arguments:}, propagate_call:{arguments:a, b, c, default_arguments:a, b = [], c = False}, propagate_notification:{arguments:a, default_arguments:a}, property_list_changed_notify:{arguments:, default_arguments:}, queue_free:{arguments:, default_arguments:}, raise:{arguments:, default_arguments:}, remove_and_skip:{arguments:, default_arguments:}, remove_child:{arguments:a, default_arguments:a}, remove_from_group:{arguments:a, default_arguments:a}, remove_meta:{arguments:a, default_arguments:a}, replace_by:{arguments:a, b, default_arguments:a, b = False}, request_ready:{arguments:, default_arguments:}, rpc:{arguments:a, default_arguments:a}, rpc_config:{arguments:a, b, default_arguments:a, b}, rpc_id:{arguments:a, b, default_arguments:a, b}, rpc_unreliable:{arguments:a, default_arguments:a}, rpc_unreliable_id:{arguments:a, b, default_arguments:a, b}, rset:{arguments:a, b, default_arguments:a, b}, rset_config:{arguments:a, b, default_arguments:a, b}, rset_id:{arguments:a, b, c, default_arguments:a, b, c}, rset_unreliable:{arguments:a, b, default_arguments:a, b}, rset_unreliable_id:{arguments:a, b, c, default_arguments:a, b, c}, set:{arguments:a, b, default_arguments:a, b}, set_block_signals:{arguments:a, default_arguments:a}, set_custom_multiplayer:{arguments:a, default_arguments:a}, set_deferred:{arguments:a, b, default_arguments:a, b}, set_display_folded:{arguments:a, default_arguments:a}, set_filename:{arguments:a, default_arguments:a}, set_indexed:{arguments:a, b, default_arguments:a, b}, set_message_translation:{arguments:a, default_arguments:a}, set_meta:{arguments:a, b, default_arguments:a, b}, set_name:{arguments:a, default_arguments:a}, set_network_master:{arguments:a, b, default_arguments:a, b = True}, set_owner:{arguments:a, default_arguments:a}, set_pause_mode:{arguments:a, default_arguments:a}, set_physics_process:{arguments:a, default_arguments:a}, set_physics_process_internal:{arguments:a, default_arguments:a}, set_process:{arguments:a, default_arguments:a}, set_process_input:{arguments:a, default_arguments:a}, set_process_internal:{arguments:a, default_arguments:a}, set_process_priority:{arguments:a, default_arguments:a}, set_process_unhandled_input:{arguments:a, default_arguments:a}, set_process_unhandled_key_input:{arguments:a, default_arguments:a}, set_scene_instance_load_placeholder:{arguments:a, default_arguments:a}, set_script:{arguments:a, default_arguments:a}, subtract:{arguments:a, b, default_arguments:a, b}, sum:{arguments:a, default_arguments:a}, to_string:{arguments:, default_arguments:}, tr:{arguments:a, default_arguments:a}, update_configuration_warning:{arguments:, default_arguments:}}",
"success": true
} ],
"context": "When we create two of it for the same script",
"fullname": "test_When_we_create_two_of_it_for_the_same_script",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|Object| [Node:1528] is equal to |Object| [Node:1528]",
"context": "Then we get the same double back",
"expected": "|Object| [Node:1528] is equal to |Object| [Node:1528]",
"success": true
} ],
"context": "When we call the double the second time",
"fullname": "test_When_we_call_double_a_second_time_on",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 3,
"path": "res://tests/integration/script_director.test.gd",
"source": {
"containers": [ "res://tests/integration", "res://tests" ],
"method": "",
"path": "res://tests/integration/script_director.test.gd",
"tags": [  ],
"test": ExtResource( 13 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 3
}, {
"context": "Given a Test Double",
"methods": [ {
"assertions": [ {
"actual": "|null| Null == null",
"context": "Then we get null",
"expected": "|null| Null == null",
"success": true
} ],
"context": "When we call a method that we have dummied",
"fullname": "test_When_we_call_a_method_that_we_have_dummied",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then it returns true",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we call a method that we have stubbed to return true",
"fullname": "test_When_we_call_a_method_that_we_have_stubbed_to_return_true",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|Object| [Node:1542] is equal to |Object| [Node:1542]",
"context": "Then it returns that same node",
"expected": "|Object| [Node:1542] is equal to |Object| [Node:1542]",
"success": true
} ],
"context": "When we call a method that we have stubbed to return a node",
"fullname": "test_When_we_call_a_method_that_we_have_stubbed_to_return_a_node",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 100 is equal to |int| 100",
"context": "Then it returns the default stubbed value when the arguments don't match any pattern",
"expected": "|int| 100 is equal to |int| 100",
"success": true
}, {
"actual": "|int| 1000 is equal to |int| 1000",
"context": "Then it returns the the corresponding value to the pattern the arguments matched",
"expected": "|int| 1000 is equal to |int| 1000",
"success": true
} ],
"context": "When we call a method that was stubbed to return different values based on argument patterns",
"fullname": "test_When_we_call_a_method_that_was_stubbed_to_return_different_values_based_on_argument_patterns",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|int| 9999 is equal to |int| 9999",
"context": "Then it returns the corresponding value when the pattern matches",
"expected": "|int| 9999 is equal to |int| 9999",
"success": true
} ],
"context": "When we call a method that was stubbed with an argument pattern that includes a non-primitive object",
"fullname": "test_When_we_call_a_method_that_was_stubbed_with_an_argument_pattern_that_includes_a_non_primitive_object",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 9999 is equal to |int| 9999",
"context": "Then it returns the corresponding value when the partial pattern matches",
"expected": "|int| 9999 is equal to |int| 9999",
"success": true
} ],
"context": "When we call a method that was stubbed with a partial (ie using any()) argument pattern",
"fullname": "test_When_we_call_a_method_that_was_stubbed_with_a_partial_argument_pattern",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "add was called",
"context": "Then we can see that it was called at least once",
"expected": "add was called",
"success": true
} ],
"context": "When we call a method that we are spying on",
"fullname": "test_When_we_call_a_method_that_we_are_spying_on",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "method: add was called with arguments: [10, 10]",
"context": "Then we can see that it was called with those arguments",
"expected": "method: add was called with arguments: [10, 10]",
"success": true
} ],
"context": "When we pass arguments to a method call that we are spying on",
"fullname": "test_When_we_pass_arguments_to_a_method_call_that_we_are_spying_on",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 4 is equal to |int| 4",
"context": "Then we get the correct result",
"expected": "|int| 4 is equal to |int| 4",
"success": true
} ],
"context": "When we call an add(x, y) method that we haven't directed",
"fullname": "test_When_we_call_an_add_method_that_we_have_not_directed",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 4 is equal to |int| 4",
"context": "Then it calls its super implementation by default",
"expected": "|int| 4 is equal to |int| 4",
"success": true
}, {
"actual": "|int| 9999 is equal to |int| 9999",
"context": "Then it does not call its super implementation when arguments patterns match a different return value",
"expected": "|int| 9999 is equal to |int| 9999",
"success": true
} ],
"context": "When we call a method that we stubbed to call its super implementation by default",
"fullname": "test_When_we_call_a_method_that_we_stubbed_to_call_its_super_implementation_by_default",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|int| 99 is equal to |int| 99",
"context": "Then it affects the state of the double",
"expected": "|int| 99 is equal to |int| 99",
"success": true
} ],
"context": "When we pass a funcref as a subcall",
"fullname": "test_When_we_pass_a_funcref_as_a_subcall",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|String| Jackie is equal to |String| Jackie",
"context": "Then we can double the object successfully",
"expected": "|String| Jackie is equal to |String| Jackie",
"success": true
} ],
"context": "When we pass in dependecies on direct",
"fullname": "test_When_we_pass_in_deps_on_direct",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|float| 6.283185 is equal to |float| 6.283185",
"context": "Then we can call the static methods of that inner double",
"expected": "|float| 6.283185 is equal to |float| 6.283185",
"success": true
} ],
"context": "When we add an doubled inner class to it",
"fullname": "test_When_we_add_a_doubled_inner_class_to_it",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|String| Jackie is equal to |String| Jackie",
"context": "Then we can double the object successfully",
"expected": "|String| Jackie is equal to |String| Jackie",
"success": true
} ],
"context": "When we pass in dependecies on double",
"fullname": "test_When_we_pass_in_deps_on_double",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| True is equal to |bool| True",
"context": "Then we can call it",
"expected": "|bool| True is equal to |bool| True",
"success": true
} ],
"context": "When we stubbed a keyworded method by passing in the correct keyword",
"fullname": "test_When_we_stubbed_a_keyword_method_by_passing_in_the_correct_keyword",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 99 is equal to |int| 99",
"context": "Then it returns a value",
"expected": "|int| 99 is equal to |int| 99",
"success": true
} ],
"context": "When we pass a funcref as a subcall that returns",
"fullname": "test_When_we_pass_a_funcref_as_a_subcall_that_returns_a_value",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "(1, 1) is builtin: Vector2",
"context": "Then we can call methods on it",
"expected": "(1, 1) is builtin: Vector2",
"success": true
} ],
"context": "When we double an inner class",
"fullname": "test_When_we_double_an_inner_class",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|null| Null == null",
"context": "Then we get the stubbed value back",
"expected": "|null| Null == null",
"success": true
} ],
"context": "When we stub a method of a doubled inner class",
"fullname": "test_When_we_stub_a_method_of_a_double_inner_class",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|Array| [10, 5] is equal to |Array| [10, 5]",
"context": "Then it returns a value",
"expected": "|Array| [10, 5] is equal to |Array| [10, 5]",
"success": true
} ],
"context": "When we pass an Object with a call_func function",
"fullname": "test_When_we_pass_an_object_with_callfunc_method_as_a_subcall",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 19,
"path": "res://tests/integration/test_double.test.gd",
"source": {
"containers": [ "res://tests/integration", "res://tests" ],
"method": "",
"path": "res://tests/integration/test_double.test.gd",
"tags": [  ],
"test": ExtResource( 14 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 19
} ],
1611514308: [ {
"context": "Default Args",
"methods": [ {
"assertions": [ {
"actual": "|bool| True == true",
"context": "If this method can be reached then we have doubled a script with default argument(s) properly!",
"expected": "|bool| True == true",
"success": true
} ],
"context": " default arguments of interpolate property",
"fullname": "test_default_arguments_of_interpolate_property",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 1,
"path": "res://tests/integration/default_args.test.gd",
"source": {
"containers": [ "res://tests/integration", "res://tests" ],
"method": "",
"path": "res://tests/integration/default_args.test.gd",
"tags": [  ],
"test": ExtResource( 10 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 1
}, {
"context": "Given a Boolean Assertion",
"methods": [ {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then it passes",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When calling asserts.is_true(true)",
"fullname": "test_when_calling_asserts_is_true",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| False == false",
"context": "Then it passes",
"expected": "|bool| False == false",
"success": true
} ],
"context": "When calling asserts.is_false(false)",
"fullname": "test_when_calling_asserts_is_false",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| True != false",
"context": "",
"expected": "|bool| True == false",
"success": false
} ],
"context": " intentional failure",
"fullname": "test_intentional_failure",
"passed": 0,
"success": false,
"time": 0.0,
"total": 1
} ],
"passed": 2,
"path": "res://tests/integration/boolean.test.gd",
"source": {
"containers": [ "res://tests/integration", "res://tests" ],
"method": "",
"path": "res://tests/integration/boolean.test.gd",
"tags": [  ],
"test": ExtResource( 20 ),
"yield_time": 0.0
},
"success": false,
"time_taken": 0.0,
"total": 3
}, {
"context": "Given is_on_floor",
"methods": [ {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then it can be stubbed",
"expected": "|bool| True == true",
"success": true
} ],
"context": "From a built-in KinematicBody2D2",
"fullname": "test_stubbing_is_on_floor_method_from_builtin_class2",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then it can be stubbed",
"expected": "|bool| True == true",
"success": true
} ],
"context": "From a child node of a scene without scripts",
"fullname": "test_stubbing_is_on_floor_as_child_node_with_no_script",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then it can be stubbed",
"expected": "|bool| True == true",
"success": true
} ],
"context": "From a user-defined script",
"fullname": "test_stubbing_is_on_floor_method_from_user_defined_class",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 3,
"path": "res://tests/integration/on_floor.test.gd",
"source": {
"containers": [ "res://tests/integration", "res://tests" ],
"method": "",
"path": "res://tests/integration/on_floor.test.gd",
"tags": [  ],
"test": ExtResource( 5 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 3
}, {
"context": "Given a Scene Director",
"methods": [ {
"assertions": [ {
"actual": "|int| 999 is equal to |int| 999",
"context": "Then we get the stubbed return value",
"expected": "|int| 999 is equal to |int| 999",
"success": true
} ],
"context": "When we call a method from a child node that we stubbed",
"fullname": "test_When_we_call_a_method_from_a_child_node_that_we_stubbed",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|Dictionary| {.:[Reference:1419], A:[Reference:1420], A/B:[Reference:1422], C:[Reference:1421], C/D:[Reference:1423]} is not equal to |Dictionary| {.:[Reference:1455], A:[Reference:1456], A/B:[Reference:1458], C:[Reference:1457], C/D:[Reference:1459]}",
"context": "Then they do not share resources",
"expected": "|Dictionary| {.:[Reference:1419], A:[Reference:1420], A/B:[Reference:1422], C:[Reference:1421], C/D:[Reference:1423]} != |Dictionary| {.:[Reference:1455], A:[Reference:1456], A/B:[Reference:1458], C:[Reference:1457], C/D:[Reference:1459]}",
"success": true
} ],
"context": "When we create two of it for the same scene",
"fullname": "test_When_we_create_two_of_it_for_the_same_scene",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 9999 is equal to |int| 9999",
"context": "Then we get the stubbed return value",
"expected": "|int| 9999 is equal to |int| 9999",
"success": true
} ],
"context": "When we call a method from the root node that we stubbed",
"fullname": "test_When_we_call_a_method_from_the_root_node_that_we_stubbed",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 99 is equal to |int| 99",
"context": "Then we get the stubbed return value",
"expected": "|int| 99 is equal to |int| 99",
"success": true
} ],
"context": "When we call a method from a grandchild node that we stubbed",
"fullname": "test_When_we_call_a_method_from_a_grandchild_node_that_we_stubbed",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|NodePath| A is equal to |NodePath| A",
"context": "We have the correct NodePath Set",
"expected": "|NodePath| A is equal to |NodePath| A",
"success": true
} ],
"context": "When we add it to the tree it runs",
"fullname": "test_When_we_add_it_to_the_tree_it_runs",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 5,
"path": "res://tests/integration/scene_director.test.gd",
"source": {
"containers": [ "res://tests/integration", "res://tests" ],
"method": "",
"path": "res://tests/integration/scene_director.test.gd",
"tags": [  ],
"test": ExtResource( 4 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 5
}, {
"context": "Given a Script Director",
"methods": [ {
"assertions": [ {
"actual": "[Reference:1545] is instance of class: [GDScript:1538]",
"context": "Then we get that inner class back",
"expected": "[Reference:1545] is instance of class: [GDScript:1538]",
"success": true
} ],
"context": "When we double an inner class",
"fullname": "test_When_we_double_an_inner_class",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|Object| [Node:1582] is equal to |Object| [Node:1582]",
"context": "Then we get the same double back",
"expected": "|Object| [Node:1582] is equal to |Object| [Node:1582]",
"success": true
} ],
"context": "When we call the double the second time",
"fullname": "test_When_we_call_double_a_second_time_on",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|Dictionary| {_enter_tree:{arguments:, default_arguments:}, _exit_tree:{arguments:, default_arguments:}, _get:{arguments:a, default_arguments:a}, _get_configuration_warning:{arguments:, default_arguments:}, _get_editor_description:{arguments:, default_arguments:}, _get_import_path:{arguments:, default_arguments:}, _get_property_list:{arguments:, default_arguments:}, _init:{arguments:, default_arguments:}, _input:{arguments:a, default_arguments:a}, _notification:{arguments:a, default_arguments:a}, _physics_process:{arguments:a, default_arguments:a}, _process:{arguments:a, default_arguments:a}, _ready:{arguments:, default_arguments:}, _set:{arguments:a, b, default_arguments:a, b}, _set_editor_description:{arguments:a, default_arguments:a}, _set_import_path:{arguments:a, default_arguments:a}, _to_string:{arguments:, default_arguments:}, _unhandled_input:{arguments:a, default_arguments:a}, _unhandled_key_input:{arguments:a, default_arguments:a}, add:{arguments:a, b, default_arguments:a, b}, add_child:{arguments:a, b, default_arguments:a, b = False}, add_child_below_node:{arguments:a, b, c, default_arguments:a, b, c = False}, add_to_group:{arguments:a, b, default_arguments:a, b = False}, add_user_signal:{arguments:a, b, default_arguments:a, b = []}, call:{arguments:a, default_arguments:a}, call_deferred:{arguments:a, default_arguments:a}, callv:{arguments:a, b, default_arguments:a, b}, can_process:{arguments:, default_arguments:}, can_translate_messages:{arguments:, default_arguments:}, connect:{arguments:a, b, c, d, e, default_arguments:a, b, c, d = [], e = 0}, disconnect:{arguments:a, b, c, default_arguments:a, b, c}, divide:{arguments:a, b, default_arguments:a, b}, duplicate:{arguments:a, default_arguments:a = 15}, emit_signal:{arguments:a, default_arguments:a}, find_node:{arguments:a, b, c, default_arguments:a, b = True, c = True}, find_parent:{arguments:a, default_arguments:a}, free:{arguments:, default_arguments:}, get:{arguments:a, default_arguments:a}, get_child:{arguments:a, default_arguments:a}, get_child_count:{arguments:, default_arguments:}, get_children:{arguments:, default_arguments:}, get_class:{arguments:, default_arguments:}, get_custom_multiplayer:{arguments:, default_arguments:}, get_filename:{arguments:, default_arguments:}, get_groups:{arguments:, default_arguments:}, get_incoming_connections:{arguments:, default_arguments:}, get_index:{arguments:, default_arguments:}, get_indexed:{arguments:a, default_arguments:a}, get_instance_id:{arguments:, default_arguments:}, get_meta:{arguments:a, default_arguments:a}, get_meta_list:{arguments:, default_arguments:}, get_method_list:{arguments:, default_arguments:}, get_multiplayer:{arguments:, default_arguments:}, get_name:{arguments:, default_arguments:}, get_network_master:{arguments:, default_arguments:}, get_node:{arguments:a, default_arguments:a}, get_node_and_resource:{arguments:a, default_arguments:a}, get_node_or_null:{arguments:a, default_arguments:a}, get_owner:{arguments:, default_arguments:}, get_parent:{arguments:, default_arguments:}, get_path:{arguments:, default_arguments:}, get_path_to:{arguments:a, default_arguments:a}, get_pause_mode:{arguments:, default_arguments:}, get_physics_process_delta_time:{arguments:, default_arguments:}, get_position_in_parent:{arguments:, default_arguments:}, get_process_delta_time:{arguments:, default_arguments:}, get_process_priority:{arguments:, default_arguments:}, get_property_list:{arguments:, default_arguments:}, get_scene_instance_load_placeholder:{arguments:, default_arguments:}, get_script:{arguments:, default_arguments:}, get_signal_connection_list:{arguments:a, default_arguments:a}, get_signal_list:{arguments:, default_arguments:}, get_tree:{arguments:, default_arguments:}, get_viewport:{arguments:, default_arguments:}, has_meta:{arguments:a, default_arguments:a}, has_method:{arguments:a, default_arguments:a}, has_node:{arguments:a, default_arguments:a}, has_node_and_resource:{arguments:a, default_arguments:a}, has_signal:{arguments:a, default_arguments:a}, has_user_signal:{arguments:a, default_arguments:a}, is_a_parent_of:{arguments:a, default_arguments:a}, is_blocking_signals:{arguments:, default_arguments:}, is_class:{arguments:a, default_arguments:a}, is_connected:{arguments:a, b, c, default_arguments:a, b, c}, is_displayed_folded:{arguments:, default_arguments:}, is_greater_than:{arguments:a, default_arguments:a}, is_in_group:{arguments:a, default_arguments:a}, is_inside_tree:{arguments:, default_arguments:}, is_network_master:{arguments:, default_arguments:}, is_physics_processing:{arguments:, default_arguments:}, is_physics_processing_internal:{arguments:, default_arguments:}, is_processing:{arguments:, default_arguments:}, is_processing_input:{arguments:, default_arguments:}, is_processing_internal:{arguments:, default_arguments:}, is_processing_unhandled_input:{arguments:, default_arguments:}, is_processing_unhandled_key_input:{arguments:, default_arguments:}, is_queued_for_deletion:{arguments:, default_arguments:}, math_fight:{arguments:, default_arguments:}, move_child:{arguments:a, b, default_arguments:a, b}, multiply:{arguments:a, b, default_arguments:a, b}, notification:{arguments:a, b, default_arguments:a, b = False}, pi:{arguments:, default_arguments:}, print_stray_nodes:{arguments:, default_arguments:}, print_tree:{arguments:, default_arguments:}, print_tree_pretty:{arguments:, default_arguments:}, propagate_call:{arguments:a, b, c, default_arguments:a, b = [], c = False}, propagate_notification:{arguments:a, default_arguments:a}, property_list_changed_notify:{arguments:, default_arguments:}, queue_free:{arguments:, default_arguments:}, raise:{arguments:, default_arguments:}, remove_and_skip:{arguments:, default_arguments:}, remove_child:{arguments:a, default_arguments:a}, remove_from_group:{arguments:a, default_arguments:a}, remove_meta:{arguments:a, default_arguments:a}, replace_by:{arguments:a, b, default_arguments:a, b = False}, request_ready:{arguments:, default_arguments:}, rpc:{arguments:a, default_arguments:a}, rpc_config:{arguments:a, b, default_arguments:a, b}, rpc_id:{arguments:a, b, default_arguments:a, b}, rpc_unreliable:{arguments:a, default_arguments:a}, rpc_unreliable_id:{arguments:a, b, default_arguments:a, b}, rset:{arguments:a, b, default_arguments:a, b}, rset_config:{arguments:a, b, default_arguments:a, b}, rset_id:{arguments:a, b, c, default_arguments:a, b, c}, rset_unreliable:{arguments:a, b, default_arguments:a, b}, rset_unreliable_id:{arguments:a, b, c, default_arguments:a, b, c}, set:{arguments:a, b, default_arguments:a, b}, set_block_signals:{arguments:a, default_arguments:a}, set_custom_multiplayer:{arguments:a, default_arguments:a}, set_deferred:{arguments:a, b, default_arguments:a, b}, set_display_folded:{arguments:a, default_arguments:a}, set_filename:{arguments:a, default_arguments:a}, set_indexed:{arguments:a, b, default_arguments:a, b}, set_message_translation:{arguments:a, default_arguments:a}, set_meta:{arguments:a, b, default_arguments:a, b}, set_name:{arguments:a, default_arguments:a}, set_network_master:{arguments:a, b, default_arguments:a, b = True}, set_owner:{arguments:a, default_arguments:a}, set_pause_mode:{arguments:a, default_arguments:a}, set_physics_process:{arguments:a, default_arguments:a}, set_physics_process_internal:{arguments:a, default_arguments:a}, set_process:{arguments:a, default_arguments:a}, set_process_input:{arguments:a, default_arguments:a}, set_process_internal:{arguments:a, default_arguments:a}, set_process_priority:{arguments:a, default_arguments:a}, set_process_unhandled_input:{arguments:a, default_arguments:a}, set_process_unhandled_key_input:{arguments:a, default_arguments:a}, set_scene_instance_load_placeholder:{arguments:a, default_arguments:a}, set_script:{arguments:a, default_arguments:a}, subtract:{arguments:a, b, default_arguments:a, b}, sum:{arguments:a, default_arguments:a}, to_string:{arguments:, default_arguments:}, tr:{arguments:a, default_arguments:a}, update_configuration_warning:{arguments:, default_arguments:}} is not equal to |Dictionary| {_enter_tree:{arguments:, default_arguments:}, _exit_tree:{arguments:, default_arguments:}, _get:{arguments:a, default_arguments:a}, _get_configuration_warning:{arguments:, default_arguments:}, _get_editor_description:{arguments:, default_arguments:}, _get_import_path:{arguments:, default_arguments:}, _get_property_list:{arguments:, default_arguments:}, _init:{arguments:, default_arguments:}, _input:{arguments:a, default_arguments:a}, _notification:{arguments:a, default_arguments:a}, _physics_process:{arguments:a, default_arguments:a}, _process:{arguments:a, default_arguments:a}, _ready:{arguments:, default_arguments:}, _set:{arguments:a, b, default_arguments:a, b}, _set_editor_description:{arguments:a, default_arguments:a}, _set_import_path:{arguments:a, default_arguments:a}, _to_string:{arguments:, default_arguments:}, _unhandled_input:{arguments:a, default_arguments:a}, _unhandled_key_input:{arguments:a, default_arguments:a}, add:{arguments:a, b, default_arguments:a, b}, add_child:{arguments:a, b, default_arguments:a, b = False}, add_child_below_node:{arguments:a, b, c, default_arguments:a, b, c = False}, add_to_group:{arguments:a, b, default_arguments:a, b = False}, add_user_signal:{arguments:a, b, default_arguments:a, b = []}, call:{arguments:a, default_arguments:a}, call_deferred:{arguments:a, default_arguments:a}, callv:{arguments:a, b, default_arguments:a, b}, can_process:{arguments:, default_arguments:}, can_translate_messages:{arguments:, default_arguments:}, connect:{arguments:a, b, c, d, e, default_arguments:a, b, c, d = [], e = 0}, disconnect:{arguments:a, b, c, default_arguments:a, b, c}, divide:{arguments:a, b, default_arguments:a, b}, duplicate:{arguments:a, default_arguments:a = 15}, emit_signal:{arguments:a, default_arguments:a}, find_node:{arguments:a, b, c, default_arguments:a, b = True, c = True}, find_parent:{arguments:a, default_arguments:a}, free:{arguments:, default_arguments:}, get:{arguments:a, default_arguments:a}, get_child:{arguments:a, default_arguments:a}, get_child_count:{arguments:, default_arguments:}, get_children:{arguments:, default_arguments:}, get_class:{arguments:, default_arguments:}, get_custom_multiplayer:{arguments:, default_arguments:}, get_filename:{arguments:, default_arguments:}, get_groups:{arguments:, default_arguments:}, get_incoming_connections:{arguments:, default_arguments:}, get_index:{arguments:, default_arguments:}, get_indexed:{arguments:a, default_arguments:a}, get_instance_id:{arguments:, default_arguments:}, get_meta:{arguments:a, default_arguments:a}, get_meta_list:{arguments:, default_arguments:}, get_method_list:{arguments:, default_arguments:}, get_multiplayer:{arguments:, default_arguments:}, get_name:{arguments:, default_arguments:}, get_network_master:{arguments:, default_arguments:}, get_node:{arguments:a, default_arguments:a}, get_node_and_resource:{arguments:a, default_arguments:a}, get_node_or_null:{arguments:a, default_arguments:a}, get_owner:{arguments:, default_arguments:}, get_parent:{arguments:, default_arguments:}, get_path:{arguments:, default_arguments:}, get_path_to:{arguments:a, default_arguments:a}, get_pause_mode:{arguments:, default_arguments:}, get_physics_process_delta_time:{arguments:, default_arguments:}, get_position_in_parent:{arguments:, default_arguments:}, get_process_delta_time:{arguments:, default_arguments:}, get_process_priority:{arguments:, default_arguments:}, get_property_list:{arguments:, default_arguments:}, get_scene_instance_load_placeholder:{arguments:, default_arguments:}, get_script:{arguments:, default_arguments:}, get_signal_connection_list:{arguments:a, default_arguments:a}, get_signal_list:{arguments:, default_arguments:}, get_tree:{arguments:, default_arguments:}, get_viewport:{arguments:, default_arguments:}, has_meta:{arguments:a, default_arguments:a}, has_method:{arguments:a, default_arguments:a}, has_node:{arguments:a, default_arguments:a}, has_node_and_resource:{arguments:a, default_arguments:a}, has_signal:{arguments:a, default_arguments:a}, has_user_signal:{arguments:a, default_arguments:a}, is_a_parent_of:{arguments:a, default_arguments:a}, is_blocking_signals:{arguments:, default_arguments:}, is_class:{arguments:a, default_arguments:a}, is_connected:{arguments:a, b, c, default_arguments:a, b, c}, is_displayed_folded:{arguments:, default_arguments:}, is_greater_than:{arguments:a, default_arguments:a}, is_in_group:{arguments:a, default_arguments:a}, is_inside_tree:{arguments:, default_arguments:}, is_network_master:{arguments:, default_arguments:}, is_physics_processing:{arguments:, default_arguments:}, is_physics_processing_internal:{arguments:, default_arguments:}, is_processing:{arguments:, default_arguments:}, is_processing_input:{arguments:, default_arguments:}, is_processing_internal:{arguments:, default_arguments:}, is_processing_unhandled_input:{arguments:, default_arguments:}, is_processing_unhandled_key_input:{arguments:, default_arguments:}, is_queued_for_deletion:{arguments:, default_arguments:}, math_fight:{arguments:, default_arguments:}, move_child:{arguments:a, b, default_arguments:a, b}, multiply:{arguments:a, b, default_arguments:a, b}, notification:{arguments:a, b, default_arguments:a, b = False}, pi:{arguments:, default_arguments:}, print_stray_nodes:{arguments:, default_arguments:}, print_tree:{arguments:, default_arguments:}, print_tree_pretty:{arguments:, default_arguments:}, propagate_call:{arguments:a, b, c, default_arguments:a, b = [], c = False}, propagate_notification:{arguments:a, default_arguments:a}, property_list_changed_notify:{arguments:, default_arguments:}, queue_free:{arguments:, default_arguments:}, raise:{arguments:, default_arguments:}, remove_and_skip:{arguments:, default_arguments:}, remove_child:{arguments:a, default_arguments:a}, remove_from_group:{arguments:a, default_arguments:a}, remove_meta:{arguments:a, default_arguments:a}, replace_by:{arguments:a, b, default_arguments:a, b = False}, request_ready:{arguments:, default_arguments:}, rpc:{arguments:a, default_arguments:a}, rpc_config:{arguments:a, b, default_arguments:a, b}, rpc_id:{arguments:a, b, default_arguments:a, b}, rpc_unreliable:{arguments:a, default_arguments:a}, rpc_unreliable_id:{arguments:a, b, default_arguments:a, b}, rset:{arguments:a, b, default_arguments:a, b}, rset_config:{arguments:a, b, default_arguments:a, b}, rset_id:{arguments:a, b, c, default_arguments:a, b, c}, rset_unreliable:{arguments:a, b, default_arguments:a, b}, rset_unreliable_id:{arguments:a, b, c, default_arguments:a, b, c}, set:{arguments:a, b, default_arguments:a, b}, set_block_signals:{arguments:a, default_arguments:a}, set_custom_multiplayer:{arguments:a, default_arguments:a}, set_deferred:{arguments:a, b, default_arguments:a, b}, set_display_folded:{arguments:a, default_arguments:a}, set_filename:{arguments:a, default_arguments:a}, set_indexed:{arguments:a, b, default_arguments:a, b}, set_message_translation:{arguments:a, default_arguments:a}, set_meta:{arguments:a, b, default_arguments:a, b}, set_name:{arguments:a, default_arguments:a}, set_network_master:{arguments:a, b, default_arguments:a, b = True}, set_owner:{arguments:a, default_arguments:a}, set_pause_mode:{arguments:a, default_arguments:a}, set_physics_process:{arguments:a, default_arguments:a}, set_physics_process_internal:{arguments:a, default_arguments:a}, set_process:{arguments:a, default_arguments:a}, set_process_input:{arguments:a, default_arguments:a}, set_process_internal:{arguments:a, default_arguments:a}, set_process_priority:{arguments:a, default_arguments:a}, set_process_unhandled_input:{arguments:a, default_arguments:a}, set_process_unhandled_key_input:{arguments:a, default_arguments:a}, set_scene_instance_load_placeholder:{arguments:a, default_arguments:a}, set_script:{arguments:a, default_arguments:a}, subtract:{arguments:a, b, default_arguments:a, b}, sum:{arguments:a, default_arguments:a}, to_string:{arguments:, default_arguments:}, tr:{arguments:a, default_arguments:a}, update_configuration_warning:{arguments:, default_arguments:}}",
"context": "Then they do not share resources",
"expected": "|Dictionary| {_enter_tree:{arguments:, default_arguments:}, _exit_tree:{arguments:, default_arguments:}, _get:{arguments:a, default_arguments:a}, _get_configuration_warning:{arguments:, default_arguments:}, _get_editor_description:{arguments:, default_arguments:}, _get_import_path:{arguments:, default_arguments:}, _get_property_list:{arguments:, default_arguments:}, _init:{arguments:, default_arguments:}, _input:{arguments:a, default_arguments:a}, _notification:{arguments:a, default_arguments:a}, _physics_process:{arguments:a, default_arguments:a}, _process:{arguments:a, default_arguments:a}, _ready:{arguments:, default_arguments:}, _set:{arguments:a, b, default_arguments:a, b}, _set_editor_description:{arguments:a, default_arguments:a}, _set_import_path:{arguments:a, default_arguments:a}, _to_string:{arguments:, default_arguments:}, _unhandled_input:{arguments:a, default_arguments:a}, _unhandled_key_input:{arguments:a, default_arguments:a}, add:{arguments:a, b, default_arguments:a, b}, add_child:{arguments:a, b, default_arguments:a, b = False}, add_child_below_node:{arguments:a, b, c, default_arguments:a, b, c = False}, add_to_group:{arguments:a, b, default_arguments:a, b = False}, add_user_signal:{arguments:a, b, default_arguments:a, b = []}, call:{arguments:a, default_arguments:a}, call_deferred:{arguments:a, default_arguments:a}, callv:{arguments:a, b, default_arguments:a, b}, can_process:{arguments:, default_arguments:}, can_translate_messages:{arguments:, default_arguments:}, connect:{arguments:a, b, c, d, e, default_arguments:a, b, c, d = [], e = 0}, disconnect:{arguments:a, b, c, default_arguments:a, b, c}, divide:{arguments:a, b, default_arguments:a, b}, duplicate:{arguments:a, default_arguments:a = 15}, emit_signal:{arguments:a, default_arguments:a}, find_node:{arguments:a, b, c, default_arguments:a, b = True, c = True}, find_parent:{arguments:a, default_arguments:a}, free:{arguments:, default_arguments:}, get:{arguments:a, default_arguments:a}, get_child:{arguments:a, default_arguments:a}, get_child_count:{arguments:, default_arguments:}, get_children:{arguments:, default_arguments:}, get_class:{arguments:, default_arguments:}, get_custom_multiplayer:{arguments:, default_arguments:}, get_filename:{arguments:, default_arguments:}, get_groups:{arguments:, default_arguments:}, get_incoming_connections:{arguments:, default_arguments:}, get_index:{arguments:, default_arguments:}, get_indexed:{arguments:a, default_arguments:a}, get_instance_id:{arguments:, default_arguments:}, get_meta:{arguments:a, default_arguments:a}, get_meta_list:{arguments:, default_arguments:}, get_method_list:{arguments:, default_arguments:}, get_multiplayer:{arguments:, default_arguments:}, get_name:{arguments:, default_arguments:}, get_network_master:{arguments:, default_arguments:}, get_node:{arguments:a, default_arguments:a}, get_node_and_resource:{arguments:a, default_arguments:a}, get_node_or_null:{arguments:a, default_arguments:a}, get_owner:{arguments:, default_arguments:}, get_parent:{arguments:, default_arguments:}, get_path:{arguments:, default_arguments:}, get_path_to:{arguments:a, default_arguments:a}, get_pause_mode:{arguments:, default_arguments:}, get_physics_process_delta_time:{arguments:, default_arguments:}, get_position_in_parent:{arguments:, default_arguments:}, get_process_delta_time:{arguments:, default_arguments:}, get_process_priority:{arguments:, default_arguments:}, get_property_list:{arguments:, default_arguments:}, get_scene_instance_load_placeholder:{arguments:, default_arguments:}, get_script:{arguments:, default_arguments:}, get_signal_connection_list:{arguments:a, default_arguments:a}, get_signal_list:{arguments:, default_arguments:}, get_tree:{arguments:, default_arguments:}, get_viewport:{arguments:, default_arguments:}, has_meta:{arguments:a, default_arguments:a}, has_method:{arguments:a, default_arguments:a}, has_node:{arguments:a, default_arguments:a}, has_node_and_resource:{arguments:a, default_arguments:a}, has_signal:{arguments:a, default_arguments:a}, has_user_signal:{arguments:a, default_arguments:a}, is_a_parent_of:{arguments:a, default_arguments:a}, is_blocking_signals:{arguments:, default_arguments:}, is_class:{arguments:a, default_arguments:a}, is_connected:{arguments:a, b, c, default_arguments:a, b, c}, is_displayed_folded:{arguments:, default_arguments:}, is_greater_than:{arguments:a, default_arguments:a}, is_in_group:{arguments:a, default_arguments:a}, is_inside_tree:{arguments:, default_arguments:}, is_network_master:{arguments:, default_arguments:}, is_physics_processing:{arguments:, default_arguments:}, is_physics_processing_internal:{arguments:, default_arguments:}, is_processing:{arguments:, default_arguments:}, is_processing_input:{arguments:, default_arguments:}, is_processing_internal:{arguments:, default_arguments:}, is_processing_unhandled_input:{arguments:, default_arguments:}, is_processing_unhandled_key_input:{arguments:, default_arguments:}, is_queued_for_deletion:{arguments:, default_arguments:}, math_fight:{arguments:, default_arguments:}, move_child:{arguments:a, b, default_arguments:a, b}, multiply:{arguments:a, b, default_arguments:a, b}, notification:{arguments:a, b, default_arguments:a, b = False}, pi:{arguments:, default_arguments:}, print_stray_nodes:{arguments:, default_arguments:}, print_tree:{arguments:, default_arguments:}, print_tree_pretty:{arguments:, default_arguments:}, propagate_call:{arguments:a, b, c, default_arguments:a, b = [], c = False}, propagate_notification:{arguments:a, default_arguments:a}, property_list_changed_notify:{arguments:, default_arguments:}, queue_free:{arguments:, default_arguments:}, raise:{arguments:, default_arguments:}, remove_and_skip:{arguments:, default_arguments:}, remove_child:{arguments:a, default_arguments:a}, remove_from_group:{arguments:a, default_arguments:a}, remove_meta:{arguments:a, default_arguments:a}, replace_by:{arguments:a, b, default_arguments:a, b = False}, request_ready:{arguments:, default_arguments:}, rpc:{arguments:a, default_arguments:a}, rpc_config:{arguments:a, b, default_arguments:a, b}, rpc_id:{arguments:a, b, default_arguments:a, b}, rpc_unreliable:{arguments:a, default_arguments:a}, rpc_unreliable_id:{arguments:a, b, default_arguments:a, b}, rset:{arguments:a, b, default_arguments:a, b}, rset_config:{arguments:a, b, default_arguments:a, b}, rset_id:{arguments:a, b, c, default_arguments:a, b, c}, rset_unreliable:{arguments:a, b, default_arguments:a, b}, rset_unreliable_id:{arguments:a, b, c, default_arguments:a, b, c}, set:{arguments:a, b, default_arguments:a, b}, set_block_signals:{arguments:a, default_arguments:a}, set_custom_multiplayer:{arguments:a, default_arguments:a}, set_deferred:{arguments:a, b, default_arguments:a, b}, set_display_folded:{arguments:a, default_arguments:a}, set_filename:{arguments:a, default_arguments:a}, set_indexed:{arguments:a, b, default_arguments:a, b}, set_message_translation:{arguments:a, default_arguments:a}, set_meta:{arguments:a, b, default_arguments:a, b}, set_name:{arguments:a, default_arguments:a}, set_network_master:{arguments:a, b, default_arguments:a, b = True}, set_owner:{arguments:a, default_arguments:a}, set_pause_mode:{arguments:a, default_arguments:a}, set_physics_process:{arguments:a, default_arguments:a}, set_physics_process_internal:{arguments:a, default_arguments:a}, set_process:{arguments:a, default_arguments:a}, set_process_input:{arguments:a, default_arguments:a}, set_process_internal:{arguments:a, default_arguments:a}, set_process_priority:{arguments:a, default_arguments:a}, set_process_unhandled_input:{arguments:a, default_arguments:a}, set_process_unhandled_key_input:{arguments:a, default_arguments:a}, set_scene_instance_load_placeholder:{arguments:a, default_arguments:a}, set_script:{arguments:a, default_arguments:a}, subtract:{arguments:a, b, default_arguments:a, b}, sum:{arguments:a, default_arguments:a}, to_string:{arguments:, default_arguments:}, tr:{arguments:a, default_arguments:a}, update_configuration_warning:{arguments:, default_arguments:}} != |Dictionary| {_enter_tree:{arguments:, default_arguments:}, _exit_tree:{arguments:, default_arguments:}, _get:{arguments:a, default_arguments:a}, _get_configuration_warning:{arguments:, default_arguments:}, _get_editor_description:{arguments:, default_arguments:}, _get_import_path:{arguments:, default_arguments:}, _get_property_list:{arguments:, default_arguments:}, _init:{arguments:, default_arguments:}, _input:{arguments:a, default_arguments:a}, _notification:{arguments:a, default_arguments:a}, _physics_process:{arguments:a, default_arguments:a}, _process:{arguments:a, default_arguments:a}, _ready:{arguments:, default_arguments:}, _set:{arguments:a, b, default_arguments:a, b}, _set_editor_description:{arguments:a, default_arguments:a}, _set_import_path:{arguments:a, default_arguments:a}, _to_string:{arguments:, default_arguments:}, _unhandled_input:{arguments:a, default_arguments:a}, _unhandled_key_input:{arguments:a, default_arguments:a}, add:{arguments:a, b, default_arguments:a, b}, add_child:{arguments:a, b, default_arguments:a, b = False}, add_child_below_node:{arguments:a, b, c, default_arguments:a, b, c = False}, add_to_group:{arguments:a, b, default_arguments:a, b = False}, add_user_signal:{arguments:a, b, default_arguments:a, b = []}, call:{arguments:a, default_arguments:a}, call_deferred:{arguments:a, default_arguments:a}, callv:{arguments:a, b, default_arguments:a, b}, can_process:{arguments:, default_arguments:}, can_translate_messages:{arguments:, default_arguments:}, connect:{arguments:a, b, c, d, e, default_arguments:a, b, c, d = [], e = 0}, disconnect:{arguments:a, b, c, default_arguments:a, b, c}, divide:{arguments:a, b, default_arguments:a, b}, duplicate:{arguments:a, default_arguments:a = 15}, emit_signal:{arguments:a, default_arguments:a}, find_node:{arguments:a, b, c, default_arguments:a, b = True, c = True}, find_parent:{arguments:a, default_arguments:a}, free:{arguments:, default_arguments:}, get:{arguments:a, default_arguments:a}, get_child:{arguments:a, default_arguments:a}, get_child_count:{arguments:, default_arguments:}, get_children:{arguments:, default_arguments:}, get_class:{arguments:, default_arguments:}, get_custom_multiplayer:{arguments:, default_arguments:}, get_filename:{arguments:, default_arguments:}, get_groups:{arguments:, default_arguments:}, get_incoming_connections:{arguments:, default_arguments:}, get_index:{arguments:, default_arguments:}, get_indexed:{arguments:a, default_arguments:a}, get_instance_id:{arguments:, default_arguments:}, get_meta:{arguments:a, default_arguments:a}, get_meta_list:{arguments:, default_arguments:}, get_method_list:{arguments:, default_arguments:}, get_multiplayer:{arguments:, default_arguments:}, get_name:{arguments:, default_arguments:}, get_network_master:{arguments:, default_arguments:}, get_node:{arguments:a, default_arguments:a}, get_node_and_resource:{arguments:a, default_arguments:a}, get_node_or_null:{arguments:a, default_arguments:a}, get_owner:{arguments:, default_arguments:}, get_parent:{arguments:, default_arguments:}, get_path:{arguments:, default_arguments:}, get_path_to:{arguments:a, default_arguments:a}, get_pause_mode:{arguments:, default_arguments:}, get_physics_process_delta_time:{arguments:, default_arguments:}, get_position_in_parent:{arguments:, default_arguments:}, get_process_delta_time:{arguments:, default_arguments:}, get_process_priority:{arguments:, default_arguments:}, get_property_list:{arguments:, default_arguments:}, get_scene_instance_load_placeholder:{arguments:, default_arguments:}, get_script:{arguments:, default_arguments:}, get_signal_connection_list:{arguments:a, default_arguments:a}, get_signal_list:{arguments:, default_arguments:}, get_tree:{arguments:, default_arguments:}, get_viewport:{arguments:, default_arguments:}, has_meta:{arguments:a, default_arguments:a}, has_method:{arguments:a, default_arguments:a}, has_node:{arguments:a, default_arguments:a}, has_node_and_resource:{arguments:a, default_arguments:a}, has_signal:{arguments:a, default_arguments:a}, has_user_signal:{arguments:a, default_arguments:a}, is_a_parent_of:{arguments:a, default_arguments:a}, is_blocking_signals:{arguments:, default_arguments:}, is_class:{arguments:a, default_arguments:a}, is_connected:{arguments:a, b, c, default_arguments:a, b, c}, is_displayed_folded:{arguments:, default_arguments:}, is_greater_than:{arguments:a, default_arguments:a}, is_in_group:{arguments:a, default_arguments:a}, is_inside_tree:{arguments:, default_arguments:}, is_network_master:{arguments:, default_arguments:}, is_physics_processing:{arguments:, default_arguments:}, is_physics_processing_internal:{arguments:, default_arguments:}, is_processing:{arguments:, default_arguments:}, is_processing_input:{arguments:, default_arguments:}, is_processing_internal:{arguments:, default_arguments:}, is_processing_unhandled_input:{arguments:, default_arguments:}, is_processing_unhandled_key_input:{arguments:, default_arguments:}, is_queued_for_deletion:{arguments:, default_arguments:}, math_fight:{arguments:, default_arguments:}, move_child:{arguments:a, b, default_arguments:a, b}, multiply:{arguments:a, b, default_arguments:a, b}, notification:{arguments:a, b, default_arguments:a, b = False}, pi:{arguments:, default_arguments:}, print_stray_nodes:{arguments:, default_arguments:}, print_tree:{arguments:, default_arguments:}, print_tree_pretty:{arguments:, default_arguments:}, propagate_call:{arguments:a, b, c, default_arguments:a, b = [], c = False}, propagate_notification:{arguments:a, default_arguments:a}, property_list_changed_notify:{arguments:, default_arguments:}, queue_free:{arguments:, default_arguments:}, raise:{arguments:, default_arguments:}, remove_and_skip:{arguments:, default_arguments:}, remove_child:{arguments:a, default_arguments:a}, remove_from_group:{arguments:a, default_arguments:a}, remove_meta:{arguments:a, default_arguments:a}, replace_by:{arguments:a, b, default_arguments:a, b = False}, request_ready:{arguments:, default_arguments:}, rpc:{arguments:a, default_arguments:a}, rpc_config:{arguments:a, b, default_arguments:a, b}, rpc_id:{arguments:a, b, default_arguments:a, b}, rpc_unreliable:{arguments:a, default_arguments:a}, rpc_unreliable_id:{arguments:a, b, default_arguments:a, b}, rset:{arguments:a, b, default_arguments:a, b}, rset_config:{arguments:a, b, default_arguments:a, b}, rset_id:{arguments:a, b, c, default_arguments:a, b, c}, rset_unreliable:{arguments:a, b, default_arguments:a, b}, rset_unreliable_id:{arguments:a, b, c, default_arguments:a, b, c}, set:{arguments:a, b, default_arguments:a, b}, set_block_signals:{arguments:a, default_arguments:a}, set_custom_multiplayer:{arguments:a, default_arguments:a}, set_deferred:{arguments:a, b, default_arguments:a, b}, set_display_folded:{arguments:a, default_arguments:a}, set_filename:{arguments:a, default_arguments:a}, set_indexed:{arguments:a, b, default_arguments:a, b}, set_message_translation:{arguments:a, default_arguments:a}, set_meta:{arguments:a, b, default_arguments:a, b}, set_name:{arguments:a, default_arguments:a}, set_network_master:{arguments:a, b, default_arguments:a, b = True}, set_owner:{arguments:a, default_arguments:a}, set_pause_mode:{arguments:a, default_arguments:a}, set_physics_process:{arguments:a, default_arguments:a}, set_physics_process_internal:{arguments:a, default_arguments:a}, set_process:{arguments:a, default_arguments:a}, set_process_input:{arguments:a, default_arguments:a}, set_process_internal:{arguments:a, default_arguments:a}, set_process_priority:{arguments:a, default_arguments:a}, set_process_unhandled_input:{arguments:a, default_arguments:a}, set_process_unhandled_key_input:{arguments:a, default_arguments:a}, set_scene_instance_load_placeholder:{arguments:a, default_arguments:a}, set_script:{arguments:a, default_arguments:a}, subtract:{arguments:a, b, default_arguments:a, b}, sum:{arguments:a, default_arguments:a}, to_string:{arguments:, default_arguments:}, tr:{arguments:a, default_arguments:a}, update_configuration_warning:{arguments:, default_arguments:}}",
"success": true
} ],
"context": "When we create two of it for the same script",
"fullname": "test_When_we_create_two_of_it_for_the_same_script",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 3,
"path": "res://tests/integration/script_director.test.gd",
"source": {
"containers": [ "res://tests/integration", "res://tests" ],
"method": "",
"path": "res://tests/integration/script_director.test.gd",
"tags": [  ],
"test": ExtResource( 13 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 3
}, {
"context": "Given a Boolean Assertion",
"methods": [ {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then it passes",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When calling asserts.is_true(true)",
"fullname": "test_when_calling_asserts_is_true",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| False == false",
"context": "Then it passes",
"expected": "|bool| False == false",
"success": true
} ],
"context": "When calling asserts.is_false(false)",
"fullname": "test_when_calling_asserts_is_false",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| True != false",
"context": "",
"expected": "|bool| True == false",
"success": false
} ],
"context": " intentional failure",
"fullname": "test_intentional_failure",
"passed": 0,
"success": false,
"time": 0.0,
"total": 1
} ],
"passed": 2,
"path": "res://tests/unit/boolean.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/boolean.test.gd",
"tags": [  ],
"test": ExtResource( 11 ),
"yield_time": 0.0
},
"success": false,
"time_taken": 0.0,
"total": 3
}, {
"context": "Given an Equality Assertion",
"methods": [ {
"assertions": [ {
"actual": "|int| 2 is greater than |int| 1",
"context": "Then it passes",
"expected": "|int| 2 is greater than |int| 1",
"success": true
} ],
"context": "When calling asserts.is_greater_than(2, 1)",
"fullname": "test_when_calling_is_greater_than",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 1 is equal to |int| 1",
"context": "Then it passes",
"expected": "|int| 1 is equal to |int| 1",
"success": true
} ],
"context": "When calling asserts.is_equal(1, 1)",
"fullname": "test_when_calling_is_equal",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 1 is less than |int| 2",
"context": "Then it passes",
"expected": "|int| 1 is less than |int| 2",
"success": true
} ],
"context": "When calling asserts.is_less_than(2, 1)",
"fullname": "test_when_calling_is_less_than",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 2 is equal or greater |int| 1",
"context": "Then it passes",
"expected": "|int| 2 is equal or greater |int| 1",
"success": true
} ],
"context": "When calling asserts.is_equal_or_greater_than(2, 1)",
"fullname": "test_when_calling_is_equal_or_greater_than",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 1 is equal or greater |int| 1",
"context": "Then it passes",
"expected": "|int| 1 is equal or greater |int| 1",
"success": true
} ],
"context": "When calling asserts.is_equal_or_greater_than(1, 1)",
"fullname": "test_when_calling_is_equal_or_greater_than_with_equal_values",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 1 is equal or less than |int| 1",
"context": "Then it passes!",
"expected": "|int| 1 is equal or less than |int| 1",
"success": true
} ],
"context": "When calling asserts.is_equal_or_less_than(1, 1)",
"fullname": "test_when_calling_is_equal_or_less_than_with_equal_values",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 5 is not equal to |int| 6",
"context": "Then it passes",
"expected": "|int| 5 != |int| 6",
"success": true
} ],
"context": "When callign asserts.is_not_equal(5, 6)",
"fullname": "test_when_calling_is_not_equal",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 7,
"path": "res://tests/unit/equality.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/equality.test.gd",
"tags": [  ],
"test": ExtResource( 8 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 7
}, {
"context": "Given A File Assertion",
"methods": [ {
"assertions": [ {
"actual": "res://tests/unit/file.test.gd exists",
"context": "Then it passes",
"expected": "res://tests/unit/file.test.gd exists",
"success": true
} ],
"context": "When calling asserts.file_exists when the file is this suite",
"fullname": "test_when_calling_file_exists_when_file_is_self",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": " does not exist",
"context": "Then it passes",
"expected": " does not exist",
"success": true
} ],
"context": "When calling asserts file does not exist when path is empty",
"fullname": "test_when_calling_file_does_not_exist_when_path_is_empty",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "res://somefile.gd does not exist",
"context": "Then it passes",
"expected": "res://somefile.gd does not exist",
"success": true
} ],
"context": "When calling asserts.file_does_not_exist when there is no file",
"fullname": "test_when_calling_file_does_not_exist_when_there_is_no_file",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 3,
"path": "res://tests/unit/file.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/file.test.gd",
"tags": [  ],
"test": ExtResource( 3 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 3
}, {
"context": "Given a Test Double",
"methods": [ {
"assertions": [ {
"actual": "|int| 4 is equal to |int| 4",
"context": "Then it calls its super implementation by default",
"expected": "|int| 4 is equal to |int| 4",
"success": true
}, {
"actual": "|int| 9999 is equal to |int| 9999",
"context": "Then it does not call its super implementation when arguments patterns match a different return value",
"expected": "|int| 9999 is equal to |int| 9999",
"success": true
} ],
"context": "When we call a method that we stubbed to call its super implementation by default",
"fullname": "test_When_we_call_a_method_that_we_stubbed_to_call_its_super_implementation_by_default",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|float| 6.283185 is equal to |float| 6.283185",
"context": "Then we can call the static methods of that inner double",
"expected": "|float| 6.283185 is equal to |float| 6.283185",
"success": true
} ],
"context": "When we add an doubled inner class to it",
"fullname": "test_When_we_add_a_doubled_inner_class_to_it",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| True is equal to |bool| True",
"context": "Then we can call it",
"expected": "|bool| True is equal to |bool| True",
"success": true
} ],
"context": "When we stubbed a keyworded method by passing in the correct keyword",
"fullname": "test_When_we_stubbed_a_keyword_method_by_passing_in_the_correct_keyword",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|Array| [10, 5] is equal to |Array| [10, 5]",
"context": "Then it returns a value",
"expected": "|Array| [10, 5] is equal to |Array| [10, 5]",
"success": true
} ],
"context": "When we pass an Object with a call_func function",
"fullname": "test_When_we_pass_an_object_with_callfunc_method_as_a_subcall",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "(1, 1) is builtin: Vector2",
"context": "Then we can call methods on it",
"expected": "(1, 1) is builtin: Vector2",
"success": true
} ],
"context": "When we double an inner class",
"fullname": "test_When_we_double_an_inner_class",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 9999 is equal to |int| 9999",
"context": "Then it returns the corresponding value when the partial pattern matches",
"expected": "|int| 9999 is equal to |int| 9999",
"success": true
} ],
"context": "When we call a method that was stubbed with a partial (ie using any()) argument pattern",
"fullname": "test_When_we_call_a_method_that_was_stubbed_with_a_partial_argument_pattern",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 4 is equal to |int| 4",
"context": "Then we get the correct result",
"expected": "|int| 4 is equal to |int| 4",
"success": true
} ],
"context": "When we call an add(x, y) method that we haven't directed",
"fullname": "test_When_we_call_an_add_method_that_we_have_not_directed",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|null| Null == null",
"context": "Then we get the stubbed value back",
"expected": "|null| Null == null",
"success": true
} ],
"context": "When we stub a method of a doubled inner class",
"fullname": "test_When_we_stub_a_method_of_a_double_inner_class",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|Object| [Node:1657] is equal to |Object| [Node:1657]",
"context": "Then it returns that same node",
"expected": "|Object| [Node:1657] is equal to |Object| [Node:1657]",
"success": true
} ],
"context": "When we call a method that we have stubbed to return a node",
"fullname": "test_When_we_call_a_method_that_we_have_stubbed_to_return_a_node",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|String| Jackie is equal to |String| Jackie",
"context": "Then we can double the object successfully",
"expected": "|String| Jackie is equal to |String| Jackie",
"success": true
} ],
"context": "When we pass in dependecies on double",
"fullname": "test_When_we_pass_in_deps_on_double",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|null| Null == null",
"context": "Then we get null",
"expected": "|null| Null == null",
"success": true
} ],
"context": "When we call a method that we have dummied",
"fullname": "test_When_we_call_a_method_that_we_have_dummied",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then it returns true",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we call a method that we have stubbed to return true",
"fullname": "test_When_we_call_a_method_that_we_have_stubbed_to_return_true",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 9999 is equal to |int| 9999",
"context": "Then it returns the corresponding value when the pattern matches",
"expected": "|int| 9999 is equal to |int| 9999",
"success": true
} ],
"context": "When we call a method that was stubbed with an argument pattern that includes a non-primitive object",
"fullname": "test_When_we_call_a_method_that_was_stubbed_with_an_argument_pattern_that_includes_a_non_primitive_object",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 100 is equal to |int| 100",
"context": "Then it returns the default stubbed value when the arguments don't match any pattern",
"expected": "|int| 100 is equal to |int| 100",
"success": true
}, {
"actual": "|int| 1000 is equal to |int| 1000",
"context": "Then it returns the the corresponding value to the pattern the arguments matched",
"expected": "|int| 1000 is equal to |int| 1000",
"success": true
} ],
"context": "When we call a method that was stubbed to return different values based on argument patterns",
"fullname": "test_When_we_call_a_method_that_was_stubbed_to_return_different_values_based_on_argument_patterns",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "add was called",
"context": "Then we can see that it was called at least once",
"expected": "add was called",
"success": true
} ],
"context": "When we call a method that we are spying on",
"fullname": "test_When_we_call_a_method_that_we_are_spying_on",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|String| Jackie is equal to |String| Jackie",
"context": "Then we can double the object successfully",
"expected": "|String| Jackie is equal to |String| Jackie",
"success": true
} ],
"context": "When we pass in dependecies on direct",
"fullname": "test_When_we_pass_in_deps_on_direct",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 99 is equal to |int| 99",
"context": "Then it affects the state of the double",
"expected": "|int| 99 is equal to |int| 99",
"success": true
} ],
"context": "When we pass a funcref as a subcall",
"fullname": "test_When_we_pass_a_funcref_as_a_subcall",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 99 is equal to |int| 99",
"context": "Then it returns a value",
"expected": "|int| 99 is equal to |int| 99",
"success": true
} ],
"context": "When we pass a funcref as a subcall that returns",
"fullname": "test_When_we_pass_a_funcref_as_a_subcall_that_returns_a_value",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "method: add was called with arguments: [10, 10]",
"context": "Then we can see that it was called with those arguments",
"expected": "method: add was called with arguments: [10, 10]",
"success": true
} ],
"context": "When we pass arguments to a method call that we are spying on",
"fullname": "test_When_we_pass_arguments_to_a_method_call_that_we_are_spying_on",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 19,
"path": "res://tests/integration/test_double.test.gd",
"source": {
"containers": [ "res://tests/integration", "res://tests" ],
"method": "",
"path": "res://tests/integration/test_double.test.gd",
"tags": [  ],
"test": ExtResource( 14 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 19
}, {
"context": "Given an Is Instance of class/type Assertion",
"methods": [ {
"assertions": [ {
"actual": "|Array| [] != null",
"context": "array is not null",
"expected": "|Array| [] != null",
"success": true
}, {
"actual": "[] is builtin: Array",
"context": "Then it passes",
"expected": "[] is builtin: Array",
"success": true
} ],
"context": "When calling asserts.is_Array(array: Array)",
"fullname": "test_when_calling_is_Array",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "True is builtin: bool",
"context": "Then it passes",
"expected": "True is builtin: bool",
"success": true
} ],
"context": "When calling asserts.is_bool(true)",
"fullname": "test_when_calling_is_bool",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|AABB| 0, 0, 0 - 0, 0, 0 != null",
"context": "AABB is not null",
"expected": "|AABB| 0, 0, 0 - 0, 0, 0 != null",
"success": true
}, {
"actual": "0, 0, 0 - 0, 0, 0 is builtin: AABB",
"context": "Then it passes",
"expected": "0, 0, 0 - 0, 0, 0 is builtin: AABB",
"success": true
} ],
"context": "When calling asserts.is_AABB(aabb: AABB)",
"fullname": "test_when_calling_is_AABB",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "1 is builtin: int",
"context": "Then it passes",
"expected": "1 is builtin: int",
"success": true
} ],
"context": "When callign asserts.is_int(1)",
"fullname": "test_when_calling_is_int",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "1 is builtin: float",
"context": "Then it passes",
"expected": "1 is builtin: float",
"success": true
} ],
"context": "When calling asserts.is_float(1.0)",
"fullname": "test_when_calling_is_float",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|NodePath| . != null",
"context": "@'Parent/Child' is not null",
"expected": "|NodePath| . != null",
"success": true
}, {
"actual": ". is builtin: NodePath",
"context": "Then it passes",
"expected": ". is builtin: NodePath",
"success": true
} ],
"context": "When calling asserts.is_NodePath(@'Parent/Child')",
"fullname": "test_when_calling_is_NodePath",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|Basis| ((1, 0, 0), (0, 1, 0), (0, 0, 1)) != null",
"context": "basis is not null",
"expected": "|Basis| ((1, 0, 0), (0, 1, 0), (0, 0, 1)) != null",
"success": true
}, {
"actual": "((1, 0, 0), (0, 1, 0), (0, 0, 1)) is builtin: Basis",
"context": "Then it passes",
"expected": "((1, 0, 0), (0, 1, 0), (0, 0, 1)) is builtin: Basis",
"success": true
} ],
"context": "When calling asserts.is_basis(basis: Basis",
"fullname": "test_when_calling_is_Basis",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|Plane| 0, 0, 0, 0 != null",
"context": "plane is not null",
"expected": "|Plane| 0, 0, 0, 0 != null",
"success": true
}, {
"actual": "0, 0, 0, 0 is builtin: Plane",
"context": "then it passes",
"expected": "0, 0, 0, 0 is builtin: Plane",
"success": true
} ],
"context": "When calling asserts.is_Plane(plane: Plane())",
"fullname": "test_when_calling_is_Plane",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|PoolColorArray| [PoolColorArray] != null",
"context": "colors is not null",
"expected": "|PoolColorArray| [PoolColorArray] != null",
"success": true
}, {
"actual": "[PoolColorArray] is builtin: PoolColorArray",
"context": "Then it passes",
"expected": "[PoolColorArray] is builtin: PoolColorArray",
"success": true
} ],
"context": "When calling asserts.is_PoolColorArray(colors: PoolColorArray)",
"fullname": "test_when_calling_is_PoolColorArray",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|PoolIntArray| [] != null",
"context": "ints is not null",
"expected": "|PoolIntArray| [] != null",
"success": true
}, {
"actual": "[] is builtin: PoolIntArray",
"context": "Then it passes",
"expected": "[] is builtin: PoolIntArray",
"success": true
} ],
"context": "When calling asserts.is_PoolIntArray(ints: PoolIntArray)",
"fullname": "test_when_calling_is_PoolIntArray",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|PoolRealArray| [] != null",
"context": "reals is not null",
"expected": "|PoolRealArray| [] != null",
"success": true
}, {
"actual": "[] is builtin: PoolRealArray",
"context": "Then it passes",
"expected": "[] is builtin: PoolRealArray",
"success": true
} ],
"context": "When calling is asserts.is_PoolRealArray(reals: PoolRealArray)",
"fullname": "test_when_calling_is_PoolRealArray",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|Color| 0,0,0,1 != null",
"context": "color is not null",
"expected": "|Color| 0,0,0,1 != null",
"success": true
}, {
"actual": "0,0,0,1 is builtin: Color",
"context": "Then it passes",
"expected": "0,0,0,1 is builtin: Color",
"success": true
} ],
"context": "When calling asserts.is_color(color: Color)",
"fullname": "test_when_calling_is_Color",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|PoolVector2Array| [] != null",
"context": "vec2s is not null",
"expected": "|PoolVector2Array| [] != null",
"success": true
}, {
"actual": "[] is builtin: PoolVector2Array",
"context": "Then it passes",
"expected": "[] is builtin: PoolVector2Array",
"success": true
} ],
"context": "When calling is asserts.is_PoolVector2Array(vec2s: PoolVector2Array)",
"fullname": "test_when_calling_is_PoolVector2Array",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|PoolVector3Array| [] != null",
"context": "vec3s is not null",
"expected": "|PoolVector3Array| [] != null",
"success": true
}, {
"actual": "[] is builtin: PoolVector3Array",
"context": "Then it passes",
"expected": "[] is builtin: PoolVector3Array",
"success": true
} ],
"context": "When calling is asserts.is_PoolVector3Array(vec3s: PoolVector3Array)",
"fullname": "test_when_calling_is_PoolVector3Array",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|Quat| (0, 0, 0, 1) != null",
"context": "quat is not null",
"expected": "|Quat| (0, 0, 0, 1) != null",
"success": true
}, {
"actual": "(0, 0, 0, 1) is builtin: Quat",
"context": "Then it passes",
"expected": "(0, 0, 0, 1) is builtin: Quat",
"success": true
} ],
"context": "When calling asserts.is_Quat(quat: Quat)",
"fullname": "test_when_calling_is_Quat",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|Rect2| (0, 0, 0, 0) != null",
"context": "rect2 is not null",
"expected": "|Rect2| (0, 0, 0, 0) != null",
"success": true
}, {
"actual": "(0, 0, 0, 0) is builtin: Rect2",
"context": "Then it passes",
"expected": "(0, 0, 0, 0) is builtin: Rect2",
"success": true
} ],
"context": "When calling asserts.is_Rect2(rect2: Rect2)",
"fullname": "test_when_calling_is_Rect2",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|PoolStringArray| [] != null",
"context": "strs is not null",
"expected": "|PoolStringArray| [] != null",
"success": true
}, {
"actual": "[] is builtin: PoolStringArray",
"context": "Then it passes",
"expected": "[] is builtin: PoolStringArray",
"success": true
} ],
"context": "When calling is asserts.is_PoolStringArray(strs: PoolStringArray)",
"fullname": "test_when_calling_is_PoolStringArray",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "{} is builtin: Dictionary",
"context": "Then it passes",
"expected": "{} is builtin: Dictionary",
"success": true
} ],
"context": "When calling asserts.is_Dictionary({})",
"fullname": "test_when_calling_is_Dictionary",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|Object| [Node:1778] != null",
"context": "node is not null",
"expected": "|Object| [Node:1778] != null",
"success": true
}, {
"actual": "[Node:1778] is builtin: Object",
"context": "An instance of node is an Object",
"expected": "[Node:1778] is builtin: Object",
"success": true
} ],
"context": "When calling is asserts.object(node: Node)",
"fullname": "test_when_calling_is_object",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|PoolByteArray| [PoolByteArray] != null",
"context": "bytes is not null",
"expected": "|PoolByteArray| [PoolByteArray] != null",
"success": true
}, {
"actual": "[PoolByteArray] is builtin: PoolByteArray",
"context": "Then it passes",
"expected": "[PoolByteArray] is builtin: PoolByteArray",
"success": true
} ],
"context": "When calling asserts.is_PoolByteArray(bytes: PoolByteArray)",
"fullname": "test_when_calling_is_PoolByteArray",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|Transform| 1, 0, 0, 0, 1, 0, 0, 0, 1 - 0, 0, 0 != null",
"context": "transform is not null",
"expected": "|Transform| 1, 0, 0, 0, 1, 0, 0, 0, 1 - 0, 0, 0 != null",
"success": true
}, {
"actual": "1, 0, 0, 0, 1, 0, 0, 0, 1 - 0, 0, 0 is builtin: Transform",
"context": "Then it passes",
"expected": "1, 0, 0, 0, 1, 0, 0, 0, 1 - 0, 0, 0 is builtin: Transform",
"success": true
} ],
"context": "When calling asserts.is_Transform(transform: Transform)",
"fullname": "test_when_calling_is_Transform",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|Vector2| (0, 0) != null",
"context": "vec2 is not null",
"expected": "|Vector2| (0, 0) != null",
"success": true
}, {
"actual": "(0, 0) is builtin: Vector2",
"context": "Then it passes",
"expected": "(0, 0) is builtin: Vector2",
"success": true
} ],
"context": "When calling asserts.is_Vector2(vec2)",
"fullname": "test_when_calling_is_Vector2",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|String|  != null",
"context": "strs is not null",
"expected": "|String|  != null",
"success": true
}, {
"actual": " is builtin: String",
"context": "Then it passes",
"expected": " is builtin: String",
"success": true
} ],
"context": "When calling asserts.is_string(strs: String)",
"fullname": "test_when_calling_is_string",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|Vector3| (0, 0, 0) != null",
"context": "vec3 is not null",
"expected": "|Vector3| (0, 0, 0) != null",
"success": true
}, {
"actual": "(0, 0, 0) is builtin: Vector3",
"context": "Then it passes",
"expected": "(0, 0, 0) is builtin: Vector3",
"success": true
} ],
"context": "When calling asserts.is_Vector3(vec3: Vector3",
"fullname": "test_when_calling_is_Vector3",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|Transform2D| ((1, 0), (0, 1), (0, 0)) != null",
"context": "transform2D is not null",
"expected": "|Transform2D| ((1, 0), (0, 1), (0, 0)) != null",
"success": true
}, {
"actual": "((1, 0), (0, 1), (0, 0)) is builtin: Transform2D",
"context": "Then it passes",
"expected": "((1, 0), (0, 1), (0, 0)) is builtin: Transform2D",
"success": true
} ],
"context": "When calling asserts.is_Transform(transform2D: Transform2D)",
"fullname": "test_when_calling_is_Transform2D",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|RID| [RID] != null",
"context": "rid is not null",
"expected": "|RID| [RID] != null",
"success": true
}, {
"actual": "[RID] is builtin: RID",
"context": "Then it passes",
"expected": "[RID] is builtin: RID",
"success": true
} ],
"context": "When calling asserts.is_RID(rid: RID)",
"fullname": "test_when_calling_is_RID",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
} ],
"passed": 26,
"path": "res://tests/unit/is_instance.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/is_instance.test.gd",
"tags": [  ],
"test": ExtResource( 6 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 26
}, {
"context": "Given an Is Not Instance of class/type Assertion",
"methods": [ {
"assertions": [ {
"actual": "Null is not builtin: Basis",
"context": "Then it passes",
"expected": "Null is not builtin: Basis",
"success": true
} ],
"context": "when calling asserts.is_not_Basis(null)",
"fullname": "test_when_calling_is_not_Basis",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: AABB",
"context": "Then it passes",
"expected": "Null is not builtin: AABB",
"success": true
} ],
"context": "when calling asserts.is_not_AABB(null)",
"fullname": "test_when_calling_is_not_AABB",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Array",
"context": "Then it passes",
"expected": "Null is not builtin: Array",
"success": true
} ],
"context": "when calling asserts.is_not_Array(null)",
"fullname": "test_when_calling_is_not_Array",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: PoolStringArray",
"context": "Then it passes",
"expected": "Null is not builtin: PoolStringArray",
"success": true
} ],
"context": "when calling asserts.is_not_PoolStringArray(null)",
"fullname": "test_when_calling_is_not_PoolStringArray",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Quat",
"context": "Then it passes",
"expected": "Null is not builtin: Quat",
"success": true
} ],
"context": "when calling asserts.is_not_Quat(null)",
"fullname": "test_when_calling_is_not_Quat",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Transform2D",
"context": "Then it passes",
"expected": "Null is not builtin: Transform2D",
"success": true
} ],
"context": "when calling asserts.is_not_Transform2D(null)",
"fullname": "test_when_calling_is_not_Transform2D",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Color",
"context": "Then it passes",
"expected": "Null is not builtin: Color",
"success": true
} ],
"context": "when calling asserts.is_not_Color(null)",
"fullname": "test_when_calling_is_not_Color",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Rect2",
"context": "Then it passes",
"expected": "Null is not builtin: Rect2",
"success": true
} ],
"context": "when calling asserts.is_not_Rect2(null)",
"fullname": "test_when_calling_is_not_Rect2",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: PoolVector3Array",
"context": "Then it passes",
"expected": "Null is not builtin: PoolVector3Array",
"success": true
} ],
"context": "when calling asserts.is_not_PoolVector3Array(null)",
"fullname": "test_when_calling_is_not_PoolVector3Array",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: int",
"context": "Then it passes",
"expected": "Null is not builtin: int",
"success": true
} ],
"context": "when calling asserts.is_not_int(null)",
"fullname": "test_when_calling_is_not_int",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Vector2",
"context": "Then it passes",
"expected": "Null is not builtin: Vector2",
"success": true
} ],
"context": "when calling asserts.is_not_Vector2(null)",
"fullname": "test_when_calling_is_not_Vector2",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Dictionary",
"context": "Then it passes",
"expected": "Null is not builtin: Dictionary",
"success": true
} ],
"context": "when calling asserts.is_not_Dictionary(null)",
"fullname": "test_when_calling_is_not_Dictionary",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Transform",
"context": "Then it passes",
"expected": "Null is not builtin: Transform",
"success": true
} ],
"context": "when calling asserts.is_not_Transform(null)",
"fullname": "test_when_calling_is_not_Transform",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: PoolRealArray",
"context": "Then it passes",
"expected": "Null is not builtin: PoolRealArray",
"success": true
} ],
"context": "when calling asserts.is_not_PoolRealArray(null)",
"fullname": "test_when_calling_is_not_PoolRealArray",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: RID",
"context": "Then it passes",
"expected": "Null is not builtin: RID",
"success": true
} ],
"context": "when calling asserts.is_not_RID(null)",
"fullname": "test_when_calling_is_not_RID",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: float",
"context": "Then it passes",
"expected": "Null is not builtin: float",
"success": true
} ],
"context": "when calling asserts.is_not_float(null)",
"fullname": "test_when_calling_is_not_float",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Plane",
"context": "Then it passes",
"expected": "Null is not builtin: Plane",
"success": true
} ],
"context": "when calling asserts.is_not_Plane(null)",
"fullname": "test_when_calling_is_not_Plane",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: bool",
"context": "Then it passes",
"expected": "Null is not builtin: bool",
"success": true
} ],
"context": "when calling asserts.is_not_bool(null)",
"fullname": "test_when_calling_is_not_bool",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: String",
"context": "Then it passes",
"expected": "Null is not builtin: String",
"success": true
} ],
"context": "when calling asserts.is_not_String(null)",
"fullname": "test_when_calling_is_not_String",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: PoolByteArray",
"context": "Then it passes",
"expected": "Null is not builtin: PoolByteArray",
"success": true
} ],
"context": "when calling asserts.is_not_PoolByteArray(null)",
"fullname": "test_when_calling_is_not_PoolByteArray",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: PoolIntArray",
"context": "Then it passes",
"expected": "Null is not builtin: PoolIntArray",
"success": true
} ],
"context": "when calling asserts.is_not_PoolIntArray(null)",
"fullname": "test_when_calling_is_not_PoolIntArray",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Vector3",
"context": "Then it passes",
"expected": "Null is not builtin: Vector3",
"success": true
} ],
"context": "when calling asserts.is_not_Vector3(null)",
"fullname": "test_when_calling_is_not_Vector3",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Object",
"context": "Then it passes",
"expected": "Null is not builtin: Object",
"success": true
} ],
"context": "when calling asserts.is_not_Object(null)",
"fullname": "test_when_calling_is_not_Object",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: PoolVector2Array",
"context": "Then it passes",
"expected": "Null is not builtin: PoolVector2Array",
"success": true
} ],
"context": "when calling asserts.is_not_PoolVector2Array(null)",
"fullname": "test_when_calling_is_not_PoolVector2Array",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: NodePath",
"context": "Then it passes",
"expected": "Null is not builtin: NodePath",
"success": true
} ],
"context": "when calling asserts.is_not_NodePath(null)",
"fullname": "test_when_calling_is_not_NodePath",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: PoolColorArray",
"context": "Then it passes",
"expected": "Null is not builtin: PoolColorArray",
"success": true
} ],
"context": "when calling asserts.is_not_PoolColorArray(null)",
"fullname": "test_when_calling_is_not_PoolColorArray",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 26,
"path": "res://tests/unit/is_not_instance.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/is_not_instance.test.gd",
"tags": [  ],
"test": ExtResource( 2 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 26
}, {
"context": "Given a Null Assertion",
"methods": [ {
"assertions": [ {
"actual": "|Object| [Node:1832] != null",
"context": "Then it passes",
"expected": "|Object| [Node:1832] != null",
"success": true
} ],
"context": "When calling Node is not null",
"fullname": "test_when_calling_node_is_not_null",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|Object| [Deleted Object] == null",
"context": "A Freed Node is null in Engine 3.2.2 or greater",
"expected": "|Object| [Deleted Object] == null",
"success": true
} ],
"context": "When calling freed object is null",
"fullname": "test_when_calling_freed_object_is_not_null",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|null| Null == null",
"context": "Then it passes",
"expected": "|null| Null == null",
"success": true
} ],
"context": "When calling asserts.is_null(null)",
"fullname": "test_when_calling_null_is_null",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 3,
"path": "res://tests/unit/null.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/null.test.gd",
"tags": [  ],
"test": ExtResource( 12 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 3
}, {
"context": "Given the Addition Operator",
"methods": [ {
"assertions": [ {
"actual": "|int| 4 is equal to |int| 4",
"context": "",
"expected": "|int| 4 is equal to |int| 4",
"success": true
} ],
"context": "When we add 2 to 2 we get 4",
"fullname": "test_add",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 8 is equal to |int| 8",
"context": "",
"expected": "|int| 8 is equal to |int| 8",
"success": true
} ],
"context": "When we add 5 to 3 we get 8",
"fullname": "test_add",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 13 is equal to |int| 13",
"context": "",
"expected": "|int| 13 is equal to |int| 13",
"success": true
} ],
"context": "When we add 7 to 6 we get 13",
"fullname": "test_add",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 0 is equal to |int| 0",
"context": "",
"expected": "|int| 0 is equal to |int| 0",
"success": true
} ],
"context": "When we subtract 2 from 2 we get 0",
"fullname": "test_subtract",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 2 is equal to |int| 2",
"context": "",
"expected": "|int| 2 is equal to |int| 2",
"success": true
} ],
"context": "When we subtract 5 from 3 we get 2",
"fullname": "test_subtract",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 1 is equal to |int| 1",
"context": "",
"expected": "|int| 1 is equal to |int| 1",
"success": true
} ],
"context": "When we subtract 7 from 6 we get 1",
"fullname": "test_subtract",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 6,
"path": "res://tests/unit/parameters.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/parameters.test.gd",
"tags": [  ],
"test": ExtResource( 16 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 6
}, {
"context": "Given an Object Assertion",
"methods": [ {
"assertions": [ {
"actual": "Null is freed from memory",
"context": "Then it passes",
"expected": "Null is freed from memory",
"success": true
} ],
"context": "When calling asserts.is_freed(freed_object",
"fullname": "test_when_calling_freed_object_is_freed",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:1853] is not freed",
"context": "Then it passes",
"expected": "[Node:1853] is not freed",
"success": true
} ],
"context": "When calling asserts.is_not_freed(unfreed_object)",
"fullname": "test_when_calling_unfreed_object_is_not_freed",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:1833].builtin_dummy is not connected to [Node:1833].title",
"context": "Then it passes",
"expected": "[Node:1833].builtin_dummy is not connected to [Node:1833].title",
"success": true
} ],
"context": "When calling asserts object is not connected with an invalid connection",
"fullname": "test_when_calling_obj_is_not_connected_with_an_invalid_connection",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:1833] has meta: dummy",
"context": "Then it passes",
"expected": "[Node:1833] has meta: dummy",
"success": true
}, {
"actual": "[Node:1833] has meta: dummy",
"context": "Then it passes",
"expected": "[Node:1833] has meta: dummy",
"success": true
} ],
"context": "When calling asserts.object_has_meta() after adding metadata",
"fullname": "test_when_calling_has_meta_after_adding_metadata",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "[Node:1833] has method: title",
"context": "Then it passes",
"expected": "[Node:1833] has method: title",
"success": true
} ],
"context": "When calling has_method('title')",
"fullname": "test_when_calling_has_method_title",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:1833] does not have meta: bad_meta",
"context": "Then it passes",
"expected": "[Node:1833] does not have meta: bad_meta",
"success": true
} ],
"context": "When calling asserts.object_does_not_have_meta()",
"fullname": "test_when_calling_does_not_have_meta",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:1833] does not have meta: confusing",
"context": "Then it passes",
"expected": "[Node:1833] does not have meta: confusing",
"success": true
} ],
"context": "When calling asserts.object_has_meta with real key but null val",
"fullname": "test_when_calling_does_not_have_meta_real_key_null_value_pair",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:1867] is not queued for deletion",
"context": "Then it passes",
"expected": "[Node:1867] is not queued for deletion",
"success": true
} ],
"context": "When calling asserts.object_is_not_for_queued_deletion after not calling queue free()",
"fullname": "test_when_calling_obj_is_not_for_queued_deletion_after_not_calling_queue_free",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:1833] has user signal: dummy_signal",
"context": "Then it passes",
"expected": "[Node:1833] has user signal: dummy_signal",
"success": true
} ],
"context": "When calling obj_has_user_signal after adding a signal",
"fullname": "test_when_calling_has_user_signal_after_adding_a_signal",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:1833] does not have user signal: false_signal",
"context": "Then it passes",
"expected": "[Node:1833] does not have user signal: false_signal",
"success": true
} ],
"context": "When calling obj_does_not_have_user_signal with fake signal",
"fullname": "test_when_calling_does_not_have_user_signal",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:1833] does not have user signal: builtin_dummy",
"context": "Then it passes",
"expected": "[Node:1833] does not have user signal: builtin_dummy",
"success": true
} ],
"context": "When calling does not have user signal with class signal",
"fullname": "test_when_calling_does_not_have_user_signal_with_class_signal_constant",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:1833].builtin_dummy is connected to [Node:1833].title",
"context": "Then it passes",
"expected": "[Node:1833].builtin_dummy is connected to [Node:1833].title",
"success": true
} ],
"context": "When calling asserts object is connected with a valid connection",
"fullname": "test_when_calling_obj_is_connected_with_a_real_connection",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:1873] is queued for deletion",
"context": "Then it passes",
"expected": "[Node:1873] is queued for deletion",
"success": true
} ],
"context": "When calling asserts.object_is_queued for deletion after calling queue_free",
"fullname": "test_when_calling_obj_is_queued_for_deletion_after_calling_queue_free",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:1875] is not blocking signals",
"context": "Then it passes",
"expected": "[Node:1875] is not blocking signals",
"success": true
} ],
"context": "When calling is not blocking signals while not blocking signals",
"fullname": "test_is_not_blocking_signals",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:1877] is blocking signals",
"context": "Then it passes",
"expected": "[Node:1877] is blocking signals",
"success": true
} ],
"context": "When calling is blocking signals while blocking signals",
"fullname": "test_is_blocking_signals",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 15,
"path": "res://tests/unit/object.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/object.test.gd",
"tags": [  ],
"test": ExtResource( 7 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 15
}, {
"context": "Given A Range Assertion",
"methods": [ {
"assertions": [ {
"actual": "10 is not in range(0, 10)",
"context": "Then it passes",
"expected": "10 is not in range(0, 10)",
"success": true
} ],
"context": "When calling is (10) not in range (in range(0, 10)",
"fullname": "test_when_calling_is_not_in_range",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "0 is in range(0, 10)",
"context": "Then it passes",
"expected": "0 is in range(0, 10)",
"success": true
} ],
"context": "When calling is (0) in range(0, 10)",
"fullname": "test_when_calling_is_in_range",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 2,
"path": "res://tests/unit/range.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/range.test.gd",
"tags": [  ],
"test": ExtResource( 15 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 2
}, {
"context": "Given a String Assertion",
"methods": [ {
"assertions": [ {
"actual": "lorem impsum begins with lorem",
"context": "Then it passes",
"expected": "lorem impsum begins with lorem",
"success": true
} ],
"context": "When calling asserts.string_begins_with('lorem', 'lorem impsum')",
"fullname": "test_when_calling_string_begins_with",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "impsum does not end with lorem",
"context": "Then it passes",
"expected": "impsum does not end with lorem",
"success": true
} ],
"context": "When calling asserts.string_does_not_end_with('lorem', 'impsum')",
"fullname": "test_when_calling_string_does_not_end_with",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "impsum does not begin with bleh lorem",
"context": "Then it passes",
"expected": "impsum does not begin with bleh lorem",
"success": true
} ],
"context": "When calling asserts.string_does_not_begin_with('lorem', 'impsum')",
"fullname": "test_when_calling_string_does_not_begin_with",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "impsum does not contain beem im",
"context": "Then it passes",
"expected": "impsum does not contain beem im",
"success": true
} ],
"context": "When calling asserts.string_does_not_contain('em im', 'impsum')",
"fullname": "test_when_calling_string_does_not_contain",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "lorem impsum contains em im",
"context": "Then it passes",
"expected": "lorem impsum contains em im",
"success": true
} ],
"context": "When calling asserts.string_contains('em im', 'lorem impsum')",
"fullname": "test_when_calling_string_contains",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "lorem impsum ends with impsum",
"context": "Then it passes",
"expected": "lorem impsum ends with impsum",
"success": true
} ],
"context": "When calling asserts.string_ends_with('impsum', 'lorem impsum')",
"fullname": "test_when_calling_string_ends_with",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 6,
"path": "res://tests/unit/string.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/string.test.gd",
"tags": [  ],
"test": ExtResource( 9 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 6
}, {
"context": "Dummy Passing Test",
"methods": [ {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Passing!",
"expected": "|bool| True == true",
"success": true
} ],
"context": "This method passes",
"fullname": "test_this_method_passes",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 1,
"path": "res://tests/unit/suite.test.gd.DummyOne",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/suite.test.gd.DummyOne",
"tags": [  ],
"test": SubResource( 7 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 1
}, {
"context": "Dummy Test 2",
"methods": [ {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Passing!",
"expected": "|bool| True == true",
"success": true
} ],
"context": "This method passes",
"fullname": "test_this_method_passes",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 1,
"path": "res://tests/unit/suite.test.gd.DummyTwo",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/suite.test.gd.DummyTwo",
"tags": [  ],
"test": SubResource( 8 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 1
}, {
"context": "Given a Test Script",
"methods": [ {
"assertions": [ {
"actual": "|bool| True == true",
"context": "",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|int| 2 is equal to |int| 2",
"context": "",
"expected": "|int| 2 is equal to |int| 2",
"success": true
} ],
"context": " when we omit context we can see expected and got under method",
"fullname": "test_when_we_omit_context_we_can_see_expected_and_got_under_method",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|int| 10 is greater than |int| 1",
"context": "We get an array of multiple values back",
"expected": "|int| 10 is greater than |int| 1",
"success": true
}, {
"actual": "|int| 0 is not equal to |int| 9",
"context": "With different values",
"expected": "|int| 0 != |int| 9",
"success": true
}, {
"actual": "|int| 10 is greater than |int| 1",
"context": "And we can track multiple properties",
"expected": "|int| 10 is greater than |int| 1",
"success": true
} ],
"context": "When we record properties",
"fullname": "test_we_can_record_properties",
"passed": 3,
"success": true,
"time": 0.0,
"total": 3
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "if the test didn't break this works",
"expected": "|bool| True == true",
"success": true
} ],
"context": " we can omit describe",
"fullname": "test_we_can_omit_describe",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 3,
"path": "res://tests/unit/test.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/test.test.gd",
"tags": [  ],
"test": ExtResource( 19 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 3
}, {
"context": "Given a Signal Watcher",
"methods": [ {
"assertions": [ {
"actual": "Signal: example was not emitted from [Node:1899]",
"context": "Then it does not capture the non-emitted signal",
"expected": "Signal: example was not emitted from [Node:1899]",
"success": true
} ],
"context": "When we watch and do not emit a signal",
"fullname": "test_When_we_watch_and_do_not_emit_a_signal",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Signal: example was emitted from [Node:1899] with arguments: [1, 20, 5]",
"context": "Then it captures any arguments that where passed when the signal was emitted",
"expected": "Signal: example was emitted from [Node:1899] with arguments: [1, 20, 5]",
"success": true
} ],
"context": "When we watch a signal from an object with no bound variables",
"fullname": "test_When_we_watch_a_signal_from_an_object_with_no_bound_variables",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "signal: multiple was emitted from [Node:1899] 2",
"context": "Then we can track how many times we emitted it",
"expected": "signal: multiple was emitted from [Node:1899] 2",
"success": true
} ],
"context": "When we watch and signal and emit it multiple times",
"fullname": "test_When_we_watch_a_signal_and_emit_it_multiple_times",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "signal: example was emitted from [Node:1899]",
"context": "Then it captures the emitted signal",
"expected": "signal: example was emitted from [Node:1899]",
"success": true
} ],
"context": "When we watch and emit a signal",
"fullname": "test_When_we_watch_and_emit_a_signal",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 4,
"path": "res://tests/unit/watcher.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/watcher.test.gd",
"tags": [  ],
"test": ExtResource( 17 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 4
}, {
"context": "Given a Yield",
"methods": [ {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then we set var a to true",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then we set var b to true",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we yield in start twice",
"fullname": "test_When_we_yield_in_start",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then we set var c to true",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then we set var d to true",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we yield in pre thrice",
"fullname": "test_When_we_yield_in_pre",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then we set var e to true",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then we set var f to true",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we yield twice in execute",
"fullname": "test_When_we_yield_in_execute",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then the yielder is unpaused",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then the timeout signal of the yielder is connected",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then our signal is connected to the yielder",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we call until signal",
"fullname": "test_When_we_call_until_signal",
"passed": 3,
"success": true,
"time": 0.0,
"total": 3
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then the yielder is paused",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "The timeout signal of the yielder is not connected",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When the yielder times out on until_timeout(0.1)",
"fullname": "test_When_the_yielder_times_out",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then yielder is not active",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When asserting against a test",
"fullname": "test_Yielder_is_not_active_when_asserting",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then yielder is unpaused",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "The timeout signal of the yielder is connected",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we call until_timeout (with 1.0)",
"fullname": "test_When_we_call_until_timeout",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "[100, Null, Null, Null, Null, Null] is builtin: Array",
"context": "Then we get an array",
"expected": "[100, Null, Null, Null, Null, Null] is builtin: Array",
"success": true
}, {
"actual": "|int| 6 is equal to |int| 6",
"context": "Of size 6",
"expected": "|int| 6 is equal to |int| 6",
"success": true
}, {
"actual": "|int| 100 is equal to |int| 100",
"context": "Where element 0 is 100",
"expected": "|int| 100 is equal to |int| 100",
"success": true
} ],
"context": "When yield(self.yield_value()) returns",
"fullname": "test_When_we_yield_we_get_the_return_value",
"passed": 3,
"success": true,
"time": 0.0,
"total": 3
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then the timeout signal is disconnected",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then the signal-signal is disconnected",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When it is finished",
"fullname": "test_When_yielder_is_finished_signals_are_disconnected",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then the yielder is paused",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When a signal being yielded on is emitted",
"fullname": "test_When_a_signal_being_yielded_on_is_emitted_the_yielder_is_stopped",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then the yielder is paused",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then the timeout signal of the yielder is disconnected",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then our signal to the yielder is disconnected",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When the yielder heres our signal",
"fullname": "test_When_the_yielder_hears_our_signal",
"passed": 3,
"success": true,
"time": 0.0,
"total": 3
} ],
"passed": 11,
"path": "res://tests/unit/yield.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/yield.test.gd",
"tags": [  ],
"test": ExtResource( 18 ),
"yield_time": 1.9
},
"success": true,
"time_taken": 0.0,
"total": 11
} ],
1611514446: [ {
"context": "Default Args",
"methods": [ {
"assertions": [ {
"actual": "|bool| True == true",
"context": "If this method can be reached then we have doubled a script with default argument(s) properly!",
"expected": "|bool| True == true",
"success": true
} ],
"context": " default arguments of interpolate property",
"fullname": "test_default_arguments_of_interpolate_property",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 1,
"path": "res://tests/integration/default_args.test.gd",
"source": {
"containers": [ "res://tests/integration", "res://tests" ],
"method": "",
"path": "res://tests/integration/default_args.test.gd",
"tags": [  ],
"test": ExtResource( 10 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 1
}, {
"context": "Given a Boolean Assertion",
"methods": [ {
"assertions": [ {
"actual": "|bool| True != false",
"context": "",
"expected": "|bool| True == false",
"success": false
} ],
"context": " intentional failure",
"fullname": "test_intentional_failure",
"passed": 0,
"success": false,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| False == false",
"context": "Then it passes",
"expected": "|bool| False == false",
"success": true
} ],
"context": "When calling asserts.is_false(false)",
"fullname": "test_when_calling_asserts_is_false",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then it passes",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When calling asserts.is_true(true)",
"fullname": "test_when_calling_asserts_is_true",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 2,
"path": "res://tests/integration/boolean.test.gd",
"source": {
"containers": [ "res://tests/integration", "res://tests" ],
"method": "",
"path": "res://tests/integration/boolean.test.gd",
"tags": [  ],
"test": ExtResource( 20 ),
"yield_time": 0.0
},
"success": false,
"time_taken": 0.0,
"total": 3
}, {
"context": "Given is_on_floor",
"methods": [ {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then it can be stubbed",
"expected": "|bool| True == true",
"success": true
} ],
"context": "From a user-defined script",
"fullname": "test_stubbing_is_on_floor_method_from_user_defined_class",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then it can be stubbed",
"expected": "|bool| True == true",
"success": true
} ],
"context": "From a built-in KinematicBody2D2",
"fullname": "test_stubbing_is_on_floor_method_from_builtin_class2",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then it can be stubbed",
"expected": "|bool| True == true",
"success": true
} ],
"context": "From a child node of a scene without scripts",
"fullname": "test_stubbing_is_on_floor_as_child_node_with_no_script",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 3,
"path": "res://tests/integration/on_floor.test.gd",
"source": {
"containers": [ "res://tests/integration", "res://tests" ],
"method": "",
"path": "res://tests/integration/on_floor.test.gd",
"tags": [  ],
"test": ExtResource( 5 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 3
}, {
"context": "Given a Scene Director",
"methods": [ {
"assertions": [ {
"actual": "|Dictionary| {.:[Reference:1383], A:[Reference:1384], A/B:[Reference:1386], C:[Reference:1385], C/D:[Reference:1387]} is not equal to |Dictionary| {.:[Reference:1397], A:[Reference:1398], A/B:[Reference:1400], C:[Reference:1399], C/D:[Reference:1401]}",
"context": "Then they do not share resources",
"expected": "|Dictionary| {.:[Reference:1383], A:[Reference:1384], A/B:[Reference:1386], C:[Reference:1385], C/D:[Reference:1387]} != |Dictionary| {.:[Reference:1397], A:[Reference:1398], A/B:[Reference:1400], C:[Reference:1399], C/D:[Reference:1401]}",
"success": true
} ],
"context": "When we create two of it for the same scene",
"fullname": "test_When_we_create_two_of_it_for_the_same_scene",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 9999 is equal to |int| 9999",
"context": "Then we get the stubbed return value",
"expected": "|int| 9999 is equal to |int| 9999",
"success": true
} ],
"context": "When we call a method from the root node that we stubbed",
"fullname": "test_When_we_call_a_method_from_the_root_node_that_we_stubbed",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 999 is equal to |int| 999",
"context": "Then we get the stubbed return value",
"expected": "|int| 999 is equal to |int| 999",
"success": true
} ],
"context": "When we call a method from a child node that we stubbed",
"fullname": "test_When_we_call_a_method_from_a_child_node_that_we_stubbed",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 99 is equal to |int| 99",
"context": "Then we get the stubbed return value",
"expected": "|int| 99 is equal to |int| 99",
"success": true
} ],
"context": "When we call a method from a grandchild node that we stubbed",
"fullname": "test_When_we_call_a_method_from_a_grandchild_node_that_we_stubbed",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|NodePath| A is equal to |NodePath| A",
"context": "We have the correct NodePath Set",
"expected": "|NodePath| A is equal to |NodePath| A",
"success": true
} ],
"context": "When we add it to the tree it runs",
"fullname": "test_When_we_add_it_to_the_tree_it_runs",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 5,
"path": "res://tests/integration/scene_director.test.gd",
"source": {
"containers": [ "res://tests/integration", "res://tests" ],
"method": "",
"path": "res://tests/integration/scene_director.test.gd",
"tags": [  ],
"test": ExtResource( 4 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 5
}, {
"context": "Given a Script Director",
"methods": [ {
"assertions": [ {
"actual": "[Reference:1576] is instance of class: [GDScript:1569]",
"context": "Then we get that inner class back",
"expected": "[Reference:1576] is instance of class: [GDScript:1569]",
"success": true
} ],
"context": "When we double an inner class",
"fullname": "test_When_we_double_an_inner_class",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|Dictionary| {_enter_tree:{arguments:, default_arguments:}, _exit_tree:{arguments:, default_arguments:}, _get:{arguments:a, default_arguments:a}, _get_configuration_warning:{arguments:, default_arguments:}, _get_editor_description:{arguments:, default_arguments:}, _get_import_path:{arguments:, default_arguments:}, _get_property_list:{arguments:, default_arguments:}, _init:{arguments:, default_arguments:}, _input:{arguments:a, default_arguments:a}, _notification:{arguments:a, default_arguments:a}, _physics_process:{arguments:a, default_arguments:a}, _process:{arguments:a, default_arguments:a}, _ready:{arguments:, default_arguments:}, _set:{arguments:a, b, default_arguments:a, b}, _set_editor_description:{arguments:a, default_arguments:a}, _set_import_path:{arguments:a, default_arguments:a}, _to_string:{arguments:, default_arguments:}, _unhandled_input:{arguments:a, default_arguments:a}, _unhandled_key_input:{arguments:a, default_arguments:a}, add:{arguments:a, b, default_arguments:a, b}, add_child:{arguments:a, b, default_arguments:a, b = False}, add_child_below_node:{arguments:a, b, c, default_arguments:a, b, c = False}, add_to_group:{arguments:a, b, default_arguments:a, b = False}, add_user_signal:{arguments:a, b, default_arguments:a, b = []}, call:{arguments:a, default_arguments:a}, call_deferred:{arguments:a, default_arguments:a}, callv:{arguments:a, b, default_arguments:a, b}, can_process:{arguments:, default_arguments:}, can_translate_messages:{arguments:, default_arguments:}, connect:{arguments:a, b, c, d, e, default_arguments:a, b, c, d = [], e = 0}, disconnect:{arguments:a, b, c, default_arguments:a, b, c}, divide:{arguments:a, b, default_arguments:a, b}, duplicate:{arguments:a, default_arguments:a = 15}, emit_signal:{arguments:a, default_arguments:a}, find_node:{arguments:a, b, c, default_arguments:a, b = True, c = True}, find_parent:{arguments:a, default_arguments:a}, free:{arguments:, default_arguments:}, get:{arguments:a, default_arguments:a}, get_child:{arguments:a, default_arguments:a}, get_child_count:{arguments:, default_arguments:}, get_children:{arguments:, default_arguments:}, get_class:{arguments:, default_arguments:}, get_custom_multiplayer:{arguments:, default_arguments:}, get_filename:{arguments:, default_arguments:}, get_groups:{arguments:, default_arguments:}, get_incoming_connections:{arguments:, default_arguments:}, get_index:{arguments:, default_arguments:}, get_indexed:{arguments:a, default_arguments:a}, get_instance_id:{arguments:, default_arguments:}, get_meta:{arguments:a, default_arguments:a}, get_meta_list:{arguments:, default_arguments:}, get_method_list:{arguments:, default_arguments:}, get_multiplayer:{arguments:, default_arguments:}, get_name:{arguments:, default_arguments:}, get_network_master:{arguments:, default_arguments:}, get_node:{arguments:a, default_arguments:a}, get_node_and_resource:{arguments:a, default_arguments:a}, get_node_or_null:{arguments:a, default_arguments:a}, get_owner:{arguments:, default_arguments:}, get_parent:{arguments:, default_arguments:}, get_path:{arguments:, default_arguments:}, get_path_to:{arguments:a, default_arguments:a}, get_pause_mode:{arguments:, default_arguments:}, get_physics_process_delta_time:{arguments:, default_arguments:}, get_position_in_parent:{arguments:, default_arguments:}, get_process_delta_time:{arguments:, default_arguments:}, get_process_priority:{arguments:, default_arguments:}, get_property_list:{arguments:, default_arguments:}, get_scene_instance_load_placeholder:{arguments:, default_arguments:}, get_script:{arguments:, default_arguments:}, get_signal_connection_list:{arguments:a, default_arguments:a}, get_signal_list:{arguments:, default_arguments:}, get_tree:{arguments:, default_arguments:}, get_viewport:{arguments:, default_arguments:}, has_meta:{arguments:a, default_arguments:a}, has_method:{arguments:a, default_arguments:a}, has_node:{arguments:a, default_arguments:a}, has_node_and_resource:{arguments:a, default_arguments:a}, has_signal:{arguments:a, default_arguments:a}, has_user_signal:{arguments:a, default_arguments:a}, is_a_parent_of:{arguments:a, default_arguments:a}, is_blocking_signals:{arguments:, default_arguments:}, is_class:{arguments:a, default_arguments:a}, is_connected:{arguments:a, b, c, default_arguments:a, b, c}, is_displayed_folded:{arguments:, default_arguments:}, is_greater_than:{arguments:a, default_arguments:a}, is_in_group:{arguments:a, default_arguments:a}, is_inside_tree:{arguments:, default_arguments:}, is_network_master:{arguments:, default_arguments:}, is_physics_processing:{arguments:, default_arguments:}, is_physics_processing_internal:{arguments:, default_arguments:}, is_processing:{arguments:, default_arguments:}, is_processing_input:{arguments:, default_arguments:}, is_processing_internal:{arguments:, default_arguments:}, is_processing_unhandled_input:{arguments:, default_arguments:}, is_processing_unhandled_key_input:{arguments:, default_arguments:}, is_queued_for_deletion:{arguments:, default_arguments:}, math_fight:{arguments:, default_arguments:}, move_child:{arguments:a, b, default_arguments:a, b}, multiply:{arguments:a, b, default_arguments:a, b}, notification:{arguments:a, b, default_arguments:a, b = False}, pi:{arguments:, default_arguments:}, print_stray_nodes:{arguments:, default_arguments:}, print_tree:{arguments:, default_arguments:}, print_tree_pretty:{arguments:, default_arguments:}, propagate_call:{arguments:a, b, c, default_arguments:a, b = [], c = False}, propagate_notification:{arguments:a, default_arguments:a}, property_list_changed_notify:{arguments:, default_arguments:}, queue_free:{arguments:, default_arguments:}, raise:{arguments:, default_arguments:}, remove_and_skip:{arguments:, default_arguments:}, remove_child:{arguments:a, default_arguments:a}, remove_from_group:{arguments:a, default_arguments:a}, remove_meta:{arguments:a, default_arguments:a}, replace_by:{arguments:a, b, default_arguments:a, b = False}, request_ready:{arguments:, default_arguments:}, rpc:{arguments:a, default_arguments:a}, rpc_config:{arguments:a, b, default_arguments:a, b}, rpc_id:{arguments:a, b, default_arguments:a, b}, rpc_unreliable:{arguments:a, default_arguments:a}, rpc_unreliable_id:{arguments:a, b, default_arguments:a, b}, rset:{arguments:a, b, default_arguments:a, b}, rset_config:{arguments:a, b, default_arguments:a, b}, rset_id:{arguments:a, b, c, default_arguments:a, b, c}, rset_unreliable:{arguments:a, b, default_arguments:a, b}, rset_unreliable_id:{arguments:a, b, c, default_arguments:a, b, c}, set:{arguments:a, b, default_arguments:a, b}, set_block_signals:{arguments:a, default_arguments:a}, set_custom_multiplayer:{arguments:a, default_arguments:a}, set_deferred:{arguments:a, b, default_arguments:a, b}, set_display_folded:{arguments:a, default_arguments:a}, set_filename:{arguments:a, default_arguments:a}, set_indexed:{arguments:a, b, default_arguments:a, b}, set_message_translation:{arguments:a, default_arguments:a}, set_meta:{arguments:a, b, default_arguments:a, b}, set_name:{arguments:a, default_arguments:a}, set_network_master:{arguments:a, b, default_arguments:a, b = True}, set_owner:{arguments:a, default_arguments:a}, set_pause_mode:{arguments:a, default_arguments:a}, set_physics_process:{arguments:a, default_arguments:a}, set_physics_process_internal:{arguments:a, default_arguments:a}, set_process:{arguments:a, default_arguments:a}, set_process_input:{arguments:a, default_arguments:a}, set_process_internal:{arguments:a, default_arguments:a}, set_process_priority:{arguments:a, default_arguments:a}, set_process_unhandled_input:{arguments:a, default_arguments:a}, set_process_unhandled_key_input:{arguments:a, default_arguments:a}, set_scene_instance_load_placeholder:{arguments:a, default_arguments:a}, set_script:{arguments:a, default_arguments:a}, subtract:{arguments:a, b, default_arguments:a, b}, sum:{arguments:a, default_arguments:a}, to_string:{arguments:, default_arguments:}, tr:{arguments:a, default_arguments:a}, update_configuration_warning:{arguments:, default_arguments:}} is not equal to |Dictionary| {_enter_tree:{arguments:, default_arguments:}, _exit_tree:{arguments:, default_arguments:}, _get:{arguments:a, default_arguments:a}, _get_configuration_warning:{arguments:, default_arguments:}, _get_editor_description:{arguments:, default_arguments:}, _get_import_path:{arguments:, default_arguments:}, _get_property_list:{arguments:, default_arguments:}, _init:{arguments:, default_arguments:}, _input:{arguments:a, default_arguments:a}, _notification:{arguments:a, default_arguments:a}, _physics_process:{arguments:a, default_arguments:a}, _process:{arguments:a, default_arguments:a}, _ready:{arguments:, default_arguments:}, _set:{arguments:a, b, default_arguments:a, b}, _set_editor_description:{arguments:a, default_arguments:a}, _set_import_path:{arguments:a, default_arguments:a}, _to_string:{arguments:, default_arguments:}, _unhandled_input:{arguments:a, default_arguments:a}, _unhandled_key_input:{arguments:a, default_arguments:a}, add:{arguments:a, b, default_arguments:a, b}, add_child:{arguments:a, b, default_arguments:a, b = False}, add_child_below_node:{arguments:a, b, c, default_arguments:a, b, c = False}, add_to_group:{arguments:a, b, default_arguments:a, b = False}, add_user_signal:{arguments:a, b, default_arguments:a, b = []}, call:{arguments:a, default_arguments:a}, call_deferred:{arguments:a, default_arguments:a}, callv:{arguments:a, b, default_arguments:a, b}, can_process:{arguments:, default_arguments:}, can_translate_messages:{arguments:, default_arguments:}, connect:{arguments:a, b, c, d, e, default_arguments:a, b, c, d = [], e = 0}, disconnect:{arguments:a, b, c, default_arguments:a, b, c}, divide:{arguments:a, b, default_arguments:a, b}, duplicate:{arguments:a, default_arguments:a = 15}, emit_signal:{arguments:a, default_arguments:a}, find_node:{arguments:a, b, c, default_arguments:a, b = True, c = True}, find_parent:{arguments:a, default_arguments:a}, free:{arguments:, default_arguments:}, get:{arguments:a, default_arguments:a}, get_child:{arguments:a, default_arguments:a}, get_child_count:{arguments:, default_arguments:}, get_children:{arguments:, default_arguments:}, get_class:{arguments:, default_arguments:}, get_custom_multiplayer:{arguments:, default_arguments:}, get_filename:{arguments:, default_arguments:}, get_groups:{arguments:, default_arguments:}, get_incoming_connections:{arguments:, default_arguments:}, get_index:{arguments:, default_arguments:}, get_indexed:{arguments:a, default_arguments:a}, get_instance_id:{arguments:, default_arguments:}, get_meta:{arguments:a, default_arguments:a}, get_meta_list:{arguments:, default_arguments:}, get_method_list:{arguments:, default_arguments:}, get_multiplayer:{arguments:, default_arguments:}, get_name:{arguments:, default_arguments:}, get_network_master:{arguments:, default_arguments:}, get_node:{arguments:a, default_arguments:a}, get_node_and_resource:{arguments:a, default_arguments:a}, get_node_or_null:{arguments:a, default_arguments:a}, get_owner:{arguments:, default_arguments:}, get_parent:{arguments:, default_arguments:}, get_path:{arguments:, default_arguments:}, get_path_to:{arguments:a, default_arguments:a}, get_pause_mode:{arguments:, default_arguments:}, get_physics_process_delta_time:{arguments:, default_arguments:}, get_position_in_parent:{arguments:, default_arguments:}, get_process_delta_time:{arguments:, default_arguments:}, get_process_priority:{arguments:, default_arguments:}, get_property_list:{arguments:, default_arguments:}, get_scene_instance_load_placeholder:{arguments:, default_arguments:}, get_script:{arguments:, default_arguments:}, get_signal_connection_list:{arguments:a, default_arguments:a}, get_signal_list:{arguments:, default_arguments:}, get_tree:{arguments:, default_arguments:}, get_viewport:{arguments:, default_arguments:}, has_meta:{arguments:a, default_arguments:a}, has_method:{arguments:a, default_arguments:a}, has_node:{arguments:a, default_arguments:a}, has_node_and_resource:{arguments:a, default_arguments:a}, has_signal:{arguments:a, default_arguments:a}, has_user_signal:{arguments:a, default_arguments:a}, is_a_parent_of:{arguments:a, default_arguments:a}, is_blocking_signals:{arguments:, default_arguments:}, is_class:{arguments:a, default_arguments:a}, is_connected:{arguments:a, b, c, default_arguments:a, b, c}, is_displayed_folded:{arguments:, default_arguments:}, is_greater_than:{arguments:a, default_arguments:a}, is_in_group:{arguments:a, default_arguments:a}, is_inside_tree:{arguments:, default_arguments:}, is_network_master:{arguments:, default_arguments:}, is_physics_processing:{arguments:, default_arguments:}, is_physics_processing_internal:{arguments:, default_arguments:}, is_processing:{arguments:, default_arguments:}, is_processing_input:{arguments:, default_arguments:}, is_processing_internal:{arguments:, default_arguments:}, is_processing_unhandled_input:{arguments:, default_arguments:}, is_processing_unhandled_key_input:{arguments:, default_arguments:}, is_queued_for_deletion:{arguments:, default_arguments:}, math_fight:{arguments:, default_arguments:}, move_child:{arguments:a, b, default_arguments:a, b}, multiply:{arguments:a, b, default_arguments:a, b}, notification:{arguments:a, b, default_arguments:a, b = False}, pi:{arguments:, default_arguments:}, print_stray_nodes:{arguments:, default_arguments:}, print_tree:{arguments:, default_arguments:}, print_tree_pretty:{arguments:, default_arguments:}, propagate_call:{arguments:a, b, c, default_arguments:a, b = [], c = False}, propagate_notification:{arguments:a, default_arguments:a}, property_list_changed_notify:{arguments:, default_arguments:}, queue_free:{arguments:, default_arguments:}, raise:{arguments:, default_arguments:}, remove_and_skip:{arguments:, default_arguments:}, remove_child:{arguments:a, default_arguments:a}, remove_from_group:{arguments:a, default_arguments:a}, remove_meta:{arguments:a, default_arguments:a}, replace_by:{arguments:a, b, default_arguments:a, b = False}, request_ready:{arguments:, default_arguments:}, rpc:{arguments:a, default_arguments:a}, rpc_config:{arguments:a, b, default_arguments:a, b}, rpc_id:{arguments:a, b, default_arguments:a, b}, rpc_unreliable:{arguments:a, default_arguments:a}, rpc_unreliable_id:{arguments:a, b, default_arguments:a, b}, rset:{arguments:a, b, default_arguments:a, b}, rset_config:{arguments:a, b, default_arguments:a, b}, rset_id:{arguments:a, b, c, default_arguments:a, b, c}, rset_unreliable:{arguments:a, b, default_arguments:a, b}, rset_unreliable_id:{arguments:a, b, c, default_arguments:a, b, c}, set:{arguments:a, b, default_arguments:a, b}, set_block_signals:{arguments:a, default_arguments:a}, set_custom_multiplayer:{arguments:a, default_arguments:a}, set_deferred:{arguments:a, b, default_arguments:a, b}, set_display_folded:{arguments:a, default_arguments:a}, set_filename:{arguments:a, default_arguments:a}, set_indexed:{arguments:a, b, default_arguments:a, b}, set_message_translation:{arguments:a, default_arguments:a}, set_meta:{arguments:a, b, default_arguments:a, b}, set_name:{arguments:a, default_arguments:a}, set_network_master:{arguments:a, b, default_arguments:a, b = True}, set_owner:{arguments:a, default_arguments:a}, set_pause_mode:{arguments:a, default_arguments:a}, set_physics_process:{arguments:a, default_arguments:a}, set_physics_process_internal:{arguments:a, default_arguments:a}, set_process:{arguments:a, default_arguments:a}, set_process_input:{arguments:a, default_arguments:a}, set_process_internal:{arguments:a, default_arguments:a}, set_process_priority:{arguments:a, default_arguments:a}, set_process_unhandled_input:{arguments:a, default_arguments:a}, set_process_unhandled_key_input:{arguments:a, default_arguments:a}, set_scene_instance_load_placeholder:{arguments:a, default_arguments:a}, set_script:{arguments:a, default_arguments:a}, subtract:{arguments:a, b, default_arguments:a, b}, sum:{arguments:a, default_arguments:a}, to_string:{arguments:, default_arguments:}, tr:{arguments:a, default_arguments:a}, update_configuration_warning:{arguments:, default_arguments:}}",
"context": "Then they do not share resources",
"expected": "|Dictionary| {_enter_tree:{arguments:, default_arguments:}, _exit_tree:{arguments:, default_arguments:}, _get:{arguments:a, default_arguments:a}, _get_configuration_warning:{arguments:, default_arguments:}, _get_editor_description:{arguments:, default_arguments:}, _get_import_path:{arguments:, default_arguments:}, _get_property_list:{arguments:, default_arguments:}, _init:{arguments:, default_arguments:}, _input:{arguments:a, default_arguments:a}, _notification:{arguments:a, default_arguments:a}, _physics_process:{arguments:a, default_arguments:a}, _process:{arguments:a, default_arguments:a}, _ready:{arguments:, default_arguments:}, _set:{arguments:a, b, default_arguments:a, b}, _set_editor_description:{arguments:a, default_arguments:a}, _set_import_path:{arguments:a, default_arguments:a}, _to_string:{arguments:, default_arguments:}, _unhandled_input:{arguments:a, default_arguments:a}, _unhandled_key_input:{arguments:a, default_arguments:a}, add:{arguments:a, b, default_arguments:a, b}, add_child:{arguments:a, b, default_arguments:a, b = False}, add_child_below_node:{arguments:a, b, c, default_arguments:a, b, c = False}, add_to_group:{arguments:a, b, default_arguments:a, b = False}, add_user_signal:{arguments:a, b, default_arguments:a, b = []}, call:{arguments:a, default_arguments:a}, call_deferred:{arguments:a, default_arguments:a}, callv:{arguments:a, b, default_arguments:a, b}, can_process:{arguments:, default_arguments:}, can_translate_messages:{arguments:, default_arguments:}, connect:{arguments:a, b, c, d, e, default_arguments:a, b, c, d = [], e = 0}, disconnect:{arguments:a, b, c, default_arguments:a, b, c}, divide:{arguments:a, b, default_arguments:a, b}, duplicate:{arguments:a, default_arguments:a = 15}, emit_signal:{arguments:a, default_arguments:a}, find_node:{arguments:a, b, c, default_arguments:a, b = True, c = True}, find_parent:{arguments:a, default_arguments:a}, free:{arguments:, default_arguments:}, get:{arguments:a, default_arguments:a}, get_child:{arguments:a, default_arguments:a}, get_child_count:{arguments:, default_arguments:}, get_children:{arguments:, default_arguments:}, get_class:{arguments:, default_arguments:}, get_custom_multiplayer:{arguments:, default_arguments:}, get_filename:{arguments:, default_arguments:}, get_groups:{arguments:, default_arguments:}, get_incoming_connections:{arguments:, default_arguments:}, get_index:{arguments:, default_arguments:}, get_indexed:{arguments:a, default_arguments:a}, get_instance_id:{arguments:, default_arguments:}, get_meta:{arguments:a, default_arguments:a}, get_meta_list:{arguments:, default_arguments:}, get_method_list:{arguments:, default_arguments:}, get_multiplayer:{arguments:, default_arguments:}, get_name:{arguments:, default_arguments:}, get_network_master:{arguments:, default_arguments:}, get_node:{arguments:a, default_arguments:a}, get_node_and_resource:{arguments:a, default_arguments:a}, get_node_or_null:{arguments:a, default_arguments:a}, get_owner:{arguments:, default_arguments:}, get_parent:{arguments:, default_arguments:}, get_path:{arguments:, default_arguments:}, get_path_to:{arguments:a, default_arguments:a}, get_pause_mode:{arguments:, default_arguments:}, get_physics_process_delta_time:{arguments:, default_arguments:}, get_position_in_parent:{arguments:, default_arguments:}, get_process_delta_time:{arguments:, default_arguments:}, get_process_priority:{arguments:, default_arguments:}, get_property_list:{arguments:, default_arguments:}, get_scene_instance_load_placeholder:{arguments:, default_arguments:}, get_script:{arguments:, default_arguments:}, get_signal_connection_list:{arguments:a, default_arguments:a}, get_signal_list:{arguments:, default_arguments:}, get_tree:{arguments:, default_arguments:}, get_viewport:{arguments:, default_arguments:}, has_meta:{arguments:a, default_arguments:a}, has_method:{arguments:a, default_arguments:a}, has_node:{arguments:a, default_arguments:a}, has_node_and_resource:{arguments:a, default_arguments:a}, has_signal:{arguments:a, default_arguments:a}, has_user_signal:{arguments:a, default_arguments:a}, is_a_parent_of:{arguments:a, default_arguments:a}, is_blocking_signals:{arguments:, default_arguments:}, is_class:{arguments:a, default_arguments:a}, is_connected:{arguments:a, b, c, default_arguments:a, b, c}, is_displayed_folded:{arguments:, default_arguments:}, is_greater_than:{arguments:a, default_arguments:a}, is_in_group:{arguments:a, default_arguments:a}, is_inside_tree:{arguments:, default_arguments:}, is_network_master:{arguments:, default_arguments:}, is_physics_processing:{arguments:, default_arguments:}, is_physics_processing_internal:{arguments:, default_arguments:}, is_processing:{arguments:, default_arguments:}, is_processing_input:{arguments:, default_arguments:}, is_processing_internal:{arguments:, default_arguments:}, is_processing_unhandled_input:{arguments:, default_arguments:}, is_processing_unhandled_key_input:{arguments:, default_arguments:}, is_queued_for_deletion:{arguments:, default_arguments:}, math_fight:{arguments:, default_arguments:}, move_child:{arguments:a, b, default_arguments:a, b}, multiply:{arguments:a, b, default_arguments:a, b}, notification:{arguments:a, b, default_arguments:a, b = False}, pi:{arguments:, default_arguments:}, print_stray_nodes:{arguments:, default_arguments:}, print_tree:{arguments:, default_arguments:}, print_tree_pretty:{arguments:, default_arguments:}, propagate_call:{arguments:a, b, c, default_arguments:a, b = [], c = False}, propagate_notification:{arguments:a, default_arguments:a}, property_list_changed_notify:{arguments:, default_arguments:}, queue_free:{arguments:, default_arguments:}, raise:{arguments:, default_arguments:}, remove_and_skip:{arguments:, default_arguments:}, remove_child:{arguments:a, default_arguments:a}, remove_from_group:{arguments:a, default_arguments:a}, remove_meta:{arguments:a, default_arguments:a}, replace_by:{arguments:a, b, default_arguments:a, b = False}, request_ready:{arguments:, default_arguments:}, rpc:{arguments:a, default_arguments:a}, rpc_config:{arguments:a, b, default_arguments:a, b}, rpc_id:{arguments:a, b, default_arguments:a, b}, rpc_unreliable:{arguments:a, default_arguments:a}, rpc_unreliable_id:{arguments:a, b, default_arguments:a, b}, rset:{arguments:a, b, default_arguments:a, b}, rset_config:{arguments:a, b, default_arguments:a, b}, rset_id:{arguments:a, b, c, default_arguments:a, b, c}, rset_unreliable:{arguments:a, b, default_arguments:a, b}, rset_unreliable_id:{arguments:a, b, c, default_arguments:a, b, c}, set:{arguments:a, b, default_arguments:a, b}, set_block_signals:{arguments:a, default_arguments:a}, set_custom_multiplayer:{arguments:a, default_arguments:a}, set_deferred:{arguments:a, b, default_arguments:a, b}, set_display_folded:{arguments:a, default_arguments:a}, set_filename:{arguments:a, default_arguments:a}, set_indexed:{arguments:a, b, default_arguments:a, b}, set_message_translation:{arguments:a, default_arguments:a}, set_meta:{arguments:a, b, default_arguments:a, b}, set_name:{arguments:a, default_arguments:a}, set_network_master:{arguments:a, b, default_arguments:a, b = True}, set_owner:{arguments:a, default_arguments:a}, set_pause_mode:{arguments:a, default_arguments:a}, set_physics_process:{arguments:a, default_arguments:a}, set_physics_process_internal:{arguments:a, default_arguments:a}, set_process:{arguments:a, default_arguments:a}, set_process_input:{arguments:a, default_arguments:a}, set_process_internal:{arguments:a, default_arguments:a}, set_process_priority:{arguments:a, default_arguments:a}, set_process_unhandled_input:{arguments:a, default_arguments:a}, set_process_unhandled_key_input:{arguments:a, default_arguments:a}, set_scene_instance_load_placeholder:{arguments:a, default_arguments:a}, set_script:{arguments:a, default_arguments:a}, subtract:{arguments:a, b, default_arguments:a, b}, sum:{arguments:a, default_arguments:a}, to_string:{arguments:, default_arguments:}, tr:{arguments:a, default_arguments:a}, update_configuration_warning:{arguments:, default_arguments:}} != |Dictionary| {_enter_tree:{arguments:, default_arguments:}, _exit_tree:{arguments:, default_arguments:}, _get:{arguments:a, default_arguments:a}, _get_configuration_warning:{arguments:, default_arguments:}, _get_editor_description:{arguments:, default_arguments:}, _get_import_path:{arguments:, default_arguments:}, _get_property_list:{arguments:, default_arguments:}, _init:{arguments:, default_arguments:}, _input:{arguments:a, default_arguments:a}, _notification:{arguments:a, default_arguments:a}, _physics_process:{arguments:a, default_arguments:a}, _process:{arguments:a, default_arguments:a}, _ready:{arguments:, default_arguments:}, _set:{arguments:a, b, default_arguments:a, b}, _set_editor_description:{arguments:a, default_arguments:a}, _set_import_path:{arguments:a, default_arguments:a}, _to_string:{arguments:, default_arguments:}, _unhandled_input:{arguments:a, default_arguments:a}, _unhandled_key_input:{arguments:a, default_arguments:a}, add:{arguments:a, b, default_arguments:a, b}, add_child:{arguments:a, b, default_arguments:a, b = False}, add_child_below_node:{arguments:a, b, c, default_arguments:a, b, c = False}, add_to_group:{arguments:a, b, default_arguments:a, b = False}, add_user_signal:{arguments:a, b, default_arguments:a, b = []}, call:{arguments:a, default_arguments:a}, call_deferred:{arguments:a, default_arguments:a}, callv:{arguments:a, b, default_arguments:a, b}, can_process:{arguments:, default_arguments:}, can_translate_messages:{arguments:, default_arguments:}, connect:{arguments:a, b, c, d, e, default_arguments:a, b, c, d = [], e = 0}, disconnect:{arguments:a, b, c, default_arguments:a, b, c}, divide:{arguments:a, b, default_arguments:a, b}, duplicate:{arguments:a, default_arguments:a = 15}, emit_signal:{arguments:a, default_arguments:a}, find_node:{arguments:a, b, c, default_arguments:a, b = True, c = True}, find_parent:{arguments:a, default_arguments:a}, free:{arguments:, default_arguments:}, get:{arguments:a, default_arguments:a}, get_child:{arguments:a, default_arguments:a}, get_child_count:{arguments:, default_arguments:}, get_children:{arguments:, default_arguments:}, get_class:{arguments:, default_arguments:}, get_custom_multiplayer:{arguments:, default_arguments:}, get_filename:{arguments:, default_arguments:}, get_groups:{arguments:, default_arguments:}, get_incoming_connections:{arguments:, default_arguments:}, get_index:{arguments:, default_arguments:}, get_indexed:{arguments:a, default_arguments:a}, get_instance_id:{arguments:, default_arguments:}, get_meta:{arguments:a, default_arguments:a}, get_meta_list:{arguments:, default_arguments:}, get_method_list:{arguments:, default_arguments:}, get_multiplayer:{arguments:, default_arguments:}, get_name:{arguments:, default_arguments:}, get_network_master:{arguments:, default_arguments:}, get_node:{arguments:a, default_arguments:a}, get_node_and_resource:{arguments:a, default_arguments:a}, get_node_or_null:{arguments:a, default_arguments:a}, get_owner:{arguments:, default_arguments:}, get_parent:{arguments:, default_arguments:}, get_path:{arguments:, default_arguments:}, get_path_to:{arguments:a, default_arguments:a}, get_pause_mode:{arguments:, default_arguments:}, get_physics_process_delta_time:{arguments:, default_arguments:}, get_position_in_parent:{arguments:, default_arguments:}, get_process_delta_time:{arguments:, default_arguments:}, get_process_priority:{arguments:, default_arguments:}, get_property_list:{arguments:, default_arguments:}, get_scene_instance_load_placeholder:{arguments:, default_arguments:}, get_script:{arguments:, default_arguments:}, get_signal_connection_list:{arguments:a, default_arguments:a}, get_signal_list:{arguments:, default_arguments:}, get_tree:{arguments:, default_arguments:}, get_viewport:{arguments:, default_arguments:}, has_meta:{arguments:a, default_arguments:a}, has_method:{arguments:a, default_arguments:a}, has_node:{arguments:a, default_arguments:a}, has_node_and_resource:{arguments:a, default_arguments:a}, has_signal:{arguments:a, default_arguments:a}, has_user_signal:{arguments:a, default_arguments:a}, is_a_parent_of:{arguments:a, default_arguments:a}, is_blocking_signals:{arguments:, default_arguments:}, is_class:{arguments:a, default_arguments:a}, is_connected:{arguments:a, b, c, default_arguments:a, b, c}, is_displayed_folded:{arguments:, default_arguments:}, is_greater_than:{arguments:a, default_arguments:a}, is_in_group:{arguments:a, default_arguments:a}, is_inside_tree:{arguments:, default_arguments:}, is_network_master:{arguments:, default_arguments:}, is_physics_processing:{arguments:, default_arguments:}, is_physics_processing_internal:{arguments:, default_arguments:}, is_processing:{arguments:, default_arguments:}, is_processing_input:{arguments:, default_arguments:}, is_processing_internal:{arguments:, default_arguments:}, is_processing_unhandled_input:{arguments:, default_arguments:}, is_processing_unhandled_key_input:{arguments:, default_arguments:}, is_queued_for_deletion:{arguments:, default_arguments:}, math_fight:{arguments:, default_arguments:}, move_child:{arguments:a, b, default_arguments:a, b}, multiply:{arguments:a, b, default_arguments:a, b}, notification:{arguments:a, b, default_arguments:a, b = False}, pi:{arguments:, default_arguments:}, print_stray_nodes:{arguments:, default_arguments:}, print_tree:{arguments:, default_arguments:}, print_tree_pretty:{arguments:, default_arguments:}, propagate_call:{arguments:a, b, c, default_arguments:a, b = [], c = False}, propagate_notification:{arguments:a, default_arguments:a}, property_list_changed_notify:{arguments:, default_arguments:}, queue_free:{arguments:, default_arguments:}, raise:{arguments:, default_arguments:}, remove_and_skip:{arguments:, default_arguments:}, remove_child:{arguments:a, default_arguments:a}, remove_from_group:{arguments:a, default_arguments:a}, remove_meta:{arguments:a, default_arguments:a}, replace_by:{arguments:a, b, default_arguments:a, b = False}, request_ready:{arguments:, default_arguments:}, rpc:{arguments:a, default_arguments:a}, rpc_config:{arguments:a, b, default_arguments:a, b}, rpc_id:{arguments:a, b, default_arguments:a, b}, rpc_unreliable:{arguments:a, default_arguments:a}, rpc_unreliable_id:{arguments:a, b, default_arguments:a, b}, rset:{arguments:a, b, default_arguments:a, b}, rset_config:{arguments:a, b, default_arguments:a, b}, rset_id:{arguments:a, b, c, default_arguments:a, b, c}, rset_unreliable:{arguments:a, b, default_arguments:a, b}, rset_unreliable_id:{arguments:a, b, c, default_arguments:a, b, c}, set:{arguments:a, b, default_arguments:a, b}, set_block_signals:{arguments:a, default_arguments:a}, set_custom_multiplayer:{arguments:a, default_arguments:a}, set_deferred:{arguments:a, b, default_arguments:a, b}, set_display_folded:{arguments:a, default_arguments:a}, set_filename:{arguments:a, default_arguments:a}, set_indexed:{arguments:a, b, default_arguments:a, b}, set_message_translation:{arguments:a, default_arguments:a}, set_meta:{arguments:a, b, default_arguments:a, b}, set_name:{arguments:a, default_arguments:a}, set_network_master:{arguments:a, b, default_arguments:a, b = True}, set_owner:{arguments:a, default_arguments:a}, set_pause_mode:{arguments:a, default_arguments:a}, set_physics_process:{arguments:a, default_arguments:a}, set_physics_process_internal:{arguments:a, default_arguments:a}, set_process:{arguments:a, default_arguments:a}, set_process_input:{arguments:a, default_arguments:a}, set_process_internal:{arguments:a, default_arguments:a}, set_process_priority:{arguments:a, default_arguments:a}, set_process_unhandled_input:{arguments:a, default_arguments:a}, set_process_unhandled_key_input:{arguments:a, default_arguments:a}, set_scene_instance_load_placeholder:{arguments:a, default_arguments:a}, set_script:{arguments:a, default_arguments:a}, subtract:{arguments:a, b, default_arguments:a, b}, sum:{arguments:a, default_arguments:a}, to_string:{arguments:, default_arguments:}, tr:{arguments:a, default_arguments:a}, update_configuration_warning:{arguments:, default_arguments:}}",
"success": true
} ],
"context": "When we create two of it for the same script",
"fullname": "test_When_we_create_two_of_it_for_the_same_script",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|Object| [Node:1596] is equal to |Object| [Node:1596]",
"context": "Then we get the same double back",
"expected": "|Object| [Node:1596] is equal to |Object| [Node:1596]",
"success": true
} ],
"context": "When we call the double the second time",
"fullname": "test_When_we_call_double_a_second_time_on",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 3,
"path": "res://tests/integration/script_director.test.gd",
"source": {
"containers": [ "res://tests/integration", "res://tests" ],
"method": "",
"path": "res://tests/integration/script_director.test.gd",
"tags": [  ],
"test": ExtResource( 13 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 3
}, {
"context": "Given a Boolean Assertion",
"methods": [ {
"assertions": [ {
"actual": "|bool| True != false",
"context": "",
"expected": "|bool| True == false",
"success": false
} ],
"context": " intentional failure",
"fullname": "test_intentional_failure",
"passed": 0,
"success": false,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| False == false",
"context": "Then it passes",
"expected": "|bool| False == false",
"success": true
} ],
"context": "When calling asserts.is_false(false)",
"fullname": "test_when_calling_asserts_is_false",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then it passes",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When calling asserts.is_true(true)",
"fullname": "test_when_calling_asserts_is_true",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 2,
"path": "res://tests/unit/boolean.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/boolean.test.gd",
"tags": [  ],
"test": ExtResource( 11 ),
"yield_time": 0.0
},
"success": false,
"time_taken": 0.0,
"total": 3
}, {
"context": "Given an Equality Assertion",
"methods": [ {
"assertions": [ {
"actual": "|int| 2 is greater than |int| 1",
"context": "Then it passes",
"expected": "|int| 2 is greater than |int| 1",
"success": true
} ],
"context": "When calling asserts.is_greater_than(2, 1)",
"fullname": "test_when_calling_is_greater_than",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 2 is equal or greater |int| 1",
"context": "Then it passes",
"expected": "|int| 2 is equal or greater |int| 1",
"success": true
} ],
"context": "When calling asserts.is_equal_or_greater_than(2, 1)",
"fullname": "test_when_calling_is_equal_or_greater_than",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 1 is equal to |int| 1",
"context": "Then it passes",
"expected": "|int| 1 is equal to |int| 1",
"success": true
} ],
"context": "When calling asserts.is_equal(1, 1)",
"fullname": "test_when_calling_is_equal",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 1 is less than |int| 2",
"context": "Then it passes",
"expected": "|int| 1 is less than |int| 2",
"success": true
} ],
"context": "When calling asserts.is_less_than(2, 1)",
"fullname": "test_when_calling_is_less_than",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 1 is equal or greater |int| 1",
"context": "Then it passes",
"expected": "|int| 1 is equal or greater |int| 1",
"success": true
} ],
"context": "When calling asserts.is_equal_or_greater_than(1, 1)",
"fullname": "test_when_calling_is_equal_or_greater_than_with_equal_values",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 5 is not equal to |int| 6",
"context": "Then it passes",
"expected": "|int| 5 != |int| 6",
"success": true
} ],
"context": "When callign asserts.is_not_equal(5, 6)",
"fullname": "test_when_calling_is_not_equal",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 1 is equal or less than |int| 1",
"context": "Then it passes!",
"expected": "|int| 1 is equal or less than |int| 1",
"success": true
} ],
"context": "When calling asserts.is_equal_or_less_than(1, 1)",
"fullname": "test_when_calling_is_equal_or_less_than_with_equal_values",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 7,
"path": "res://tests/unit/equality.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/equality.test.gd",
"tags": [  ],
"test": ExtResource( 8 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 7
}, {
"context": "Given A File Assertion",
"methods": [ {
"assertions": [ {
"actual": "res://tests/unit/file.test.gd exists",
"context": "Then it passes",
"expected": "res://tests/unit/file.test.gd exists",
"success": true
} ],
"context": "When calling asserts.file_exists when the file is this suite",
"fullname": "test_when_calling_file_exists_when_file_is_self",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": " does not exist",
"context": "Then it passes",
"expected": " does not exist",
"success": true
} ],
"context": "When calling asserts file does not exist when path is empty",
"fullname": "test_when_calling_file_does_not_exist_when_path_is_empty",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "res://somefile.gd does not exist",
"context": "Then it passes",
"expected": "res://somefile.gd does not exist",
"success": true
} ],
"context": "When calling asserts.file_does_not_exist when there is no file",
"fullname": "test_when_calling_file_does_not_exist_when_there_is_no_file",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 3,
"path": "res://tests/unit/file.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/file.test.gd",
"tags": [  ],
"test": ExtResource( 3 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 3
}, {
"context": "Given a Test Double",
"methods": [ {
"assertions": [ {
"actual": "|int| 4 is equal to |int| 4",
"context": "Then we get the correct result",
"expected": "|int| 4 is equal to |int| 4",
"success": true
} ],
"context": "When we call an add(x, y) method that we haven't directed",
"fullname": "test_When_we_call_an_add_method_that_we_have_not_directed",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|null| Null == null",
"context": "Then we get null",
"expected": "|null| Null == null",
"success": true
} ],
"context": "When we call a method that we have dummied",
"fullname": "test_When_we_call_a_method_that_we_have_dummied",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|String| Jackie is equal to |String| Jackie",
"context": "Then we can double the object successfully",
"expected": "|String| Jackie is equal to |String| Jackie",
"success": true
} ],
"context": "When we pass in dependecies on direct",
"fullname": "test_When_we_pass_in_deps_on_direct",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "add was called",
"context": "Then we can see that it was called at least once",
"expected": "add was called",
"success": true
} ],
"context": "When we call a method that we are spying on",
"fullname": "test_When_we_call_a_method_that_we_are_spying_on",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|String| Jackie is equal to |String| Jackie",
"context": "Then we can double the object successfully",
"expected": "|String| Jackie is equal to |String| Jackie",
"success": true
} ],
"context": "When we pass in dependecies on double",
"fullname": "test_When_we_pass_in_deps_on_double",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "method: add was called with arguments: [10, 10]",
"context": "Then we can see that it was called with those arguments",
"expected": "method: add was called with arguments: [10, 10]",
"success": true
} ],
"context": "When we pass arguments to a method call that we are spying on",
"fullname": "test_When_we_pass_arguments_to_a_method_call_that_we_are_spying_on",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 100 is equal to |int| 100",
"context": "Then it returns the default stubbed value when the arguments don't match any pattern",
"expected": "|int| 100 is equal to |int| 100",
"success": true
}, {
"actual": "|int| 1000 is equal to |int| 1000",
"context": "Then it returns the the corresponding value to the pattern the arguments matched",
"expected": "|int| 1000 is equal to |int| 1000",
"success": true
} ],
"context": "When we call a method that was stubbed to return different values based on argument patterns",
"fullname": "test_When_we_call_a_method_that_was_stubbed_to_return_different_values_based_on_argument_patterns",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|bool| True is equal to |bool| True",
"context": "Then we can call it",
"expected": "|bool| True is equal to |bool| True",
"success": true
} ],
"context": "When we stubbed a keyworded method by passing in the correct keyword",
"fullname": "test_When_we_stubbed_a_keyword_method_by_passing_in_the_correct_keyword",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|Array| [10, 5] is equal to |Array| [10, 5]",
"context": "Then it returns a value",
"expected": "|Array| [10, 5] is equal to |Array| [10, 5]",
"success": true
} ],
"context": "When we pass an Object with a call_func function",
"fullname": "test_When_we_pass_an_object_with_callfunc_method_as_a_subcall",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "(1, 1) is builtin: Vector2",
"context": "Then we can call methods on it",
"expected": "(1, 1) is builtin: Vector2",
"success": true
} ],
"context": "When we double an inner class",
"fullname": "test_When_we_double_an_inner_class",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|null| Null == null",
"context": "Then we get the stubbed value back",
"expected": "|null| Null == null",
"success": true
} ],
"context": "When we stub a method of a doubled inner class",
"fullname": "test_When_we_stub_a_method_of_a_double_inner_class",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|Object| [Node:1679] is equal to |Object| [Node:1679]",
"context": "Then it returns that same node",
"expected": "|Object| [Node:1679] is equal to |Object| [Node:1679]",
"success": true
} ],
"context": "When we call a method that we have stubbed to return a node",
"fullname": "test_When_we_call_a_method_that_we_have_stubbed_to_return_a_node",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then it returns true",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we call a method that we have stubbed to return true",
"fullname": "test_When_we_call_a_method_that_we_have_stubbed_to_return_true",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|float| 6.283185 is equal to |float| 6.283185",
"context": "Then we can call the static methods of that inner double",
"expected": "|float| 6.283185 is equal to |float| 6.283185",
"success": true
} ],
"context": "When we add an doubled inner class to it",
"fullname": "test_When_we_add_a_doubled_inner_class_to_it",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 9999 is equal to |int| 9999",
"context": "Then it returns the corresponding value when the pattern matches",
"expected": "|int| 9999 is equal to |int| 9999",
"success": true
} ],
"context": "When we call a method that was stubbed with an argument pattern that includes a non-primitive object",
"fullname": "test_When_we_call_a_method_that_was_stubbed_with_an_argument_pattern_that_includes_a_non_primitive_object",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 9999 is equal to |int| 9999",
"context": "Then it returns the corresponding value when the partial pattern matches",
"expected": "|int| 9999 is equal to |int| 9999",
"success": true
} ],
"context": "When we call a method that was stubbed with a partial (ie using any()) argument pattern",
"fullname": "test_When_we_call_a_method_that_was_stubbed_with_a_partial_argument_pattern",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 99 is equal to |int| 99",
"context": "Then it affects the state of the double",
"expected": "|int| 99 is equal to |int| 99",
"success": true
} ],
"context": "When we pass a funcref as a subcall",
"fullname": "test_When_we_pass_a_funcref_as_a_subcall",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 99 is equal to |int| 99",
"context": "Then it returns a value",
"expected": "|int| 99 is equal to |int| 99",
"success": true
} ],
"context": "When we pass a funcref as a subcall that returns",
"fullname": "test_When_we_pass_a_funcref_as_a_subcall_that_returns_a_value",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 4 is equal to |int| 4",
"context": "Then it calls its super implementation by default",
"expected": "|int| 4 is equal to |int| 4",
"success": true
}, {
"actual": "|int| 9999 is equal to |int| 9999",
"context": "Then it does not call its super implementation when arguments patterns match a different return value",
"expected": "|int| 9999 is equal to |int| 9999",
"success": true
} ],
"context": "When we call a method that we stubbed to call its super implementation by default",
"fullname": "test_When_we_call_a_method_that_we_stubbed_to_call_its_super_implementation_by_default",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
} ],
"passed": 19,
"path": "res://tests/integration/test_double.test.gd",
"source": {
"containers": [ "res://tests/integration", "res://tests" ],
"method": "",
"path": "res://tests/integration/test_double.test.gd",
"tags": [  ],
"test": ExtResource( 14 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 19
}, {
"context": "Given an Is Instance of class/type Assertion",
"methods": [ {
"assertions": [ {
"actual": "|AABB| 0, 0, 0 - 0, 0, 0 != null",
"context": "AABB is not null",
"expected": "|AABB| 0, 0, 0 - 0, 0, 0 != null",
"success": true
}, {
"actual": "0, 0, 0 - 0, 0, 0 is builtin: AABB",
"context": "Then it passes",
"expected": "0, 0, 0 - 0, 0, 0 is builtin: AABB",
"success": true
} ],
"context": "When calling asserts.is_AABB(aabb: AABB)",
"fullname": "test_when_calling_is_AABB",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|Array| [] != null",
"context": "array is not null",
"expected": "|Array| [] != null",
"success": true
}, {
"actual": "[] is builtin: Array",
"context": "Then it passes",
"expected": "[] is builtin: Array",
"success": true
} ],
"context": "When calling asserts.is_Array(array: Array)",
"fullname": "test_when_calling_is_Array",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|Color| 0,0,0,1 != null",
"context": "color is not null",
"expected": "|Color| 0,0,0,1 != null",
"success": true
}, {
"actual": "0,0,0,1 is builtin: Color",
"context": "Then it passes",
"expected": "0,0,0,1 is builtin: Color",
"success": true
} ],
"context": "When calling asserts.is_color(color: Color)",
"fullname": "test_when_calling_is_Color",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|Plane| 0, 0, 0, 0 != null",
"context": "plane is not null",
"expected": "|Plane| 0, 0, 0, 0 != null",
"success": true
}, {
"actual": "0, 0, 0, 0 is builtin: Plane",
"context": "then it passes",
"expected": "0, 0, 0, 0 is builtin: Plane",
"success": true
} ],
"context": "When calling asserts.is_Plane(plane: Plane())",
"fullname": "test_when_calling_is_Plane",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|Quat| (0, 0, 0, 1) != null",
"context": "quat is not null",
"expected": "|Quat| (0, 0, 0, 1) != null",
"success": true
}, {
"actual": "(0, 0, 0, 1) is builtin: Quat",
"context": "Then it passes",
"expected": "(0, 0, 0, 1) is builtin: Quat",
"success": true
} ],
"context": "When calling asserts.is_Quat(quat: Quat)",
"fullname": "test_when_calling_is_Quat",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|Transform2D| ((1, 0), (0, 1), (0, 0)) != null",
"context": "transform2D is not null",
"expected": "|Transform2D| ((1, 0), (0, 1), (0, 0)) != null",
"success": true
}, {
"actual": "((1, 0), (0, 1), (0, 0)) is builtin: Transform2D",
"context": "Then it passes",
"expected": "((1, 0), (0, 1), (0, 0)) is builtin: Transform2D",
"success": true
} ],
"context": "When calling asserts.is_Transform(transform2D: Transform2D)",
"fullname": "test_when_calling_is_Transform2D",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|Basis| ((1, 0, 0), (0, 1, 0), (0, 0, 1)) != null",
"context": "basis is not null",
"expected": "|Basis| ((1, 0, 0), (0, 1, 0), (0, 0, 1)) != null",
"success": true
}, {
"actual": "((1, 0, 0), (0, 1, 0), (0, 0, 1)) is builtin: Basis",
"context": "Then it passes",
"expected": "((1, 0, 0), (0, 1, 0), (0, 0, 1)) is builtin: Basis",
"success": true
} ],
"context": "When calling asserts.is_basis(basis: Basis",
"fullname": "test_when_calling_is_Basis",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|PoolRealArray| [] != null",
"context": "reals is not null",
"expected": "|PoolRealArray| [] != null",
"success": true
}, {
"actual": "[] is builtin: PoolRealArray",
"context": "Then it passes",
"expected": "[] is builtin: PoolRealArray",
"success": true
} ],
"context": "When calling is asserts.is_PoolRealArray(reals: PoolRealArray)",
"fullname": "test_when_calling_is_PoolRealArray",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "1 is builtin: int",
"context": "Then it passes",
"expected": "1 is builtin: int",
"success": true
} ],
"context": "When callign asserts.is_int(1)",
"fullname": "test_when_calling_is_int",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|PoolVector3Array| [] != null",
"context": "vec3s is not null",
"expected": "|PoolVector3Array| [] != null",
"success": true
}, {
"actual": "[] is builtin: PoolVector3Array",
"context": "Then it passes",
"expected": "[] is builtin: PoolVector3Array",
"success": true
} ],
"context": "When calling is asserts.is_PoolVector3Array(vec3s: PoolVector3Array)",
"fullname": "test_when_calling_is_PoolVector3Array",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|NodePath| . != null",
"context": "@'Parent/Child' is not null",
"expected": "|NodePath| . != null",
"success": true
}, {
"actual": ". is builtin: NodePath",
"context": "Then it passes",
"expected": ". is builtin: NodePath",
"success": true
} ],
"context": "When calling asserts.is_NodePath(@'Parent/Child')",
"fullname": "test_when_calling_is_NodePath",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|PoolIntArray| [] != null",
"context": "ints is not null",
"expected": "|PoolIntArray| [] != null",
"success": true
}, {
"actual": "[] is builtin: PoolIntArray",
"context": "Then it passes",
"expected": "[] is builtin: PoolIntArray",
"success": true
} ],
"context": "When calling asserts.is_PoolIntArray(ints: PoolIntArray)",
"fullname": "test_when_calling_is_PoolIntArray",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "{} is builtin: Dictionary",
"context": "Then it passes",
"expected": "{} is builtin: Dictionary",
"success": true
} ],
"context": "When calling asserts.is_Dictionary({})",
"fullname": "test_when_calling_is_Dictionary",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "1 is builtin: float",
"context": "Then it passes",
"expected": "1 is builtin: float",
"success": true
} ],
"context": "When calling asserts.is_float(1.0)",
"fullname": "test_when_calling_is_float",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|PoolVector2Array| [] != null",
"context": "vec2s is not null",
"expected": "|PoolVector2Array| [] != null",
"success": true
}, {
"actual": "[] is builtin: PoolVector2Array",
"context": "Then it passes",
"expected": "[] is builtin: PoolVector2Array",
"success": true
} ],
"context": "When calling is asserts.is_PoolVector2Array(vec2s: PoolVector2Array)",
"fullname": "test_when_calling_is_PoolVector2Array",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|Rect2| (0, 0, 0, 0) != null",
"context": "rect2 is not null",
"expected": "|Rect2| (0, 0, 0, 0) != null",
"success": true
}, {
"actual": "(0, 0, 0, 0) is builtin: Rect2",
"context": "Then it passes",
"expected": "(0, 0, 0, 0) is builtin: Rect2",
"success": true
} ],
"context": "When calling asserts.is_Rect2(rect2: Rect2)",
"fullname": "test_when_calling_is_Rect2",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "True is builtin: bool",
"context": "Then it passes",
"expected": "True is builtin: bool",
"success": true
} ],
"context": "When calling asserts.is_bool(true)",
"fullname": "test_when_calling_is_bool",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|String|  != null",
"context": "strs is not null",
"expected": "|String|  != null",
"success": true
}, {
"actual": " is builtin: String",
"context": "Then it passes",
"expected": " is builtin: String",
"success": true
} ],
"context": "When calling asserts.is_string(strs: String)",
"fullname": "test_when_calling_is_string",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|Transform| 1, 0, 0, 0, 1, 0, 0, 0, 1 - 0, 0, 0 != null",
"context": "transform is not null",
"expected": "|Transform| 1, 0, 0, 0, 1, 0, 0, 0, 1 - 0, 0, 0 != null",
"success": true
}, {
"actual": "1, 0, 0, 0, 1, 0, 0, 0, 1 - 0, 0, 0 is builtin: Transform",
"context": "Then it passes",
"expected": "1, 0, 0, 0, 1, 0, 0, 0, 1 - 0, 0, 0 is builtin: Transform",
"success": true
} ],
"context": "When calling asserts.is_Transform(transform: Transform)",
"fullname": "test_when_calling_is_Transform",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|Vector3| (0, 0, 0) != null",
"context": "vec3 is not null",
"expected": "|Vector3| (0, 0, 0) != null",
"success": true
}, {
"actual": "(0, 0, 0) is builtin: Vector3",
"context": "Then it passes",
"expected": "(0, 0, 0) is builtin: Vector3",
"success": true
} ],
"context": "When calling asserts.is_Vector3(vec3: Vector3",
"fullname": "test_when_calling_is_Vector3",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|Vector2| (0, 0) != null",
"context": "vec2 is not null",
"expected": "|Vector2| (0, 0) != null",
"success": true
}, {
"actual": "(0, 0) is builtin: Vector2",
"context": "Then it passes",
"expected": "(0, 0) is builtin: Vector2",
"success": true
} ],
"context": "When calling asserts.is_Vector2(vec2)",
"fullname": "test_when_calling_is_Vector2",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|RID| [RID] != null",
"context": "rid is not null",
"expected": "|RID| [RID] != null",
"success": true
}, {
"actual": "[RID] is builtin: RID",
"context": "Then it passes",
"expected": "[RID] is builtin: RID",
"success": true
} ],
"context": "When calling asserts.is_RID(rid: RID)",
"fullname": "test_when_calling_is_RID",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|Object| [Node:1789] != null",
"context": "node is not null",
"expected": "|Object| [Node:1789] != null",
"success": true
}, {
"actual": "[Node:1789] is builtin: Object",
"context": "An instance of node is an Object",
"expected": "[Node:1789] is builtin: Object",
"success": true
} ],
"context": "When calling is asserts.object(node: Node)",
"fullname": "test_when_calling_is_object",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|PoolColorArray| [PoolColorArray] != null",
"context": "colors is not null",
"expected": "|PoolColorArray| [PoolColorArray] != null",
"success": true
}, {
"actual": "[PoolColorArray] is builtin: PoolColorArray",
"context": "Then it passes",
"expected": "[PoolColorArray] is builtin: PoolColorArray",
"success": true
} ],
"context": "When calling asserts.is_PoolColorArray(colors: PoolColorArray)",
"fullname": "test_when_calling_is_PoolColorArray",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|PoolByteArray| [PoolByteArray] != null",
"context": "bytes is not null",
"expected": "|PoolByteArray| [PoolByteArray] != null",
"success": true
}, {
"actual": "[PoolByteArray] is builtin: PoolByteArray",
"context": "Then it passes",
"expected": "[PoolByteArray] is builtin: PoolByteArray",
"success": true
} ],
"context": "When calling asserts.is_PoolByteArray(bytes: PoolByteArray)",
"fullname": "test_when_calling_is_PoolByteArray",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|PoolStringArray| [] != null",
"context": "strs is not null",
"expected": "|PoolStringArray| [] != null",
"success": true
}, {
"actual": "[] is builtin: PoolStringArray",
"context": "Then it passes",
"expected": "[] is builtin: PoolStringArray",
"success": true
} ],
"context": "When calling is asserts.is_PoolStringArray(strs: PoolStringArray)",
"fullname": "test_when_calling_is_PoolStringArray",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
} ],
"passed": 26,
"path": "res://tests/unit/is_instance.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/is_instance.test.gd",
"tags": [  ],
"test": ExtResource( 6 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 26
}, {
"context": "Given a Null Assertion",
"methods": [ {
"assertions": [ {
"actual": "|Object| [Node:1818] != null",
"context": "Then it passes",
"expected": "|Object| [Node:1818] != null",
"success": true
} ],
"context": "When calling Node is not null",
"fullname": "test_when_calling_node_is_not_null",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|null| Null == null",
"context": "Then it passes",
"expected": "|null| Null == null",
"success": true
} ],
"context": "When calling asserts.is_null(null)",
"fullname": "test_when_calling_null_is_null",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|Object| [Deleted Object] == null",
"context": "A Freed Node is null in Engine 3.2.2 or greater",
"expected": "|Object| [Deleted Object] == null",
"success": true
} ],
"context": "When calling freed object is null",
"fullname": "test_when_calling_freed_object_is_not_null",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 3,
"path": "res://tests/unit/null.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/null.test.gd",
"tags": [  ],
"test": ExtResource( 12 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 3
}, {
"context": "Given an Is Not Instance of class/type Assertion",
"methods": [ {
"assertions": [ {
"actual": "Null is not builtin: Basis",
"context": "Then it passes",
"expected": "Null is not builtin: Basis",
"success": true
} ],
"context": "when calling asserts.is_not_Basis(null)",
"fullname": "test_when_calling_is_not_Basis",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: float",
"context": "Then it passes",
"expected": "Null is not builtin: float",
"success": true
} ],
"context": "when calling asserts.is_not_float(null)",
"fullname": "test_when_calling_is_not_float",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: AABB",
"context": "Then it passes",
"expected": "Null is not builtin: AABB",
"success": true
} ],
"context": "when calling asserts.is_not_AABB(null)",
"fullname": "test_when_calling_is_not_AABB",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Dictionary",
"context": "Then it passes",
"expected": "Null is not builtin: Dictionary",
"success": true
} ],
"context": "when calling asserts.is_not_Dictionary(null)",
"fullname": "test_when_calling_is_not_Dictionary",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: int",
"context": "Then it passes",
"expected": "Null is not builtin: int",
"success": true
} ],
"context": "when calling asserts.is_not_int(null)",
"fullname": "test_when_calling_is_not_int",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Color",
"context": "Then it passes",
"expected": "Null is not builtin: Color",
"success": true
} ],
"context": "when calling asserts.is_not_Color(null)",
"fullname": "test_when_calling_is_not_Color",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Array",
"context": "Then it passes",
"expected": "Null is not builtin: Array",
"success": true
} ],
"context": "when calling asserts.is_not_Array(null)",
"fullname": "test_when_calling_is_not_Array",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: bool",
"context": "Then it passes",
"expected": "Null is not builtin: bool",
"success": true
} ],
"context": "when calling asserts.is_not_bool(null)",
"fullname": "test_when_calling_is_not_bool",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: NodePath",
"context": "Then it passes",
"expected": "Null is not builtin: NodePath",
"success": true
} ],
"context": "when calling asserts.is_not_NodePath(null)",
"fullname": "test_when_calling_is_not_NodePath",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Object",
"context": "Then it passes",
"expected": "Null is not builtin: Object",
"success": true
} ],
"context": "when calling asserts.is_not_Object(null)",
"fullname": "test_when_calling_is_not_Object",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: String",
"context": "Then it passes",
"expected": "Null is not builtin: String",
"success": true
} ],
"context": "when calling asserts.is_not_String(null)",
"fullname": "test_when_calling_is_not_String",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: PoolVector2Array",
"context": "Then it passes",
"expected": "Null is not builtin: PoolVector2Array",
"success": true
} ],
"context": "when calling asserts.is_not_PoolVector2Array(null)",
"fullname": "test_when_calling_is_not_PoolVector2Array",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Quat",
"context": "Then it passes",
"expected": "Null is not builtin: Quat",
"success": true
} ],
"context": "when calling asserts.is_not_Quat(null)",
"fullname": "test_when_calling_is_not_Quat",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: PoolColorArray",
"context": "Then it passes",
"expected": "Null is not builtin: PoolColorArray",
"success": true
} ],
"context": "when calling asserts.is_not_PoolColorArray(null)",
"fullname": "test_when_calling_is_not_PoolColorArray",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: PoolIntArray",
"context": "Then it passes",
"expected": "Null is not builtin: PoolIntArray",
"success": true
} ],
"context": "when calling asserts.is_not_PoolIntArray(null)",
"fullname": "test_when_calling_is_not_PoolIntArray",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Plane",
"context": "Then it passes",
"expected": "Null is not builtin: Plane",
"success": true
} ],
"context": "when calling asserts.is_not_Plane(null)",
"fullname": "test_when_calling_is_not_Plane",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Transform2D",
"context": "Then it passes",
"expected": "Null is not builtin: Transform2D",
"success": true
} ],
"context": "when calling asserts.is_not_Transform2D(null)",
"fullname": "test_when_calling_is_not_Transform2D",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: RID",
"context": "Then it passes",
"expected": "Null is not builtin: RID",
"success": true
} ],
"context": "when calling asserts.is_not_RID(null)",
"fullname": "test_when_calling_is_not_RID",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: PoolRealArray",
"context": "Then it passes",
"expected": "Null is not builtin: PoolRealArray",
"success": true
} ],
"context": "when calling asserts.is_not_PoolRealArray(null)",
"fullname": "test_when_calling_is_not_PoolRealArray",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Transform",
"context": "Then it passes",
"expected": "Null is not builtin: Transform",
"success": true
} ],
"context": "when calling asserts.is_not_Transform(null)",
"fullname": "test_when_calling_is_not_Transform",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Vector2",
"context": "Then it passes",
"expected": "Null is not builtin: Vector2",
"success": true
} ],
"context": "when calling asserts.is_not_Vector2(null)",
"fullname": "test_when_calling_is_not_Vector2",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Rect2",
"context": "Then it passes",
"expected": "Null is not builtin: Rect2",
"success": true
} ],
"context": "when calling asserts.is_not_Rect2(null)",
"fullname": "test_when_calling_is_not_Rect2",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: PoolStringArray",
"context": "Then it passes",
"expected": "Null is not builtin: PoolStringArray",
"success": true
} ],
"context": "when calling asserts.is_not_PoolStringArray(null)",
"fullname": "test_when_calling_is_not_PoolStringArray",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: PoolByteArray",
"context": "Then it passes",
"expected": "Null is not builtin: PoolByteArray",
"success": true
} ],
"context": "when calling asserts.is_not_PoolByteArray(null)",
"fullname": "test_when_calling_is_not_PoolByteArray",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Vector3",
"context": "Then it passes",
"expected": "Null is not builtin: Vector3",
"success": true
} ],
"context": "when calling asserts.is_not_Vector3(null)",
"fullname": "test_when_calling_is_not_Vector3",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: PoolVector3Array",
"context": "Then it passes",
"expected": "Null is not builtin: PoolVector3Array",
"success": true
} ],
"context": "when calling asserts.is_not_PoolVector3Array(null)",
"fullname": "test_when_calling_is_not_PoolVector3Array",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 26,
"path": "res://tests/unit/is_not_instance.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/is_not_instance.test.gd",
"tags": [  ],
"test": ExtResource( 2 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 26
}, {
"context": "Given the Addition Operator",
"methods": [ {
"assertions": [ {
"actual": "|int| 0 is equal to |int| 0",
"context": "",
"expected": "|int| 0 is equal to |int| 0",
"success": true
} ],
"context": "When we subtract 2 from 2 we get 0",
"fullname": "test_subtract",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 2 is equal to |int| 2",
"context": "",
"expected": "|int| 2 is equal to |int| 2",
"success": true
} ],
"context": "When we subtract 5 from 3 we get 2",
"fullname": "test_subtract",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 1 is equal to |int| 1",
"context": "",
"expected": "|int| 1 is equal to |int| 1",
"success": true
} ],
"context": "When we subtract 7 from 6 we get 1",
"fullname": "test_subtract",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 4 is equal to |int| 4",
"context": "",
"expected": "|int| 4 is equal to |int| 4",
"success": true
} ],
"context": "When we add 2 to 2 we get 4",
"fullname": "test_add",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 8 is equal to |int| 8",
"context": "",
"expected": "|int| 8 is equal to |int| 8",
"success": true
} ],
"context": "When we add 5 to 3 we get 8",
"fullname": "test_add",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 13 is equal to |int| 13",
"context": "",
"expected": "|int| 13 is equal to |int| 13",
"success": true
} ],
"context": "When we add 7 to 6 we get 13",
"fullname": "test_add",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 6,
"path": "res://tests/unit/parameters.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/parameters.test.gd",
"tags": [  ],
"test": ExtResource( 16 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 6
}, {
"context": "Given an Object Assertion",
"methods": [ {
"assertions": [ {
"actual": "Null is freed from memory",
"context": "Then it passes",
"expected": "Null is freed from memory",
"success": true
} ],
"context": "When calling asserts.is_freed(freed_object",
"fullname": "test_when_calling_freed_object_is_freed",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:1857] is not freed",
"context": "Then it passes",
"expected": "[Node:1857] is not freed",
"success": true
} ],
"context": "When calling asserts.is_not_freed(unfreed_object)",
"fullname": "test_when_calling_unfreed_object_is_not_freed",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:1826] has meta: dummy",
"context": "Then it passes",
"expected": "[Node:1826] has meta: dummy",
"success": true
}, {
"actual": "[Node:1826] has meta: dummy",
"context": "Then it passes",
"expected": "[Node:1826] has meta: dummy",
"success": true
} ],
"context": "When calling asserts.object_has_meta() after adding metadata",
"fullname": "test_when_calling_has_meta_after_adding_metadata",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "[Node:1826] has method: title",
"context": "Then it passes",
"expected": "[Node:1826] has method: title",
"success": true
} ],
"context": "When calling has_method('title')",
"fullname": "test_when_calling_has_method_title",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:1826] has user signal: dummy_signal",
"context": "Then it passes",
"expected": "[Node:1826] has user signal: dummy_signal",
"success": true
} ],
"context": "When calling obj_has_user_signal after adding a signal",
"fullname": "test_when_calling_has_user_signal_after_adding_a_signal",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:1826] does not have meta: confusing",
"context": "Then it passes",
"expected": "[Node:1826] does not have meta: confusing",
"success": true
} ],
"context": "When calling asserts.object_has_meta with real key but null val",
"fullname": "test_when_calling_does_not_have_meta_real_key_null_value_pair",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:1826] does not have user signal: false_signal",
"context": "Then it passes",
"expected": "[Node:1826] does not have user signal: false_signal",
"success": true
} ],
"context": "When calling obj_does_not_have_user_signal with fake signal",
"fullname": "test_when_calling_does_not_have_user_signal",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:1826] does not have meta: bad_meta",
"context": "Then it passes",
"expected": "[Node:1826] does not have meta: bad_meta",
"success": true
} ],
"context": "When calling asserts.object_does_not_have_meta()",
"fullname": "test_when_calling_does_not_have_meta",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:1871] is queued for deletion",
"context": "Then it passes",
"expected": "[Node:1871] is queued for deletion",
"success": true
} ],
"context": "When calling asserts.object_is_queued for deletion after calling queue_free",
"fullname": "test_when_calling_obj_is_queued_for_deletion_after_calling_queue_free",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:1873] is blocking signals",
"context": "Then it passes",
"expected": "[Node:1873] is blocking signals",
"success": true
} ],
"context": "When calling is blocking signals while blocking signals",
"fullname": "test_is_blocking_signals",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:1875] is not queued for deletion",
"context": "Then it passes",
"expected": "[Node:1875] is not queued for deletion",
"success": true
} ],
"context": "When calling asserts.object_is_not_for_queued_deletion after not calling queue free()",
"fullname": "test_when_calling_obj_is_not_for_queued_deletion_after_not_calling_queue_free",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:1826].builtin_dummy is connected to [Node:1826].title",
"context": "Then it passes",
"expected": "[Node:1826].builtin_dummy is connected to [Node:1826].title",
"success": true
} ],
"context": "When calling asserts object is connected with a valid connection",
"fullname": "test_when_calling_obj_is_connected_with_a_real_connection",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:1826].builtin_dummy is not connected to [Node:1826].title",
"context": "Then it passes",
"expected": "[Node:1826].builtin_dummy is not connected to [Node:1826].title",
"success": true
} ],
"context": "When calling asserts object is not connected with an invalid connection",
"fullname": "test_when_calling_obj_is_not_connected_with_an_invalid_connection",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:1879] is not blocking signals",
"context": "Then it passes",
"expected": "[Node:1879] is not blocking signals",
"success": true
} ],
"context": "When calling is not blocking signals while not blocking signals",
"fullname": "test_is_not_blocking_signals",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:1826] does not have user signal: builtin_dummy",
"context": "Then it passes",
"expected": "[Node:1826] does not have user signal: builtin_dummy",
"success": true
} ],
"context": "When calling does not have user signal with class signal",
"fullname": "test_when_calling_does_not_have_user_signal_with_class_signal_constant",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 15,
"path": "res://tests/unit/object.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/object.test.gd",
"tags": [  ],
"test": ExtResource( 7 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 15
}, {
"context": "Given A Range Assertion",
"methods": [ {
"assertions": [ {
"actual": "0 is in range(0, 10)",
"context": "Then it passes",
"expected": "0 is in range(0, 10)",
"success": true
} ],
"context": "When calling is (0) in range(0, 10)",
"fullname": "test_when_calling_is_in_range",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "10 is not in range(0, 10)",
"context": "Then it passes",
"expected": "10 is not in range(0, 10)",
"success": true
} ],
"context": "When calling is (10) not in range (in range(0, 10)",
"fullname": "test_when_calling_is_not_in_range",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 2,
"path": "res://tests/unit/range.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/range.test.gd",
"tags": [  ],
"test": ExtResource( 15 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 2
}, {
"context": "Given a String Assertion",
"methods": [ {
"assertions": [ {
"actual": "impsum does not begin with bleh lorem",
"context": "Then it passes",
"expected": "impsum does not begin with bleh lorem",
"success": true
} ],
"context": "When calling asserts.string_does_not_begin_with('lorem', 'impsum')",
"fullname": "test_when_calling_string_does_not_begin_with",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "lorem impsum begins with lorem",
"context": "Then it passes",
"expected": "lorem impsum begins with lorem",
"success": true
} ],
"context": "When calling asserts.string_begins_with('lorem', 'lorem impsum')",
"fullname": "test_when_calling_string_begins_with",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "lorem impsum ends with impsum",
"context": "Then it passes",
"expected": "lorem impsum ends with impsum",
"success": true
} ],
"context": "When calling asserts.string_ends_with('impsum', 'lorem impsum')",
"fullname": "test_when_calling_string_ends_with",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "lorem impsum contains em im",
"context": "Then it passes",
"expected": "lorem impsum contains em im",
"success": true
} ],
"context": "When calling asserts.string_contains('em im', 'lorem impsum')",
"fullname": "test_when_calling_string_contains",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "impsum does not end with lorem",
"context": "Then it passes",
"expected": "impsum does not end with lorem",
"success": true
} ],
"context": "When calling asserts.string_does_not_end_with('lorem', 'impsum')",
"fullname": "test_when_calling_string_does_not_end_with",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "impsum does not contain beem im",
"context": "Then it passes",
"expected": "impsum does not contain beem im",
"success": true
} ],
"context": "When calling asserts.string_does_not_contain('em im', 'impsum')",
"fullname": "test_when_calling_string_does_not_contain",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 6,
"path": "res://tests/unit/string.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/string.test.gd",
"tags": [  ],
"test": ExtResource( 9 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 6
}, {
"context": "Dummy Test 2",
"methods": [ {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Passing!",
"expected": "|bool| True == true",
"success": true
} ],
"context": "This method passes",
"fullname": "test_this_method_passes",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 1,
"path": "res://tests/unit/suite.test.gd.DummyTwo",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/suite.test.gd.DummyTwo",
"tags": [  ],
"test": SubResource( 9 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 1
}, {
"context": "Dummy Passing Test",
"methods": [ {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Passing!",
"expected": "|bool| True == true",
"success": true
} ],
"context": "This method passes",
"fullname": "test_this_method_passes",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 1,
"path": "res://tests/unit/suite.test.gd.DummyOne",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/suite.test.gd.DummyOne",
"tags": [  ],
"test": SubResource( 10 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 1
}, {
"context": "Given a Test Script",
"methods": [ {
"assertions": [ {
"actual": "|bool| True == true",
"context": "if the test didn't break this works",
"expected": "|bool| True == true",
"success": true
} ],
"context": " we can omit describe",
"fullname": "test_we_can_omit_describe",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|int| 2 is equal to |int| 2",
"context": "",
"expected": "|int| 2 is equal to |int| 2",
"success": true
} ],
"context": " when we omit context we can see expected and got under method",
"fullname": "test_when_we_omit_context_we_can_see_expected_and_got_under_method",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|int| 10 is greater than |int| 1",
"context": "We get an array of multiple values back",
"expected": "|int| 10 is greater than |int| 1",
"success": true
}, {
"actual": "|int| 0 is not equal to |int| 9",
"context": "With different values",
"expected": "|int| 0 != |int| 9",
"success": true
}, {
"actual": "|int| 10 is greater than |int| 1",
"context": "And we can track multiple properties",
"expected": "|int| 10 is greater than |int| 1",
"success": true
} ],
"context": "When we record properties",
"fullname": "test_we_can_record_properties",
"passed": 3,
"success": true,
"time": 0.0,
"total": 3
} ],
"passed": 3,
"path": "res://tests/unit/test.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/test.test.gd",
"tags": [  ],
"test": ExtResource( 19 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 3
}, {
"context": "Given a Signal Watcher",
"methods": [ {
"assertions": [ {
"actual": "signal: example was emitted from [Node:1901]",
"context": "Then it captures the emitted signal",
"expected": "signal: example was emitted from [Node:1901]",
"success": true
} ],
"context": "When we watch and emit a signal",
"fullname": "test_When_we_watch_and_emit_a_signal",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Signal: example was not emitted from [Node:1901]",
"context": "Then it does not capture the non-emitted signal",
"expected": "Signal: example was not emitted from [Node:1901]",
"success": true
} ],
"context": "When we watch and do not emit a signal",
"fullname": "test_When_we_watch_and_do_not_emit_a_signal",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "signal: multiple was emitted from [Node:1901] 2",
"context": "Then we can track how many times we emitted it",
"expected": "signal: multiple was emitted from [Node:1901] 2",
"success": true
} ],
"context": "When we watch and signal and emit it multiple times",
"fullname": "test_When_we_watch_a_signal_and_emit_it_multiple_times",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Signal: example was emitted from [Node:1901] with arguments: [1, 20, 5]",
"context": "Then it captures any arguments that where passed when the signal was emitted",
"expected": "Signal: example was emitted from [Node:1901] with arguments: [1, 20, 5]",
"success": true
} ],
"context": "When we watch a signal from an object with no bound variables",
"fullname": "test_When_we_watch_a_signal_from_an_object_with_no_bound_variables",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 4,
"path": "res://tests/unit/watcher.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/watcher.test.gd",
"tags": [  ],
"test": ExtResource( 17 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 4
}, {
"context": "Given a Yield",
"methods": [ {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then we set var a to true",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then we set var b to true",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we yield in start twice",
"fullname": "test_When_we_yield_in_start",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then we set var c to true",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then we set var d to true",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we yield in pre thrice",
"fullname": "test_When_we_yield_in_pre",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then we set var e to true",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then we set var f to true",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we yield twice in execute",
"fullname": "test_When_we_yield_in_execute",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "[100, Null, Null, Null, Null, Null] is builtin: Array",
"context": "Then we get an array",
"expected": "[100, Null, Null, Null, Null, Null] is builtin: Array",
"success": true
}, {
"actual": "|int| 6 is equal to |int| 6",
"context": "Of size 6",
"expected": "|int| 6 is equal to |int| 6",
"success": true
}, {
"actual": "|int| 100 is equal to |int| 100",
"context": "Where element 0 is 100",
"expected": "|int| 100 is equal to |int| 100",
"success": true
} ],
"context": "When yield(self.yield_value()) returns",
"fullname": "test_When_we_yield_we_get_the_return_value",
"passed": 3,
"success": true,
"time": 0.0,
"total": 3
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then yielder is not active",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When asserting against a test",
"fullname": "test_Yielder_is_not_active_when_asserting",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then the yielder is paused",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When a signal being yielded on is emitted",
"fullname": "test_When_a_signal_being_yielded_on_is_emitted_the_yielder_is_stopped",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then the timeout signal is disconnected",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then the signal-signal is disconnected",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When it is finished",
"fullname": "test_When_yielder_is_finished_signals_are_disconnected",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then the yielder is unpaused",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then the timeout signal of the yielder is connected",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then our signal is connected to the yielder",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we call until signal",
"fullname": "test_When_we_call_until_signal",
"passed": 3,
"success": true,
"time": 0.0,
"total": 3
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then yielder is unpaused",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "The timeout signal of the yielder is connected",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we call until_timeout (with 1.0)",
"fullname": "test_When_we_call_until_timeout",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then the yielder is paused",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then the timeout signal of the yielder is disconnected",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then our signal to the yielder is disconnected",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When the yielder heres our signal",
"fullname": "test_When_the_yielder_hears_our_signal",
"passed": 3,
"success": true,
"time": 0.0,
"total": 3
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then the yielder is paused",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "The timeout signal of the yielder is not connected",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When the yielder times out on until_timeout(0.1)",
"fullname": "test_When_the_yielder_times_out",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
} ],
"passed": 11,
"path": "res://tests/unit/yield.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/yield.test.gd",
"tags": [  ],
"test": ExtResource( 18 ),
"yield_time": 1.9
},
"success": true,
"time_taken": 0.0,
"total": 11
} ],
1611514459: [ {
"context": "Default Args",
"methods": [ {
"assertions": [ {
"actual": "|bool| True == true",
"context": "If this method can be reached then we have doubled a script with default argument(s) properly!",
"expected": "|bool| True == true",
"success": true
} ],
"context": " default arguments of interpolate property",
"fullname": "test_default_arguments_of_interpolate_property",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 1,
"path": "res://tests/integration/default_args.test.gd",
"source": {
"containers": [ "res://tests/integration", "res://tests" ],
"method": "",
"path": "res://tests/integration/default_args.test.gd",
"tags": [  ],
"test": ExtResource( 10 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 1
}, {
"context": "Given a Boolean Assertion",
"methods": [ {
"assertions": [ {
"actual": "|bool| False == false",
"context": "Then it passes",
"expected": "|bool| False == false",
"success": true
} ],
"context": "When calling asserts.is_false(false)",
"fullname": "test_when_calling_asserts_is_false",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then it passes",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When calling asserts.is_true(true)",
"fullname": "test_when_calling_asserts_is_true",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| True != false",
"context": "",
"expected": "|bool| True == false",
"success": false
} ],
"context": " intentional failure",
"fullname": "test_intentional_failure",
"passed": 0,
"success": false,
"time": 0.0,
"total": 1
} ],
"passed": 2,
"path": "res://tests/integration/boolean.test.gd",
"source": {
"containers": [ "res://tests/integration", "res://tests" ],
"method": "",
"path": "res://tests/integration/boolean.test.gd",
"tags": [  ],
"test": ExtResource( 20 ),
"yield_time": 0.0
},
"success": false,
"time_taken": 0.0,
"total": 3
}, {
"context": "Given is_on_floor",
"methods": [ {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then it can be stubbed",
"expected": "|bool| True == true",
"success": true
} ],
"context": "From a built-in KinematicBody2D2",
"fullname": "test_stubbing_is_on_floor_method_from_builtin_class2",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then it can be stubbed",
"expected": "|bool| True == true",
"success": true
} ],
"context": "From a child node of a scene without scripts",
"fullname": "test_stubbing_is_on_floor_as_child_node_with_no_script",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then it can be stubbed",
"expected": "|bool| True == true",
"success": true
} ],
"context": "From a user-defined script",
"fullname": "test_stubbing_is_on_floor_method_from_user_defined_class",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 3,
"path": "res://tests/integration/on_floor.test.gd",
"source": {
"containers": [ "res://tests/integration", "res://tests" ],
"method": "",
"path": "res://tests/integration/on_floor.test.gd",
"tags": [  ],
"test": ExtResource( 5 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 3
}, {
"context": "Given a Script Director",
"methods": [ {
"assertions": [ {
"actual": "[Reference:1443] is instance of class: [GDScript:1436]",
"context": "Then we get that inner class back",
"expected": "[Reference:1443] is instance of class: [GDScript:1436]",
"success": true
} ],
"context": "When we double an inner class",
"fullname": "test_When_we_double_an_inner_class",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|Object| [Node:1510] is equal to |Object| [Node:1510]",
"context": "Then we get the same double back",
"expected": "|Object| [Node:1510] is equal to |Object| [Node:1510]",
"success": true
} ],
"context": "When we call the double the second time",
"fullname": "test_When_we_call_double_a_second_time_on",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|Dictionary| {_enter_tree:{arguments:, default_arguments:}, _exit_tree:{arguments:, default_arguments:}, _get:{arguments:a, default_arguments:a}, _get_configuration_warning:{arguments:, default_arguments:}, _get_editor_description:{arguments:, default_arguments:}, _get_import_path:{arguments:, default_arguments:}, _get_property_list:{arguments:, default_arguments:}, _init:{arguments:, default_arguments:}, _input:{arguments:a, default_arguments:a}, _notification:{arguments:a, default_arguments:a}, _physics_process:{arguments:a, default_arguments:a}, _process:{arguments:a, default_arguments:a}, _ready:{arguments:, default_arguments:}, _set:{arguments:a, b, default_arguments:a, b}, _set_editor_description:{arguments:a, default_arguments:a}, _set_import_path:{arguments:a, default_arguments:a}, _to_string:{arguments:, default_arguments:}, _unhandled_input:{arguments:a, default_arguments:a}, _unhandled_key_input:{arguments:a, default_arguments:a}, add:{arguments:a, b, default_arguments:a, b}, add_child:{arguments:a, b, default_arguments:a, b = False}, add_child_below_node:{arguments:a, b, c, default_arguments:a, b, c = False}, add_to_group:{arguments:a, b, default_arguments:a, b = False}, add_user_signal:{arguments:a, b, default_arguments:a, b = []}, call:{arguments:a, default_arguments:a}, call_deferred:{arguments:a, default_arguments:a}, callv:{arguments:a, b, default_arguments:a, b}, can_process:{arguments:, default_arguments:}, can_translate_messages:{arguments:, default_arguments:}, connect:{arguments:a, b, c, d, e, default_arguments:a, b, c, d = [], e = 0}, disconnect:{arguments:a, b, c, default_arguments:a, b, c}, divide:{arguments:a, b, default_arguments:a, b}, duplicate:{arguments:a, default_arguments:a = 15}, emit_signal:{arguments:a, default_arguments:a}, find_node:{arguments:a, b, c, default_arguments:a, b = True, c = True}, find_parent:{arguments:a, default_arguments:a}, free:{arguments:, default_arguments:}, get:{arguments:a, default_arguments:a}, get_child:{arguments:a, default_arguments:a}, get_child_count:{arguments:, default_arguments:}, get_children:{arguments:, default_arguments:}, get_class:{arguments:, default_arguments:}, get_custom_multiplayer:{arguments:, default_arguments:}, get_filename:{arguments:, default_arguments:}, get_groups:{arguments:, default_arguments:}, get_incoming_connections:{arguments:, default_arguments:}, get_index:{arguments:, default_arguments:}, get_indexed:{arguments:a, default_arguments:a}, get_instance_id:{arguments:, default_arguments:}, get_meta:{arguments:a, default_arguments:a}, get_meta_list:{arguments:, default_arguments:}, get_method_list:{arguments:, default_arguments:}, get_multiplayer:{arguments:, default_arguments:}, get_name:{arguments:, default_arguments:}, get_network_master:{arguments:, default_arguments:}, get_node:{arguments:a, default_arguments:a}, get_node_and_resource:{arguments:a, default_arguments:a}, get_node_or_null:{arguments:a, default_arguments:a}, get_owner:{arguments:, default_arguments:}, get_parent:{arguments:, default_arguments:}, get_path:{arguments:, default_arguments:}, get_path_to:{arguments:a, default_arguments:a}, get_pause_mode:{arguments:, default_arguments:}, get_physics_process_delta_time:{arguments:, default_arguments:}, get_position_in_parent:{arguments:, default_arguments:}, get_process_delta_time:{arguments:, default_arguments:}, get_process_priority:{arguments:, default_arguments:}, get_property_list:{arguments:, default_arguments:}, get_scene_instance_load_placeholder:{arguments:, default_arguments:}, get_script:{arguments:, default_arguments:}, get_signal_connection_list:{arguments:a, default_arguments:a}, get_signal_list:{arguments:, default_arguments:}, get_tree:{arguments:, default_arguments:}, get_viewport:{arguments:, default_arguments:}, has_meta:{arguments:a, default_arguments:a}, has_method:{arguments:a, default_arguments:a}, has_node:{arguments:a, default_arguments:a}, has_node_and_resource:{arguments:a, default_arguments:a}, has_signal:{arguments:a, default_arguments:a}, has_user_signal:{arguments:a, default_arguments:a}, is_a_parent_of:{arguments:a, default_arguments:a}, is_blocking_signals:{arguments:, default_arguments:}, is_class:{arguments:a, default_arguments:a}, is_connected:{arguments:a, b, c, default_arguments:a, b, c}, is_displayed_folded:{arguments:, default_arguments:}, is_greater_than:{arguments:a, default_arguments:a}, is_in_group:{arguments:a, default_arguments:a}, is_inside_tree:{arguments:, default_arguments:}, is_network_master:{arguments:, default_arguments:}, is_physics_processing:{arguments:, default_arguments:}, is_physics_processing_internal:{arguments:, default_arguments:}, is_processing:{arguments:, default_arguments:}, is_processing_input:{arguments:, default_arguments:}, is_processing_internal:{arguments:, default_arguments:}, is_processing_unhandled_input:{arguments:, default_arguments:}, is_processing_unhandled_key_input:{arguments:, default_arguments:}, is_queued_for_deletion:{arguments:, default_arguments:}, math_fight:{arguments:, default_arguments:}, move_child:{arguments:a, b, default_arguments:a, b}, multiply:{arguments:a, b, default_arguments:a, b}, notification:{arguments:a, b, default_arguments:a, b = False}, pi:{arguments:, default_arguments:}, print_stray_nodes:{arguments:, default_arguments:}, print_tree:{arguments:, default_arguments:}, print_tree_pretty:{arguments:, default_arguments:}, propagate_call:{arguments:a, b, c, default_arguments:a, b = [], c = False}, propagate_notification:{arguments:a, default_arguments:a}, property_list_changed_notify:{arguments:, default_arguments:}, queue_free:{arguments:, default_arguments:}, raise:{arguments:, default_arguments:}, remove_and_skip:{arguments:, default_arguments:}, remove_child:{arguments:a, default_arguments:a}, remove_from_group:{arguments:a, default_arguments:a}, remove_meta:{arguments:a, default_arguments:a}, replace_by:{arguments:a, b, default_arguments:a, b = False}, request_ready:{arguments:, default_arguments:}, rpc:{arguments:a, default_arguments:a}, rpc_config:{arguments:a, b, default_arguments:a, b}, rpc_id:{arguments:a, b, default_arguments:a, b}, rpc_unreliable:{arguments:a, default_arguments:a}, rpc_unreliable_id:{arguments:a, b, default_arguments:a, b}, rset:{arguments:a, b, default_arguments:a, b}, rset_config:{arguments:a, b, default_arguments:a, b}, rset_id:{arguments:a, b, c, default_arguments:a, b, c}, rset_unreliable:{arguments:a, b, default_arguments:a, b}, rset_unreliable_id:{arguments:a, b, c, default_arguments:a, b, c}, set:{arguments:a, b, default_arguments:a, b}, set_block_signals:{arguments:a, default_arguments:a}, set_custom_multiplayer:{arguments:a, default_arguments:a}, set_deferred:{arguments:a, b, default_arguments:a, b}, set_display_folded:{arguments:a, default_arguments:a}, set_filename:{arguments:a, default_arguments:a}, set_indexed:{arguments:a, b, default_arguments:a, b}, set_message_translation:{arguments:a, default_arguments:a}, set_meta:{arguments:a, b, default_arguments:a, b}, set_name:{arguments:a, default_arguments:a}, set_network_master:{arguments:a, b, default_arguments:a, b = True}, set_owner:{arguments:a, default_arguments:a}, set_pause_mode:{arguments:a, default_arguments:a}, set_physics_process:{arguments:a, default_arguments:a}, set_physics_process_internal:{arguments:a, default_arguments:a}, set_process:{arguments:a, default_arguments:a}, set_process_input:{arguments:a, default_arguments:a}, set_process_internal:{arguments:a, default_arguments:a}, set_process_priority:{arguments:a, default_arguments:a}, set_process_unhandled_input:{arguments:a, default_arguments:a}, set_process_unhandled_key_input:{arguments:a, default_arguments:a}, set_scene_instance_load_placeholder:{arguments:a, default_arguments:a}, set_script:{arguments:a, default_arguments:a}, subtract:{arguments:a, b, default_arguments:a, b}, sum:{arguments:a, default_arguments:a}, to_string:{arguments:, default_arguments:}, tr:{arguments:a, default_arguments:a}, update_configuration_warning:{arguments:, default_arguments:}} is not equal to |Dictionary| {_enter_tree:{arguments:, default_arguments:}, _exit_tree:{arguments:, default_arguments:}, _get:{arguments:a, default_arguments:a}, _get_configuration_warning:{arguments:, default_arguments:}, _get_editor_description:{arguments:, default_arguments:}, _get_import_path:{arguments:, default_arguments:}, _get_property_list:{arguments:, default_arguments:}, _init:{arguments:, default_arguments:}, _input:{arguments:a, default_arguments:a}, _notification:{arguments:a, default_arguments:a}, _physics_process:{arguments:a, default_arguments:a}, _process:{arguments:a, default_arguments:a}, _ready:{arguments:, default_arguments:}, _set:{arguments:a, b, default_arguments:a, b}, _set_editor_description:{arguments:a, default_arguments:a}, _set_import_path:{arguments:a, default_arguments:a}, _to_string:{arguments:, default_arguments:}, _unhandled_input:{arguments:a, default_arguments:a}, _unhandled_key_input:{arguments:a, default_arguments:a}, add:{arguments:a, b, default_arguments:a, b}, add_child:{arguments:a, b, default_arguments:a, b = False}, add_child_below_node:{arguments:a, b, c, default_arguments:a, b, c = False}, add_to_group:{arguments:a, b, default_arguments:a, b = False}, add_user_signal:{arguments:a, b, default_arguments:a, b = []}, call:{arguments:a, default_arguments:a}, call_deferred:{arguments:a, default_arguments:a}, callv:{arguments:a, b, default_arguments:a, b}, can_process:{arguments:, default_arguments:}, can_translate_messages:{arguments:, default_arguments:}, connect:{arguments:a, b, c, d, e, default_arguments:a, b, c, d = [], e = 0}, disconnect:{arguments:a, b, c, default_arguments:a, b, c}, divide:{arguments:a, b, default_arguments:a, b}, duplicate:{arguments:a, default_arguments:a = 15}, emit_signal:{arguments:a, default_arguments:a}, find_node:{arguments:a, b, c, default_arguments:a, b = True, c = True}, find_parent:{arguments:a, default_arguments:a}, free:{arguments:, default_arguments:}, get:{arguments:a, default_arguments:a}, get_child:{arguments:a, default_arguments:a}, get_child_count:{arguments:, default_arguments:}, get_children:{arguments:, default_arguments:}, get_class:{arguments:, default_arguments:}, get_custom_multiplayer:{arguments:, default_arguments:}, get_filename:{arguments:, default_arguments:}, get_groups:{arguments:, default_arguments:}, get_incoming_connections:{arguments:, default_arguments:}, get_index:{arguments:, default_arguments:}, get_indexed:{arguments:a, default_arguments:a}, get_instance_id:{arguments:, default_arguments:}, get_meta:{arguments:a, default_arguments:a}, get_meta_list:{arguments:, default_arguments:}, get_method_list:{arguments:, default_arguments:}, get_multiplayer:{arguments:, default_arguments:}, get_name:{arguments:, default_arguments:}, get_network_master:{arguments:, default_arguments:}, get_node:{arguments:a, default_arguments:a}, get_node_and_resource:{arguments:a, default_arguments:a}, get_node_or_null:{arguments:a, default_arguments:a}, get_owner:{arguments:, default_arguments:}, get_parent:{arguments:, default_arguments:}, get_path:{arguments:, default_arguments:}, get_path_to:{arguments:a, default_arguments:a}, get_pause_mode:{arguments:, default_arguments:}, get_physics_process_delta_time:{arguments:, default_arguments:}, get_position_in_parent:{arguments:, default_arguments:}, get_process_delta_time:{arguments:, default_arguments:}, get_process_priority:{arguments:, default_arguments:}, get_property_list:{arguments:, default_arguments:}, get_scene_instance_load_placeholder:{arguments:, default_arguments:}, get_script:{arguments:, default_arguments:}, get_signal_connection_list:{arguments:a, default_arguments:a}, get_signal_list:{arguments:, default_arguments:}, get_tree:{arguments:, default_arguments:}, get_viewport:{arguments:, default_arguments:}, has_meta:{arguments:a, default_arguments:a}, has_method:{arguments:a, default_arguments:a}, has_node:{arguments:a, default_arguments:a}, has_node_and_resource:{arguments:a, default_arguments:a}, has_signal:{arguments:a, default_arguments:a}, has_user_signal:{arguments:a, default_arguments:a}, is_a_parent_of:{arguments:a, default_arguments:a}, is_blocking_signals:{arguments:, default_arguments:}, is_class:{arguments:a, default_arguments:a}, is_connected:{arguments:a, b, c, default_arguments:a, b, c}, is_displayed_folded:{arguments:, default_arguments:}, is_greater_than:{arguments:a, default_arguments:a}, is_in_group:{arguments:a, default_arguments:a}, is_inside_tree:{arguments:, default_arguments:}, is_network_master:{arguments:, default_arguments:}, is_physics_processing:{arguments:, default_arguments:}, is_physics_processing_internal:{arguments:, default_arguments:}, is_processing:{arguments:, default_arguments:}, is_processing_input:{arguments:, default_arguments:}, is_processing_internal:{arguments:, default_arguments:}, is_processing_unhandled_input:{arguments:, default_arguments:}, is_processing_unhandled_key_input:{arguments:, default_arguments:}, is_queued_for_deletion:{arguments:, default_arguments:}, math_fight:{arguments:, default_arguments:}, move_child:{arguments:a, b, default_arguments:a, b}, multiply:{arguments:a, b, default_arguments:a, b}, notification:{arguments:a, b, default_arguments:a, b = False}, pi:{arguments:, default_arguments:}, print_stray_nodes:{arguments:, default_arguments:}, print_tree:{arguments:, default_arguments:}, print_tree_pretty:{arguments:, default_arguments:}, propagate_call:{arguments:a, b, c, default_arguments:a, b = [], c = False}, propagate_notification:{arguments:a, default_arguments:a}, property_list_changed_notify:{arguments:, default_arguments:}, queue_free:{arguments:, default_arguments:}, raise:{arguments:, default_arguments:}, remove_and_skip:{arguments:, default_arguments:}, remove_child:{arguments:a, default_arguments:a}, remove_from_group:{arguments:a, default_arguments:a}, remove_meta:{arguments:a, default_arguments:a}, replace_by:{arguments:a, b, default_arguments:a, b = False}, request_ready:{arguments:, default_arguments:}, rpc:{arguments:a, default_arguments:a}, rpc_config:{arguments:a, b, default_arguments:a, b}, rpc_id:{arguments:a, b, default_arguments:a, b}, rpc_unreliable:{arguments:a, default_arguments:a}, rpc_unreliable_id:{arguments:a, b, default_arguments:a, b}, rset:{arguments:a, b, default_arguments:a, b}, rset_config:{arguments:a, b, default_arguments:a, b}, rset_id:{arguments:a, b, c, default_arguments:a, b, c}, rset_unreliable:{arguments:a, b, default_arguments:a, b}, rset_unreliable_id:{arguments:a, b, c, default_arguments:a, b, c}, set:{arguments:a, b, default_arguments:a, b}, set_block_signals:{arguments:a, default_arguments:a}, set_custom_multiplayer:{arguments:a, default_arguments:a}, set_deferred:{arguments:a, b, default_arguments:a, b}, set_display_folded:{arguments:a, default_arguments:a}, set_filename:{arguments:a, default_arguments:a}, set_indexed:{arguments:a, b, default_arguments:a, b}, set_message_translation:{arguments:a, default_arguments:a}, set_meta:{arguments:a, b, default_arguments:a, b}, set_name:{arguments:a, default_arguments:a}, set_network_master:{arguments:a, b, default_arguments:a, b = True}, set_owner:{arguments:a, default_arguments:a}, set_pause_mode:{arguments:a, default_arguments:a}, set_physics_process:{arguments:a, default_arguments:a}, set_physics_process_internal:{arguments:a, default_arguments:a}, set_process:{arguments:a, default_arguments:a}, set_process_input:{arguments:a, default_arguments:a}, set_process_internal:{arguments:a, default_arguments:a}, set_process_priority:{arguments:a, default_arguments:a}, set_process_unhandled_input:{arguments:a, default_arguments:a}, set_process_unhandled_key_input:{arguments:a, default_arguments:a}, set_scene_instance_load_placeholder:{arguments:a, default_arguments:a}, set_script:{arguments:a, default_arguments:a}, subtract:{arguments:a, b, default_arguments:a, b}, sum:{arguments:a, default_arguments:a}, to_string:{arguments:, default_arguments:}, tr:{arguments:a, default_arguments:a}, update_configuration_warning:{arguments:, default_arguments:}}",
"context": "Then they do not share resources",
"expected": "|Dictionary| {_enter_tree:{arguments:, default_arguments:}, _exit_tree:{arguments:, default_arguments:}, _get:{arguments:a, default_arguments:a}, _get_configuration_warning:{arguments:, default_arguments:}, _get_editor_description:{arguments:, default_arguments:}, _get_import_path:{arguments:, default_arguments:}, _get_property_list:{arguments:, default_arguments:}, _init:{arguments:, default_arguments:}, _input:{arguments:a, default_arguments:a}, _notification:{arguments:a, default_arguments:a}, _physics_process:{arguments:a, default_arguments:a}, _process:{arguments:a, default_arguments:a}, _ready:{arguments:, default_arguments:}, _set:{arguments:a, b, default_arguments:a, b}, _set_editor_description:{arguments:a, default_arguments:a}, _set_import_path:{arguments:a, default_arguments:a}, _to_string:{arguments:, default_arguments:}, _unhandled_input:{arguments:a, default_arguments:a}, _unhandled_key_input:{arguments:a, default_arguments:a}, add:{arguments:a, b, default_arguments:a, b}, add_child:{arguments:a, b, default_arguments:a, b = False}, add_child_below_node:{arguments:a, b, c, default_arguments:a, b, c = False}, add_to_group:{arguments:a, b, default_arguments:a, b = False}, add_user_signal:{arguments:a, b, default_arguments:a, b = []}, call:{arguments:a, default_arguments:a}, call_deferred:{arguments:a, default_arguments:a}, callv:{arguments:a, b, default_arguments:a, b}, can_process:{arguments:, default_arguments:}, can_translate_messages:{arguments:, default_arguments:}, connect:{arguments:a, b, c, d, e, default_arguments:a, b, c, d = [], e = 0}, disconnect:{arguments:a, b, c, default_arguments:a, b, c}, divide:{arguments:a, b, default_arguments:a, b}, duplicate:{arguments:a, default_arguments:a = 15}, emit_signal:{arguments:a, default_arguments:a}, find_node:{arguments:a, b, c, default_arguments:a, b = True, c = True}, find_parent:{arguments:a, default_arguments:a}, free:{arguments:, default_arguments:}, get:{arguments:a, default_arguments:a}, get_child:{arguments:a, default_arguments:a}, get_child_count:{arguments:, default_arguments:}, get_children:{arguments:, default_arguments:}, get_class:{arguments:, default_arguments:}, get_custom_multiplayer:{arguments:, default_arguments:}, get_filename:{arguments:, default_arguments:}, get_groups:{arguments:, default_arguments:}, get_incoming_connections:{arguments:, default_arguments:}, get_index:{arguments:, default_arguments:}, get_indexed:{arguments:a, default_arguments:a}, get_instance_id:{arguments:, default_arguments:}, get_meta:{arguments:a, default_arguments:a}, get_meta_list:{arguments:, default_arguments:}, get_method_list:{arguments:, default_arguments:}, get_multiplayer:{arguments:, default_arguments:}, get_name:{arguments:, default_arguments:}, get_network_master:{arguments:, default_arguments:}, get_node:{arguments:a, default_arguments:a}, get_node_and_resource:{arguments:a, default_arguments:a}, get_node_or_null:{arguments:a, default_arguments:a}, get_owner:{arguments:, default_arguments:}, get_parent:{arguments:, default_arguments:}, get_path:{arguments:, default_arguments:}, get_path_to:{arguments:a, default_arguments:a}, get_pause_mode:{arguments:, default_arguments:}, get_physics_process_delta_time:{arguments:, default_arguments:}, get_position_in_parent:{arguments:, default_arguments:}, get_process_delta_time:{arguments:, default_arguments:}, get_process_priority:{arguments:, default_arguments:}, get_property_list:{arguments:, default_arguments:}, get_scene_instance_load_placeholder:{arguments:, default_arguments:}, get_script:{arguments:, default_arguments:}, get_signal_connection_list:{arguments:a, default_arguments:a}, get_signal_list:{arguments:, default_arguments:}, get_tree:{arguments:, default_arguments:}, get_viewport:{arguments:, default_arguments:}, has_meta:{arguments:a, default_arguments:a}, has_method:{arguments:a, default_arguments:a}, has_node:{arguments:a, default_arguments:a}, has_node_and_resource:{arguments:a, default_arguments:a}, has_signal:{arguments:a, default_arguments:a}, has_user_signal:{arguments:a, default_arguments:a}, is_a_parent_of:{arguments:a, default_arguments:a}, is_blocking_signals:{arguments:, default_arguments:}, is_class:{arguments:a, default_arguments:a}, is_connected:{arguments:a, b, c, default_arguments:a, b, c}, is_displayed_folded:{arguments:, default_arguments:}, is_greater_than:{arguments:a, default_arguments:a}, is_in_group:{arguments:a, default_arguments:a}, is_inside_tree:{arguments:, default_arguments:}, is_network_master:{arguments:, default_arguments:}, is_physics_processing:{arguments:, default_arguments:}, is_physics_processing_internal:{arguments:, default_arguments:}, is_processing:{arguments:, default_arguments:}, is_processing_input:{arguments:, default_arguments:}, is_processing_internal:{arguments:, default_arguments:}, is_processing_unhandled_input:{arguments:, default_arguments:}, is_processing_unhandled_key_input:{arguments:, default_arguments:}, is_queued_for_deletion:{arguments:, default_arguments:}, math_fight:{arguments:, default_arguments:}, move_child:{arguments:a, b, default_arguments:a, b}, multiply:{arguments:a, b, default_arguments:a, b}, notification:{arguments:a, b, default_arguments:a, b = False}, pi:{arguments:, default_arguments:}, print_stray_nodes:{arguments:, default_arguments:}, print_tree:{arguments:, default_arguments:}, print_tree_pretty:{arguments:, default_arguments:}, propagate_call:{arguments:a, b, c, default_arguments:a, b = [], c = False}, propagate_notification:{arguments:a, default_arguments:a}, property_list_changed_notify:{arguments:, default_arguments:}, queue_free:{arguments:, default_arguments:}, raise:{arguments:, default_arguments:}, remove_and_skip:{arguments:, default_arguments:}, remove_child:{arguments:a, default_arguments:a}, remove_from_group:{arguments:a, default_arguments:a}, remove_meta:{arguments:a, default_arguments:a}, replace_by:{arguments:a, b, default_arguments:a, b = False}, request_ready:{arguments:, default_arguments:}, rpc:{arguments:a, default_arguments:a}, rpc_config:{arguments:a, b, default_arguments:a, b}, rpc_id:{arguments:a, b, default_arguments:a, b}, rpc_unreliable:{arguments:a, default_arguments:a}, rpc_unreliable_id:{arguments:a, b, default_arguments:a, b}, rset:{arguments:a, b, default_arguments:a, b}, rset_config:{arguments:a, b, default_arguments:a, b}, rset_id:{arguments:a, b, c, default_arguments:a, b, c}, rset_unreliable:{arguments:a, b, default_arguments:a, b}, rset_unreliable_id:{arguments:a, b, c, default_arguments:a, b, c}, set:{arguments:a, b, default_arguments:a, b}, set_block_signals:{arguments:a, default_arguments:a}, set_custom_multiplayer:{arguments:a, default_arguments:a}, set_deferred:{arguments:a, b, default_arguments:a, b}, set_display_folded:{arguments:a, default_arguments:a}, set_filename:{arguments:a, default_arguments:a}, set_indexed:{arguments:a, b, default_arguments:a, b}, set_message_translation:{arguments:a, default_arguments:a}, set_meta:{arguments:a, b, default_arguments:a, b}, set_name:{arguments:a, default_arguments:a}, set_network_master:{arguments:a, b, default_arguments:a, b = True}, set_owner:{arguments:a, default_arguments:a}, set_pause_mode:{arguments:a, default_arguments:a}, set_physics_process:{arguments:a, default_arguments:a}, set_physics_process_internal:{arguments:a, default_arguments:a}, set_process:{arguments:a, default_arguments:a}, set_process_input:{arguments:a, default_arguments:a}, set_process_internal:{arguments:a, default_arguments:a}, set_process_priority:{arguments:a, default_arguments:a}, set_process_unhandled_input:{arguments:a, default_arguments:a}, set_process_unhandled_key_input:{arguments:a, default_arguments:a}, set_scene_instance_load_placeholder:{arguments:a, default_arguments:a}, set_script:{arguments:a, default_arguments:a}, subtract:{arguments:a, b, default_arguments:a, b}, sum:{arguments:a, default_arguments:a}, to_string:{arguments:, default_arguments:}, tr:{arguments:a, default_arguments:a}, update_configuration_warning:{arguments:, default_arguments:}} != |Dictionary| {_enter_tree:{arguments:, default_arguments:}, _exit_tree:{arguments:, default_arguments:}, _get:{arguments:a, default_arguments:a}, _get_configuration_warning:{arguments:, default_arguments:}, _get_editor_description:{arguments:, default_arguments:}, _get_import_path:{arguments:, default_arguments:}, _get_property_list:{arguments:, default_arguments:}, _init:{arguments:, default_arguments:}, _input:{arguments:a, default_arguments:a}, _notification:{arguments:a, default_arguments:a}, _physics_process:{arguments:a, default_arguments:a}, _process:{arguments:a, default_arguments:a}, _ready:{arguments:, default_arguments:}, _set:{arguments:a, b, default_arguments:a, b}, _set_editor_description:{arguments:a, default_arguments:a}, _set_import_path:{arguments:a, default_arguments:a}, _to_string:{arguments:, default_arguments:}, _unhandled_input:{arguments:a, default_arguments:a}, _unhandled_key_input:{arguments:a, default_arguments:a}, add:{arguments:a, b, default_arguments:a, b}, add_child:{arguments:a, b, default_arguments:a, b = False}, add_child_below_node:{arguments:a, b, c, default_arguments:a, b, c = False}, add_to_group:{arguments:a, b, default_arguments:a, b = False}, add_user_signal:{arguments:a, b, default_arguments:a, b = []}, call:{arguments:a, default_arguments:a}, call_deferred:{arguments:a, default_arguments:a}, callv:{arguments:a, b, default_arguments:a, b}, can_process:{arguments:, default_arguments:}, can_translate_messages:{arguments:, default_arguments:}, connect:{arguments:a, b, c, d, e, default_arguments:a, b, c, d = [], e = 0}, disconnect:{arguments:a, b, c, default_arguments:a, b, c}, divide:{arguments:a, b, default_arguments:a, b}, duplicate:{arguments:a, default_arguments:a = 15}, emit_signal:{arguments:a, default_arguments:a}, find_node:{arguments:a, b, c, default_arguments:a, b = True, c = True}, find_parent:{arguments:a, default_arguments:a}, free:{arguments:, default_arguments:}, get:{arguments:a, default_arguments:a}, get_child:{arguments:a, default_arguments:a}, get_child_count:{arguments:, default_arguments:}, get_children:{arguments:, default_arguments:}, get_class:{arguments:, default_arguments:}, get_custom_multiplayer:{arguments:, default_arguments:}, get_filename:{arguments:, default_arguments:}, get_groups:{arguments:, default_arguments:}, get_incoming_connections:{arguments:, default_arguments:}, get_index:{arguments:, default_arguments:}, get_indexed:{arguments:a, default_arguments:a}, get_instance_id:{arguments:, default_arguments:}, get_meta:{arguments:a, default_arguments:a}, get_meta_list:{arguments:, default_arguments:}, get_method_list:{arguments:, default_arguments:}, get_multiplayer:{arguments:, default_arguments:}, get_name:{arguments:, default_arguments:}, get_network_master:{arguments:, default_arguments:}, get_node:{arguments:a, default_arguments:a}, get_node_and_resource:{arguments:a, default_arguments:a}, get_node_or_null:{arguments:a, default_arguments:a}, get_owner:{arguments:, default_arguments:}, get_parent:{arguments:, default_arguments:}, get_path:{arguments:, default_arguments:}, get_path_to:{arguments:a, default_arguments:a}, get_pause_mode:{arguments:, default_arguments:}, get_physics_process_delta_time:{arguments:, default_arguments:}, get_position_in_parent:{arguments:, default_arguments:}, get_process_delta_time:{arguments:, default_arguments:}, get_process_priority:{arguments:, default_arguments:}, get_property_list:{arguments:, default_arguments:}, get_scene_instance_load_placeholder:{arguments:, default_arguments:}, get_script:{arguments:, default_arguments:}, get_signal_connection_list:{arguments:a, default_arguments:a}, get_signal_list:{arguments:, default_arguments:}, get_tree:{arguments:, default_arguments:}, get_viewport:{arguments:, default_arguments:}, has_meta:{arguments:a, default_arguments:a}, has_method:{arguments:a, default_arguments:a}, has_node:{arguments:a, default_arguments:a}, has_node_and_resource:{arguments:a, default_arguments:a}, has_signal:{arguments:a, default_arguments:a}, has_user_signal:{arguments:a, default_arguments:a}, is_a_parent_of:{arguments:a, default_arguments:a}, is_blocking_signals:{arguments:, default_arguments:}, is_class:{arguments:a, default_arguments:a}, is_connected:{arguments:a, b, c, default_arguments:a, b, c}, is_displayed_folded:{arguments:, default_arguments:}, is_greater_than:{arguments:a, default_arguments:a}, is_in_group:{arguments:a, default_arguments:a}, is_inside_tree:{arguments:, default_arguments:}, is_network_master:{arguments:, default_arguments:}, is_physics_processing:{arguments:, default_arguments:}, is_physics_processing_internal:{arguments:, default_arguments:}, is_processing:{arguments:, default_arguments:}, is_processing_input:{arguments:, default_arguments:}, is_processing_internal:{arguments:, default_arguments:}, is_processing_unhandled_input:{arguments:, default_arguments:}, is_processing_unhandled_key_input:{arguments:, default_arguments:}, is_queued_for_deletion:{arguments:, default_arguments:}, math_fight:{arguments:, default_arguments:}, move_child:{arguments:a, b, default_arguments:a, b}, multiply:{arguments:a, b, default_arguments:a, b}, notification:{arguments:a, b, default_arguments:a, b = False}, pi:{arguments:, default_arguments:}, print_stray_nodes:{arguments:, default_arguments:}, print_tree:{arguments:, default_arguments:}, print_tree_pretty:{arguments:, default_arguments:}, propagate_call:{arguments:a, b, c, default_arguments:a, b = [], c = False}, propagate_notification:{arguments:a, default_arguments:a}, property_list_changed_notify:{arguments:, default_arguments:}, queue_free:{arguments:, default_arguments:}, raise:{arguments:, default_arguments:}, remove_and_skip:{arguments:, default_arguments:}, remove_child:{arguments:a, default_arguments:a}, remove_from_group:{arguments:a, default_arguments:a}, remove_meta:{arguments:a, default_arguments:a}, replace_by:{arguments:a, b, default_arguments:a, b = False}, request_ready:{arguments:, default_arguments:}, rpc:{arguments:a, default_arguments:a}, rpc_config:{arguments:a, b, default_arguments:a, b}, rpc_id:{arguments:a, b, default_arguments:a, b}, rpc_unreliable:{arguments:a, default_arguments:a}, rpc_unreliable_id:{arguments:a, b, default_arguments:a, b}, rset:{arguments:a, b, default_arguments:a, b}, rset_config:{arguments:a, b, default_arguments:a, b}, rset_id:{arguments:a, b, c, default_arguments:a, b, c}, rset_unreliable:{arguments:a, b, default_arguments:a, b}, rset_unreliable_id:{arguments:a, b, c, default_arguments:a, b, c}, set:{arguments:a, b, default_arguments:a, b}, set_block_signals:{arguments:a, default_arguments:a}, set_custom_multiplayer:{arguments:a, default_arguments:a}, set_deferred:{arguments:a, b, default_arguments:a, b}, set_display_folded:{arguments:a, default_arguments:a}, set_filename:{arguments:a, default_arguments:a}, set_indexed:{arguments:a, b, default_arguments:a, b}, set_message_translation:{arguments:a, default_arguments:a}, set_meta:{arguments:a, b, default_arguments:a, b}, set_name:{arguments:a, default_arguments:a}, set_network_master:{arguments:a, b, default_arguments:a, b = True}, set_owner:{arguments:a, default_arguments:a}, set_pause_mode:{arguments:a, default_arguments:a}, set_physics_process:{arguments:a, default_arguments:a}, set_physics_process_internal:{arguments:a, default_arguments:a}, set_process:{arguments:a, default_arguments:a}, set_process_input:{arguments:a, default_arguments:a}, set_process_internal:{arguments:a, default_arguments:a}, set_process_priority:{arguments:a, default_arguments:a}, set_process_unhandled_input:{arguments:a, default_arguments:a}, set_process_unhandled_key_input:{arguments:a, default_arguments:a}, set_scene_instance_load_placeholder:{arguments:a, default_arguments:a}, set_script:{arguments:a, default_arguments:a}, subtract:{arguments:a, b, default_arguments:a, b}, sum:{arguments:a, default_arguments:a}, to_string:{arguments:, default_arguments:}, tr:{arguments:a, default_arguments:a}, update_configuration_warning:{arguments:, default_arguments:}}",
"success": true
} ],
"context": "When we create two of it for the same script",
"fullname": "test_When_we_create_two_of_it_for_the_same_script",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 3,
"path": "res://tests/integration/script_director.test.gd",
"source": {
"containers": [ "res://tests/integration", "res://tests" ],
"method": "",
"path": "res://tests/integration/script_director.test.gd",
"tags": [  ],
"test": ExtResource( 13 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 3
}, {
"context": "Given a Boolean Assertion",
"methods": [ {
"assertions": [ {
"actual": "|bool| False == false",
"context": "Then it passes",
"expected": "|bool| False == false",
"success": true
} ],
"context": "When calling asserts.is_false(false)",
"fullname": "test_when_calling_asserts_is_false",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then it passes",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When calling asserts.is_true(true)",
"fullname": "test_when_calling_asserts_is_true",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| True != false",
"context": "",
"expected": "|bool| True == false",
"success": false
} ],
"context": " intentional failure",
"fullname": "test_intentional_failure",
"passed": 0,
"success": false,
"time": 0.0,
"total": 1
} ],
"passed": 2,
"path": "res://tests/unit/boolean.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/boolean.test.gd",
"tags": [  ],
"test": ExtResource( 11 ),
"yield_time": 0.0
},
"success": false,
"time_taken": 0.0,
"total": 3
}, {
"context": "Given a Scene Director",
"methods": [ {
"assertions": [ {
"actual": "|Dictionary| {.:[Reference:1416], A:[Reference:1417], A/B:[Reference:1419], C:[Reference:1418], C/D:[Reference:1420]} is not equal to |Dictionary| {.:[Reference:1460], A:[Reference:1461], A/B:[Reference:1463], C:[Reference:1462], C/D:[Reference:1464]}",
"context": "Then they do not share resources",
"expected": "|Dictionary| {.:[Reference:1416], A:[Reference:1417], A/B:[Reference:1419], C:[Reference:1418], C/D:[Reference:1420]} != |Dictionary| {.:[Reference:1460], A:[Reference:1461], A/B:[Reference:1463], C:[Reference:1462], C/D:[Reference:1464]}",
"success": true
} ],
"context": "When we create two of it for the same scene",
"fullname": "test_When_we_create_two_of_it_for_the_same_scene",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 9999 is equal to |int| 9999",
"context": "Then we get the stubbed return value",
"expected": "|int| 9999 is equal to |int| 9999",
"success": true
} ],
"context": "When we call a method from the root node that we stubbed",
"fullname": "test_When_we_call_a_method_from_the_root_node_that_we_stubbed",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 999 is equal to |int| 999",
"context": "Then we get the stubbed return value",
"expected": "|int| 999 is equal to |int| 999",
"success": true
} ],
"context": "When we call a method from a child node that we stubbed",
"fullname": "test_When_we_call_a_method_from_a_child_node_that_we_stubbed",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 99 is equal to |int| 99",
"context": "Then we get the stubbed return value",
"expected": "|int| 99 is equal to |int| 99",
"success": true
} ],
"context": "When we call a method from a grandchild node that we stubbed",
"fullname": "test_When_we_call_a_method_from_a_grandchild_node_that_we_stubbed",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|NodePath| A is equal to |NodePath| A",
"context": "We have the correct NodePath Set",
"expected": "|NodePath| A is equal to |NodePath| A",
"success": true
} ],
"context": "When we add it to the tree it runs",
"fullname": "test_When_we_add_it_to_the_tree_it_runs",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 5,
"path": "res://tests/integration/scene_director.test.gd",
"source": {
"containers": [ "res://tests/integration", "res://tests" ],
"method": "",
"path": "res://tests/integration/scene_director.test.gd",
"tags": [  ],
"test": ExtResource( 4 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 5
}, {
"context": "Given A File Assertion",
"methods": [ {
"assertions": [ {
"actual": "res://somefile.gd does not exist",
"context": "Then it passes",
"expected": "res://somefile.gd does not exist",
"success": true
} ],
"context": "When calling asserts.file_does_not_exist when there is no file",
"fullname": "test_when_calling_file_does_not_exist_when_there_is_no_file",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "res://tests/unit/file.test.gd exists",
"context": "Then it passes",
"expected": "res://tests/unit/file.test.gd exists",
"success": true
} ],
"context": "When calling asserts.file_exists when the file is this suite",
"fullname": "test_when_calling_file_exists_when_file_is_self",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": " does not exist",
"context": "Then it passes",
"expected": " does not exist",
"success": true
} ],
"context": "When calling asserts file does not exist when path is empty",
"fullname": "test_when_calling_file_does_not_exist_when_path_is_empty",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 3,
"path": "res://tests/unit/file.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/file.test.gd",
"tags": [  ],
"test": ExtResource( 3 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 3
}, {
"context": "Given a Null Assertion",
"methods": [ {
"assertions": [ {
"actual": "|null| Null == null",
"context": "Then it passes",
"expected": "|null| Null == null",
"success": true
} ],
"context": "When calling asserts.is_null(null)",
"fullname": "test_when_calling_null_is_null",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|Object| [Node:1719] != null",
"context": "Then it passes",
"expected": "|Object| [Node:1719] != null",
"success": true
} ],
"context": "When calling Node is not null",
"fullname": "test_when_calling_node_is_not_null",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|Object| [Deleted Object] == null",
"context": "A Freed Node is null in Engine 3.2.2 or greater",
"expected": "|Object| [Deleted Object] == null",
"success": true
} ],
"context": "When calling freed object is null",
"fullname": "test_when_calling_freed_object_is_not_null",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 3,
"path": "res://tests/unit/null.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/null.test.gd",
"tags": [  ],
"test": ExtResource( 12 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 3
}, {
"context": "Given an Equality Assertion",
"methods": [ {
"assertions": [ {
"actual": "|int| 1 is equal to |int| 1",
"context": "Then it passes",
"expected": "|int| 1 is equal to |int| 1",
"success": true
} ],
"context": "When calling asserts.is_equal(1, 1)",
"fullname": "test_when_calling_is_equal",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 2 is equal or greater |int| 1",
"context": "Then it passes",
"expected": "|int| 2 is equal or greater |int| 1",
"success": true
} ],
"context": "When calling asserts.is_equal_or_greater_than(2, 1)",
"fullname": "test_when_calling_is_equal_or_greater_than",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 2 is greater than |int| 1",
"context": "Then it passes",
"expected": "|int| 2 is greater than |int| 1",
"success": true
} ],
"context": "When calling asserts.is_greater_than(2, 1)",
"fullname": "test_when_calling_is_greater_than",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 1 is less than |int| 2",
"context": "Then it passes",
"expected": "|int| 1 is less than |int| 2",
"success": true
} ],
"context": "When calling asserts.is_less_than(2, 1)",
"fullname": "test_when_calling_is_less_than",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 1 is equal or greater |int| 1",
"context": "Then it passes",
"expected": "|int| 1 is equal or greater |int| 1",
"success": true
} ],
"context": "When calling asserts.is_equal_or_greater_than(1, 1)",
"fullname": "test_when_calling_is_equal_or_greater_than_with_equal_values",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 1 is equal or less than |int| 1",
"context": "Then it passes!",
"expected": "|int| 1 is equal or less than |int| 1",
"success": true
} ],
"context": "When calling asserts.is_equal_or_less_than(1, 1)",
"fullname": "test_when_calling_is_equal_or_less_than_with_equal_values",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 5 is not equal to |int| 6",
"context": "Then it passes",
"expected": "|int| 5 != |int| 6",
"success": true
} ],
"context": "When callign asserts.is_not_equal(5, 6)",
"fullname": "test_when_calling_is_not_equal",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 7,
"path": "res://tests/unit/equality.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/equality.test.gd",
"tags": [  ],
"test": ExtResource( 8 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 7
}, {
"context": "Given A Range Assertion",
"methods": [ {
"assertions": [ {
"actual": "10 is not in range(0, 10)",
"context": "Then it passes",
"expected": "10 is not in range(0, 10)",
"success": true
} ],
"context": "When calling is (10) not in range (in range(0, 10)",
"fullname": "test_when_calling_is_not_in_range",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "0 is in range(0, 10)",
"context": "Then it passes",
"expected": "0 is in range(0, 10)",
"success": true
} ],
"context": "When calling is (0) in range(0, 10)",
"fullname": "test_when_calling_is_in_range",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 2,
"path": "res://tests/unit/range.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/range.test.gd",
"tags": [  ],
"test": ExtResource( 15 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 2
}, {
"context": "Given the Addition Operator",
"methods": [ {
"assertions": [ {
"actual": "|int| 4 is equal to |int| 4",
"context": "",
"expected": "|int| 4 is equal to |int| 4",
"success": true
} ],
"context": "When we add 2 to 2 we get 4",
"fullname": "test_add",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 8 is equal to |int| 8",
"context": "",
"expected": "|int| 8 is equal to |int| 8",
"success": true
} ],
"context": "When we add 5 to 3 we get 8",
"fullname": "test_add",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 13 is equal to |int| 13",
"context": "",
"expected": "|int| 13 is equal to |int| 13",
"success": true
} ],
"context": "When we add 7 to 6 we get 13",
"fullname": "test_add",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 0 is equal to |int| 0",
"context": "",
"expected": "|int| 0 is equal to |int| 0",
"success": true
} ],
"context": "When we subtract 2 from 2 we get 0",
"fullname": "test_subtract",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 2 is equal to |int| 2",
"context": "",
"expected": "|int| 2 is equal to |int| 2",
"success": true
} ],
"context": "When we subtract 5 from 3 we get 2",
"fullname": "test_subtract",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 1 is equal to |int| 1",
"context": "",
"expected": "|int| 1 is equal to |int| 1",
"success": true
} ],
"context": "When we subtract 7 from 6 we get 1",
"fullname": "test_subtract",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 6,
"path": "res://tests/unit/parameters.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/parameters.test.gd",
"tags": [  ],
"test": ExtResource( 16 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 6
}, {
"context": "Dummy Passing Test",
"methods": [ {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Passing!",
"expected": "|bool| True == true",
"success": true
} ],
"context": "This method passes",
"fullname": "test_this_method_passes",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 1,
"path": "res://tests/unit/suite.test.gd.DummyOne",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/suite.test.gd.DummyOne",
"tags": [  ],
"test": SubResource( 11 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 1
}, {
"context": "Dummy Test 2",
"methods": [ {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Passing!",
"expected": "|bool| True == true",
"success": true
} ],
"context": "This method passes",
"fullname": "test_this_method_passes",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 1,
"path": "res://tests/unit/suite.test.gd.DummyTwo",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/suite.test.gd.DummyTwo",
"tags": [  ],
"test": SubResource( 12 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 1
}, {
"context": "Given a Test Double",
"methods": [ {
"assertions": [ {
"actual": "|int| 4 is equal to |int| 4",
"context": "Then it calls its super implementation by default",
"expected": "|int| 4 is equal to |int| 4",
"success": true
}, {
"actual": "|int| 9999 is equal to |int| 9999",
"context": "Then it does not call its super implementation when arguments patterns match a different return value",
"expected": "|int| 9999 is equal to |int| 9999",
"success": true
} ],
"context": "When we call a method that we stubbed to call its super implementation by default",
"fullname": "test_When_we_call_a_method_that_we_stubbed_to_call_its_super_implementation_by_default",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|Object| [Node:1512] is equal to |Object| [Node:1512]",
"context": "Then it returns that same node",
"expected": "|Object| [Node:1512] is equal to |Object| [Node:1512]",
"success": true
} ],
"context": "When we call a method that we have stubbed to return a node",
"fullname": "test_When_we_call_a_method_that_we_have_stubbed_to_return_a_node",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|String| Jackie is equal to |String| Jackie",
"context": "Then we can double the object successfully",
"expected": "|String| Jackie is equal to |String| Jackie",
"success": true
} ],
"context": "When we pass in dependecies on double",
"fullname": "test_When_we_pass_in_deps_on_double",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then it returns true",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we call a method that we have stubbed to return true",
"fullname": "test_When_we_call_a_method_that_we_have_stubbed_to_return_true",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 9999 is equal to |int| 9999",
"context": "Then it returns the corresponding value when the partial pattern matches",
"expected": "|int| 9999 is equal to |int| 9999",
"success": true
} ],
"context": "When we call a method that was stubbed with a partial (ie using any()) argument pattern",
"fullname": "test_When_we_call_a_method_that_was_stubbed_with_a_partial_argument_pattern",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|null| Null == null",
"context": "Then we get the stubbed value back",
"expected": "|null| Null == null",
"success": true
} ],
"context": "When we stub a method of a doubled inner class",
"fullname": "test_When_we_stub_a_method_of_a_double_inner_class",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 99 is equal to |int| 99",
"context": "Then it returns a value",
"expected": "|int| 99 is equal to |int| 99",
"success": true
} ],
"context": "When we pass a funcref as a subcall that returns",
"fullname": "test_When_we_pass_a_funcref_as_a_subcall_that_returns_a_value",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 100 is equal to |int| 100",
"context": "Then it returns the default stubbed value when the arguments don't match any pattern",
"expected": "|int| 100 is equal to |int| 100",
"success": true
}, {
"actual": "|int| 1000 is equal to |int| 1000",
"context": "Then it returns the the corresponding value to the pattern the arguments matched",
"expected": "|int| 1000 is equal to |int| 1000",
"success": true
} ],
"context": "When we call a method that was stubbed to return different values based on argument patterns",
"fullname": "test_When_we_call_a_method_that_was_stubbed_to_return_different_values_based_on_argument_patterns",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|String| Jackie is equal to |String| Jackie",
"context": "Then we can double the object successfully",
"expected": "|String| Jackie is equal to |String| Jackie",
"success": true
} ],
"context": "When we pass in dependecies on direct",
"fullname": "test_When_we_pass_in_deps_on_direct",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "add was called",
"context": "Then we can see that it was called at least once",
"expected": "add was called",
"success": true
} ],
"context": "When we call a method that we are spying on",
"fullname": "test_When_we_call_a_method_that_we_are_spying_on",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "method: add was called with arguments: [10, 10]",
"context": "Then we can see that it was called with those arguments",
"expected": "method: add was called with arguments: [10, 10]",
"success": true
} ],
"context": "When we pass arguments to a method call that we are spying on",
"fullname": "test_When_we_pass_arguments_to_a_method_call_that_we_are_spying_on",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "(1, 1) is builtin: Vector2",
"context": "Then we can call methods on it",
"expected": "(1, 1) is builtin: Vector2",
"success": true
} ],
"context": "When we double an inner class",
"fullname": "test_When_we_double_an_inner_class",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 9999 is equal to |int| 9999",
"context": "Then it returns the corresponding value when the pattern matches",
"expected": "|int| 9999 is equal to |int| 9999",
"success": true
} ],
"context": "When we call a method that was stubbed with an argument pattern that includes a non-primitive object",
"fullname": "test_When_we_call_a_method_that_was_stubbed_with_an_argument_pattern_that_includes_a_non_primitive_object",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 99 is equal to |int| 99",
"context": "Then it affects the state of the double",
"expected": "|int| 99 is equal to |int| 99",
"success": true
} ],
"context": "When we pass a funcref as a subcall",
"fullname": "test_When_we_pass_a_funcref_as_a_subcall",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 4 is equal to |int| 4",
"context": "Then we get the correct result",
"expected": "|int| 4 is equal to |int| 4",
"success": true
} ],
"context": "When we call an add(x, y) method that we haven't directed",
"fullname": "test_When_we_call_an_add_method_that_we_have_not_directed",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|float| 6.283185 is equal to |float| 6.283185",
"context": "Then we can call the static methods of that inner double",
"expected": "|float| 6.283185 is equal to |float| 6.283185",
"success": true
} ],
"context": "When we add an doubled inner class to it",
"fullname": "test_When_we_add_a_doubled_inner_class_to_it",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| True is equal to |bool| True",
"context": "Then we can call it",
"expected": "|bool| True is equal to |bool| True",
"success": true
} ],
"context": "When we stubbed a keyworded method by passing in the correct keyword",
"fullname": "test_When_we_stubbed_a_keyword_method_by_passing_in_the_correct_keyword",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|Array| [10, 5] is equal to |Array| [10, 5]",
"context": "Then it returns a value",
"expected": "|Array| [10, 5] is equal to |Array| [10, 5]",
"success": true
} ],
"context": "When we pass an Object with a call_func function",
"fullname": "test_When_we_pass_an_object_with_callfunc_method_as_a_subcall",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|null| Null == null",
"context": "Then we get null",
"expected": "|null| Null == null",
"success": true
} ],
"context": "When we call a method that we have dummied",
"fullname": "test_When_we_call_a_method_that_we_have_dummied",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 19,
"path": "res://tests/integration/test_double.test.gd",
"source": {
"containers": [ "res://tests/integration", "res://tests" ],
"method": "",
"path": "res://tests/integration/test_double.test.gd",
"tags": [  ],
"test": ExtResource( 14 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 19
}, {
"context": "Given a String Assertion",
"methods": [ {
"assertions": [ {
"actual": "impsum does not begin with bleh lorem",
"context": "Then it passes",
"expected": "impsum does not begin with bleh lorem",
"success": true
} ],
"context": "When calling asserts.string_does_not_begin_with('lorem', 'impsum')",
"fullname": "test_when_calling_string_does_not_begin_with",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "lorem impsum begins with lorem",
"context": "Then it passes",
"expected": "lorem impsum begins with lorem",
"success": true
} ],
"context": "When calling asserts.string_begins_with('lorem', 'lorem impsum')",
"fullname": "test_when_calling_string_begins_with",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "lorem impsum ends with impsum",
"context": "Then it passes",
"expected": "lorem impsum ends with impsum",
"success": true
} ],
"context": "When calling asserts.string_ends_with('impsum', 'lorem impsum')",
"fullname": "test_when_calling_string_ends_with",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "impsum does not contain beem im",
"context": "Then it passes",
"expected": "impsum does not contain beem im",
"success": true
} ],
"context": "When calling asserts.string_does_not_contain('em im', 'impsum')",
"fullname": "test_when_calling_string_does_not_contain",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "lorem impsum contains em im",
"context": "Then it passes",
"expected": "lorem impsum contains em im",
"success": true
} ],
"context": "When calling asserts.string_contains('em im', 'lorem impsum')",
"fullname": "test_when_calling_string_contains",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "impsum does not end with lorem",
"context": "Then it passes",
"expected": "impsum does not end with lorem",
"success": true
} ],
"context": "When calling asserts.string_does_not_end_with('lorem', 'impsum')",
"fullname": "test_when_calling_string_does_not_end_with",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 6,
"path": "res://tests/unit/string.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/string.test.gd",
"tags": [  ],
"test": ExtResource( 9 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 6
}, {
"context": "Given an Object Assertion",
"methods": [ {
"assertions": [ {
"actual": "Null is freed from memory",
"context": "Then it passes",
"expected": "Null is freed from memory",
"success": true
} ],
"context": "When calling asserts.is_freed(freed_object",
"fullname": "test_when_calling_freed_object_is_freed",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:1735] is not freed",
"context": "Then it passes",
"expected": "[Node:1735] is not freed",
"success": true
} ],
"context": "When calling asserts.is_not_freed(unfreed_object)",
"fullname": "test_when_calling_unfreed_object_is_not_freed",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:1749] is not blocking signals",
"context": "Then it passes",
"expected": "[Node:1749] is not blocking signals",
"success": true
} ],
"context": "When calling is not blocking signals while not blocking signals",
"fullname": "test_is_not_blocking_signals",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:1705] does not have user signal: builtin_dummy",
"context": "Then it passes",
"expected": "[Node:1705] does not have user signal: builtin_dummy",
"success": true
} ],
"context": "When calling does not have user signal with class signal",
"fullname": "test_when_calling_does_not_have_user_signal_with_class_signal_constant",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:1705].builtin_dummy is not connected to [Node:1705].title",
"context": "Then it passes",
"expected": "[Node:1705].builtin_dummy is not connected to [Node:1705].title",
"success": true
} ],
"context": "When calling asserts object is not connected with an invalid connection",
"fullname": "test_when_calling_obj_is_not_connected_with_an_invalid_connection",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:1705] has meta: dummy",
"context": "Then it passes",
"expected": "[Node:1705] has meta: dummy",
"success": true
}, {
"actual": "[Node:1705] has meta: dummy",
"context": "Then it passes",
"expected": "[Node:1705] has meta: dummy",
"success": true
} ],
"context": "When calling asserts.object_has_meta() after adding metadata",
"fullname": "test_when_calling_has_meta_after_adding_metadata",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "[Node:1705] does not have meta: bad_meta",
"context": "Then it passes",
"expected": "[Node:1705] does not have meta: bad_meta",
"success": true
} ],
"context": "When calling asserts.object_does_not_have_meta()",
"fullname": "test_when_calling_does_not_have_meta",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:1817] is not queued for deletion",
"context": "Then it passes",
"expected": "[Node:1817] is not queued for deletion",
"success": true
} ],
"context": "When calling asserts.object_is_not_for_queued_deletion after not calling queue free()",
"fullname": "test_when_calling_obj_is_not_for_queued_deletion_after_not_calling_queue_free",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:1705].builtin_dummy is connected to [Node:1705].title",
"context": "Then it passes",
"expected": "[Node:1705].builtin_dummy is connected to [Node:1705].title",
"success": true
} ],
"context": "When calling asserts object is connected with a valid connection",
"fullname": "test_when_calling_obj_is_connected_with_a_real_connection",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:1845] is queued for deletion",
"context": "Then it passes",
"expected": "[Node:1845] is queued for deletion",
"success": true
} ],
"context": "When calling asserts.object_is_queued for deletion after calling queue_free",
"fullname": "test_when_calling_obj_is_queued_for_deletion_after_calling_queue_free",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:1705] does not have user signal: false_signal",
"context": "Then it passes",
"expected": "[Node:1705] does not have user signal: false_signal",
"success": true
} ],
"context": "When calling obj_does_not_have_user_signal with fake signal",
"fullname": "test_when_calling_does_not_have_user_signal",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:1705] does not have meta: confusing",
"context": "Then it passes",
"expected": "[Node:1705] does not have meta: confusing",
"success": true
} ],
"context": "When calling asserts.object_has_meta with real key but null val",
"fullname": "test_when_calling_does_not_have_meta_real_key_null_value_pair",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:1705] has method: title",
"context": "Then it passes",
"expected": "[Node:1705] has method: title",
"success": true
} ],
"context": "When calling has_method('title')",
"fullname": "test_when_calling_has_method_title",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:1705] has user signal: dummy_signal",
"context": "Then it passes",
"expected": "[Node:1705] has user signal: dummy_signal",
"success": true
} ],
"context": "When calling obj_has_user_signal after adding a signal",
"fullname": "test_when_calling_has_user_signal_after_adding_a_signal",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:1889] is blocking signals",
"context": "Then it passes",
"expected": "[Node:1889] is blocking signals",
"success": true
} ],
"context": "When calling is blocking signals while blocking signals",
"fullname": "test_is_blocking_signals",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 15,
"path": "res://tests/unit/object.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/object.test.gd",
"tags": [  ],
"test": ExtResource( 7 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 15
}, {
"context": "Given an Is Instance of class/type Assertion",
"methods": [ {
"assertions": [ {
"actual": "|AABB| 0, 0, 0 - 0, 0, 0 != null",
"context": "AABB is not null",
"expected": "|AABB| 0, 0, 0 - 0, 0, 0 != null",
"success": true
}, {
"actual": "0, 0, 0 - 0, 0, 0 is builtin: AABB",
"context": "Then it passes",
"expected": "0, 0, 0 - 0, 0, 0 is builtin: AABB",
"success": true
} ],
"context": "When calling asserts.is_AABB(aabb: AABB)",
"fullname": "test_when_calling_is_AABB",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|Array| [] != null",
"context": "array is not null",
"expected": "|Array| [] != null",
"success": true
}, {
"actual": "[] is builtin: Array",
"context": "Then it passes",
"expected": "[] is builtin: Array",
"success": true
} ],
"context": "When calling asserts.is_Array(array: Array)",
"fullname": "test_when_calling_is_Array",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "1 is builtin: float",
"context": "Then it passes",
"expected": "1 is builtin: float",
"success": true
} ],
"context": "When calling asserts.is_float(1.0)",
"fullname": "test_when_calling_is_float",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|Vector2| (0, 0) != null",
"context": "vec2 is not null",
"expected": "|Vector2| (0, 0) != null",
"success": true
}, {
"actual": "(0, 0) is builtin: Vector2",
"context": "Then it passes",
"expected": "(0, 0) is builtin: Vector2",
"success": true
} ],
"context": "When calling asserts.is_Vector2(vec2)",
"fullname": "test_when_calling_is_Vector2",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|PoolVector3Array| [] != null",
"context": "vec3s is not null",
"expected": "|PoolVector3Array| [] != null",
"success": true
}, {
"actual": "[] is builtin: PoolVector3Array",
"context": "Then it passes",
"expected": "[] is builtin: PoolVector3Array",
"success": true
} ],
"context": "When calling is asserts.is_PoolVector3Array(vec3s: PoolVector3Array)",
"fullname": "test_when_calling_is_PoolVector3Array",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|PoolVector2Array| [] != null",
"context": "vec2s is not null",
"expected": "|PoolVector2Array| [] != null",
"success": true
}, {
"actual": "[] is builtin: PoolVector2Array",
"context": "Then it passes",
"expected": "[] is builtin: PoolVector2Array",
"success": true
} ],
"context": "When calling is asserts.is_PoolVector2Array(vec2s: PoolVector2Array)",
"fullname": "test_when_calling_is_PoolVector2Array",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|PoolStringArray| [] != null",
"context": "strs is not null",
"expected": "|PoolStringArray| [] != null",
"success": true
}, {
"actual": "[] is builtin: PoolStringArray",
"context": "Then it passes",
"expected": "[] is builtin: PoolStringArray",
"success": true
} ],
"context": "When calling is asserts.is_PoolStringArray(strs: PoolStringArray)",
"fullname": "test_when_calling_is_PoolStringArray",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|Quat| (0, 0, 0, 1) != null",
"context": "quat is not null",
"expected": "|Quat| (0, 0, 0, 1) != null",
"success": true
}, {
"actual": "(0, 0, 0, 1) is builtin: Quat",
"context": "Then it passes",
"expected": "(0, 0, 0, 1) is builtin: Quat",
"success": true
} ],
"context": "When calling asserts.is_Quat(quat: Quat)",
"fullname": "test_when_calling_is_Quat",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|RID| [RID] != null",
"context": "rid is not null",
"expected": "|RID| [RID] != null",
"success": true
}, {
"actual": "[RID] is builtin: RID",
"context": "Then it passes",
"expected": "[RID] is builtin: RID",
"success": true
} ],
"context": "When calling asserts.is_RID(rid: RID)",
"fullname": "test_when_calling_is_RID",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|Rect2| (0, 0, 0, 0) != null",
"context": "rect2 is not null",
"expected": "|Rect2| (0, 0, 0, 0) != null",
"success": true
}, {
"actual": "(0, 0, 0, 0) is builtin: Rect2",
"context": "Then it passes",
"expected": "(0, 0, 0, 0) is builtin: Rect2",
"success": true
} ],
"context": "When calling asserts.is_Rect2(rect2: Rect2)",
"fullname": "test_when_calling_is_Rect2",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|Vector3| (0, 0, 0) != null",
"context": "vec3 is not null",
"expected": "|Vector3| (0, 0, 0) != null",
"success": true
}, {
"actual": "(0, 0, 0) is builtin: Vector3",
"context": "Then it passes",
"expected": "(0, 0, 0) is builtin: Vector3",
"success": true
} ],
"context": "When calling asserts.is_Vector3(vec3: Vector3",
"fullname": "test_when_calling_is_Vector3",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|NodePath| . != null",
"context": "@'Parent/Child' is not null",
"expected": "|NodePath| . != null",
"success": true
}, {
"actual": ". is builtin: NodePath",
"context": "Then it passes",
"expected": ". is builtin: NodePath",
"success": true
} ],
"context": "When calling asserts.is_NodePath(@'Parent/Child')",
"fullname": "test_when_calling_is_NodePath",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "True is builtin: bool",
"context": "Then it passes",
"expected": "True is builtin: bool",
"success": true
} ],
"context": "When calling asserts.is_bool(true)",
"fullname": "test_when_calling_is_bool",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|PoolIntArray| [] != null",
"context": "ints is not null",
"expected": "|PoolIntArray| [] != null",
"success": true
}, {
"actual": "[] is builtin: PoolIntArray",
"context": "Then it passes",
"expected": "[] is builtin: PoolIntArray",
"success": true
} ],
"context": "When calling asserts.is_PoolIntArray(ints: PoolIntArray)",
"fullname": "test_when_calling_is_PoolIntArray",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|PoolColorArray| [PoolColorArray] != null",
"context": "colors is not null",
"expected": "|PoolColorArray| [PoolColorArray] != null",
"success": true
}, {
"actual": "[PoolColorArray] is builtin: PoolColorArray",
"context": "Then it passes",
"expected": "[PoolColorArray] is builtin: PoolColorArray",
"success": true
} ],
"context": "When calling asserts.is_PoolColorArray(colors: PoolColorArray)",
"fullname": "test_when_calling_is_PoolColorArray",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|Plane| 0, 0, 0, 0 != null",
"context": "plane is not null",
"expected": "|Plane| 0, 0, 0, 0 != null",
"success": true
}, {
"actual": "0, 0, 0, 0 is builtin: Plane",
"context": "then it passes",
"expected": "0, 0, 0, 0 is builtin: Plane",
"success": true
} ],
"context": "When calling asserts.is_Plane(plane: Plane())",
"fullname": "test_when_calling_is_Plane",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "1 is builtin: int",
"context": "Then it passes",
"expected": "1 is builtin: int",
"success": true
} ],
"context": "When callign asserts.is_int(1)",
"fullname": "test_when_calling_is_int",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|Basis| ((1, 0, 0), (0, 1, 0), (0, 0, 1)) != null",
"context": "basis is not null",
"expected": "|Basis| ((1, 0, 0), (0, 1, 0), (0, 0, 1)) != null",
"success": true
}, {
"actual": "((1, 0, 0), (0, 1, 0), (0, 0, 1)) is builtin: Basis",
"context": "Then it passes",
"expected": "((1, 0, 0), (0, 1, 0), (0, 0, 1)) is builtin: Basis",
"success": true
} ],
"context": "When calling asserts.is_basis(basis: Basis",
"fullname": "test_when_calling_is_Basis",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|PoolByteArray| [PoolByteArray] != null",
"context": "bytes is not null",
"expected": "|PoolByteArray| [PoolByteArray] != null",
"success": true
}, {
"actual": "[PoolByteArray] is builtin: PoolByteArray",
"context": "Then it passes",
"expected": "[PoolByteArray] is builtin: PoolByteArray",
"success": true
} ],
"context": "When calling asserts.is_PoolByteArray(bytes: PoolByteArray)",
"fullname": "test_when_calling_is_PoolByteArray",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|Object| [Node:1894] != null",
"context": "node is not null",
"expected": "|Object| [Node:1894] != null",
"success": true
}, {
"actual": "[Node:1894] is builtin: Object",
"context": "An instance of node is an Object",
"expected": "[Node:1894] is builtin: Object",
"success": true
} ],
"context": "When calling is asserts.object(node: Node)",
"fullname": "test_when_calling_is_object",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|PoolRealArray| [] != null",
"context": "reals is not null",
"expected": "|PoolRealArray| [] != null",
"success": true
}, {
"actual": "[] is builtin: PoolRealArray",
"context": "Then it passes",
"expected": "[] is builtin: PoolRealArray",
"success": true
} ],
"context": "When calling is asserts.is_PoolRealArray(reals: PoolRealArray)",
"fullname": "test_when_calling_is_PoolRealArray",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|Color| 0,0,0,1 != null",
"context": "color is not null",
"expected": "|Color| 0,0,0,1 != null",
"success": true
}, {
"actual": "0,0,0,1 is builtin: Color",
"context": "Then it passes",
"expected": "0,0,0,1 is builtin: Color",
"success": true
} ],
"context": "When calling asserts.is_color(color: Color)",
"fullname": "test_when_calling_is_Color",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|String|  != null",
"context": "strs is not null",
"expected": "|String|  != null",
"success": true
}, {
"actual": " is builtin: String",
"context": "Then it passes",
"expected": " is builtin: String",
"success": true
} ],
"context": "When calling asserts.is_string(strs: String)",
"fullname": "test_when_calling_is_string",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|Transform| 1, 0, 0, 0, 1, 0, 0, 0, 1 - 0, 0, 0 != null",
"context": "transform is not null",
"expected": "|Transform| 1, 0, 0, 0, 1, 0, 0, 0, 1 - 0, 0, 0 != null",
"success": true
}, {
"actual": "1, 0, 0, 0, 1, 0, 0, 0, 1 - 0, 0, 0 is builtin: Transform",
"context": "Then it passes",
"expected": "1, 0, 0, 0, 1, 0, 0, 0, 1 - 0, 0, 0 is builtin: Transform",
"success": true
} ],
"context": "When calling asserts.is_Transform(transform: Transform)",
"fullname": "test_when_calling_is_Transform",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "{} is builtin: Dictionary",
"context": "Then it passes",
"expected": "{} is builtin: Dictionary",
"success": true
} ],
"context": "When calling asserts.is_Dictionary({})",
"fullname": "test_when_calling_is_Dictionary",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|Transform2D| ((1, 0), (0, 1), (0, 0)) != null",
"context": "transform2D is not null",
"expected": "|Transform2D| ((1, 0), (0, 1), (0, 0)) != null",
"success": true
}, {
"actual": "((1, 0), (0, 1), (0, 0)) is builtin: Transform2D",
"context": "Then it passes",
"expected": "((1, 0), (0, 1), (0, 0)) is builtin: Transform2D",
"success": true
} ],
"context": "When calling asserts.is_Transform(transform2D: Transform2D)",
"fullname": "test_when_calling_is_Transform2D",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
} ],
"passed": 26,
"path": "res://tests/unit/is_instance.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/is_instance.test.gd",
"tags": [  ],
"test": ExtResource( 6 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 26
}, {
"context": "Given an Is Not Instance of class/type Assertion",
"methods": [ {
"assertions": [ {
"actual": "Null is not builtin: AABB",
"context": "Then it passes",
"expected": "Null is not builtin: AABB",
"success": true
} ],
"context": "when calling asserts.is_not_AABB(null)",
"fullname": "test_when_calling_is_not_AABB",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Array",
"context": "Then it passes",
"expected": "Null is not builtin: Array",
"success": true
} ],
"context": "when calling asserts.is_not_Array(null)",
"fullname": "test_when_calling_is_not_Array",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Basis",
"context": "Then it passes",
"expected": "Null is not builtin: Basis",
"success": true
} ],
"context": "when calling asserts.is_not_Basis(null)",
"fullname": "test_when_calling_is_not_Basis",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Color",
"context": "Then it passes",
"expected": "Null is not builtin: Color",
"success": true
} ],
"context": "when calling asserts.is_not_Color(null)",
"fullname": "test_when_calling_is_not_Color",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: PoolRealArray",
"context": "Then it passes",
"expected": "Null is not builtin: PoolRealArray",
"success": true
} ],
"context": "when calling asserts.is_not_PoolRealArray(null)",
"fullname": "test_when_calling_is_not_PoolRealArray",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: PoolVector2Array",
"context": "Then it passes",
"expected": "Null is not builtin: PoolVector2Array",
"success": true
} ],
"context": "when calling asserts.is_not_PoolVector2Array(null)",
"fullname": "test_when_calling_is_not_PoolVector2Array",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Plane",
"context": "Then it passes",
"expected": "Null is not builtin: Plane",
"success": true
} ],
"context": "when calling asserts.is_not_Plane(null)",
"fullname": "test_when_calling_is_not_Plane",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Rect2",
"context": "Then it passes",
"expected": "Null is not builtin: Rect2",
"success": true
} ],
"context": "when calling asserts.is_not_Rect2(null)",
"fullname": "test_when_calling_is_not_Rect2",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: NodePath",
"context": "Then it passes",
"expected": "Null is not builtin: NodePath",
"success": true
} ],
"context": "when calling asserts.is_not_NodePath(null)",
"fullname": "test_when_calling_is_not_NodePath",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: RID",
"context": "Then it passes",
"expected": "Null is not builtin: RID",
"success": true
} ],
"context": "when calling asserts.is_not_RID(null)",
"fullname": "test_when_calling_is_not_RID",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: int",
"context": "Then it passes",
"expected": "Null is not builtin: int",
"success": true
} ],
"context": "when calling asserts.is_not_int(null)",
"fullname": "test_when_calling_is_not_int",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Vector2",
"context": "Then it passes",
"expected": "Null is not builtin: Vector2",
"success": true
} ],
"context": "when calling asserts.is_not_Vector2(null)",
"fullname": "test_when_calling_is_not_Vector2",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: bool",
"context": "Then it passes",
"expected": "Null is not builtin: bool",
"success": true
} ],
"context": "when calling asserts.is_not_bool(null)",
"fullname": "test_when_calling_is_not_bool",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: float",
"context": "Then it passes",
"expected": "Null is not builtin: float",
"success": true
} ],
"context": "when calling asserts.is_not_float(null)",
"fullname": "test_when_calling_is_not_float",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: String",
"context": "Then it passes",
"expected": "Null is not builtin: String",
"success": true
} ],
"context": "when calling asserts.is_not_String(null)",
"fullname": "test_when_calling_is_not_String",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Quat",
"context": "Then it passes",
"expected": "Null is not builtin: Quat",
"success": true
} ],
"context": "when calling asserts.is_not_Quat(null)",
"fullname": "test_when_calling_is_not_Quat",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Transform",
"context": "Then it passes",
"expected": "Null is not builtin: Transform",
"success": true
} ],
"context": "when calling asserts.is_not_Transform(null)",
"fullname": "test_when_calling_is_not_Transform",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Transform2D",
"context": "Then it passes",
"expected": "Null is not builtin: Transform2D",
"success": true
} ],
"context": "when calling asserts.is_not_Transform2D(null)",
"fullname": "test_when_calling_is_not_Transform2D",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: PoolByteArray",
"context": "Then it passes",
"expected": "Null is not builtin: PoolByteArray",
"success": true
} ],
"context": "when calling asserts.is_not_PoolByteArray(null)",
"fullname": "test_when_calling_is_not_PoolByteArray",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: PoolStringArray",
"context": "Then it passes",
"expected": "Null is not builtin: PoolStringArray",
"success": true
} ],
"context": "when calling asserts.is_not_PoolStringArray(null)",
"fullname": "test_when_calling_is_not_PoolStringArray",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: PoolVector3Array",
"context": "Then it passes",
"expected": "Null is not builtin: PoolVector3Array",
"success": true
} ],
"context": "when calling asserts.is_not_PoolVector3Array(null)",
"fullname": "test_when_calling_is_not_PoolVector3Array",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Object",
"context": "Then it passes",
"expected": "Null is not builtin: Object",
"success": true
} ],
"context": "when calling asserts.is_not_Object(null)",
"fullname": "test_when_calling_is_not_Object",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: PoolColorArray",
"context": "Then it passes",
"expected": "Null is not builtin: PoolColorArray",
"success": true
} ],
"context": "when calling asserts.is_not_PoolColorArray(null)",
"fullname": "test_when_calling_is_not_PoolColorArray",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Dictionary",
"context": "Then it passes",
"expected": "Null is not builtin: Dictionary",
"success": true
} ],
"context": "when calling asserts.is_not_Dictionary(null)",
"fullname": "test_when_calling_is_not_Dictionary",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Vector3",
"context": "Then it passes",
"expected": "Null is not builtin: Vector3",
"success": true
} ],
"context": "when calling asserts.is_not_Vector3(null)",
"fullname": "test_when_calling_is_not_Vector3",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: PoolIntArray",
"context": "Then it passes",
"expected": "Null is not builtin: PoolIntArray",
"success": true
} ],
"context": "when calling asserts.is_not_PoolIntArray(null)",
"fullname": "test_when_calling_is_not_PoolIntArray",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 26,
"path": "res://tests/unit/is_not_instance.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/is_not_instance.test.gd",
"tags": [  ],
"test": ExtResource( 2 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 26
}, {
"context": "Given a Test Script",
"methods": [ {
"assertions": [ {
"actual": "|bool| True == true",
"context": "if the test didn't break this works",
"expected": "|bool| True == true",
"success": true
} ],
"context": " we can omit describe",
"fullname": "test_we_can_omit_describe",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 10 is greater than |int| 1",
"context": "We get an array of multiple values back",
"expected": "|int| 10 is greater than |int| 1",
"success": true
}, {
"actual": "|int| 0 is not equal to |int| 9",
"context": "With different values",
"expected": "|int| 0 != |int| 9",
"success": true
}, {
"actual": "|int| 10 is greater than |int| 1",
"context": "And we can track multiple properties",
"expected": "|int| 10 is greater than |int| 1",
"success": true
} ],
"context": "When we record properties",
"fullname": "test_we_can_record_properties",
"passed": 3,
"success": true,
"time": 0.0,
"total": 3
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|int| 2 is equal to |int| 2",
"context": "",
"expected": "|int| 2 is equal to |int| 2",
"success": true
} ],
"context": " when we omit context we can see expected and got under method",
"fullname": "test_when_we_omit_context_we_can_see_expected_and_got_under_method",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
} ],
"passed": 3,
"path": "res://tests/unit/test.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/test.test.gd",
"tags": [  ],
"test": ExtResource( 19 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 3
}, {
"context": "Given a Signal Watcher",
"methods": [ {
"assertions": [ {
"actual": "Signal: example was emitted from [Node:1879] with arguments: [1, 20, 5]",
"context": "Then it captures any arguments that where passed when the signal was emitted",
"expected": "Signal: example was emitted from [Node:1879] with arguments: [1, 20, 5]",
"success": true
} ],
"context": "When we watch a signal from an object with no bound variables",
"fullname": "test_When_we_watch_a_signal_from_an_object_with_no_bound_variables",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Signal: example was not emitted from [Node:1879]",
"context": "Then it does not capture the non-emitted signal",
"expected": "Signal: example was not emitted from [Node:1879]",
"success": true
} ],
"context": "When we watch and do not emit a signal",
"fullname": "test_When_we_watch_and_do_not_emit_a_signal",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "signal: multiple was emitted from [Node:1879] 2",
"context": "Then we can track how many times we emitted it",
"expected": "signal: multiple was emitted from [Node:1879] 2",
"success": true
} ],
"context": "When we watch and signal and emit it multiple times",
"fullname": "test_When_we_watch_a_signal_and_emit_it_multiple_times",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "signal: example was emitted from [Node:1879]",
"context": "Then it captures the emitted signal",
"expected": "signal: example was emitted from [Node:1879]",
"success": true
} ],
"context": "When we watch and emit a signal",
"fullname": "test_When_we_watch_and_emit_a_signal",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 4,
"path": "res://tests/unit/watcher.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/watcher.test.gd",
"tags": [  ],
"test": ExtResource( 17 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 4
}, {
"context": "Given a Yield",
"methods": [ {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then we set var a to true",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then we set var b to true",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we yield in start twice",
"fullname": "test_When_we_yield_in_start",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then we set var c to true",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then we set var d to true",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we yield in pre thrice",
"fullname": "test_When_we_yield_in_pre",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then the yielder is paused",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then the timeout signal of the yielder is disconnected",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then our signal to the yielder is disconnected",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When the yielder heres our signal",
"fullname": "test_When_the_yielder_hears_our_signal",
"passed": 3,
"success": true,
"time": 0.0,
"total": 3
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then the yielder is paused",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When a signal being yielded on is emitted",
"fullname": "test_When_a_signal_being_yielded_on_is_emitted_the_yielder_is_stopped",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then the timeout signal is disconnected",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then the signal-signal is disconnected",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When it is finished",
"fullname": "test_When_yielder_is_finished_signals_are_disconnected",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then we set var e to true",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then we set var f to true",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we yield twice in execute",
"fullname": "test_When_we_yield_in_execute",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then the yielder is unpaused",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then the timeout signal of the yielder is connected",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then our signal is connected to the yielder",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we call until signal",
"fullname": "test_When_we_call_until_signal",
"passed": 3,
"success": true,
"time": 0.0,
"total": 3
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then yielder is not active",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When asserting against a test",
"fullname": "test_Yielder_is_not_active_when_asserting",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[100, Null, Null, Null, Null, Null] is builtin: Array",
"context": "Then we get an array",
"expected": "[100, Null, Null, Null, Null, Null] is builtin: Array",
"success": true
}, {
"actual": "|int| 6 is equal to |int| 6",
"context": "Of size 6",
"expected": "|int| 6 is equal to |int| 6",
"success": true
}, {
"actual": "|int| 100 is equal to |int| 100",
"context": "Where element 0 is 100",
"expected": "|int| 100 is equal to |int| 100",
"success": true
} ],
"context": "When yield(self.yield_value()) returns",
"fullname": "test_When_we_yield_we_get_the_return_value",
"passed": 3,
"success": true,
"time": 0.0,
"total": 3
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then the yielder is paused",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "The timeout signal of the yielder is not connected",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When the yielder times out on until_timeout(0.1)",
"fullname": "test_When_the_yielder_times_out",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then yielder is unpaused",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "The timeout signal of the yielder is connected",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we call until_timeout (with 1.0)",
"fullname": "test_When_we_call_until_timeout",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
} ],
"passed": 11,
"path": "res://tests/unit/yield.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/yield.test.gd",
"tags": [  ],
"test": ExtResource( 18 ),
"yield_time": 1.9
},
"success": true,
"time_taken": 0.0,
"total": 11
} ],
1611514499: [ {
"context": "Default Args",
"methods": [ {
"assertions": [ {
"actual": "|bool| True == true",
"context": "If this method can be reached then we have doubled a script with default argument(s) properly!",
"expected": "|bool| True == true",
"success": true
} ],
"context": " default arguments of interpolate property",
"fullname": "test_default_arguments_of_interpolate_property",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 1,
"path": "res://tests/integration/default_args.test.gd",
"source": {
"containers": [ "res://tests/integration", "res://tests" ],
"method": "",
"path": "res://tests/integration/default_args.test.gd",
"tags": [  ],
"test": ExtResource( 10 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 1
}, {
"context": "Given a Boolean Assertion",
"methods": [ {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then it passes",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When calling asserts.is_true(true)",
"fullname": "test_when_calling_asserts_is_true",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| True != false",
"context": "",
"expected": "|bool| True == false",
"success": false
} ],
"context": " intentional failure",
"fullname": "test_intentional_failure",
"passed": 0,
"success": false,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| False == false",
"context": "Then it passes",
"expected": "|bool| False == false",
"success": true
} ],
"context": "When calling asserts.is_false(false)",
"fullname": "test_when_calling_asserts_is_false",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 2,
"path": "res://tests/integration/boolean.test.gd",
"source": {
"containers": [ "res://tests/integration", "res://tests" ],
"method": "",
"path": "res://tests/integration/boolean.test.gd",
"tags": [  ],
"test": ExtResource( 20 ),
"yield_time": 0.0
},
"success": false,
"time_taken": 0.0,
"total": 3
}, {
"context": "Given is_on_floor",
"methods": [ {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then it can be stubbed",
"expected": "|bool| True == true",
"success": true
} ],
"context": "From a user-defined script",
"fullname": "test_stubbing_is_on_floor_method_from_user_defined_class",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then it can be stubbed",
"expected": "|bool| True == true",
"success": true
} ],
"context": "From a built-in KinematicBody2D2",
"fullname": "test_stubbing_is_on_floor_method_from_builtin_class2",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then it can be stubbed",
"expected": "|bool| True == true",
"success": true
} ],
"context": "From a child node of a scene without scripts",
"fullname": "test_stubbing_is_on_floor_as_child_node_with_no_script",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 3,
"path": "res://tests/integration/on_floor.test.gd",
"source": {
"containers": [ "res://tests/integration", "res://tests" ],
"method": "",
"path": "res://tests/integration/on_floor.test.gd",
"tags": [  ],
"test": ExtResource( 5 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 3
}, {
"context": "Given a Script Director",
"methods": [ {
"assertions": [ {
"actual": "[Reference:1458] is instance of class: [GDScript:1451]",
"context": "Then we get that inner class back",
"expected": "[Reference:1458] is instance of class: [GDScript:1451]",
"success": true
} ],
"context": "When we double an inner class",
"fullname": "test_When_we_double_an_inner_class",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|Dictionary| {_enter_tree:{arguments:, default_arguments:}, _exit_tree:{arguments:, default_arguments:}, _get:{arguments:a, default_arguments:a}, _get_configuration_warning:{arguments:, default_arguments:}, _get_editor_description:{arguments:, default_arguments:}, _get_import_path:{arguments:, default_arguments:}, _get_property_list:{arguments:, default_arguments:}, _init:{arguments:, default_arguments:}, _input:{arguments:a, default_arguments:a}, _notification:{arguments:a, default_arguments:a}, _physics_process:{arguments:a, default_arguments:a}, _process:{arguments:a, default_arguments:a}, _ready:{arguments:, default_arguments:}, _set:{arguments:a, b, default_arguments:a, b}, _set_editor_description:{arguments:a, default_arguments:a}, _set_import_path:{arguments:a, default_arguments:a}, _to_string:{arguments:, default_arguments:}, _unhandled_input:{arguments:a, default_arguments:a}, _unhandled_key_input:{arguments:a, default_arguments:a}, add:{arguments:a, b, default_arguments:a, b}, add_child:{arguments:a, b, default_arguments:a, b = False}, add_child_below_node:{arguments:a, b, c, default_arguments:a, b, c = False}, add_to_group:{arguments:a, b, default_arguments:a, b = False}, add_user_signal:{arguments:a, b, default_arguments:a, b = []}, call:{arguments:a, default_arguments:a}, call_deferred:{arguments:a, default_arguments:a}, callv:{arguments:a, b, default_arguments:a, b}, can_process:{arguments:, default_arguments:}, can_translate_messages:{arguments:, default_arguments:}, connect:{arguments:a, b, c, d, e, default_arguments:a, b, c, d = [], e = 0}, disconnect:{arguments:a, b, c, default_arguments:a, b, c}, divide:{arguments:a, b, default_arguments:a, b}, duplicate:{arguments:a, default_arguments:a = 15}, emit_signal:{arguments:a, default_arguments:a}, find_node:{arguments:a, b, c, default_arguments:a, b = True, c = True}, find_parent:{arguments:a, default_arguments:a}, free:{arguments:, default_arguments:}, get:{arguments:a, default_arguments:a}, get_child:{arguments:a, default_arguments:a}, get_child_count:{arguments:, default_arguments:}, get_children:{arguments:, default_arguments:}, get_class:{arguments:, default_arguments:}, get_custom_multiplayer:{arguments:, default_arguments:}, get_filename:{arguments:, default_arguments:}, get_groups:{arguments:, default_arguments:}, get_incoming_connections:{arguments:, default_arguments:}, get_index:{arguments:, default_arguments:}, get_indexed:{arguments:a, default_arguments:a}, get_instance_id:{arguments:, default_arguments:}, get_meta:{arguments:a, default_arguments:a}, get_meta_list:{arguments:, default_arguments:}, get_method_list:{arguments:, default_arguments:}, get_multiplayer:{arguments:, default_arguments:}, get_name:{arguments:, default_arguments:}, get_network_master:{arguments:, default_arguments:}, get_node:{arguments:a, default_arguments:a}, get_node_and_resource:{arguments:a, default_arguments:a}, get_node_or_null:{arguments:a, default_arguments:a}, get_owner:{arguments:, default_arguments:}, get_parent:{arguments:, default_arguments:}, get_path:{arguments:, default_arguments:}, get_path_to:{arguments:a, default_arguments:a}, get_pause_mode:{arguments:, default_arguments:}, get_physics_process_delta_time:{arguments:, default_arguments:}, get_position_in_parent:{arguments:, default_arguments:}, get_process_delta_time:{arguments:, default_arguments:}, get_process_priority:{arguments:, default_arguments:}, get_property_list:{arguments:, default_arguments:}, get_scene_instance_load_placeholder:{arguments:, default_arguments:}, get_script:{arguments:, default_arguments:}, get_signal_connection_list:{arguments:a, default_arguments:a}, get_signal_list:{arguments:, default_arguments:}, get_tree:{arguments:, default_arguments:}, get_viewport:{arguments:, default_arguments:}, has_meta:{arguments:a, default_arguments:a}, has_method:{arguments:a, default_arguments:a}, has_node:{arguments:a, default_arguments:a}, has_node_and_resource:{arguments:a, default_arguments:a}, has_signal:{arguments:a, default_arguments:a}, has_user_signal:{arguments:a, default_arguments:a}, is_a_parent_of:{arguments:a, default_arguments:a}, is_blocking_signals:{arguments:, default_arguments:}, is_class:{arguments:a, default_arguments:a}, is_connected:{arguments:a, b, c, default_arguments:a, b, c}, is_displayed_folded:{arguments:, default_arguments:}, is_greater_than:{arguments:a, default_arguments:a}, is_in_group:{arguments:a, default_arguments:a}, is_inside_tree:{arguments:, default_arguments:}, is_network_master:{arguments:, default_arguments:}, is_physics_processing:{arguments:, default_arguments:}, is_physics_processing_internal:{arguments:, default_arguments:}, is_processing:{arguments:, default_arguments:}, is_processing_input:{arguments:, default_arguments:}, is_processing_internal:{arguments:, default_arguments:}, is_processing_unhandled_input:{arguments:, default_arguments:}, is_processing_unhandled_key_input:{arguments:, default_arguments:}, is_queued_for_deletion:{arguments:, default_arguments:}, math_fight:{arguments:, default_arguments:}, move_child:{arguments:a, b, default_arguments:a, b}, multiply:{arguments:a, b, default_arguments:a, b}, notification:{arguments:a, b, default_arguments:a, b = False}, pi:{arguments:, default_arguments:}, print_stray_nodes:{arguments:, default_arguments:}, print_tree:{arguments:, default_arguments:}, print_tree_pretty:{arguments:, default_arguments:}, propagate_call:{arguments:a, b, c, default_arguments:a, b = [], c = False}, propagate_notification:{arguments:a, default_arguments:a}, property_list_changed_notify:{arguments:, default_arguments:}, queue_free:{arguments:, default_arguments:}, raise:{arguments:, default_arguments:}, remove_and_skip:{arguments:, default_arguments:}, remove_child:{arguments:a, default_arguments:a}, remove_from_group:{arguments:a, default_arguments:a}, remove_meta:{arguments:a, default_arguments:a}, replace_by:{arguments:a, b, default_arguments:a, b = False}, request_ready:{arguments:, default_arguments:}, rpc:{arguments:a, default_arguments:a}, rpc_config:{arguments:a, b, default_arguments:a, b}, rpc_id:{arguments:a, b, default_arguments:a, b}, rpc_unreliable:{arguments:a, default_arguments:a}, rpc_unreliable_id:{arguments:a, b, default_arguments:a, b}, rset:{arguments:a, b, default_arguments:a, b}, rset_config:{arguments:a, b, default_arguments:a, b}, rset_id:{arguments:a, b, c, default_arguments:a, b, c}, rset_unreliable:{arguments:a, b, default_arguments:a, b}, rset_unreliable_id:{arguments:a, b, c, default_arguments:a, b, c}, set:{arguments:a, b, default_arguments:a, b}, set_block_signals:{arguments:a, default_arguments:a}, set_custom_multiplayer:{arguments:a, default_arguments:a}, set_deferred:{arguments:a, b, default_arguments:a, b}, set_display_folded:{arguments:a, default_arguments:a}, set_filename:{arguments:a, default_arguments:a}, set_indexed:{arguments:a, b, default_arguments:a, b}, set_message_translation:{arguments:a, default_arguments:a}, set_meta:{arguments:a, b, default_arguments:a, b}, set_name:{arguments:a, default_arguments:a}, set_network_master:{arguments:a, b, default_arguments:a, b = True}, set_owner:{arguments:a, default_arguments:a}, set_pause_mode:{arguments:a, default_arguments:a}, set_physics_process:{arguments:a, default_arguments:a}, set_physics_process_internal:{arguments:a, default_arguments:a}, set_process:{arguments:a, default_arguments:a}, set_process_input:{arguments:a, default_arguments:a}, set_process_internal:{arguments:a, default_arguments:a}, set_process_priority:{arguments:a, default_arguments:a}, set_process_unhandled_input:{arguments:a, default_arguments:a}, set_process_unhandled_key_input:{arguments:a, default_arguments:a}, set_scene_instance_load_placeholder:{arguments:a, default_arguments:a}, set_script:{arguments:a, default_arguments:a}, subtract:{arguments:a, b, default_arguments:a, b}, sum:{arguments:a, default_arguments:a}, to_string:{arguments:, default_arguments:}, tr:{arguments:a, default_arguments:a}, update_configuration_warning:{arguments:, default_arguments:}} is not equal to |Dictionary| {_enter_tree:{arguments:, default_arguments:}, _exit_tree:{arguments:, default_arguments:}, _get:{arguments:a, default_arguments:a}, _get_configuration_warning:{arguments:, default_arguments:}, _get_editor_description:{arguments:, default_arguments:}, _get_import_path:{arguments:, default_arguments:}, _get_property_list:{arguments:, default_arguments:}, _init:{arguments:, default_arguments:}, _input:{arguments:a, default_arguments:a}, _notification:{arguments:a, default_arguments:a}, _physics_process:{arguments:a, default_arguments:a}, _process:{arguments:a, default_arguments:a}, _ready:{arguments:, default_arguments:}, _set:{arguments:a, b, default_arguments:a, b}, _set_editor_description:{arguments:a, default_arguments:a}, _set_import_path:{arguments:a, default_arguments:a}, _to_string:{arguments:, default_arguments:}, _unhandled_input:{arguments:a, default_arguments:a}, _unhandled_key_input:{arguments:a, default_arguments:a}, add:{arguments:a, b, default_arguments:a, b}, add_child:{arguments:a, b, default_arguments:a, b = False}, add_child_below_node:{arguments:a, b, c, default_arguments:a, b, c = False}, add_to_group:{arguments:a, b, default_arguments:a, b = False}, add_user_signal:{arguments:a, b, default_arguments:a, b = []}, call:{arguments:a, default_arguments:a}, call_deferred:{arguments:a, default_arguments:a}, callv:{arguments:a, b, default_arguments:a, b}, can_process:{arguments:, default_arguments:}, can_translate_messages:{arguments:, default_arguments:}, connect:{arguments:a, b, c, d, e, default_arguments:a, b, c, d = [], e = 0}, disconnect:{arguments:a, b, c, default_arguments:a, b, c}, divide:{arguments:a, b, default_arguments:a, b}, duplicate:{arguments:a, default_arguments:a = 15}, emit_signal:{arguments:a, default_arguments:a}, find_node:{arguments:a, b, c, default_arguments:a, b = True, c = True}, find_parent:{arguments:a, default_arguments:a}, free:{arguments:, default_arguments:}, get:{arguments:a, default_arguments:a}, get_child:{arguments:a, default_arguments:a}, get_child_count:{arguments:, default_arguments:}, get_children:{arguments:, default_arguments:}, get_class:{arguments:, default_arguments:}, get_custom_multiplayer:{arguments:, default_arguments:}, get_filename:{arguments:, default_arguments:}, get_groups:{arguments:, default_arguments:}, get_incoming_connections:{arguments:, default_arguments:}, get_index:{arguments:, default_arguments:}, get_indexed:{arguments:a, default_arguments:a}, get_instance_id:{arguments:, default_arguments:}, get_meta:{arguments:a, default_arguments:a}, get_meta_list:{arguments:, default_arguments:}, get_method_list:{arguments:, default_arguments:}, get_multiplayer:{arguments:, default_arguments:}, get_name:{arguments:, default_arguments:}, get_network_master:{arguments:, default_arguments:}, get_node:{arguments:a, default_arguments:a}, get_node_and_resource:{arguments:a, default_arguments:a}, get_node_or_null:{arguments:a, default_arguments:a}, get_owner:{arguments:, default_arguments:}, get_parent:{arguments:, default_arguments:}, get_path:{arguments:, default_arguments:}, get_path_to:{arguments:a, default_arguments:a}, get_pause_mode:{arguments:, default_arguments:}, get_physics_process_delta_time:{arguments:, default_arguments:}, get_position_in_parent:{arguments:, default_arguments:}, get_process_delta_time:{arguments:, default_arguments:}, get_process_priority:{arguments:, default_arguments:}, get_property_list:{arguments:, default_arguments:}, get_scene_instance_load_placeholder:{arguments:, default_arguments:}, get_script:{arguments:, default_arguments:}, get_signal_connection_list:{arguments:a, default_arguments:a}, get_signal_list:{arguments:, default_arguments:}, get_tree:{arguments:, default_arguments:}, get_viewport:{arguments:, default_arguments:}, has_meta:{arguments:a, default_arguments:a}, has_method:{arguments:a, default_arguments:a}, has_node:{arguments:a, default_arguments:a}, has_node_and_resource:{arguments:a, default_arguments:a}, has_signal:{arguments:a, default_arguments:a}, has_user_signal:{arguments:a, default_arguments:a}, is_a_parent_of:{arguments:a, default_arguments:a}, is_blocking_signals:{arguments:, default_arguments:}, is_class:{arguments:a, default_arguments:a}, is_connected:{arguments:a, b, c, default_arguments:a, b, c}, is_displayed_folded:{arguments:, default_arguments:}, is_greater_than:{arguments:a, default_arguments:a}, is_in_group:{arguments:a, default_arguments:a}, is_inside_tree:{arguments:, default_arguments:}, is_network_master:{arguments:, default_arguments:}, is_physics_processing:{arguments:, default_arguments:}, is_physics_processing_internal:{arguments:, default_arguments:}, is_processing:{arguments:, default_arguments:}, is_processing_input:{arguments:, default_arguments:}, is_processing_internal:{arguments:, default_arguments:}, is_processing_unhandled_input:{arguments:, default_arguments:}, is_processing_unhandled_key_input:{arguments:, default_arguments:}, is_queued_for_deletion:{arguments:, default_arguments:}, math_fight:{arguments:, default_arguments:}, move_child:{arguments:a, b, default_arguments:a, b}, multiply:{arguments:a, b, default_arguments:a, b}, notification:{arguments:a, b, default_arguments:a, b = False}, pi:{arguments:, default_arguments:}, print_stray_nodes:{arguments:, default_arguments:}, print_tree:{arguments:, default_arguments:}, print_tree_pretty:{arguments:, default_arguments:}, propagate_call:{arguments:a, b, c, default_arguments:a, b = [], c = False}, propagate_notification:{arguments:a, default_arguments:a}, property_list_changed_notify:{arguments:, default_arguments:}, queue_free:{arguments:, default_arguments:}, raise:{arguments:, default_arguments:}, remove_and_skip:{arguments:, default_arguments:}, remove_child:{arguments:a, default_arguments:a}, remove_from_group:{arguments:a, default_arguments:a}, remove_meta:{arguments:a, default_arguments:a}, replace_by:{arguments:a, b, default_arguments:a, b = False}, request_ready:{arguments:, default_arguments:}, rpc:{arguments:a, default_arguments:a}, rpc_config:{arguments:a, b, default_arguments:a, b}, rpc_id:{arguments:a, b, default_arguments:a, b}, rpc_unreliable:{arguments:a, default_arguments:a}, rpc_unreliable_id:{arguments:a, b, default_arguments:a, b}, rset:{arguments:a, b, default_arguments:a, b}, rset_config:{arguments:a, b, default_arguments:a, b}, rset_id:{arguments:a, b, c, default_arguments:a, b, c}, rset_unreliable:{arguments:a, b, default_arguments:a, b}, rset_unreliable_id:{arguments:a, b, c, default_arguments:a, b, c}, set:{arguments:a, b, default_arguments:a, b}, set_block_signals:{arguments:a, default_arguments:a}, set_custom_multiplayer:{arguments:a, default_arguments:a}, set_deferred:{arguments:a, b, default_arguments:a, b}, set_display_folded:{arguments:a, default_arguments:a}, set_filename:{arguments:a, default_arguments:a}, set_indexed:{arguments:a, b, default_arguments:a, b}, set_message_translation:{arguments:a, default_arguments:a}, set_meta:{arguments:a, b, default_arguments:a, b}, set_name:{arguments:a, default_arguments:a}, set_network_master:{arguments:a, b, default_arguments:a, b = True}, set_owner:{arguments:a, default_arguments:a}, set_pause_mode:{arguments:a, default_arguments:a}, set_physics_process:{arguments:a, default_arguments:a}, set_physics_process_internal:{arguments:a, default_arguments:a}, set_process:{arguments:a, default_arguments:a}, set_process_input:{arguments:a, default_arguments:a}, set_process_internal:{arguments:a, default_arguments:a}, set_process_priority:{arguments:a, default_arguments:a}, set_process_unhandled_input:{arguments:a, default_arguments:a}, set_process_unhandled_key_input:{arguments:a, default_arguments:a}, set_scene_instance_load_placeholder:{arguments:a, default_arguments:a}, set_script:{arguments:a, default_arguments:a}, subtract:{arguments:a, b, default_arguments:a, b}, sum:{arguments:a, default_arguments:a}, to_string:{arguments:, default_arguments:}, tr:{arguments:a, default_arguments:a}, update_configuration_warning:{arguments:, default_arguments:}}",
"context": "Then they do not share resources",
"expected": "|Dictionary| {_enter_tree:{arguments:, default_arguments:}, _exit_tree:{arguments:, default_arguments:}, _get:{arguments:a, default_arguments:a}, _get_configuration_warning:{arguments:, default_arguments:}, _get_editor_description:{arguments:, default_arguments:}, _get_import_path:{arguments:, default_arguments:}, _get_property_list:{arguments:, default_arguments:}, _init:{arguments:, default_arguments:}, _input:{arguments:a, default_arguments:a}, _notification:{arguments:a, default_arguments:a}, _physics_process:{arguments:a, default_arguments:a}, _process:{arguments:a, default_arguments:a}, _ready:{arguments:, default_arguments:}, _set:{arguments:a, b, default_arguments:a, b}, _set_editor_description:{arguments:a, default_arguments:a}, _set_import_path:{arguments:a, default_arguments:a}, _to_string:{arguments:, default_arguments:}, _unhandled_input:{arguments:a, default_arguments:a}, _unhandled_key_input:{arguments:a, default_arguments:a}, add:{arguments:a, b, default_arguments:a, b}, add_child:{arguments:a, b, default_arguments:a, b = False}, add_child_below_node:{arguments:a, b, c, default_arguments:a, b, c = False}, add_to_group:{arguments:a, b, default_arguments:a, b = False}, add_user_signal:{arguments:a, b, default_arguments:a, b = []}, call:{arguments:a, default_arguments:a}, call_deferred:{arguments:a, default_arguments:a}, callv:{arguments:a, b, default_arguments:a, b}, can_process:{arguments:, default_arguments:}, can_translate_messages:{arguments:, default_arguments:}, connect:{arguments:a, b, c, d, e, default_arguments:a, b, c, d = [], e = 0}, disconnect:{arguments:a, b, c, default_arguments:a, b, c}, divide:{arguments:a, b, default_arguments:a, b}, duplicate:{arguments:a, default_arguments:a = 15}, emit_signal:{arguments:a, default_arguments:a}, find_node:{arguments:a, b, c, default_arguments:a, b = True, c = True}, find_parent:{arguments:a, default_arguments:a}, free:{arguments:, default_arguments:}, get:{arguments:a, default_arguments:a}, get_child:{arguments:a, default_arguments:a}, get_child_count:{arguments:, default_arguments:}, get_children:{arguments:, default_arguments:}, get_class:{arguments:, default_arguments:}, get_custom_multiplayer:{arguments:, default_arguments:}, get_filename:{arguments:, default_arguments:}, get_groups:{arguments:, default_arguments:}, get_incoming_connections:{arguments:, default_arguments:}, get_index:{arguments:, default_arguments:}, get_indexed:{arguments:a, default_arguments:a}, get_instance_id:{arguments:, default_arguments:}, get_meta:{arguments:a, default_arguments:a}, get_meta_list:{arguments:, default_arguments:}, get_method_list:{arguments:, default_arguments:}, get_multiplayer:{arguments:, default_arguments:}, get_name:{arguments:, default_arguments:}, get_network_master:{arguments:, default_arguments:}, get_node:{arguments:a, default_arguments:a}, get_node_and_resource:{arguments:a, default_arguments:a}, get_node_or_null:{arguments:a, default_arguments:a}, get_owner:{arguments:, default_arguments:}, get_parent:{arguments:, default_arguments:}, get_path:{arguments:, default_arguments:}, get_path_to:{arguments:a, default_arguments:a}, get_pause_mode:{arguments:, default_arguments:}, get_physics_process_delta_time:{arguments:, default_arguments:}, get_position_in_parent:{arguments:, default_arguments:}, get_process_delta_time:{arguments:, default_arguments:}, get_process_priority:{arguments:, default_arguments:}, get_property_list:{arguments:, default_arguments:}, get_scene_instance_load_placeholder:{arguments:, default_arguments:}, get_script:{arguments:, default_arguments:}, get_signal_connection_list:{arguments:a, default_arguments:a}, get_signal_list:{arguments:, default_arguments:}, get_tree:{arguments:, default_arguments:}, get_viewport:{arguments:, default_arguments:}, has_meta:{arguments:a, default_arguments:a}, has_method:{arguments:a, default_arguments:a}, has_node:{arguments:a, default_arguments:a}, has_node_and_resource:{arguments:a, default_arguments:a}, has_signal:{arguments:a, default_arguments:a}, has_user_signal:{arguments:a, default_arguments:a}, is_a_parent_of:{arguments:a, default_arguments:a}, is_blocking_signals:{arguments:, default_arguments:}, is_class:{arguments:a, default_arguments:a}, is_connected:{arguments:a, b, c, default_arguments:a, b, c}, is_displayed_folded:{arguments:, default_arguments:}, is_greater_than:{arguments:a, default_arguments:a}, is_in_group:{arguments:a, default_arguments:a}, is_inside_tree:{arguments:, default_arguments:}, is_network_master:{arguments:, default_arguments:}, is_physics_processing:{arguments:, default_arguments:}, is_physics_processing_internal:{arguments:, default_arguments:}, is_processing:{arguments:, default_arguments:}, is_processing_input:{arguments:, default_arguments:}, is_processing_internal:{arguments:, default_arguments:}, is_processing_unhandled_input:{arguments:, default_arguments:}, is_processing_unhandled_key_input:{arguments:, default_arguments:}, is_queued_for_deletion:{arguments:, default_arguments:}, math_fight:{arguments:, default_arguments:}, move_child:{arguments:a, b, default_arguments:a, b}, multiply:{arguments:a, b, default_arguments:a, b}, notification:{arguments:a, b, default_arguments:a, b = False}, pi:{arguments:, default_arguments:}, print_stray_nodes:{arguments:, default_arguments:}, print_tree:{arguments:, default_arguments:}, print_tree_pretty:{arguments:, default_arguments:}, propagate_call:{arguments:a, b, c, default_arguments:a, b = [], c = False}, propagate_notification:{arguments:a, default_arguments:a}, property_list_changed_notify:{arguments:, default_arguments:}, queue_free:{arguments:, default_arguments:}, raise:{arguments:, default_arguments:}, remove_and_skip:{arguments:, default_arguments:}, remove_child:{arguments:a, default_arguments:a}, remove_from_group:{arguments:a, default_arguments:a}, remove_meta:{arguments:a, default_arguments:a}, replace_by:{arguments:a, b, default_arguments:a, b = False}, request_ready:{arguments:, default_arguments:}, rpc:{arguments:a, default_arguments:a}, rpc_config:{arguments:a, b, default_arguments:a, b}, rpc_id:{arguments:a, b, default_arguments:a, b}, rpc_unreliable:{arguments:a, default_arguments:a}, rpc_unreliable_id:{arguments:a, b, default_arguments:a, b}, rset:{arguments:a, b, default_arguments:a, b}, rset_config:{arguments:a, b, default_arguments:a, b}, rset_id:{arguments:a, b, c, default_arguments:a, b, c}, rset_unreliable:{arguments:a, b, default_arguments:a, b}, rset_unreliable_id:{arguments:a, b, c, default_arguments:a, b, c}, set:{arguments:a, b, default_arguments:a, b}, set_block_signals:{arguments:a, default_arguments:a}, set_custom_multiplayer:{arguments:a, default_arguments:a}, set_deferred:{arguments:a, b, default_arguments:a, b}, set_display_folded:{arguments:a, default_arguments:a}, set_filename:{arguments:a, default_arguments:a}, set_indexed:{arguments:a, b, default_arguments:a, b}, set_message_translation:{arguments:a, default_arguments:a}, set_meta:{arguments:a, b, default_arguments:a, b}, set_name:{arguments:a, default_arguments:a}, set_network_master:{arguments:a, b, default_arguments:a, b = True}, set_owner:{arguments:a, default_arguments:a}, set_pause_mode:{arguments:a, default_arguments:a}, set_physics_process:{arguments:a, default_arguments:a}, set_physics_process_internal:{arguments:a, default_arguments:a}, set_process:{arguments:a, default_arguments:a}, set_process_input:{arguments:a, default_arguments:a}, set_process_internal:{arguments:a, default_arguments:a}, set_process_priority:{arguments:a, default_arguments:a}, set_process_unhandled_input:{arguments:a, default_arguments:a}, set_process_unhandled_key_input:{arguments:a, default_arguments:a}, set_scene_instance_load_placeholder:{arguments:a, default_arguments:a}, set_script:{arguments:a, default_arguments:a}, subtract:{arguments:a, b, default_arguments:a, b}, sum:{arguments:a, default_arguments:a}, to_string:{arguments:, default_arguments:}, tr:{arguments:a, default_arguments:a}, update_configuration_warning:{arguments:, default_arguments:}} != |Dictionary| {_enter_tree:{arguments:, default_arguments:}, _exit_tree:{arguments:, default_arguments:}, _get:{arguments:a, default_arguments:a}, _get_configuration_warning:{arguments:, default_arguments:}, _get_editor_description:{arguments:, default_arguments:}, _get_import_path:{arguments:, default_arguments:}, _get_property_list:{arguments:, default_arguments:}, _init:{arguments:, default_arguments:}, _input:{arguments:a, default_arguments:a}, _notification:{arguments:a, default_arguments:a}, _physics_process:{arguments:a, default_arguments:a}, _process:{arguments:a, default_arguments:a}, _ready:{arguments:, default_arguments:}, _set:{arguments:a, b, default_arguments:a, b}, _set_editor_description:{arguments:a, default_arguments:a}, _set_import_path:{arguments:a, default_arguments:a}, _to_string:{arguments:, default_arguments:}, _unhandled_input:{arguments:a, default_arguments:a}, _unhandled_key_input:{arguments:a, default_arguments:a}, add:{arguments:a, b, default_arguments:a, b}, add_child:{arguments:a, b, default_arguments:a, b = False}, add_child_below_node:{arguments:a, b, c, default_arguments:a, b, c = False}, add_to_group:{arguments:a, b, default_arguments:a, b = False}, add_user_signal:{arguments:a, b, default_arguments:a, b = []}, call:{arguments:a, default_arguments:a}, call_deferred:{arguments:a, default_arguments:a}, callv:{arguments:a, b, default_arguments:a, b}, can_process:{arguments:, default_arguments:}, can_translate_messages:{arguments:, default_arguments:}, connect:{arguments:a, b, c, d, e, default_arguments:a, b, c, d = [], e = 0}, disconnect:{arguments:a, b, c, default_arguments:a, b, c}, divide:{arguments:a, b, default_arguments:a, b}, duplicate:{arguments:a, default_arguments:a = 15}, emit_signal:{arguments:a, default_arguments:a}, find_node:{arguments:a, b, c, default_arguments:a, b = True, c = True}, find_parent:{arguments:a, default_arguments:a}, free:{arguments:, default_arguments:}, get:{arguments:a, default_arguments:a}, get_child:{arguments:a, default_arguments:a}, get_child_count:{arguments:, default_arguments:}, get_children:{arguments:, default_arguments:}, get_class:{arguments:, default_arguments:}, get_custom_multiplayer:{arguments:, default_arguments:}, get_filename:{arguments:, default_arguments:}, get_groups:{arguments:, default_arguments:}, get_incoming_connections:{arguments:, default_arguments:}, get_index:{arguments:, default_arguments:}, get_indexed:{arguments:a, default_arguments:a}, get_instance_id:{arguments:, default_arguments:}, get_meta:{arguments:a, default_arguments:a}, get_meta_list:{arguments:, default_arguments:}, get_method_list:{arguments:, default_arguments:}, get_multiplayer:{arguments:, default_arguments:}, get_name:{arguments:, default_arguments:}, get_network_master:{arguments:, default_arguments:}, get_node:{arguments:a, default_arguments:a}, get_node_and_resource:{arguments:a, default_arguments:a}, get_node_or_null:{arguments:a, default_arguments:a}, get_owner:{arguments:, default_arguments:}, get_parent:{arguments:, default_arguments:}, get_path:{arguments:, default_arguments:}, get_path_to:{arguments:a, default_arguments:a}, get_pause_mode:{arguments:, default_arguments:}, get_physics_process_delta_time:{arguments:, default_arguments:}, get_position_in_parent:{arguments:, default_arguments:}, get_process_delta_time:{arguments:, default_arguments:}, get_process_priority:{arguments:, default_arguments:}, get_property_list:{arguments:, default_arguments:}, get_scene_instance_load_placeholder:{arguments:, default_arguments:}, get_script:{arguments:, default_arguments:}, get_signal_connection_list:{arguments:a, default_arguments:a}, get_signal_list:{arguments:, default_arguments:}, get_tree:{arguments:, default_arguments:}, get_viewport:{arguments:, default_arguments:}, has_meta:{arguments:a, default_arguments:a}, has_method:{arguments:a, default_arguments:a}, has_node:{arguments:a, default_arguments:a}, has_node_and_resource:{arguments:a, default_arguments:a}, has_signal:{arguments:a, default_arguments:a}, has_user_signal:{arguments:a, default_arguments:a}, is_a_parent_of:{arguments:a, default_arguments:a}, is_blocking_signals:{arguments:, default_arguments:}, is_class:{arguments:a, default_arguments:a}, is_connected:{arguments:a, b, c, default_arguments:a, b, c}, is_displayed_folded:{arguments:, default_arguments:}, is_greater_than:{arguments:a, default_arguments:a}, is_in_group:{arguments:a, default_arguments:a}, is_inside_tree:{arguments:, default_arguments:}, is_network_master:{arguments:, default_arguments:}, is_physics_processing:{arguments:, default_arguments:}, is_physics_processing_internal:{arguments:, default_arguments:}, is_processing:{arguments:, default_arguments:}, is_processing_input:{arguments:, default_arguments:}, is_processing_internal:{arguments:, default_arguments:}, is_processing_unhandled_input:{arguments:, default_arguments:}, is_processing_unhandled_key_input:{arguments:, default_arguments:}, is_queued_for_deletion:{arguments:, default_arguments:}, math_fight:{arguments:, default_arguments:}, move_child:{arguments:a, b, default_arguments:a, b}, multiply:{arguments:a, b, default_arguments:a, b}, notification:{arguments:a, b, default_arguments:a, b = False}, pi:{arguments:, default_arguments:}, print_stray_nodes:{arguments:, default_arguments:}, print_tree:{arguments:, default_arguments:}, print_tree_pretty:{arguments:, default_arguments:}, propagate_call:{arguments:a, b, c, default_arguments:a, b = [], c = False}, propagate_notification:{arguments:a, default_arguments:a}, property_list_changed_notify:{arguments:, default_arguments:}, queue_free:{arguments:, default_arguments:}, raise:{arguments:, default_arguments:}, remove_and_skip:{arguments:, default_arguments:}, remove_child:{arguments:a, default_arguments:a}, remove_from_group:{arguments:a, default_arguments:a}, remove_meta:{arguments:a, default_arguments:a}, replace_by:{arguments:a, b, default_arguments:a, b = False}, request_ready:{arguments:, default_arguments:}, rpc:{arguments:a, default_arguments:a}, rpc_config:{arguments:a, b, default_arguments:a, b}, rpc_id:{arguments:a, b, default_arguments:a, b}, rpc_unreliable:{arguments:a, default_arguments:a}, rpc_unreliable_id:{arguments:a, b, default_arguments:a, b}, rset:{arguments:a, b, default_arguments:a, b}, rset_config:{arguments:a, b, default_arguments:a, b}, rset_id:{arguments:a, b, c, default_arguments:a, b, c}, rset_unreliable:{arguments:a, b, default_arguments:a, b}, rset_unreliable_id:{arguments:a, b, c, default_arguments:a, b, c}, set:{arguments:a, b, default_arguments:a, b}, set_block_signals:{arguments:a, default_arguments:a}, set_custom_multiplayer:{arguments:a, default_arguments:a}, set_deferred:{arguments:a, b, default_arguments:a, b}, set_display_folded:{arguments:a, default_arguments:a}, set_filename:{arguments:a, default_arguments:a}, set_indexed:{arguments:a, b, default_arguments:a, b}, set_message_translation:{arguments:a, default_arguments:a}, set_meta:{arguments:a, b, default_arguments:a, b}, set_name:{arguments:a, default_arguments:a}, set_network_master:{arguments:a, b, default_arguments:a, b = True}, set_owner:{arguments:a, default_arguments:a}, set_pause_mode:{arguments:a, default_arguments:a}, set_physics_process:{arguments:a, default_arguments:a}, set_physics_process_internal:{arguments:a, default_arguments:a}, set_process:{arguments:a, default_arguments:a}, set_process_input:{arguments:a, default_arguments:a}, set_process_internal:{arguments:a, default_arguments:a}, set_process_priority:{arguments:a, default_arguments:a}, set_process_unhandled_input:{arguments:a, default_arguments:a}, set_process_unhandled_key_input:{arguments:a, default_arguments:a}, set_scene_instance_load_placeholder:{arguments:a, default_arguments:a}, set_script:{arguments:a, default_arguments:a}, subtract:{arguments:a, b, default_arguments:a, b}, sum:{arguments:a, default_arguments:a}, to_string:{arguments:, default_arguments:}, tr:{arguments:a, default_arguments:a}, update_configuration_warning:{arguments:, default_arguments:}}",
"success": true
} ],
"context": "When we create two of it for the same script",
"fullname": "test_When_we_create_two_of_it_for_the_same_script",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|Object| [Node:1573] is equal to |Object| [Node:1573]",
"context": "Then we get the same double back",
"expected": "|Object| [Node:1573] is equal to |Object| [Node:1573]",
"success": true
} ],
"context": "When we call the double the second time",
"fullname": "test_When_we_call_double_a_second_time_on",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 3,
"path": "res://tests/integration/script_director.test.gd",
"source": {
"containers": [ "res://tests/integration", "res://tests" ],
"method": "",
"path": "res://tests/integration/script_director.test.gd",
"tags": [  ],
"test": ExtResource( 13 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 3
}, {
"context": "Given a Boolean Assertion",
"methods": [ {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then it passes",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When calling asserts.is_true(true)",
"fullname": "test_when_calling_asserts_is_true",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| True != false",
"context": "",
"expected": "|bool| True == false",
"success": false
} ],
"context": " intentional failure",
"fullname": "test_intentional_failure",
"passed": 0,
"success": false,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| False == false",
"context": "Then it passes",
"expected": "|bool| False == false",
"success": true
} ],
"context": "When calling asserts.is_false(false)",
"fullname": "test_when_calling_asserts_is_false",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 2,
"path": "res://tests/unit/boolean.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/boolean.test.gd",
"tags": [  ],
"test": ExtResource( 11 ),
"yield_time": 0.0
},
"success": false,
"time_taken": 0.0,
"total": 3
}, {
"context": "Given a Scene Director",
"methods": [ {
"assertions": [ {
"actual": "|Dictionary| {.:[Reference:1408], A:[Reference:1409], A/B:[Reference:1411], C:[Reference:1410], C/D:[Reference:1412]} is not equal to |Dictionary| {.:[Reference:1443], A:[Reference:1444], A/B:[Reference:1446], C:[Reference:1445], C/D:[Reference:1447]}",
"context": "Then they do not share resources",
"expected": "|Dictionary| {.:[Reference:1408], A:[Reference:1409], A/B:[Reference:1411], C:[Reference:1410], C/D:[Reference:1412]} != |Dictionary| {.:[Reference:1443], A:[Reference:1444], A/B:[Reference:1446], C:[Reference:1445], C/D:[Reference:1447]}",
"success": true
} ],
"context": "When we create two of it for the same scene",
"fullname": "test_When_we_create_two_of_it_for_the_same_scene",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 99 is equal to |int| 99",
"context": "Then we get the stubbed return value",
"expected": "|int| 99 is equal to |int| 99",
"success": true
} ],
"context": "When we call a method from a grandchild node that we stubbed",
"fullname": "test_When_we_call_a_method_from_a_grandchild_node_that_we_stubbed",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 9999 is equal to |int| 9999",
"context": "Then we get the stubbed return value",
"expected": "|int| 9999 is equal to |int| 9999",
"success": true
} ],
"context": "When we call a method from the root node that we stubbed",
"fullname": "test_When_we_call_a_method_from_the_root_node_that_we_stubbed",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 999 is equal to |int| 999",
"context": "Then we get the stubbed return value",
"expected": "|int| 999 is equal to |int| 999",
"success": true
} ],
"context": "When we call a method from a child node that we stubbed",
"fullname": "test_When_we_call_a_method_from_a_child_node_that_we_stubbed",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|NodePath| A is equal to |NodePath| A",
"context": "We have the correct NodePath Set",
"expected": "|NodePath| A is equal to |NodePath| A",
"success": true
} ],
"context": "When we add it to the tree it runs",
"fullname": "test_When_we_add_it_to_the_tree_it_runs",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 5,
"path": "res://tests/integration/scene_director.test.gd",
"source": {
"containers": [ "res://tests/integration", "res://tests" ],
"method": "",
"path": "res://tests/integration/scene_director.test.gd",
"tags": [  ],
"test": ExtResource( 4 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 5
}, {
"context": "Given A File Assertion",
"methods": [ {
"assertions": [ {
"actual": "res://somefile.gd does not exist",
"context": "Then it passes",
"expected": "res://somefile.gd does not exist",
"success": true
} ],
"context": "When calling asserts.file_does_not_exist when there is no file",
"fullname": "test_when_calling_file_does_not_exist_when_there_is_no_file",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": " does not exist",
"context": "Then it passes",
"expected": " does not exist",
"success": true
} ],
"context": "When calling asserts file does not exist when path is empty",
"fullname": "test_when_calling_file_does_not_exist_when_path_is_empty",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "res://tests/unit/file.test.gd exists",
"context": "Then it passes",
"expected": "res://tests/unit/file.test.gd exists",
"success": true
} ],
"context": "When calling asserts.file_exists when the file is this suite",
"fullname": "test_when_calling_file_exists_when_file_is_self",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 3,
"path": "res://tests/unit/file.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/file.test.gd",
"tags": [  ],
"test": ExtResource( 3 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 3
}, {
"context": "Given a Null Assertion",
"methods": [ {
"assertions": [ {
"actual": "|Object| [Deleted Object] == null",
"context": "A Freed Node is null in Engine 3.2.2 or greater",
"expected": "|Object| [Deleted Object] == null",
"success": true
} ],
"context": "When calling freed object is null",
"fullname": "test_when_calling_freed_object_is_not_null",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|Object| [Node:1708] != null",
"context": "Then it passes",
"expected": "|Object| [Node:1708] != null",
"success": true
} ],
"context": "When calling Node is not null",
"fullname": "test_when_calling_node_is_not_null",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|null| Null == null",
"context": "Then it passes",
"expected": "|null| Null == null",
"success": true
} ],
"context": "When calling asserts.is_null(null)",
"fullname": "test_when_calling_null_is_null",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 3,
"path": "res://tests/unit/null.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/null.test.gd",
"tags": [  ],
"test": ExtResource( 12 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 3
}, {
"context": "Given an Equality Assertion",
"methods": [ {
"assertions": [ {
"actual": "|int| 1 is equal to |int| 1",
"context": "Then it passes",
"expected": "|int| 1 is equal to |int| 1",
"success": true
} ],
"context": "When calling asserts.is_equal(1, 1)",
"fullname": "test_when_calling_is_equal",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 2 is greater than |int| 1",
"context": "Then it passes",
"expected": "|int| 2 is greater than |int| 1",
"success": true
} ],
"context": "When calling asserts.is_greater_than(2, 1)",
"fullname": "test_when_calling_is_greater_than",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 1 is less than |int| 2",
"context": "Then it passes",
"expected": "|int| 1 is less than |int| 2",
"success": true
} ],
"context": "When calling asserts.is_less_than(2, 1)",
"fullname": "test_when_calling_is_less_than",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 2 is equal or greater |int| 1",
"context": "Then it passes",
"expected": "|int| 2 is equal or greater |int| 1",
"success": true
} ],
"context": "When calling asserts.is_equal_or_greater_than(2, 1)",
"fullname": "test_when_calling_is_equal_or_greater_than",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 1 is equal or less than |int| 1",
"context": "Then it passes!",
"expected": "|int| 1 is equal or less than |int| 1",
"success": true
} ],
"context": "When calling asserts.is_equal_or_less_than(1, 1)",
"fullname": "test_when_calling_is_equal_or_less_than_with_equal_values",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 1 is equal or greater |int| 1",
"context": "Then it passes",
"expected": "|int| 1 is equal or greater |int| 1",
"success": true
} ],
"context": "When calling asserts.is_equal_or_greater_than(1, 1)",
"fullname": "test_when_calling_is_equal_or_greater_than_with_equal_values",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 5 is not equal to |int| 6",
"context": "Then it passes",
"expected": "|int| 5 != |int| 6",
"success": true
} ],
"context": "When callign asserts.is_not_equal(5, 6)",
"fullname": "test_when_calling_is_not_equal",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 7,
"path": "res://tests/unit/equality.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/equality.test.gd",
"tags": [  ],
"test": ExtResource( 8 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 7
}, {
"context": "Given A Range Assertion",
"methods": [ {
"assertions": [ {
"actual": "0 is in range(0, 10)",
"context": "Then it passes",
"expected": "0 is in range(0, 10)",
"success": true
} ],
"context": "When calling is (0) in range(0, 10)",
"fullname": "test_when_calling_is_in_range",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "10 is not in range(0, 10)",
"context": "Then it passes",
"expected": "10 is not in range(0, 10)",
"success": true
} ],
"context": "When calling is (10) not in range (in range(0, 10)",
"fullname": "test_when_calling_is_not_in_range",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 2,
"path": "res://tests/unit/range.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/range.test.gd",
"tags": [  ],
"test": ExtResource( 15 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 2
}, {
"context": "Given the Addition Operator",
"methods": [ {
"assertions": [ {
"actual": "|int| 0 is equal to |int| 0",
"context": "",
"expected": "|int| 0 is equal to |int| 0",
"success": true
} ],
"context": "When we subtract 2 from 2 we get 0",
"fullname": "test_subtract",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 2 is equal to |int| 2",
"context": "",
"expected": "|int| 2 is equal to |int| 2",
"success": true
} ],
"context": "When we subtract 5 from 3 we get 2",
"fullname": "test_subtract",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 1 is equal to |int| 1",
"context": "",
"expected": "|int| 1 is equal to |int| 1",
"success": true
} ],
"context": "When we subtract 7 from 6 we get 1",
"fullname": "test_subtract",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 4 is equal to |int| 4",
"context": "",
"expected": "|int| 4 is equal to |int| 4",
"success": true
} ],
"context": "When we add 2 to 2 we get 4",
"fullname": "test_add",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 8 is equal to |int| 8",
"context": "",
"expected": "|int| 8 is equal to |int| 8",
"success": true
} ],
"context": "When we add 5 to 3 we get 8",
"fullname": "test_add",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 13 is equal to |int| 13",
"context": "",
"expected": "|int| 13 is equal to |int| 13",
"success": true
} ],
"context": "When we add 7 to 6 we get 13",
"fullname": "test_add",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 6,
"path": "res://tests/unit/parameters.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/parameters.test.gd",
"tags": [  ],
"test": ExtResource( 16 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 6
}, {
"context": "Dummy Passing Test",
"methods": [ {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Passing!",
"expected": "|bool| True == true",
"success": true
} ],
"context": "This method passes",
"fullname": "test_this_method_passes",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 1,
"path": "res://tests/unit/suite.test.gd.DummyOne",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/suite.test.gd.DummyOne",
"tags": [  ],
"test": SubResource( 13 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 1
}, {
"context": "Dummy Test 2",
"methods": [ {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Passing!",
"expected": "|bool| True == true",
"success": true
} ],
"context": "This method passes",
"fullname": "test_this_method_passes",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 1,
"path": "res://tests/unit/suite.test.gd.DummyTwo",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/suite.test.gd.DummyTwo",
"tags": [  ],
"test": SubResource( 14 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 1
}, {
"context": "Given a Test Double",
"methods": [ {
"assertions": [ {
"actual": "|int| 4 is equal to |int| 4",
"context": "Then we get the correct result",
"expected": "|int| 4 is equal to |int| 4",
"success": true
} ],
"context": "When we call an add(x, y) method that we haven't directed",
"fullname": "test_When_we_call_an_add_method_that_we_have_not_directed",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|null| Null == null",
"context": "Then we get null",
"expected": "|null| Null == null",
"success": true
} ],
"context": "When we call a method that we have dummied",
"fullname": "test_When_we_call_a_method_that_we_have_dummied",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|Object| [Node:1575] is equal to |Object| [Node:1575]",
"context": "Then it returns that same node",
"expected": "|Object| [Node:1575] is equal to |Object| [Node:1575]",
"success": true
} ],
"context": "When we call a method that we have stubbed to return a node",
"fullname": "test_When_we_call_a_method_that_we_have_stubbed_to_return_a_node",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|null| Null == null",
"context": "Then we get the stubbed value back",
"expected": "|null| Null == null",
"success": true
} ],
"context": "When we stub a method of a doubled inner class",
"fullname": "test_When_we_stub_a_method_of_a_double_inner_class",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 9999 is equal to |int| 9999",
"context": "Then it returns the corresponding value when the pattern matches",
"expected": "|int| 9999 is equal to |int| 9999",
"success": true
} ],
"context": "When we call a method that was stubbed with an argument pattern that includes a non-primitive object",
"fullname": "test_When_we_call_a_method_that_was_stubbed_with_an_argument_pattern_that_includes_a_non_primitive_object",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "(1, 1) is builtin: Vector2",
"context": "Then we can call methods on it",
"expected": "(1, 1) is builtin: Vector2",
"success": true
} ],
"context": "When we double an inner class",
"fullname": "test_When_we_double_an_inner_class",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 99 is equal to |int| 99",
"context": "Then it affects the state of the double",
"expected": "|int| 99 is equal to |int| 99",
"success": true
} ],
"context": "When we pass a funcref as a subcall",
"fullname": "test_When_we_pass_a_funcref_as_a_subcall",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then it returns true",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we call a method that we have stubbed to return true",
"fullname": "test_When_we_call_a_method_that_we_have_stubbed_to_return_true",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "method: add was called with arguments: [10, 10]",
"context": "Then we can see that it was called with those arguments",
"expected": "method: add was called with arguments: [10, 10]",
"success": true
} ],
"context": "When we pass arguments to a method call that we are spying on",
"fullname": "test_When_we_pass_arguments_to_a_method_call_that_we_are_spying_on",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| True is equal to |bool| True",
"context": "Then we can call it",
"expected": "|bool| True is equal to |bool| True",
"success": true
} ],
"context": "When we stubbed a keyworded method by passing in the correct keyword",
"fullname": "test_When_we_stubbed_a_keyword_method_by_passing_in_the_correct_keyword",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 4 is equal to |int| 4",
"context": "Then it calls its super implementation by default",
"expected": "|int| 4 is equal to |int| 4",
"success": true
}, {
"actual": "|int| 9999 is equal to |int| 9999",
"context": "Then it does not call its super implementation when arguments patterns match a different return value",
"expected": "|int| 9999 is equal to |int| 9999",
"success": true
} ],
"context": "When we call a method that we stubbed to call its super implementation by default",
"fullname": "test_When_we_call_a_method_that_we_stubbed_to_call_its_super_implementation_by_default",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|String| Jackie is equal to |String| Jackie",
"context": "Then we can double the object successfully",
"expected": "|String| Jackie is equal to |String| Jackie",
"success": true
} ],
"context": "When we pass in dependecies on double",
"fullname": "test_When_we_pass_in_deps_on_double",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|String| Jackie is equal to |String| Jackie",
"context": "Then we can double the object successfully",
"expected": "|String| Jackie is equal to |String| Jackie",
"success": true
} ],
"context": "When we pass in dependecies on direct",
"fullname": "test_When_we_pass_in_deps_on_direct",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 9999 is equal to |int| 9999",
"context": "Then it returns the corresponding value when the partial pattern matches",
"expected": "|int| 9999 is equal to |int| 9999",
"success": true
} ],
"context": "When we call a method that was stubbed with a partial (ie using any()) argument pattern",
"fullname": "test_When_we_call_a_method_that_was_stubbed_with_a_partial_argument_pattern",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|Array| [10, 5] is equal to |Array| [10, 5]",
"context": "Then it returns a value",
"expected": "|Array| [10, 5] is equal to |Array| [10, 5]",
"success": true
} ],
"context": "When we pass an Object with a call_func function",
"fullname": "test_When_we_pass_an_object_with_callfunc_method_as_a_subcall",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "add was called",
"context": "Then we can see that it was called at least once",
"expected": "add was called",
"success": true
} ],
"context": "When we call a method that we are spying on",
"fullname": "test_When_we_call_a_method_that_we_are_spying_on",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 99 is equal to |int| 99",
"context": "Then it returns a value",
"expected": "|int| 99 is equal to |int| 99",
"success": true
} ],
"context": "When we pass a funcref as a subcall that returns",
"fullname": "test_When_we_pass_a_funcref_as_a_subcall_that_returns_a_value",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|float| 6.283185 is equal to |float| 6.283185",
"context": "Then we can call the static methods of that inner double",
"expected": "|float| 6.283185 is equal to |float| 6.283185",
"success": true
} ],
"context": "When we add an doubled inner class to it",
"fullname": "test_When_we_add_a_doubled_inner_class_to_it",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 100 is equal to |int| 100",
"context": "Then it returns the default stubbed value when the arguments don't match any pattern",
"expected": "|int| 100 is equal to |int| 100",
"success": true
}, {
"actual": "|int| 1000 is equal to |int| 1000",
"context": "Then it returns the the corresponding value to the pattern the arguments matched",
"expected": "|int| 1000 is equal to |int| 1000",
"success": true
} ],
"context": "When we call a method that was stubbed to return different values based on argument patterns",
"fullname": "test_When_we_call_a_method_that_was_stubbed_to_return_different_values_based_on_argument_patterns",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
} ],
"passed": 19,
"path": "res://tests/integration/test_double.test.gd",
"source": {
"containers": [ "res://tests/integration", "res://tests" ],
"method": "",
"path": "res://tests/integration/test_double.test.gd",
"tags": [  ],
"test": ExtResource( 14 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 19
}, {
"context": "Given a String Assertion",
"methods": [ {
"assertions": [ {
"actual": "impsum does not begin with bleh lorem",
"context": "Then it passes",
"expected": "impsum does not begin with bleh lorem",
"success": true
} ],
"context": "When calling asserts.string_does_not_begin_with('lorem', 'impsum')",
"fullname": "test_when_calling_string_does_not_begin_with",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "lorem impsum begins with lorem",
"context": "Then it passes",
"expected": "lorem impsum begins with lorem",
"success": true
} ],
"context": "When calling asserts.string_begins_with('lorem', 'lorem impsum')",
"fullname": "test_when_calling_string_begins_with",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "lorem impsum ends with impsum",
"context": "Then it passes",
"expected": "lorem impsum ends with impsum",
"success": true
} ],
"context": "When calling asserts.string_ends_with('impsum', 'lorem impsum')",
"fullname": "test_when_calling_string_ends_with",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "lorem impsum contains em im",
"context": "Then it passes",
"expected": "lorem impsum contains em im",
"success": true
} ],
"context": "When calling asserts.string_contains('em im', 'lorem impsum')",
"fullname": "test_when_calling_string_contains",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "impsum does not contain beem im",
"context": "Then it passes",
"expected": "impsum does not contain beem im",
"success": true
} ],
"context": "When calling asserts.string_does_not_contain('em im', 'impsum')",
"fullname": "test_when_calling_string_does_not_contain",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "impsum does not end with lorem",
"context": "Then it passes",
"expected": "impsum does not end with lorem",
"success": true
} ],
"context": "When calling asserts.string_does_not_end_with('lorem', 'impsum')",
"fullname": "test_when_calling_string_does_not_end_with",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 6,
"path": "res://tests/unit/string.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/string.test.gd",
"tags": [  ],
"test": ExtResource( 9 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 6
}, {
"context": "Given an Object Assertion",
"methods": [ {
"assertions": [ {
"actual": "[Node:1696] has meta: dummy",
"context": "Then it passes",
"expected": "[Node:1696] has meta: dummy",
"success": true
}, {
"actual": "[Node:1696] has meta: dummy",
"context": "Then it passes",
"expected": "[Node:1696] has meta: dummy",
"success": true
} ],
"context": "When calling asserts.object_has_meta() after adding metadata",
"fullname": "test_when_calling_has_meta_after_adding_metadata",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "[Node:1696] does not have meta: bad_meta",
"context": "Then it passes",
"expected": "[Node:1696] does not have meta: bad_meta",
"success": true
} ],
"context": "When calling asserts.object_does_not_have_meta()",
"fullname": "test_when_calling_does_not_have_meta",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is freed from memory",
"context": "Then it passes",
"expected": "Null is freed from memory",
"success": true
} ],
"context": "When calling asserts.is_freed(freed_object",
"fullname": "test_when_calling_freed_object_is_freed",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:1749] is not freed",
"context": "Then it passes",
"expected": "[Node:1749] is not freed",
"success": true
} ],
"context": "When calling asserts.is_not_freed(unfreed_object)",
"fullname": "test_when_calling_unfreed_object_is_not_freed",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:1696] does not have meta: confusing",
"context": "Then it passes",
"expected": "[Node:1696] does not have meta: confusing",
"success": true
} ],
"context": "When calling asserts.object_has_meta with real key but null val",
"fullname": "test_when_calling_does_not_have_meta_real_key_null_value_pair",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:1696] has method: title",
"context": "Then it passes",
"expected": "[Node:1696] has method: title",
"success": true
} ],
"context": "When calling has_method('title')",
"fullname": "test_when_calling_has_method_title",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:1696] has user signal: dummy_signal",
"context": "Then it passes",
"expected": "[Node:1696] has user signal: dummy_signal",
"success": true
} ],
"context": "When calling obj_has_user_signal after adding a signal",
"fullname": "test_when_calling_has_user_signal_after_adding_a_signal",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:1696] does not have user signal: false_signal",
"context": "Then it passes",
"expected": "[Node:1696] does not have user signal: false_signal",
"success": true
} ],
"context": "When calling obj_does_not_have_user_signal with fake signal",
"fullname": "test_when_calling_does_not_have_user_signal",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:1818] is not queued for deletion",
"context": "Then it passes",
"expected": "[Node:1818] is not queued for deletion",
"success": true
} ],
"context": "When calling asserts.object_is_not_for_queued_deletion after not calling queue free()",
"fullname": "test_when_calling_obj_is_not_for_queued_deletion_after_not_calling_queue_free",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:1696].builtin_dummy is connected to [Node:1696].title",
"context": "Then it passes",
"expected": "[Node:1696].builtin_dummy is connected to [Node:1696].title",
"success": true
} ],
"context": "When calling asserts object is connected with a valid connection",
"fullname": "test_when_calling_obj_is_connected_with_a_real_connection",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:1696] does not have user signal: builtin_dummy",
"context": "Then it passes",
"expected": "[Node:1696] does not have user signal: builtin_dummy",
"success": true
} ],
"context": "When calling does not have user signal with class signal",
"fullname": "test_when_calling_does_not_have_user_signal_with_class_signal_constant",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:1863] is not blocking signals",
"context": "Then it passes",
"expected": "[Node:1863] is not blocking signals",
"success": true
} ],
"context": "When calling is not blocking signals while not blocking signals",
"fullname": "test_is_not_blocking_signals",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:1696].builtin_dummy is not connected to [Node:1696].title",
"context": "Then it passes",
"expected": "[Node:1696].builtin_dummy is not connected to [Node:1696].title",
"success": true
} ],
"context": "When calling asserts object is not connected with an invalid connection",
"fullname": "test_when_calling_obj_is_not_connected_with_an_invalid_connection",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:1883] is blocking signals",
"context": "Then it passes",
"expected": "[Node:1883] is blocking signals",
"success": true
} ],
"context": "When calling is blocking signals while blocking signals",
"fullname": "test_is_blocking_signals",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:1889] is queued for deletion",
"context": "Then it passes",
"expected": "[Node:1889] is queued for deletion",
"success": true
} ],
"context": "When calling asserts.object_is_queued for deletion after calling queue_free",
"fullname": "test_when_calling_obj_is_queued_for_deletion_after_calling_queue_free",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 15,
"path": "res://tests/unit/object.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/object.test.gd",
"tags": [  ],
"test": ExtResource( 7 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 15
}, {
"context": "Given an Is Instance of class/type Assertion",
"methods": [ {
"assertions": [ {
"actual": "|AABB| 0, 0, 0 - 0, 0, 0 != null",
"context": "AABB is not null",
"expected": "|AABB| 0, 0, 0 - 0, 0, 0 != null",
"success": true
}, {
"actual": "0, 0, 0 - 0, 0, 0 is builtin: AABB",
"context": "Then it passes",
"expected": "0, 0, 0 - 0, 0, 0 is builtin: AABB",
"success": true
} ],
"context": "When calling asserts.is_AABB(aabb: AABB)",
"fullname": "test_when_calling_is_AABB",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|Array| [] != null",
"context": "array is not null",
"expected": "|Array| [] != null",
"success": true
}, {
"actual": "[] is builtin: Array",
"context": "Then it passes",
"expected": "[] is builtin: Array",
"success": true
} ],
"context": "When calling asserts.is_Array(array: Array)",
"fullname": "test_when_calling_is_Array",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|PoolVector2Array| [] != null",
"context": "vec2s is not null",
"expected": "|PoolVector2Array| [] != null",
"success": true
}, {
"actual": "[] is builtin: PoolVector2Array",
"context": "Then it passes",
"expected": "[] is builtin: PoolVector2Array",
"success": true
} ],
"context": "When calling is asserts.is_PoolVector2Array(vec2s: PoolVector2Array)",
"fullname": "test_when_calling_is_PoolVector2Array",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|String|  != null",
"context": "strs is not null",
"expected": "|String|  != null",
"success": true
}, {
"actual": " is builtin: String",
"context": "Then it passes",
"expected": " is builtin: String",
"success": true
} ],
"context": "When calling asserts.is_string(strs: String)",
"fullname": "test_when_calling_is_string",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|Transform2D| ((1, 0), (0, 1), (0, 0)) != null",
"context": "transform2D is not null",
"expected": "|Transform2D| ((1, 0), (0, 1), (0, 0)) != null",
"success": true
}, {
"actual": "((1, 0), (0, 1), (0, 0)) is builtin: Transform2D",
"context": "Then it passes",
"expected": "((1, 0), (0, 1), (0, 0)) is builtin: Transform2D",
"success": true
} ],
"context": "When calling asserts.is_Transform(transform2D: Transform2D)",
"fullname": "test_when_calling_is_Transform2D",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|Quat| (0, 0, 0, 1) != null",
"context": "quat is not null",
"expected": "|Quat| (0, 0, 0, 1) != null",
"success": true
}, {
"actual": "(0, 0, 0, 1) is builtin: Quat",
"context": "Then it passes",
"expected": "(0, 0, 0, 1) is builtin: Quat",
"success": true
} ],
"context": "When calling asserts.is_Quat(quat: Quat)",
"fullname": "test_when_calling_is_Quat",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|Color| 0,0,0,1 != null",
"context": "color is not null",
"expected": "|Color| 0,0,0,1 != null",
"success": true
}, {
"actual": "0,0,0,1 is builtin: Color",
"context": "Then it passes",
"expected": "0,0,0,1 is builtin: Color",
"success": true
} ],
"context": "When calling asserts.is_color(color: Color)",
"fullname": "test_when_calling_is_Color",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|PoolStringArray| [] != null",
"context": "strs is not null",
"expected": "|PoolStringArray| [] != null",
"success": true
}, {
"actual": "[] is builtin: PoolStringArray",
"context": "Then it passes",
"expected": "[] is builtin: PoolStringArray",
"success": true
} ],
"context": "When calling is asserts.is_PoolStringArray(strs: PoolStringArray)",
"fullname": "test_when_calling_is_PoolStringArray",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|PoolVector3Array| [] != null",
"context": "vec3s is not null",
"expected": "|PoolVector3Array| [] != null",
"success": true
}, {
"actual": "[] is builtin: PoolVector3Array",
"context": "Then it passes",
"expected": "[] is builtin: PoolVector3Array",
"success": true
} ],
"context": "When calling is asserts.is_PoolVector3Array(vec3s: PoolVector3Array)",
"fullname": "test_when_calling_is_PoolVector3Array",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "1 is builtin: float",
"context": "Then it passes",
"expected": "1 is builtin: float",
"success": true
} ],
"context": "When calling asserts.is_float(1.0)",
"fullname": "test_when_calling_is_float",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|Plane| 0, 0, 0, 0 != null",
"context": "plane is not null",
"expected": "|Plane| 0, 0, 0, 0 != null",
"success": true
}, {
"actual": "0, 0, 0, 0 is builtin: Plane",
"context": "then it passes",
"expected": "0, 0, 0, 0 is builtin: Plane",
"success": true
} ],
"context": "When calling asserts.is_Plane(plane: Plane())",
"fullname": "test_when_calling_is_Plane",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|PoolByteArray| [PoolByteArray] != null",
"context": "bytes is not null",
"expected": "|PoolByteArray| [PoolByteArray] != null",
"success": true
}, {
"actual": "[PoolByteArray] is builtin: PoolByteArray",
"context": "Then it passes",
"expected": "[PoolByteArray] is builtin: PoolByteArray",
"success": true
} ],
"context": "When calling asserts.is_PoolByteArray(bytes: PoolByteArray)",
"fullname": "test_when_calling_is_PoolByteArray",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|RID| [RID] != null",
"context": "rid is not null",
"expected": "|RID| [RID] != null",
"success": true
}, {
"actual": "[RID] is builtin: RID",
"context": "Then it passes",
"expected": "[RID] is builtin: RID",
"success": true
} ],
"context": "When calling asserts.is_RID(rid: RID)",
"fullname": "test_when_calling_is_RID",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|Object| [Node:1841] != null",
"context": "node is not null",
"expected": "|Object| [Node:1841] != null",
"success": true
}, {
"actual": "[Node:1841] is builtin: Object",
"context": "An instance of node is an Object",
"expected": "[Node:1841] is builtin: Object",
"success": true
} ],
"context": "When calling is asserts.object(node: Node)",
"fullname": "test_when_calling_is_object",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|Rect2| (0, 0, 0, 0) != null",
"context": "rect2 is not null",
"expected": "|Rect2| (0, 0, 0, 0) != null",
"success": true
}, {
"actual": "(0, 0, 0, 0) is builtin: Rect2",
"context": "Then it passes",
"expected": "(0, 0, 0, 0) is builtin: Rect2",
"success": true
} ],
"context": "When calling asserts.is_Rect2(rect2: Rect2)",
"fullname": "test_when_calling_is_Rect2",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|NodePath| . != null",
"context": "@'Parent/Child' is not null",
"expected": "|NodePath| . != null",
"success": true
}, {
"actual": ". is builtin: NodePath",
"context": "Then it passes",
"expected": ". is builtin: NodePath",
"success": true
} ],
"context": "When calling asserts.is_NodePath(@'Parent/Child')",
"fullname": "test_when_calling_is_NodePath",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|Transform| 1, 0, 0, 0, 1, 0, 0, 0, 1 - 0, 0, 0 != null",
"context": "transform is not null",
"expected": "|Transform| 1, 0, 0, 0, 1, 0, 0, 0, 1 - 0, 0, 0 != null",
"success": true
}, {
"actual": "1, 0, 0, 0, 1, 0, 0, 0, 1 - 0, 0, 0 is builtin: Transform",
"context": "Then it passes",
"expected": "1, 0, 0, 0, 1, 0, 0, 0, 1 - 0, 0, 0 is builtin: Transform",
"success": true
} ],
"context": "When calling asserts.is_Transform(transform: Transform)",
"fullname": "test_when_calling_is_Transform",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|Basis| ((1, 0, 0), (0, 1, 0), (0, 0, 1)) != null",
"context": "basis is not null",
"expected": "|Basis| ((1, 0, 0), (0, 1, 0), (0, 0, 1)) != null",
"success": true
}, {
"actual": "((1, 0, 0), (0, 1, 0), (0, 0, 1)) is builtin: Basis",
"context": "Then it passes",
"expected": "((1, 0, 0), (0, 1, 0), (0, 0, 1)) is builtin: Basis",
"success": true
} ],
"context": "When calling asserts.is_basis(basis: Basis",
"fullname": "test_when_calling_is_Basis",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "{} is builtin: Dictionary",
"context": "Then it passes",
"expected": "{} is builtin: Dictionary",
"success": true
} ],
"context": "When calling asserts.is_Dictionary({})",
"fullname": "test_when_calling_is_Dictionary",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|Vector3| (0, 0, 0) != null",
"context": "vec3 is not null",
"expected": "|Vector3| (0, 0, 0) != null",
"success": true
}, {
"actual": "(0, 0, 0) is builtin: Vector3",
"context": "Then it passes",
"expected": "(0, 0, 0) is builtin: Vector3",
"success": true
} ],
"context": "When calling asserts.is_Vector3(vec3: Vector3",
"fullname": "test_when_calling_is_Vector3",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "1 is builtin: int",
"context": "Then it passes",
"expected": "1 is builtin: int",
"success": true
} ],
"context": "When callign asserts.is_int(1)",
"fullname": "test_when_calling_is_int",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|PoolColorArray| [PoolColorArray] != null",
"context": "colors is not null",
"expected": "|PoolColorArray| [PoolColorArray] != null",
"success": true
}, {
"actual": "[PoolColorArray] is builtin: PoolColorArray",
"context": "Then it passes",
"expected": "[PoolColorArray] is builtin: PoolColorArray",
"success": true
} ],
"context": "When calling asserts.is_PoolColorArray(colors: PoolColorArray)",
"fullname": "test_when_calling_is_PoolColorArray",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|PoolIntArray| [] != null",
"context": "ints is not null",
"expected": "|PoolIntArray| [] != null",
"success": true
}, {
"actual": "[] is builtin: PoolIntArray",
"context": "Then it passes",
"expected": "[] is builtin: PoolIntArray",
"success": true
} ],
"context": "When calling asserts.is_PoolIntArray(ints: PoolIntArray)",
"fullname": "test_when_calling_is_PoolIntArray",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "True is builtin: bool",
"context": "Then it passes",
"expected": "True is builtin: bool",
"success": true
} ],
"context": "When calling asserts.is_bool(true)",
"fullname": "test_when_calling_is_bool",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|Vector2| (0, 0) != null",
"context": "vec2 is not null",
"expected": "|Vector2| (0, 0) != null",
"success": true
}, {
"actual": "(0, 0) is builtin: Vector2",
"context": "Then it passes",
"expected": "(0, 0) is builtin: Vector2",
"success": true
} ],
"context": "When calling asserts.is_Vector2(vec2)",
"fullname": "test_when_calling_is_Vector2",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|PoolRealArray| [] != null",
"context": "reals is not null",
"expected": "|PoolRealArray| [] != null",
"success": true
}, {
"actual": "[] is builtin: PoolRealArray",
"context": "Then it passes",
"expected": "[] is builtin: PoolRealArray",
"success": true
} ],
"context": "When calling is asserts.is_PoolRealArray(reals: PoolRealArray)",
"fullname": "test_when_calling_is_PoolRealArray",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
} ],
"passed": 26,
"path": "res://tests/unit/is_instance.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/is_instance.test.gd",
"tags": [  ],
"test": ExtResource( 6 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 26
}, {
"context": "Given an Is Not Instance of class/type Assertion",
"methods": [ {
"assertions": [ {
"actual": "Null is not builtin: int",
"context": "Then it passes",
"expected": "Null is not builtin: int",
"success": true
} ],
"context": "when calling asserts.is_not_int(null)",
"fullname": "test_when_calling_is_not_int",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: bool",
"context": "Then it passes",
"expected": "Null is not builtin: bool",
"success": true
} ],
"context": "when calling asserts.is_not_bool(null)",
"fullname": "test_when_calling_is_not_bool",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Basis",
"context": "Then it passes",
"expected": "Null is not builtin: Basis",
"success": true
} ],
"context": "when calling asserts.is_not_Basis(null)",
"fullname": "test_when_calling_is_not_Basis",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Color",
"context": "Then it passes",
"expected": "Null is not builtin: Color",
"success": true
} ],
"context": "when calling asserts.is_not_Color(null)",
"fullname": "test_when_calling_is_not_Color",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: AABB",
"context": "Then it passes",
"expected": "Null is not builtin: AABB",
"success": true
} ],
"context": "when calling asserts.is_not_AABB(null)",
"fullname": "test_when_calling_is_not_AABB",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: float",
"context": "Then it passes",
"expected": "Null is not builtin: float",
"success": true
} ],
"context": "when calling asserts.is_not_float(null)",
"fullname": "test_when_calling_is_not_float",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Array",
"context": "Then it passes",
"expected": "Null is not builtin: Array",
"success": true
} ],
"context": "when calling asserts.is_not_Array(null)",
"fullname": "test_when_calling_is_not_Array",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: NodePath",
"context": "Then it passes",
"expected": "Null is not builtin: NodePath",
"success": true
} ],
"context": "when calling asserts.is_not_NodePath(null)",
"fullname": "test_when_calling_is_not_NodePath",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Object",
"context": "Then it passes",
"expected": "Null is not builtin: Object",
"success": true
} ],
"context": "when calling asserts.is_not_Object(null)",
"fullname": "test_when_calling_is_not_Object",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Dictionary",
"context": "Then it passes",
"expected": "Null is not builtin: Dictionary",
"success": true
} ],
"context": "when calling asserts.is_not_Dictionary(null)",
"fullname": "test_when_calling_is_not_Dictionary",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Transform",
"context": "Then it passes",
"expected": "Null is not builtin: Transform",
"success": true
} ],
"context": "when calling asserts.is_not_Transform(null)",
"fullname": "test_when_calling_is_not_Transform",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: PoolColorArray",
"context": "Then it passes",
"expected": "Null is not builtin: PoolColorArray",
"success": true
} ],
"context": "when calling asserts.is_not_PoolColorArray(null)",
"fullname": "test_when_calling_is_not_PoolColorArray",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: RID",
"context": "Then it passes",
"expected": "Null is not builtin: RID",
"success": true
} ],
"context": "when calling asserts.is_not_RID(null)",
"fullname": "test_when_calling_is_not_RID",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: String",
"context": "Then it passes",
"expected": "Null is not builtin: String",
"success": true
} ],
"context": "when calling asserts.is_not_String(null)",
"fullname": "test_when_calling_is_not_String",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: PoolVector2Array",
"context": "Then it passes",
"expected": "Null is not builtin: PoolVector2Array",
"success": true
} ],
"context": "when calling asserts.is_not_PoolVector2Array(null)",
"fullname": "test_when_calling_is_not_PoolVector2Array",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: PoolVector3Array",
"context": "Then it passes",
"expected": "Null is not builtin: PoolVector3Array",
"success": true
} ],
"context": "when calling asserts.is_not_PoolVector3Array(null)",
"fullname": "test_when_calling_is_not_PoolVector3Array",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: PoolByteArray",
"context": "Then it passes",
"expected": "Null is not builtin: PoolByteArray",
"success": true
} ],
"context": "when calling asserts.is_not_PoolByteArray(null)",
"fullname": "test_when_calling_is_not_PoolByteArray",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Plane",
"context": "Then it passes",
"expected": "Null is not builtin: Plane",
"success": true
} ],
"context": "when calling asserts.is_not_Plane(null)",
"fullname": "test_when_calling_is_not_Plane",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Rect2",
"context": "Then it passes",
"expected": "Null is not builtin: Rect2",
"success": true
} ],
"context": "when calling asserts.is_not_Rect2(null)",
"fullname": "test_when_calling_is_not_Rect2",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Vector3",
"context": "Then it passes",
"expected": "Null is not builtin: Vector3",
"success": true
} ],
"context": "when calling asserts.is_not_Vector3(null)",
"fullname": "test_when_calling_is_not_Vector3",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Vector2",
"context": "Then it passes",
"expected": "Null is not builtin: Vector2",
"success": true
} ],
"context": "when calling asserts.is_not_Vector2(null)",
"fullname": "test_when_calling_is_not_Vector2",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: PoolStringArray",
"context": "Then it passes",
"expected": "Null is not builtin: PoolStringArray",
"success": true
} ],
"context": "when calling asserts.is_not_PoolStringArray(null)",
"fullname": "test_when_calling_is_not_PoolStringArray",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: PoolIntArray",
"context": "Then it passes",
"expected": "Null is not builtin: PoolIntArray",
"success": true
} ],
"context": "when calling asserts.is_not_PoolIntArray(null)",
"fullname": "test_when_calling_is_not_PoolIntArray",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: PoolRealArray",
"context": "Then it passes",
"expected": "Null is not builtin: PoolRealArray",
"success": true
} ],
"context": "when calling asserts.is_not_PoolRealArray(null)",
"fullname": "test_when_calling_is_not_PoolRealArray",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Quat",
"context": "Then it passes",
"expected": "Null is not builtin: Quat",
"success": true
} ],
"context": "when calling asserts.is_not_Quat(null)",
"fullname": "test_when_calling_is_not_Quat",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Transform2D",
"context": "Then it passes",
"expected": "Null is not builtin: Transform2D",
"success": true
} ],
"context": "when calling asserts.is_not_Transform2D(null)",
"fullname": "test_when_calling_is_not_Transform2D",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 26,
"path": "res://tests/unit/is_not_instance.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/is_not_instance.test.gd",
"tags": [  ],
"test": ExtResource( 2 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 26
}, {
"context": "Given a Test Script",
"methods": [ {
"assertions": [ {
"actual": "|bool| True == true",
"context": "",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|int| 2 is equal to |int| 2",
"context": "",
"expected": "|int| 2 is equal to |int| 2",
"success": true
} ],
"context": " when we omit context we can see expected and got under method",
"fullname": "test_when_we_omit_context_we_can_see_expected_and_got_under_method",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "if the test didn't break this works",
"expected": "|bool| True == true",
"success": true
} ],
"context": " we can omit describe",
"fullname": "test_we_can_omit_describe",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 10 is greater than |int| 1",
"context": "We get an array of multiple values back",
"expected": "|int| 10 is greater than |int| 1",
"success": true
}, {
"actual": "|int| 0 is not equal to |int| 9",
"context": "With different values",
"expected": "|int| 0 != |int| 9",
"success": true
}, {
"actual": "|int| 10 is greater than |int| 1",
"context": "And we can track multiple properties",
"expected": "|int| 10 is greater than |int| 1",
"success": true
} ],
"context": "When we record properties",
"fullname": "test_we_can_record_properties",
"passed": 3,
"success": true,
"time": 0.0,
"total": 3
} ],
"passed": 3,
"path": "res://tests/unit/test.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/test.test.gd",
"tags": [  ],
"test": ExtResource( 19 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 3
}, {
"context": "Given a Signal Watcher",
"methods": [ {
"assertions": [ {
"actual": "signal: multiple was emitted from [Node:1878] 2",
"context": "Then we can track how many times we emitted it",
"expected": "signal: multiple was emitted from [Node:1878] 2",
"success": true
} ],
"context": "When we watch and signal and emit it multiple times",
"fullname": "test_When_we_watch_a_signal_and_emit_it_multiple_times",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Signal: example was emitted from [Node:1878] with arguments: [1, 20, 5]",
"context": "Then it captures any arguments that where passed when the signal was emitted",
"expected": "Signal: example was emitted from [Node:1878] with arguments: [1, 20, 5]",
"success": true
} ],
"context": "When we watch a signal from an object with no bound variables",
"fullname": "test_When_we_watch_a_signal_from_an_object_with_no_bound_variables",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "signal: example was emitted from [Node:1878]",
"context": "Then it captures the emitted signal",
"expected": "signal: example was emitted from [Node:1878]",
"success": true
} ],
"context": "When we watch and emit a signal",
"fullname": "test_When_we_watch_and_emit_a_signal",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Signal: example was not emitted from [Node:1878]",
"context": "Then it does not capture the non-emitted signal",
"expected": "Signal: example was not emitted from [Node:1878]",
"success": true
} ],
"context": "When we watch and do not emit a signal",
"fullname": "test_When_we_watch_and_do_not_emit_a_signal",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 4,
"path": "res://tests/unit/watcher.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/watcher.test.gd",
"tags": [  ],
"test": ExtResource( 17 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 4
}, {
"context": "Given a Yield",
"methods": [ {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then we set var a to true",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then we set var b to true",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we yield in start twice",
"fullname": "test_When_we_yield_in_start",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then we set var e to true",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then we set var f to true",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we yield twice in execute",
"fullname": "test_When_we_yield_in_execute",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then yielder is not active",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When asserting against a test",
"fullname": "test_Yielder_is_not_active_when_asserting",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then we set var c to true",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then we set var d to true",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we yield in pre thrice",
"fullname": "test_When_we_yield_in_pre",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "[100, Null, Null, Null, Null, Null] is builtin: Array",
"context": "Then we get an array",
"expected": "[100, Null, Null, Null, Null, Null] is builtin: Array",
"success": true
}, {
"actual": "|int| 6 is equal to |int| 6",
"context": "Of size 6",
"expected": "|int| 6 is equal to |int| 6",
"success": true
}, {
"actual": "|int| 100 is equal to |int| 100",
"context": "Where element 0 is 100",
"expected": "|int| 100 is equal to |int| 100",
"success": true
} ],
"context": "When yield(self.yield_value()) returns",
"fullname": "test_When_we_yield_we_get_the_return_value",
"passed": 3,
"success": true,
"time": 0.0,
"total": 3
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then the yielder is paused",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When a signal being yielded on is emitted",
"fullname": "test_When_a_signal_being_yielded_on_is_emitted_the_yielder_is_stopped",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then the timeout signal is disconnected",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then the signal-signal is disconnected",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When it is finished",
"fullname": "test_When_yielder_is_finished_signals_are_disconnected",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then the yielder is paused",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "The timeout signal of the yielder is not connected",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When the yielder times out on until_timeout(0.1)",
"fullname": "test_When_the_yielder_times_out",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then the yielder is paused",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then the timeout signal of the yielder is disconnected",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then our signal to the yielder is disconnected",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When the yielder heres our signal",
"fullname": "test_When_the_yielder_hears_our_signal",
"passed": 3,
"success": true,
"time": 0.0,
"total": 3
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then yielder is unpaused",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "The timeout signal of the yielder is connected",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we call until_timeout (with 1.0)",
"fullname": "test_When_we_call_until_timeout",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then the yielder is unpaused",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then the timeout signal of the yielder is connected",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then our signal is connected to the yielder",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we call until signal",
"fullname": "test_When_we_call_until_signal",
"passed": 3,
"success": true,
"time": 0.0,
"total": 3
} ],
"passed": 11,
"path": "res://tests/unit/yield.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/yield.test.gd",
"tags": [  ],
"test": ExtResource( 18 ),
"yield_time": 1.9
},
"success": true,
"time_taken": 0.0,
"total": 11
} ],
1611514563: [ {
"context": "Default Args",
"methods": [ {
"assertions": [ {
"actual": "|bool| True == true",
"context": "If this method can be reached then we have doubled a script with default argument(s) properly!",
"expected": "|bool| True == true",
"success": true
} ],
"context": " default arguments of interpolate property",
"fullname": "test_default_arguments_of_interpolate_property",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 1,
"path": "res://tests/integration/default_args.test.gd",
"source": {
"containers": [ "res://tests/integration", "res://tests" ],
"method": "",
"path": "res://tests/integration/default_args.test.gd",
"tags": [  ],
"test": ExtResource( 10 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 1
}, {
"context": "Given a Boolean Assertion",
"methods": [ {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then it passes",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When calling asserts.is_true(true)",
"fullname": "test_when_calling_asserts_is_true",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| False == false",
"context": "Then it passes",
"expected": "|bool| False == false",
"success": true
} ],
"context": "When calling asserts.is_false(false)",
"fullname": "test_when_calling_asserts_is_false",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| True != false",
"context": "",
"expected": "|bool| True == false",
"success": false
} ],
"context": " intentional failure",
"fullname": "test_intentional_failure",
"passed": 0,
"success": false,
"time": 0.0,
"total": 1
} ],
"passed": 2,
"path": "res://tests/integration/boolean.test.gd",
"source": {
"containers": [ "res://tests/integration", "res://tests" ],
"method": "",
"path": "res://tests/integration/boolean.test.gd",
"tags": [  ],
"test": ExtResource( 20 ),
"yield_time": 0.0
},
"success": false,
"time_taken": 0.0,
"total": 3
}, {
"context": "Given a Script Director",
"methods": [ {
"assertions": [ {
"actual": "[Reference:1435] is instance of class: [GDScript:1428]",
"context": "Then we get that inner class back",
"expected": "[Reference:1435] is instance of class: [GDScript:1428]",
"success": true
} ],
"context": "When we double an inner class",
"fullname": "test_When_we_double_an_inner_class",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|Object| [Node:1488] is equal to |Object| [Node:1488]",
"context": "Then we get the same double back",
"expected": "|Object| [Node:1488] is equal to |Object| [Node:1488]",
"success": true
} ],
"context": "When we call the double the second time",
"fullname": "test_When_we_call_double_a_second_time_on",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|Dictionary| {_enter_tree:{arguments:, default_arguments:}, _exit_tree:{arguments:, default_arguments:}, _get:{arguments:a, default_arguments:a}, _get_configuration_warning:{arguments:, default_arguments:}, _get_editor_description:{arguments:, default_arguments:}, _get_import_path:{arguments:, default_arguments:}, _get_property_list:{arguments:, default_arguments:}, _init:{arguments:, default_arguments:}, _input:{arguments:a, default_arguments:a}, _notification:{arguments:a, default_arguments:a}, _physics_process:{arguments:a, default_arguments:a}, _process:{arguments:a, default_arguments:a}, _ready:{arguments:, default_arguments:}, _set:{arguments:a, b, default_arguments:a, b}, _set_editor_description:{arguments:a, default_arguments:a}, _set_import_path:{arguments:a, default_arguments:a}, _to_string:{arguments:, default_arguments:}, _unhandled_input:{arguments:a, default_arguments:a}, _unhandled_key_input:{arguments:a, default_arguments:a}, add:{arguments:a, b, default_arguments:a, b}, add_child:{arguments:a, b, default_arguments:a, b = False}, add_child_below_node:{arguments:a, b, c, default_arguments:a, b, c = False}, add_to_group:{arguments:a, b, default_arguments:a, b = False}, add_user_signal:{arguments:a, b, default_arguments:a, b = []}, call:{arguments:a, default_arguments:a}, call_deferred:{arguments:a, default_arguments:a}, callv:{arguments:a, b, default_arguments:a, b}, can_process:{arguments:, default_arguments:}, can_translate_messages:{arguments:, default_arguments:}, connect:{arguments:a, b, c, d, e, default_arguments:a, b, c, d = [], e = 0}, disconnect:{arguments:a, b, c, default_arguments:a, b, c}, divide:{arguments:a, b, default_arguments:a, b}, duplicate:{arguments:a, default_arguments:a = 15}, emit_signal:{arguments:a, default_arguments:a}, find_node:{arguments:a, b, c, default_arguments:a, b = True, c = True}, find_parent:{arguments:a, default_arguments:a}, free:{arguments:, default_arguments:}, get:{arguments:a, default_arguments:a}, get_child:{arguments:a, default_arguments:a}, get_child_count:{arguments:, default_arguments:}, get_children:{arguments:, default_arguments:}, get_class:{arguments:, default_arguments:}, get_custom_multiplayer:{arguments:, default_arguments:}, get_filename:{arguments:, default_arguments:}, get_groups:{arguments:, default_arguments:}, get_incoming_connections:{arguments:, default_arguments:}, get_index:{arguments:, default_arguments:}, get_indexed:{arguments:a, default_arguments:a}, get_instance_id:{arguments:, default_arguments:}, get_meta:{arguments:a, default_arguments:a}, get_meta_list:{arguments:, default_arguments:}, get_method_list:{arguments:, default_arguments:}, get_multiplayer:{arguments:, default_arguments:}, get_name:{arguments:, default_arguments:}, get_network_master:{arguments:, default_arguments:}, get_node:{arguments:a, default_arguments:a}, get_node_and_resource:{arguments:a, default_arguments:a}, get_node_or_null:{arguments:a, default_arguments:a}, get_owner:{arguments:, default_arguments:}, get_parent:{arguments:, default_arguments:}, get_path:{arguments:, default_arguments:}, get_path_to:{arguments:a, default_arguments:a}, get_pause_mode:{arguments:, default_arguments:}, get_physics_process_delta_time:{arguments:, default_arguments:}, get_position_in_parent:{arguments:, default_arguments:}, get_process_delta_time:{arguments:, default_arguments:}, get_process_priority:{arguments:, default_arguments:}, get_property_list:{arguments:, default_arguments:}, get_scene_instance_load_placeholder:{arguments:, default_arguments:}, get_script:{arguments:, default_arguments:}, get_signal_connection_list:{arguments:a, default_arguments:a}, get_signal_list:{arguments:, default_arguments:}, get_tree:{arguments:, default_arguments:}, get_viewport:{arguments:, default_arguments:}, has_meta:{arguments:a, default_arguments:a}, has_method:{arguments:a, default_arguments:a}, has_node:{arguments:a, default_arguments:a}, has_node_and_resource:{arguments:a, default_arguments:a}, has_signal:{arguments:a, default_arguments:a}, has_user_signal:{arguments:a, default_arguments:a}, is_a_parent_of:{arguments:a, default_arguments:a}, is_blocking_signals:{arguments:, default_arguments:}, is_class:{arguments:a, default_arguments:a}, is_connected:{arguments:a, b, c, default_arguments:a, b, c}, is_displayed_folded:{arguments:, default_arguments:}, is_greater_than:{arguments:a, default_arguments:a}, is_in_group:{arguments:a, default_arguments:a}, is_inside_tree:{arguments:, default_arguments:}, is_network_master:{arguments:, default_arguments:}, is_physics_processing:{arguments:, default_arguments:}, is_physics_processing_internal:{arguments:, default_arguments:}, is_processing:{arguments:, default_arguments:}, is_processing_input:{arguments:, default_arguments:}, is_processing_internal:{arguments:, default_arguments:}, is_processing_unhandled_input:{arguments:, default_arguments:}, is_processing_unhandled_key_input:{arguments:, default_arguments:}, is_queued_for_deletion:{arguments:, default_arguments:}, math_fight:{arguments:, default_arguments:}, move_child:{arguments:a, b, default_arguments:a, b}, multiply:{arguments:a, b, default_arguments:a, b}, notification:{arguments:a, b, default_arguments:a, b = False}, pi:{arguments:, default_arguments:}, print_stray_nodes:{arguments:, default_arguments:}, print_tree:{arguments:, default_arguments:}, print_tree_pretty:{arguments:, default_arguments:}, propagate_call:{arguments:a, b, c, default_arguments:a, b = [], c = False}, propagate_notification:{arguments:a, default_arguments:a}, property_list_changed_notify:{arguments:, default_arguments:}, queue_free:{arguments:, default_arguments:}, raise:{arguments:, default_arguments:}, remove_and_skip:{arguments:, default_arguments:}, remove_child:{arguments:a, default_arguments:a}, remove_from_group:{arguments:a, default_arguments:a}, remove_meta:{arguments:a, default_arguments:a}, replace_by:{arguments:a, b, default_arguments:a, b = False}, request_ready:{arguments:, default_arguments:}, rpc:{arguments:a, default_arguments:a}, rpc_config:{arguments:a, b, default_arguments:a, b}, rpc_id:{arguments:a, b, default_arguments:a, b}, rpc_unreliable:{arguments:a, default_arguments:a}, rpc_unreliable_id:{arguments:a, b, default_arguments:a, b}, rset:{arguments:a, b, default_arguments:a, b}, rset_config:{arguments:a, b, default_arguments:a, b}, rset_id:{arguments:a, b, c, default_arguments:a, b, c}, rset_unreliable:{arguments:a, b, default_arguments:a, b}, rset_unreliable_id:{arguments:a, b, c, default_arguments:a, b, c}, set:{arguments:a, b, default_arguments:a, b}, set_block_signals:{arguments:a, default_arguments:a}, set_custom_multiplayer:{arguments:a, default_arguments:a}, set_deferred:{arguments:a, b, default_arguments:a, b}, set_display_folded:{arguments:a, default_arguments:a}, set_filename:{arguments:a, default_arguments:a}, set_indexed:{arguments:a, b, default_arguments:a, b}, set_message_translation:{arguments:a, default_arguments:a}, set_meta:{arguments:a, b, default_arguments:a, b}, set_name:{arguments:a, default_arguments:a}, set_network_master:{arguments:a, b, default_arguments:a, b = True}, set_owner:{arguments:a, default_arguments:a}, set_pause_mode:{arguments:a, default_arguments:a}, set_physics_process:{arguments:a, default_arguments:a}, set_physics_process_internal:{arguments:a, default_arguments:a}, set_process:{arguments:a, default_arguments:a}, set_process_input:{arguments:a, default_arguments:a}, set_process_internal:{arguments:a, default_arguments:a}, set_process_priority:{arguments:a, default_arguments:a}, set_process_unhandled_input:{arguments:a, default_arguments:a}, set_process_unhandled_key_input:{arguments:a, default_arguments:a}, set_scene_instance_load_placeholder:{arguments:a, default_arguments:a}, set_script:{arguments:a, default_arguments:a}, subtract:{arguments:a, b, default_arguments:a, b}, sum:{arguments:a, default_arguments:a}, to_string:{arguments:, default_arguments:}, tr:{arguments:a, default_arguments:a}, update_configuration_warning:{arguments:, default_arguments:}} is not equal to |Dictionary| {_enter_tree:{arguments:, default_arguments:}, _exit_tree:{arguments:, default_arguments:}, _get:{arguments:a, default_arguments:a}, _get_configuration_warning:{arguments:, default_arguments:}, _get_editor_description:{arguments:, default_arguments:}, _get_import_path:{arguments:, default_arguments:}, _get_property_list:{arguments:, default_arguments:}, _init:{arguments:, default_arguments:}, _input:{arguments:a, default_arguments:a}, _notification:{arguments:a, default_arguments:a}, _physics_process:{arguments:a, default_arguments:a}, _process:{arguments:a, default_arguments:a}, _ready:{arguments:, default_arguments:}, _set:{arguments:a, b, default_arguments:a, b}, _set_editor_description:{arguments:a, default_arguments:a}, _set_import_path:{arguments:a, default_arguments:a}, _to_string:{arguments:, default_arguments:}, _unhandled_input:{arguments:a, default_arguments:a}, _unhandled_key_input:{arguments:a, default_arguments:a}, add:{arguments:a, b, default_arguments:a, b}, add_child:{arguments:a, b, default_arguments:a, b = False}, add_child_below_node:{arguments:a, b, c, default_arguments:a, b, c = False}, add_to_group:{arguments:a, b, default_arguments:a, b = False}, add_user_signal:{arguments:a, b, default_arguments:a, b = []}, call:{arguments:a, default_arguments:a}, call_deferred:{arguments:a, default_arguments:a}, callv:{arguments:a, b, default_arguments:a, b}, can_process:{arguments:, default_arguments:}, can_translate_messages:{arguments:, default_arguments:}, connect:{arguments:a, b, c, d, e, default_arguments:a, b, c, d = [], e = 0}, disconnect:{arguments:a, b, c, default_arguments:a, b, c}, divide:{arguments:a, b, default_arguments:a, b}, duplicate:{arguments:a, default_arguments:a = 15}, emit_signal:{arguments:a, default_arguments:a}, find_node:{arguments:a, b, c, default_arguments:a, b = True, c = True}, find_parent:{arguments:a, default_arguments:a}, free:{arguments:, default_arguments:}, get:{arguments:a, default_arguments:a}, get_child:{arguments:a, default_arguments:a}, get_child_count:{arguments:, default_arguments:}, get_children:{arguments:, default_arguments:}, get_class:{arguments:, default_arguments:}, get_custom_multiplayer:{arguments:, default_arguments:}, get_filename:{arguments:, default_arguments:}, get_groups:{arguments:, default_arguments:}, get_incoming_connections:{arguments:, default_arguments:}, get_index:{arguments:, default_arguments:}, get_indexed:{arguments:a, default_arguments:a}, get_instance_id:{arguments:, default_arguments:}, get_meta:{arguments:a, default_arguments:a}, get_meta_list:{arguments:, default_arguments:}, get_method_list:{arguments:, default_arguments:}, get_multiplayer:{arguments:, default_arguments:}, get_name:{arguments:, default_arguments:}, get_network_master:{arguments:, default_arguments:}, get_node:{arguments:a, default_arguments:a}, get_node_and_resource:{arguments:a, default_arguments:a}, get_node_or_null:{arguments:a, default_arguments:a}, get_owner:{arguments:, default_arguments:}, get_parent:{arguments:, default_arguments:}, get_path:{arguments:, default_arguments:}, get_path_to:{arguments:a, default_arguments:a}, get_pause_mode:{arguments:, default_arguments:}, get_physics_process_delta_time:{arguments:, default_arguments:}, get_position_in_parent:{arguments:, default_arguments:}, get_process_delta_time:{arguments:, default_arguments:}, get_process_priority:{arguments:, default_arguments:}, get_property_list:{arguments:, default_arguments:}, get_scene_instance_load_placeholder:{arguments:, default_arguments:}, get_script:{arguments:, default_arguments:}, get_signal_connection_list:{arguments:a, default_arguments:a}, get_signal_list:{arguments:, default_arguments:}, get_tree:{arguments:, default_arguments:}, get_viewport:{arguments:, default_arguments:}, has_meta:{arguments:a, default_arguments:a}, has_method:{arguments:a, default_arguments:a}, has_node:{arguments:a, default_arguments:a}, has_node_and_resource:{arguments:a, default_arguments:a}, has_signal:{arguments:a, default_arguments:a}, has_user_signal:{arguments:a, default_arguments:a}, is_a_parent_of:{arguments:a, default_arguments:a}, is_blocking_signals:{arguments:, default_arguments:}, is_class:{arguments:a, default_arguments:a}, is_connected:{arguments:a, b, c, default_arguments:a, b, c}, is_displayed_folded:{arguments:, default_arguments:}, is_greater_than:{arguments:a, default_arguments:a}, is_in_group:{arguments:a, default_arguments:a}, is_inside_tree:{arguments:, default_arguments:}, is_network_master:{arguments:, default_arguments:}, is_physics_processing:{arguments:, default_arguments:}, is_physics_processing_internal:{arguments:, default_arguments:}, is_processing:{arguments:, default_arguments:}, is_processing_input:{arguments:, default_arguments:}, is_processing_internal:{arguments:, default_arguments:}, is_processing_unhandled_input:{arguments:, default_arguments:}, is_processing_unhandled_key_input:{arguments:, default_arguments:}, is_queued_for_deletion:{arguments:, default_arguments:}, math_fight:{arguments:, default_arguments:}, move_child:{arguments:a, b, default_arguments:a, b}, multiply:{arguments:a, b, default_arguments:a, b}, notification:{arguments:a, b, default_arguments:a, b = False}, pi:{arguments:, default_arguments:}, print_stray_nodes:{arguments:, default_arguments:}, print_tree:{arguments:, default_arguments:}, print_tree_pretty:{arguments:, default_arguments:}, propagate_call:{arguments:a, b, c, default_arguments:a, b = [], c = False}, propagate_notification:{arguments:a, default_arguments:a}, property_list_changed_notify:{arguments:, default_arguments:}, queue_free:{arguments:, default_arguments:}, raise:{arguments:, default_arguments:}, remove_and_skip:{arguments:, default_arguments:}, remove_child:{arguments:a, default_arguments:a}, remove_from_group:{arguments:a, default_arguments:a}, remove_meta:{arguments:a, default_arguments:a}, replace_by:{arguments:a, b, default_arguments:a, b = False}, request_ready:{arguments:, default_arguments:}, rpc:{arguments:a, default_arguments:a}, rpc_config:{arguments:a, b, default_arguments:a, b}, rpc_id:{arguments:a, b, default_arguments:a, b}, rpc_unreliable:{arguments:a, default_arguments:a}, rpc_unreliable_id:{arguments:a, b, default_arguments:a, b}, rset:{arguments:a, b, default_arguments:a, b}, rset_config:{arguments:a, b, default_arguments:a, b}, rset_id:{arguments:a, b, c, default_arguments:a, b, c}, rset_unreliable:{arguments:a, b, default_arguments:a, b}, rset_unreliable_id:{arguments:a, b, c, default_arguments:a, b, c}, set:{arguments:a, b, default_arguments:a, b}, set_block_signals:{arguments:a, default_arguments:a}, set_custom_multiplayer:{arguments:a, default_arguments:a}, set_deferred:{arguments:a, b, default_arguments:a, b}, set_display_folded:{arguments:a, default_arguments:a}, set_filename:{arguments:a, default_arguments:a}, set_indexed:{arguments:a, b, default_arguments:a, b}, set_message_translation:{arguments:a, default_arguments:a}, set_meta:{arguments:a, b, default_arguments:a, b}, set_name:{arguments:a, default_arguments:a}, set_network_master:{arguments:a, b, default_arguments:a, b = True}, set_owner:{arguments:a, default_arguments:a}, set_pause_mode:{arguments:a, default_arguments:a}, set_physics_process:{arguments:a, default_arguments:a}, set_physics_process_internal:{arguments:a, default_arguments:a}, set_process:{arguments:a, default_arguments:a}, set_process_input:{arguments:a, default_arguments:a}, set_process_internal:{arguments:a, default_arguments:a}, set_process_priority:{arguments:a, default_arguments:a}, set_process_unhandled_input:{arguments:a, default_arguments:a}, set_process_unhandled_key_input:{arguments:a, default_arguments:a}, set_scene_instance_load_placeholder:{arguments:a, default_arguments:a}, set_script:{arguments:a, default_arguments:a}, subtract:{arguments:a, b, default_arguments:a, b}, sum:{arguments:a, default_arguments:a}, to_string:{arguments:, default_arguments:}, tr:{arguments:a, default_arguments:a}, update_configuration_warning:{arguments:, default_arguments:}}",
"context": "Then they do not share resources",
"expected": "|Dictionary| {_enter_tree:{arguments:, default_arguments:}, _exit_tree:{arguments:, default_arguments:}, _get:{arguments:a, default_arguments:a}, _get_configuration_warning:{arguments:, default_arguments:}, _get_editor_description:{arguments:, default_arguments:}, _get_import_path:{arguments:, default_arguments:}, _get_property_list:{arguments:, default_arguments:}, _init:{arguments:, default_arguments:}, _input:{arguments:a, default_arguments:a}, _notification:{arguments:a, default_arguments:a}, _physics_process:{arguments:a, default_arguments:a}, _process:{arguments:a, default_arguments:a}, _ready:{arguments:, default_arguments:}, _set:{arguments:a, b, default_arguments:a, b}, _set_editor_description:{arguments:a, default_arguments:a}, _set_import_path:{arguments:a, default_arguments:a}, _to_string:{arguments:, default_arguments:}, _unhandled_input:{arguments:a, default_arguments:a}, _unhandled_key_input:{arguments:a, default_arguments:a}, add:{arguments:a, b, default_arguments:a, b}, add_child:{arguments:a, b, default_arguments:a, b = False}, add_child_below_node:{arguments:a, b, c, default_arguments:a, b, c = False}, add_to_group:{arguments:a, b, default_arguments:a, b = False}, add_user_signal:{arguments:a, b, default_arguments:a, b = []}, call:{arguments:a, default_arguments:a}, call_deferred:{arguments:a, default_arguments:a}, callv:{arguments:a, b, default_arguments:a, b}, can_process:{arguments:, default_arguments:}, can_translate_messages:{arguments:, default_arguments:}, connect:{arguments:a, b, c, d, e, default_arguments:a, b, c, d = [], e = 0}, disconnect:{arguments:a, b, c, default_arguments:a, b, c}, divide:{arguments:a, b, default_arguments:a, b}, duplicate:{arguments:a, default_arguments:a = 15}, emit_signal:{arguments:a, default_arguments:a}, find_node:{arguments:a, b, c, default_arguments:a, b = True, c = True}, find_parent:{arguments:a, default_arguments:a}, free:{arguments:, default_arguments:}, get:{arguments:a, default_arguments:a}, get_child:{arguments:a, default_arguments:a}, get_child_count:{arguments:, default_arguments:}, get_children:{arguments:, default_arguments:}, get_class:{arguments:, default_arguments:}, get_custom_multiplayer:{arguments:, default_arguments:}, get_filename:{arguments:, default_arguments:}, get_groups:{arguments:, default_arguments:}, get_incoming_connections:{arguments:, default_arguments:}, get_index:{arguments:, default_arguments:}, get_indexed:{arguments:a, default_arguments:a}, get_instance_id:{arguments:, default_arguments:}, get_meta:{arguments:a, default_arguments:a}, get_meta_list:{arguments:, default_arguments:}, get_method_list:{arguments:, default_arguments:}, get_multiplayer:{arguments:, default_arguments:}, get_name:{arguments:, default_arguments:}, get_network_master:{arguments:, default_arguments:}, get_node:{arguments:a, default_arguments:a}, get_node_and_resource:{arguments:a, default_arguments:a}, get_node_or_null:{arguments:a, default_arguments:a}, get_owner:{arguments:, default_arguments:}, get_parent:{arguments:, default_arguments:}, get_path:{arguments:, default_arguments:}, get_path_to:{arguments:a, default_arguments:a}, get_pause_mode:{arguments:, default_arguments:}, get_physics_process_delta_time:{arguments:, default_arguments:}, get_position_in_parent:{arguments:, default_arguments:}, get_process_delta_time:{arguments:, default_arguments:}, get_process_priority:{arguments:, default_arguments:}, get_property_list:{arguments:, default_arguments:}, get_scene_instance_load_placeholder:{arguments:, default_arguments:}, get_script:{arguments:, default_arguments:}, get_signal_connection_list:{arguments:a, default_arguments:a}, get_signal_list:{arguments:, default_arguments:}, get_tree:{arguments:, default_arguments:}, get_viewport:{arguments:, default_arguments:}, has_meta:{arguments:a, default_arguments:a}, has_method:{arguments:a, default_arguments:a}, has_node:{arguments:a, default_arguments:a}, has_node_and_resource:{arguments:a, default_arguments:a}, has_signal:{arguments:a, default_arguments:a}, has_user_signal:{arguments:a, default_arguments:a}, is_a_parent_of:{arguments:a, default_arguments:a}, is_blocking_signals:{arguments:, default_arguments:}, is_class:{arguments:a, default_arguments:a}, is_connected:{arguments:a, b, c, default_arguments:a, b, c}, is_displayed_folded:{arguments:, default_arguments:}, is_greater_than:{arguments:a, default_arguments:a}, is_in_group:{arguments:a, default_arguments:a}, is_inside_tree:{arguments:, default_arguments:}, is_network_master:{arguments:, default_arguments:}, is_physics_processing:{arguments:, default_arguments:}, is_physics_processing_internal:{arguments:, default_arguments:}, is_processing:{arguments:, default_arguments:}, is_processing_input:{arguments:, default_arguments:}, is_processing_internal:{arguments:, default_arguments:}, is_processing_unhandled_input:{arguments:, default_arguments:}, is_processing_unhandled_key_input:{arguments:, default_arguments:}, is_queued_for_deletion:{arguments:, default_arguments:}, math_fight:{arguments:, default_arguments:}, move_child:{arguments:a, b, default_arguments:a, b}, multiply:{arguments:a, b, default_arguments:a, b}, notification:{arguments:a, b, default_arguments:a, b = False}, pi:{arguments:, default_arguments:}, print_stray_nodes:{arguments:, default_arguments:}, print_tree:{arguments:, default_arguments:}, print_tree_pretty:{arguments:, default_arguments:}, propagate_call:{arguments:a, b, c, default_arguments:a, b = [], c = False}, propagate_notification:{arguments:a, default_arguments:a}, property_list_changed_notify:{arguments:, default_arguments:}, queue_free:{arguments:, default_arguments:}, raise:{arguments:, default_arguments:}, remove_and_skip:{arguments:, default_arguments:}, remove_child:{arguments:a, default_arguments:a}, remove_from_group:{arguments:a, default_arguments:a}, remove_meta:{arguments:a, default_arguments:a}, replace_by:{arguments:a, b, default_arguments:a, b = False}, request_ready:{arguments:, default_arguments:}, rpc:{arguments:a, default_arguments:a}, rpc_config:{arguments:a, b, default_arguments:a, b}, rpc_id:{arguments:a, b, default_arguments:a, b}, rpc_unreliable:{arguments:a, default_arguments:a}, rpc_unreliable_id:{arguments:a, b, default_arguments:a, b}, rset:{arguments:a, b, default_arguments:a, b}, rset_config:{arguments:a, b, default_arguments:a, b}, rset_id:{arguments:a, b, c, default_arguments:a, b, c}, rset_unreliable:{arguments:a, b, default_arguments:a, b}, rset_unreliable_id:{arguments:a, b, c, default_arguments:a, b, c}, set:{arguments:a, b, default_arguments:a, b}, set_block_signals:{arguments:a, default_arguments:a}, set_custom_multiplayer:{arguments:a, default_arguments:a}, set_deferred:{arguments:a, b, default_arguments:a, b}, set_display_folded:{arguments:a, default_arguments:a}, set_filename:{arguments:a, default_arguments:a}, set_indexed:{arguments:a, b, default_arguments:a, b}, set_message_translation:{arguments:a, default_arguments:a}, set_meta:{arguments:a, b, default_arguments:a, b}, set_name:{arguments:a, default_arguments:a}, set_network_master:{arguments:a, b, default_arguments:a, b = True}, set_owner:{arguments:a, default_arguments:a}, set_pause_mode:{arguments:a, default_arguments:a}, set_physics_process:{arguments:a, default_arguments:a}, set_physics_process_internal:{arguments:a, default_arguments:a}, set_process:{arguments:a, default_arguments:a}, set_process_input:{arguments:a, default_arguments:a}, set_process_internal:{arguments:a, default_arguments:a}, set_process_priority:{arguments:a, default_arguments:a}, set_process_unhandled_input:{arguments:a, default_arguments:a}, set_process_unhandled_key_input:{arguments:a, default_arguments:a}, set_scene_instance_load_placeholder:{arguments:a, default_arguments:a}, set_script:{arguments:a, default_arguments:a}, subtract:{arguments:a, b, default_arguments:a, b}, sum:{arguments:a, default_arguments:a}, to_string:{arguments:, default_arguments:}, tr:{arguments:a, default_arguments:a}, update_configuration_warning:{arguments:, default_arguments:}} != |Dictionary| {_enter_tree:{arguments:, default_arguments:}, _exit_tree:{arguments:, default_arguments:}, _get:{arguments:a, default_arguments:a}, _get_configuration_warning:{arguments:, default_arguments:}, _get_editor_description:{arguments:, default_arguments:}, _get_import_path:{arguments:, default_arguments:}, _get_property_list:{arguments:, default_arguments:}, _init:{arguments:, default_arguments:}, _input:{arguments:a, default_arguments:a}, _notification:{arguments:a, default_arguments:a}, _physics_process:{arguments:a, default_arguments:a}, _process:{arguments:a, default_arguments:a}, _ready:{arguments:, default_arguments:}, _set:{arguments:a, b, default_arguments:a, b}, _set_editor_description:{arguments:a, default_arguments:a}, _set_import_path:{arguments:a, default_arguments:a}, _to_string:{arguments:, default_arguments:}, _unhandled_input:{arguments:a, default_arguments:a}, _unhandled_key_input:{arguments:a, default_arguments:a}, add:{arguments:a, b, default_arguments:a, b}, add_child:{arguments:a, b, default_arguments:a, b = False}, add_child_below_node:{arguments:a, b, c, default_arguments:a, b, c = False}, add_to_group:{arguments:a, b, default_arguments:a, b = False}, add_user_signal:{arguments:a, b, default_arguments:a, b = []}, call:{arguments:a, default_arguments:a}, call_deferred:{arguments:a, default_arguments:a}, callv:{arguments:a, b, default_arguments:a, b}, can_process:{arguments:, default_arguments:}, can_translate_messages:{arguments:, default_arguments:}, connect:{arguments:a, b, c, d, e, default_arguments:a, b, c, d = [], e = 0}, disconnect:{arguments:a, b, c, default_arguments:a, b, c}, divide:{arguments:a, b, default_arguments:a, b}, duplicate:{arguments:a, default_arguments:a = 15}, emit_signal:{arguments:a, default_arguments:a}, find_node:{arguments:a, b, c, default_arguments:a, b = True, c = True}, find_parent:{arguments:a, default_arguments:a}, free:{arguments:, default_arguments:}, get:{arguments:a, default_arguments:a}, get_child:{arguments:a, default_arguments:a}, get_child_count:{arguments:, default_arguments:}, get_children:{arguments:, default_arguments:}, get_class:{arguments:, default_arguments:}, get_custom_multiplayer:{arguments:, default_arguments:}, get_filename:{arguments:, default_arguments:}, get_groups:{arguments:, default_arguments:}, get_incoming_connections:{arguments:, default_arguments:}, get_index:{arguments:, default_arguments:}, get_indexed:{arguments:a, default_arguments:a}, get_instance_id:{arguments:, default_arguments:}, get_meta:{arguments:a, default_arguments:a}, get_meta_list:{arguments:, default_arguments:}, get_method_list:{arguments:, default_arguments:}, get_multiplayer:{arguments:, default_arguments:}, get_name:{arguments:, default_arguments:}, get_network_master:{arguments:, default_arguments:}, get_node:{arguments:a, default_arguments:a}, get_node_and_resource:{arguments:a, default_arguments:a}, get_node_or_null:{arguments:a, default_arguments:a}, get_owner:{arguments:, default_arguments:}, get_parent:{arguments:, default_arguments:}, get_path:{arguments:, default_arguments:}, get_path_to:{arguments:a, default_arguments:a}, get_pause_mode:{arguments:, default_arguments:}, get_physics_process_delta_time:{arguments:, default_arguments:}, get_position_in_parent:{arguments:, default_arguments:}, get_process_delta_time:{arguments:, default_arguments:}, get_process_priority:{arguments:, default_arguments:}, get_property_list:{arguments:, default_arguments:}, get_scene_instance_load_placeholder:{arguments:, default_arguments:}, get_script:{arguments:, default_arguments:}, get_signal_connection_list:{arguments:a, default_arguments:a}, get_signal_list:{arguments:, default_arguments:}, get_tree:{arguments:, default_arguments:}, get_viewport:{arguments:, default_arguments:}, has_meta:{arguments:a, default_arguments:a}, has_method:{arguments:a, default_arguments:a}, has_node:{arguments:a, default_arguments:a}, has_node_and_resource:{arguments:a, default_arguments:a}, has_signal:{arguments:a, default_arguments:a}, has_user_signal:{arguments:a, default_arguments:a}, is_a_parent_of:{arguments:a, default_arguments:a}, is_blocking_signals:{arguments:, default_arguments:}, is_class:{arguments:a, default_arguments:a}, is_connected:{arguments:a, b, c, default_arguments:a, b, c}, is_displayed_folded:{arguments:, default_arguments:}, is_greater_than:{arguments:a, default_arguments:a}, is_in_group:{arguments:a, default_arguments:a}, is_inside_tree:{arguments:, default_arguments:}, is_network_master:{arguments:, default_arguments:}, is_physics_processing:{arguments:, default_arguments:}, is_physics_processing_internal:{arguments:, default_arguments:}, is_processing:{arguments:, default_arguments:}, is_processing_input:{arguments:, default_arguments:}, is_processing_internal:{arguments:, default_arguments:}, is_processing_unhandled_input:{arguments:, default_arguments:}, is_processing_unhandled_key_input:{arguments:, default_arguments:}, is_queued_for_deletion:{arguments:, default_arguments:}, math_fight:{arguments:, default_arguments:}, move_child:{arguments:a, b, default_arguments:a, b}, multiply:{arguments:a, b, default_arguments:a, b}, notification:{arguments:a, b, default_arguments:a, b = False}, pi:{arguments:, default_arguments:}, print_stray_nodes:{arguments:, default_arguments:}, print_tree:{arguments:, default_arguments:}, print_tree_pretty:{arguments:, default_arguments:}, propagate_call:{arguments:a, b, c, default_arguments:a, b = [], c = False}, propagate_notification:{arguments:a, default_arguments:a}, property_list_changed_notify:{arguments:, default_arguments:}, queue_free:{arguments:, default_arguments:}, raise:{arguments:, default_arguments:}, remove_and_skip:{arguments:, default_arguments:}, remove_child:{arguments:a, default_arguments:a}, remove_from_group:{arguments:a, default_arguments:a}, remove_meta:{arguments:a, default_arguments:a}, replace_by:{arguments:a, b, default_arguments:a, b = False}, request_ready:{arguments:, default_arguments:}, rpc:{arguments:a, default_arguments:a}, rpc_config:{arguments:a, b, default_arguments:a, b}, rpc_id:{arguments:a, b, default_arguments:a, b}, rpc_unreliable:{arguments:a, default_arguments:a}, rpc_unreliable_id:{arguments:a, b, default_arguments:a, b}, rset:{arguments:a, b, default_arguments:a, b}, rset_config:{arguments:a, b, default_arguments:a, b}, rset_id:{arguments:a, b, c, default_arguments:a, b, c}, rset_unreliable:{arguments:a, b, default_arguments:a, b}, rset_unreliable_id:{arguments:a, b, c, default_arguments:a, b, c}, set:{arguments:a, b, default_arguments:a, b}, set_block_signals:{arguments:a, default_arguments:a}, set_custom_multiplayer:{arguments:a, default_arguments:a}, set_deferred:{arguments:a, b, default_arguments:a, b}, set_display_folded:{arguments:a, default_arguments:a}, set_filename:{arguments:a, default_arguments:a}, set_indexed:{arguments:a, b, default_arguments:a, b}, set_message_translation:{arguments:a, default_arguments:a}, set_meta:{arguments:a, b, default_arguments:a, b}, set_name:{arguments:a, default_arguments:a}, set_network_master:{arguments:a, b, default_arguments:a, b = True}, set_owner:{arguments:a, default_arguments:a}, set_pause_mode:{arguments:a, default_arguments:a}, set_physics_process:{arguments:a, default_arguments:a}, set_physics_process_internal:{arguments:a, default_arguments:a}, set_process:{arguments:a, default_arguments:a}, set_process_input:{arguments:a, default_arguments:a}, set_process_internal:{arguments:a, default_arguments:a}, set_process_priority:{arguments:a, default_arguments:a}, set_process_unhandled_input:{arguments:a, default_arguments:a}, set_process_unhandled_key_input:{arguments:a, default_arguments:a}, set_scene_instance_load_placeholder:{arguments:a, default_arguments:a}, set_script:{arguments:a, default_arguments:a}, subtract:{arguments:a, b, default_arguments:a, b}, sum:{arguments:a, default_arguments:a}, to_string:{arguments:, default_arguments:}, tr:{arguments:a, default_arguments:a}, update_configuration_warning:{arguments:, default_arguments:}}",
"success": true
} ],
"context": "When we create two of it for the same script",
"fullname": "test_When_we_create_two_of_it_for_the_same_script",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 3,
"path": "res://tests/integration/script_director.test.gd",
"source": {
"containers": [ "res://tests/integration", "res://tests" ],
"method": "",
"path": "res://tests/integration/script_director.test.gd",
"tags": [  ],
"test": ExtResource( 13 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 3
}, {
"context": "Given is_on_floor",
"methods": [ {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then it can be stubbed",
"expected": "|bool| True == true",
"success": true
} ],
"context": "From a user-defined script",
"fullname": "test_stubbing_is_on_floor_method_from_user_defined_class",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then it can be stubbed",
"expected": "|bool| True == true",
"success": true
} ],
"context": "From a built-in KinematicBody2D2",
"fullname": "test_stubbing_is_on_floor_method_from_builtin_class2",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then it can be stubbed",
"expected": "|bool| True == true",
"success": true
} ],
"context": "From a child node of a scene without scripts",
"fullname": "test_stubbing_is_on_floor_as_child_node_with_no_script",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 3,
"path": "res://tests/integration/on_floor.test.gd",
"source": {
"containers": [ "res://tests/integration", "res://tests" ],
"method": "",
"path": "res://tests/integration/on_floor.test.gd",
"tags": [  ],
"test": ExtResource( 5 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 3
}, {
"context": "Given a Boolean Assertion",
"methods": [ {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then it passes",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When calling asserts.is_true(true)",
"fullname": "test_when_calling_asserts_is_true",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| False == false",
"context": "Then it passes",
"expected": "|bool| False == false",
"success": true
} ],
"context": "When calling asserts.is_false(false)",
"fullname": "test_when_calling_asserts_is_false",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| True != false",
"context": "",
"expected": "|bool| True == false",
"success": false
} ],
"context": " intentional failure",
"fullname": "test_intentional_failure",
"passed": 0,
"success": false,
"time": 0.0,
"total": 1
} ],
"passed": 2,
"path": "res://tests/unit/boolean.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/boolean.test.gd",
"tags": [  ],
"test": ExtResource( 11 ),
"yield_time": 0.0
},
"success": false,
"time_taken": 0.0,
"total": 3
}, {
"context": "Given a Scene Director",
"methods": [ {
"assertions": [ {
"actual": "|Dictionary| {.:[Reference:1411], A:[Reference:1412], A/B:[Reference:1414], C:[Reference:1413], C/D:[Reference:1415]} is not equal to |Dictionary| {.:[Reference:1445], A:[Reference:1446], A/B:[Reference:1448], C:[Reference:1447], C/D:[Reference:1449]}",
"context": "Then they do not share resources",
"expected": "|Dictionary| {.:[Reference:1411], A:[Reference:1412], A/B:[Reference:1414], C:[Reference:1413], C/D:[Reference:1415]} != |Dictionary| {.:[Reference:1445], A:[Reference:1446], A/B:[Reference:1448], C:[Reference:1447], C/D:[Reference:1449]}",
"success": true
} ],
"context": "When we create two of it for the same scene",
"fullname": "test_When_we_create_two_of_it_for_the_same_scene",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 9999 is equal to |int| 9999",
"context": "Then we get the stubbed return value",
"expected": "|int| 9999 is equal to |int| 9999",
"success": true
} ],
"context": "When we call a method from the root node that we stubbed",
"fullname": "test_When_we_call_a_method_from_the_root_node_that_we_stubbed",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 999 is equal to |int| 999",
"context": "Then we get the stubbed return value",
"expected": "|int| 999 is equal to |int| 999",
"success": true
} ],
"context": "When we call a method from a child node that we stubbed",
"fullname": "test_When_we_call_a_method_from_a_child_node_that_we_stubbed",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 99 is equal to |int| 99",
"context": "Then we get the stubbed return value",
"expected": "|int| 99 is equal to |int| 99",
"success": true
} ],
"context": "When we call a method from a grandchild node that we stubbed",
"fullname": "test_When_we_call_a_method_from_a_grandchild_node_that_we_stubbed",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|NodePath| A is equal to |NodePath| A",
"context": "We have the correct NodePath Set",
"expected": "|NodePath| A is equal to |NodePath| A",
"success": true
} ],
"context": "When we add it to the tree it runs",
"fullname": "test_When_we_add_it_to_the_tree_it_runs",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 5,
"path": "res://tests/integration/scene_director.test.gd",
"source": {
"containers": [ "res://tests/integration", "res://tests" ],
"method": "",
"path": "res://tests/integration/scene_director.test.gd",
"tags": [  ],
"test": ExtResource( 4 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 5
}, {
"context": "Given A File Assertion",
"methods": [ {
"assertions": [ {
"actual": "res://somefile.gd does not exist",
"context": "Then it passes",
"expected": "res://somefile.gd does not exist",
"success": true
} ],
"context": "When calling asserts.file_does_not_exist when there is no file",
"fullname": "test_when_calling_file_does_not_exist_when_there_is_no_file",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": " does not exist",
"context": "Then it passes",
"expected": " does not exist",
"success": true
} ],
"context": "When calling asserts file does not exist when path is empty",
"fullname": "test_when_calling_file_does_not_exist_when_path_is_empty",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "res://tests/unit/file.test.gd exists",
"context": "Then it passes",
"expected": "res://tests/unit/file.test.gd exists",
"success": true
} ],
"context": "When calling asserts.file_exists when the file is this suite",
"fullname": "test_when_calling_file_exists_when_file_is_self",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 3,
"path": "res://tests/unit/file.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/file.test.gd",
"tags": [  ],
"test": ExtResource( 3 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 3
}, {
"context": "Given a Null Assertion",
"methods": [ {
"assertions": [ {
"actual": "|null| Null == null",
"context": "Then it passes",
"expected": "|null| Null == null",
"success": true
} ],
"context": "When calling asserts.is_null(null)",
"fullname": "test_when_calling_null_is_null",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|Object| [Node:1704] != null",
"context": "Then it passes",
"expected": "|Object| [Node:1704] != null",
"success": true
} ],
"context": "When calling Node is not null",
"fullname": "test_when_calling_node_is_not_null",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|Object| [Deleted Object] == null",
"context": "A Freed Node is null in Engine 3.2.2 or greater",
"expected": "|Object| [Deleted Object] == null",
"success": true
} ],
"context": "When calling freed object is null",
"fullname": "test_when_calling_freed_object_is_not_null",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 3,
"path": "res://tests/unit/null.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/null.test.gd",
"tags": [  ],
"test": ExtResource( 12 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 3
}, {
"context": "Given an Equality Assertion",
"methods": [ {
"assertions": [ {
"actual": "|int| 1 is equal to |int| 1",
"context": "Then it passes",
"expected": "|int| 1 is equal to |int| 1",
"success": true
} ],
"context": "When calling asserts.is_equal(1, 1)",
"fullname": "test_when_calling_is_equal",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 1 is less than |int| 2",
"context": "Then it passes",
"expected": "|int| 1 is less than |int| 2",
"success": true
} ],
"context": "When calling asserts.is_less_than(2, 1)",
"fullname": "test_when_calling_is_less_than",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 2 is equal or greater |int| 1",
"context": "Then it passes",
"expected": "|int| 2 is equal or greater |int| 1",
"success": true
} ],
"context": "When calling asserts.is_equal_or_greater_than(2, 1)",
"fullname": "test_when_calling_is_equal_or_greater_than",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 2 is greater than |int| 1",
"context": "Then it passes",
"expected": "|int| 2 is greater than |int| 1",
"success": true
} ],
"context": "When calling asserts.is_greater_than(2, 1)",
"fullname": "test_when_calling_is_greater_than",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 5 is not equal to |int| 6",
"context": "Then it passes",
"expected": "|int| 5 != |int| 6",
"success": true
} ],
"context": "When callign asserts.is_not_equal(5, 6)",
"fullname": "test_when_calling_is_not_equal",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 1 is equal or less than |int| 1",
"context": "Then it passes!",
"expected": "|int| 1 is equal or less than |int| 1",
"success": true
} ],
"context": "When calling asserts.is_equal_or_less_than(1, 1)",
"fullname": "test_when_calling_is_equal_or_less_than_with_equal_values",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 1 is equal or greater |int| 1",
"context": "Then it passes",
"expected": "|int| 1 is equal or greater |int| 1",
"success": true
} ],
"context": "When calling asserts.is_equal_or_greater_than(1, 1)",
"fullname": "test_when_calling_is_equal_or_greater_than_with_equal_values",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 7,
"path": "res://tests/unit/equality.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/equality.test.gd",
"tags": [  ],
"test": ExtResource( 8 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 7
}, {
"context": "Given A Range Assertion",
"methods": [ {
"assertions": [ {
"actual": "10 is not in range(0, 10)",
"context": "Then it passes",
"expected": "10 is not in range(0, 10)",
"success": true
} ],
"context": "When calling is (10) not in range (in range(0, 10)",
"fullname": "test_when_calling_is_not_in_range",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "0 is in range(0, 10)",
"context": "Then it passes",
"expected": "0 is in range(0, 10)",
"success": true
} ],
"context": "When calling is (0) in range(0, 10)",
"fullname": "test_when_calling_is_in_range",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 2,
"path": "res://tests/unit/range.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/range.test.gd",
"tags": [  ],
"test": ExtResource( 15 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 2
}, {
"context": "Given the Addition Operator",
"methods": [ {
"assertions": [ {
"actual": "|int| 0 is equal to |int| 0",
"context": "",
"expected": "|int| 0 is equal to |int| 0",
"success": true
} ],
"context": "When we subtract 2 from 2 we get 0",
"fullname": "test_subtract",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 2 is equal to |int| 2",
"context": "",
"expected": "|int| 2 is equal to |int| 2",
"success": true
} ],
"context": "When we subtract 5 from 3 we get 2",
"fullname": "test_subtract",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 1 is equal to |int| 1",
"context": "",
"expected": "|int| 1 is equal to |int| 1",
"success": true
} ],
"context": "When we subtract 7 from 6 we get 1",
"fullname": "test_subtract",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 4 is equal to |int| 4",
"context": "",
"expected": "|int| 4 is equal to |int| 4",
"success": true
} ],
"context": "When we add 2 to 2 we get 4",
"fullname": "test_add",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 8 is equal to |int| 8",
"context": "",
"expected": "|int| 8 is equal to |int| 8",
"success": true
} ],
"context": "When we add 5 to 3 we get 8",
"fullname": "test_add",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 13 is equal to |int| 13",
"context": "",
"expected": "|int| 13 is equal to |int| 13",
"success": true
} ],
"context": "When we add 7 to 6 we get 13",
"fullname": "test_add",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 6,
"path": "res://tests/unit/parameters.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/parameters.test.gd",
"tags": [  ],
"test": ExtResource( 16 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 6
}, {
"context": "Dummy Passing Test",
"methods": [ {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Passing!",
"expected": "|bool| True == true",
"success": true
} ],
"context": "This method passes",
"fullname": "test_this_method_passes",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 1,
"path": "res://tests/unit/suite.test.gd.DummyOne",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/suite.test.gd.DummyOne",
"tags": [  ],
"test": SubResource( 15 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 1
}, {
"context": "Dummy Test 2",
"methods": [ {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Passing!",
"expected": "|bool| True == true",
"success": true
} ],
"context": "This method passes",
"fullname": "test_this_method_passes",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 1,
"path": "res://tests/unit/suite.test.gd.DummyTwo",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/suite.test.gd.DummyTwo",
"tags": [  ],
"test": SubResource( 16 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 1
}, {
"context": "Given a Test Double",
"methods": [ {
"assertions": [ {
"actual": "|int| 9999 is equal to |int| 9999",
"context": "Then it returns the corresponding value when the pattern matches",
"expected": "|int| 9999 is equal to |int| 9999",
"success": true
} ],
"context": "When we call a method that was stubbed with an argument pattern that includes a non-primitive object",
"fullname": "test_When_we_call_a_method_that_was_stubbed_with_an_argument_pattern_that_includes_a_non_primitive_object",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 4 is equal to |int| 4",
"context": "Then we get the correct result",
"expected": "|int| 4 is equal to |int| 4",
"success": true
} ],
"context": "When we call an add(x, y) method that we haven't directed",
"fullname": "test_When_we_call_an_add_method_that_we_have_not_directed",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|null| Null == null",
"context": "Then we get the stubbed value back",
"expected": "|null| Null == null",
"success": true
} ],
"context": "When we stub a method of a doubled inner class",
"fullname": "test_When_we_stub_a_method_of_a_double_inner_class",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|null| Null == null",
"context": "Then we get null",
"expected": "|null| Null == null",
"success": true
} ],
"context": "When we call a method that we have dummied",
"fullname": "test_When_we_call_a_method_that_we_have_dummied",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "add was called",
"context": "Then we can see that it was called at least once",
"expected": "add was called",
"success": true
} ],
"context": "When we call a method that we are spying on",
"fullname": "test_When_we_call_a_method_that_we_are_spying_on",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|String| Jackie is equal to |String| Jackie",
"context": "Then we can double the object successfully",
"expected": "|String| Jackie is equal to |String| Jackie",
"success": true
} ],
"context": "When we pass in dependecies on double",
"fullname": "test_When_we_pass_in_deps_on_double",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|String| Jackie is equal to |String| Jackie",
"context": "Then we can double the object successfully",
"expected": "|String| Jackie is equal to |String| Jackie",
"success": true
} ],
"context": "When we pass in dependecies on direct",
"fullname": "test_When_we_pass_in_deps_on_direct",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 9999 is equal to |int| 9999",
"context": "Then it returns the corresponding value when the partial pattern matches",
"expected": "|int| 9999 is equal to |int| 9999",
"success": true
} ],
"context": "When we call a method that was stubbed with a partial (ie using any()) argument pattern",
"fullname": "test_When_we_call_a_method_that_was_stubbed_with_a_partial_argument_pattern",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|Array| [10, 5] is equal to |Array| [10, 5]",
"context": "Then it returns a value",
"expected": "|Array| [10, 5] is equal to |Array| [10, 5]",
"success": true
} ],
"context": "When we pass an Object with a call_func function",
"fullname": "test_When_we_pass_an_object_with_callfunc_method_as_a_subcall",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 99 is equal to |int| 99",
"context": "Then it returns a value",
"expected": "|int| 99 is equal to |int| 99",
"success": true
} ],
"context": "When we pass a funcref as a subcall that returns",
"fullname": "test_When_we_pass_a_funcref_as_a_subcall_that_returns_a_value",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|Object| [Node:1756] is equal to |Object| [Node:1756]",
"context": "Then it returns that same node",
"expected": "|Object| [Node:1756] is equal to |Object| [Node:1756]",
"success": true
} ],
"context": "When we call a method that we have stubbed to return a node",
"fullname": "test_When_we_call_a_method_that_we_have_stubbed_to_return_a_node",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "method: add was called with arguments: [10, 10]",
"context": "Then we can see that it was called with those arguments",
"expected": "method: add was called with arguments: [10, 10]",
"success": true
} ],
"context": "When we pass arguments to a method call that we are spying on",
"fullname": "test_When_we_pass_arguments_to_a_method_call_that_we_are_spying_on",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 100 is equal to |int| 100",
"context": "Then it returns the default stubbed value when the arguments don't match any pattern",
"expected": "|int| 100 is equal to |int| 100",
"success": true
}, {
"actual": "|int| 1000 is equal to |int| 1000",
"context": "Then it returns the the corresponding value to the pattern the arguments matched",
"expected": "|int| 1000 is equal to |int| 1000",
"success": true
} ],
"context": "When we call a method that was stubbed to return different values based on argument patterns",
"fullname": "test_When_we_call_a_method_that_was_stubbed_to_return_different_values_based_on_argument_patterns",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|float| 6.283185 is equal to |float| 6.283185",
"context": "Then we can call the static methods of that inner double",
"expected": "|float| 6.283185 is equal to |float| 6.283185",
"success": true
} ],
"context": "When we add an doubled inner class to it",
"fullname": "test_When_we_add_a_doubled_inner_class_to_it",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| True is equal to |bool| True",
"context": "Then we can call it",
"expected": "|bool| True is equal to |bool| True",
"success": true
} ],
"context": "When we stubbed a keyworded method by passing in the correct keyword",
"fullname": "test_When_we_stubbed_a_keyword_method_by_passing_in_the_correct_keyword",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "(1, 1) is builtin: Vector2",
"context": "Then we can call methods on it",
"expected": "(1, 1) is builtin: Vector2",
"success": true
} ],
"context": "When we double an inner class",
"fullname": "test_When_we_double_an_inner_class",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 99 is equal to |int| 99",
"context": "Then it affects the state of the double",
"expected": "|int| 99 is equal to |int| 99",
"success": true
} ],
"context": "When we pass a funcref as a subcall",
"fullname": "test_When_we_pass_a_funcref_as_a_subcall",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then it returns true",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we call a method that we have stubbed to return true",
"fullname": "test_When_we_call_a_method_that_we_have_stubbed_to_return_true",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 4 is equal to |int| 4",
"context": "Then it calls its super implementation by default",
"expected": "|int| 4 is equal to |int| 4",
"success": true
}, {
"actual": "|int| 9999 is equal to |int| 9999",
"context": "Then it does not call its super implementation when arguments patterns match a different return value",
"expected": "|int| 9999 is equal to |int| 9999",
"success": true
} ],
"context": "When we call a method that we stubbed to call its super implementation by default",
"fullname": "test_When_we_call_a_method_that_we_stubbed_to_call_its_super_implementation_by_default",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
} ],
"passed": 19,
"path": "res://tests/integration/test_double.test.gd",
"source": {
"containers": [ "res://tests/integration", "res://tests" ],
"method": "",
"path": "res://tests/integration/test_double.test.gd",
"tags": [  ],
"test": ExtResource( 14 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 19
}, {
"context": "Given a String Assertion",
"methods": [ {
"assertions": [ {
"actual": "lorem impsum begins with lorem",
"context": "Then it passes",
"expected": "lorem impsum begins with lorem",
"success": true
} ],
"context": "When calling asserts.string_begins_with('lorem', 'lorem impsum')",
"fullname": "test_when_calling_string_begins_with",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "lorem impsum ends with impsum",
"context": "Then it passes",
"expected": "lorem impsum ends with impsum",
"success": true
} ],
"context": "When calling asserts.string_ends_with('impsum', 'lorem impsum')",
"fullname": "test_when_calling_string_ends_with",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "impsum does not contain beem im",
"context": "Then it passes",
"expected": "impsum does not contain beem im",
"success": true
} ],
"context": "When calling asserts.string_does_not_contain('em im', 'impsum')",
"fullname": "test_when_calling_string_does_not_contain",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "impsum does not begin with bleh lorem",
"context": "Then it passes",
"expected": "impsum does not begin with bleh lorem",
"success": true
} ],
"context": "When calling asserts.string_does_not_begin_with('lorem', 'impsum')",
"fullname": "test_when_calling_string_does_not_begin_with",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "lorem impsum contains em im",
"context": "Then it passes",
"expected": "lorem impsum contains em im",
"success": true
} ],
"context": "When calling asserts.string_contains('em im', 'lorem impsum')",
"fullname": "test_when_calling_string_contains",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "impsum does not end with lorem",
"context": "Then it passes",
"expected": "impsum does not end with lorem",
"success": true
} ],
"context": "When calling asserts.string_does_not_end_with('lorem', 'impsum')",
"fullname": "test_when_calling_string_does_not_end_with",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 6,
"path": "res://tests/unit/string.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/string.test.gd",
"tags": [  ],
"test": ExtResource( 9 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 6
}, {
"context": "Given a Test Script",
"methods": [ {
"assertions": [ {
"actual": "|bool| True == true",
"context": "",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|int| 2 is equal to |int| 2",
"context": "",
"expected": "|int| 2 is equal to |int| 2",
"success": true
} ],
"context": " when we omit context we can see expected and got under method",
"fullname": "test_when_we_omit_context_we_can_see_expected_and_got_under_method",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "if the test didn't break this works",
"expected": "|bool| True == true",
"success": true
} ],
"context": " we can omit describe",
"fullname": "test_we_can_omit_describe",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 10 is greater than |int| 1",
"context": "We get an array of multiple values back",
"expected": "|int| 10 is greater than |int| 1",
"success": true
}, {
"actual": "|int| 0 is not equal to |int| 9",
"context": "With different values",
"expected": "|int| 0 != |int| 9",
"success": true
}, {
"actual": "|int| 10 is greater than |int| 1",
"context": "And we can track multiple properties",
"expected": "|int| 10 is greater than |int| 1",
"success": true
} ],
"context": "When we record properties",
"fullname": "test_we_can_record_properties",
"passed": 3,
"success": true,
"time": 0.0,
"total": 3
} ],
"passed": 3,
"path": "res://tests/unit/test.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/test.test.gd",
"tags": [  ],
"test": ExtResource( 19 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 3
}, {
"context": "Given an Object Assertion",
"methods": [ {
"assertions": [ {
"actual": "[Node:1720] is not freed",
"context": "Then it passes",
"expected": "[Node:1720] is not freed",
"success": true
} ],
"context": "When calling asserts.is_not_freed(unfreed_object)",
"fullname": "test_when_calling_unfreed_object_is_not_freed",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is freed from memory",
"context": "Then it passes",
"expected": "Null is freed from memory",
"success": true
} ],
"context": "When calling asserts.is_freed(freed_object",
"fullname": "test_when_calling_freed_object_is_freed",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:1751] is queued for deletion",
"context": "Then it passes",
"expected": "[Node:1751] is queued for deletion",
"success": true
} ],
"context": "When calling asserts.object_is_queued for deletion after calling queue_free",
"fullname": "test_when_calling_obj_is_queued_for_deletion_after_calling_queue_free",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:1696] has method: title",
"context": "Then it passes",
"expected": "[Node:1696] has method: title",
"success": true
} ],
"context": "When calling has_method('title')",
"fullname": "test_when_calling_has_method_title",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:1777] is not blocking signals",
"context": "Then it passes",
"expected": "[Node:1777] is not blocking signals",
"success": true
} ],
"context": "When calling is not blocking signals while not blocking signals",
"fullname": "test_is_not_blocking_signals",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:1791] is not queued for deletion",
"context": "Then it passes",
"expected": "[Node:1791] is not queued for deletion",
"success": true
} ],
"context": "When calling asserts.object_is_not_for_queued_deletion after not calling queue free()",
"fullname": "test_when_calling_obj_is_not_for_queued_deletion_after_not_calling_queue_free",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:1809] is blocking signals",
"context": "Then it passes",
"expected": "[Node:1809] is blocking signals",
"success": true
} ],
"context": "When calling is blocking signals while blocking signals",
"fullname": "test_is_blocking_signals",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:1696] has meta: dummy",
"context": "Then it passes",
"expected": "[Node:1696] has meta: dummy",
"success": true
}, {
"actual": "[Node:1696] has meta: dummy",
"context": "Then it passes",
"expected": "[Node:1696] has meta: dummy",
"success": true
} ],
"context": "When calling asserts.object_has_meta() after adding metadata",
"fullname": "test_when_calling_has_meta_after_adding_metadata",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "[Node:1696].builtin_dummy is connected to [Node:1696].title",
"context": "Then it passes",
"expected": "[Node:1696].builtin_dummy is connected to [Node:1696].title",
"success": true
} ],
"context": "When calling asserts object is connected with a valid connection",
"fullname": "test_when_calling_obj_is_connected_with_a_real_connection",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:1696] does not have user signal: false_signal",
"context": "Then it passes",
"expected": "[Node:1696] does not have user signal: false_signal",
"success": true
} ],
"context": "When calling obj_does_not_have_user_signal with fake signal",
"fullname": "test_when_calling_does_not_have_user_signal",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:1696] has user signal: dummy_signal",
"context": "Then it passes",
"expected": "[Node:1696] has user signal: dummy_signal",
"success": true
} ],
"context": "When calling obj_has_user_signal after adding a signal",
"fullname": "test_when_calling_has_user_signal_after_adding_a_signal",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:1696].builtin_dummy is not connected to [Node:1696].title",
"context": "Then it passes",
"expected": "[Node:1696].builtin_dummy is not connected to [Node:1696].title",
"success": true
} ],
"context": "When calling asserts object is not connected with an invalid connection",
"fullname": "test_when_calling_obj_is_not_connected_with_an_invalid_connection",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:1696] does not have meta: confusing",
"context": "Then it passes",
"expected": "[Node:1696] does not have meta: confusing",
"success": true
} ],
"context": "When calling asserts.object_has_meta with real key but null val",
"fullname": "test_when_calling_does_not_have_meta_real_key_null_value_pair",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:1696] does not have user signal: builtin_dummy",
"context": "Then it passes",
"expected": "[Node:1696] does not have user signal: builtin_dummy",
"success": true
} ],
"context": "When calling does not have user signal with class signal",
"fullname": "test_when_calling_does_not_have_user_signal_with_class_signal_constant",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:1696] does not have meta: bad_meta",
"context": "Then it passes",
"expected": "[Node:1696] does not have meta: bad_meta",
"success": true
} ],
"context": "When calling asserts.object_does_not_have_meta()",
"fullname": "test_when_calling_does_not_have_meta",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 15,
"path": "res://tests/unit/object.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/object.test.gd",
"tags": [  ],
"test": ExtResource( 7 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 15
}, {
"context": "Given an Is Instance of class/type Assertion",
"methods": [ {
"assertions": [ {
"actual": "|PoolVector2Array| [] != null",
"context": "vec2s is not null",
"expected": "|PoolVector2Array| [] != null",
"success": true
}, {
"actual": "[] is builtin: PoolVector2Array",
"context": "Then it passes",
"expected": "[] is builtin: PoolVector2Array",
"success": true
} ],
"context": "When calling is asserts.is_PoolVector2Array(vec2s: PoolVector2Array)",
"fullname": "test_when_calling_is_PoolVector2Array",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|PoolIntArray| [] != null",
"context": "ints is not null",
"expected": "|PoolIntArray| [] != null",
"success": true
}, {
"actual": "[] is builtin: PoolIntArray",
"context": "Then it passes",
"expected": "[] is builtin: PoolIntArray",
"success": true
} ],
"context": "When calling asserts.is_PoolIntArray(ints: PoolIntArray)",
"fullname": "test_when_calling_is_PoolIntArray",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|Rect2| (0, 0, 0, 0) != null",
"context": "rect2 is not null",
"expected": "|Rect2| (0, 0, 0, 0) != null",
"success": true
}, {
"actual": "(0, 0, 0, 0) is builtin: Rect2",
"context": "Then it passes",
"expected": "(0, 0, 0, 0) is builtin: Rect2",
"success": true
} ],
"context": "When calling asserts.is_Rect2(rect2: Rect2)",
"fullname": "test_when_calling_is_Rect2",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|RID| [RID] != null",
"context": "rid is not null",
"expected": "|RID| [RID] != null",
"success": true
}, {
"actual": "[RID] is builtin: RID",
"context": "Then it passes",
"expected": "[RID] is builtin: RID",
"success": true
} ],
"context": "When calling asserts.is_RID(rid: RID)",
"fullname": "test_when_calling_is_RID",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|NodePath| . != null",
"context": "@'Parent/Child' is not null",
"expected": "|NodePath| . != null",
"success": true
}, {
"actual": ". is builtin: NodePath",
"context": "Then it passes",
"expected": ". is builtin: NodePath",
"success": true
} ],
"context": "When calling asserts.is_NodePath(@'Parent/Child')",
"fullname": "test_when_calling_is_NodePath",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|PoolVector3Array| [] != null",
"context": "vec3s is not null",
"expected": "|PoolVector3Array| [] != null",
"success": true
}, {
"actual": "[] is builtin: PoolVector3Array",
"context": "Then it passes",
"expected": "[] is builtin: PoolVector3Array",
"success": true
} ],
"context": "When calling is asserts.is_PoolVector3Array(vec3s: PoolVector3Array)",
"fullname": "test_when_calling_is_PoolVector3Array",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|Transform| 1, 0, 0, 0, 1, 0, 0, 0, 1 - 0, 0, 0 != null",
"context": "transform is not null",
"expected": "|Transform| 1, 0, 0, 0, 1, 0, 0, 0, 1 - 0, 0, 0 != null",
"success": true
}, {
"actual": "1, 0, 0, 0, 1, 0, 0, 0, 1 - 0, 0, 0 is builtin: Transform",
"context": "Then it passes",
"expected": "1, 0, 0, 0, 1, 0, 0, 0, 1 - 0, 0, 0 is builtin: Transform",
"success": true
} ],
"context": "When calling asserts.is_Transform(transform: Transform)",
"fullname": "test_when_calling_is_Transform",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|PoolColorArray| [PoolColorArray] != null",
"context": "colors is not null",
"expected": "|PoolColorArray| [PoolColorArray] != null",
"success": true
}, {
"actual": "[PoolColorArray] is builtin: PoolColorArray",
"context": "Then it passes",
"expected": "[PoolColorArray] is builtin: PoolColorArray",
"success": true
} ],
"context": "When calling asserts.is_PoolColorArray(colors: PoolColorArray)",
"fullname": "test_when_calling_is_PoolColorArray",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|Quat| (0, 0, 0, 1) != null",
"context": "quat is not null",
"expected": "|Quat| (0, 0, 0, 1) != null",
"success": true
}, {
"actual": "(0, 0, 0, 1) is builtin: Quat",
"context": "Then it passes",
"expected": "(0, 0, 0, 1) is builtin: Quat",
"success": true
} ],
"context": "When calling asserts.is_Quat(quat: Quat)",
"fullname": "test_when_calling_is_Quat",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|String|  != null",
"context": "strs is not null",
"expected": "|String|  != null",
"success": true
}, {
"actual": " is builtin: String",
"context": "Then it passes",
"expected": " is builtin: String",
"success": true
} ],
"context": "When calling asserts.is_string(strs: String)",
"fullname": "test_when_calling_is_string",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|PoolStringArray| [] != null",
"context": "strs is not null",
"expected": "|PoolStringArray| [] != null",
"success": true
}, {
"actual": "[] is builtin: PoolStringArray",
"context": "Then it passes",
"expected": "[] is builtin: PoolStringArray",
"success": true
} ],
"context": "When calling is asserts.is_PoolStringArray(strs: PoolStringArray)",
"fullname": "test_when_calling_is_PoolStringArray",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|Vector2| (0, 0) != null",
"context": "vec2 is not null",
"expected": "|Vector2| (0, 0) != null",
"success": true
}, {
"actual": "(0, 0) is builtin: Vector2",
"context": "Then it passes",
"expected": "(0, 0) is builtin: Vector2",
"success": true
} ],
"context": "When calling asserts.is_Vector2(vec2)",
"fullname": "test_when_calling_is_Vector2",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|Vector3| (0, 0, 0) != null",
"context": "vec3 is not null",
"expected": "|Vector3| (0, 0, 0) != null",
"success": true
}, {
"actual": "(0, 0, 0) is builtin: Vector3",
"context": "Then it passes",
"expected": "(0, 0, 0) is builtin: Vector3",
"success": true
} ],
"context": "When calling asserts.is_Vector3(vec3: Vector3",
"fullname": "test_when_calling_is_Vector3",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|Plane| 0, 0, 0, 0 != null",
"context": "plane is not null",
"expected": "|Plane| 0, 0, 0, 0 != null",
"success": true
}, {
"actual": "0, 0, 0, 0 is builtin: Plane",
"context": "then it passes",
"expected": "0, 0, 0, 0 is builtin: Plane",
"success": true
} ],
"context": "When calling asserts.is_Plane(plane: Plane())",
"fullname": "test_when_calling_is_Plane",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|PoolByteArray| [PoolByteArray] != null",
"context": "bytes is not null",
"expected": "|PoolByteArray| [PoolByteArray] != null",
"success": true
}, {
"actual": "[PoolByteArray] is builtin: PoolByteArray",
"context": "Then it passes",
"expected": "[PoolByteArray] is builtin: PoolByteArray",
"success": true
} ],
"context": "When calling asserts.is_PoolByteArray(bytes: PoolByteArray)",
"fullname": "test_when_calling_is_PoolByteArray",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|Color| 0,0,0,1 != null",
"context": "color is not null",
"expected": "|Color| 0,0,0,1 != null",
"success": true
}, {
"actual": "0,0,0,1 is builtin: Color",
"context": "Then it passes",
"expected": "0,0,0,1 is builtin: Color",
"success": true
} ],
"context": "When calling asserts.is_color(color: Color)",
"fullname": "test_when_calling_is_Color",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "1 is builtin: float",
"context": "Then it passes",
"expected": "1 is builtin: float",
"success": true
} ],
"context": "When calling asserts.is_float(1.0)",
"fullname": "test_when_calling_is_float",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|PoolRealArray| [] != null",
"context": "reals is not null",
"expected": "|PoolRealArray| [] != null",
"success": true
}, {
"actual": "[] is builtin: PoolRealArray",
"context": "Then it passes",
"expected": "[] is builtin: PoolRealArray",
"success": true
} ],
"context": "When calling is asserts.is_PoolRealArray(reals: PoolRealArray)",
"fullname": "test_when_calling_is_PoolRealArray",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|Transform2D| ((1, 0), (0, 1), (0, 0)) != null",
"context": "transform2D is not null",
"expected": "|Transform2D| ((1, 0), (0, 1), (0, 0)) != null",
"success": true
}, {
"actual": "((1, 0), (0, 1), (0, 0)) is builtin: Transform2D",
"context": "Then it passes",
"expected": "((1, 0), (0, 1), (0, 0)) is builtin: Transform2D",
"success": true
} ],
"context": "When calling asserts.is_Transform(transform2D: Transform2D)",
"fullname": "test_when_calling_is_Transform2D",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "1 is builtin: int",
"context": "Then it passes",
"expected": "1 is builtin: int",
"success": true
} ],
"context": "When callign asserts.is_int(1)",
"fullname": "test_when_calling_is_int",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|Object| [Node:1907] != null",
"context": "node is not null",
"expected": "|Object| [Node:1907] != null",
"success": true
}, {
"actual": "[Node:1907] is builtin: Object",
"context": "An instance of node is an Object",
"expected": "[Node:1907] is builtin: Object",
"success": true
} ],
"context": "When calling is asserts.object(node: Node)",
"fullname": "test_when_calling_is_object",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|Basis| ((1, 0, 0), (0, 1, 0), (0, 0, 1)) != null",
"context": "basis is not null",
"expected": "|Basis| ((1, 0, 0), (0, 1, 0), (0, 0, 1)) != null",
"success": true
}, {
"actual": "((1, 0, 0), (0, 1, 0), (0, 0, 1)) is builtin: Basis",
"context": "Then it passes",
"expected": "((1, 0, 0), (0, 1, 0), (0, 0, 1)) is builtin: Basis",
"success": true
} ],
"context": "When calling asserts.is_basis(basis: Basis",
"fullname": "test_when_calling_is_Basis",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "{} is builtin: Dictionary",
"context": "Then it passes",
"expected": "{} is builtin: Dictionary",
"success": true
} ],
"context": "When calling asserts.is_Dictionary({})",
"fullname": "test_when_calling_is_Dictionary",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|Array| [] != null",
"context": "array is not null",
"expected": "|Array| [] != null",
"success": true
}, {
"actual": "[] is builtin: Array",
"context": "Then it passes",
"expected": "[] is builtin: Array",
"success": true
} ],
"context": "When calling asserts.is_Array(array: Array)",
"fullname": "test_when_calling_is_Array",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|AABB| 0, 0, 0 - 0, 0, 0 != null",
"context": "AABB is not null",
"expected": "|AABB| 0, 0, 0 - 0, 0, 0 != null",
"success": true
}, {
"actual": "0, 0, 0 - 0, 0, 0 is builtin: AABB",
"context": "Then it passes",
"expected": "0, 0, 0 - 0, 0, 0 is builtin: AABB",
"success": true
} ],
"context": "When calling asserts.is_AABB(aabb: AABB)",
"fullname": "test_when_calling_is_AABB",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "True is builtin: bool",
"context": "Then it passes",
"expected": "True is builtin: bool",
"success": true
} ],
"context": "When calling asserts.is_bool(true)",
"fullname": "test_when_calling_is_bool",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 26,
"path": "res://tests/unit/is_instance.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/is_instance.test.gd",
"tags": [  ],
"test": ExtResource( 6 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 26
}, {
"context": "Given an Is Not Instance of class/type Assertion",
"methods": [ {
"assertions": [ {
"actual": "Null is not builtin: Array",
"context": "Then it passes",
"expected": "Null is not builtin: Array",
"success": true
} ],
"context": "when calling asserts.is_not_Array(null)",
"fullname": "test_when_calling_is_not_Array",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Basis",
"context": "Then it passes",
"expected": "Null is not builtin: Basis",
"success": true
} ],
"context": "when calling asserts.is_not_Basis(null)",
"fullname": "test_when_calling_is_not_Basis",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: AABB",
"context": "Then it passes",
"expected": "Null is not builtin: AABB",
"success": true
} ],
"context": "when calling asserts.is_not_AABB(null)",
"fullname": "test_when_calling_is_not_AABB",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: PoolVector2Array",
"context": "Then it passes",
"expected": "Null is not builtin: PoolVector2Array",
"success": true
} ],
"context": "when calling asserts.is_not_PoolVector2Array(null)",
"fullname": "test_when_calling_is_not_PoolVector2Array",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Vector2",
"context": "Then it passes",
"expected": "Null is not builtin: Vector2",
"success": true
} ],
"context": "when calling asserts.is_not_Vector2(null)",
"fullname": "test_when_calling_is_not_Vector2",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: int",
"context": "Then it passes",
"expected": "Null is not builtin: int",
"success": true
} ],
"context": "when calling asserts.is_not_int(null)",
"fullname": "test_when_calling_is_not_int",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Transform",
"context": "Then it passes",
"expected": "Null is not builtin: Transform",
"success": true
} ],
"context": "when calling asserts.is_not_Transform(null)",
"fullname": "test_when_calling_is_not_Transform",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: float",
"context": "Then it passes",
"expected": "Null is not builtin: float",
"success": true
} ],
"context": "when calling asserts.is_not_float(null)",
"fullname": "test_when_calling_is_not_float",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: String",
"context": "Then it passes",
"expected": "Null is not builtin: String",
"success": true
} ],
"context": "when calling asserts.is_not_String(null)",
"fullname": "test_when_calling_is_not_String",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: NodePath",
"context": "Then it passes",
"expected": "Null is not builtin: NodePath",
"success": true
} ],
"context": "when calling asserts.is_not_NodePath(null)",
"fullname": "test_when_calling_is_not_NodePath",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Plane",
"context": "Then it passes",
"expected": "Null is not builtin: Plane",
"success": true
} ],
"context": "when calling asserts.is_not_Plane(null)",
"fullname": "test_when_calling_is_not_Plane",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: PoolByteArray",
"context": "Then it passes",
"expected": "Null is not builtin: PoolByteArray",
"success": true
} ],
"context": "when calling asserts.is_not_PoolByteArray(null)",
"fullname": "test_when_calling_is_not_PoolByteArray",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Transform2D",
"context": "Then it passes",
"expected": "Null is not builtin: Transform2D",
"success": true
} ],
"context": "when calling asserts.is_not_Transform2D(null)",
"fullname": "test_when_calling_is_not_Transform2D",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: PoolColorArray",
"context": "Then it passes",
"expected": "Null is not builtin: PoolColorArray",
"success": true
} ],
"context": "when calling asserts.is_not_PoolColorArray(null)",
"fullname": "test_when_calling_is_not_PoolColorArray",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: PoolStringArray",
"context": "Then it passes",
"expected": "Null is not builtin: PoolStringArray",
"success": true
} ],
"context": "when calling asserts.is_not_PoolStringArray(null)",
"fullname": "test_when_calling_is_not_PoolStringArray",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Color",
"context": "Then it passes",
"expected": "Null is not builtin: Color",
"success": true
} ],
"context": "when calling asserts.is_not_Color(null)",
"fullname": "test_when_calling_is_not_Color",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Dictionary",
"context": "Then it passes",
"expected": "Null is not builtin: Dictionary",
"success": true
} ],
"context": "when calling asserts.is_not_Dictionary(null)",
"fullname": "test_when_calling_is_not_Dictionary",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: PoolRealArray",
"context": "Then it passes",
"expected": "Null is not builtin: PoolRealArray",
"success": true
} ],
"context": "when calling asserts.is_not_PoolRealArray(null)",
"fullname": "test_when_calling_is_not_PoolRealArray",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: PoolVector3Array",
"context": "Then it passes",
"expected": "Null is not builtin: PoolVector3Array",
"success": true
} ],
"context": "when calling asserts.is_not_PoolVector3Array(null)",
"fullname": "test_when_calling_is_not_PoolVector3Array",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: PoolIntArray",
"context": "Then it passes",
"expected": "Null is not builtin: PoolIntArray",
"success": true
} ],
"context": "when calling asserts.is_not_PoolIntArray(null)",
"fullname": "test_when_calling_is_not_PoolIntArray",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Quat",
"context": "Then it passes",
"expected": "Null is not builtin: Quat",
"success": true
} ],
"context": "when calling asserts.is_not_Quat(null)",
"fullname": "test_when_calling_is_not_Quat",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Rect2",
"context": "Then it passes",
"expected": "Null is not builtin: Rect2",
"success": true
} ],
"context": "when calling asserts.is_not_Rect2(null)",
"fullname": "test_when_calling_is_not_Rect2",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Vector3",
"context": "Then it passes",
"expected": "Null is not builtin: Vector3",
"success": true
} ],
"context": "when calling asserts.is_not_Vector3(null)",
"fullname": "test_when_calling_is_not_Vector3",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: bool",
"context": "Then it passes",
"expected": "Null is not builtin: bool",
"success": true
} ],
"context": "when calling asserts.is_not_bool(null)",
"fullname": "test_when_calling_is_not_bool",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Object",
"context": "Then it passes",
"expected": "Null is not builtin: Object",
"success": true
} ],
"context": "when calling asserts.is_not_Object(null)",
"fullname": "test_when_calling_is_not_Object",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: RID",
"context": "Then it passes",
"expected": "Null is not builtin: RID",
"success": true
} ],
"context": "when calling asserts.is_not_RID(null)",
"fullname": "test_when_calling_is_not_RID",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 26,
"path": "res://tests/unit/is_not_instance.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/is_not_instance.test.gd",
"tags": [  ],
"test": ExtResource( 2 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 26
}, {
"context": "Given a Signal Watcher",
"methods": [ {
"assertions": [ {
"actual": "signal: example was emitted from [Node:1884]",
"context": "Then it captures the emitted signal",
"expected": "signal: example was emitted from [Node:1884]",
"success": true
} ],
"context": "When we watch and emit a signal",
"fullname": "test_When_we_watch_and_emit_a_signal",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "signal: multiple was emitted from [Node:1884] 2",
"context": "Then we can track how many times we emitted it",
"expected": "signal: multiple was emitted from [Node:1884] 2",
"success": true
} ],
"context": "When we watch and signal and emit it multiple times",
"fullname": "test_When_we_watch_a_signal_and_emit_it_multiple_times",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Signal: example was not emitted from [Node:1884]",
"context": "Then it does not capture the non-emitted signal",
"expected": "Signal: example was not emitted from [Node:1884]",
"success": true
} ],
"context": "When we watch and do not emit a signal",
"fullname": "test_When_we_watch_and_do_not_emit_a_signal",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Signal: example was emitted from [Node:1884] with arguments: [1, 20, 5]",
"context": "Then it captures any arguments that where passed when the signal was emitted",
"expected": "Signal: example was emitted from [Node:1884] with arguments: [1, 20, 5]",
"success": true
} ],
"context": "When we watch a signal from an object with no bound variables",
"fullname": "test_When_we_watch_a_signal_from_an_object_with_no_bound_variables",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 4,
"path": "res://tests/unit/watcher.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/watcher.test.gd",
"tags": [  ],
"test": ExtResource( 17 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 4
}, {
"context": "Default Args",
"methods": [ {
"assertions": [ {
"actual": "|bool| True == true",
"context": "If this method can be reached then we have doubled a script with default argument(s) properly!",
"expected": "|bool| True == true",
"success": true
} ],
"context": " default arguments of interpolate property",
"fullname": "test_default_arguments_of_interpolate_property",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 1,
"path": "res://tests/integration/default_args.test.gd",
"source": {
"containers": [ "res://tests/integration", "res://tests" ],
"method": "",
"path": "res://tests/integration/default_args.test.gd",
"tags": [  ],
"test": ExtResource( 10 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 1
}, {
"context": "Given a Boolean Assertion",
"methods": [ {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then it passes",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When calling asserts.is_true(true)",
"fullname": "test_when_calling_asserts_is_true",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| False == false",
"context": "Then it passes",
"expected": "|bool| False == false",
"success": true
} ],
"context": "When calling asserts.is_false(false)",
"fullname": "test_when_calling_asserts_is_false",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| True != false",
"context": "",
"expected": "|bool| True == false",
"success": false
} ],
"context": " intentional failure",
"fullname": "test_intentional_failure",
"passed": 0,
"success": false,
"time": 0.0,
"total": 1
} ],
"passed": 2,
"path": "res://tests/integration/boolean.test.gd",
"source": {
"containers": [ "res://tests/integration", "res://tests" ],
"method": "",
"path": "res://tests/integration/boolean.test.gd",
"tags": [  ],
"test": ExtResource( 20 ),
"yield_time": 0.0
},
"success": false,
"time_taken": 0.0,
"total": 3
}, {
"context": "Given is_on_floor",
"methods": [ {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then it can be stubbed",
"expected": "|bool| True == true",
"success": true
} ],
"context": "From a user-defined script",
"fullname": "test_stubbing_is_on_floor_method_from_user_defined_class",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then it can be stubbed",
"expected": "|bool| True == true",
"success": true
} ],
"context": "From a built-in KinematicBody2D2",
"fullname": "test_stubbing_is_on_floor_method_from_builtin_class2",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then it can be stubbed",
"expected": "|bool| True == true",
"success": true
} ],
"context": "From a child node of a scene without scripts",
"fullname": "test_stubbing_is_on_floor_as_child_node_with_no_script",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 3,
"path": "res://tests/integration/on_floor.test.gd",
"source": {
"containers": [ "res://tests/integration", "res://tests" ],
"method": "",
"path": "res://tests/integration/on_floor.test.gd",
"tags": [  ],
"test": ExtResource( 5 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 3
}, {
"context": "Given a Script Director",
"methods": [ {
"assertions": [ {
"actual": "[Reference:1998] is instance of class: [GDScript:1428]",
"context": "Then we get that inner class back",
"expected": "[Reference:1998] is instance of class: [GDScript:1428]",
"success": true
} ],
"context": "When we double an inner class",
"fullname": "test_When_we_double_an_inner_class",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|Object| [Node:2044] is equal to |Object| [Node:2044]",
"context": "Then we get the same double back",
"expected": "|Object| [Node:2044] is equal to |Object| [Node:2044]",
"success": true
} ],
"context": "When we call the double the second time",
"fullname": "test_When_we_call_double_a_second_time_on",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|Dictionary| {_enter_tree:{arguments:, default_arguments:}, _exit_tree:{arguments:, default_arguments:}, _get:{arguments:a, default_arguments:a}, _get_configuration_warning:{arguments:, default_arguments:}, _get_editor_description:{arguments:, default_arguments:}, _get_import_path:{arguments:, default_arguments:}, _get_property_list:{arguments:, default_arguments:}, _init:{arguments:, default_arguments:}, _input:{arguments:a, default_arguments:a}, _notification:{arguments:a, default_arguments:a}, _physics_process:{arguments:a, default_arguments:a}, _process:{arguments:a, default_arguments:a}, _ready:{arguments:, default_arguments:}, _set:{arguments:a, b, default_arguments:a, b}, _set_editor_description:{arguments:a, default_arguments:a}, _set_import_path:{arguments:a, default_arguments:a}, _to_string:{arguments:, default_arguments:}, _unhandled_input:{arguments:a, default_arguments:a}, _unhandled_key_input:{arguments:a, default_arguments:a}, add:{arguments:a, b, default_arguments:a, b}, add_child:{arguments:a, b, default_arguments:a, b = False}, add_child_below_node:{arguments:a, b, c, default_arguments:a, b, c = False}, add_to_group:{arguments:a, b, default_arguments:a, b = False}, add_user_signal:{arguments:a, b, default_arguments:a, b = []}, call:{arguments:a, default_arguments:a}, call_deferred:{arguments:a, default_arguments:a}, callv:{arguments:a, b, default_arguments:a, b}, can_process:{arguments:, default_arguments:}, can_translate_messages:{arguments:, default_arguments:}, connect:{arguments:a, b, c, d, e, default_arguments:a, b, c, d = [], e = 0}, disconnect:{arguments:a, b, c, default_arguments:a, b, c}, divide:{arguments:a, b, default_arguments:a, b}, duplicate:{arguments:a, default_arguments:a = 15}, emit_signal:{arguments:a, default_arguments:a}, find_node:{arguments:a, b, c, default_arguments:a, b = True, c = True}, find_parent:{arguments:a, default_arguments:a}, free:{arguments:, default_arguments:}, get:{arguments:a, default_arguments:a}, get_child:{arguments:a, default_arguments:a}, get_child_count:{arguments:, default_arguments:}, get_children:{arguments:, default_arguments:}, get_class:{arguments:, default_arguments:}, get_custom_multiplayer:{arguments:, default_arguments:}, get_filename:{arguments:, default_arguments:}, get_groups:{arguments:, default_arguments:}, get_incoming_connections:{arguments:, default_arguments:}, get_index:{arguments:, default_arguments:}, get_indexed:{arguments:a, default_arguments:a}, get_instance_id:{arguments:, default_arguments:}, get_meta:{arguments:a, default_arguments:a}, get_meta_list:{arguments:, default_arguments:}, get_method_list:{arguments:, default_arguments:}, get_multiplayer:{arguments:, default_arguments:}, get_name:{arguments:, default_arguments:}, get_network_master:{arguments:, default_arguments:}, get_node:{arguments:a, default_arguments:a}, get_node_and_resource:{arguments:a, default_arguments:a}, get_node_or_null:{arguments:a, default_arguments:a}, get_owner:{arguments:, default_arguments:}, get_parent:{arguments:, default_arguments:}, get_path:{arguments:, default_arguments:}, get_path_to:{arguments:a, default_arguments:a}, get_pause_mode:{arguments:, default_arguments:}, get_physics_process_delta_time:{arguments:, default_arguments:}, get_position_in_parent:{arguments:, default_arguments:}, get_process_delta_time:{arguments:, default_arguments:}, get_process_priority:{arguments:, default_arguments:}, get_property_list:{arguments:, default_arguments:}, get_scene_instance_load_placeholder:{arguments:, default_arguments:}, get_script:{arguments:, default_arguments:}, get_signal_connection_list:{arguments:a, default_arguments:a}, get_signal_list:{arguments:, default_arguments:}, get_tree:{arguments:, default_arguments:}, get_viewport:{arguments:, default_arguments:}, has_meta:{arguments:a, default_arguments:a}, has_method:{arguments:a, default_arguments:a}, has_node:{arguments:a, default_arguments:a}, has_node_and_resource:{arguments:a, default_arguments:a}, has_signal:{arguments:a, default_arguments:a}, has_user_signal:{arguments:a, default_arguments:a}, is_a_parent_of:{arguments:a, default_arguments:a}, is_blocking_signals:{arguments:, default_arguments:}, is_class:{arguments:a, default_arguments:a}, is_connected:{arguments:a, b, c, default_arguments:a, b, c}, is_displayed_folded:{arguments:, default_arguments:}, is_greater_than:{arguments:a, default_arguments:a}, is_in_group:{arguments:a, default_arguments:a}, is_inside_tree:{arguments:, default_arguments:}, is_network_master:{arguments:, default_arguments:}, is_physics_processing:{arguments:, default_arguments:}, is_physics_processing_internal:{arguments:, default_arguments:}, is_processing:{arguments:, default_arguments:}, is_processing_input:{arguments:, default_arguments:}, is_processing_internal:{arguments:, default_arguments:}, is_processing_unhandled_input:{arguments:, default_arguments:}, is_processing_unhandled_key_input:{arguments:, default_arguments:}, is_queued_for_deletion:{arguments:, default_arguments:}, math_fight:{arguments:, default_arguments:}, move_child:{arguments:a, b, default_arguments:a, b}, multiply:{arguments:a, b, default_arguments:a, b}, notification:{arguments:a, b, default_arguments:a, b = False}, pi:{arguments:, default_arguments:}, print_stray_nodes:{arguments:, default_arguments:}, print_tree:{arguments:, default_arguments:}, print_tree_pretty:{arguments:, default_arguments:}, propagate_call:{arguments:a, b, c, default_arguments:a, b = [], c = False}, propagate_notification:{arguments:a, default_arguments:a}, property_list_changed_notify:{arguments:, default_arguments:}, queue_free:{arguments:, default_arguments:}, raise:{arguments:, default_arguments:}, remove_and_skip:{arguments:, default_arguments:}, remove_child:{arguments:a, default_arguments:a}, remove_from_group:{arguments:a, default_arguments:a}, remove_meta:{arguments:a, default_arguments:a}, replace_by:{arguments:a, b, default_arguments:a, b = False}, request_ready:{arguments:, default_arguments:}, rpc:{arguments:a, default_arguments:a}, rpc_config:{arguments:a, b, default_arguments:a, b}, rpc_id:{arguments:a, b, default_arguments:a, b}, rpc_unreliable:{arguments:a, default_arguments:a}, rpc_unreliable_id:{arguments:a, b, default_arguments:a, b}, rset:{arguments:a, b, default_arguments:a, b}, rset_config:{arguments:a, b, default_arguments:a, b}, rset_id:{arguments:a, b, c, default_arguments:a, b, c}, rset_unreliable:{arguments:a, b, default_arguments:a, b}, rset_unreliable_id:{arguments:a, b, c, default_arguments:a, b, c}, set:{arguments:a, b, default_arguments:a, b}, set_block_signals:{arguments:a, default_arguments:a}, set_custom_multiplayer:{arguments:a, default_arguments:a}, set_deferred:{arguments:a, b, default_arguments:a, b}, set_display_folded:{arguments:a, default_arguments:a}, set_filename:{arguments:a, default_arguments:a}, set_indexed:{arguments:a, b, default_arguments:a, b}, set_message_translation:{arguments:a, default_arguments:a}, set_meta:{arguments:a, b, default_arguments:a, b}, set_name:{arguments:a, default_arguments:a}, set_network_master:{arguments:a, b, default_arguments:a, b = True}, set_owner:{arguments:a, default_arguments:a}, set_pause_mode:{arguments:a, default_arguments:a}, set_physics_process:{arguments:a, default_arguments:a}, set_physics_process_internal:{arguments:a, default_arguments:a}, set_process:{arguments:a, default_arguments:a}, set_process_input:{arguments:a, default_arguments:a}, set_process_internal:{arguments:a, default_arguments:a}, set_process_priority:{arguments:a, default_arguments:a}, set_process_unhandled_input:{arguments:a, default_arguments:a}, set_process_unhandled_key_input:{arguments:a, default_arguments:a}, set_scene_instance_load_placeholder:{arguments:a, default_arguments:a}, set_script:{arguments:a, default_arguments:a}, subtract:{arguments:a, b, default_arguments:a, b}, sum:{arguments:a, default_arguments:a}, to_string:{arguments:, default_arguments:}, tr:{arguments:a, default_arguments:a}, update_configuration_warning:{arguments:, default_arguments:}} is not equal to |Dictionary| {_enter_tree:{arguments:, default_arguments:}, _exit_tree:{arguments:, default_arguments:}, _get:{arguments:a, default_arguments:a}, _get_configuration_warning:{arguments:, default_arguments:}, _get_editor_description:{arguments:, default_arguments:}, _get_import_path:{arguments:, default_arguments:}, _get_property_list:{arguments:, default_arguments:}, _init:{arguments:, default_arguments:}, _input:{arguments:a, default_arguments:a}, _notification:{arguments:a, default_arguments:a}, _physics_process:{arguments:a, default_arguments:a}, _process:{arguments:a, default_arguments:a}, _ready:{arguments:, default_arguments:}, _set:{arguments:a, b, default_arguments:a, b}, _set_editor_description:{arguments:a, default_arguments:a}, _set_import_path:{arguments:a, default_arguments:a}, _to_string:{arguments:, default_arguments:}, _unhandled_input:{arguments:a, default_arguments:a}, _unhandled_key_input:{arguments:a, default_arguments:a}, add:{arguments:a, b, default_arguments:a, b}, add_child:{arguments:a, b, default_arguments:a, b = False}, add_child_below_node:{arguments:a, b, c, default_arguments:a, b, c = False}, add_to_group:{arguments:a, b, default_arguments:a, b = False}, add_user_signal:{arguments:a, b, default_arguments:a, b = []}, call:{arguments:a, default_arguments:a}, call_deferred:{arguments:a, default_arguments:a}, callv:{arguments:a, b, default_arguments:a, b}, can_process:{arguments:, default_arguments:}, can_translate_messages:{arguments:, default_arguments:}, connect:{arguments:a, b, c, d, e, default_arguments:a, b, c, d = [], e = 0}, disconnect:{arguments:a, b, c, default_arguments:a, b, c}, divide:{arguments:a, b, default_arguments:a, b}, duplicate:{arguments:a, default_arguments:a = 15}, emit_signal:{arguments:a, default_arguments:a}, find_node:{arguments:a, b, c, default_arguments:a, b = True, c = True}, find_parent:{arguments:a, default_arguments:a}, free:{arguments:, default_arguments:}, get:{arguments:a, default_arguments:a}, get_child:{arguments:a, default_arguments:a}, get_child_count:{arguments:, default_arguments:}, get_children:{arguments:, default_arguments:}, get_class:{arguments:, default_arguments:}, get_custom_multiplayer:{arguments:, default_arguments:}, get_filename:{arguments:, default_arguments:}, get_groups:{arguments:, default_arguments:}, get_incoming_connections:{arguments:, default_arguments:}, get_index:{arguments:, default_arguments:}, get_indexed:{arguments:a, default_arguments:a}, get_instance_id:{arguments:, default_arguments:}, get_meta:{arguments:a, default_arguments:a}, get_meta_list:{arguments:, default_arguments:}, get_method_list:{arguments:, default_arguments:}, get_multiplayer:{arguments:, default_arguments:}, get_name:{arguments:, default_arguments:}, get_network_master:{arguments:, default_arguments:}, get_node:{arguments:a, default_arguments:a}, get_node_and_resource:{arguments:a, default_arguments:a}, get_node_or_null:{arguments:a, default_arguments:a}, get_owner:{arguments:, default_arguments:}, get_parent:{arguments:, default_arguments:}, get_path:{arguments:, default_arguments:}, get_path_to:{arguments:a, default_arguments:a}, get_pause_mode:{arguments:, default_arguments:}, get_physics_process_delta_time:{arguments:, default_arguments:}, get_position_in_parent:{arguments:, default_arguments:}, get_process_delta_time:{arguments:, default_arguments:}, get_process_priority:{arguments:, default_arguments:}, get_property_list:{arguments:, default_arguments:}, get_scene_instance_load_placeholder:{arguments:, default_arguments:}, get_script:{arguments:, default_arguments:}, get_signal_connection_list:{arguments:a, default_arguments:a}, get_signal_list:{arguments:, default_arguments:}, get_tree:{arguments:, default_arguments:}, get_viewport:{arguments:, default_arguments:}, has_meta:{arguments:a, default_arguments:a}, has_method:{arguments:a, default_arguments:a}, has_node:{arguments:a, default_arguments:a}, has_node_and_resource:{arguments:a, default_arguments:a}, has_signal:{arguments:a, default_arguments:a}, has_user_signal:{arguments:a, default_arguments:a}, is_a_parent_of:{arguments:a, default_arguments:a}, is_blocking_signals:{arguments:, default_arguments:}, is_class:{arguments:a, default_arguments:a}, is_connected:{arguments:a, b, c, default_arguments:a, b, c}, is_displayed_folded:{arguments:, default_arguments:}, is_greater_than:{arguments:a, default_arguments:a}, is_in_group:{arguments:a, default_arguments:a}, is_inside_tree:{arguments:, default_arguments:}, is_network_master:{arguments:, default_arguments:}, is_physics_processing:{arguments:, default_arguments:}, is_physics_processing_internal:{arguments:, default_arguments:}, is_processing:{arguments:, default_arguments:}, is_processing_input:{arguments:, default_arguments:}, is_processing_internal:{arguments:, default_arguments:}, is_processing_unhandled_input:{arguments:, default_arguments:}, is_processing_unhandled_key_input:{arguments:, default_arguments:}, is_queued_for_deletion:{arguments:, default_arguments:}, math_fight:{arguments:, default_arguments:}, move_child:{arguments:a, b, default_arguments:a, b}, multiply:{arguments:a, b, default_arguments:a, b}, notification:{arguments:a, b, default_arguments:a, b = False}, pi:{arguments:, default_arguments:}, print_stray_nodes:{arguments:, default_arguments:}, print_tree:{arguments:, default_arguments:}, print_tree_pretty:{arguments:, default_arguments:}, propagate_call:{arguments:a, b, c, default_arguments:a, b = [], c = False}, propagate_notification:{arguments:a, default_arguments:a}, property_list_changed_notify:{arguments:, default_arguments:}, queue_free:{arguments:, default_arguments:}, raise:{arguments:, default_arguments:}, remove_and_skip:{arguments:, default_arguments:}, remove_child:{arguments:a, default_arguments:a}, remove_from_group:{arguments:a, default_arguments:a}, remove_meta:{arguments:a, default_arguments:a}, replace_by:{arguments:a, b, default_arguments:a, b = False}, request_ready:{arguments:, default_arguments:}, rpc:{arguments:a, default_arguments:a}, rpc_config:{arguments:a, b, default_arguments:a, b}, rpc_id:{arguments:a, b, default_arguments:a, b}, rpc_unreliable:{arguments:a, default_arguments:a}, rpc_unreliable_id:{arguments:a, b, default_arguments:a, b}, rset:{arguments:a, b, default_arguments:a, b}, rset_config:{arguments:a, b, default_arguments:a, b}, rset_id:{arguments:a, b, c, default_arguments:a, b, c}, rset_unreliable:{arguments:a, b, default_arguments:a, b}, rset_unreliable_id:{arguments:a, b, c, default_arguments:a, b, c}, set:{arguments:a, b, default_arguments:a, b}, set_block_signals:{arguments:a, default_arguments:a}, set_custom_multiplayer:{arguments:a, default_arguments:a}, set_deferred:{arguments:a, b, default_arguments:a, b}, set_display_folded:{arguments:a, default_arguments:a}, set_filename:{arguments:a, default_arguments:a}, set_indexed:{arguments:a, b, default_arguments:a, b}, set_message_translation:{arguments:a, default_arguments:a}, set_meta:{arguments:a, b, default_arguments:a, b}, set_name:{arguments:a, default_arguments:a}, set_network_master:{arguments:a, b, default_arguments:a, b = True}, set_owner:{arguments:a, default_arguments:a}, set_pause_mode:{arguments:a, default_arguments:a}, set_physics_process:{arguments:a, default_arguments:a}, set_physics_process_internal:{arguments:a, default_arguments:a}, set_process:{arguments:a, default_arguments:a}, set_process_input:{arguments:a, default_arguments:a}, set_process_internal:{arguments:a, default_arguments:a}, set_process_priority:{arguments:a, default_arguments:a}, set_process_unhandled_input:{arguments:a, default_arguments:a}, set_process_unhandled_key_input:{arguments:a, default_arguments:a}, set_scene_instance_load_placeholder:{arguments:a, default_arguments:a}, set_script:{arguments:a, default_arguments:a}, subtract:{arguments:a, b, default_arguments:a, b}, sum:{arguments:a, default_arguments:a}, to_string:{arguments:, default_arguments:}, tr:{arguments:a, default_arguments:a}, update_configuration_warning:{arguments:, default_arguments:}}",
"context": "Then they do not share resources",
"expected": "|Dictionary| {_enter_tree:{arguments:, default_arguments:}, _exit_tree:{arguments:, default_arguments:}, _get:{arguments:a, default_arguments:a}, _get_configuration_warning:{arguments:, default_arguments:}, _get_editor_description:{arguments:, default_arguments:}, _get_import_path:{arguments:, default_arguments:}, _get_property_list:{arguments:, default_arguments:}, _init:{arguments:, default_arguments:}, _input:{arguments:a, default_arguments:a}, _notification:{arguments:a, default_arguments:a}, _physics_process:{arguments:a, default_arguments:a}, _process:{arguments:a, default_arguments:a}, _ready:{arguments:, default_arguments:}, _set:{arguments:a, b, default_arguments:a, b}, _set_editor_description:{arguments:a, default_arguments:a}, _set_import_path:{arguments:a, default_arguments:a}, _to_string:{arguments:, default_arguments:}, _unhandled_input:{arguments:a, default_arguments:a}, _unhandled_key_input:{arguments:a, default_arguments:a}, add:{arguments:a, b, default_arguments:a, b}, add_child:{arguments:a, b, default_arguments:a, b = False}, add_child_below_node:{arguments:a, b, c, default_arguments:a, b, c = False}, add_to_group:{arguments:a, b, default_arguments:a, b = False}, add_user_signal:{arguments:a, b, default_arguments:a, b = []}, call:{arguments:a, default_arguments:a}, call_deferred:{arguments:a, default_arguments:a}, callv:{arguments:a, b, default_arguments:a, b}, can_process:{arguments:, default_arguments:}, can_translate_messages:{arguments:, default_arguments:}, connect:{arguments:a, b, c, d, e, default_arguments:a, b, c, d = [], e = 0}, disconnect:{arguments:a, b, c, default_arguments:a, b, c}, divide:{arguments:a, b, default_arguments:a, b}, duplicate:{arguments:a, default_arguments:a = 15}, emit_signal:{arguments:a, default_arguments:a}, find_node:{arguments:a, b, c, default_arguments:a, b = True, c = True}, find_parent:{arguments:a, default_arguments:a}, free:{arguments:, default_arguments:}, get:{arguments:a, default_arguments:a}, get_child:{arguments:a, default_arguments:a}, get_child_count:{arguments:, default_arguments:}, get_children:{arguments:, default_arguments:}, get_class:{arguments:, default_arguments:}, get_custom_multiplayer:{arguments:, default_arguments:}, get_filename:{arguments:, default_arguments:}, get_groups:{arguments:, default_arguments:}, get_incoming_connections:{arguments:, default_arguments:}, get_index:{arguments:, default_arguments:}, get_indexed:{arguments:a, default_arguments:a}, get_instance_id:{arguments:, default_arguments:}, get_meta:{arguments:a, default_arguments:a}, get_meta_list:{arguments:, default_arguments:}, get_method_list:{arguments:, default_arguments:}, get_multiplayer:{arguments:, default_arguments:}, get_name:{arguments:, default_arguments:}, get_network_master:{arguments:, default_arguments:}, get_node:{arguments:a, default_arguments:a}, get_node_and_resource:{arguments:a, default_arguments:a}, get_node_or_null:{arguments:a, default_arguments:a}, get_owner:{arguments:, default_arguments:}, get_parent:{arguments:, default_arguments:}, get_path:{arguments:, default_arguments:}, get_path_to:{arguments:a, default_arguments:a}, get_pause_mode:{arguments:, default_arguments:}, get_physics_process_delta_time:{arguments:, default_arguments:}, get_position_in_parent:{arguments:, default_arguments:}, get_process_delta_time:{arguments:, default_arguments:}, get_process_priority:{arguments:, default_arguments:}, get_property_list:{arguments:, default_arguments:}, get_scene_instance_load_placeholder:{arguments:, default_arguments:}, get_script:{arguments:, default_arguments:}, get_signal_connection_list:{arguments:a, default_arguments:a}, get_signal_list:{arguments:, default_arguments:}, get_tree:{arguments:, default_arguments:}, get_viewport:{arguments:, default_arguments:}, has_meta:{arguments:a, default_arguments:a}, has_method:{arguments:a, default_arguments:a}, has_node:{arguments:a, default_arguments:a}, has_node_and_resource:{arguments:a, default_arguments:a}, has_signal:{arguments:a, default_arguments:a}, has_user_signal:{arguments:a, default_arguments:a}, is_a_parent_of:{arguments:a, default_arguments:a}, is_blocking_signals:{arguments:, default_arguments:}, is_class:{arguments:a, default_arguments:a}, is_connected:{arguments:a, b, c, default_arguments:a, b, c}, is_displayed_folded:{arguments:, default_arguments:}, is_greater_than:{arguments:a, default_arguments:a}, is_in_group:{arguments:a, default_arguments:a}, is_inside_tree:{arguments:, default_arguments:}, is_network_master:{arguments:, default_arguments:}, is_physics_processing:{arguments:, default_arguments:}, is_physics_processing_internal:{arguments:, default_arguments:}, is_processing:{arguments:, default_arguments:}, is_processing_input:{arguments:, default_arguments:}, is_processing_internal:{arguments:, default_arguments:}, is_processing_unhandled_input:{arguments:, default_arguments:}, is_processing_unhandled_key_input:{arguments:, default_arguments:}, is_queued_for_deletion:{arguments:, default_arguments:}, math_fight:{arguments:, default_arguments:}, move_child:{arguments:a, b, default_arguments:a, b}, multiply:{arguments:a, b, default_arguments:a, b}, notification:{arguments:a, b, default_arguments:a, b = False}, pi:{arguments:, default_arguments:}, print_stray_nodes:{arguments:, default_arguments:}, print_tree:{arguments:, default_arguments:}, print_tree_pretty:{arguments:, default_arguments:}, propagate_call:{arguments:a, b, c, default_arguments:a, b = [], c = False}, propagate_notification:{arguments:a, default_arguments:a}, property_list_changed_notify:{arguments:, default_arguments:}, queue_free:{arguments:, default_arguments:}, raise:{arguments:, default_arguments:}, remove_and_skip:{arguments:, default_arguments:}, remove_child:{arguments:a, default_arguments:a}, remove_from_group:{arguments:a, default_arguments:a}, remove_meta:{arguments:a, default_arguments:a}, replace_by:{arguments:a, b, default_arguments:a, b = False}, request_ready:{arguments:, default_arguments:}, rpc:{arguments:a, default_arguments:a}, rpc_config:{arguments:a, b, default_arguments:a, b}, rpc_id:{arguments:a, b, default_arguments:a, b}, rpc_unreliable:{arguments:a, default_arguments:a}, rpc_unreliable_id:{arguments:a, b, default_arguments:a, b}, rset:{arguments:a, b, default_arguments:a, b}, rset_config:{arguments:a, b, default_arguments:a, b}, rset_id:{arguments:a, b, c, default_arguments:a, b, c}, rset_unreliable:{arguments:a, b, default_arguments:a, b}, rset_unreliable_id:{arguments:a, b, c, default_arguments:a, b, c}, set:{arguments:a, b, default_arguments:a, b}, set_block_signals:{arguments:a, default_arguments:a}, set_custom_multiplayer:{arguments:a, default_arguments:a}, set_deferred:{arguments:a, b, default_arguments:a, b}, set_display_folded:{arguments:a, default_arguments:a}, set_filename:{arguments:a, default_arguments:a}, set_indexed:{arguments:a, b, default_arguments:a, b}, set_message_translation:{arguments:a, default_arguments:a}, set_meta:{arguments:a, b, default_arguments:a, b}, set_name:{arguments:a, default_arguments:a}, set_network_master:{arguments:a, b, default_arguments:a, b = True}, set_owner:{arguments:a, default_arguments:a}, set_pause_mode:{arguments:a, default_arguments:a}, set_physics_process:{arguments:a, default_arguments:a}, set_physics_process_internal:{arguments:a, default_arguments:a}, set_process:{arguments:a, default_arguments:a}, set_process_input:{arguments:a, default_arguments:a}, set_process_internal:{arguments:a, default_arguments:a}, set_process_priority:{arguments:a, default_arguments:a}, set_process_unhandled_input:{arguments:a, default_arguments:a}, set_process_unhandled_key_input:{arguments:a, default_arguments:a}, set_scene_instance_load_placeholder:{arguments:a, default_arguments:a}, set_script:{arguments:a, default_arguments:a}, subtract:{arguments:a, b, default_arguments:a, b}, sum:{arguments:a, default_arguments:a}, to_string:{arguments:, default_arguments:}, tr:{arguments:a, default_arguments:a}, update_configuration_warning:{arguments:, default_arguments:}} != |Dictionary| {_enter_tree:{arguments:, default_arguments:}, _exit_tree:{arguments:, default_arguments:}, _get:{arguments:a, default_arguments:a}, _get_configuration_warning:{arguments:, default_arguments:}, _get_editor_description:{arguments:, default_arguments:}, _get_import_path:{arguments:, default_arguments:}, _get_property_list:{arguments:, default_arguments:}, _init:{arguments:, default_arguments:}, _input:{arguments:a, default_arguments:a}, _notification:{arguments:a, default_arguments:a}, _physics_process:{arguments:a, default_arguments:a}, _process:{arguments:a, default_arguments:a}, _ready:{arguments:, default_arguments:}, _set:{arguments:a, b, default_arguments:a, b}, _set_editor_description:{arguments:a, default_arguments:a}, _set_import_path:{arguments:a, default_arguments:a}, _to_string:{arguments:, default_arguments:}, _unhandled_input:{arguments:a, default_arguments:a}, _unhandled_key_input:{arguments:a, default_arguments:a}, add:{arguments:a, b, default_arguments:a, b}, add_child:{arguments:a, b, default_arguments:a, b = False}, add_child_below_node:{arguments:a, b, c, default_arguments:a, b, c = False}, add_to_group:{arguments:a, b, default_arguments:a, b = False}, add_user_signal:{arguments:a, b, default_arguments:a, b = []}, call:{arguments:a, default_arguments:a}, call_deferred:{arguments:a, default_arguments:a}, callv:{arguments:a, b, default_arguments:a, b}, can_process:{arguments:, default_arguments:}, can_translate_messages:{arguments:, default_arguments:}, connect:{arguments:a, b, c, d, e, default_arguments:a, b, c, d = [], e = 0}, disconnect:{arguments:a, b, c, default_arguments:a, b, c}, divide:{arguments:a, b, default_arguments:a, b}, duplicate:{arguments:a, default_arguments:a = 15}, emit_signal:{arguments:a, default_arguments:a}, find_node:{arguments:a, b, c, default_arguments:a, b = True, c = True}, find_parent:{arguments:a, default_arguments:a}, free:{arguments:, default_arguments:}, get:{arguments:a, default_arguments:a}, get_child:{arguments:a, default_arguments:a}, get_child_count:{arguments:, default_arguments:}, get_children:{arguments:, default_arguments:}, get_class:{arguments:, default_arguments:}, get_custom_multiplayer:{arguments:, default_arguments:}, get_filename:{arguments:, default_arguments:}, get_groups:{arguments:, default_arguments:}, get_incoming_connections:{arguments:, default_arguments:}, get_index:{arguments:, default_arguments:}, get_indexed:{arguments:a, default_arguments:a}, get_instance_id:{arguments:, default_arguments:}, get_meta:{arguments:a, default_arguments:a}, get_meta_list:{arguments:, default_arguments:}, get_method_list:{arguments:, default_arguments:}, get_multiplayer:{arguments:, default_arguments:}, get_name:{arguments:, default_arguments:}, get_network_master:{arguments:, default_arguments:}, get_node:{arguments:a, default_arguments:a}, get_node_and_resource:{arguments:a, default_arguments:a}, get_node_or_null:{arguments:a, default_arguments:a}, get_owner:{arguments:, default_arguments:}, get_parent:{arguments:, default_arguments:}, get_path:{arguments:, default_arguments:}, get_path_to:{arguments:a, default_arguments:a}, get_pause_mode:{arguments:, default_arguments:}, get_physics_process_delta_time:{arguments:, default_arguments:}, get_position_in_parent:{arguments:, default_arguments:}, get_process_delta_time:{arguments:, default_arguments:}, get_process_priority:{arguments:, default_arguments:}, get_property_list:{arguments:, default_arguments:}, get_scene_instance_load_placeholder:{arguments:, default_arguments:}, get_script:{arguments:, default_arguments:}, get_signal_connection_list:{arguments:a, default_arguments:a}, get_signal_list:{arguments:, default_arguments:}, get_tree:{arguments:, default_arguments:}, get_viewport:{arguments:, default_arguments:}, has_meta:{arguments:a, default_arguments:a}, has_method:{arguments:a, default_arguments:a}, has_node:{arguments:a, default_arguments:a}, has_node_and_resource:{arguments:a, default_arguments:a}, has_signal:{arguments:a, default_arguments:a}, has_user_signal:{arguments:a, default_arguments:a}, is_a_parent_of:{arguments:a, default_arguments:a}, is_blocking_signals:{arguments:, default_arguments:}, is_class:{arguments:a, default_arguments:a}, is_connected:{arguments:a, b, c, default_arguments:a, b, c}, is_displayed_folded:{arguments:, default_arguments:}, is_greater_than:{arguments:a, default_arguments:a}, is_in_group:{arguments:a, default_arguments:a}, is_inside_tree:{arguments:, default_arguments:}, is_network_master:{arguments:, default_arguments:}, is_physics_processing:{arguments:, default_arguments:}, is_physics_processing_internal:{arguments:, default_arguments:}, is_processing:{arguments:, default_arguments:}, is_processing_input:{arguments:, default_arguments:}, is_processing_internal:{arguments:, default_arguments:}, is_processing_unhandled_input:{arguments:, default_arguments:}, is_processing_unhandled_key_input:{arguments:, default_arguments:}, is_queued_for_deletion:{arguments:, default_arguments:}, math_fight:{arguments:, default_arguments:}, move_child:{arguments:a, b, default_arguments:a, b}, multiply:{arguments:a, b, default_arguments:a, b}, notification:{arguments:a, b, default_arguments:a, b = False}, pi:{arguments:, default_arguments:}, print_stray_nodes:{arguments:, default_arguments:}, print_tree:{arguments:, default_arguments:}, print_tree_pretty:{arguments:, default_arguments:}, propagate_call:{arguments:a, b, c, default_arguments:a, b = [], c = False}, propagate_notification:{arguments:a, default_arguments:a}, property_list_changed_notify:{arguments:, default_arguments:}, queue_free:{arguments:, default_arguments:}, raise:{arguments:, default_arguments:}, remove_and_skip:{arguments:, default_arguments:}, remove_child:{arguments:a, default_arguments:a}, remove_from_group:{arguments:a, default_arguments:a}, remove_meta:{arguments:a, default_arguments:a}, replace_by:{arguments:a, b, default_arguments:a, b = False}, request_ready:{arguments:, default_arguments:}, rpc:{arguments:a, default_arguments:a}, rpc_config:{arguments:a, b, default_arguments:a, b}, rpc_id:{arguments:a, b, default_arguments:a, b}, rpc_unreliable:{arguments:a, default_arguments:a}, rpc_unreliable_id:{arguments:a, b, default_arguments:a, b}, rset:{arguments:a, b, default_arguments:a, b}, rset_config:{arguments:a, b, default_arguments:a, b}, rset_id:{arguments:a, b, c, default_arguments:a, b, c}, rset_unreliable:{arguments:a, b, default_arguments:a, b}, rset_unreliable_id:{arguments:a, b, c, default_arguments:a, b, c}, set:{arguments:a, b, default_arguments:a, b}, set_block_signals:{arguments:a, default_arguments:a}, set_custom_multiplayer:{arguments:a, default_arguments:a}, set_deferred:{arguments:a, b, default_arguments:a, b}, set_display_folded:{arguments:a, default_arguments:a}, set_filename:{arguments:a, default_arguments:a}, set_indexed:{arguments:a, b, default_arguments:a, b}, set_message_translation:{arguments:a, default_arguments:a}, set_meta:{arguments:a, b, default_arguments:a, b}, set_name:{arguments:a, default_arguments:a}, set_network_master:{arguments:a, b, default_arguments:a, b = True}, set_owner:{arguments:a, default_arguments:a}, set_pause_mode:{arguments:a, default_arguments:a}, set_physics_process:{arguments:a, default_arguments:a}, set_physics_process_internal:{arguments:a, default_arguments:a}, set_process:{arguments:a, default_arguments:a}, set_process_input:{arguments:a, default_arguments:a}, set_process_internal:{arguments:a, default_arguments:a}, set_process_priority:{arguments:a, default_arguments:a}, set_process_unhandled_input:{arguments:a, default_arguments:a}, set_process_unhandled_key_input:{arguments:a, default_arguments:a}, set_scene_instance_load_placeholder:{arguments:a, default_arguments:a}, set_script:{arguments:a, default_arguments:a}, subtract:{arguments:a, b, default_arguments:a, b}, sum:{arguments:a, default_arguments:a}, to_string:{arguments:, default_arguments:}, tr:{arguments:a, default_arguments:a}, update_configuration_warning:{arguments:, default_arguments:}}",
"success": true
} ],
"context": "When we create two of it for the same script",
"fullname": "test_When_we_create_two_of_it_for_the_same_script",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 3,
"path": "res://tests/integration/script_director.test.gd",
"source": {
"containers": [ "res://tests/integration", "res://tests" ],
"method": "",
"path": "res://tests/integration/script_director.test.gd",
"tags": [  ],
"test": ExtResource( 13 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 3
}, {
"context": "Given a Scene Director",
"methods": [ {
"assertions": [ {
"actual": "|Dictionary| {.:[Reference:1959], A:[Reference:1960], A/B:[Reference:1962], C:[Reference:1961], C/D:[Reference:1963]} is not equal to |Dictionary| {.:[Reference:1981], A:[Reference:1982], A/B:[Reference:1984], C:[Reference:1983], C/D:[Reference:1985]}",
"context": "Then they do not share resources",
"expected": "|Dictionary| {.:[Reference:1959], A:[Reference:1960], A/B:[Reference:1962], C:[Reference:1961], C/D:[Reference:1963]} != |Dictionary| {.:[Reference:1981], A:[Reference:1982], A/B:[Reference:1984], C:[Reference:1983], C/D:[Reference:1985]}",
"success": true
} ],
"context": "When we create two of it for the same scene",
"fullname": "test_When_we_create_two_of_it_for_the_same_scene",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 9999 is equal to |int| 9999",
"context": "Then we get the stubbed return value",
"expected": "|int| 9999 is equal to |int| 9999",
"success": true
} ],
"context": "When we call a method from the root node that we stubbed",
"fullname": "test_When_we_call_a_method_from_the_root_node_that_we_stubbed",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 999 is equal to |int| 999",
"context": "Then we get the stubbed return value",
"expected": "|int| 999 is equal to |int| 999",
"success": true
} ],
"context": "When we call a method from a child node that we stubbed",
"fullname": "test_When_we_call_a_method_from_a_child_node_that_we_stubbed",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 99 is equal to |int| 99",
"context": "Then we get the stubbed return value",
"expected": "|int| 99 is equal to |int| 99",
"success": true
} ],
"context": "When we call a method from a grandchild node that we stubbed",
"fullname": "test_When_we_call_a_method_from_a_grandchild_node_that_we_stubbed",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|NodePath| A is equal to |NodePath| A",
"context": "We have the correct NodePath Set",
"expected": "|NodePath| A is equal to |NodePath| A",
"success": true
} ],
"context": "When we add it to the tree it runs",
"fullname": "test_When_we_add_it_to_the_tree_it_runs",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 5,
"path": "res://tests/integration/scene_director.test.gd",
"source": {
"containers": [ "res://tests/integration", "res://tests" ],
"method": "",
"path": "res://tests/integration/scene_director.test.gd",
"tags": [  ],
"test": ExtResource( 4 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 5
}, {
"context": "Given a Boolean Assertion",
"methods": [ {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then it passes",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When calling asserts.is_true(true)",
"fullname": "test_when_calling_asserts_is_true",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| False == false",
"context": "Then it passes",
"expected": "|bool| False == false",
"success": true
} ],
"context": "When calling asserts.is_false(false)",
"fullname": "test_when_calling_asserts_is_false",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| True != false",
"context": "",
"expected": "|bool| True == false",
"success": false
} ],
"context": " intentional failure",
"fullname": "test_intentional_failure",
"passed": 0,
"success": false,
"time": 0.0,
"total": 1
} ],
"passed": 2,
"path": "res://tests/unit/boolean.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/boolean.test.gd",
"tags": [  ],
"test": ExtResource( 11 ),
"yield_time": 0.0
},
"success": false,
"time_taken": 0.0,
"total": 3
}, {
"context": "Given A File Assertion",
"methods": [ {
"assertions": [ {
"actual": "res://somefile.gd does not exist",
"context": "Then it passes",
"expected": "res://somefile.gd does not exist",
"success": true
} ],
"context": "When calling asserts.file_does_not_exist when there is no file",
"fullname": "test_when_calling_file_does_not_exist_when_there_is_no_file",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": " does not exist",
"context": "Then it passes",
"expected": " does not exist",
"success": true
} ],
"context": "When calling asserts file does not exist when path is empty",
"fullname": "test_when_calling_file_does_not_exist_when_path_is_empty",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "res://tests/unit/file.test.gd exists",
"context": "Then it passes",
"expected": "res://tests/unit/file.test.gd exists",
"success": true
} ],
"context": "When calling asserts.file_exists when the file is this suite",
"fullname": "test_when_calling_file_exists_when_file_is_self",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 3,
"path": "res://tests/unit/file.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/file.test.gd",
"tags": [  ],
"test": ExtResource( 3 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 3
}, {
"context": "Given an Equality Assertion",
"methods": [ {
"assertions": [ {
"actual": "|int| 1 is equal to |int| 1",
"context": "Then it passes",
"expected": "|int| 1 is equal to |int| 1",
"success": true
} ],
"context": "When calling asserts.is_equal(1, 1)",
"fullname": "test_when_calling_is_equal",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 1 is less than |int| 2",
"context": "Then it passes",
"expected": "|int| 1 is less than |int| 2",
"success": true
} ],
"context": "When calling asserts.is_less_than(2, 1)",
"fullname": "test_when_calling_is_less_than",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 2 is equal or greater |int| 1",
"context": "Then it passes",
"expected": "|int| 2 is equal or greater |int| 1",
"success": true
} ],
"context": "When calling asserts.is_equal_or_greater_than(2, 1)",
"fullname": "test_when_calling_is_equal_or_greater_than",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 2 is greater than |int| 1",
"context": "Then it passes",
"expected": "|int| 2 is greater than |int| 1",
"success": true
} ],
"context": "When calling asserts.is_greater_than(2, 1)",
"fullname": "test_when_calling_is_greater_than",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 5 is not equal to |int| 6",
"context": "Then it passes",
"expected": "|int| 5 != |int| 6",
"success": true
} ],
"context": "When callign asserts.is_not_equal(5, 6)",
"fullname": "test_when_calling_is_not_equal",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 1 is equal or less than |int| 1",
"context": "Then it passes!",
"expected": "|int| 1 is equal or less than |int| 1",
"success": true
} ],
"context": "When calling asserts.is_equal_or_less_than(1, 1)",
"fullname": "test_when_calling_is_equal_or_less_than_with_equal_values",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 1 is equal or greater |int| 1",
"context": "Then it passes",
"expected": "|int| 1 is equal or greater |int| 1",
"success": true
} ],
"context": "When calling asserts.is_equal_or_greater_than(1, 1)",
"fullname": "test_when_calling_is_equal_or_greater_than_with_equal_values",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 7,
"path": "res://tests/unit/equality.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/equality.test.gd",
"tags": [  ],
"test": ExtResource( 8 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 7
}, {
"context": "Given a Null Assertion",
"methods": [ {
"assertions": [ {
"actual": "|null| Null == null",
"context": "Then it passes",
"expected": "|null| Null == null",
"success": true
} ],
"context": "When calling asserts.is_null(null)",
"fullname": "test_when_calling_null_is_null",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|Object| [Node:2251] != null",
"context": "Then it passes",
"expected": "|Object| [Node:2251] != null",
"success": true
} ],
"context": "When calling Node is not null",
"fullname": "test_when_calling_node_is_not_null",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|Object| [Deleted Object] == null",
"context": "A Freed Node is null in Engine 3.2.2 or greater",
"expected": "|Object| [Deleted Object] == null",
"success": true
} ],
"context": "When calling freed object is null",
"fullname": "test_when_calling_freed_object_is_not_null",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 3,
"path": "res://tests/unit/null.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/null.test.gd",
"tags": [  ],
"test": ExtResource( 12 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 3
}, {
"context": "Given the Addition Operator",
"methods": [ {
"assertions": [ {
"actual": "|int| 0 is equal to |int| 0",
"context": "",
"expected": "|int| 0 is equal to |int| 0",
"success": true
} ],
"context": "When we subtract 2 from 2 we get 0",
"fullname": "test_subtract",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 2 is equal to |int| 2",
"context": "",
"expected": "|int| 2 is equal to |int| 2",
"success": true
} ],
"context": "When we subtract 5 from 3 we get 2",
"fullname": "test_subtract",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 1 is equal to |int| 1",
"context": "",
"expected": "|int| 1 is equal to |int| 1",
"success": true
} ],
"context": "When we subtract 7 from 6 we get 1",
"fullname": "test_subtract",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 4 is equal to |int| 4",
"context": "",
"expected": "|int| 4 is equal to |int| 4",
"success": true
} ],
"context": "When we add 2 to 2 we get 4",
"fullname": "test_add",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 8 is equal to |int| 8",
"context": "",
"expected": "|int| 8 is equal to |int| 8",
"success": true
} ],
"context": "When we add 5 to 3 we get 8",
"fullname": "test_add",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 13 is equal to |int| 13",
"context": "",
"expected": "|int| 13 is equal to |int| 13",
"success": true
} ],
"context": "When we add 7 to 6 we get 13",
"fullname": "test_add",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 6,
"path": "res://tests/unit/parameters.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/parameters.test.gd",
"tags": [  ],
"test": ExtResource( 16 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 6
}, {
"context": "Given A Range Assertion",
"methods": [ {
"assertions": [ {
"actual": "10 is not in range(0, 10)",
"context": "Then it passes",
"expected": "10 is not in range(0, 10)",
"success": true
} ],
"context": "When calling is (10) not in range (in range(0, 10)",
"fullname": "test_when_calling_is_not_in_range",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "0 is in range(0, 10)",
"context": "Then it passes",
"expected": "0 is in range(0, 10)",
"success": true
} ],
"context": "When calling is (0) in range(0, 10)",
"fullname": "test_when_calling_is_in_range",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 2,
"path": "res://tests/unit/range.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/range.test.gd",
"tags": [  ],
"test": ExtResource( 15 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 2
}, {
"context": "Given a Test Double",
"methods": [ {
"assertions": [ {
"actual": "|int| 9999 is equal to |int| 9999",
"context": "Then it returns the corresponding value when the pattern matches",
"expected": "|int| 9999 is equal to |int| 9999",
"success": true
} ],
"context": "When we call a method that was stubbed with an argument pattern that includes a non-primitive object",
"fullname": "test_When_we_call_a_method_that_was_stubbed_with_an_argument_pattern_that_includes_a_non_primitive_object",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 4 is equal to |int| 4",
"context": "Then we get the correct result",
"expected": "|int| 4 is equal to |int| 4",
"success": true
} ],
"context": "When we call an add(x, y) method that we haven't directed",
"fullname": "test_When_we_call_an_add_method_that_we_have_not_directed",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|null| Null == null",
"context": "Then we get the stubbed value back",
"expected": "|null| Null == null",
"success": true
} ],
"context": "When we stub a method of a doubled inner class",
"fullname": "test_When_we_stub_a_method_of_a_double_inner_class",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|null| Null == null",
"context": "Then we get null",
"expected": "|null| Null == null",
"success": true
} ],
"context": "When we call a method that we have dummied",
"fullname": "test_When_we_call_a_method_that_we_have_dummied",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "add was called",
"context": "Then we can see that it was called at least once",
"expected": "add was called",
"success": true
} ],
"context": "When we call a method that we are spying on",
"fullname": "test_When_we_call_a_method_that_we_are_spying_on",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|String| Jackie is equal to |String| Jackie",
"context": "Then we can double the object successfully",
"expected": "|String| Jackie is equal to |String| Jackie",
"success": true
} ],
"context": "When we pass in dependecies on double",
"fullname": "test_When_we_pass_in_deps_on_double",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|String| Jackie is equal to |String| Jackie",
"context": "Then we can double the object successfully",
"expected": "|String| Jackie is equal to |String| Jackie",
"success": true
} ],
"context": "When we pass in dependecies on direct",
"fullname": "test_When_we_pass_in_deps_on_direct",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 9999 is equal to |int| 9999",
"context": "Then it returns the corresponding value when the partial pattern matches",
"expected": "|int| 9999 is equal to |int| 9999",
"success": true
} ],
"context": "When we call a method that was stubbed with a partial (ie using any()) argument pattern",
"fullname": "test_When_we_call_a_method_that_was_stubbed_with_a_partial_argument_pattern",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|Array| [10, 5] is equal to |Array| [10, 5]",
"context": "Then it returns a value",
"expected": "|Array| [10, 5] is equal to |Array| [10, 5]",
"success": true
} ],
"context": "When we pass an Object with a call_func function",
"fullname": "test_When_we_pass_an_object_with_callfunc_method_as_a_subcall",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 99 is equal to |int| 99",
"context": "Then it returns a value",
"expected": "|int| 99 is equal to |int| 99",
"success": true
} ],
"context": "When we pass a funcref as a subcall that returns",
"fullname": "test_When_we_pass_a_funcref_as_a_subcall_that_returns_a_value",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|Object| [Node:2287] is equal to |Object| [Node:2287]",
"context": "Then it returns that same node",
"expected": "|Object| [Node:2287] is equal to |Object| [Node:2287]",
"success": true
} ],
"context": "When we call a method that we have stubbed to return a node",
"fullname": "test_When_we_call_a_method_that_we_have_stubbed_to_return_a_node",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "method: add was called with arguments: [10, 10]",
"context": "Then we can see that it was called with those arguments",
"expected": "method: add was called with arguments: [10, 10]",
"success": true
} ],
"context": "When we pass arguments to a method call that we are spying on",
"fullname": "test_When_we_pass_arguments_to_a_method_call_that_we_are_spying_on",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 100 is equal to |int| 100",
"context": "Then it returns the default stubbed value when the arguments don't match any pattern",
"expected": "|int| 100 is equal to |int| 100",
"success": true
}, {
"actual": "|int| 1000 is equal to |int| 1000",
"context": "Then it returns the the corresponding value to the pattern the arguments matched",
"expected": "|int| 1000 is equal to |int| 1000",
"success": true
} ],
"context": "When we call a method that was stubbed to return different values based on argument patterns",
"fullname": "test_When_we_call_a_method_that_was_stubbed_to_return_different_values_based_on_argument_patterns",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|float| 6.283185 is equal to |float| 6.283185",
"context": "Then we can call the static methods of that inner double",
"expected": "|float| 6.283185 is equal to |float| 6.283185",
"success": true
} ],
"context": "When we add an doubled inner class to it",
"fullname": "test_When_we_add_a_doubled_inner_class_to_it",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| True is equal to |bool| True",
"context": "Then we can call it",
"expected": "|bool| True is equal to |bool| True",
"success": true
} ],
"context": "When we stubbed a keyworded method by passing in the correct keyword",
"fullname": "test_When_we_stubbed_a_keyword_method_by_passing_in_the_correct_keyword",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "(1, 1) is builtin: Vector2",
"context": "Then we can call methods on it",
"expected": "(1, 1) is builtin: Vector2",
"success": true
} ],
"context": "When we double an inner class",
"fullname": "test_When_we_double_an_inner_class",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 99 is equal to |int| 99",
"context": "Then it affects the state of the double",
"expected": "|int| 99 is equal to |int| 99",
"success": true
} ],
"context": "When we pass a funcref as a subcall",
"fullname": "test_When_we_pass_a_funcref_as_a_subcall",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then it returns true",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we call a method that we have stubbed to return true",
"fullname": "test_When_we_call_a_method_that_we_have_stubbed_to_return_true",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 4 is equal to |int| 4",
"context": "Then it calls its super implementation by default",
"expected": "|int| 4 is equal to |int| 4",
"success": true
}, {
"actual": "|int| 9999 is equal to |int| 9999",
"context": "Then it does not call its super implementation when arguments patterns match a different return value",
"expected": "|int| 9999 is equal to |int| 9999",
"success": true
} ],
"context": "When we call a method that we stubbed to call its super implementation by default",
"fullname": "test_When_we_call_a_method_that_we_stubbed_to_call_its_super_implementation_by_default",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
} ],
"passed": 19,
"path": "res://tests/integration/test_double.test.gd",
"source": {
"containers": [ "res://tests/integration", "res://tests" ],
"method": "",
"path": "res://tests/integration/test_double.test.gd",
"tags": [  ],
"test": ExtResource( 14 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 19
}, {
"context": "Given an Object Assertion",
"methods": [ {
"assertions": [ {
"actual": "[Node:2283] is not freed",
"context": "Then it passes",
"expected": "[Node:2283] is not freed",
"success": true
} ],
"context": "When calling asserts.is_not_freed(unfreed_object)",
"fullname": "test_when_calling_unfreed_object_is_not_freed",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is freed from memory",
"context": "Then it passes",
"expected": "Null is freed from memory",
"success": true
} ],
"context": "When calling asserts.is_freed(freed_object",
"fullname": "test_when_calling_freed_object_is_freed",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:2308] is queued for deletion",
"context": "Then it passes",
"expected": "[Node:2308] is queued for deletion",
"success": true
} ],
"context": "When calling asserts.object_is_queued for deletion after calling queue_free",
"fullname": "test_when_calling_obj_is_queued_for_deletion_after_calling_queue_free",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:2269] has method: title",
"context": "Then it passes",
"expected": "[Node:2269] has method: title",
"success": true
} ],
"context": "When calling has_method('title')",
"fullname": "test_when_calling_has_method_title",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:2335] is not blocking signals",
"context": "Then it passes",
"expected": "[Node:2335] is not blocking signals",
"success": true
} ],
"context": "When calling is not blocking signals while not blocking signals",
"fullname": "test_is_not_blocking_signals",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:2347] is not queued for deletion",
"context": "Then it passes",
"expected": "[Node:2347] is not queued for deletion",
"success": true
} ],
"context": "When calling asserts.object_is_not_for_queued_deletion after not calling queue free()",
"fullname": "test_when_calling_obj_is_not_for_queued_deletion_after_not_calling_queue_free",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:2360] is blocking signals",
"context": "Then it passes",
"expected": "[Node:2360] is blocking signals",
"success": true
} ],
"context": "When calling is blocking signals while blocking signals",
"fullname": "test_is_blocking_signals",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:2269] has meta: dummy",
"context": "Then it passes",
"expected": "[Node:2269] has meta: dummy",
"success": true
}, {
"actual": "[Node:2269] has meta: dummy",
"context": "Then it passes",
"expected": "[Node:2269] has meta: dummy",
"success": true
} ],
"context": "When calling asserts.object_has_meta() after adding metadata",
"fullname": "test_when_calling_has_meta_after_adding_metadata",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "[Node:2269].builtin_dummy is connected to [Node:2269].title",
"context": "Then it passes",
"expected": "[Node:2269].builtin_dummy is connected to [Node:2269].title",
"success": true
} ],
"context": "When calling asserts object is connected with a valid connection",
"fullname": "test_when_calling_obj_is_connected_with_a_real_connection",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:2269] does not have user signal: false_signal",
"context": "Then it passes",
"expected": "[Node:2269] does not have user signal: false_signal",
"success": true
} ],
"context": "When calling obj_does_not_have_user_signal with fake signal",
"fullname": "test_when_calling_does_not_have_user_signal",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:2269] has user signal: dummy_signal",
"context": "Then it passes",
"expected": "[Node:2269] has user signal: dummy_signal",
"success": true
} ],
"context": "When calling obj_has_user_signal after adding a signal",
"fullname": "test_when_calling_has_user_signal_after_adding_a_signal",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:2269].builtin_dummy is not connected to [Node:2269].title",
"context": "Then it passes",
"expected": "[Node:2269].builtin_dummy is not connected to [Node:2269].title",
"success": true
} ],
"context": "When calling asserts object is not connected with an invalid connection",
"fullname": "test_when_calling_obj_is_not_connected_with_an_invalid_connection",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:2269] does not have meta: confusing",
"context": "Then it passes",
"expected": "[Node:2269] does not have meta: confusing",
"success": true
} ],
"context": "When calling asserts.object_has_meta with real key but null val",
"fullname": "test_when_calling_does_not_have_meta_real_key_null_value_pair",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:2269] does not have user signal: builtin_dummy",
"context": "Then it passes",
"expected": "[Node:2269] does not have user signal: builtin_dummy",
"success": true
} ],
"context": "When calling does not have user signal with class signal",
"fullname": "test_when_calling_does_not_have_user_signal_with_class_signal_constant",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:2269] does not have meta: bad_meta",
"context": "Then it passes",
"expected": "[Node:2269] does not have meta: bad_meta",
"success": true
} ],
"context": "When calling asserts.object_does_not_have_meta()",
"fullname": "test_when_calling_does_not_have_meta",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 15,
"path": "res://tests/unit/object.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/object.test.gd",
"tags": [  ],
"test": ExtResource( 7 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 15
}, {
"context": "Given an Is Instance of class/type Assertion",
"methods": [ {
"assertions": [ {
"actual": "|PoolVector2Array| [] != null",
"context": "vec2s is not null",
"expected": "|PoolVector2Array| [] != null",
"success": true
}, {
"actual": "[] is builtin: PoolVector2Array",
"context": "Then it passes",
"expected": "[] is builtin: PoolVector2Array",
"success": true
} ],
"context": "When calling is asserts.is_PoolVector2Array(vec2s: PoolVector2Array)",
"fullname": "test_when_calling_is_PoolVector2Array",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|PoolIntArray| [] != null",
"context": "ints is not null",
"expected": "|PoolIntArray| [] != null",
"success": true
}, {
"actual": "[] is builtin: PoolIntArray",
"context": "Then it passes",
"expected": "[] is builtin: PoolIntArray",
"success": true
} ],
"context": "When calling asserts.is_PoolIntArray(ints: PoolIntArray)",
"fullname": "test_when_calling_is_PoolIntArray",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|Rect2| (0, 0, 0, 0) != null",
"context": "rect2 is not null",
"expected": "|Rect2| (0, 0, 0, 0) != null",
"success": true
}, {
"actual": "(0, 0, 0, 0) is builtin: Rect2",
"context": "Then it passes",
"expected": "(0, 0, 0, 0) is builtin: Rect2",
"success": true
} ],
"context": "When calling asserts.is_Rect2(rect2: Rect2)",
"fullname": "test_when_calling_is_Rect2",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|RID| [RID] != null",
"context": "rid is not null",
"expected": "|RID| [RID] != null",
"success": true
}, {
"actual": "[RID] is builtin: RID",
"context": "Then it passes",
"expected": "[RID] is builtin: RID",
"success": true
} ],
"context": "When calling asserts.is_RID(rid: RID)",
"fullname": "test_when_calling_is_RID",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|NodePath| . != null",
"context": "@'Parent/Child' is not null",
"expected": "|NodePath| . != null",
"success": true
}, {
"actual": ". is builtin: NodePath",
"context": "Then it passes",
"expected": ". is builtin: NodePath",
"success": true
} ],
"context": "When calling asserts.is_NodePath(@'Parent/Child')",
"fullname": "test_when_calling_is_NodePath",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|PoolVector3Array| [] != null",
"context": "vec3s is not null",
"expected": "|PoolVector3Array| [] != null",
"success": true
}, {
"actual": "[] is builtin: PoolVector3Array",
"context": "Then it passes",
"expected": "[] is builtin: PoolVector3Array",
"success": true
} ],
"context": "When calling is asserts.is_PoolVector3Array(vec3s: PoolVector3Array)",
"fullname": "test_when_calling_is_PoolVector3Array",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|Transform| 1, 0, 0, 0, 1, 0, 0, 0, 1 - 0, 0, 0 != null",
"context": "transform is not null",
"expected": "|Transform| 1, 0, 0, 0, 1, 0, 0, 0, 1 - 0, 0, 0 != null",
"success": true
}, {
"actual": "1, 0, 0, 0, 1, 0, 0, 0, 1 - 0, 0, 0 is builtin: Transform",
"context": "Then it passes",
"expected": "1, 0, 0, 0, 1, 0, 0, 0, 1 - 0, 0, 0 is builtin: Transform",
"success": true
} ],
"context": "When calling asserts.is_Transform(transform: Transform)",
"fullname": "test_when_calling_is_Transform",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|PoolColorArray| [PoolColorArray] != null",
"context": "colors is not null",
"expected": "|PoolColorArray| [PoolColorArray] != null",
"success": true
}, {
"actual": "[PoolColorArray] is builtin: PoolColorArray",
"context": "Then it passes",
"expected": "[PoolColorArray] is builtin: PoolColorArray",
"success": true
} ],
"context": "When calling asserts.is_PoolColorArray(colors: PoolColorArray)",
"fullname": "test_when_calling_is_PoolColorArray",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|Quat| (0, 0, 0, 1) != null",
"context": "quat is not null",
"expected": "|Quat| (0, 0, 0, 1) != null",
"success": true
}, {
"actual": "(0, 0, 0, 1) is builtin: Quat",
"context": "Then it passes",
"expected": "(0, 0, 0, 1) is builtin: Quat",
"success": true
} ],
"context": "When calling asserts.is_Quat(quat: Quat)",
"fullname": "test_when_calling_is_Quat",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|String|  != null",
"context": "strs is not null",
"expected": "|String|  != null",
"success": true
}, {
"actual": " is builtin: String",
"context": "Then it passes",
"expected": " is builtin: String",
"success": true
} ],
"context": "When calling asserts.is_string(strs: String)",
"fullname": "test_when_calling_is_string",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|PoolStringArray| [] != null",
"context": "strs is not null",
"expected": "|PoolStringArray| [] != null",
"success": true
}, {
"actual": "[] is builtin: PoolStringArray",
"context": "Then it passes",
"expected": "[] is builtin: PoolStringArray",
"success": true
} ],
"context": "When calling is asserts.is_PoolStringArray(strs: PoolStringArray)",
"fullname": "test_when_calling_is_PoolStringArray",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|Vector2| (0, 0) != null",
"context": "vec2 is not null",
"expected": "|Vector2| (0, 0) != null",
"success": true
}, {
"actual": "(0, 0) is builtin: Vector2",
"context": "Then it passes",
"expected": "(0, 0) is builtin: Vector2",
"success": true
} ],
"context": "When calling asserts.is_Vector2(vec2)",
"fullname": "test_when_calling_is_Vector2",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|Vector3| (0, 0, 0) != null",
"context": "vec3 is not null",
"expected": "|Vector3| (0, 0, 0) != null",
"success": true
}, {
"actual": "(0, 0, 0) is builtin: Vector3",
"context": "Then it passes",
"expected": "(0, 0, 0) is builtin: Vector3",
"success": true
} ],
"context": "When calling asserts.is_Vector3(vec3: Vector3",
"fullname": "test_when_calling_is_Vector3",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|Plane| 0, 0, 0, 0 != null",
"context": "plane is not null",
"expected": "|Plane| 0, 0, 0, 0 != null",
"success": true
}, {
"actual": "0, 0, 0, 0 is builtin: Plane",
"context": "then it passes",
"expected": "0, 0, 0, 0 is builtin: Plane",
"success": true
} ],
"context": "When calling asserts.is_Plane(plane: Plane())",
"fullname": "test_when_calling_is_Plane",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|PoolByteArray| [PoolByteArray] != null",
"context": "bytes is not null",
"expected": "|PoolByteArray| [PoolByteArray] != null",
"success": true
}, {
"actual": "[PoolByteArray] is builtin: PoolByteArray",
"context": "Then it passes",
"expected": "[PoolByteArray] is builtin: PoolByteArray",
"success": true
} ],
"context": "When calling asserts.is_PoolByteArray(bytes: PoolByteArray)",
"fullname": "test_when_calling_is_PoolByteArray",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|Color| 0,0,0,1 != null",
"context": "color is not null",
"expected": "|Color| 0,0,0,1 != null",
"success": true
}, {
"actual": "0,0,0,1 is builtin: Color",
"context": "Then it passes",
"expected": "0,0,0,1 is builtin: Color",
"success": true
} ],
"context": "When calling asserts.is_color(color: Color)",
"fullname": "test_when_calling_is_Color",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "1 is builtin: float",
"context": "Then it passes",
"expected": "1 is builtin: float",
"success": true
} ],
"context": "When calling asserts.is_float(1.0)",
"fullname": "test_when_calling_is_float",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|PoolRealArray| [] != null",
"context": "reals is not null",
"expected": "|PoolRealArray| [] != null",
"success": true
}, {
"actual": "[] is builtin: PoolRealArray",
"context": "Then it passes",
"expected": "[] is builtin: PoolRealArray",
"success": true
} ],
"context": "When calling is asserts.is_PoolRealArray(reals: PoolRealArray)",
"fullname": "test_when_calling_is_PoolRealArray",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|Transform2D| ((1, 0), (0, 1), (0, 0)) != null",
"context": "transform2D is not null",
"expected": "|Transform2D| ((1, 0), (0, 1), (0, 0)) != null",
"success": true
}, {
"actual": "((1, 0), (0, 1), (0, 0)) is builtin: Transform2D",
"context": "Then it passes",
"expected": "((1, 0), (0, 1), (0, 0)) is builtin: Transform2D",
"success": true
} ],
"context": "When calling asserts.is_Transform(transform2D: Transform2D)",
"fullname": "test_when_calling_is_Transform2D",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "1 is builtin: int",
"context": "Then it passes",
"expected": "1 is builtin: int",
"success": true
} ],
"context": "When callign asserts.is_int(1)",
"fullname": "test_when_calling_is_int",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|Object| [Node:2420] != null",
"context": "node is not null",
"expected": "|Object| [Node:2420] != null",
"success": true
}, {
"actual": "[Node:2420] is builtin: Object",
"context": "An instance of node is an Object",
"expected": "[Node:2420] is builtin: Object",
"success": true
} ],
"context": "When calling is asserts.object(node: Node)",
"fullname": "test_when_calling_is_object",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|Basis| ((1, 0, 0), (0, 1, 0), (0, 0, 1)) != null",
"context": "basis is not null",
"expected": "|Basis| ((1, 0, 0), (0, 1, 0), (0, 0, 1)) != null",
"success": true
}, {
"actual": "((1, 0, 0), (0, 1, 0), (0, 0, 1)) is builtin: Basis",
"context": "Then it passes",
"expected": "((1, 0, 0), (0, 1, 0), (0, 0, 1)) is builtin: Basis",
"success": true
} ],
"context": "When calling asserts.is_basis(basis: Basis",
"fullname": "test_when_calling_is_Basis",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "{} is builtin: Dictionary",
"context": "Then it passes",
"expected": "{} is builtin: Dictionary",
"success": true
} ],
"context": "When calling asserts.is_Dictionary({})",
"fullname": "test_when_calling_is_Dictionary",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|Array| [] != null",
"context": "array is not null",
"expected": "|Array| [] != null",
"success": true
}, {
"actual": "[] is builtin: Array",
"context": "Then it passes",
"expected": "[] is builtin: Array",
"success": true
} ],
"context": "When calling asserts.is_Array(array: Array)",
"fullname": "test_when_calling_is_Array",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|AABB| 0, 0, 0 - 0, 0, 0 != null",
"context": "AABB is not null",
"expected": "|AABB| 0, 0, 0 - 0, 0, 0 != null",
"success": true
}, {
"actual": "0, 0, 0 - 0, 0, 0 is builtin: AABB",
"context": "Then it passes",
"expected": "0, 0, 0 - 0, 0, 0 is builtin: AABB",
"success": true
} ],
"context": "When calling asserts.is_AABB(aabb: AABB)",
"fullname": "test_when_calling_is_AABB",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "True is builtin: bool",
"context": "Then it passes",
"expected": "True is builtin: bool",
"success": true
} ],
"context": "When calling asserts.is_bool(true)",
"fullname": "test_when_calling_is_bool",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 26,
"path": "res://tests/unit/is_instance.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/is_instance.test.gd",
"tags": [  ],
"test": ExtResource( 6 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 26
}, {
"context": "Given an Is Not Instance of class/type Assertion",
"methods": [ {
"assertions": [ {
"actual": "Null is not builtin: Array",
"context": "Then it passes",
"expected": "Null is not builtin: Array",
"success": true
} ],
"context": "when calling asserts.is_not_Array(null)",
"fullname": "test_when_calling_is_not_Array",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Basis",
"context": "Then it passes",
"expected": "Null is not builtin: Basis",
"success": true
} ],
"context": "when calling asserts.is_not_Basis(null)",
"fullname": "test_when_calling_is_not_Basis",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: AABB",
"context": "Then it passes",
"expected": "Null is not builtin: AABB",
"success": true
} ],
"context": "when calling asserts.is_not_AABB(null)",
"fullname": "test_when_calling_is_not_AABB",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: PoolVector2Array",
"context": "Then it passes",
"expected": "Null is not builtin: PoolVector2Array",
"success": true
} ],
"context": "when calling asserts.is_not_PoolVector2Array(null)",
"fullname": "test_when_calling_is_not_PoolVector2Array",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Vector2",
"context": "Then it passes",
"expected": "Null is not builtin: Vector2",
"success": true
} ],
"context": "when calling asserts.is_not_Vector2(null)",
"fullname": "test_when_calling_is_not_Vector2",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: int",
"context": "Then it passes",
"expected": "Null is not builtin: int",
"success": true
} ],
"context": "when calling asserts.is_not_int(null)",
"fullname": "test_when_calling_is_not_int",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Transform",
"context": "Then it passes",
"expected": "Null is not builtin: Transform",
"success": true
} ],
"context": "when calling asserts.is_not_Transform(null)",
"fullname": "test_when_calling_is_not_Transform",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: float",
"context": "Then it passes",
"expected": "Null is not builtin: float",
"success": true
} ],
"context": "when calling asserts.is_not_float(null)",
"fullname": "test_when_calling_is_not_float",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: String",
"context": "Then it passes",
"expected": "Null is not builtin: String",
"success": true
} ],
"context": "when calling asserts.is_not_String(null)",
"fullname": "test_when_calling_is_not_String",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: NodePath",
"context": "Then it passes",
"expected": "Null is not builtin: NodePath",
"success": true
} ],
"context": "when calling asserts.is_not_NodePath(null)",
"fullname": "test_when_calling_is_not_NodePath",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Plane",
"context": "Then it passes",
"expected": "Null is not builtin: Plane",
"success": true
} ],
"context": "when calling asserts.is_not_Plane(null)",
"fullname": "test_when_calling_is_not_Plane",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: PoolByteArray",
"context": "Then it passes",
"expected": "Null is not builtin: PoolByteArray",
"success": true
} ],
"context": "when calling asserts.is_not_PoolByteArray(null)",
"fullname": "test_when_calling_is_not_PoolByteArray",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Transform2D",
"context": "Then it passes",
"expected": "Null is not builtin: Transform2D",
"success": true
} ],
"context": "when calling asserts.is_not_Transform2D(null)",
"fullname": "test_when_calling_is_not_Transform2D",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: PoolColorArray",
"context": "Then it passes",
"expected": "Null is not builtin: PoolColorArray",
"success": true
} ],
"context": "when calling asserts.is_not_PoolColorArray(null)",
"fullname": "test_when_calling_is_not_PoolColorArray",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: PoolStringArray",
"context": "Then it passes",
"expected": "Null is not builtin: PoolStringArray",
"success": true
} ],
"context": "when calling asserts.is_not_PoolStringArray(null)",
"fullname": "test_when_calling_is_not_PoolStringArray",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Color",
"context": "Then it passes",
"expected": "Null is not builtin: Color",
"success": true
} ],
"context": "when calling asserts.is_not_Color(null)",
"fullname": "test_when_calling_is_not_Color",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Dictionary",
"context": "Then it passes",
"expected": "Null is not builtin: Dictionary",
"success": true
} ],
"context": "when calling asserts.is_not_Dictionary(null)",
"fullname": "test_when_calling_is_not_Dictionary",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: PoolRealArray",
"context": "Then it passes",
"expected": "Null is not builtin: PoolRealArray",
"success": true
} ],
"context": "when calling asserts.is_not_PoolRealArray(null)",
"fullname": "test_when_calling_is_not_PoolRealArray",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: PoolVector3Array",
"context": "Then it passes",
"expected": "Null is not builtin: PoolVector3Array",
"success": true
} ],
"context": "when calling asserts.is_not_PoolVector3Array(null)",
"fullname": "test_when_calling_is_not_PoolVector3Array",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: PoolIntArray",
"context": "Then it passes",
"expected": "Null is not builtin: PoolIntArray",
"success": true
} ],
"context": "when calling asserts.is_not_PoolIntArray(null)",
"fullname": "test_when_calling_is_not_PoolIntArray",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Quat",
"context": "Then it passes",
"expected": "Null is not builtin: Quat",
"success": true
} ],
"context": "when calling asserts.is_not_Quat(null)",
"fullname": "test_when_calling_is_not_Quat",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Rect2",
"context": "Then it passes",
"expected": "Null is not builtin: Rect2",
"success": true
} ],
"context": "when calling asserts.is_not_Rect2(null)",
"fullname": "test_when_calling_is_not_Rect2",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Vector3",
"context": "Then it passes",
"expected": "Null is not builtin: Vector3",
"success": true
} ],
"context": "when calling asserts.is_not_Vector3(null)",
"fullname": "test_when_calling_is_not_Vector3",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: bool",
"context": "Then it passes",
"expected": "Null is not builtin: bool",
"success": true
} ],
"context": "when calling asserts.is_not_bool(null)",
"fullname": "test_when_calling_is_not_bool",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Object",
"context": "Then it passes",
"expected": "Null is not builtin: Object",
"success": true
} ],
"context": "when calling asserts.is_not_Object(null)",
"fullname": "test_when_calling_is_not_Object",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: RID",
"context": "Then it passes",
"expected": "Null is not builtin: RID",
"success": true
} ],
"context": "when calling asserts.is_not_RID(null)",
"fullname": "test_when_calling_is_not_RID",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 26,
"path": "res://tests/unit/is_not_instance.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/is_not_instance.test.gd",
"tags": [  ],
"test": ExtResource( 2 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 26
}, {
"context": "Given a String Assertion",
"methods": [ {
"assertions": [ {
"actual": "lorem impsum begins with lorem",
"context": "Then it passes",
"expected": "lorem impsum begins with lorem",
"success": true
} ],
"context": "When calling asserts.string_begins_with('lorem', 'lorem impsum')",
"fullname": "test_when_calling_string_begins_with",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "lorem impsum ends with impsum",
"context": "Then it passes",
"expected": "lorem impsum ends with impsum",
"success": true
} ],
"context": "When calling asserts.string_ends_with('impsum', 'lorem impsum')",
"fullname": "test_when_calling_string_ends_with",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "impsum does not contain beem im",
"context": "Then it passes",
"expected": "impsum does not contain beem im",
"success": true
} ],
"context": "When calling asserts.string_does_not_contain('em im', 'impsum')",
"fullname": "test_when_calling_string_does_not_contain",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "impsum does not begin with bleh lorem",
"context": "Then it passes",
"expected": "impsum does not begin with bleh lorem",
"success": true
} ],
"context": "When calling asserts.string_does_not_begin_with('lorem', 'impsum')",
"fullname": "test_when_calling_string_does_not_begin_with",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "lorem impsum contains em im",
"context": "Then it passes",
"expected": "lorem impsum contains em im",
"success": true
} ],
"context": "When calling asserts.string_contains('em im', 'lorem impsum')",
"fullname": "test_when_calling_string_contains",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "impsum does not end with lorem",
"context": "Then it passes",
"expected": "impsum does not end with lorem",
"success": true
} ],
"context": "When calling asserts.string_does_not_end_with('lorem', 'impsum')",
"fullname": "test_when_calling_string_does_not_end_with",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 6,
"path": "res://tests/unit/string.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/string.test.gd",
"tags": [  ],
"test": ExtResource( 9 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 6
}, {
"context": "Dummy Passing Test",
"methods": [ {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Passing!",
"expected": "|bool| True == true",
"success": true
} ],
"context": "This method passes",
"fullname": "test_this_method_passes",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 1,
"path": "res://tests/unit/suite.test.gd.DummyOne",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/suite.test.gd.DummyOne",
"tags": [  ],
"test": SubResource( 15 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 1
}, {
"context": "Dummy Test 2",
"methods": [ {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Passing!",
"expected": "|bool| True == true",
"success": true
} ],
"context": "This method passes",
"fullname": "test_this_method_passes",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 1,
"path": "res://tests/unit/suite.test.gd.DummyTwo",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/suite.test.gd.DummyTwo",
"tags": [  ],
"test": SubResource( 16 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 1
}, {
"context": "Given a Test Script",
"methods": [ {
"assertions": [ {
"actual": "|bool| True == true",
"context": "",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|int| 2 is equal to |int| 2",
"context": "",
"expected": "|int| 2 is equal to |int| 2",
"success": true
} ],
"context": " when we omit context we can see expected and got under method",
"fullname": "test_when_we_omit_context_we_can_see_expected_and_got_under_method",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "if the test didn't break this works",
"expected": "|bool| True == true",
"success": true
} ],
"context": " we can omit describe",
"fullname": "test_we_can_omit_describe",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 10 is greater than |int| 1",
"context": "We get an array of multiple values back",
"expected": "|int| 10 is greater than |int| 1",
"success": true
}, {
"actual": "|int| 0 is not equal to |int| 9",
"context": "With different values",
"expected": "|int| 0 != |int| 9",
"success": true
}, {
"actual": "|int| 10 is greater than |int| 1",
"context": "And we can track multiple properties",
"expected": "|int| 10 is greater than |int| 1",
"success": true
} ],
"context": "When we record properties",
"fullname": "test_we_can_record_properties",
"passed": 3,
"success": true,
"time": 0.0,
"total": 3
} ],
"passed": 3,
"path": "res://tests/unit/test.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/test.test.gd",
"tags": [  ],
"test": ExtResource( 19 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 3
}, {
"context": "Given a Signal Watcher",
"methods": [ {
"assertions": [ {
"actual": "signal: example was emitted from [Node:2441]",
"context": "Then it captures the emitted signal",
"expected": "signal: example was emitted from [Node:2441]",
"success": true
} ],
"context": "When we watch and emit a signal",
"fullname": "test_When_we_watch_and_emit_a_signal",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "signal: multiple was emitted from [Node:2441] 2",
"context": "Then we can track how many times we emitted it",
"expected": "signal: multiple was emitted from [Node:2441] 2",
"success": true
} ],
"context": "When we watch and signal and emit it multiple times",
"fullname": "test_When_we_watch_a_signal_and_emit_it_multiple_times",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Signal: example was not emitted from [Node:2441]",
"context": "Then it does not capture the non-emitted signal",
"expected": "Signal: example was not emitted from [Node:2441]",
"success": true
} ],
"context": "When we watch and do not emit a signal",
"fullname": "test_When_we_watch_and_do_not_emit_a_signal",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Signal: example was emitted from [Node:2441] with arguments: [1, 20, 5]",
"context": "Then it captures any arguments that where passed when the signal was emitted",
"expected": "Signal: example was emitted from [Node:2441] with arguments: [1, 20, 5]",
"success": true
} ],
"context": "When we watch a signal from an object with no bound variables",
"fullname": "test_When_we_watch_a_signal_from_an_object_with_no_bound_variables",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 4,
"path": "res://tests/unit/watcher.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/watcher.test.gd",
"tags": [  ],
"test": ExtResource( 17 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 4
}, {
"context": "Default Args",
"methods": [ {
"assertions": [ {
"actual": "|bool| True == true",
"context": "If this method can be reached then we have doubled a script with default argument(s) properly!",
"expected": "|bool| True == true",
"success": true
} ],
"context": " default arguments of interpolate property",
"fullname": "test_default_arguments_of_interpolate_property",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 1,
"path": "res://tests/integration/default_args.test.gd",
"source": {
"containers": [ "res://tests/integration", "res://tests" ],
"method": "",
"path": "res://tests/integration/default_args.test.gd",
"tags": [  ],
"test": ExtResource( 10 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 1
}, {
"context": "Given a Boolean Assertion",
"methods": [ {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then it passes",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When calling asserts.is_true(true)",
"fullname": "test_when_calling_asserts_is_true",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| False == false",
"context": "Then it passes",
"expected": "|bool| False == false",
"success": true
} ],
"context": "When calling asserts.is_false(false)",
"fullname": "test_when_calling_asserts_is_false",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| True != false",
"context": "",
"expected": "|bool| True == false",
"success": false
} ],
"context": " intentional failure",
"fullname": "test_intentional_failure",
"passed": 0,
"success": false,
"time": 0.0,
"total": 1
} ],
"passed": 2,
"path": "res://tests/integration/boolean.test.gd",
"source": {
"containers": [ "res://tests/integration", "res://tests" ],
"method": "",
"path": "res://tests/integration/boolean.test.gd",
"tags": [  ],
"test": ExtResource( 20 ),
"yield_time": 0.0
},
"success": false,
"time_taken": 0.0,
"total": 3
}, {
"context": "Given is_on_floor",
"methods": [ {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then it can be stubbed",
"expected": "|bool| True == true",
"success": true
} ],
"context": "From a user-defined script",
"fullname": "test_stubbing_is_on_floor_method_from_user_defined_class",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then it can be stubbed",
"expected": "|bool| True == true",
"success": true
} ],
"context": "From a built-in KinematicBody2D2",
"fullname": "test_stubbing_is_on_floor_method_from_builtin_class2",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then it can be stubbed",
"expected": "|bool| True == true",
"success": true
} ],
"context": "From a child node of a scene without scripts",
"fullname": "test_stubbing_is_on_floor_as_child_node_with_no_script",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 3,
"path": "res://tests/integration/on_floor.test.gd",
"source": {
"containers": [ "res://tests/integration", "res://tests" ],
"method": "",
"path": "res://tests/integration/on_floor.test.gd",
"tags": [  ],
"test": ExtResource( 5 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 3
}, {
"context": "Given a Script Director",
"methods": [ {
"assertions": [ {
"actual": "[Reference:2577] is instance of class: [GDScript:1428]",
"context": "Then we get that inner class back",
"expected": "[Reference:2577] is instance of class: [GDScript:1428]",
"success": true
} ],
"context": "When we double an inner class",
"fullname": "test_When_we_double_an_inner_class",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|Object| [Node:2636] is equal to |Object| [Node:2636]",
"context": "Then we get the same double back",
"expected": "|Object| [Node:2636] is equal to |Object| [Node:2636]",
"success": true
} ],
"context": "When we call the double the second time",
"fullname": "test_When_we_call_double_a_second_time_on",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|Dictionary| {_enter_tree:{arguments:, default_arguments:}, _exit_tree:{arguments:, default_arguments:}, _get:{arguments:a, default_arguments:a}, _get_configuration_warning:{arguments:, default_arguments:}, _get_editor_description:{arguments:, default_arguments:}, _get_import_path:{arguments:, default_arguments:}, _get_property_list:{arguments:, default_arguments:}, _init:{arguments:, default_arguments:}, _input:{arguments:a, default_arguments:a}, _notification:{arguments:a, default_arguments:a}, _physics_process:{arguments:a, default_arguments:a}, _process:{arguments:a, default_arguments:a}, _ready:{arguments:, default_arguments:}, _set:{arguments:a, b, default_arguments:a, b}, _set_editor_description:{arguments:a, default_arguments:a}, _set_import_path:{arguments:a, default_arguments:a}, _to_string:{arguments:, default_arguments:}, _unhandled_input:{arguments:a, default_arguments:a}, _unhandled_key_input:{arguments:a, default_arguments:a}, add:{arguments:a, b, default_arguments:a, b}, add_child:{arguments:a, b, default_arguments:a, b = False}, add_child_below_node:{arguments:a, b, c, default_arguments:a, b, c = False}, add_to_group:{arguments:a, b, default_arguments:a, b = False}, add_user_signal:{arguments:a, b, default_arguments:a, b = []}, call:{arguments:a, default_arguments:a}, call_deferred:{arguments:a, default_arguments:a}, callv:{arguments:a, b, default_arguments:a, b}, can_process:{arguments:, default_arguments:}, can_translate_messages:{arguments:, default_arguments:}, connect:{arguments:a, b, c, d, e, default_arguments:a, b, c, d = [], e = 0}, disconnect:{arguments:a, b, c, default_arguments:a, b, c}, divide:{arguments:a, b, default_arguments:a, b}, duplicate:{arguments:a, default_arguments:a = 15}, emit_signal:{arguments:a, default_arguments:a}, find_node:{arguments:a, b, c, default_arguments:a, b = True, c = True}, find_parent:{arguments:a, default_arguments:a}, free:{arguments:, default_arguments:}, get:{arguments:a, default_arguments:a}, get_child:{arguments:a, default_arguments:a}, get_child_count:{arguments:, default_arguments:}, get_children:{arguments:, default_arguments:}, get_class:{arguments:, default_arguments:}, get_custom_multiplayer:{arguments:, default_arguments:}, get_filename:{arguments:, default_arguments:}, get_groups:{arguments:, default_arguments:}, get_incoming_connections:{arguments:, default_arguments:}, get_index:{arguments:, default_arguments:}, get_indexed:{arguments:a, default_arguments:a}, get_instance_id:{arguments:, default_arguments:}, get_meta:{arguments:a, default_arguments:a}, get_meta_list:{arguments:, default_arguments:}, get_method_list:{arguments:, default_arguments:}, get_multiplayer:{arguments:, default_arguments:}, get_name:{arguments:, default_arguments:}, get_network_master:{arguments:, default_arguments:}, get_node:{arguments:a, default_arguments:a}, get_node_and_resource:{arguments:a, default_arguments:a}, get_node_or_null:{arguments:a, default_arguments:a}, get_owner:{arguments:, default_arguments:}, get_parent:{arguments:, default_arguments:}, get_path:{arguments:, default_arguments:}, get_path_to:{arguments:a, default_arguments:a}, get_pause_mode:{arguments:, default_arguments:}, get_physics_process_delta_time:{arguments:, default_arguments:}, get_position_in_parent:{arguments:, default_arguments:}, get_process_delta_time:{arguments:, default_arguments:}, get_process_priority:{arguments:, default_arguments:}, get_property_list:{arguments:, default_arguments:}, get_scene_instance_load_placeholder:{arguments:, default_arguments:}, get_script:{arguments:, default_arguments:}, get_signal_connection_list:{arguments:a, default_arguments:a}, get_signal_list:{arguments:, default_arguments:}, get_tree:{arguments:, default_arguments:}, get_viewport:{arguments:, default_arguments:}, has_meta:{arguments:a, default_arguments:a}, has_method:{arguments:a, default_arguments:a}, has_node:{arguments:a, default_arguments:a}, has_node_and_resource:{arguments:a, default_arguments:a}, has_signal:{arguments:a, default_arguments:a}, has_user_signal:{arguments:a, default_arguments:a}, is_a_parent_of:{arguments:a, default_arguments:a}, is_blocking_signals:{arguments:, default_arguments:}, is_class:{arguments:a, default_arguments:a}, is_connected:{arguments:a, b, c, default_arguments:a, b, c}, is_displayed_folded:{arguments:, default_arguments:}, is_greater_than:{arguments:a, default_arguments:a}, is_in_group:{arguments:a, default_arguments:a}, is_inside_tree:{arguments:, default_arguments:}, is_network_master:{arguments:, default_arguments:}, is_physics_processing:{arguments:, default_arguments:}, is_physics_processing_internal:{arguments:, default_arguments:}, is_processing:{arguments:, default_arguments:}, is_processing_input:{arguments:, default_arguments:}, is_processing_internal:{arguments:, default_arguments:}, is_processing_unhandled_input:{arguments:, default_arguments:}, is_processing_unhandled_key_input:{arguments:, default_arguments:}, is_queued_for_deletion:{arguments:, default_arguments:}, math_fight:{arguments:, default_arguments:}, move_child:{arguments:a, b, default_arguments:a, b}, multiply:{arguments:a, b, default_arguments:a, b}, notification:{arguments:a, b, default_arguments:a, b = False}, pi:{arguments:, default_arguments:}, print_stray_nodes:{arguments:, default_arguments:}, print_tree:{arguments:, default_arguments:}, print_tree_pretty:{arguments:, default_arguments:}, propagate_call:{arguments:a, b, c, default_arguments:a, b = [], c = False}, propagate_notification:{arguments:a, default_arguments:a}, property_list_changed_notify:{arguments:, default_arguments:}, queue_free:{arguments:, default_arguments:}, raise:{arguments:, default_arguments:}, remove_and_skip:{arguments:, default_arguments:}, remove_child:{arguments:a, default_arguments:a}, remove_from_group:{arguments:a, default_arguments:a}, remove_meta:{arguments:a, default_arguments:a}, replace_by:{arguments:a, b, default_arguments:a, b = False}, request_ready:{arguments:, default_arguments:}, rpc:{arguments:a, default_arguments:a}, rpc_config:{arguments:a, b, default_arguments:a, b}, rpc_id:{arguments:a, b, default_arguments:a, b}, rpc_unreliable:{arguments:a, default_arguments:a}, rpc_unreliable_id:{arguments:a, b, default_arguments:a, b}, rset:{arguments:a, b, default_arguments:a, b}, rset_config:{arguments:a, b, default_arguments:a, b}, rset_id:{arguments:a, b, c, default_arguments:a, b, c}, rset_unreliable:{arguments:a, b, default_arguments:a, b}, rset_unreliable_id:{arguments:a, b, c, default_arguments:a, b, c}, set:{arguments:a, b, default_arguments:a, b}, set_block_signals:{arguments:a, default_arguments:a}, set_custom_multiplayer:{arguments:a, default_arguments:a}, set_deferred:{arguments:a, b, default_arguments:a, b}, set_display_folded:{arguments:a, default_arguments:a}, set_filename:{arguments:a, default_arguments:a}, set_indexed:{arguments:a, b, default_arguments:a, b}, set_message_translation:{arguments:a, default_arguments:a}, set_meta:{arguments:a, b, default_arguments:a, b}, set_name:{arguments:a, default_arguments:a}, set_network_master:{arguments:a, b, default_arguments:a, b = True}, set_owner:{arguments:a, default_arguments:a}, set_pause_mode:{arguments:a, default_arguments:a}, set_physics_process:{arguments:a, default_arguments:a}, set_physics_process_internal:{arguments:a, default_arguments:a}, set_process:{arguments:a, default_arguments:a}, set_process_input:{arguments:a, default_arguments:a}, set_process_internal:{arguments:a, default_arguments:a}, set_process_priority:{arguments:a, default_arguments:a}, set_process_unhandled_input:{arguments:a, default_arguments:a}, set_process_unhandled_key_input:{arguments:a, default_arguments:a}, set_scene_instance_load_placeholder:{arguments:a, default_arguments:a}, set_script:{arguments:a, default_arguments:a}, subtract:{arguments:a, b, default_arguments:a, b}, sum:{arguments:a, default_arguments:a}, to_string:{arguments:, default_arguments:}, tr:{arguments:a, default_arguments:a}, update_configuration_warning:{arguments:, default_arguments:}} is not equal to |Dictionary| {_enter_tree:{arguments:, default_arguments:}, _exit_tree:{arguments:, default_arguments:}, _get:{arguments:a, default_arguments:a}, _get_configuration_warning:{arguments:, default_arguments:}, _get_editor_description:{arguments:, default_arguments:}, _get_import_path:{arguments:, default_arguments:}, _get_property_list:{arguments:, default_arguments:}, _init:{arguments:, default_arguments:}, _input:{arguments:a, default_arguments:a}, _notification:{arguments:a, default_arguments:a}, _physics_process:{arguments:a, default_arguments:a}, _process:{arguments:a, default_arguments:a}, _ready:{arguments:, default_arguments:}, _set:{arguments:a, b, default_arguments:a, b}, _set_editor_description:{arguments:a, default_arguments:a}, _set_import_path:{arguments:a, default_arguments:a}, _to_string:{arguments:, default_arguments:}, _unhandled_input:{arguments:a, default_arguments:a}, _unhandled_key_input:{arguments:a, default_arguments:a}, add:{arguments:a, b, default_arguments:a, b}, add_child:{arguments:a, b, default_arguments:a, b = False}, add_child_below_node:{arguments:a, b, c, default_arguments:a, b, c = False}, add_to_group:{arguments:a, b, default_arguments:a, b = False}, add_user_signal:{arguments:a, b, default_arguments:a, b = []}, call:{arguments:a, default_arguments:a}, call_deferred:{arguments:a, default_arguments:a}, callv:{arguments:a, b, default_arguments:a, b}, can_process:{arguments:, default_arguments:}, can_translate_messages:{arguments:, default_arguments:}, connect:{arguments:a, b, c, d, e, default_arguments:a, b, c, d = [], e = 0}, disconnect:{arguments:a, b, c, default_arguments:a, b, c}, divide:{arguments:a, b, default_arguments:a, b}, duplicate:{arguments:a, default_arguments:a = 15}, emit_signal:{arguments:a, default_arguments:a}, find_node:{arguments:a, b, c, default_arguments:a, b = True, c = True}, find_parent:{arguments:a, default_arguments:a}, free:{arguments:, default_arguments:}, get:{arguments:a, default_arguments:a}, get_child:{arguments:a, default_arguments:a}, get_child_count:{arguments:, default_arguments:}, get_children:{arguments:, default_arguments:}, get_class:{arguments:, default_arguments:}, get_custom_multiplayer:{arguments:, default_arguments:}, get_filename:{arguments:, default_arguments:}, get_groups:{arguments:, default_arguments:}, get_incoming_connections:{arguments:, default_arguments:}, get_index:{arguments:, default_arguments:}, get_indexed:{arguments:a, default_arguments:a}, get_instance_id:{arguments:, default_arguments:}, get_meta:{arguments:a, default_arguments:a}, get_meta_list:{arguments:, default_arguments:}, get_method_list:{arguments:, default_arguments:}, get_multiplayer:{arguments:, default_arguments:}, get_name:{arguments:, default_arguments:}, get_network_master:{arguments:, default_arguments:}, get_node:{arguments:a, default_arguments:a}, get_node_and_resource:{arguments:a, default_arguments:a}, get_node_or_null:{arguments:a, default_arguments:a}, get_owner:{arguments:, default_arguments:}, get_parent:{arguments:, default_arguments:}, get_path:{arguments:, default_arguments:}, get_path_to:{arguments:a, default_arguments:a}, get_pause_mode:{arguments:, default_arguments:}, get_physics_process_delta_time:{arguments:, default_arguments:}, get_position_in_parent:{arguments:, default_arguments:}, get_process_delta_time:{arguments:, default_arguments:}, get_process_priority:{arguments:, default_arguments:}, get_property_list:{arguments:, default_arguments:}, get_scene_instance_load_placeholder:{arguments:, default_arguments:}, get_script:{arguments:, default_arguments:}, get_signal_connection_list:{arguments:a, default_arguments:a}, get_signal_list:{arguments:, default_arguments:}, get_tree:{arguments:, default_arguments:}, get_viewport:{arguments:, default_arguments:}, has_meta:{arguments:a, default_arguments:a}, has_method:{arguments:a, default_arguments:a}, has_node:{arguments:a, default_arguments:a}, has_node_and_resource:{arguments:a, default_arguments:a}, has_signal:{arguments:a, default_arguments:a}, has_user_signal:{arguments:a, default_arguments:a}, is_a_parent_of:{arguments:a, default_arguments:a}, is_blocking_signals:{arguments:, default_arguments:}, is_class:{arguments:a, default_arguments:a}, is_connected:{arguments:a, b, c, default_arguments:a, b, c}, is_displayed_folded:{arguments:, default_arguments:}, is_greater_than:{arguments:a, default_arguments:a}, is_in_group:{arguments:a, default_arguments:a}, is_inside_tree:{arguments:, default_arguments:}, is_network_master:{arguments:, default_arguments:}, is_physics_processing:{arguments:, default_arguments:}, is_physics_processing_internal:{arguments:, default_arguments:}, is_processing:{arguments:, default_arguments:}, is_processing_input:{arguments:, default_arguments:}, is_processing_internal:{arguments:, default_arguments:}, is_processing_unhandled_input:{arguments:, default_arguments:}, is_processing_unhandled_key_input:{arguments:, default_arguments:}, is_queued_for_deletion:{arguments:, default_arguments:}, math_fight:{arguments:, default_arguments:}, move_child:{arguments:a, b, default_arguments:a, b}, multiply:{arguments:a, b, default_arguments:a, b}, notification:{arguments:a, b, default_arguments:a, b = False}, pi:{arguments:, default_arguments:}, print_stray_nodes:{arguments:, default_arguments:}, print_tree:{arguments:, default_arguments:}, print_tree_pretty:{arguments:, default_arguments:}, propagate_call:{arguments:a, b, c, default_arguments:a, b = [], c = False}, propagate_notification:{arguments:a, default_arguments:a}, property_list_changed_notify:{arguments:, default_arguments:}, queue_free:{arguments:, default_arguments:}, raise:{arguments:, default_arguments:}, remove_and_skip:{arguments:, default_arguments:}, remove_child:{arguments:a, default_arguments:a}, remove_from_group:{arguments:a, default_arguments:a}, remove_meta:{arguments:a, default_arguments:a}, replace_by:{arguments:a, b, default_arguments:a, b = False}, request_ready:{arguments:, default_arguments:}, rpc:{arguments:a, default_arguments:a}, rpc_config:{arguments:a, b, default_arguments:a, b}, rpc_id:{arguments:a, b, default_arguments:a, b}, rpc_unreliable:{arguments:a, default_arguments:a}, rpc_unreliable_id:{arguments:a, b, default_arguments:a, b}, rset:{arguments:a, b, default_arguments:a, b}, rset_config:{arguments:a, b, default_arguments:a, b}, rset_id:{arguments:a, b, c, default_arguments:a, b, c}, rset_unreliable:{arguments:a, b, default_arguments:a, b}, rset_unreliable_id:{arguments:a, b, c, default_arguments:a, b, c}, set:{arguments:a, b, default_arguments:a, b}, set_block_signals:{arguments:a, default_arguments:a}, set_custom_multiplayer:{arguments:a, default_arguments:a}, set_deferred:{arguments:a, b, default_arguments:a, b}, set_display_folded:{arguments:a, default_arguments:a}, set_filename:{arguments:a, default_arguments:a}, set_indexed:{arguments:a, b, default_arguments:a, b}, set_message_translation:{arguments:a, default_arguments:a}, set_meta:{arguments:a, b, default_arguments:a, b}, set_name:{arguments:a, default_arguments:a}, set_network_master:{arguments:a, b, default_arguments:a, b = True}, set_owner:{arguments:a, default_arguments:a}, set_pause_mode:{arguments:a, default_arguments:a}, set_physics_process:{arguments:a, default_arguments:a}, set_physics_process_internal:{arguments:a, default_arguments:a}, set_process:{arguments:a, default_arguments:a}, set_process_input:{arguments:a, default_arguments:a}, set_process_internal:{arguments:a, default_arguments:a}, set_process_priority:{arguments:a, default_arguments:a}, set_process_unhandled_input:{arguments:a, default_arguments:a}, set_process_unhandled_key_input:{arguments:a, default_arguments:a}, set_scene_instance_load_placeholder:{arguments:a, default_arguments:a}, set_script:{arguments:a, default_arguments:a}, subtract:{arguments:a, b, default_arguments:a, b}, sum:{arguments:a, default_arguments:a}, to_string:{arguments:, default_arguments:}, tr:{arguments:a, default_arguments:a}, update_configuration_warning:{arguments:, default_arguments:}}",
"context": "Then they do not share resources",
"expected": "|Dictionary| {_enter_tree:{arguments:, default_arguments:}, _exit_tree:{arguments:, default_arguments:}, _get:{arguments:a, default_arguments:a}, _get_configuration_warning:{arguments:, default_arguments:}, _get_editor_description:{arguments:, default_arguments:}, _get_import_path:{arguments:, default_arguments:}, _get_property_list:{arguments:, default_arguments:}, _init:{arguments:, default_arguments:}, _input:{arguments:a, default_arguments:a}, _notification:{arguments:a, default_arguments:a}, _physics_process:{arguments:a, default_arguments:a}, _process:{arguments:a, default_arguments:a}, _ready:{arguments:, default_arguments:}, _set:{arguments:a, b, default_arguments:a, b}, _set_editor_description:{arguments:a, default_arguments:a}, _set_import_path:{arguments:a, default_arguments:a}, _to_string:{arguments:, default_arguments:}, _unhandled_input:{arguments:a, default_arguments:a}, _unhandled_key_input:{arguments:a, default_arguments:a}, add:{arguments:a, b, default_arguments:a, b}, add_child:{arguments:a, b, default_arguments:a, b = False}, add_child_below_node:{arguments:a, b, c, default_arguments:a, b, c = False}, add_to_group:{arguments:a, b, default_arguments:a, b = False}, add_user_signal:{arguments:a, b, default_arguments:a, b = []}, call:{arguments:a, default_arguments:a}, call_deferred:{arguments:a, default_arguments:a}, callv:{arguments:a, b, default_arguments:a, b}, can_process:{arguments:, default_arguments:}, can_translate_messages:{arguments:, default_arguments:}, connect:{arguments:a, b, c, d, e, default_arguments:a, b, c, d = [], e = 0}, disconnect:{arguments:a, b, c, default_arguments:a, b, c}, divide:{arguments:a, b, default_arguments:a, b}, duplicate:{arguments:a, default_arguments:a = 15}, emit_signal:{arguments:a, default_arguments:a}, find_node:{arguments:a, b, c, default_arguments:a, b = True, c = True}, find_parent:{arguments:a, default_arguments:a}, free:{arguments:, default_arguments:}, get:{arguments:a, default_arguments:a}, get_child:{arguments:a, default_arguments:a}, get_child_count:{arguments:, default_arguments:}, get_children:{arguments:, default_arguments:}, get_class:{arguments:, default_arguments:}, get_custom_multiplayer:{arguments:, default_arguments:}, get_filename:{arguments:, default_arguments:}, get_groups:{arguments:, default_arguments:}, get_incoming_connections:{arguments:, default_arguments:}, get_index:{arguments:, default_arguments:}, get_indexed:{arguments:a, default_arguments:a}, get_instance_id:{arguments:, default_arguments:}, get_meta:{arguments:a, default_arguments:a}, get_meta_list:{arguments:, default_arguments:}, get_method_list:{arguments:, default_arguments:}, get_multiplayer:{arguments:, default_arguments:}, get_name:{arguments:, default_arguments:}, get_network_master:{arguments:, default_arguments:}, get_node:{arguments:a, default_arguments:a}, get_node_and_resource:{arguments:a, default_arguments:a}, get_node_or_null:{arguments:a, default_arguments:a}, get_owner:{arguments:, default_arguments:}, get_parent:{arguments:, default_arguments:}, get_path:{arguments:, default_arguments:}, get_path_to:{arguments:a, default_arguments:a}, get_pause_mode:{arguments:, default_arguments:}, get_physics_process_delta_time:{arguments:, default_arguments:}, get_position_in_parent:{arguments:, default_arguments:}, get_process_delta_time:{arguments:, default_arguments:}, get_process_priority:{arguments:, default_arguments:}, get_property_list:{arguments:, default_arguments:}, get_scene_instance_load_placeholder:{arguments:, default_arguments:}, get_script:{arguments:, default_arguments:}, get_signal_connection_list:{arguments:a, default_arguments:a}, get_signal_list:{arguments:, default_arguments:}, get_tree:{arguments:, default_arguments:}, get_viewport:{arguments:, default_arguments:}, has_meta:{arguments:a, default_arguments:a}, has_method:{arguments:a, default_arguments:a}, has_node:{arguments:a, default_arguments:a}, has_node_and_resource:{arguments:a, default_arguments:a}, has_signal:{arguments:a, default_arguments:a}, has_user_signal:{arguments:a, default_arguments:a}, is_a_parent_of:{arguments:a, default_arguments:a}, is_blocking_signals:{arguments:, default_arguments:}, is_class:{arguments:a, default_arguments:a}, is_connected:{arguments:a, b, c, default_arguments:a, b, c}, is_displayed_folded:{arguments:, default_arguments:}, is_greater_than:{arguments:a, default_arguments:a}, is_in_group:{arguments:a, default_arguments:a}, is_inside_tree:{arguments:, default_arguments:}, is_network_master:{arguments:, default_arguments:}, is_physics_processing:{arguments:, default_arguments:}, is_physics_processing_internal:{arguments:, default_arguments:}, is_processing:{arguments:, default_arguments:}, is_processing_input:{arguments:, default_arguments:}, is_processing_internal:{arguments:, default_arguments:}, is_processing_unhandled_input:{arguments:, default_arguments:}, is_processing_unhandled_key_input:{arguments:, default_arguments:}, is_queued_for_deletion:{arguments:, default_arguments:}, math_fight:{arguments:, default_arguments:}, move_child:{arguments:a, b, default_arguments:a, b}, multiply:{arguments:a, b, default_arguments:a, b}, notification:{arguments:a, b, default_arguments:a, b = False}, pi:{arguments:, default_arguments:}, print_stray_nodes:{arguments:, default_arguments:}, print_tree:{arguments:, default_arguments:}, print_tree_pretty:{arguments:, default_arguments:}, propagate_call:{arguments:a, b, c, default_arguments:a, b = [], c = False}, propagate_notification:{arguments:a, default_arguments:a}, property_list_changed_notify:{arguments:, default_arguments:}, queue_free:{arguments:, default_arguments:}, raise:{arguments:, default_arguments:}, remove_and_skip:{arguments:, default_arguments:}, remove_child:{arguments:a, default_arguments:a}, remove_from_group:{arguments:a, default_arguments:a}, remove_meta:{arguments:a, default_arguments:a}, replace_by:{arguments:a, b, default_arguments:a, b = False}, request_ready:{arguments:, default_arguments:}, rpc:{arguments:a, default_arguments:a}, rpc_config:{arguments:a, b, default_arguments:a, b}, rpc_id:{arguments:a, b, default_arguments:a, b}, rpc_unreliable:{arguments:a, default_arguments:a}, rpc_unreliable_id:{arguments:a, b, default_arguments:a, b}, rset:{arguments:a, b, default_arguments:a, b}, rset_config:{arguments:a, b, default_arguments:a, b}, rset_id:{arguments:a, b, c, default_arguments:a, b, c}, rset_unreliable:{arguments:a, b, default_arguments:a, b}, rset_unreliable_id:{arguments:a, b, c, default_arguments:a, b, c}, set:{arguments:a, b, default_arguments:a, b}, set_block_signals:{arguments:a, default_arguments:a}, set_custom_multiplayer:{arguments:a, default_arguments:a}, set_deferred:{arguments:a, b, default_arguments:a, b}, set_display_folded:{arguments:a, default_arguments:a}, set_filename:{arguments:a, default_arguments:a}, set_indexed:{arguments:a, b, default_arguments:a, b}, set_message_translation:{arguments:a, default_arguments:a}, set_meta:{arguments:a, b, default_arguments:a, b}, set_name:{arguments:a, default_arguments:a}, set_network_master:{arguments:a, b, default_arguments:a, b = True}, set_owner:{arguments:a, default_arguments:a}, set_pause_mode:{arguments:a, default_arguments:a}, set_physics_process:{arguments:a, default_arguments:a}, set_physics_process_internal:{arguments:a, default_arguments:a}, set_process:{arguments:a, default_arguments:a}, set_process_input:{arguments:a, default_arguments:a}, set_process_internal:{arguments:a, default_arguments:a}, set_process_priority:{arguments:a, default_arguments:a}, set_process_unhandled_input:{arguments:a, default_arguments:a}, set_process_unhandled_key_input:{arguments:a, default_arguments:a}, set_scene_instance_load_placeholder:{arguments:a, default_arguments:a}, set_script:{arguments:a, default_arguments:a}, subtract:{arguments:a, b, default_arguments:a, b}, sum:{arguments:a, default_arguments:a}, to_string:{arguments:, default_arguments:}, tr:{arguments:a, default_arguments:a}, update_configuration_warning:{arguments:, default_arguments:}} != |Dictionary| {_enter_tree:{arguments:, default_arguments:}, _exit_tree:{arguments:, default_arguments:}, _get:{arguments:a, default_arguments:a}, _get_configuration_warning:{arguments:, default_arguments:}, _get_editor_description:{arguments:, default_arguments:}, _get_import_path:{arguments:, default_arguments:}, _get_property_list:{arguments:, default_arguments:}, _init:{arguments:, default_arguments:}, _input:{arguments:a, default_arguments:a}, _notification:{arguments:a, default_arguments:a}, _physics_process:{arguments:a, default_arguments:a}, _process:{arguments:a, default_arguments:a}, _ready:{arguments:, default_arguments:}, _set:{arguments:a, b, default_arguments:a, b}, _set_editor_description:{arguments:a, default_arguments:a}, _set_import_path:{arguments:a, default_arguments:a}, _to_string:{arguments:, default_arguments:}, _unhandled_input:{arguments:a, default_arguments:a}, _unhandled_key_input:{arguments:a, default_arguments:a}, add:{arguments:a, b, default_arguments:a, b}, add_child:{arguments:a, b, default_arguments:a, b = False}, add_child_below_node:{arguments:a, b, c, default_arguments:a, b, c = False}, add_to_group:{arguments:a, b, default_arguments:a, b = False}, add_user_signal:{arguments:a, b, default_arguments:a, b = []}, call:{arguments:a, default_arguments:a}, call_deferred:{arguments:a, default_arguments:a}, callv:{arguments:a, b, default_arguments:a, b}, can_process:{arguments:, default_arguments:}, can_translate_messages:{arguments:, default_arguments:}, connect:{arguments:a, b, c, d, e, default_arguments:a, b, c, d = [], e = 0}, disconnect:{arguments:a, b, c, default_arguments:a, b, c}, divide:{arguments:a, b, default_arguments:a, b}, duplicate:{arguments:a, default_arguments:a = 15}, emit_signal:{arguments:a, default_arguments:a}, find_node:{arguments:a, b, c, default_arguments:a, b = True, c = True}, find_parent:{arguments:a, default_arguments:a}, free:{arguments:, default_arguments:}, get:{arguments:a, default_arguments:a}, get_child:{arguments:a, default_arguments:a}, get_child_count:{arguments:, default_arguments:}, get_children:{arguments:, default_arguments:}, get_class:{arguments:, default_arguments:}, get_custom_multiplayer:{arguments:, default_arguments:}, get_filename:{arguments:, default_arguments:}, get_groups:{arguments:, default_arguments:}, get_incoming_connections:{arguments:, default_arguments:}, get_index:{arguments:, default_arguments:}, get_indexed:{arguments:a, default_arguments:a}, get_instance_id:{arguments:, default_arguments:}, get_meta:{arguments:a, default_arguments:a}, get_meta_list:{arguments:, default_arguments:}, get_method_list:{arguments:, default_arguments:}, get_multiplayer:{arguments:, default_arguments:}, get_name:{arguments:, default_arguments:}, get_network_master:{arguments:, default_arguments:}, get_node:{arguments:a, default_arguments:a}, get_node_and_resource:{arguments:a, default_arguments:a}, get_node_or_null:{arguments:a, default_arguments:a}, get_owner:{arguments:, default_arguments:}, get_parent:{arguments:, default_arguments:}, get_path:{arguments:, default_arguments:}, get_path_to:{arguments:a, default_arguments:a}, get_pause_mode:{arguments:, default_arguments:}, get_physics_process_delta_time:{arguments:, default_arguments:}, get_position_in_parent:{arguments:, default_arguments:}, get_process_delta_time:{arguments:, default_arguments:}, get_process_priority:{arguments:, default_arguments:}, get_property_list:{arguments:, default_arguments:}, get_scene_instance_load_placeholder:{arguments:, default_arguments:}, get_script:{arguments:, default_arguments:}, get_signal_connection_list:{arguments:a, default_arguments:a}, get_signal_list:{arguments:, default_arguments:}, get_tree:{arguments:, default_arguments:}, get_viewport:{arguments:, default_arguments:}, has_meta:{arguments:a, default_arguments:a}, has_method:{arguments:a, default_arguments:a}, has_node:{arguments:a, default_arguments:a}, has_node_and_resource:{arguments:a, default_arguments:a}, has_signal:{arguments:a, default_arguments:a}, has_user_signal:{arguments:a, default_arguments:a}, is_a_parent_of:{arguments:a, default_arguments:a}, is_blocking_signals:{arguments:, default_arguments:}, is_class:{arguments:a, default_arguments:a}, is_connected:{arguments:a, b, c, default_arguments:a, b, c}, is_displayed_folded:{arguments:, default_arguments:}, is_greater_than:{arguments:a, default_arguments:a}, is_in_group:{arguments:a, default_arguments:a}, is_inside_tree:{arguments:, default_arguments:}, is_network_master:{arguments:, default_arguments:}, is_physics_processing:{arguments:, default_arguments:}, is_physics_processing_internal:{arguments:, default_arguments:}, is_processing:{arguments:, default_arguments:}, is_processing_input:{arguments:, default_arguments:}, is_processing_internal:{arguments:, default_arguments:}, is_processing_unhandled_input:{arguments:, default_arguments:}, is_processing_unhandled_key_input:{arguments:, default_arguments:}, is_queued_for_deletion:{arguments:, default_arguments:}, math_fight:{arguments:, default_arguments:}, move_child:{arguments:a, b, default_arguments:a, b}, multiply:{arguments:a, b, default_arguments:a, b}, notification:{arguments:a, b, default_arguments:a, b = False}, pi:{arguments:, default_arguments:}, print_stray_nodes:{arguments:, default_arguments:}, print_tree:{arguments:, default_arguments:}, print_tree_pretty:{arguments:, default_arguments:}, propagate_call:{arguments:a, b, c, default_arguments:a, b = [], c = False}, propagate_notification:{arguments:a, default_arguments:a}, property_list_changed_notify:{arguments:, default_arguments:}, queue_free:{arguments:, default_arguments:}, raise:{arguments:, default_arguments:}, remove_and_skip:{arguments:, default_arguments:}, remove_child:{arguments:a, default_arguments:a}, remove_from_group:{arguments:a, default_arguments:a}, remove_meta:{arguments:a, default_arguments:a}, replace_by:{arguments:a, b, default_arguments:a, b = False}, request_ready:{arguments:, default_arguments:}, rpc:{arguments:a, default_arguments:a}, rpc_config:{arguments:a, b, default_arguments:a, b}, rpc_id:{arguments:a, b, default_arguments:a, b}, rpc_unreliable:{arguments:a, default_arguments:a}, rpc_unreliable_id:{arguments:a, b, default_arguments:a, b}, rset:{arguments:a, b, default_arguments:a, b}, rset_config:{arguments:a, b, default_arguments:a, b}, rset_id:{arguments:a, b, c, default_arguments:a, b, c}, rset_unreliable:{arguments:a, b, default_arguments:a, b}, rset_unreliable_id:{arguments:a, b, c, default_arguments:a, b, c}, set:{arguments:a, b, default_arguments:a, b}, set_block_signals:{arguments:a, default_arguments:a}, set_custom_multiplayer:{arguments:a, default_arguments:a}, set_deferred:{arguments:a, b, default_arguments:a, b}, set_display_folded:{arguments:a, default_arguments:a}, set_filename:{arguments:a, default_arguments:a}, set_indexed:{arguments:a, b, default_arguments:a, b}, set_message_translation:{arguments:a, default_arguments:a}, set_meta:{arguments:a, b, default_arguments:a, b}, set_name:{arguments:a, default_arguments:a}, set_network_master:{arguments:a, b, default_arguments:a, b = True}, set_owner:{arguments:a, default_arguments:a}, set_pause_mode:{arguments:a, default_arguments:a}, set_physics_process:{arguments:a, default_arguments:a}, set_physics_process_internal:{arguments:a, default_arguments:a}, set_process:{arguments:a, default_arguments:a}, set_process_input:{arguments:a, default_arguments:a}, set_process_internal:{arguments:a, default_arguments:a}, set_process_priority:{arguments:a, default_arguments:a}, set_process_unhandled_input:{arguments:a, default_arguments:a}, set_process_unhandled_key_input:{arguments:a, default_arguments:a}, set_scene_instance_load_placeholder:{arguments:a, default_arguments:a}, set_script:{arguments:a, default_arguments:a}, subtract:{arguments:a, b, default_arguments:a, b}, sum:{arguments:a, default_arguments:a}, to_string:{arguments:, default_arguments:}, tr:{arguments:a, default_arguments:a}, update_configuration_warning:{arguments:, default_arguments:}}",
"success": true
} ],
"context": "When we create two of it for the same script",
"fullname": "test_When_we_create_two_of_it_for_the_same_script",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 3,
"path": "res://tests/integration/script_director.test.gd",
"source": {
"containers": [ "res://tests/integration", "res://tests" ],
"method": "",
"path": "res://tests/integration/script_director.test.gd",
"tags": [  ],
"test": ExtResource( 13 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 3
}, {
"context": "Given a Scene Director",
"methods": [ {
"assertions": [ {
"actual": "|Dictionary| {.:[Reference:2498], A:[Reference:2499], A/B:[Reference:2501], C:[Reference:2500], C/D:[Reference:2502]} is not equal to |Dictionary| {.:[Reference:2525], A:[Reference:2526], A/B:[Reference:2528], C:[Reference:2527], C/D:[Reference:2529]}",
"context": "Then they do not share resources",
"expected": "|Dictionary| {.:[Reference:2498], A:[Reference:2499], A/B:[Reference:2501], C:[Reference:2500], C/D:[Reference:2502]} != |Dictionary| {.:[Reference:2525], A:[Reference:2526], A/B:[Reference:2528], C:[Reference:2527], C/D:[Reference:2529]}",
"success": true
} ],
"context": "When we create two of it for the same scene",
"fullname": "test_When_we_create_two_of_it_for_the_same_scene",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 9999 is equal to |int| 9999",
"context": "Then we get the stubbed return value",
"expected": "|int| 9999 is equal to |int| 9999",
"success": true
} ],
"context": "When we call a method from the root node that we stubbed",
"fullname": "test_When_we_call_a_method_from_the_root_node_that_we_stubbed",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 999 is equal to |int| 999",
"context": "Then we get the stubbed return value",
"expected": "|int| 999 is equal to |int| 999",
"success": true
} ],
"context": "When we call a method from a child node that we stubbed",
"fullname": "test_When_we_call_a_method_from_a_child_node_that_we_stubbed",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 99 is equal to |int| 99",
"context": "Then we get the stubbed return value",
"expected": "|int| 99 is equal to |int| 99",
"success": true
} ],
"context": "When we call a method from a grandchild node that we stubbed",
"fullname": "test_When_we_call_a_method_from_a_grandchild_node_that_we_stubbed",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|NodePath| A is equal to |NodePath| A",
"context": "We have the correct NodePath Set",
"expected": "|NodePath| A is equal to |NodePath| A",
"success": true
} ],
"context": "When we add it to the tree it runs",
"fullname": "test_When_we_add_it_to_the_tree_it_runs",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 5,
"path": "res://tests/integration/scene_director.test.gd",
"source": {
"containers": [ "res://tests/integration", "res://tests" ],
"method": "",
"path": "res://tests/integration/scene_director.test.gd",
"tags": [  ],
"test": ExtResource( 4 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 5
}, {
"context": "Given a Boolean Assertion",
"methods": [ {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then it passes",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When calling asserts.is_true(true)",
"fullname": "test_when_calling_asserts_is_true",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| False == false",
"context": "Then it passes",
"expected": "|bool| False == false",
"success": true
} ],
"context": "When calling asserts.is_false(false)",
"fullname": "test_when_calling_asserts_is_false",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| True != false",
"context": "",
"expected": "|bool| True == false",
"success": false
} ],
"context": " intentional failure",
"fullname": "test_intentional_failure",
"passed": 0,
"success": false,
"time": 0.0,
"total": 1
} ],
"passed": 2,
"path": "res://tests/unit/boolean.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/boolean.test.gd",
"tags": [  ],
"test": ExtResource( 11 ),
"yield_time": 0.0
},
"success": false,
"time_taken": 0.0,
"total": 3
}, {
"context": "Given A File Assertion",
"methods": [ {
"assertions": [ {
"actual": "res://somefile.gd does not exist",
"context": "Then it passes",
"expected": "res://somefile.gd does not exist",
"success": true
} ],
"context": "When calling asserts.file_does_not_exist when there is no file",
"fullname": "test_when_calling_file_does_not_exist_when_there_is_no_file",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": " does not exist",
"context": "Then it passes",
"expected": " does not exist",
"success": true
} ],
"context": "When calling asserts file does not exist when path is empty",
"fullname": "test_when_calling_file_does_not_exist_when_path_is_empty",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "res://tests/unit/file.test.gd exists",
"context": "Then it passes",
"expected": "res://tests/unit/file.test.gd exists",
"success": true
} ],
"context": "When calling asserts.file_exists when the file is this suite",
"fullname": "test_when_calling_file_exists_when_file_is_self",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 3,
"path": "res://tests/unit/file.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/file.test.gd",
"tags": [  ],
"test": ExtResource( 3 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 3
}, {
"context": "Given an Equality Assertion",
"methods": [ {
"assertions": [ {
"actual": "|int| 1 is equal to |int| 1",
"context": "Then it passes",
"expected": "|int| 1 is equal to |int| 1",
"success": true
} ],
"context": "When calling asserts.is_equal(1, 1)",
"fullname": "test_when_calling_is_equal",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 1 is less than |int| 2",
"context": "Then it passes",
"expected": "|int| 1 is less than |int| 2",
"success": true
} ],
"context": "When calling asserts.is_less_than(2, 1)",
"fullname": "test_when_calling_is_less_than",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 2 is equal or greater |int| 1",
"context": "Then it passes",
"expected": "|int| 2 is equal or greater |int| 1",
"success": true
} ],
"context": "When calling asserts.is_equal_or_greater_than(2, 1)",
"fullname": "test_when_calling_is_equal_or_greater_than",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 2 is greater than |int| 1",
"context": "Then it passes",
"expected": "|int| 2 is greater than |int| 1",
"success": true
} ],
"context": "When calling asserts.is_greater_than(2, 1)",
"fullname": "test_when_calling_is_greater_than",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 5 is not equal to |int| 6",
"context": "Then it passes",
"expected": "|int| 5 != |int| 6",
"success": true
} ],
"context": "When callign asserts.is_not_equal(5, 6)",
"fullname": "test_when_calling_is_not_equal",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 1 is equal or less than |int| 1",
"context": "Then it passes!",
"expected": "|int| 1 is equal or less than |int| 1",
"success": true
} ],
"context": "When calling asserts.is_equal_or_less_than(1, 1)",
"fullname": "test_when_calling_is_equal_or_less_than_with_equal_values",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 1 is equal or greater |int| 1",
"context": "Then it passes",
"expected": "|int| 1 is equal or greater |int| 1",
"success": true
} ],
"context": "When calling asserts.is_equal_or_greater_than(1, 1)",
"fullname": "test_when_calling_is_equal_or_greater_than_with_equal_values",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 7,
"path": "res://tests/unit/equality.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/equality.test.gd",
"tags": [  ],
"test": ExtResource( 8 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 7
}, {
"context": "Given a Null Assertion",
"methods": [ {
"assertions": [ {
"actual": "|null| Null == null",
"context": "Then it passes",
"expected": "|null| Null == null",
"success": true
} ],
"context": "When calling asserts.is_null(null)",
"fullname": "test_when_calling_null_is_null",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|Object| [Node:2816] != null",
"context": "Then it passes",
"expected": "|Object| [Node:2816] != null",
"success": true
} ],
"context": "When calling Node is not null",
"fullname": "test_when_calling_node_is_not_null",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|Object| [Deleted Object] == null",
"context": "A Freed Node is null in Engine 3.2.2 or greater",
"expected": "|Object| [Deleted Object] == null",
"success": true
} ],
"context": "When calling freed object is null",
"fullname": "test_when_calling_freed_object_is_not_null",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 3,
"path": "res://tests/unit/null.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/null.test.gd",
"tags": [  ],
"test": ExtResource( 12 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 3
}, {
"context": "Given a Test Double",
"methods": [ {
"assertions": [ {
"actual": "|int| 9999 is equal to |int| 9999",
"context": "Then it returns the corresponding value when the pattern matches",
"expected": "|int| 9999 is equal to |int| 9999",
"success": true
} ],
"context": "When we call a method that was stubbed with an argument pattern that includes a non-primitive object",
"fullname": "test_When_we_call_a_method_that_was_stubbed_with_an_argument_pattern_that_includes_a_non_primitive_object",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 4 is equal to |int| 4",
"context": "Then we get the correct result",
"expected": "|int| 4 is equal to |int| 4",
"success": true
} ],
"context": "When we call an add(x, y) method that we haven't directed",
"fullname": "test_When_we_call_an_add_method_that_we_have_not_directed",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|null| Null == null",
"context": "Then we get the stubbed value back",
"expected": "|null| Null == null",
"success": true
} ],
"context": "When we stub a method of a doubled inner class",
"fullname": "test_When_we_stub_a_method_of_a_double_inner_class",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|null| Null == null",
"context": "Then we get null",
"expected": "|null| Null == null",
"success": true
} ],
"context": "When we call a method that we have dummied",
"fullname": "test_When_we_call_a_method_that_we_have_dummied",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "add was called",
"context": "Then we can see that it was called at least once",
"expected": "add was called",
"success": true
} ],
"context": "When we call a method that we are spying on",
"fullname": "test_When_we_call_a_method_that_we_are_spying_on",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|String| Jackie is equal to |String| Jackie",
"context": "Then we can double the object successfully",
"expected": "|String| Jackie is equal to |String| Jackie",
"success": true
} ],
"context": "When we pass in dependecies on double",
"fullname": "test_When_we_pass_in_deps_on_double",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|String| Jackie is equal to |String| Jackie",
"context": "Then we can double the object successfully",
"expected": "|String| Jackie is equal to |String| Jackie",
"success": true
} ],
"context": "When we pass in dependecies on direct",
"fullname": "test_When_we_pass_in_deps_on_direct",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 9999 is equal to |int| 9999",
"context": "Then it returns the corresponding value when the partial pattern matches",
"expected": "|int| 9999 is equal to |int| 9999",
"success": true
} ],
"context": "When we call a method that was stubbed with a partial (ie using any()) argument pattern",
"fullname": "test_When_we_call_a_method_that_was_stubbed_with_a_partial_argument_pattern",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|Array| [10, 5] is equal to |Array| [10, 5]",
"context": "Then it returns a value",
"expected": "|Array| [10, 5] is equal to |Array| [10, 5]",
"success": true
} ],
"context": "When we pass an Object with a call_func function",
"fullname": "test_When_we_pass_an_object_with_callfunc_method_as_a_subcall",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 99 is equal to |int| 99",
"context": "Then it returns a value",
"expected": "|int| 99 is equal to |int| 99",
"success": true
} ],
"context": "When we pass a funcref as a subcall that returns",
"fullname": "test_When_we_pass_a_funcref_as_a_subcall_that_returns_a_value",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|Object| [Node:2819] is equal to |Object| [Node:2819]",
"context": "Then it returns that same node",
"expected": "|Object| [Node:2819] is equal to |Object| [Node:2819]",
"success": true
} ],
"context": "When we call a method that we have stubbed to return a node",
"fullname": "test_When_we_call_a_method_that_we_have_stubbed_to_return_a_node",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "method: add was called with arguments: [10, 10]",
"context": "Then we can see that it was called with those arguments",
"expected": "method: add was called with arguments: [10, 10]",
"success": true
} ],
"context": "When we pass arguments to a method call that we are spying on",
"fullname": "test_When_we_pass_arguments_to_a_method_call_that_we_are_spying_on",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 100 is equal to |int| 100",
"context": "Then it returns the default stubbed value when the arguments don't match any pattern",
"expected": "|int| 100 is equal to |int| 100",
"success": true
}, {
"actual": "|int| 1000 is equal to |int| 1000",
"context": "Then it returns the the corresponding value to the pattern the arguments matched",
"expected": "|int| 1000 is equal to |int| 1000",
"success": true
} ],
"context": "When we call a method that was stubbed to return different values based on argument patterns",
"fullname": "test_When_we_call_a_method_that_was_stubbed_to_return_different_values_based_on_argument_patterns",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|float| 6.283185 is equal to |float| 6.283185",
"context": "Then we can call the static methods of that inner double",
"expected": "|float| 6.283185 is equal to |float| 6.283185",
"success": true
} ],
"context": "When we add an doubled inner class to it",
"fullname": "test_When_we_add_a_doubled_inner_class_to_it",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| True is equal to |bool| True",
"context": "Then we can call it",
"expected": "|bool| True is equal to |bool| True",
"success": true
} ],
"context": "When we stubbed a keyworded method by passing in the correct keyword",
"fullname": "test_When_we_stubbed_a_keyword_method_by_passing_in_the_correct_keyword",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "(1, 1) is builtin: Vector2",
"context": "Then we can call methods on it",
"expected": "(1, 1) is builtin: Vector2",
"success": true
} ],
"context": "When we double an inner class",
"fullname": "test_When_we_double_an_inner_class",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 99 is equal to |int| 99",
"context": "Then it affects the state of the double",
"expected": "|int| 99 is equal to |int| 99",
"success": true
} ],
"context": "When we pass a funcref as a subcall",
"fullname": "test_When_we_pass_a_funcref_as_a_subcall",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then it returns true",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we call a method that we have stubbed to return true",
"fullname": "test_When_we_call_a_method_that_we_have_stubbed_to_return_true",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 4 is equal to |int| 4",
"context": "Then it calls its super implementation by default",
"expected": "|int| 4 is equal to |int| 4",
"success": true
}, {
"actual": "|int| 9999 is equal to |int| 9999",
"context": "Then it does not call its super implementation when arguments patterns match a different return value",
"expected": "|int| 9999 is equal to |int| 9999",
"success": true
} ],
"context": "When we call a method that we stubbed to call its super implementation by default",
"fullname": "test_When_we_call_a_method_that_we_stubbed_to_call_its_super_implementation_by_default",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
} ],
"passed": 19,
"path": "res://tests/integration/test_double.test.gd",
"source": {
"containers": [ "res://tests/integration", "res://tests" ],
"method": "",
"path": "res://tests/integration/test_double.test.gd",
"tags": [  ],
"test": ExtResource( 14 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 19
}, {
"context": "Given an Object Assertion",
"methods": [ {
"assertions": [ {
"actual": "[Node:2851] is not freed",
"context": "Then it passes",
"expected": "[Node:2851] is not freed",
"success": true
} ],
"context": "When calling asserts.is_not_freed(unfreed_object)",
"fullname": "test_when_calling_unfreed_object_is_not_freed",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is freed from memory",
"context": "Then it passes",
"expected": "Null is freed from memory",
"success": true
} ],
"context": "When calling asserts.is_freed(freed_object",
"fullname": "test_when_calling_freed_object_is_freed",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:2876] is queued for deletion",
"context": "Then it passes",
"expected": "[Node:2876] is queued for deletion",
"success": true
} ],
"context": "When calling asserts.object_is_queued for deletion after calling queue_free",
"fullname": "test_when_calling_obj_is_queued_for_deletion_after_calling_queue_free",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:2840] has method: title",
"context": "Then it passes",
"expected": "[Node:2840] has method: title",
"success": true
} ],
"context": "When calling has_method('title')",
"fullname": "test_when_calling_has_method_title",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:2900] is not blocking signals",
"context": "Then it passes",
"expected": "[Node:2900] is not blocking signals",
"success": true
} ],
"context": "When calling is not blocking signals while not blocking signals",
"fullname": "test_is_not_blocking_signals",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:2911] is not queued for deletion",
"context": "Then it passes",
"expected": "[Node:2911] is not queued for deletion",
"success": true
} ],
"context": "When calling asserts.object_is_not_for_queued_deletion after not calling queue free()",
"fullname": "test_when_calling_obj_is_not_for_queued_deletion_after_not_calling_queue_free",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:2923] is blocking signals",
"context": "Then it passes",
"expected": "[Node:2923] is blocking signals",
"success": true
} ],
"context": "When calling is blocking signals while blocking signals",
"fullname": "test_is_blocking_signals",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:2840] has meta: dummy",
"context": "Then it passes",
"expected": "[Node:2840] has meta: dummy",
"success": true
}, {
"actual": "[Node:2840] has meta: dummy",
"context": "Then it passes",
"expected": "[Node:2840] has meta: dummy",
"success": true
} ],
"context": "When calling asserts.object_has_meta() after adding metadata",
"fullname": "test_when_calling_has_meta_after_adding_metadata",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "[Node:2840].builtin_dummy is connected to [Node:2840].title",
"context": "Then it passes",
"expected": "[Node:2840].builtin_dummy is connected to [Node:2840].title",
"success": true
} ],
"context": "When calling asserts object is connected with a valid connection",
"fullname": "test_when_calling_obj_is_connected_with_a_real_connection",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:2840] does not have user signal: false_signal",
"context": "Then it passes",
"expected": "[Node:2840] does not have user signal: false_signal",
"success": true
} ],
"context": "When calling obj_does_not_have_user_signal with fake signal",
"fullname": "test_when_calling_does_not_have_user_signal",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:2840] has user signal: dummy_signal",
"context": "Then it passes",
"expected": "[Node:2840] has user signal: dummy_signal",
"success": true
} ],
"context": "When calling obj_has_user_signal after adding a signal",
"fullname": "test_when_calling_has_user_signal_after_adding_a_signal",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:2840].builtin_dummy is not connected to [Node:2840].title",
"context": "Then it passes",
"expected": "[Node:2840].builtin_dummy is not connected to [Node:2840].title",
"success": true
} ],
"context": "When calling asserts object is not connected with an invalid connection",
"fullname": "test_when_calling_obj_is_not_connected_with_an_invalid_connection",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:2840] does not have meta: confusing",
"context": "Then it passes",
"expected": "[Node:2840] does not have meta: confusing",
"success": true
} ],
"context": "When calling asserts.object_has_meta with real key but null val",
"fullname": "test_when_calling_does_not_have_meta_real_key_null_value_pair",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:2840] does not have user signal: builtin_dummy",
"context": "Then it passes",
"expected": "[Node:2840] does not have user signal: builtin_dummy",
"success": true
} ],
"context": "When calling does not have user signal with class signal",
"fullname": "test_when_calling_does_not_have_user_signal_with_class_signal_constant",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:2840] does not have meta: bad_meta",
"context": "Then it passes",
"expected": "[Node:2840] does not have meta: bad_meta",
"success": true
} ],
"context": "When calling asserts.object_does_not_have_meta()",
"fullname": "test_when_calling_does_not_have_meta",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 15,
"path": "res://tests/unit/object.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/object.test.gd",
"tags": [  ],
"test": ExtResource( 7 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 15
}, {
"context": "Given an Is Instance of class/type Assertion",
"methods": [ {
"assertions": [ {
"actual": "|PoolVector2Array| [] != null",
"context": "vec2s is not null",
"expected": "|PoolVector2Array| [] != null",
"success": true
}, {
"actual": "[] is builtin: PoolVector2Array",
"context": "Then it passes",
"expected": "[] is builtin: PoolVector2Array",
"success": true
} ],
"context": "When calling is asserts.is_PoolVector2Array(vec2s: PoolVector2Array)",
"fullname": "test_when_calling_is_PoolVector2Array",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|PoolIntArray| [] != null",
"context": "ints is not null",
"expected": "|PoolIntArray| [] != null",
"success": true
}, {
"actual": "[] is builtin: PoolIntArray",
"context": "Then it passes",
"expected": "[] is builtin: PoolIntArray",
"success": true
} ],
"context": "When calling asserts.is_PoolIntArray(ints: PoolIntArray)",
"fullname": "test_when_calling_is_PoolIntArray",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|Rect2| (0, 0, 0, 0) != null",
"context": "rect2 is not null",
"expected": "|Rect2| (0, 0, 0, 0) != null",
"success": true
}, {
"actual": "(0, 0, 0, 0) is builtin: Rect2",
"context": "Then it passes",
"expected": "(0, 0, 0, 0) is builtin: Rect2",
"success": true
} ],
"context": "When calling asserts.is_Rect2(rect2: Rect2)",
"fullname": "test_when_calling_is_Rect2",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|RID| [RID] != null",
"context": "rid is not null",
"expected": "|RID| [RID] != null",
"success": true
}, {
"actual": "[RID] is builtin: RID",
"context": "Then it passes",
"expected": "[RID] is builtin: RID",
"success": true
} ],
"context": "When calling asserts.is_RID(rid: RID)",
"fullname": "test_when_calling_is_RID",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|NodePath| . != null",
"context": "@'Parent/Child' is not null",
"expected": "|NodePath| . != null",
"success": true
}, {
"actual": ". is builtin: NodePath",
"context": "Then it passes",
"expected": ". is builtin: NodePath",
"success": true
} ],
"context": "When calling asserts.is_NodePath(@'Parent/Child')",
"fullname": "test_when_calling_is_NodePath",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|PoolVector3Array| [] != null",
"context": "vec3s is not null",
"expected": "|PoolVector3Array| [] != null",
"success": true
}, {
"actual": "[] is builtin: PoolVector3Array",
"context": "Then it passes",
"expected": "[] is builtin: PoolVector3Array",
"success": true
} ],
"context": "When calling is asserts.is_PoolVector3Array(vec3s: PoolVector3Array)",
"fullname": "test_when_calling_is_PoolVector3Array",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|Transform| 1, 0, 0, 0, 1, 0, 0, 0, 1 - 0, 0, 0 != null",
"context": "transform is not null",
"expected": "|Transform| 1, 0, 0, 0, 1, 0, 0, 0, 1 - 0, 0, 0 != null",
"success": true
}, {
"actual": "1, 0, 0, 0, 1, 0, 0, 0, 1 - 0, 0, 0 is builtin: Transform",
"context": "Then it passes",
"expected": "1, 0, 0, 0, 1, 0, 0, 0, 1 - 0, 0, 0 is builtin: Transform",
"success": true
} ],
"context": "When calling asserts.is_Transform(transform: Transform)",
"fullname": "test_when_calling_is_Transform",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|PoolColorArray| [PoolColorArray] != null",
"context": "colors is not null",
"expected": "|PoolColorArray| [PoolColorArray] != null",
"success": true
}, {
"actual": "[PoolColorArray] is builtin: PoolColorArray",
"context": "Then it passes",
"expected": "[PoolColorArray] is builtin: PoolColorArray",
"success": true
} ],
"context": "When calling asserts.is_PoolColorArray(colors: PoolColorArray)",
"fullname": "test_when_calling_is_PoolColorArray",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|Quat| (0, 0, 0, 1) != null",
"context": "quat is not null",
"expected": "|Quat| (0, 0, 0, 1) != null",
"success": true
}, {
"actual": "(0, 0, 0, 1) is builtin: Quat",
"context": "Then it passes",
"expected": "(0, 0, 0, 1) is builtin: Quat",
"success": true
} ],
"context": "When calling asserts.is_Quat(quat: Quat)",
"fullname": "test_when_calling_is_Quat",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|String|  != null",
"context": "strs is not null",
"expected": "|String|  != null",
"success": true
}, {
"actual": " is builtin: String",
"context": "Then it passes",
"expected": " is builtin: String",
"success": true
} ],
"context": "When calling asserts.is_string(strs: String)",
"fullname": "test_when_calling_is_string",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|PoolStringArray| [] != null",
"context": "strs is not null",
"expected": "|PoolStringArray| [] != null",
"success": true
}, {
"actual": "[] is builtin: PoolStringArray",
"context": "Then it passes",
"expected": "[] is builtin: PoolStringArray",
"success": true
} ],
"context": "When calling is asserts.is_PoolStringArray(strs: PoolStringArray)",
"fullname": "test_when_calling_is_PoolStringArray",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|Vector2| (0, 0) != null",
"context": "vec2 is not null",
"expected": "|Vector2| (0, 0) != null",
"success": true
}, {
"actual": "(0, 0) is builtin: Vector2",
"context": "Then it passes",
"expected": "(0, 0) is builtin: Vector2",
"success": true
} ],
"context": "When calling asserts.is_Vector2(vec2)",
"fullname": "test_when_calling_is_Vector2",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|Vector3| (0, 0, 0) != null",
"context": "vec3 is not null",
"expected": "|Vector3| (0, 0, 0) != null",
"success": true
}, {
"actual": "(0, 0, 0) is builtin: Vector3",
"context": "Then it passes",
"expected": "(0, 0, 0) is builtin: Vector3",
"success": true
} ],
"context": "When calling asserts.is_Vector3(vec3: Vector3",
"fullname": "test_when_calling_is_Vector3",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|Plane| 0, 0, 0, 0 != null",
"context": "plane is not null",
"expected": "|Plane| 0, 0, 0, 0 != null",
"success": true
}, {
"actual": "0, 0, 0, 0 is builtin: Plane",
"context": "then it passes",
"expected": "0, 0, 0, 0 is builtin: Plane",
"success": true
} ],
"context": "When calling asserts.is_Plane(plane: Plane())",
"fullname": "test_when_calling_is_Plane",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|PoolByteArray| [PoolByteArray] != null",
"context": "bytes is not null",
"expected": "|PoolByteArray| [PoolByteArray] != null",
"success": true
}, {
"actual": "[PoolByteArray] is builtin: PoolByteArray",
"context": "Then it passes",
"expected": "[PoolByteArray] is builtin: PoolByteArray",
"success": true
} ],
"context": "When calling asserts.is_PoolByteArray(bytes: PoolByteArray)",
"fullname": "test_when_calling_is_PoolByteArray",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|Color| 0,0,0,1 != null",
"context": "color is not null",
"expected": "|Color| 0,0,0,1 != null",
"success": true
}, {
"actual": "0,0,0,1 is builtin: Color",
"context": "Then it passes",
"expected": "0,0,0,1 is builtin: Color",
"success": true
} ],
"context": "When calling asserts.is_color(color: Color)",
"fullname": "test_when_calling_is_Color",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "1 is builtin: float",
"context": "Then it passes",
"expected": "1 is builtin: float",
"success": true
} ],
"context": "When calling asserts.is_float(1.0)",
"fullname": "test_when_calling_is_float",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|PoolRealArray| [] != null",
"context": "reals is not null",
"expected": "|PoolRealArray| [] != null",
"success": true
}, {
"actual": "[] is builtin: PoolRealArray",
"context": "Then it passes",
"expected": "[] is builtin: PoolRealArray",
"success": true
} ],
"context": "When calling is asserts.is_PoolRealArray(reals: PoolRealArray)",
"fullname": "test_when_calling_is_PoolRealArray",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|Transform2D| ((1, 0), (0, 1), (0, 0)) != null",
"context": "transform2D is not null",
"expected": "|Transform2D| ((1, 0), (0, 1), (0, 0)) != null",
"success": true
}, {
"actual": "((1, 0), (0, 1), (0, 0)) is builtin: Transform2D",
"context": "Then it passes",
"expected": "((1, 0), (0, 1), (0, 0)) is builtin: Transform2D",
"success": true
} ],
"context": "When calling asserts.is_Transform(transform2D: Transform2D)",
"fullname": "test_when_calling_is_Transform2D",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "1 is builtin: int",
"context": "Then it passes",
"expected": "1 is builtin: int",
"success": true
} ],
"context": "When callign asserts.is_int(1)",
"fullname": "test_when_calling_is_int",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|Object| [Node:2945] != null",
"context": "node is not null",
"expected": "|Object| [Node:2945] != null",
"success": true
}, {
"actual": "[Node:2945] is builtin: Object",
"context": "An instance of node is an Object",
"expected": "[Node:2945] is builtin: Object",
"success": true
} ],
"context": "When calling is asserts.object(node: Node)",
"fullname": "test_when_calling_is_object",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|Basis| ((1, 0, 0), (0, 1, 0), (0, 0, 1)) != null",
"context": "basis is not null",
"expected": "|Basis| ((1, 0, 0), (0, 1, 0), (0, 0, 1)) != null",
"success": true
}, {
"actual": "((1, 0, 0), (0, 1, 0), (0, 0, 1)) is builtin: Basis",
"context": "Then it passes",
"expected": "((1, 0, 0), (0, 1, 0), (0, 0, 1)) is builtin: Basis",
"success": true
} ],
"context": "When calling asserts.is_basis(basis: Basis",
"fullname": "test_when_calling_is_Basis",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "{} is builtin: Dictionary",
"context": "Then it passes",
"expected": "{} is builtin: Dictionary",
"success": true
} ],
"context": "When calling asserts.is_Dictionary({})",
"fullname": "test_when_calling_is_Dictionary",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|Array| [] != null",
"context": "array is not null",
"expected": "|Array| [] != null",
"success": true
}, {
"actual": "[] is builtin: Array",
"context": "Then it passes",
"expected": "[] is builtin: Array",
"success": true
} ],
"context": "When calling asserts.is_Array(array: Array)",
"fullname": "test_when_calling_is_Array",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|AABB| 0, 0, 0 - 0, 0, 0 != null",
"context": "AABB is not null",
"expected": "|AABB| 0, 0, 0 - 0, 0, 0 != null",
"success": true
}, {
"actual": "0, 0, 0 - 0, 0, 0 is builtin: AABB",
"context": "Then it passes",
"expected": "0, 0, 0 - 0, 0, 0 is builtin: AABB",
"success": true
} ],
"context": "When calling asserts.is_AABB(aabb: AABB)",
"fullname": "test_when_calling_is_AABB",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "True is builtin: bool",
"context": "Then it passes",
"expected": "True is builtin: bool",
"success": true
} ],
"context": "When calling asserts.is_bool(true)",
"fullname": "test_when_calling_is_bool",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 26,
"path": "res://tests/unit/is_instance.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/is_instance.test.gd",
"tags": [  ],
"test": ExtResource( 6 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 26
}, {
"context": "Given an Is Not Instance of class/type Assertion",
"methods": [ {
"assertions": [ {
"actual": "Null is not builtin: Array",
"context": "Then it passes",
"expected": "Null is not builtin: Array",
"success": true
} ],
"context": "when calling asserts.is_not_Array(null)",
"fullname": "test_when_calling_is_not_Array",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Basis",
"context": "Then it passes",
"expected": "Null is not builtin: Basis",
"success": true
} ],
"context": "when calling asserts.is_not_Basis(null)",
"fullname": "test_when_calling_is_not_Basis",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: AABB",
"context": "Then it passes",
"expected": "Null is not builtin: AABB",
"success": true
} ],
"context": "when calling asserts.is_not_AABB(null)",
"fullname": "test_when_calling_is_not_AABB",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: PoolVector2Array",
"context": "Then it passes",
"expected": "Null is not builtin: PoolVector2Array",
"success": true
} ],
"context": "when calling asserts.is_not_PoolVector2Array(null)",
"fullname": "test_when_calling_is_not_PoolVector2Array",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Vector2",
"context": "Then it passes",
"expected": "Null is not builtin: Vector2",
"success": true
} ],
"context": "when calling asserts.is_not_Vector2(null)",
"fullname": "test_when_calling_is_not_Vector2",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: int",
"context": "Then it passes",
"expected": "Null is not builtin: int",
"success": true
} ],
"context": "when calling asserts.is_not_int(null)",
"fullname": "test_when_calling_is_not_int",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Transform",
"context": "Then it passes",
"expected": "Null is not builtin: Transform",
"success": true
} ],
"context": "when calling asserts.is_not_Transform(null)",
"fullname": "test_when_calling_is_not_Transform",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: float",
"context": "Then it passes",
"expected": "Null is not builtin: float",
"success": true
} ],
"context": "when calling asserts.is_not_float(null)",
"fullname": "test_when_calling_is_not_float",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: String",
"context": "Then it passes",
"expected": "Null is not builtin: String",
"success": true
} ],
"context": "when calling asserts.is_not_String(null)",
"fullname": "test_when_calling_is_not_String",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: NodePath",
"context": "Then it passes",
"expected": "Null is not builtin: NodePath",
"success": true
} ],
"context": "when calling asserts.is_not_NodePath(null)",
"fullname": "test_when_calling_is_not_NodePath",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Plane",
"context": "Then it passes",
"expected": "Null is not builtin: Plane",
"success": true
} ],
"context": "when calling asserts.is_not_Plane(null)",
"fullname": "test_when_calling_is_not_Plane",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: PoolByteArray",
"context": "Then it passes",
"expected": "Null is not builtin: PoolByteArray",
"success": true
} ],
"context": "when calling asserts.is_not_PoolByteArray(null)",
"fullname": "test_when_calling_is_not_PoolByteArray",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Transform2D",
"context": "Then it passes",
"expected": "Null is not builtin: Transform2D",
"success": true
} ],
"context": "when calling asserts.is_not_Transform2D(null)",
"fullname": "test_when_calling_is_not_Transform2D",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: PoolColorArray",
"context": "Then it passes",
"expected": "Null is not builtin: PoolColorArray",
"success": true
} ],
"context": "when calling asserts.is_not_PoolColorArray(null)",
"fullname": "test_when_calling_is_not_PoolColorArray",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: PoolStringArray",
"context": "Then it passes",
"expected": "Null is not builtin: PoolStringArray",
"success": true
} ],
"context": "when calling asserts.is_not_PoolStringArray(null)",
"fullname": "test_when_calling_is_not_PoolStringArray",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Color",
"context": "Then it passes",
"expected": "Null is not builtin: Color",
"success": true
} ],
"context": "when calling asserts.is_not_Color(null)",
"fullname": "test_when_calling_is_not_Color",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Dictionary",
"context": "Then it passes",
"expected": "Null is not builtin: Dictionary",
"success": true
} ],
"context": "when calling asserts.is_not_Dictionary(null)",
"fullname": "test_when_calling_is_not_Dictionary",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: PoolRealArray",
"context": "Then it passes",
"expected": "Null is not builtin: PoolRealArray",
"success": true
} ],
"context": "when calling asserts.is_not_PoolRealArray(null)",
"fullname": "test_when_calling_is_not_PoolRealArray",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: PoolVector3Array",
"context": "Then it passes",
"expected": "Null is not builtin: PoolVector3Array",
"success": true
} ],
"context": "when calling asserts.is_not_PoolVector3Array(null)",
"fullname": "test_when_calling_is_not_PoolVector3Array",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: PoolIntArray",
"context": "Then it passes",
"expected": "Null is not builtin: PoolIntArray",
"success": true
} ],
"context": "when calling asserts.is_not_PoolIntArray(null)",
"fullname": "test_when_calling_is_not_PoolIntArray",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Quat",
"context": "Then it passes",
"expected": "Null is not builtin: Quat",
"success": true
} ],
"context": "when calling asserts.is_not_Quat(null)",
"fullname": "test_when_calling_is_not_Quat",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Rect2",
"context": "Then it passes",
"expected": "Null is not builtin: Rect2",
"success": true
} ],
"context": "when calling asserts.is_not_Rect2(null)",
"fullname": "test_when_calling_is_not_Rect2",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Vector3",
"context": "Then it passes",
"expected": "Null is not builtin: Vector3",
"success": true
} ],
"context": "when calling asserts.is_not_Vector3(null)",
"fullname": "test_when_calling_is_not_Vector3",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: bool",
"context": "Then it passes",
"expected": "Null is not builtin: bool",
"success": true
} ],
"context": "when calling asserts.is_not_bool(null)",
"fullname": "test_when_calling_is_not_bool",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Object",
"context": "Then it passes",
"expected": "Null is not builtin: Object",
"success": true
} ],
"context": "when calling asserts.is_not_Object(null)",
"fullname": "test_when_calling_is_not_Object",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: RID",
"context": "Then it passes",
"expected": "Null is not builtin: RID",
"success": true
} ],
"context": "when calling asserts.is_not_RID(null)",
"fullname": "test_when_calling_is_not_RID",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 26,
"path": "res://tests/unit/is_not_instance.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/is_not_instance.test.gd",
"tags": [  ],
"test": ExtResource( 2 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 26
}, {
"context": "Given the Addition Operator",
"methods": [ {
"assertions": [ {
"actual": "|int| 0 is equal to |int| 0",
"context": "",
"expected": "|int| 0 is equal to |int| 0",
"success": true
} ],
"context": "When we subtract 2 from 2 we get 0",
"fullname": "test_subtract",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 2 is equal to |int| 2",
"context": "",
"expected": "|int| 2 is equal to |int| 2",
"success": true
} ],
"context": "When we subtract 5 from 3 we get 2",
"fullname": "test_subtract",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 1 is equal to |int| 1",
"context": "",
"expected": "|int| 1 is equal to |int| 1",
"success": true
} ],
"context": "When we subtract 7 from 6 we get 1",
"fullname": "test_subtract",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 4 is equal to |int| 4",
"context": "",
"expected": "|int| 4 is equal to |int| 4",
"success": true
} ],
"context": "When we add 2 to 2 we get 4",
"fullname": "test_add",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 8 is equal to |int| 8",
"context": "",
"expected": "|int| 8 is equal to |int| 8",
"success": true
} ],
"context": "When we add 5 to 3 we get 8",
"fullname": "test_add",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 13 is equal to |int| 13",
"context": "",
"expected": "|int| 13 is equal to |int| 13",
"success": true
} ],
"context": "When we add 7 to 6 we get 13",
"fullname": "test_add",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 6,
"path": "res://tests/unit/parameters.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/parameters.test.gd",
"tags": [  ],
"test": ExtResource( 16 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 6
}, {
"context": "Dummy Passing Test",
"methods": [ {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Passing!",
"expected": "|bool| True == true",
"success": true
} ],
"context": "This method passes",
"fullname": "test_this_method_passes",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 1,
"path": "res://tests/unit/suite.test.gd.DummyOne",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/suite.test.gd.DummyOne",
"tags": [  ],
"test": SubResource( 15 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 1
}, {
"context": "Given A Range Assertion",
"methods": [ {
"assertions": [ {
"actual": "10 is not in range(0, 10)",
"context": "Then it passes",
"expected": "10 is not in range(0, 10)",
"success": true
} ],
"context": "When calling is (10) not in range (in range(0, 10)",
"fullname": "test_when_calling_is_not_in_range",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "0 is in range(0, 10)",
"context": "Then it passes",
"expected": "0 is in range(0, 10)",
"success": true
} ],
"context": "When calling is (0) in range(0, 10)",
"fullname": "test_when_calling_is_in_range",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 2,
"path": "res://tests/unit/range.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/range.test.gd",
"tags": [  ],
"test": ExtResource( 15 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 2
}, {
"context": "Dummy Test 2",
"methods": [ {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Passing!",
"expected": "|bool| True == true",
"success": true
} ],
"context": "This method passes",
"fullname": "test_this_method_passes",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 1,
"path": "res://tests/unit/suite.test.gd.DummyTwo",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/suite.test.gd.DummyTwo",
"tags": [  ],
"test": SubResource( 16 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 1
}, {
"context": "Given a String Assertion",
"methods": [ {
"assertions": [ {
"actual": "lorem impsum begins with lorem",
"context": "Then it passes",
"expected": "lorem impsum begins with lorem",
"success": true
} ],
"context": "When calling asserts.string_begins_with('lorem', 'lorem impsum')",
"fullname": "test_when_calling_string_begins_with",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "lorem impsum ends with impsum",
"context": "Then it passes",
"expected": "lorem impsum ends with impsum",
"success": true
} ],
"context": "When calling asserts.string_ends_with('impsum', 'lorem impsum')",
"fullname": "test_when_calling_string_ends_with",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "impsum does not contain beem im",
"context": "Then it passes",
"expected": "impsum does not contain beem im",
"success": true
} ],
"context": "When calling asserts.string_does_not_contain('em im', 'impsum')",
"fullname": "test_when_calling_string_does_not_contain",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "impsum does not begin with bleh lorem",
"context": "Then it passes",
"expected": "impsum does not begin with bleh lorem",
"success": true
} ],
"context": "When calling asserts.string_does_not_begin_with('lorem', 'impsum')",
"fullname": "test_when_calling_string_does_not_begin_with",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "lorem impsum contains em im",
"context": "Then it passes",
"expected": "lorem impsum contains em im",
"success": true
} ],
"context": "When calling asserts.string_contains('em im', 'lorem impsum')",
"fullname": "test_when_calling_string_contains",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "impsum does not end with lorem",
"context": "Then it passes",
"expected": "impsum does not end with lorem",
"success": true
} ],
"context": "When calling asserts.string_does_not_end_with('lorem', 'impsum')",
"fullname": "test_when_calling_string_does_not_end_with",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 6,
"path": "res://tests/unit/string.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/string.test.gd",
"tags": [  ],
"test": ExtResource( 9 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 6
}, {
"context": "Given a Test Script",
"methods": [ {
"assertions": [ {
"actual": "|bool| True == true",
"context": "",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|int| 2 is equal to |int| 2",
"context": "",
"expected": "|int| 2 is equal to |int| 2",
"success": true
} ],
"context": " when we omit context we can see expected and got under method",
"fullname": "test_when_we_omit_context_we_can_see_expected_and_got_under_method",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "if the test didn't break this works",
"expected": "|bool| True == true",
"success": true
} ],
"context": " we can omit describe",
"fullname": "test_we_can_omit_describe",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 10 is greater than |int| 1",
"context": "We get an array of multiple values back",
"expected": "|int| 10 is greater than |int| 1",
"success": true
}, {
"actual": "|int| 0 is not equal to |int| 9",
"context": "With different values",
"expected": "|int| 0 != |int| 9",
"success": true
}, {
"actual": "|int| 10 is greater than |int| 1",
"context": "And we can track multiple properties",
"expected": "|int| 10 is greater than |int| 1",
"success": true
} ],
"context": "When we record properties",
"fullname": "test_we_can_record_properties",
"passed": 3,
"success": true,
"time": 0.0,
"total": 3
} ],
"passed": 3,
"path": "res://tests/unit/test.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/test.test.gd",
"tags": [  ],
"test": ExtResource( 19 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 3
}, {
"context": "Given a Signal Watcher",
"methods": [ {
"assertions": [ {
"actual": "signal: example was emitted from [Node:3000]",
"context": "Then it captures the emitted signal",
"expected": "signal: example was emitted from [Node:3000]",
"success": true
} ],
"context": "When we watch and emit a signal",
"fullname": "test_When_we_watch_and_emit_a_signal",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "signal: multiple was emitted from [Node:3000] 2",
"context": "Then we can track how many times we emitted it",
"expected": "signal: multiple was emitted from [Node:3000] 2",
"success": true
} ],
"context": "When we watch and signal and emit it multiple times",
"fullname": "test_When_we_watch_a_signal_and_emit_it_multiple_times",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Signal: example was not emitted from [Node:3000]",
"context": "Then it does not capture the non-emitted signal",
"expected": "Signal: example was not emitted from [Node:3000]",
"success": true
} ],
"context": "When we watch and do not emit a signal",
"fullname": "test_When_we_watch_and_do_not_emit_a_signal",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Signal: example was emitted from [Node:3000] with arguments: [1, 20, 5]",
"context": "Then it captures any arguments that where passed when the signal was emitted",
"expected": "Signal: example was emitted from [Node:3000] with arguments: [1, 20, 5]",
"success": true
} ],
"context": "When we watch a signal from an object with no bound variables",
"fullname": "test_When_we_watch_a_signal_from_an_object_with_no_bound_variables",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 4,
"path": "res://tests/unit/watcher.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/watcher.test.gd",
"tags": [  ],
"test": ExtResource( 17 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 4
}, {
"context": "Given a Yield",
"methods": [ {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then we set var a to true",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then we set var b to true",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we yield in start twice",
"fullname": "test_When_we_yield_in_start",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then we set var c to true",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then we set var d to true",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we yield in pre thrice",
"fullname": "test_When_we_yield_in_pre",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "[100, Null, Null, Null, Null, Null] is builtin: Array",
"context": "Then we get an array",
"expected": "[100, Null, Null, Null, Null, Null] is builtin: Array",
"success": true
}, {
"actual": "|int| 6 is equal to |int| 6",
"context": "Of size 6",
"expected": "|int| 6 is equal to |int| 6",
"success": true
}, {
"actual": "|int| 100 is equal to |int| 100",
"context": "Where element 0 is 100",
"expected": "|int| 100 is equal to |int| 100",
"success": true
} ],
"context": "When yield(self.yield_value()) returns",
"fullname": "test_When_we_yield_we_get_the_return_value",
"passed": 3,
"success": true,
"time": 0.0,
"total": 3
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then the yielder is paused",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "The timeout signal of the yielder is not connected",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When the yielder times out on until_timeout(0.1)",
"fullname": "test_When_the_yielder_times_out",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then the yielder is unpaused",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then the timeout signal of the yielder is connected",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then our signal is connected to the yielder",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we call until signal",
"fullname": "test_When_we_call_until_signal",
"passed": 3,
"success": true,
"time": 0.0,
"total": 3
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then yielder is not active",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When asserting against a test",
"fullname": "test_Yielder_is_not_active_when_asserting",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then yielder is unpaused",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "The timeout signal of the yielder is connected",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we call until_timeout (with 1.0)",
"fullname": "test_When_we_call_until_timeout",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then we set var e to true",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then we set var f to true",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we yield twice in execute",
"fullname": "test_When_we_yield_in_execute",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then the timeout signal is disconnected",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then the signal-signal is disconnected",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When it is finished",
"fullname": "test_When_yielder_is_finished_signals_are_disconnected",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then the yielder is paused",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then the timeout signal of the yielder is disconnected",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then our signal to the yielder is disconnected",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When the yielder heres our signal",
"fullname": "test_When_the_yielder_hears_our_signal",
"passed": 3,
"success": true,
"time": 0.0,
"total": 3
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then the yielder is paused",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When a signal being yielded on is emitted",
"fullname": "test_When_a_signal_being_yielded_on_is_emitted_the_yielder_is_stopped",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 11,
"path": "res://tests/unit/yield.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/yield.test.gd",
"tags": [  ],
"test": ExtResource( 18 ),
"yield_time": 1.9
},
"success": true,
"time_taken": 0.0,
"total": 11
}, {
"context": "Given a Yield",
"methods": [ {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then we set var a to true",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then we set var b to true",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we yield in start twice",
"fullname": "test_When_we_yield_in_start",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then we set var c to true",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then we set var d to true",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we yield in pre thrice",
"fullname": "test_When_we_yield_in_pre",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "[100, Null, Null, Null, Null, Null] is builtin: Array",
"context": "Then we get an array",
"expected": "[100, Null, Null, Null, Null, Null] is builtin: Array",
"success": true
}, {
"actual": "|int| 6 is equal to |int| 6",
"context": "Of size 6",
"expected": "|int| 6 is equal to |int| 6",
"success": true
}, {
"actual": "|int| 100 is equal to |int| 100",
"context": "Where element 0 is 100",
"expected": "|int| 100 is equal to |int| 100",
"success": true
} ],
"context": "When yield(self.yield_value()) returns",
"fullname": "test_When_we_yield_we_get_the_return_value",
"passed": 3,
"success": true,
"time": 0.0,
"total": 3
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then the yielder is paused",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "The timeout signal of the yielder is not connected",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When the yielder times out on until_timeout(0.1)",
"fullname": "test_When_the_yielder_times_out",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then the yielder is unpaused",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then the timeout signal of the yielder is connected",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then our signal is connected to the yielder",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we call until signal",
"fullname": "test_When_we_call_until_signal",
"passed": 3,
"success": true,
"time": 0.0,
"total": 3
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then yielder is not active",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When asserting against a test",
"fullname": "test_Yielder_is_not_active_when_asserting",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then yielder is unpaused",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "The timeout signal of the yielder is connected",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we call until_timeout (with 1.0)",
"fullname": "test_When_we_call_until_timeout",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then we set var e to true",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then we set var f to true",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we yield twice in execute",
"fullname": "test_When_we_yield_in_execute",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then the timeout signal is disconnected",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then the signal-signal is disconnected",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When it is finished",
"fullname": "test_When_yielder_is_finished_signals_are_disconnected",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then the yielder is paused",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then the timeout signal of the yielder is disconnected",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then our signal to the yielder is disconnected",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When the yielder heres our signal",
"fullname": "test_When_the_yielder_hears_our_signal",
"passed": 3,
"success": true,
"time": 0.0,
"total": 3
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then the yielder is paused",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When a signal being yielded on is emitted",
"fullname": "test_When_a_signal_being_yielded_on_is_emitted_the_yielder_is_stopped",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 11,
"path": "res://tests/unit/yield.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/yield.test.gd",
"tags": [  ],
"test": ExtResource( 18 ),
"yield_time": 1.9
},
"success": true,
"time_taken": 0.0,
"total": 11
}, {
"context": "Given a Yield",
"methods": [ {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then we set var a to true",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then we set var b to true",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we yield in start twice",
"fullname": "test_When_we_yield_in_start",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then we set var c to true",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then we set var d to true",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we yield in pre thrice",
"fullname": "test_When_we_yield_in_pre",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "[100, Null, Null, Null, Null, Null] is builtin: Array",
"context": "Then we get an array",
"expected": "[100, Null, Null, Null, Null, Null] is builtin: Array",
"success": true
}, {
"actual": "|int| 6 is equal to |int| 6",
"context": "Of size 6",
"expected": "|int| 6 is equal to |int| 6",
"success": true
}, {
"actual": "|int| 100 is equal to |int| 100",
"context": "Where element 0 is 100",
"expected": "|int| 100 is equal to |int| 100",
"success": true
} ],
"context": "When yield(self.yield_value()) returns",
"fullname": "test_When_we_yield_we_get_the_return_value",
"passed": 3,
"success": true,
"time": 0.0,
"total": 3
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then the yielder is paused",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "The timeout signal of the yielder is not connected",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When the yielder times out on until_timeout(0.1)",
"fullname": "test_When_the_yielder_times_out",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then the yielder is unpaused",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then the timeout signal of the yielder is connected",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then our signal is connected to the yielder",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we call until signal",
"fullname": "test_When_we_call_until_signal",
"passed": 3,
"success": true,
"time": 0.0,
"total": 3
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then yielder is not active",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When asserting against a test",
"fullname": "test_Yielder_is_not_active_when_asserting",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then yielder is unpaused",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "The timeout signal of the yielder is connected",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we call until_timeout (with 1.0)",
"fullname": "test_When_we_call_until_timeout",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then we set var e to true",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then we set var f to true",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we yield twice in execute",
"fullname": "test_When_we_yield_in_execute",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then the timeout signal is disconnected",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then the signal-signal is disconnected",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When it is finished",
"fullname": "test_When_yielder_is_finished_signals_are_disconnected",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then the yielder is paused",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then the timeout signal of the yielder is disconnected",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then our signal to the yielder is disconnected",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When the yielder heres our signal",
"fullname": "test_When_the_yielder_hears_our_signal",
"passed": 3,
"success": true,
"time": 0.0,
"total": 3
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then the yielder is paused",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When a signal being yielded on is emitted",
"fullname": "test_When_a_signal_being_yielded_on_is_emitted_the_yielder_is_stopped",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 11,
"path": "res://tests/unit/yield.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/yield.test.gd",
"tags": [  ],
"test": ExtResource( 18 ),
"yield_time": 1.9
},
"success": true,
"time_taken": 0.0,
"total": 11
} ],
1611514614: [ {
"context": "Default Args",
"methods": [ {
"assertions": [ {
"actual": "|bool| True == true",
"context": "If this method can be reached then we have doubled a script with default argument(s) properly!",
"expected": "|bool| True == true",
"success": true
} ],
"context": " default arguments of interpolate property",
"fullname": "test_default_arguments_of_interpolate_property",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 1,
"path": "res://tests/integration/default_args.test.gd",
"source": {
"containers": [ "res://tests/integration", "res://tests" ],
"method": "",
"path": "res://tests/integration/default_args.test.gd",
"tags": [  ],
"test": ExtResource( 10 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 1
}, {
"context": "Given a Boolean Assertion",
"methods": [ {
"assertions": [ {
"actual": "|bool| False == false",
"context": "Then it passes",
"expected": "|bool| False == false",
"success": true
} ],
"context": "When calling asserts.is_false(false)",
"fullname": "test_when_calling_asserts_is_false",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then it passes",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When calling asserts.is_true(true)",
"fullname": "test_when_calling_asserts_is_true",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| True != false",
"context": "",
"expected": "|bool| True == false",
"success": false
} ],
"context": " intentional failure",
"fullname": "test_intentional_failure",
"passed": 0,
"success": false,
"time": 0.0,
"total": 1
} ],
"passed": 2,
"path": "res://tests/integration/boolean.test.gd",
"source": {
"containers": [ "res://tests/integration", "res://tests" ],
"method": "",
"path": "res://tests/integration/boolean.test.gd",
"tags": [  ],
"test": ExtResource( 20 ),
"yield_time": 0.0
},
"success": false,
"time_taken": 0.0,
"total": 3
}, {
"context": "Given is_on_floor",
"methods": [ {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then it can be stubbed",
"expected": "|bool| True == true",
"success": true
} ],
"context": "From a user-defined script",
"fullname": "test_stubbing_is_on_floor_method_from_user_defined_class",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then it can be stubbed",
"expected": "|bool| True == true",
"success": true
} ],
"context": "From a child node of a scene without scripts",
"fullname": "test_stubbing_is_on_floor_as_child_node_with_no_script",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then it can be stubbed",
"expected": "|bool| True == true",
"success": true
} ],
"context": "From a built-in KinematicBody2D2",
"fullname": "test_stubbing_is_on_floor_method_from_builtin_class2",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 3,
"path": "res://tests/integration/on_floor.test.gd",
"source": {
"containers": [ "res://tests/integration", "res://tests" ],
"method": "",
"path": "res://tests/integration/on_floor.test.gd",
"tags": [  ],
"test": ExtResource( 5 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 3
}, {
"context": "Given a Script Director",
"methods": [ {
"assertions": [ {
"actual": "[Reference:1459] is instance of class: [GDScript:1452]",
"context": "Then we get that inner class back",
"expected": "[Reference:1459] is instance of class: [GDScript:1452]",
"success": true
} ],
"context": "When we double an inner class",
"fullname": "test_When_we_double_an_inner_class",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|Dictionary| {_enter_tree:{arguments:, default_arguments:}, _exit_tree:{arguments:, default_arguments:}, _get:{arguments:a, default_arguments:a}, _get_configuration_warning:{arguments:, default_arguments:}, _get_editor_description:{arguments:, default_arguments:}, _get_import_path:{arguments:, default_arguments:}, _get_property_list:{arguments:, default_arguments:}, _init:{arguments:, default_arguments:}, _input:{arguments:a, default_arguments:a}, _notification:{arguments:a, default_arguments:a}, _physics_process:{arguments:a, default_arguments:a}, _process:{arguments:a, default_arguments:a}, _ready:{arguments:, default_arguments:}, _set:{arguments:a, b, default_arguments:a, b}, _set_editor_description:{arguments:a, default_arguments:a}, _set_import_path:{arguments:a, default_arguments:a}, _to_string:{arguments:, default_arguments:}, _unhandled_input:{arguments:a, default_arguments:a}, _unhandled_key_input:{arguments:a, default_arguments:a}, add:{arguments:a, b, default_arguments:a, b}, add_child:{arguments:a, b, default_arguments:a, b = False}, add_child_below_node:{arguments:a, b, c, default_arguments:a, b, c = False}, add_to_group:{arguments:a, b, default_arguments:a, b = False}, add_user_signal:{arguments:a, b, default_arguments:a, b = []}, call:{arguments:a, default_arguments:a}, call_deferred:{arguments:a, default_arguments:a}, callv:{arguments:a, b, default_arguments:a, b}, can_process:{arguments:, default_arguments:}, can_translate_messages:{arguments:, default_arguments:}, connect:{arguments:a, b, c, d, e, default_arguments:a, b, c, d = [], e = 0}, disconnect:{arguments:a, b, c, default_arguments:a, b, c}, divide:{arguments:a, b, default_arguments:a, b}, duplicate:{arguments:a, default_arguments:a = 15}, emit_signal:{arguments:a, default_arguments:a}, find_node:{arguments:a, b, c, default_arguments:a, b = True, c = True}, find_parent:{arguments:a, default_arguments:a}, free:{arguments:, default_arguments:}, get:{arguments:a, default_arguments:a}, get_child:{arguments:a, default_arguments:a}, get_child_count:{arguments:, default_arguments:}, get_children:{arguments:, default_arguments:}, get_class:{arguments:, default_arguments:}, get_custom_multiplayer:{arguments:, default_arguments:}, get_filename:{arguments:, default_arguments:}, get_groups:{arguments:, default_arguments:}, get_incoming_connections:{arguments:, default_arguments:}, get_index:{arguments:, default_arguments:}, get_indexed:{arguments:a, default_arguments:a}, get_instance_id:{arguments:, default_arguments:}, get_meta:{arguments:a, default_arguments:a}, get_meta_list:{arguments:, default_arguments:}, get_method_list:{arguments:, default_arguments:}, get_multiplayer:{arguments:, default_arguments:}, get_name:{arguments:, default_arguments:}, get_network_master:{arguments:, default_arguments:}, get_node:{arguments:a, default_arguments:a}, get_node_and_resource:{arguments:a, default_arguments:a}, get_node_or_null:{arguments:a, default_arguments:a}, get_owner:{arguments:, default_arguments:}, get_parent:{arguments:, default_arguments:}, get_path:{arguments:, default_arguments:}, get_path_to:{arguments:a, default_arguments:a}, get_pause_mode:{arguments:, default_arguments:}, get_physics_process_delta_time:{arguments:, default_arguments:}, get_position_in_parent:{arguments:, default_arguments:}, get_process_delta_time:{arguments:, default_arguments:}, get_process_priority:{arguments:, default_arguments:}, get_property_list:{arguments:, default_arguments:}, get_scene_instance_load_placeholder:{arguments:, default_arguments:}, get_script:{arguments:, default_arguments:}, get_signal_connection_list:{arguments:a, default_arguments:a}, get_signal_list:{arguments:, default_arguments:}, get_tree:{arguments:, default_arguments:}, get_viewport:{arguments:, default_arguments:}, has_meta:{arguments:a, default_arguments:a}, has_method:{arguments:a, default_arguments:a}, has_node:{arguments:a, default_arguments:a}, has_node_and_resource:{arguments:a, default_arguments:a}, has_signal:{arguments:a, default_arguments:a}, has_user_signal:{arguments:a, default_arguments:a}, is_a_parent_of:{arguments:a, default_arguments:a}, is_blocking_signals:{arguments:, default_arguments:}, is_class:{arguments:a, default_arguments:a}, is_connected:{arguments:a, b, c, default_arguments:a, b, c}, is_displayed_folded:{arguments:, default_arguments:}, is_greater_than:{arguments:a, default_arguments:a}, is_in_group:{arguments:a, default_arguments:a}, is_inside_tree:{arguments:, default_arguments:}, is_network_master:{arguments:, default_arguments:}, is_physics_processing:{arguments:, default_arguments:}, is_physics_processing_internal:{arguments:, default_arguments:}, is_processing:{arguments:, default_arguments:}, is_processing_input:{arguments:, default_arguments:}, is_processing_internal:{arguments:, default_arguments:}, is_processing_unhandled_input:{arguments:, default_arguments:}, is_processing_unhandled_key_input:{arguments:, default_arguments:}, is_queued_for_deletion:{arguments:, default_arguments:}, math_fight:{arguments:, default_arguments:}, move_child:{arguments:a, b, default_arguments:a, b}, multiply:{arguments:a, b, default_arguments:a, b}, notification:{arguments:a, b, default_arguments:a, b = False}, pi:{arguments:, default_arguments:}, print_stray_nodes:{arguments:, default_arguments:}, print_tree:{arguments:, default_arguments:}, print_tree_pretty:{arguments:, default_arguments:}, propagate_call:{arguments:a, b, c, default_arguments:a, b = [], c = False}, propagate_notification:{arguments:a, default_arguments:a}, property_list_changed_notify:{arguments:, default_arguments:}, queue_free:{arguments:, default_arguments:}, raise:{arguments:, default_arguments:}, remove_and_skip:{arguments:, default_arguments:}, remove_child:{arguments:a, default_arguments:a}, remove_from_group:{arguments:a, default_arguments:a}, remove_meta:{arguments:a, default_arguments:a}, replace_by:{arguments:a, b, default_arguments:a, b = False}, request_ready:{arguments:, default_arguments:}, rpc:{arguments:a, default_arguments:a}, rpc_config:{arguments:a, b, default_arguments:a, b}, rpc_id:{arguments:a, b, default_arguments:a, b}, rpc_unreliable:{arguments:a, default_arguments:a}, rpc_unreliable_id:{arguments:a, b, default_arguments:a, b}, rset:{arguments:a, b, default_arguments:a, b}, rset_config:{arguments:a, b, default_arguments:a, b}, rset_id:{arguments:a, b, c, default_arguments:a, b, c}, rset_unreliable:{arguments:a, b, default_arguments:a, b}, rset_unreliable_id:{arguments:a, b, c, default_arguments:a, b, c}, set:{arguments:a, b, default_arguments:a, b}, set_block_signals:{arguments:a, default_arguments:a}, set_custom_multiplayer:{arguments:a, default_arguments:a}, set_deferred:{arguments:a, b, default_arguments:a, b}, set_display_folded:{arguments:a, default_arguments:a}, set_filename:{arguments:a, default_arguments:a}, set_indexed:{arguments:a, b, default_arguments:a, b}, set_message_translation:{arguments:a, default_arguments:a}, set_meta:{arguments:a, b, default_arguments:a, b}, set_name:{arguments:a, default_arguments:a}, set_network_master:{arguments:a, b, default_arguments:a, b = True}, set_owner:{arguments:a, default_arguments:a}, set_pause_mode:{arguments:a, default_arguments:a}, set_physics_process:{arguments:a, default_arguments:a}, set_physics_process_internal:{arguments:a, default_arguments:a}, set_process:{arguments:a, default_arguments:a}, set_process_input:{arguments:a, default_arguments:a}, set_process_internal:{arguments:a, default_arguments:a}, set_process_priority:{arguments:a, default_arguments:a}, set_process_unhandled_input:{arguments:a, default_arguments:a}, set_process_unhandled_key_input:{arguments:a, default_arguments:a}, set_scene_instance_load_placeholder:{arguments:a, default_arguments:a}, set_script:{arguments:a, default_arguments:a}, subtract:{arguments:a, b, default_arguments:a, b}, sum:{arguments:a, default_arguments:a}, to_string:{arguments:, default_arguments:}, tr:{arguments:a, default_arguments:a}, update_configuration_warning:{arguments:, default_arguments:}} is not equal to |Dictionary| {_enter_tree:{arguments:, default_arguments:}, _exit_tree:{arguments:, default_arguments:}, _get:{arguments:a, default_arguments:a}, _get_configuration_warning:{arguments:, default_arguments:}, _get_editor_description:{arguments:, default_arguments:}, _get_import_path:{arguments:, default_arguments:}, _get_property_list:{arguments:, default_arguments:}, _init:{arguments:, default_arguments:}, _input:{arguments:a, default_arguments:a}, _notification:{arguments:a, default_arguments:a}, _physics_process:{arguments:a, default_arguments:a}, _process:{arguments:a, default_arguments:a}, _ready:{arguments:, default_arguments:}, _set:{arguments:a, b, default_arguments:a, b}, _set_editor_description:{arguments:a, default_arguments:a}, _set_import_path:{arguments:a, default_arguments:a}, _to_string:{arguments:, default_arguments:}, _unhandled_input:{arguments:a, default_arguments:a}, _unhandled_key_input:{arguments:a, default_arguments:a}, add:{arguments:a, b, default_arguments:a, b}, add_child:{arguments:a, b, default_arguments:a, b = False}, add_child_below_node:{arguments:a, b, c, default_arguments:a, b, c = False}, add_to_group:{arguments:a, b, default_arguments:a, b = False}, add_user_signal:{arguments:a, b, default_arguments:a, b = []}, call:{arguments:a, default_arguments:a}, call_deferred:{arguments:a, default_arguments:a}, callv:{arguments:a, b, default_arguments:a, b}, can_process:{arguments:, default_arguments:}, can_translate_messages:{arguments:, default_arguments:}, connect:{arguments:a, b, c, d, e, default_arguments:a, b, c, d = [], e = 0}, disconnect:{arguments:a, b, c, default_arguments:a, b, c}, divide:{arguments:a, b, default_arguments:a, b}, duplicate:{arguments:a, default_arguments:a = 15}, emit_signal:{arguments:a, default_arguments:a}, find_node:{arguments:a, b, c, default_arguments:a, b = True, c = True}, find_parent:{arguments:a, default_arguments:a}, free:{arguments:, default_arguments:}, get:{arguments:a, default_arguments:a}, get_child:{arguments:a, default_arguments:a}, get_child_count:{arguments:, default_arguments:}, get_children:{arguments:, default_arguments:}, get_class:{arguments:, default_arguments:}, get_custom_multiplayer:{arguments:, default_arguments:}, get_filename:{arguments:, default_arguments:}, get_groups:{arguments:, default_arguments:}, get_incoming_connections:{arguments:, default_arguments:}, get_index:{arguments:, default_arguments:}, get_indexed:{arguments:a, default_arguments:a}, get_instance_id:{arguments:, default_arguments:}, get_meta:{arguments:a, default_arguments:a}, get_meta_list:{arguments:, default_arguments:}, get_method_list:{arguments:, default_arguments:}, get_multiplayer:{arguments:, default_arguments:}, get_name:{arguments:, default_arguments:}, get_network_master:{arguments:, default_arguments:}, get_node:{arguments:a, default_arguments:a}, get_node_and_resource:{arguments:a, default_arguments:a}, get_node_or_null:{arguments:a, default_arguments:a}, get_owner:{arguments:, default_arguments:}, get_parent:{arguments:, default_arguments:}, get_path:{arguments:, default_arguments:}, get_path_to:{arguments:a, default_arguments:a}, get_pause_mode:{arguments:, default_arguments:}, get_physics_process_delta_time:{arguments:, default_arguments:}, get_position_in_parent:{arguments:, default_arguments:}, get_process_delta_time:{arguments:, default_arguments:}, get_process_priority:{arguments:, default_arguments:}, get_property_list:{arguments:, default_arguments:}, get_scene_instance_load_placeholder:{arguments:, default_arguments:}, get_script:{arguments:, default_arguments:}, get_signal_connection_list:{arguments:a, default_arguments:a}, get_signal_list:{arguments:, default_arguments:}, get_tree:{arguments:, default_arguments:}, get_viewport:{arguments:, default_arguments:}, has_meta:{arguments:a, default_arguments:a}, has_method:{arguments:a, default_arguments:a}, has_node:{arguments:a, default_arguments:a}, has_node_and_resource:{arguments:a, default_arguments:a}, has_signal:{arguments:a, default_arguments:a}, has_user_signal:{arguments:a, default_arguments:a}, is_a_parent_of:{arguments:a, default_arguments:a}, is_blocking_signals:{arguments:, default_arguments:}, is_class:{arguments:a, default_arguments:a}, is_connected:{arguments:a, b, c, default_arguments:a, b, c}, is_displayed_folded:{arguments:, default_arguments:}, is_greater_than:{arguments:a, default_arguments:a}, is_in_group:{arguments:a, default_arguments:a}, is_inside_tree:{arguments:, default_arguments:}, is_network_master:{arguments:, default_arguments:}, is_physics_processing:{arguments:, default_arguments:}, is_physics_processing_internal:{arguments:, default_arguments:}, is_processing:{arguments:, default_arguments:}, is_processing_input:{arguments:, default_arguments:}, is_processing_internal:{arguments:, default_arguments:}, is_processing_unhandled_input:{arguments:, default_arguments:}, is_processing_unhandled_key_input:{arguments:, default_arguments:}, is_queued_for_deletion:{arguments:, default_arguments:}, math_fight:{arguments:, default_arguments:}, move_child:{arguments:a, b, default_arguments:a, b}, multiply:{arguments:a, b, default_arguments:a, b}, notification:{arguments:a, b, default_arguments:a, b = False}, pi:{arguments:, default_arguments:}, print_stray_nodes:{arguments:, default_arguments:}, print_tree:{arguments:, default_arguments:}, print_tree_pretty:{arguments:, default_arguments:}, propagate_call:{arguments:a, b, c, default_arguments:a, b = [], c = False}, propagate_notification:{arguments:a, default_arguments:a}, property_list_changed_notify:{arguments:, default_arguments:}, queue_free:{arguments:, default_arguments:}, raise:{arguments:, default_arguments:}, remove_and_skip:{arguments:, default_arguments:}, remove_child:{arguments:a, default_arguments:a}, remove_from_group:{arguments:a, default_arguments:a}, remove_meta:{arguments:a, default_arguments:a}, replace_by:{arguments:a, b, default_arguments:a, b = False}, request_ready:{arguments:, default_arguments:}, rpc:{arguments:a, default_arguments:a}, rpc_config:{arguments:a, b, default_arguments:a, b}, rpc_id:{arguments:a, b, default_arguments:a, b}, rpc_unreliable:{arguments:a, default_arguments:a}, rpc_unreliable_id:{arguments:a, b, default_arguments:a, b}, rset:{arguments:a, b, default_arguments:a, b}, rset_config:{arguments:a, b, default_arguments:a, b}, rset_id:{arguments:a, b, c, default_arguments:a, b, c}, rset_unreliable:{arguments:a, b, default_arguments:a, b}, rset_unreliable_id:{arguments:a, b, c, default_arguments:a, b, c}, set:{arguments:a, b, default_arguments:a, b}, set_block_signals:{arguments:a, default_arguments:a}, set_custom_multiplayer:{arguments:a, default_arguments:a}, set_deferred:{arguments:a, b, default_arguments:a, b}, set_display_folded:{arguments:a, default_arguments:a}, set_filename:{arguments:a, default_arguments:a}, set_indexed:{arguments:a, b, default_arguments:a, b}, set_message_translation:{arguments:a, default_arguments:a}, set_meta:{arguments:a, b, default_arguments:a, b}, set_name:{arguments:a, default_arguments:a}, set_network_master:{arguments:a, b, default_arguments:a, b = True}, set_owner:{arguments:a, default_arguments:a}, set_pause_mode:{arguments:a, default_arguments:a}, set_physics_process:{arguments:a, default_arguments:a}, set_physics_process_internal:{arguments:a, default_arguments:a}, set_process:{arguments:a, default_arguments:a}, set_process_input:{arguments:a, default_arguments:a}, set_process_internal:{arguments:a, default_arguments:a}, set_process_priority:{arguments:a, default_arguments:a}, set_process_unhandled_input:{arguments:a, default_arguments:a}, set_process_unhandled_key_input:{arguments:a, default_arguments:a}, set_scene_instance_load_placeholder:{arguments:a, default_arguments:a}, set_script:{arguments:a, default_arguments:a}, subtract:{arguments:a, b, default_arguments:a, b}, sum:{arguments:a, default_arguments:a}, to_string:{arguments:, default_arguments:}, tr:{arguments:a, default_arguments:a}, update_configuration_warning:{arguments:, default_arguments:}}",
"context": "Then they do not share resources",
"expected": "|Dictionary| {_enter_tree:{arguments:, default_arguments:}, _exit_tree:{arguments:, default_arguments:}, _get:{arguments:a, default_arguments:a}, _get_configuration_warning:{arguments:, default_arguments:}, _get_editor_description:{arguments:, default_arguments:}, _get_import_path:{arguments:, default_arguments:}, _get_property_list:{arguments:, default_arguments:}, _init:{arguments:, default_arguments:}, _input:{arguments:a, default_arguments:a}, _notification:{arguments:a, default_arguments:a}, _physics_process:{arguments:a, default_arguments:a}, _process:{arguments:a, default_arguments:a}, _ready:{arguments:, default_arguments:}, _set:{arguments:a, b, default_arguments:a, b}, _set_editor_description:{arguments:a, default_arguments:a}, _set_import_path:{arguments:a, default_arguments:a}, _to_string:{arguments:, default_arguments:}, _unhandled_input:{arguments:a, default_arguments:a}, _unhandled_key_input:{arguments:a, default_arguments:a}, add:{arguments:a, b, default_arguments:a, b}, add_child:{arguments:a, b, default_arguments:a, b = False}, add_child_below_node:{arguments:a, b, c, default_arguments:a, b, c = False}, add_to_group:{arguments:a, b, default_arguments:a, b = False}, add_user_signal:{arguments:a, b, default_arguments:a, b = []}, call:{arguments:a, default_arguments:a}, call_deferred:{arguments:a, default_arguments:a}, callv:{arguments:a, b, default_arguments:a, b}, can_process:{arguments:, default_arguments:}, can_translate_messages:{arguments:, default_arguments:}, connect:{arguments:a, b, c, d, e, default_arguments:a, b, c, d = [], e = 0}, disconnect:{arguments:a, b, c, default_arguments:a, b, c}, divide:{arguments:a, b, default_arguments:a, b}, duplicate:{arguments:a, default_arguments:a = 15}, emit_signal:{arguments:a, default_arguments:a}, find_node:{arguments:a, b, c, default_arguments:a, b = True, c = True}, find_parent:{arguments:a, default_arguments:a}, free:{arguments:, default_arguments:}, get:{arguments:a, default_arguments:a}, get_child:{arguments:a, default_arguments:a}, get_child_count:{arguments:, default_arguments:}, get_children:{arguments:, default_arguments:}, get_class:{arguments:, default_arguments:}, get_custom_multiplayer:{arguments:, default_arguments:}, get_filename:{arguments:, default_arguments:}, get_groups:{arguments:, default_arguments:}, get_incoming_connections:{arguments:, default_arguments:}, get_index:{arguments:, default_arguments:}, get_indexed:{arguments:a, default_arguments:a}, get_instance_id:{arguments:, default_arguments:}, get_meta:{arguments:a, default_arguments:a}, get_meta_list:{arguments:, default_arguments:}, get_method_list:{arguments:, default_arguments:}, get_multiplayer:{arguments:, default_arguments:}, get_name:{arguments:, default_arguments:}, get_network_master:{arguments:, default_arguments:}, get_node:{arguments:a, default_arguments:a}, get_node_and_resource:{arguments:a, default_arguments:a}, get_node_or_null:{arguments:a, default_arguments:a}, get_owner:{arguments:, default_arguments:}, get_parent:{arguments:, default_arguments:}, get_path:{arguments:, default_arguments:}, get_path_to:{arguments:a, default_arguments:a}, get_pause_mode:{arguments:, default_arguments:}, get_physics_process_delta_time:{arguments:, default_arguments:}, get_position_in_parent:{arguments:, default_arguments:}, get_process_delta_time:{arguments:, default_arguments:}, get_process_priority:{arguments:, default_arguments:}, get_property_list:{arguments:, default_arguments:}, get_scene_instance_load_placeholder:{arguments:, default_arguments:}, get_script:{arguments:, default_arguments:}, get_signal_connection_list:{arguments:a, default_arguments:a}, get_signal_list:{arguments:, default_arguments:}, get_tree:{arguments:, default_arguments:}, get_viewport:{arguments:, default_arguments:}, has_meta:{arguments:a, default_arguments:a}, has_method:{arguments:a, default_arguments:a}, has_node:{arguments:a, default_arguments:a}, has_node_and_resource:{arguments:a, default_arguments:a}, has_signal:{arguments:a, default_arguments:a}, has_user_signal:{arguments:a, default_arguments:a}, is_a_parent_of:{arguments:a, default_arguments:a}, is_blocking_signals:{arguments:, default_arguments:}, is_class:{arguments:a, default_arguments:a}, is_connected:{arguments:a, b, c, default_arguments:a, b, c}, is_displayed_folded:{arguments:, default_arguments:}, is_greater_than:{arguments:a, default_arguments:a}, is_in_group:{arguments:a, default_arguments:a}, is_inside_tree:{arguments:, default_arguments:}, is_network_master:{arguments:, default_arguments:}, is_physics_processing:{arguments:, default_arguments:}, is_physics_processing_internal:{arguments:, default_arguments:}, is_processing:{arguments:, default_arguments:}, is_processing_input:{arguments:, default_arguments:}, is_processing_internal:{arguments:, default_arguments:}, is_processing_unhandled_input:{arguments:, default_arguments:}, is_processing_unhandled_key_input:{arguments:, default_arguments:}, is_queued_for_deletion:{arguments:, default_arguments:}, math_fight:{arguments:, default_arguments:}, move_child:{arguments:a, b, default_arguments:a, b}, multiply:{arguments:a, b, default_arguments:a, b}, notification:{arguments:a, b, default_arguments:a, b = False}, pi:{arguments:, default_arguments:}, print_stray_nodes:{arguments:, default_arguments:}, print_tree:{arguments:, default_arguments:}, print_tree_pretty:{arguments:, default_arguments:}, propagate_call:{arguments:a, b, c, default_arguments:a, b = [], c = False}, propagate_notification:{arguments:a, default_arguments:a}, property_list_changed_notify:{arguments:, default_arguments:}, queue_free:{arguments:, default_arguments:}, raise:{arguments:, default_arguments:}, remove_and_skip:{arguments:, default_arguments:}, remove_child:{arguments:a, default_arguments:a}, remove_from_group:{arguments:a, default_arguments:a}, remove_meta:{arguments:a, default_arguments:a}, replace_by:{arguments:a, b, default_arguments:a, b = False}, request_ready:{arguments:, default_arguments:}, rpc:{arguments:a, default_arguments:a}, rpc_config:{arguments:a, b, default_arguments:a, b}, rpc_id:{arguments:a, b, default_arguments:a, b}, rpc_unreliable:{arguments:a, default_arguments:a}, rpc_unreliable_id:{arguments:a, b, default_arguments:a, b}, rset:{arguments:a, b, default_arguments:a, b}, rset_config:{arguments:a, b, default_arguments:a, b}, rset_id:{arguments:a, b, c, default_arguments:a, b, c}, rset_unreliable:{arguments:a, b, default_arguments:a, b}, rset_unreliable_id:{arguments:a, b, c, default_arguments:a, b, c}, set:{arguments:a, b, default_arguments:a, b}, set_block_signals:{arguments:a, default_arguments:a}, set_custom_multiplayer:{arguments:a, default_arguments:a}, set_deferred:{arguments:a, b, default_arguments:a, b}, set_display_folded:{arguments:a, default_arguments:a}, set_filename:{arguments:a, default_arguments:a}, set_indexed:{arguments:a, b, default_arguments:a, b}, set_message_translation:{arguments:a, default_arguments:a}, set_meta:{arguments:a, b, default_arguments:a, b}, set_name:{arguments:a, default_arguments:a}, set_network_master:{arguments:a, b, default_arguments:a, b = True}, set_owner:{arguments:a, default_arguments:a}, set_pause_mode:{arguments:a, default_arguments:a}, set_physics_process:{arguments:a, default_arguments:a}, set_physics_process_internal:{arguments:a, default_arguments:a}, set_process:{arguments:a, default_arguments:a}, set_process_input:{arguments:a, default_arguments:a}, set_process_internal:{arguments:a, default_arguments:a}, set_process_priority:{arguments:a, default_arguments:a}, set_process_unhandled_input:{arguments:a, default_arguments:a}, set_process_unhandled_key_input:{arguments:a, default_arguments:a}, set_scene_instance_load_placeholder:{arguments:a, default_arguments:a}, set_script:{arguments:a, default_arguments:a}, subtract:{arguments:a, b, default_arguments:a, b}, sum:{arguments:a, default_arguments:a}, to_string:{arguments:, default_arguments:}, tr:{arguments:a, default_arguments:a}, update_configuration_warning:{arguments:, default_arguments:}} != |Dictionary| {_enter_tree:{arguments:, default_arguments:}, _exit_tree:{arguments:, default_arguments:}, _get:{arguments:a, default_arguments:a}, _get_configuration_warning:{arguments:, default_arguments:}, _get_editor_description:{arguments:, default_arguments:}, _get_import_path:{arguments:, default_arguments:}, _get_property_list:{arguments:, default_arguments:}, _init:{arguments:, default_arguments:}, _input:{arguments:a, default_arguments:a}, _notification:{arguments:a, default_arguments:a}, _physics_process:{arguments:a, default_arguments:a}, _process:{arguments:a, default_arguments:a}, _ready:{arguments:, default_arguments:}, _set:{arguments:a, b, default_arguments:a, b}, _set_editor_description:{arguments:a, default_arguments:a}, _set_import_path:{arguments:a, default_arguments:a}, _to_string:{arguments:, default_arguments:}, _unhandled_input:{arguments:a, default_arguments:a}, _unhandled_key_input:{arguments:a, default_arguments:a}, add:{arguments:a, b, default_arguments:a, b}, add_child:{arguments:a, b, default_arguments:a, b = False}, add_child_below_node:{arguments:a, b, c, default_arguments:a, b, c = False}, add_to_group:{arguments:a, b, default_arguments:a, b = False}, add_user_signal:{arguments:a, b, default_arguments:a, b = []}, call:{arguments:a, default_arguments:a}, call_deferred:{arguments:a, default_arguments:a}, callv:{arguments:a, b, default_arguments:a, b}, can_process:{arguments:, default_arguments:}, can_translate_messages:{arguments:, default_arguments:}, connect:{arguments:a, b, c, d, e, default_arguments:a, b, c, d = [], e = 0}, disconnect:{arguments:a, b, c, default_arguments:a, b, c}, divide:{arguments:a, b, default_arguments:a, b}, duplicate:{arguments:a, default_arguments:a = 15}, emit_signal:{arguments:a, default_arguments:a}, find_node:{arguments:a, b, c, default_arguments:a, b = True, c = True}, find_parent:{arguments:a, default_arguments:a}, free:{arguments:, default_arguments:}, get:{arguments:a, default_arguments:a}, get_child:{arguments:a, default_arguments:a}, get_child_count:{arguments:, default_arguments:}, get_children:{arguments:, default_arguments:}, get_class:{arguments:, default_arguments:}, get_custom_multiplayer:{arguments:, default_arguments:}, get_filename:{arguments:, default_arguments:}, get_groups:{arguments:, default_arguments:}, get_incoming_connections:{arguments:, default_arguments:}, get_index:{arguments:, default_arguments:}, get_indexed:{arguments:a, default_arguments:a}, get_instance_id:{arguments:, default_arguments:}, get_meta:{arguments:a, default_arguments:a}, get_meta_list:{arguments:, default_arguments:}, get_method_list:{arguments:, default_arguments:}, get_multiplayer:{arguments:, default_arguments:}, get_name:{arguments:, default_arguments:}, get_network_master:{arguments:, default_arguments:}, get_node:{arguments:a, default_arguments:a}, get_node_and_resource:{arguments:a, default_arguments:a}, get_node_or_null:{arguments:a, default_arguments:a}, get_owner:{arguments:, default_arguments:}, get_parent:{arguments:, default_arguments:}, get_path:{arguments:, default_arguments:}, get_path_to:{arguments:a, default_arguments:a}, get_pause_mode:{arguments:, default_arguments:}, get_physics_process_delta_time:{arguments:, default_arguments:}, get_position_in_parent:{arguments:, default_arguments:}, get_process_delta_time:{arguments:, default_arguments:}, get_process_priority:{arguments:, default_arguments:}, get_property_list:{arguments:, default_arguments:}, get_scene_instance_load_placeholder:{arguments:, default_arguments:}, get_script:{arguments:, default_arguments:}, get_signal_connection_list:{arguments:a, default_arguments:a}, get_signal_list:{arguments:, default_arguments:}, get_tree:{arguments:, default_arguments:}, get_viewport:{arguments:, default_arguments:}, has_meta:{arguments:a, default_arguments:a}, has_method:{arguments:a, default_arguments:a}, has_node:{arguments:a, default_arguments:a}, has_node_and_resource:{arguments:a, default_arguments:a}, has_signal:{arguments:a, default_arguments:a}, has_user_signal:{arguments:a, default_arguments:a}, is_a_parent_of:{arguments:a, default_arguments:a}, is_blocking_signals:{arguments:, default_arguments:}, is_class:{arguments:a, default_arguments:a}, is_connected:{arguments:a, b, c, default_arguments:a, b, c}, is_displayed_folded:{arguments:, default_arguments:}, is_greater_than:{arguments:a, default_arguments:a}, is_in_group:{arguments:a, default_arguments:a}, is_inside_tree:{arguments:, default_arguments:}, is_network_master:{arguments:, default_arguments:}, is_physics_processing:{arguments:, default_arguments:}, is_physics_processing_internal:{arguments:, default_arguments:}, is_processing:{arguments:, default_arguments:}, is_processing_input:{arguments:, default_arguments:}, is_processing_internal:{arguments:, default_arguments:}, is_processing_unhandled_input:{arguments:, default_arguments:}, is_processing_unhandled_key_input:{arguments:, default_arguments:}, is_queued_for_deletion:{arguments:, default_arguments:}, math_fight:{arguments:, default_arguments:}, move_child:{arguments:a, b, default_arguments:a, b}, multiply:{arguments:a, b, default_arguments:a, b}, notification:{arguments:a, b, default_arguments:a, b = False}, pi:{arguments:, default_arguments:}, print_stray_nodes:{arguments:, default_arguments:}, print_tree:{arguments:, default_arguments:}, print_tree_pretty:{arguments:, default_arguments:}, propagate_call:{arguments:a, b, c, default_arguments:a, b = [], c = False}, propagate_notification:{arguments:a, default_arguments:a}, property_list_changed_notify:{arguments:, default_arguments:}, queue_free:{arguments:, default_arguments:}, raise:{arguments:, default_arguments:}, remove_and_skip:{arguments:, default_arguments:}, remove_child:{arguments:a, default_arguments:a}, remove_from_group:{arguments:a, default_arguments:a}, remove_meta:{arguments:a, default_arguments:a}, replace_by:{arguments:a, b, default_arguments:a, b = False}, request_ready:{arguments:, default_arguments:}, rpc:{arguments:a, default_arguments:a}, rpc_config:{arguments:a, b, default_arguments:a, b}, rpc_id:{arguments:a, b, default_arguments:a, b}, rpc_unreliable:{arguments:a, default_arguments:a}, rpc_unreliable_id:{arguments:a, b, default_arguments:a, b}, rset:{arguments:a, b, default_arguments:a, b}, rset_config:{arguments:a, b, default_arguments:a, b}, rset_id:{arguments:a, b, c, default_arguments:a, b, c}, rset_unreliable:{arguments:a, b, default_arguments:a, b}, rset_unreliable_id:{arguments:a, b, c, default_arguments:a, b, c}, set:{arguments:a, b, default_arguments:a, b}, set_block_signals:{arguments:a, default_arguments:a}, set_custom_multiplayer:{arguments:a, default_arguments:a}, set_deferred:{arguments:a, b, default_arguments:a, b}, set_display_folded:{arguments:a, default_arguments:a}, set_filename:{arguments:a, default_arguments:a}, set_indexed:{arguments:a, b, default_arguments:a, b}, set_message_translation:{arguments:a, default_arguments:a}, set_meta:{arguments:a, b, default_arguments:a, b}, set_name:{arguments:a, default_arguments:a}, set_network_master:{arguments:a, b, default_arguments:a, b = True}, set_owner:{arguments:a, default_arguments:a}, set_pause_mode:{arguments:a, default_arguments:a}, set_physics_process:{arguments:a, default_arguments:a}, set_physics_process_internal:{arguments:a, default_arguments:a}, set_process:{arguments:a, default_arguments:a}, set_process_input:{arguments:a, default_arguments:a}, set_process_internal:{arguments:a, default_arguments:a}, set_process_priority:{arguments:a, default_arguments:a}, set_process_unhandled_input:{arguments:a, default_arguments:a}, set_process_unhandled_key_input:{arguments:a, default_arguments:a}, set_scene_instance_load_placeholder:{arguments:a, default_arguments:a}, set_script:{arguments:a, default_arguments:a}, subtract:{arguments:a, b, default_arguments:a, b}, sum:{arguments:a, default_arguments:a}, to_string:{arguments:, default_arguments:}, tr:{arguments:a, default_arguments:a}, update_configuration_warning:{arguments:, default_arguments:}}",
"success": true
} ],
"context": "When we create two of it for the same script",
"fullname": "test_When_we_create_two_of_it_for_the_same_script",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|Object| [Node:1577] is equal to |Object| [Node:1577]",
"context": "Then we get the same double back",
"expected": "|Object| [Node:1577] is equal to |Object| [Node:1577]",
"success": true
} ],
"context": "When we call the double the second time",
"fullname": "test_When_we_call_double_a_second_time_on",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 3,
"path": "res://tests/integration/script_director.test.gd",
"source": {
"containers": [ "res://tests/integration", "res://tests" ],
"method": "",
"path": "res://tests/integration/script_director.test.gd",
"tags": [  ],
"test": ExtResource( 13 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 3
}, {
"context": "Given a Boolean Assertion",
"methods": [ {
"assertions": [ {
"actual": "|bool| False == false",
"context": "Then it passes",
"expected": "|bool| False == false",
"success": true
} ],
"context": "When calling asserts.is_false(false)",
"fullname": "test_when_calling_asserts_is_false",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then it passes",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When calling asserts.is_true(true)",
"fullname": "test_when_calling_asserts_is_true",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| True != false",
"context": "",
"expected": "|bool| True == false",
"success": false
} ],
"context": " intentional failure",
"fullname": "test_intentional_failure",
"passed": 0,
"success": false,
"time": 0.0,
"total": 1
} ],
"passed": 2,
"path": "res://tests/unit/boolean.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/boolean.test.gd",
"tags": [  ],
"test": ExtResource( 11 ),
"yield_time": 0.0
},
"success": false,
"time_taken": 0.0,
"total": 3
}, {
"context": "Given a Scene Director",
"methods": [ {
"assertions": [ {
"actual": "|Dictionary| {.:[Reference:1409], A:[Reference:1410], A/B:[Reference:1412], C:[Reference:1411], C/D:[Reference:1413]} is not equal to |Dictionary| {.:[Reference:1436], A:[Reference:1437], A/B:[Reference:1439], C:[Reference:1438], C/D:[Reference:1440]}",
"context": "Then they do not share resources",
"expected": "|Dictionary| {.:[Reference:1409], A:[Reference:1410], A/B:[Reference:1412], C:[Reference:1411], C/D:[Reference:1413]} != |Dictionary| {.:[Reference:1436], A:[Reference:1437], A/B:[Reference:1439], C:[Reference:1438], C/D:[Reference:1440]}",
"success": true
} ],
"context": "When we create two of it for the same scene",
"fullname": "test_When_we_create_two_of_it_for_the_same_scene",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 9999 is equal to |int| 9999",
"context": "Then we get the stubbed return value",
"expected": "|int| 9999 is equal to |int| 9999",
"success": true
} ],
"context": "When we call a method from the root node that we stubbed",
"fullname": "test_When_we_call_a_method_from_the_root_node_that_we_stubbed",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 99 is equal to |int| 99",
"context": "Then we get the stubbed return value",
"expected": "|int| 99 is equal to |int| 99",
"success": true
} ],
"context": "When we call a method from a grandchild node that we stubbed",
"fullname": "test_When_we_call_a_method_from_a_grandchild_node_that_we_stubbed",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 999 is equal to |int| 999",
"context": "Then we get the stubbed return value",
"expected": "|int| 999 is equal to |int| 999",
"success": true
} ],
"context": "When we call a method from a child node that we stubbed",
"fullname": "test_When_we_call_a_method_from_a_child_node_that_we_stubbed",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|NodePath| A is equal to |NodePath| A",
"context": "We have the correct NodePath Set",
"expected": "|NodePath| A is equal to |NodePath| A",
"success": true
} ],
"context": "When we add it to the tree it runs",
"fullname": "test_When_we_add_it_to_the_tree_it_runs",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 5,
"path": "res://tests/integration/scene_director.test.gd",
"source": {
"containers": [ "res://tests/integration", "res://tests" ],
"method": "",
"path": "res://tests/integration/scene_director.test.gd",
"tags": [  ],
"test": ExtResource( 4 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 5
}, {
"context": "Given A File Assertion",
"methods": [ {
"assertions": [ {
"actual": " does not exist",
"context": "Then it passes",
"expected": " does not exist",
"success": true
} ],
"context": "When calling asserts file does not exist when path is empty",
"fullname": "test_when_calling_file_does_not_exist_when_path_is_empty",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "res://tests/unit/file.test.gd exists",
"context": "Then it passes",
"expected": "res://tests/unit/file.test.gd exists",
"success": true
} ],
"context": "When calling asserts.file_exists when the file is this suite",
"fullname": "test_when_calling_file_exists_when_file_is_self",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "res://somefile.gd does not exist",
"context": "Then it passes",
"expected": "res://somefile.gd does not exist",
"success": true
} ],
"context": "When calling asserts.file_does_not_exist when there is no file",
"fullname": "test_when_calling_file_does_not_exist_when_there_is_no_file",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 3,
"path": "res://tests/unit/file.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/file.test.gd",
"tags": [  ],
"test": ExtResource( 3 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 3
}, {
"context": "Given a Null Assertion",
"methods": [ {
"assertions": [ {
"actual": "|null| Null == null",
"context": "Then it passes",
"expected": "|null| Null == null",
"success": true
} ],
"context": "When calling asserts.is_null(null)",
"fullname": "test_when_calling_null_is_null",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|Object| [Node:1708] != null",
"context": "Then it passes",
"expected": "|Object| [Node:1708] != null",
"success": true
} ],
"context": "When calling Node is not null",
"fullname": "test_when_calling_node_is_not_null",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|Object| [Deleted Object] == null",
"context": "A Freed Node is null in Engine 3.2.2 or greater",
"expected": "|Object| [Deleted Object] == null",
"success": true
} ],
"context": "When calling freed object is null",
"fullname": "test_when_calling_freed_object_is_not_null",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 3,
"path": "res://tests/unit/null.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/null.test.gd",
"tags": [  ],
"test": ExtResource( 12 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 3
}, {
"context": "Given an Equality Assertion",
"methods": [ {
"assertions": [ {
"actual": "|int| 1 is less than |int| 2",
"context": "Then it passes",
"expected": "|int| 1 is less than |int| 2",
"success": true
} ],
"context": "When calling asserts.is_less_than(2, 1)",
"fullname": "test_when_calling_is_less_than",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 1 is equal to |int| 1",
"context": "Then it passes",
"expected": "|int| 1 is equal to |int| 1",
"success": true
} ],
"context": "When calling asserts.is_equal(1, 1)",
"fullname": "test_when_calling_is_equal",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 2 is greater than |int| 1",
"context": "Then it passes",
"expected": "|int| 2 is greater than |int| 1",
"success": true
} ],
"context": "When calling asserts.is_greater_than(2, 1)",
"fullname": "test_when_calling_is_greater_than",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 2 is equal or greater |int| 1",
"context": "Then it passes",
"expected": "|int| 2 is equal or greater |int| 1",
"success": true
} ],
"context": "When calling asserts.is_equal_or_greater_than(2, 1)",
"fullname": "test_when_calling_is_equal_or_greater_than",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 1 is equal or less than |int| 1",
"context": "Then it passes!",
"expected": "|int| 1 is equal or less than |int| 1",
"success": true
} ],
"context": "When calling asserts.is_equal_or_less_than(1, 1)",
"fullname": "test_when_calling_is_equal_or_less_than_with_equal_values",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 1 is equal or greater |int| 1",
"context": "Then it passes",
"expected": "|int| 1 is equal or greater |int| 1",
"success": true
} ],
"context": "When calling asserts.is_equal_or_greater_than(1, 1)",
"fullname": "test_when_calling_is_equal_or_greater_than_with_equal_values",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 5 is not equal to |int| 6",
"context": "Then it passes",
"expected": "|int| 5 != |int| 6",
"success": true
} ],
"context": "When callign asserts.is_not_equal(5, 6)",
"fullname": "test_when_calling_is_not_equal",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 7,
"path": "res://tests/unit/equality.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/equality.test.gd",
"tags": [  ],
"test": ExtResource( 8 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 7
}, {
"context": "Given A Range Assertion",
"methods": [ {
"assertions": [ {
"actual": "0 is in range(0, 10)",
"context": "Then it passes",
"expected": "0 is in range(0, 10)",
"success": true
} ],
"context": "When calling is (0) in range(0, 10)",
"fullname": "test_when_calling_is_in_range",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "10 is not in range(0, 10)",
"context": "Then it passes",
"expected": "10 is not in range(0, 10)",
"success": true
} ],
"context": "When calling is (10) not in range (in range(0, 10)",
"fullname": "test_when_calling_is_not_in_range",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 2,
"path": "res://tests/unit/range.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/range.test.gd",
"tags": [  ],
"test": ExtResource( 15 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 2
}, {
"context": "Given the Addition Operator",
"methods": [ {
"assertions": [ {
"actual": "|int| 4 is equal to |int| 4",
"context": "",
"expected": "|int| 4 is equal to |int| 4",
"success": true
} ],
"context": "When we add 2 to 2 we get 4",
"fullname": "test_add",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 8 is equal to |int| 8",
"context": "",
"expected": "|int| 8 is equal to |int| 8",
"success": true
} ],
"context": "When we add 5 to 3 we get 8",
"fullname": "test_add",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 13 is equal to |int| 13",
"context": "",
"expected": "|int| 13 is equal to |int| 13",
"success": true
} ],
"context": "When we add 7 to 6 we get 13",
"fullname": "test_add",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 0 is equal to |int| 0",
"context": "",
"expected": "|int| 0 is equal to |int| 0",
"success": true
} ],
"context": "When we subtract 2 from 2 we get 0",
"fullname": "test_subtract",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 2 is equal to |int| 2",
"context": "",
"expected": "|int| 2 is equal to |int| 2",
"success": true
} ],
"context": "When we subtract 5 from 3 we get 2",
"fullname": "test_subtract",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 1 is equal to |int| 1",
"context": "",
"expected": "|int| 1 is equal to |int| 1",
"success": true
} ],
"context": "When we subtract 7 from 6 we get 1",
"fullname": "test_subtract",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 6,
"path": "res://tests/unit/parameters.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/parameters.test.gd",
"tags": [  ],
"test": ExtResource( 16 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 6
}, {
"context": "Dummy Passing Test",
"methods": [ {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Passing!",
"expected": "|bool| True == true",
"success": true
} ],
"context": "This method passes",
"fullname": "test_this_method_passes",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 1,
"path": "res://tests/unit/suite.test.gd.DummyOne",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/suite.test.gd.DummyOne",
"tags": [  ],
"test": SubResource( 17 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 1
}, {
"context": "Dummy Test 2",
"methods": [ {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Passing!",
"expected": "|bool| True == true",
"success": true
} ],
"context": "This method passes",
"fullname": "test_this_method_passes",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 1,
"path": "res://tests/unit/suite.test.gd.DummyTwo",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/suite.test.gd.DummyTwo",
"tags": [  ],
"test": SubResource( 18 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 1
}, {
"context": "Given a Test Double",
"methods": [ {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then it returns true",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we call a method that we have stubbed to return true",
"fullname": "test_When_we_call_a_method_that_we_have_stubbed_to_return_true",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 99 is equal to |int| 99",
"context": "Then it returns a value",
"expected": "|int| 99 is equal to |int| 99",
"success": true
} ],
"context": "When we pass a funcref as a subcall that returns",
"fullname": "test_When_we_pass_a_funcref_as_a_subcall_that_returns_a_value",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "method: add was called with arguments: [10, 10]",
"context": "Then we can see that it was called with those arguments",
"expected": "method: add was called with arguments: [10, 10]",
"success": true
} ],
"context": "When we pass arguments to a method call that we are spying on",
"fullname": "test_When_we_pass_arguments_to_a_method_call_that_we_are_spying_on",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "(1, 1) is builtin: Vector2",
"context": "Then we can call methods on it",
"expected": "(1, 1) is builtin: Vector2",
"success": true
} ],
"context": "When we double an inner class",
"fullname": "test_When_we_double_an_inner_class",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|Object| [Node:1667] is equal to |Object| [Node:1667]",
"context": "Then it returns that same node",
"expected": "|Object| [Node:1667] is equal to |Object| [Node:1667]",
"success": true
} ],
"context": "When we call a method that we have stubbed to return a node",
"fullname": "test_When_we_call_a_method_that_we_have_stubbed_to_return_a_node",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 4 is equal to |int| 4",
"context": "Then we get the correct result",
"expected": "|int| 4 is equal to |int| 4",
"success": true
} ],
"context": "When we call an add(x, y) method that we haven't directed",
"fullname": "test_When_we_call_an_add_method_that_we_have_not_directed",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 99 is equal to |int| 99",
"context": "Then it affects the state of the double",
"expected": "|int| 99 is equal to |int| 99",
"success": true
} ],
"context": "When we pass a funcref as a subcall",
"fullname": "test_When_we_pass_a_funcref_as_a_subcall",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 9999 is equal to |int| 9999",
"context": "Then it returns the corresponding value when the partial pattern matches",
"expected": "|int| 9999 is equal to |int| 9999",
"success": true
} ],
"context": "When we call a method that was stubbed with a partial (ie using any()) argument pattern",
"fullname": "test_When_we_call_a_method_that_was_stubbed_with_a_partial_argument_pattern",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|String| Jackie is equal to |String| Jackie",
"context": "Then we can double the object successfully",
"expected": "|String| Jackie is equal to |String| Jackie",
"success": true
} ],
"context": "When we pass in dependecies on double",
"fullname": "test_When_we_pass_in_deps_on_double",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 4 is equal to |int| 4",
"context": "Then it calls its super implementation by default",
"expected": "|int| 4 is equal to |int| 4",
"success": true
}, {
"actual": "|int| 9999 is equal to |int| 9999",
"context": "Then it does not call its super implementation when arguments patterns match a different return value",
"expected": "|int| 9999 is equal to |int| 9999",
"success": true
} ],
"context": "When we call a method that we stubbed to call its super implementation by default",
"fullname": "test_When_we_call_a_method_that_we_stubbed_to_call_its_super_implementation_by_default",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|bool| True is equal to |bool| True",
"context": "Then we can call it",
"expected": "|bool| True is equal to |bool| True",
"success": true
} ],
"context": "When we stubbed a keyworded method by passing in the correct keyword",
"fullname": "test_When_we_stubbed_a_keyword_method_by_passing_in_the_correct_keyword",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "add was called",
"context": "Then we can see that it was called at least once",
"expected": "add was called",
"success": true
} ],
"context": "When we call a method that we are spying on",
"fullname": "test_When_we_call_a_method_that_we_are_spying_on",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 9999 is equal to |int| 9999",
"context": "Then it returns the corresponding value when the pattern matches",
"expected": "|int| 9999 is equal to |int| 9999",
"success": true
} ],
"context": "When we call a method that was stubbed with an argument pattern that includes a non-primitive object",
"fullname": "test_When_we_call_a_method_that_was_stubbed_with_an_argument_pattern_that_includes_a_non_primitive_object",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|Array| [10, 5] is equal to |Array| [10, 5]",
"context": "Then it returns a value",
"expected": "|Array| [10, 5] is equal to |Array| [10, 5]",
"success": true
} ],
"context": "When we pass an Object with a call_func function",
"fullname": "test_When_we_pass_an_object_with_callfunc_method_as_a_subcall",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 100 is equal to |int| 100",
"context": "Then it returns the default stubbed value when the arguments don't match any pattern",
"expected": "|int| 100 is equal to |int| 100",
"success": true
}, {
"actual": "|int| 1000 is equal to |int| 1000",
"context": "Then it returns the the corresponding value to the pattern the arguments matched",
"expected": "|int| 1000 is equal to |int| 1000",
"success": true
} ],
"context": "When we call a method that was stubbed to return different values based on argument patterns",
"fullname": "test_When_we_call_a_method_that_was_stubbed_to_return_different_values_based_on_argument_patterns",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|null| Null == null",
"context": "Then we get the stubbed value back",
"expected": "|null| Null == null",
"success": true
} ],
"context": "When we stub a method of a doubled inner class",
"fullname": "test_When_we_stub_a_method_of_a_double_inner_class",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|null| Null == null",
"context": "Then we get null",
"expected": "|null| Null == null",
"success": true
} ],
"context": "When we call a method that we have dummied",
"fullname": "test_When_we_call_a_method_that_we_have_dummied",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|float| 6.283185 is equal to |float| 6.283185",
"context": "Then we can call the static methods of that inner double",
"expected": "|float| 6.283185 is equal to |float| 6.283185",
"success": true
} ],
"context": "When we add an doubled inner class to it",
"fullname": "test_When_we_add_a_doubled_inner_class_to_it",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|String| Jackie is equal to |String| Jackie",
"context": "Then we can double the object successfully",
"expected": "|String| Jackie is equal to |String| Jackie",
"success": true
} ],
"context": "When we pass in dependecies on direct",
"fullname": "test_When_we_pass_in_deps_on_direct",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 19,
"path": "res://tests/integration/test_double.test.gd",
"source": {
"containers": [ "res://tests/integration", "res://tests" ],
"method": "",
"path": "res://tests/integration/test_double.test.gd",
"tags": [  ],
"test": ExtResource( 14 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 19
}, {
"context": "Given a String Assertion",
"methods": [ {
"assertions": [ {
"actual": "lorem impsum ends with impsum",
"context": "Then it passes",
"expected": "lorem impsum ends with impsum",
"success": true
} ],
"context": "When calling asserts.string_ends_with('impsum', 'lorem impsum')",
"fullname": "test_when_calling_string_ends_with",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "lorem impsum contains em im",
"context": "Then it passes",
"expected": "lorem impsum contains em im",
"success": true
} ],
"context": "When calling asserts.string_contains('em im', 'lorem impsum')",
"fullname": "test_when_calling_string_contains",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "impsum does not end with lorem",
"context": "Then it passes",
"expected": "impsum does not end with lorem",
"success": true
} ],
"context": "When calling asserts.string_does_not_end_with('lorem', 'impsum')",
"fullname": "test_when_calling_string_does_not_end_with",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "impsum does not begin with bleh lorem",
"context": "Then it passes",
"expected": "impsum does not begin with bleh lorem",
"success": true
} ],
"context": "When calling asserts.string_does_not_begin_with('lorem', 'impsum')",
"fullname": "test_when_calling_string_does_not_begin_with",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "lorem impsum begins with lorem",
"context": "Then it passes",
"expected": "lorem impsum begins with lorem",
"success": true
} ],
"context": "When calling asserts.string_begins_with('lorem', 'lorem impsum')",
"fullname": "test_when_calling_string_begins_with",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "impsum does not contain beem im",
"context": "Then it passes",
"expected": "impsum does not contain beem im",
"success": true
} ],
"context": "When calling asserts.string_does_not_contain('em im', 'impsum')",
"fullname": "test_when_calling_string_does_not_contain",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 6,
"path": "res://tests/unit/string.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/string.test.gd",
"tags": [  ],
"test": ExtResource( 9 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 6
}, {
"context": "Given an Object Assertion",
"methods": [ {
"assertions": [ {
"actual": "[Node:1710] is not freed",
"context": "Then it passes",
"expected": "[Node:1710] is not freed",
"success": true
} ],
"context": "When calling asserts.is_not_freed(unfreed_object)",
"fullname": "test_when_calling_unfreed_object_is_not_freed",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is freed from memory",
"context": "Then it passes",
"expected": "Null is freed from memory",
"success": true
} ],
"context": "When calling asserts.is_freed(freed_object",
"fullname": "test_when_calling_freed_object_is_freed",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:1695] has meta: dummy",
"context": "Then it passes",
"expected": "[Node:1695] has meta: dummy",
"success": true
}, {
"actual": "[Node:1695] has meta: dummy",
"context": "Then it passes",
"expected": "[Node:1695] has meta: dummy",
"success": true
} ],
"context": "When calling asserts.object_has_meta() after adding metadata",
"fullname": "test_when_calling_has_meta_after_adding_metadata",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "[Node:1695] does not have meta: bad_meta",
"context": "Then it passes",
"expected": "[Node:1695] does not have meta: bad_meta",
"success": true
} ],
"context": "When calling asserts.object_does_not_have_meta()",
"fullname": "test_when_calling_does_not_have_meta",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:1766] is not blocking signals",
"context": "Then it passes",
"expected": "[Node:1766] is not blocking signals",
"success": true
} ],
"context": "When calling is not blocking signals while not blocking signals",
"fullname": "test_is_not_blocking_signals",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:1695] does not have user signal: false_signal",
"context": "Then it passes",
"expected": "[Node:1695] does not have user signal: false_signal",
"success": true
} ],
"context": "When calling obj_does_not_have_user_signal with fake signal",
"fullname": "test_when_calling_does_not_have_user_signal",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:1793] is not queued for deletion",
"context": "Then it passes",
"expected": "[Node:1793] is not queued for deletion",
"success": true
} ],
"context": "When calling asserts.object_is_not_for_queued_deletion after not calling queue free()",
"fullname": "test_when_calling_obj_is_not_for_queued_deletion_after_not_calling_queue_free",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:1808] is blocking signals",
"context": "Then it passes",
"expected": "[Node:1808] is blocking signals",
"success": true
} ],
"context": "When calling is blocking signals while blocking signals",
"fullname": "test_is_blocking_signals",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:1695] has method: title",
"context": "Then it passes",
"expected": "[Node:1695] has method: title",
"success": true
} ],
"context": "When calling has_method('title')",
"fullname": "test_when_calling_has_method_title",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:1695] does not have user signal: builtin_dummy",
"context": "Then it passes",
"expected": "[Node:1695] does not have user signal: builtin_dummy",
"success": true
} ],
"context": "When calling does not have user signal with class signal",
"fullname": "test_when_calling_does_not_have_user_signal_with_class_signal_constant",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:1695] does not have meta: confusing",
"context": "Then it passes",
"expected": "[Node:1695] does not have meta: confusing",
"success": true
} ],
"context": "When calling asserts.object_has_meta with real key but null val",
"fullname": "test_when_calling_does_not_have_meta_real_key_null_value_pair",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:1695] has user signal: dummy_signal",
"context": "Then it passes",
"expected": "[Node:1695] has user signal: dummy_signal",
"success": true
} ],
"context": "When calling obj_has_user_signal after adding a signal",
"fullname": "test_when_calling_has_user_signal_after_adding_a_signal",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:1695].builtin_dummy is connected to [Node:1695].title",
"context": "Then it passes",
"expected": "[Node:1695].builtin_dummy is connected to [Node:1695].title",
"success": true
} ],
"context": "When calling asserts object is connected with a valid connection",
"fullname": "test_when_calling_obj_is_connected_with_a_real_connection",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:1695].builtin_dummy is not connected to [Node:1695].title",
"context": "Then it passes",
"expected": "[Node:1695].builtin_dummy is not connected to [Node:1695].title",
"success": true
} ],
"context": "When calling asserts object is not connected with an invalid connection",
"fullname": "test_when_calling_obj_is_not_connected_with_an_invalid_connection",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:1890] is queued for deletion",
"context": "Then it passes",
"expected": "[Node:1890] is queued for deletion",
"success": true
} ],
"context": "When calling asserts.object_is_queued for deletion after calling queue_free",
"fullname": "test_when_calling_obj_is_queued_for_deletion_after_calling_queue_free",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 15,
"path": "res://tests/unit/object.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/object.test.gd",
"tags": [  ],
"test": ExtResource( 7 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 15
}, {
"context": "Given a Test Script",
"methods": [ {
"assertions": [ {
"actual": "|bool| True == true",
"context": "if the test didn't break this works",
"expected": "|bool| True == true",
"success": true
} ],
"context": " we can omit describe",
"fullname": "test_we_can_omit_describe",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 10 is greater than |int| 1",
"context": "We get an array of multiple values back",
"expected": "|int| 10 is greater than |int| 1",
"success": true
}, {
"actual": "|int| 0 is not equal to |int| 9",
"context": "With different values",
"expected": "|int| 0 != |int| 9",
"success": true
}, {
"actual": "|int| 10 is greater than |int| 1",
"context": "And we can track multiple properties",
"expected": "|int| 10 is greater than |int| 1",
"success": true
} ],
"context": "When we record properties",
"fullname": "test_we_can_record_properties",
"passed": 3,
"success": true,
"time": 0.0,
"total": 3
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|int| 2 is equal to |int| 2",
"context": "",
"expected": "|int| 2 is equal to |int| 2",
"success": true
} ],
"context": " when we omit context we can see expected and got under method",
"fullname": "test_when_we_omit_context_we_can_see_expected_and_got_under_method",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
} ],
"passed": 3,
"path": "res://tests/unit/test.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/test.test.gd",
"tags": [  ],
"test": ExtResource( 19 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 3
}, {
"context": "Given an Is Instance of class/type Assertion",
"methods": [ {
"assertions": [ {
"actual": "|Color| 0,0,0,1 != null",
"context": "color is not null",
"expected": "|Color| 0,0,0,1 != null",
"success": true
}, {
"actual": "0,0,0,1 is builtin: Color",
"context": "Then it passes",
"expected": "0,0,0,1 is builtin: Color",
"success": true
} ],
"context": "When calling asserts.is_color(color: Color)",
"fullname": "test_when_calling_is_Color",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|Quat| (0, 0, 0, 1) != null",
"context": "quat is not null",
"expected": "|Quat| (0, 0, 0, 1) != null",
"success": true
}, {
"actual": "(0, 0, 0, 1) is builtin: Quat",
"context": "Then it passes",
"expected": "(0, 0, 0, 1) is builtin: Quat",
"success": true
} ],
"context": "When calling asserts.is_Quat(quat: Quat)",
"fullname": "test_when_calling_is_Quat",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|Object| [Node:1686] != null",
"context": "node is not null",
"expected": "|Object| [Node:1686] != null",
"success": true
}, {
"actual": "[Node:1686] is builtin: Object",
"context": "An instance of node is an Object",
"expected": "[Node:1686] is builtin: Object",
"success": true
} ],
"context": "When calling is asserts.object(node: Node)",
"fullname": "test_when_calling_is_object",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|PoolColorArray| [PoolColorArray] != null",
"context": "colors is not null",
"expected": "|PoolColorArray| [PoolColorArray] != null",
"success": true
}, {
"actual": "[PoolColorArray] is builtin: PoolColorArray",
"context": "Then it passes",
"expected": "[PoolColorArray] is builtin: PoolColorArray",
"success": true
} ],
"context": "When calling asserts.is_PoolColorArray(colors: PoolColorArray)",
"fullname": "test_when_calling_is_PoolColorArray",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|String|  != null",
"context": "strs is not null",
"expected": "|String|  != null",
"success": true
}, {
"actual": " is builtin: String",
"context": "Then it passes",
"expected": " is builtin: String",
"success": true
} ],
"context": "When calling asserts.is_string(strs: String)",
"fullname": "test_when_calling_is_string",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|AABB| 0, 0, 0 - 0, 0, 0 != null",
"context": "AABB is not null",
"expected": "|AABB| 0, 0, 0 - 0, 0, 0 != null",
"success": true
}, {
"actual": "0, 0, 0 - 0, 0, 0 is builtin: AABB",
"context": "Then it passes",
"expected": "0, 0, 0 - 0, 0, 0 is builtin: AABB",
"success": true
} ],
"context": "When calling asserts.is_AABB(aabb: AABB)",
"fullname": "test_when_calling_is_AABB",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "True is builtin: bool",
"context": "Then it passes",
"expected": "True is builtin: bool",
"success": true
} ],
"context": "When calling asserts.is_bool(true)",
"fullname": "test_when_calling_is_bool",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|PoolByteArray| [PoolByteArray] != null",
"context": "bytes is not null",
"expected": "|PoolByteArray| [PoolByteArray] != null",
"success": true
}, {
"actual": "[PoolByteArray] is builtin: PoolByteArray",
"context": "Then it passes",
"expected": "[PoolByteArray] is builtin: PoolByteArray",
"success": true
} ],
"context": "When calling asserts.is_PoolByteArray(bytes: PoolByteArray)",
"fullname": "test_when_calling_is_PoolByteArray",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|Plane| 0, 0, 0, 0 != null",
"context": "plane is not null",
"expected": "|Plane| 0, 0, 0, 0 != null",
"success": true
}, {
"actual": "0, 0, 0, 0 is builtin: Plane",
"context": "then it passes",
"expected": "0, 0, 0, 0 is builtin: Plane",
"success": true
} ],
"context": "When calling asserts.is_Plane(plane: Plane())",
"fullname": "test_when_calling_is_Plane",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|PoolStringArray| [] != null",
"context": "strs is not null",
"expected": "|PoolStringArray| [] != null",
"success": true
}, {
"actual": "[] is builtin: PoolStringArray",
"context": "Then it passes",
"expected": "[] is builtin: PoolStringArray",
"success": true
} ],
"context": "When calling is asserts.is_PoolStringArray(strs: PoolStringArray)",
"fullname": "test_when_calling_is_PoolStringArray",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "1 is builtin: int",
"context": "Then it passes",
"expected": "1 is builtin: int",
"success": true
} ],
"context": "When callign asserts.is_int(1)",
"fullname": "test_when_calling_is_int",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|PoolIntArray| [] != null",
"context": "ints is not null",
"expected": "|PoolIntArray| [] != null",
"success": true
}, {
"actual": "[] is builtin: PoolIntArray",
"context": "Then it passes",
"expected": "[] is builtin: PoolIntArray",
"success": true
} ],
"context": "When calling asserts.is_PoolIntArray(ints: PoolIntArray)",
"fullname": "test_when_calling_is_PoolIntArray",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|Rect2| (0, 0, 0, 0) != null",
"context": "rect2 is not null",
"expected": "|Rect2| (0, 0, 0, 0) != null",
"success": true
}, {
"actual": "(0, 0, 0, 0) is builtin: Rect2",
"context": "Then it passes",
"expected": "(0, 0, 0, 0) is builtin: Rect2",
"success": true
} ],
"context": "When calling asserts.is_Rect2(rect2: Rect2)",
"fullname": "test_when_calling_is_Rect2",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|RID| [RID] != null",
"context": "rid is not null",
"expected": "|RID| [RID] != null",
"success": true
}, {
"actual": "[RID] is builtin: RID",
"context": "Then it passes",
"expected": "[RID] is builtin: RID",
"success": true
} ],
"context": "When calling asserts.is_RID(rid: RID)",
"fullname": "test_when_calling_is_RID",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|Transform| 1, 0, 0, 0, 1, 0, 0, 0, 1 - 0, 0, 0 != null",
"context": "transform is not null",
"expected": "|Transform| 1, 0, 0, 0, 1, 0, 0, 0, 1 - 0, 0, 0 != null",
"success": true
}, {
"actual": "1, 0, 0, 0, 1, 0, 0, 0, 1 - 0, 0, 0 is builtin: Transform",
"context": "Then it passes",
"expected": "1, 0, 0, 0, 1, 0, 0, 0, 1 - 0, 0, 0 is builtin: Transform",
"success": true
} ],
"context": "When calling asserts.is_Transform(transform: Transform)",
"fullname": "test_when_calling_is_Transform",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|PoolRealArray| [] != null",
"context": "reals is not null",
"expected": "|PoolRealArray| [] != null",
"success": true
}, {
"actual": "[] is builtin: PoolRealArray",
"context": "Then it passes",
"expected": "[] is builtin: PoolRealArray",
"success": true
} ],
"context": "When calling is asserts.is_PoolRealArray(reals: PoolRealArray)",
"fullname": "test_when_calling_is_PoolRealArray",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|PoolVector3Array| [] != null",
"context": "vec3s is not null",
"expected": "|PoolVector3Array| [] != null",
"success": true
}, {
"actual": "[] is builtin: PoolVector3Array",
"context": "Then it passes",
"expected": "[] is builtin: PoolVector3Array",
"success": true
} ],
"context": "When calling is asserts.is_PoolVector3Array(vec3s: PoolVector3Array)",
"fullname": "test_when_calling_is_PoolVector3Array",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|Array| [] != null",
"context": "array is not null",
"expected": "|Array| [] != null",
"success": true
}, {
"actual": "[] is builtin: Array",
"context": "Then it passes",
"expected": "[] is builtin: Array",
"success": true
} ],
"context": "When calling asserts.is_Array(array: Array)",
"fullname": "test_when_calling_is_Array",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|PoolVector2Array| [] != null",
"context": "vec2s is not null",
"expected": "|PoolVector2Array| [] != null",
"success": true
}, {
"actual": "[] is builtin: PoolVector2Array",
"context": "Then it passes",
"expected": "[] is builtin: PoolVector2Array",
"success": true
} ],
"context": "When calling is asserts.is_PoolVector2Array(vec2s: PoolVector2Array)",
"fullname": "test_when_calling_is_PoolVector2Array",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|Vector2| (0, 0) != null",
"context": "vec2 is not null",
"expected": "|Vector2| (0, 0) != null",
"success": true
}, {
"actual": "(0, 0) is builtin: Vector2",
"context": "Then it passes",
"expected": "(0, 0) is builtin: Vector2",
"success": true
} ],
"context": "When calling asserts.is_Vector2(vec2)",
"fullname": "test_when_calling_is_Vector2",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|NodePath| . != null",
"context": "@'Parent/Child' is not null",
"expected": "|NodePath| . != null",
"success": true
}, {
"actual": ". is builtin: NodePath",
"context": "Then it passes",
"expected": ". is builtin: NodePath",
"success": true
} ],
"context": "When calling asserts.is_NodePath(@'Parent/Child')",
"fullname": "test_when_calling_is_NodePath",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|Basis| ((1, 0, 0), (0, 1, 0), (0, 0, 1)) != null",
"context": "basis is not null",
"expected": "|Basis| ((1, 0, 0), (0, 1, 0), (0, 0, 1)) != null",
"success": true
}, {
"actual": "((1, 0, 0), (0, 1, 0), (0, 0, 1)) is builtin: Basis",
"context": "Then it passes",
"expected": "((1, 0, 0), (0, 1, 0), (0, 0, 1)) is builtin: Basis",
"success": true
} ],
"context": "When calling asserts.is_basis(basis: Basis",
"fullname": "test_when_calling_is_Basis",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|Vector3| (0, 0, 0) != null",
"context": "vec3 is not null",
"expected": "|Vector3| (0, 0, 0) != null",
"success": true
}, {
"actual": "(0, 0, 0) is builtin: Vector3",
"context": "Then it passes",
"expected": "(0, 0, 0) is builtin: Vector3",
"success": true
} ],
"context": "When calling asserts.is_Vector3(vec3: Vector3",
"fullname": "test_when_calling_is_Vector3",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "{} is builtin: Dictionary",
"context": "Then it passes",
"expected": "{} is builtin: Dictionary",
"success": true
} ],
"context": "When calling asserts.is_Dictionary({})",
"fullname": "test_when_calling_is_Dictionary",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "1 is builtin: float",
"context": "Then it passes",
"expected": "1 is builtin: float",
"success": true
} ],
"context": "When calling asserts.is_float(1.0)",
"fullname": "test_when_calling_is_float",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|Transform2D| ((1, 0), (0, 1), (0, 0)) != null",
"context": "transform2D is not null",
"expected": "|Transform2D| ((1, 0), (0, 1), (0, 0)) != null",
"success": true
}, {
"actual": "((1, 0), (0, 1), (0, 0)) is builtin: Transform2D",
"context": "Then it passes",
"expected": "((1, 0), (0, 1), (0, 0)) is builtin: Transform2D",
"success": true
} ],
"context": "When calling asserts.is_Transform(transform2D: Transform2D)",
"fullname": "test_when_calling_is_Transform2D",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
} ],
"passed": 26,
"path": "res://tests/unit/is_instance.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/is_instance.test.gd",
"tags": [  ],
"test": ExtResource( 6 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 26
}, {
"context": "Given an Is Not Instance of class/type Assertion",
"methods": [ {
"assertions": [ {
"actual": "Null is not builtin: Color",
"context": "Then it passes",
"expected": "Null is not builtin: Color",
"success": true
} ],
"context": "when calling asserts.is_not_Color(null)",
"fullname": "test_when_calling_is_not_Color",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Dictionary",
"context": "Then it passes",
"expected": "Null is not builtin: Dictionary",
"success": true
} ],
"context": "when calling asserts.is_not_Dictionary(null)",
"fullname": "test_when_calling_is_not_Dictionary",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: AABB",
"context": "Then it passes",
"expected": "Null is not builtin: AABB",
"success": true
} ],
"context": "when calling asserts.is_not_AABB(null)",
"fullname": "test_when_calling_is_not_AABB",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Array",
"context": "Then it passes",
"expected": "Null is not builtin: Array",
"success": true
} ],
"context": "when calling asserts.is_not_Array(null)",
"fullname": "test_when_calling_is_not_Array",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Basis",
"context": "Then it passes",
"expected": "Null is not builtin: Basis",
"success": true
} ],
"context": "when calling asserts.is_not_Basis(null)",
"fullname": "test_when_calling_is_not_Basis",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: bool",
"context": "Then it passes",
"expected": "Null is not builtin: bool",
"success": true
} ],
"context": "when calling asserts.is_not_bool(null)",
"fullname": "test_when_calling_is_not_bool",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: PoolColorArray",
"context": "Then it passes",
"expected": "Null is not builtin: PoolColorArray",
"success": true
} ],
"context": "when calling asserts.is_not_PoolColorArray(null)",
"fullname": "test_when_calling_is_not_PoolColorArray",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Vector3",
"context": "Then it passes",
"expected": "Null is not builtin: Vector3",
"success": true
} ],
"context": "when calling asserts.is_not_Vector3(null)",
"fullname": "test_when_calling_is_not_Vector3",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Quat",
"context": "Then it passes",
"expected": "Null is not builtin: Quat",
"success": true
} ],
"context": "when calling asserts.is_not_Quat(null)",
"fullname": "test_when_calling_is_not_Quat",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: float",
"context": "Then it passes",
"expected": "Null is not builtin: float",
"success": true
} ],
"context": "when calling asserts.is_not_float(null)",
"fullname": "test_when_calling_is_not_float",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: String",
"context": "Then it passes",
"expected": "Null is not builtin: String",
"success": true
} ],
"context": "when calling asserts.is_not_String(null)",
"fullname": "test_when_calling_is_not_String",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Vector2",
"context": "Then it passes",
"expected": "Null is not builtin: Vector2",
"success": true
} ],
"context": "when calling asserts.is_not_Vector2(null)",
"fullname": "test_when_calling_is_not_Vector2",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: PoolStringArray",
"context": "Then it passes",
"expected": "Null is not builtin: PoolStringArray",
"success": true
} ],
"context": "when calling asserts.is_not_PoolStringArray(null)",
"fullname": "test_when_calling_is_not_PoolStringArray",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: PoolVector2Array",
"context": "Then it passes",
"expected": "Null is not builtin: PoolVector2Array",
"success": true
} ],
"context": "when calling asserts.is_not_PoolVector2Array(null)",
"fullname": "test_when_calling_is_not_PoolVector2Array",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Transform",
"context": "Then it passes",
"expected": "Null is not builtin: Transform",
"success": true
} ],
"context": "when calling asserts.is_not_Transform(null)",
"fullname": "test_when_calling_is_not_Transform",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: int",
"context": "Then it passes",
"expected": "Null is not builtin: int",
"success": true
} ],
"context": "when calling asserts.is_not_int(null)",
"fullname": "test_when_calling_is_not_int",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Transform2D",
"context": "Then it passes",
"expected": "Null is not builtin: Transform2D",
"success": true
} ],
"context": "when calling asserts.is_not_Transform2D(null)",
"fullname": "test_when_calling_is_not_Transform2D",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: PoolIntArray",
"context": "Then it passes",
"expected": "Null is not builtin: PoolIntArray",
"success": true
} ],
"context": "when calling asserts.is_not_PoolIntArray(null)",
"fullname": "test_when_calling_is_not_PoolIntArray",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: PoolRealArray",
"context": "Then it passes",
"expected": "Null is not builtin: PoolRealArray",
"success": true
} ],
"context": "when calling asserts.is_not_PoolRealArray(null)",
"fullname": "test_when_calling_is_not_PoolRealArray",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Rect2",
"context": "Then it passes",
"expected": "Null is not builtin: Rect2",
"success": true
} ],
"context": "when calling asserts.is_not_Rect2(null)",
"fullname": "test_when_calling_is_not_Rect2",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: NodePath",
"context": "Then it passes",
"expected": "Null is not builtin: NodePath",
"success": true
} ],
"context": "when calling asserts.is_not_NodePath(null)",
"fullname": "test_when_calling_is_not_NodePath",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Object",
"context": "Then it passes",
"expected": "Null is not builtin: Object",
"success": true
} ],
"context": "when calling asserts.is_not_Object(null)",
"fullname": "test_when_calling_is_not_Object",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Plane",
"context": "Then it passes",
"expected": "Null is not builtin: Plane",
"success": true
} ],
"context": "when calling asserts.is_not_Plane(null)",
"fullname": "test_when_calling_is_not_Plane",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: PoolByteArray",
"context": "Then it passes",
"expected": "Null is not builtin: PoolByteArray",
"success": true
} ],
"context": "when calling asserts.is_not_PoolByteArray(null)",
"fullname": "test_when_calling_is_not_PoolByteArray",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: PoolVector3Array",
"context": "Then it passes",
"expected": "Null is not builtin: PoolVector3Array",
"success": true
} ],
"context": "when calling asserts.is_not_PoolVector3Array(null)",
"fullname": "test_when_calling_is_not_PoolVector3Array",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: RID",
"context": "Then it passes",
"expected": "Null is not builtin: RID",
"success": true
} ],
"context": "when calling asserts.is_not_RID(null)",
"fullname": "test_when_calling_is_not_RID",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 26,
"path": "res://tests/unit/is_not_instance.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/is_not_instance.test.gd",
"tags": [  ],
"test": ExtResource( 2 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 26
}, {
"context": "Given a Signal Watcher",
"methods": [ {
"assertions": [ {
"actual": "Signal: example was emitted from [Node:1880] with arguments: [1, 20, 5]",
"context": "Then it captures any arguments that where passed when the signal was emitted",
"expected": "Signal: example was emitted from [Node:1880] with arguments: [1, 20, 5]",
"success": true
} ],
"context": "When we watch a signal from an object with no bound variables",
"fullname": "test_When_we_watch_a_signal_from_an_object_with_no_bound_variables",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Signal: example was not emitted from [Node:1880]",
"context": "Then it does not capture the non-emitted signal",
"expected": "Signal: example was not emitted from [Node:1880]",
"success": true
} ],
"context": "When we watch and do not emit a signal",
"fullname": "test_When_we_watch_and_do_not_emit_a_signal",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "signal: example was emitted from [Node:1880]",
"context": "Then it captures the emitted signal",
"expected": "signal: example was emitted from [Node:1880]",
"success": true
} ],
"context": "When we watch and emit a signal",
"fullname": "test_When_we_watch_and_emit_a_signal",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "signal: multiple was emitted from [Node:1880] 2",
"context": "Then we can track how many times we emitted it",
"expected": "signal: multiple was emitted from [Node:1880] 2",
"success": true
} ],
"context": "When we watch and signal and emit it multiple times",
"fullname": "test_When_we_watch_a_signal_and_emit_it_multiple_times",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 4,
"path": "res://tests/unit/watcher.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/watcher.test.gd",
"tags": [  ],
"test": ExtResource( 17 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 4
}, {
"context": "Given a Yield",
"methods": [ {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then we set var e to true",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then we set var f to true",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we yield twice in execute",
"fullname": "test_When_we_yield_in_execute",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "[100, Null, Null, Null, Null, Null] is builtin: Array",
"context": "Then we get an array",
"expected": "[100, Null, Null, Null, Null, Null] is builtin: Array",
"success": true
}, {
"actual": "|int| 6 is equal to |int| 6",
"context": "Of size 6",
"expected": "|int| 6 is equal to |int| 6",
"success": true
}, {
"actual": "|int| 100 is equal to |int| 100",
"context": "Where element 0 is 100",
"expected": "|int| 100 is equal to |int| 100",
"success": true
} ],
"context": "When yield(self.yield_value()) returns",
"fullname": "test_When_we_yield_we_get_the_return_value",
"passed": 3,
"success": true,
"time": 0.0,
"total": 3
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then we set var a to true",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then we set var b to true",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we yield in start twice",
"fullname": "test_When_we_yield_in_start",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then we set var c to true",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then we set var d to true",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we yield in pre thrice",
"fullname": "test_When_we_yield_in_pre",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then the timeout signal is disconnected",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then the signal-signal is disconnected",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When it is finished",
"fullname": "test_When_yielder_is_finished_signals_are_disconnected",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then yielder is not active",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When asserting against a test",
"fullname": "test_Yielder_is_not_active_when_asserting",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then the yielder is paused",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When a signal being yielded on is emitted",
"fullname": "test_When_a_signal_being_yielded_on_is_emitted_the_yielder_is_stopped",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then the yielder is paused",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "The timeout signal of the yielder is not connected",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When the yielder times out on until_timeout(0.1)",
"fullname": "test_When_the_yielder_times_out",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then the yielder is unpaused",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then the timeout signal of the yielder is connected",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then our signal is connected to the yielder",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we call until signal",
"fullname": "test_When_we_call_until_signal",
"passed": 3,
"success": true,
"time": 0.0,
"total": 3
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then the yielder is paused",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then the timeout signal of the yielder is disconnected",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then our signal to the yielder is disconnected",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When the yielder heres our signal",
"fullname": "test_When_the_yielder_hears_our_signal",
"passed": 3,
"success": true,
"time": 0.0,
"total": 3
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then yielder is unpaused",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "The timeout signal of the yielder is connected",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we call until_timeout (with 1.0)",
"fullname": "test_When_we_call_until_timeout",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
} ],
"passed": 11,
"path": "res://tests/unit/yield.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/yield.test.gd",
"tags": [  ],
"test": ExtResource( 18 ),
"yield_time": 1.9
},
"success": true,
"time_taken": 0.0,
"total": 11
} ],
1611514639: [ {
"context": "Given a Boolean Assertion",
"methods": [ {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then it passes",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When calling asserts.is_true(true)",
"fullname": "test_when_calling_asserts_is_true",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| False == false",
"context": "Then it passes",
"expected": "|bool| False == false",
"success": true
} ],
"context": "When calling asserts.is_false(false)",
"fullname": "test_when_calling_asserts_is_false",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| True != false",
"context": "",
"expected": "|bool| True == false",
"success": false
} ],
"context": " intentional failure",
"fullname": "test_intentional_failure",
"passed": 0,
"success": false,
"time": 0.0,
"total": 1
} ],
"passed": 2,
"path": "res://tests/integration/boolean.test.gd",
"source": {
"containers": [ "res://tests/integration", "res://tests" ],
"method": "",
"path": "res://tests/integration/boolean.test.gd",
"tags": [  ],
"test": ExtResource( 20 ),
"yield_time": 0.0
},
"success": false,
"time_taken": 0.0,
"total": 3
}, {
"context": "Default Args",
"methods": [ {
"assertions": [ {
"actual": "|bool| True == true",
"context": "If this method can be reached then we have doubled a script with default argument(s) properly!",
"expected": "|bool| True == true",
"success": true
} ],
"context": " default arguments of interpolate property",
"fullname": "test_default_arguments_of_interpolate_property",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 1,
"path": "res://tests/integration/default_args.test.gd",
"source": {
"containers": [ "res://tests/integration", "res://tests" ],
"method": "",
"path": "res://tests/integration/default_args.test.gd",
"tags": [  ],
"test": ExtResource( 10 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 1
}, {
"context": "Given is_on_floor",
"methods": [ {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then it can be stubbed",
"expected": "|bool| True == true",
"success": true
} ],
"context": "From a user-defined script",
"fullname": "test_stubbing_is_on_floor_method_from_user_defined_class",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then it can be stubbed",
"expected": "|bool| True == true",
"success": true
} ],
"context": "From a child node of a scene without scripts",
"fullname": "test_stubbing_is_on_floor_as_child_node_with_no_script",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then it can be stubbed",
"expected": "|bool| True == true",
"success": true
} ],
"context": "From a built-in KinematicBody2D2",
"fullname": "test_stubbing_is_on_floor_method_from_builtin_class2",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 3,
"path": "res://tests/integration/on_floor.test.gd",
"source": {
"containers": [ "res://tests/integration", "res://tests" ],
"method": "",
"path": "res://tests/integration/on_floor.test.gd",
"tags": [  ],
"test": ExtResource( 5 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 3
}, {
"context": "Given a Scene Director",
"methods": [ {
"assertions": [ {
"actual": "|NodePath| A is equal to |NodePath| A",
"context": "We have the correct NodePath Set",
"expected": "|NodePath| A is equal to |NodePath| A",
"success": true
} ],
"context": "When we add it to the tree it runs",
"fullname": "test_When_we_add_it_to_the_tree_it_runs",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 9999 is equal to |int| 9999",
"context": "Then we get the stubbed return value",
"expected": "|int| 9999 is equal to |int| 9999",
"success": true
} ],
"context": "When we call a method from the root node that we stubbed",
"fullname": "test_When_we_call_a_method_from_the_root_node_that_we_stubbed",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 999 is equal to |int| 999",
"context": "Then we get the stubbed return value",
"expected": "|int| 999 is equal to |int| 999",
"success": true
} ],
"context": "When we call a method from a child node that we stubbed",
"fullname": "test_When_we_call_a_method_from_a_child_node_that_we_stubbed",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 99 is equal to |int| 99",
"context": "Then we get the stubbed return value",
"expected": "|int| 99 is equal to |int| 99",
"success": true
} ],
"context": "When we call a method from a grandchild node that we stubbed",
"fullname": "test_When_we_call_a_method_from_a_grandchild_node_that_we_stubbed",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|Dictionary| {.:[Reference:1527], A:[Reference:1528], A/B:[Reference:1530], C:[Reference:1529], C/D:[Reference:1531]} is not equal to |Dictionary| {.:[Reference:1541], A:[Reference:1542], A/B:[Reference:1544], C:[Reference:1543], C/D:[Reference:1545]}",
"context": "Then they do not share resources",
"expected": "|Dictionary| {.:[Reference:1527], A:[Reference:1528], A/B:[Reference:1530], C:[Reference:1529], C/D:[Reference:1531]} != |Dictionary| {.:[Reference:1541], A:[Reference:1542], A/B:[Reference:1544], C:[Reference:1543], C/D:[Reference:1545]}",
"success": true
} ],
"context": "When we create two of it for the same scene",
"fullname": "test_When_we_create_two_of_it_for_the_same_scene",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 5,
"path": "res://tests/integration/scene_director.test.gd",
"source": {
"containers": [ "res://tests/integration", "res://tests" ],
"method": "",
"path": "res://tests/integration/scene_director.test.gd",
"tags": [  ],
"test": ExtResource( 4 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 5
}, {
"context": "Given a Script Director",
"methods": [ {
"assertions": [ {
"actual": "|Dictionary| {_enter_tree:{arguments:, default_arguments:}, _exit_tree:{arguments:, default_arguments:}, _get:{arguments:a, default_arguments:a}, _get_configuration_warning:{arguments:, default_arguments:}, _get_editor_description:{arguments:, default_arguments:}, _get_import_path:{arguments:, default_arguments:}, _get_property_list:{arguments:, default_arguments:}, _init:{arguments:, default_arguments:}, _input:{arguments:a, default_arguments:a}, _notification:{arguments:a, default_arguments:a}, _physics_process:{arguments:a, default_arguments:a}, _process:{arguments:a, default_arguments:a}, _ready:{arguments:, default_arguments:}, _set:{arguments:a, b, default_arguments:a, b}, _set_editor_description:{arguments:a, default_arguments:a}, _set_import_path:{arguments:a, default_arguments:a}, _to_string:{arguments:, default_arguments:}, _unhandled_input:{arguments:a, default_arguments:a}, _unhandled_key_input:{arguments:a, default_arguments:a}, add:{arguments:a, b, default_arguments:a, b}, add_child:{arguments:a, b, default_arguments:a, b = False}, add_child_below_node:{arguments:a, b, c, default_arguments:a, b, c = False}, add_to_group:{arguments:a, b, default_arguments:a, b = False}, add_user_signal:{arguments:a, b, default_arguments:a, b = []}, call:{arguments:a, default_arguments:a}, call_deferred:{arguments:a, default_arguments:a}, callv:{arguments:a, b, default_arguments:a, b}, can_process:{arguments:, default_arguments:}, can_translate_messages:{arguments:, default_arguments:}, connect:{arguments:a, b, c, d, e, default_arguments:a, b, c, d = [], e = 0}, disconnect:{arguments:a, b, c, default_arguments:a, b, c}, divide:{arguments:a, b, default_arguments:a, b}, duplicate:{arguments:a, default_arguments:a = 15}, emit_signal:{arguments:a, default_arguments:a}, find_node:{arguments:a, b, c, default_arguments:a, b = True, c = True}, find_parent:{arguments:a, default_arguments:a}, free:{arguments:, default_arguments:}, get:{arguments:a, default_arguments:a}, get_child:{arguments:a, default_arguments:a}, get_child_count:{arguments:, default_arguments:}, get_children:{arguments:, default_arguments:}, get_class:{arguments:, default_arguments:}, get_custom_multiplayer:{arguments:, default_arguments:}, get_filename:{arguments:, default_arguments:}, get_groups:{arguments:, default_arguments:}, get_incoming_connections:{arguments:, default_arguments:}, get_index:{arguments:, default_arguments:}, get_indexed:{arguments:a, default_arguments:a}, get_instance_id:{arguments:, default_arguments:}, get_meta:{arguments:a, default_arguments:a}, get_meta_list:{arguments:, default_arguments:}, get_method_list:{arguments:, default_arguments:}, get_multiplayer:{arguments:, default_arguments:}, get_name:{arguments:, default_arguments:}, get_network_master:{arguments:, default_arguments:}, get_node:{arguments:a, default_arguments:a}, get_node_and_resource:{arguments:a, default_arguments:a}, get_node_or_null:{arguments:a, default_arguments:a}, get_owner:{arguments:, default_arguments:}, get_parent:{arguments:, default_arguments:}, get_path:{arguments:, default_arguments:}, get_path_to:{arguments:a, default_arguments:a}, get_pause_mode:{arguments:, default_arguments:}, get_physics_process_delta_time:{arguments:, default_arguments:}, get_position_in_parent:{arguments:, default_arguments:}, get_process_delta_time:{arguments:, default_arguments:}, get_process_priority:{arguments:, default_arguments:}, get_property_list:{arguments:, default_arguments:}, get_scene_instance_load_placeholder:{arguments:, default_arguments:}, get_script:{arguments:, default_arguments:}, get_signal_connection_list:{arguments:a, default_arguments:a}, get_signal_list:{arguments:, default_arguments:}, get_tree:{arguments:, default_arguments:}, get_viewport:{arguments:, default_arguments:}, has_meta:{arguments:a, default_arguments:a}, has_method:{arguments:a, default_arguments:a}, has_node:{arguments:a, default_arguments:a}, has_node_and_resource:{arguments:a, default_arguments:a}, has_signal:{arguments:a, default_arguments:a}, has_user_signal:{arguments:a, default_arguments:a}, is_a_parent_of:{arguments:a, default_arguments:a}, is_blocking_signals:{arguments:, default_arguments:}, is_class:{arguments:a, default_arguments:a}, is_connected:{arguments:a, b, c, default_arguments:a, b, c}, is_displayed_folded:{arguments:, default_arguments:}, is_greater_than:{arguments:a, default_arguments:a}, is_in_group:{arguments:a, default_arguments:a}, is_inside_tree:{arguments:, default_arguments:}, is_network_master:{arguments:, default_arguments:}, is_physics_processing:{arguments:, default_arguments:}, is_physics_processing_internal:{arguments:, default_arguments:}, is_processing:{arguments:, default_arguments:}, is_processing_input:{arguments:, default_arguments:}, is_processing_internal:{arguments:, default_arguments:}, is_processing_unhandled_input:{arguments:, default_arguments:}, is_processing_unhandled_key_input:{arguments:, default_arguments:}, is_queued_for_deletion:{arguments:, default_arguments:}, math_fight:{arguments:, default_arguments:}, move_child:{arguments:a, b, default_arguments:a, b}, multiply:{arguments:a, b, default_arguments:a, b}, notification:{arguments:a, b, default_arguments:a, b = False}, pi:{arguments:, default_arguments:}, print_stray_nodes:{arguments:, default_arguments:}, print_tree:{arguments:, default_arguments:}, print_tree_pretty:{arguments:, default_arguments:}, propagate_call:{arguments:a, b, c, default_arguments:a, b = [], c = False}, propagate_notification:{arguments:a, default_arguments:a}, property_list_changed_notify:{arguments:, default_arguments:}, queue_free:{arguments:, default_arguments:}, raise:{arguments:, default_arguments:}, remove_and_skip:{arguments:, default_arguments:}, remove_child:{arguments:a, default_arguments:a}, remove_from_group:{arguments:a, default_arguments:a}, remove_meta:{arguments:a, default_arguments:a}, replace_by:{arguments:a, b, default_arguments:a, b = False}, request_ready:{arguments:, default_arguments:}, rpc:{arguments:a, default_arguments:a}, rpc_config:{arguments:a, b, default_arguments:a, b}, rpc_id:{arguments:a, b, default_arguments:a, b}, rpc_unreliable:{arguments:a, default_arguments:a}, rpc_unreliable_id:{arguments:a, b, default_arguments:a, b}, rset:{arguments:a, b, default_arguments:a, b}, rset_config:{arguments:a, b, default_arguments:a, b}, rset_id:{arguments:a, b, c, default_arguments:a, b, c}, rset_unreliable:{arguments:a, b, default_arguments:a, b}, rset_unreliable_id:{arguments:a, b, c, default_arguments:a, b, c}, set:{arguments:a, b, default_arguments:a, b}, set_block_signals:{arguments:a, default_arguments:a}, set_custom_multiplayer:{arguments:a, default_arguments:a}, set_deferred:{arguments:a, b, default_arguments:a, b}, set_display_folded:{arguments:a, default_arguments:a}, set_filename:{arguments:a, default_arguments:a}, set_indexed:{arguments:a, b, default_arguments:a, b}, set_message_translation:{arguments:a, default_arguments:a}, set_meta:{arguments:a, b, default_arguments:a, b}, set_name:{arguments:a, default_arguments:a}, set_network_master:{arguments:a, b, default_arguments:a, b = True}, set_owner:{arguments:a, default_arguments:a}, set_pause_mode:{arguments:a, default_arguments:a}, set_physics_process:{arguments:a, default_arguments:a}, set_physics_process_internal:{arguments:a, default_arguments:a}, set_process:{arguments:a, default_arguments:a}, set_process_input:{arguments:a, default_arguments:a}, set_process_internal:{arguments:a, default_arguments:a}, set_process_priority:{arguments:a, default_arguments:a}, set_process_unhandled_input:{arguments:a, default_arguments:a}, set_process_unhandled_key_input:{arguments:a, default_arguments:a}, set_scene_instance_load_placeholder:{arguments:a, default_arguments:a}, set_script:{arguments:a, default_arguments:a}, subtract:{arguments:a, b, default_arguments:a, b}, sum:{arguments:a, default_arguments:a}, to_string:{arguments:, default_arguments:}, tr:{arguments:a, default_arguments:a}, update_configuration_warning:{arguments:, default_arguments:}} is not equal to |Dictionary| {_enter_tree:{arguments:, default_arguments:}, _exit_tree:{arguments:, default_arguments:}, _get:{arguments:a, default_arguments:a}, _get_configuration_warning:{arguments:, default_arguments:}, _get_editor_description:{arguments:, default_arguments:}, _get_import_path:{arguments:, default_arguments:}, _get_property_list:{arguments:, default_arguments:}, _init:{arguments:, default_arguments:}, _input:{arguments:a, default_arguments:a}, _notification:{arguments:a, default_arguments:a}, _physics_process:{arguments:a, default_arguments:a}, _process:{arguments:a, default_arguments:a}, _ready:{arguments:, default_arguments:}, _set:{arguments:a, b, default_arguments:a, b}, _set_editor_description:{arguments:a, default_arguments:a}, _set_import_path:{arguments:a, default_arguments:a}, _to_string:{arguments:, default_arguments:}, _unhandled_input:{arguments:a, default_arguments:a}, _unhandled_key_input:{arguments:a, default_arguments:a}, add:{arguments:a, b, default_arguments:a, b}, add_child:{arguments:a, b, default_arguments:a, b = False}, add_child_below_node:{arguments:a, b, c, default_arguments:a, b, c = False}, add_to_group:{arguments:a, b, default_arguments:a, b = False}, add_user_signal:{arguments:a, b, default_arguments:a, b = []}, call:{arguments:a, default_arguments:a}, call_deferred:{arguments:a, default_arguments:a}, callv:{arguments:a, b, default_arguments:a, b}, can_process:{arguments:, default_arguments:}, can_translate_messages:{arguments:, default_arguments:}, connect:{arguments:a, b, c, d, e, default_arguments:a, b, c, d = [], e = 0}, disconnect:{arguments:a, b, c, default_arguments:a, b, c}, divide:{arguments:a, b, default_arguments:a, b}, duplicate:{arguments:a, default_arguments:a = 15}, emit_signal:{arguments:a, default_arguments:a}, find_node:{arguments:a, b, c, default_arguments:a, b = True, c = True}, find_parent:{arguments:a, default_arguments:a}, free:{arguments:, default_arguments:}, get:{arguments:a, default_arguments:a}, get_child:{arguments:a, default_arguments:a}, get_child_count:{arguments:, default_arguments:}, get_children:{arguments:, default_arguments:}, get_class:{arguments:, default_arguments:}, get_custom_multiplayer:{arguments:, default_arguments:}, get_filename:{arguments:, default_arguments:}, get_groups:{arguments:, default_arguments:}, get_incoming_connections:{arguments:, default_arguments:}, get_index:{arguments:, default_arguments:}, get_indexed:{arguments:a, default_arguments:a}, get_instance_id:{arguments:, default_arguments:}, get_meta:{arguments:a, default_arguments:a}, get_meta_list:{arguments:, default_arguments:}, get_method_list:{arguments:, default_arguments:}, get_multiplayer:{arguments:, default_arguments:}, get_name:{arguments:, default_arguments:}, get_network_master:{arguments:, default_arguments:}, get_node:{arguments:a, default_arguments:a}, get_node_and_resource:{arguments:a, default_arguments:a}, get_node_or_null:{arguments:a, default_arguments:a}, get_owner:{arguments:, default_arguments:}, get_parent:{arguments:, default_arguments:}, get_path:{arguments:, default_arguments:}, get_path_to:{arguments:a, default_arguments:a}, get_pause_mode:{arguments:, default_arguments:}, get_physics_process_delta_time:{arguments:, default_arguments:}, get_position_in_parent:{arguments:, default_arguments:}, get_process_delta_time:{arguments:, default_arguments:}, get_process_priority:{arguments:, default_arguments:}, get_property_list:{arguments:, default_arguments:}, get_scene_instance_load_placeholder:{arguments:, default_arguments:}, get_script:{arguments:, default_arguments:}, get_signal_connection_list:{arguments:a, default_arguments:a}, get_signal_list:{arguments:, default_arguments:}, get_tree:{arguments:, default_arguments:}, get_viewport:{arguments:, default_arguments:}, has_meta:{arguments:a, default_arguments:a}, has_method:{arguments:a, default_arguments:a}, has_node:{arguments:a, default_arguments:a}, has_node_and_resource:{arguments:a, default_arguments:a}, has_signal:{arguments:a, default_arguments:a}, has_user_signal:{arguments:a, default_arguments:a}, is_a_parent_of:{arguments:a, default_arguments:a}, is_blocking_signals:{arguments:, default_arguments:}, is_class:{arguments:a, default_arguments:a}, is_connected:{arguments:a, b, c, default_arguments:a, b, c}, is_displayed_folded:{arguments:, default_arguments:}, is_greater_than:{arguments:a, default_arguments:a}, is_in_group:{arguments:a, default_arguments:a}, is_inside_tree:{arguments:, default_arguments:}, is_network_master:{arguments:, default_arguments:}, is_physics_processing:{arguments:, default_arguments:}, is_physics_processing_internal:{arguments:, default_arguments:}, is_processing:{arguments:, default_arguments:}, is_processing_input:{arguments:, default_arguments:}, is_processing_internal:{arguments:, default_arguments:}, is_processing_unhandled_input:{arguments:, default_arguments:}, is_processing_unhandled_key_input:{arguments:, default_arguments:}, is_queued_for_deletion:{arguments:, default_arguments:}, math_fight:{arguments:, default_arguments:}, move_child:{arguments:a, b, default_arguments:a, b}, multiply:{arguments:a, b, default_arguments:a, b}, notification:{arguments:a, b, default_arguments:a, b = False}, pi:{arguments:, default_arguments:}, print_stray_nodes:{arguments:, default_arguments:}, print_tree:{arguments:, default_arguments:}, print_tree_pretty:{arguments:, default_arguments:}, propagate_call:{arguments:a, b, c, default_arguments:a, b = [], c = False}, propagate_notification:{arguments:a, default_arguments:a}, property_list_changed_notify:{arguments:, default_arguments:}, queue_free:{arguments:, default_arguments:}, raise:{arguments:, default_arguments:}, remove_and_skip:{arguments:, default_arguments:}, remove_child:{arguments:a, default_arguments:a}, remove_from_group:{arguments:a, default_arguments:a}, remove_meta:{arguments:a, default_arguments:a}, replace_by:{arguments:a, b, default_arguments:a, b = False}, request_ready:{arguments:, default_arguments:}, rpc:{arguments:a, default_arguments:a}, rpc_config:{arguments:a, b, default_arguments:a, b}, rpc_id:{arguments:a, b, default_arguments:a, b}, rpc_unreliable:{arguments:a, default_arguments:a}, rpc_unreliable_id:{arguments:a, b, default_arguments:a, b}, rset:{arguments:a, b, default_arguments:a, b}, rset_config:{arguments:a, b, default_arguments:a, b}, rset_id:{arguments:a, b, c, default_arguments:a, b, c}, rset_unreliable:{arguments:a, b, default_arguments:a, b}, rset_unreliable_id:{arguments:a, b, c, default_arguments:a, b, c}, set:{arguments:a, b, default_arguments:a, b}, set_block_signals:{arguments:a, default_arguments:a}, set_custom_multiplayer:{arguments:a, default_arguments:a}, set_deferred:{arguments:a, b, default_arguments:a, b}, set_display_folded:{arguments:a, default_arguments:a}, set_filename:{arguments:a, default_arguments:a}, set_indexed:{arguments:a, b, default_arguments:a, b}, set_message_translation:{arguments:a, default_arguments:a}, set_meta:{arguments:a, b, default_arguments:a, b}, set_name:{arguments:a, default_arguments:a}, set_network_master:{arguments:a, b, default_arguments:a, b = True}, set_owner:{arguments:a, default_arguments:a}, set_pause_mode:{arguments:a, default_arguments:a}, set_physics_process:{arguments:a, default_arguments:a}, set_physics_process_internal:{arguments:a, default_arguments:a}, set_process:{arguments:a, default_arguments:a}, set_process_input:{arguments:a, default_arguments:a}, set_process_internal:{arguments:a, default_arguments:a}, set_process_priority:{arguments:a, default_arguments:a}, set_process_unhandled_input:{arguments:a, default_arguments:a}, set_process_unhandled_key_input:{arguments:a, default_arguments:a}, set_scene_instance_load_placeholder:{arguments:a, default_arguments:a}, set_script:{arguments:a, default_arguments:a}, subtract:{arguments:a, b, default_arguments:a, b}, sum:{arguments:a, default_arguments:a}, to_string:{arguments:, default_arguments:}, tr:{arguments:a, default_arguments:a}, update_configuration_warning:{arguments:, default_arguments:}}",
"context": "Then they do not share resources",
"expected": "|Dictionary| {_enter_tree:{arguments:, default_arguments:}, _exit_tree:{arguments:, default_arguments:}, _get:{arguments:a, default_arguments:a}, _get_configuration_warning:{arguments:, default_arguments:}, _get_editor_description:{arguments:, default_arguments:}, _get_import_path:{arguments:, default_arguments:}, _get_property_list:{arguments:, default_arguments:}, _init:{arguments:, default_arguments:}, _input:{arguments:a, default_arguments:a}, _notification:{arguments:a, default_arguments:a}, _physics_process:{arguments:a, default_arguments:a}, _process:{arguments:a, default_arguments:a}, _ready:{arguments:, default_arguments:}, _set:{arguments:a, b, default_arguments:a, b}, _set_editor_description:{arguments:a, default_arguments:a}, _set_import_path:{arguments:a, default_arguments:a}, _to_string:{arguments:, default_arguments:}, _unhandled_input:{arguments:a, default_arguments:a}, _unhandled_key_input:{arguments:a, default_arguments:a}, add:{arguments:a, b, default_arguments:a, b}, add_child:{arguments:a, b, default_arguments:a, b = False}, add_child_below_node:{arguments:a, b, c, default_arguments:a, b, c = False}, add_to_group:{arguments:a, b, default_arguments:a, b = False}, add_user_signal:{arguments:a, b, default_arguments:a, b = []}, call:{arguments:a, default_arguments:a}, call_deferred:{arguments:a, default_arguments:a}, callv:{arguments:a, b, default_arguments:a, b}, can_process:{arguments:, default_arguments:}, can_translate_messages:{arguments:, default_arguments:}, connect:{arguments:a, b, c, d, e, default_arguments:a, b, c, d = [], e = 0}, disconnect:{arguments:a, b, c, default_arguments:a, b, c}, divide:{arguments:a, b, default_arguments:a, b}, duplicate:{arguments:a, default_arguments:a = 15}, emit_signal:{arguments:a, default_arguments:a}, find_node:{arguments:a, b, c, default_arguments:a, b = True, c = True}, find_parent:{arguments:a, default_arguments:a}, free:{arguments:, default_arguments:}, get:{arguments:a, default_arguments:a}, get_child:{arguments:a, default_arguments:a}, get_child_count:{arguments:, default_arguments:}, get_children:{arguments:, default_arguments:}, get_class:{arguments:, default_arguments:}, get_custom_multiplayer:{arguments:, default_arguments:}, get_filename:{arguments:, default_arguments:}, get_groups:{arguments:, default_arguments:}, get_incoming_connections:{arguments:, default_arguments:}, get_index:{arguments:, default_arguments:}, get_indexed:{arguments:a, default_arguments:a}, get_instance_id:{arguments:, default_arguments:}, get_meta:{arguments:a, default_arguments:a}, get_meta_list:{arguments:, default_arguments:}, get_method_list:{arguments:, default_arguments:}, get_multiplayer:{arguments:, default_arguments:}, get_name:{arguments:, default_arguments:}, get_network_master:{arguments:, default_arguments:}, get_node:{arguments:a, default_arguments:a}, get_node_and_resource:{arguments:a, default_arguments:a}, get_node_or_null:{arguments:a, default_arguments:a}, get_owner:{arguments:, default_arguments:}, get_parent:{arguments:, default_arguments:}, get_path:{arguments:, default_arguments:}, get_path_to:{arguments:a, default_arguments:a}, get_pause_mode:{arguments:, default_arguments:}, get_physics_process_delta_time:{arguments:, default_arguments:}, get_position_in_parent:{arguments:, default_arguments:}, get_process_delta_time:{arguments:, default_arguments:}, get_process_priority:{arguments:, default_arguments:}, get_property_list:{arguments:, default_arguments:}, get_scene_instance_load_placeholder:{arguments:, default_arguments:}, get_script:{arguments:, default_arguments:}, get_signal_connection_list:{arguments:a, default_arguments:a}, get_signal_list:{arguments:, default_arguments:}, get_tree:{arguments:, default_arguments:}, get_viewport:{arguments:, default_arguments:}, has_meta:{arguments:a, default_arguments:a}, has_method:{arguments:a, default_arguments:a}, has_node:{arguments:a, default_arguments:a}, has_node_and_resource:{arguments:a, default_arguments:a}, has_signal:{arguments:a, default_arguments:a}, has_user_signal:{arguments:a, default_arguments:a}, is_a_parent_of:{arguments:a, default_arguments:a}, is_blocking_signals:{arguments:, default_arguments:}, is_class:{arguments:a, default_arguments:a}, is_connected:{arguments:a, b, c, default_arguments:a, b, c}, is_displayed_folded:{arguments:, default_arguments:}, is_greater_than:{arguments:a, default_arguments:a}, is_in_group:{arguments:a, default_arguments:a}, is_inside_tree:{arguments:, default_arguments:}, is_network_master:{arguments:, default_arguments:}, is_physics_processing:{arguments:, default_arguments:}, is_physics_processing_internal:{arguments:, default_arguments:}, is_processing:{arguments:, default_arguments:}, is_processing_input:{arguments:, default_arguments:}, is_processing_internal:{arguments:, default_arguments:}, is_processing_unhandled_input:{arguments:, default_arguments:}, is_processing_unhandled_key_input:{arguments:, default_arguments:}, is_queued_for_deletion:{arguments:, default_arguments:}, math_fight:{arguments:, default_arguments:}, move_child:{arguments:a, b, default_arguments:a, b}, multiply:{arguments:a, b, default_arguments:a, b}, notification:{arguments:a, b, default_arguments:a, b = False}, pi:{arguments:, default_arguments:}, print_stray_nodes:{arguments:, default_arguments:}, print_tree:{arguments:, default_arguments:}, print_tree_pretty:{arguments:, default_arguments:}, propagate_call:{arguments:a, b, c, default_arguments:a, b = [], c = False}, propagate_notification:{arguments:a, default_arguments:a}, property_list_changed_notify:{arguments:, default_arguments:}, queue_free:{arguments:, default_arguments:}, raise:{arguments:, default_arguments:}, remove_and_skip:{arguments:, default_arguments:}, remove_child:{arguments:a, default_arguments:a}, remove_from_group:{arguments:a, default_arguments:a}, remove_meta:{arguments:a, default_arguments:a}, replace_by:{arguments:a, b, default_arguments:a, b = False}, request_ready:{arguments:, default_arguments:}, rpc:{arguments:a, default_arguments:a}, rpc_config:{arguments:a, b, default_arguments:a, b}, rpc_id:{arguments:a, b, default_arguments:a, b}, rpc_unreliable:{arguments:a, default_arguments:a}, rpc_unreliable_id:{arguments:a, b, default_arguments:a, b}, rset:{arguments:a, b, default_arguments:a, b}, rset_config:{arguments:a, b, default_arguments:a, b}, rset_id:{arguments:a, b, c, default_arguments:a, b, c}, rset_unreliable:{arguments:a, b, default_arguments:a, b}, rset_unreliable_id:{arguments:a, b, c, default_arguments:a, b, c}, set:{arguments:a, b, default_arguments:a, b}, set_block_signals:{arguments:a, default_arguments:a}, set_custom_multiplayer:{arguments:a, default_arguments:a}, set_deferred:{arguments:a, b, default_arguments:a, b}, set_display_folded:{arguments:a, default_arguments:a}, set_filename:{arguments:a, default_arguments:a}, set_indexed:{arguments:a, b, default_arguments:a, b}, set_message_translation:{arguments:a, default_arguments:a}, set_meta:{arguments:a, b, default_arguments:a, b}, set_name:{arguments:a, default_arguments:a}, set_network_master:{arguments:a, b, default_arguments:a, b = True}, set_owner:{arguments:a, default_arguments:a}, set_pause_mode:{arguments:a, default_arguments:a}, set_physics_process:{arguments:a, default_arguments:a}, set_physics_process_internal:{arguments:a, default_arguments:a}, set_process:{arguments:a, default_arguments:a}, set_process_input:{arguments:a, default_arguments:a}, set_process_internal:{arguments:a, default_arguments:a}, set_process_priority:{arguments:a, default_arguments:a}, set_process_unhandled_input:{arguments:a, default_arguments:a}, set_process_unhandled_key_input:{arguments:a, default_arguments:a}, set_scene_instance_load_placeholder:{arguments:a, default_arguments:a}, set_script:{arguments:a, default_arguments:a}, subtract:{arguments:a, b, default_arguments:a, b}, sum:{arguments:a, default_arguments:a}, to_string:{arguments:, default_arguments:}, tr:{arguments:a, default_arguments:a}, update_configuration_warning:{arguments:, default_arguments:}} != |Dictionary| {_enter_tree:{arguments:, default_arguments:}, _exit_tree:{arguments:, default_arguments:}, _get:{arguments:a, default_arguments:a}, _get_configuration_warning:{arguments:, default_arguments:}, _get_editor_description:{arguments:, default_arguments:}, _get_import_path:{arguments:, default_arguments:}, _get_property_list:{arguments:, default_arguments:}, _init:{arguments:, default_arguments:}, _input:{arguments:a, default_arguments:a}, _notification:{arguments:a, default_arguments:a}, _physics_process:{arguments:a, default_arguments:a}, _process:{arguments:a, default_arguments:a}, _ready:{arguments:, default_arguments:}, _set:{arguments:a, b, default_arguments:a, b}, _set_editor_description:{arguments:a, default_arguments:a}, _set_import_path:{arguments:a, default_arguments:a}, _to_string:{arguments:, default_arguments:}, _unhandled_input:{arguments:a, default_arguments:a}, _unhandled_key_input:{arguments:a, default_arguments:a}, add:{arguments:a, b, default_arguments:a, b}, add_child:{arguments:a, b, default_arguments:a, b = False}, add_child_below_node:{arguments:a, b, c, default_arguments:a, b, c = False}, add_to_group:{arguments:a, b, default_arguments:a, b = False}, add_user_signal:{arguments:a, b, default_arguments:a, b = []}, call:{arguments:a, default_arguments:a}, call_deferred:{arguments:a, default_arguments:a}, callv:{arguments:a, b, default_arguments:a, b}, can_process:{arguments:, default_arguments:}, can_translate_messages:{arguments:, default_arguments:}, connect:{arguments:a, b, c, d, e, default_arguments:a, b, c, d = [], e = 0}, disconnect:{arguments:a, b, c, default_arguments:a, b, c}, divide:{arguments:a, b, default_arguments:a, b}, duplicate:{arguments:a, default_arguments:a = 15}, emit_signal:{arguments:a, default_arguments:a}, find_node:{arguments:a, b, c, default_arguments:a, b = True, c = True}, find_parent:{arguments:a, default_arguments:a}, free:{arguments:, default_arguments:}, get:{arguments:a, default_arguments:a}, get_child:{arguments:a, default_arguments:a}, get_child_count:{arguments:, default_arguments:}, get_children:{arguments:, default_arguments:}, get_class:{arguments:, default_arguments:}, get_custom_multiplayer:{arguments:, default_arguments:}, get_filename:{arguments:, default_arguments:}, get_groups:{arguments:, default_arguments:}, get_incoming_connections:{arguments:, default_arguments:}, get_index:{arguments:, default_arguments:}, get_indexed:{arguments:a, default_arguments:a}, get_instance_id:{arguments:, default_arguments:}, get_meta:{arguments:a, default_arguments:a}, get_meta_list:{arguments:, default_arguments:}, get_method_list:{arguments:, default_arguments:}, get_multiplayer:{arguments:, default_arguments:}, get_name:{arguments:, default_arguments:}, get_network_master:{arguments:, default_arguments:}, get_node:{arguments:a, default_arguments:a}, get_node_and_resource:{arguments:a, default_arguments:a}, get_node_or_null:{arguments:a, default_arguments:a}, get_owner:{arguments:, default_arguments:}, get_parent:{arguments:, default_arguments:}, get_path:{arguments:, default_arguments:}, get_path_to:{arguments:a, default_arguments:a}, get_pause_mode:{arguments:, default_arguments:}, get_physics_process_delta_time:{arguments:, default_arguments:}, get_position_in_parent:{arguments:, default_arguments:}, get_process_delta_time:{arguments:, default_arguments:}, get_process_priority:{arguments:, default_arguments:}, get_property_list:{arguments:, default_arguments:}, get_scene_instance_load_placeholder:{arguments:, default_arguments:}, get_script:{arguments:, default_arguments:}, get_signal_connection_list:{arguments:a, default_arguments:a}, get_signal_list:{arguments:, default_arguments:}, get_tree:{arguments:, default_arguments:}, get_viewport:{arguments:, default_arguments:}, has_meta:{arguments:a, default_arguments:a}, has_method:{arguments:a, default_arguments:a}, has_node:{arguments:a, default_arguments:a}, has_node_and_resource:{arguments:a, default_arguments:a}, has_signal:{arguments:a, default_arguments:a}, has_user_signal:{arguments:a, default_arguments:a}, is_a_parent_of:{arguments:a, default_arguments:a}, is_blocking_signals:{arguments:, default_arguments:}, is_class:{arguments:a, default_arguments:a}, is_connected:{arguments:a, b, c, default_arguments:a, b, c}, is_displayed_folded:{arguments:, default_arguments:}, is_greater_than:{arguments:a, default_arguments:a}, is_in_group:{arguments:a, default_arguments:a}, is_inside_tree:{arguments:, default_arguments:}, is_network_master:{arguments:, default_arguments:}, is_physics_processing:{arguments:, default_arguments:}, is_physics_processing_internal:{arguments:, default_arguments:}, is_processing:{arguments:, default_arguments:}, is_processing_input:{arguments:, default_arguments:}, is_processing_internal:{arguments:, default_arguments:}, is_processing_unhandled_input:{arguments:, default_arguments:}, is_processing_unhandled_key_input:{arguments:, default_arguments:}, is_queued_for_deletion:{arguments:, default_arguments:}, math_fight:{arguments:, default_arguments:}, move_child:{arguments:a, b, default_arguments:a, b}, multiply:{arguments:a, b, default_arguments:a, b}, notification:{arguments:a, b, default_arguments:a, b = False}, pi:{arguments:, default_arguments:}, print_stray_nodes:{arguments:, default_arguments:}, print_tree:{arguments:, default_arguments:}, print_tree_pretty:{arguments:, default_arguments:}, propagate_call:{arguments:a, b, c, default_arguments:a, b = [], c = False}, propagate_notification:{arguments:a, default_arguments:a}, property_list_changed_notify:{arguments:, default_arguments:}, queue_free:{arguments:, default_arguments:}, raise:{arguments:, default_arguments:}, remove_and_skip:{arguments:, default_arguments:}, remove_child:{arguments:a, default_arguments:a}, remove_from_group:{arguments:a, default_arguments:a}, remove_meta:{arguments:a, default_arguments:a}, replace_by:{arguments:a, b, default_arguments:a, b = False}, request_ready:{arguments:, default_arguments:}, rpc:{arguments:a, default_arguments:a}, rpc_config:{arguments:a, b, default_arguments:a, b}, rpc_id:{arguments:a, b, default_arguments:a, b}, rpc_unreliable:{arguments:a, default_arguments:a}, rpc_unreliable_id:{arguments:a, b, default_arguments:a, b}, rset:{arguments:a, b, default_arguments:a, b}, rset_config:{arguments:a, b, default_arguments:a, b}, rset_id:{arguments:a, b, c, default_arguments:a, b, c}, rset_unreliable:{arguments:a, b, default_arguments:a, b}, rset_unreliable_id:{arguments:a, b, c, default_arguments:a, b, c}, set:{arguments:a, b, default_arguments:a, b}, set_block_signals:{arguments:a, default_arguments:a}, set_custom_multiplayer:{arguments:a, default_arguments:a}, set_deferred:{arguments:a, b, default_arguments:a, b}, set_display_folded:{arguments:a, default_arguments:a}, set_filename:{arguments:a, default_arguments:a}, set_indexed:{arguments:a, b, default_arguments:a, b}, set_message_translation:{arguments:a, default_arguments:a}, set_meta:{arguments:a, b, default_arguments:a, b}, set_name:{arguments:a, default_arguments:a}, set_network_master:{arguments:a, b, default_arguments:a, b = True}, set_owner:{arguments:a, default_arguments:a}, set_pause_mode:{arguments:a, default_arguments:a}, set_physics_process:{arguments:a, default_arguments:a}, set_physics_process_internal:{arguments:a, default_arguments:a}, set_process:{arguments:a, default_arguments:a}, set_process_input:{arguments:a, default_arguments:a}, set_process_internal:{arguments:a, default_arguments:a}, set_process_priority:{arguments:a, default_arguments:a}, set_process_unhandled_input:{arguments:a, default_arguments:a}, set_process_unhandled_key_input:{arguments:a, default_arguments:a}, set_scene_instance_load_placeholder:{arguments:a, default_arguments:a}, set_script:{arguments:a, default_arguments:a}, subtract:{arguments:a, b, default_arguments:a, b}, sum:{arguments:a, default_arguments:a}, to_string:{arguments:, default_arguments:}, tr:{arguments:a, default_arguments:a}, update_configuration_warning:{arguments:, default_arguments:}}",
"success": true
} ],
"context": "When we create two of it for the same script",
"fullname": "test_When_we_create_two_of_it_for_the_same_script",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|Object| [Node:1565] is equal to |Object| [Node:1565]",
"context": "Then we get the same double back",
"expected": "|Object| [Node:1565] is equal to |Object| [Node:1565]",
"success": true
} ],
"context": "When we call the double the second time",
"fullname": "test_When_we_call_double_a_second_time_on",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Reference:1572] is instance of class: [GDScript:1564]",
"context": "Then we get that inner class back",
"expected": "[Reference:1572] is instance of class: [GDScript:1564]",
"success": true
} ],
"context": "When we double an inner class",
"fullname": "test_When_we_double_an_inner_class",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 3,
"path": "res://tests/integration/script_director.test.gd",
"source": {
"containers": [ "res://tests/integration", "res://tests" ],
"method": "",
"path": "res://tests/integration/script_director.test.gd",
"tags": [  ],
"test": ExtResource( 13 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 3
}, {
"context": "Given a Test Double",
"methods": [ {
"assertions": [ {
"actual": "|String| Jackie is equal to |String| Jackie",
"context": "Then we can double the object successfully",
"expected": "|String| Jackie is equal to |String| Jackie",
"success": true
} ],
"context": "When we pass in dependecies on double",
"fullname": "test_When_we_pass_in_deps_on_double",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "(1, 1) is builtin: Vector2",
"context": "Then we can call methods on it",
"expected": "(1, 1) is builtin: Vector2",
"success": true
} ],
"context": "When we double an inner class",
"fullname": "test_When_we_double_an_inner_class",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "method: add was called with arguments: [10, 10]",
"context": "Then we can see that it was called with those arguments",
"expected": "method: add was called with arguments: [10, 10]",
"success": true
} ],
"context": "When we pass arguments to a method call that we are spying on",
"fullname": "test_When_we_pass_arguments_to_a_method_call_that_we_are_spying_on",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|float| 6.283185 is equal to |float| 6.283185",
"context": "Then we can call the static methods of that inner double",
"expected": "|float| 6.283185 is equal to |float| 6.283185",
"success": true
} ],
"context": "When we add an doubled inner class to it",
"fullname": "test_When_we_add_a_doubled_inner_class_to_it",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 9999 is equal to |int| 9999",
"context": "Then it returns the corresponding value when the partial pattern matches",
"expected": "|int| 9999 is equal to |int| 9999",
"success": true
} ],
"context": "When we call a method that was stubbed with a partial (ie using any()) argument pattern",
"fullname": "test_When_we_call_a_method_that_was_stubbed_with_a_partial_argument_pattern",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "add was called",
"context": "Then we can see that it was called at least once",
"expected": "add was called",
"success": true
} ],
"context": "When we call a method that we are spying on",
"fullname": "test_When_we_call_a_method_that_we_are_spying_on",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 4 is equal to |int| 4",
"context": "Then we get the correct result",
"expected": "|int| 4 is equal to |int| 4",
"success": true
} ],
"context": "When we call an add(x, y) method that we haven't directed",
"fullname": "test_When_we_call_an_add_method_that_we_have_not_directed",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|null| Null == null",
"context": "Then we get the stubbed value back",
"expected": "|null| Null == null",
"success": true
} ],
"context": "When we stub a method of a doubled inner class",
"fullname": "test_When_we_stub_a_method_of_a_double_inner_class",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 99 is equal to |int| 99",
"context": "Then it affects the state of the double",
"expected": "|int| 99 is equal to |int| 99",
"success": true
} ],
"context": "When we pass a funcref as a subcall",
"fullname": "test_When_we_pass_a_funcref_as_a_subcall",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|Array| [10, 5] is equal to |Array| [10, 5]",
"context": "Then it returns a value",
"expected": "|Array| [10, 5] is equal to |Array| [10, 5]",
"success": true
} ],
"context": "When we pass an Object with a call_func function",
"fullname": "test_When_we_pass_an_object_with_callfunc_method_as_a_subcall",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 9999 is equal to |int| 9999",
"context": "Then it returns the corresponding value when the pattern matches",
"expected": "|int| 9999 is equal to |int| 9999",
"success": true
} ],
"context": "When we call a method that was stubbed with an argument pattern that includes a non-primitive object",
"fullname": "test_When_we_call_a_method_that_was_stubbed_with_an_argument_pattern_that_includes_a_non_primitive_object",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|null| Null == null",
"context": "Then we get null",
"expected": "|null| Null == null",
"success": true
} ],
"context": "When we call a method that we have dummied",
"fullname": "test_When_we_call_a_method_that_we_have_dummied",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 99 is equal to |int| 99",
"context": "Then it returns a value",
"expected": "|int| 99 is equal to |int| 99",
"success": true
} ],
"context": "When we pass a funcref as a subcall that returns",
"fullname": "test_When_we_pass_a_funcref_as_a_subcall_that_returns_a_value",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then it returns true",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we call a method that we have stubbed to return true",
"fullname": "test_When_we_call_a_method_that_we_have_stubbed_to_return_true",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|Object| [Node:1677] is equal to |Object| [Node:1677]",
"context": "Then it returns that same node",
"expected": "|Object| [Node:1677] is equal to |Object| [Node:1677]",
"success": true
} ],
"context": "When we call a method that we have stubbed to return a node",
"fullname": "test_When_we_call_a_method_that_we_have_stubbed_to_return_a_node",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|String| Jackie is equal to |String| Jackie",
"context": "Then we can double the object successfully",
"expected": "|String| Jackie is equal to |String| Jackie",
"success": true
} ],
"context": "When we pass in dependecies on direct",
"fullname": "test_When_we_pass_in_deps_on_direct",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 100 is equal to |int| 100",
"context": "Then it returns the default stubbed value when the arguments don't match any pattern",
"expected": "|int| 100 is equal to |int| 100",
"success": true
}, {
"actual": "|int| 1000 is equal to |int| 1000",
"context": "Then it returns the the corresponding value to the pattern the arguments matched",
"expected": "|int| 1000 is equal to |int| 1000",
"success": true
} ],
"context": "When we call a method that was stubbed to return different values based on argument patterns",
"fullname": "test_When_we_call_a_method_that_was_stubbed_to_return_different_values_based_on_argument_patterns",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|bool| True is equal to |bool| True",
"context": "Then we can call it",
"expected": "|bool| True is equal to |bool| True",
"success": true
} ],
"context": "When we stubbed a keyworded method by passing in the correct keyword",
"fullname": "test_When_we_stubbed_a_keyword_method_by_passing_in_the_correct_keyword",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 4 is equal to |int| 4",
"context": "Then it calls its super implementation by default",
"expected": "|int| 4 is equal to |int| 4",
"success": true
}, {
"actual": "|int| 9999 is equal to |int| 9999",
"context": "Then it does not call its super implementation when arguments patterns match a different return value",
"expected": "|int| 9999 is equal to |int| 9999",
"success": true
} ],
"context": "When we call a method that we stubbed to call its super implementation by default",
"fullname": "test_When_we_call_a_method_that_we_stubbed_to_call_its_super_implementation_by_default",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
} ],
"passed": 19,
"path": "res://tests/integration/test_double.test.gd",
"source": {
"containers": [ "res://tests/integration", "res://tests" ],
"method": "",
"path": "res://tests/integration/test_double.test.gd",
"tags": [  ],
"test": ExtResource( 14 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 19
}, {
"context": "Given a Boolean Assertion",
"methods": [ {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then it passes",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When calling asserts.is_true(true)",
"fullname": "test_when_calling_asserts_is_true",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| False == false",
"context": "Then it passes",
"expected": "|bool| False == false",
"success": true
} ],
"context": "When calling asserts.is_false(false)",
"fullname": "test_when_calling_asserts_is_false",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| True != false",
"context": "",
"expected": "|bool| True == false",
"success": false
} ],
"context": " intentional failure",
"fullname": "test_intentional_failure",
"passed": 0,
"success": false,
"time": 0.0,
"total": 1
} ],
"passed": 2,
"path": "res://tests/unit/boolean.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/boolean.test.gd",
"tags": [  ],
"test": ExtResource( 11 ),
"yield_time": 0.0
},
"success": false,
"time_taken": 0.0,
"total": 3
}, {
"context": "Given an Equality Assertion",
"methods": [ {
"assertions": [ {
"actual": "|int| 2 is equal or greater |int| 1",
"context": "Then it passes",
"expected": "|int| 2 is equal or greater |int| 1",
"success": true
} ],
"context": "When calling asserts.is_equal_or_greater_than(2, 1)",
"fullname": "test_when_calling_is_equal_or_greater_than",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 2 is greater than |int| 1",
"context": "Then it passes",
"expected": "|int| 2 is greater than |int| 1",
"success": true
} ],
"context": "When calling asserts.is_greater_than(2, 1)",
"fullname": "test_when_calling_is_greater_than",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 1 is equal to |int| 1",
"context": "Then it passes",
"expected": "|int| 1 is equal to |int| 1",
"success": true
} ],
"context": "When calling asserts.is_equal(1, 1)",
"fullname": "test_when_calling_is_equal",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 1 is less than |int| 2",
"context": "Then it passes",
"expected": "|int| 1 is less than |int| 2",
"success": true
} ],
"context": "When calling asserts.is_less_than(2, 1)",
"fullname": "test_when_calling_is_less_than",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 1 is equal or greater |int| 1",
"context": "Then it passes",
"expected": "|int| 1 is equal or greater |int| 1",
"success": true
} ],
"context": "When calling asserts.is_equal_or_greater_than(1, 1)",
"fullname": "test_when_calling_is_equal_or_greater_than_with_equal_values",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 5 is not equal to |int| 6",
"context": "Then it passes",
"expected": "|int| 5 != |int| 6",
"success": true
} ],
"context": "When callign asserts.is_not_equal(5, 6)",
"fullname": "test_when_calling_is_not_equal",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 1 is equal or less than |int| 1",
"context": "Then it passes!",
"expected": "|int| 1 is equal or less than |int| 1",
"success": true
} ],
"context": "When calling asserts.is_equal_or_less_than(1, 1)",
"fullname": "test_when_calling_is_equal_or_less_than_with_equal_values",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 7,
"path": "res://tests/unit/equality.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/equality.test.gd",
"tags": [  ],
"test": ExtResource( 8 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 7
}, {
"context": "Given A File Assertion",
"methods": [ {
"assertions": [ {
"actual": "res://somefile.gd does not exist",
"context": "Then it passes",
"expected": "res://somefile.gd does not exist",
"success": true
} ],
"context": "When calling asserts.file_does_not_exist when there is no file",
"fullname": "test_when_calling_file_does_not_exist_when_there_is_no_file",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": " does not exist",
"context": "Then it passes",
"expected": " does not exist",
"success": true
} ],
"context": "When calling asserts file does not exist when path is empty",
"fullname": "test_when_calling_file_does_not_exist_when_path_is_empty",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "res://tests/unit/file.test.gd exists",
"context": "Then it passes",
"expected": "res://tests/unit/file.test.gd exists",
"success": true
} ],
"context": "When calling asserts.file_exists when the file is this suite",
"fullname": "test_when_calling_file_exists_when_file_is_self",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 3,
"path": "res://tests/unit/file.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/file.test.gd",
"tags": [  ],
"test": ExtResource( 3 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 3
}, {
"context": "Given an Is Instance of class/type Assertion",
"methods": [ {
"assertions": [ {
"actual": "|AABB| 0, 0, 0 - 0, 0, 0 != null",
"context": "AABB is not null",
"expected": "|AABB| 0, 0, 0 - 0, 0, 0 != null",
"success": true
}, {
"actual": "0, 0, 0 - 0, 0, 0 is builtin: AABB",
"context": "Then it passes",
"expected": "0, 0, 0 - 0, 0, 0 is builtin: AABB",
"success": true
} ],
"context": "When calling asserts.is_AABB(aabb: AABB)",
"fullname": "test_when_calling_is_AABB",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|Array| [] != null",
"context": "array is not null",
"expected": "|Array| [] != null",
"success": true
}, {
"actual": "[] is builtin: Array",
"context": "Then it passes",
"expected": "[] is builtin: Array",
"success": true
} ],
"context": "When calling asserts.is_Array(array: Array)",
"fullname": "test_when_calling_is_Array",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|Transform2D| ((1, 0), (0, 1), (0, 0)) != null",
"context": "transform2D is not null",
"expected": "|Transform2D| ((1, 0), (0, 1), (0, 0)) != null",
"success": true
}, {
"actual": "((1, 0), (0, 1), (0, 0)) is builtin: Transform2D",
"context": "Then it passes",
"expected": "((1, 0), (0, 1), (0, 0)) is builtin: Transform2D",
"success": true
} ],
"context": "When calling asserts.is_Transform(transform2D: Transform2D)",
"fullname": "test_when_calling_is_Transform2D",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|Rect2| (0, 0, 0, 0) != null",
"context": "rect2 is not null",
"expected": "|Rect2| (0, 0, 0, 0) != null",
"success": true
}, {
"actual": "(0, 0, 0, 0) is builtin: Rect2",
"context": "Then it passes",
"expected": "(0, 0, 0, 0) is builtin: Rect2",
"success": true
} ],
"context": "When calling asserts.is_Rect2(rect2: Rect2)",
"fullname": "test_when_calling_is_Rect2",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|Vector3| (0, 0, 0) != null",
"context": "vec3 is not null",
"expected": "|Vector3| (0, 0, 0) != null",
"success": true
}, {
"actual": "(0, 0, 0) is builtin: Vector3",
"context": "Then it passes",
"expected": "(0, 0, 0) is builtin: Vector3",
"success": true
} ],
"context": "When calling asserts.is_Vector3(vec3: Vector3",
"fullname": "test_when_calling_is_Vector3",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|Quat| (0, 0, 0, 1) != null",
"context": "quat is not null",
"expected": "|Quat| (0, 0, 0, 1) != null",
"success": true
}, {
"actual": "(0, 0, 0, 1) is builtin: Quat",
"context": "Then it passes",
"expected": "(0, 0, 0, 1) is builtin: Quat",
"success": true
} ],
"context": "When calling asserts.is_Quat(quat: Quat)",
"fullname": "test_when_calling_is_Quat",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "{} is builtin: Dictionary",
"context": "Then it passes",
"expected": "{} is builtin: Dictionary",
"success": true
} ],
"context": "When calling asserts.is_Dictionary({})",
"fullname": "test_when_calling_is_Dictionary",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|PoolIntArray| [] != null",
"context": "ints is not null",
"expected": "|PoolIntArray| [] != null",
"success": true
}, {
"actual": "[] is builtin: PoolIntArray",
"context": "Then it passes",
"expected": "[] is builtin: PoolIntArray",
"success": true
} ],
"context": "When calling asserts.is_PoolIntArray(ints: PoolIntArray)",
"fullname": "test_when_calling_is_PoolIntArray",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|PoolByteArray| [PoolByteArray] != null",
"context": "bytes is not null",
"expected": "|PoolByteArray| [PoolByteArray] != null",
"success": true
}, {
"actual": "[PoolByteArray] is builtin: PoolByteArray",
"context": "Then it passes",
"expected": "[PoolByteArray] is builtin: PoolByteArray",
"success": true
} ],
"context": "When calling asserts.is_PoolByteArray(bytes: PoolByteArray)",
"fullname": "test_when_calling_is_PoolByteArray",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|RID| [RID] != null",
"context": "rid is not null",
"expected": "|RID| [RID] != null",
"success": true
}, {
"actual": "[RID] is builtin: RID",
"context": "Then it passes",
"expected": "[RID] is builtin: RID",
"success": true
} ],
"context": "When calling asserts.is_RID(rid: RID)",
"fullname": "test_when_calling_is_RID",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|PoolStringArray| [] != null",
"context": "strs is not null",
"expected": "|PoolStringArray| [] != null",
"success": true
}, {
"actual": "[] is builtin: PoolStringArray",
"context": "Then it passes",
"expected": "[] is builtin: PoolStringArray",
"success": true
} ],
"context": "When calling is asserts.is_PoolStringArray(strs: PoolStringArray)",
"fullname": "test_when_calling_is_PoolStringArray",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "1 is builtin: float",
"context": "Then it passes",
"expected": "1 is builtin: float",
"success": true
} ],
"context": "When calling asserts.is_float(1.0)",
"fullname": "test_when_calling_is_float",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|PoolColorArray| [PoolColorArray] != null",
"context": "colors is not null",
"expected": "|PoolColorArray| [PoolColorArray] != null",
"success": true
}, {
"actual": "[PoolColorArray] is builtin: PoolColorArray",
"context": "Then it passes",
"expected": "[PoolColorArray] is builtin: PoolColorArray",
"success": true
} ],
"context": "When calling asserts.is_PoolColorArray(colors: PoolColorArray)",
"fullname": "test_when_calling_is_PoolColorArray",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|NodePath| . != null",
"context": "@'Parent/Child' is not null",
"expected": "|NodePath| . != null",
"success": true
}, {
"actual": ". is builtin: NodePath",
"context": "Then it passes",
"expected": ". is builtin: NodePath",
"success": true
} ],
"context": "When calling asserts.is_NodePath(@'Parent/Child')",
"fullname": "test_when_calling_is_NodePath",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|PoolVector2Array| [] != null",
"context": "vec2s is not null",
"expected": "|PoolVector2Array| [] != null",
"success": true
}, {
"actual": "[] is builtin: PoolVector2Array",
"context": "Then it passes",
"expected": "[] is builtin: PoolVector2Array",
"success": true
} ],
"context": "When calling is asserts.is_PoolVector2Array(vec2s: PoolVector2Array)",
"fullname": "test_when_calling_is_PoolVector2Array",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|PoolVector3Array| [] != null",
"context": "vec3s is not null",
"expected": "|PoolVector3Array| [] != null",
"success": true
}, {
"actual": "[] is builtin: PoolVector3Array",
"context": "Then it passes",
"expected": "[] is builtin: PoolVector3Array",
"success": true
} ],
"context": "When calling is asserts.is_PoolVector3Array(vec3s: PoolVector3Array)",
"fullname": "test_when_calling_is_PoolVector3Array",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|Transform| 1, 0, 0, 0, 1, 0, 0, 0, 1 - 0, 0, 0 != null",
"context": "transform is not null",
"expected": "|Transform| 1, 0, 0, 0, 1, 0, 0, 0, 1 - 0, 0, 0 != null",
"success": true
}, {
"actual": "1, 0, 0, 0, 1, 0, 0, 0, 1 - 0, 0, 0 is builtin: Transform",
"context": "Then it passes",
"expected": "1, 0, 0, 0, 1, 0, 0, 0, 1 - 0, 0, 0 is builtin: Transform",
"success": true
} ],
"context": "When calling asserts.is_Transform(transform: Transform)",
"fullname": "test_when_calling_is_Transform",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|String|  != null",
"context": "strs is not null",
"expected": "|String|  != null",
"success": true
}, {
"actual": " is builtin: String",
"context": "Then it passes",
"expected": " is builtin: String",
"success": true
} ],
"context": "When calling asserts.is_string(strs: String)",
"fullname": "test_when_calling_is_string",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|Basis| ((1, 0, 0), (0, 1, 0), (0, 0, 1)) != null",
"context": "basis is not null",
"expected": "|Basis| ((1, 0, 0), (0, 1, 0), (0, 0, 1)) != null",
"success": true
}, {
"actual": "((1, 0, 0), (0, 1, 0), (0, 0, 1)) is builtin: Basis",
"context": "Then it passes",
"expected": "((1, 0, 0), (0, 1, 0), (0, 0, 1)) is builtin: Basis",
"success": true
} ],
"context": "When calling asserts.is_basis(basis: Basis",
"fullname": "test_when_calling_is_Basis",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|Plane| 0, 0, 0, 0 != null",
"context": "plane is not null",
"expected": "|Plane| 0, 0, 0, 0 != null",
"success": true
}, {
"actual": "0, 0, 0, 0 is builtin: Plane",
"context": "then it passes",
"expected": "0, 0, 0, 0 is builtin: Plane",
"success": true
} ],
"context": "When calling asserts.is_Plane(plane: Plane())",
"fullname": "test_when_calling_is_Plane",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|Vector2| (0, 0) != null",
"context": "vec2 is not null",
"expected": "|Vector2| (0, 0) != null",
"success": true
}, {
"actual": "(0, 0) is builtin: Vector2",
"context": "Then it passes",
"expected": "(0, 0) is builtin: Vector2",
"success": true
} ],
"context": "When calling asserts.is_Vector2(vec2)",
"fullname": "test_when_calling_is_Vector2",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|Object| [Node:1777] != null",
"context": "node is not null",
"expected": "|Object| [Node:1777] != null",
"success": true
}, {
"actual": "[Node:1777] is builtin: Object",
"context": "An instance of node is an Object",
"expected": "[Node:1777] is builtin: Object",
"success": true
} ],
"context": "When calling is asserts.object(node: Node)",
"fullname": "test_when_calling_is_object",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|PoolRealArray| [] != null",
"context": "reals is not null",
"expected": "|PoolRealArray| [] != null",
"success": true
}, {
"actual": "[] is builtin: PoolRealArray",
"context": "Then it passes",
"expected": "[] is builtin: PoolRealArray",
"success": true
} ],
"context": "When calling is asserts.is_PoolRealArray(reals: PoolRealArray)",
"fullname": "test_when_calling_is_PoolRealArray",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "True is builtin: bool",
"context": "Then it passes",
"expected": "True is builtin: bool",
"success": true
} ],
"context": "When calling asserts.is_bool(true)",
"fullname": "test_when_calling_is_bool",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "1 is builtin: int",
"context": "Then it passes",
"expected": "1 is builtin: int",
"success": true
} ],
"context": "When callign asserts.is_int(1)",
"fullname": "test_when_calling_is_int",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|Color| 0,0,0,1 != null",
"context": "color is not null",
"expected": "|Color| 0,0,0,1 != null",
"success": true
}, {
"actual": "0,0,0,1 is builtin: Color",
"context": "Then it passes",
"expected": "0,0,0,1 is builtin: Color",
"success": true
} ],
"context": "When calling asserts.is_color(color: Color)",
"fullname": "test_when_calling_is_Color",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
} ],
"passed": 26,
"path": "res://tests/unit/is_instance.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/is_instance.test.gd",
"tags": [  ],
"test": ExtResource( 6 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 26
}, {
"context": "Given an Is Not Instance of class/type Assertion",
"methods": [ {
"assertions": [ {
"actual": "Null is not builtin: Array",
"context": "Then it passes",
"expected": "Null is not builtin: Array",
"success": true
} ],
"context": "when calling asserts.is_not_Array(null)",
"fullname": "test_when_calling_is_not_Array",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Color",
"context": "Then it passes",
"expected": "Null is not builtin: Color",
"success": true
} ],
"context": "when calling asserts.is_not_Color(null)",
"fullname": "test_when_calling_is_not_Color",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: float",
"context": "Then it passes",
"expected": "Null is not builtin: float",
"success": true
} ],
"context": "when calling asserts.is_not_float(null)",
"fullname": "test_when_calling_is_not_float",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: AABB",
"context": "Then it passes",
"expected": "Null is not builtin: AABB",
"success": true
} ],
"context": "when calling asserts.is_not_AABB(null)",
"fullname": "test_when_calling_is_not_AABB",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Basis",
"context": "Then it passes",
"expected": "Null is not builtin: Basis",
"success": true
} ],
"context": "when calling asserts.is_not_Basis(null)",
"fullname": "test_when_calling_is_not_Basis",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: int",
"context": "Then it passes",
"expected": "Null is not builtin: int",
"success": true
} ],
"context": "when calling asserts.is_not_int(null)",
"fullname": "test_when_calling_is_not_int",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: bool",
"context": "Then it passes",
"expected": "Null is not builtin: bool",
"success": true
} ],
"context": "when calling asserts.is_not_bool(null)",
"fullname": "test_when_calling_is_not_bool",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Dictionary",
"context": "Then it passes",
"expected": "Null is not builtin: Dictionary",
"success": true
} ],
"context": "when calling asserts.is_not_Dictionary(null)",
"fullname": "test_when_calling_is_not_Dictionary",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: NodePath",
"context": "Then it passes",
"expected": "Null is not builtin: NodePath",
"success": true
} ],
"context": "when calling asserts.is_not_NodePath(null)",
"fullname": "test_when_calling_is_not_NodePath",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Object",
"context": "Then it passes",
"expected": "Null is not builtin: Object",
"success": true
} ],
"context": "when calling asserts.is_not_Object(null)",
"fullname": "test_when_calling_is_not_Object",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: PoolStringArray",
"context": "Then it passes",
"expected": "Null is not builtin: PoolStringArray",
"success": true
} ],
"context": "when calling asserts.is_not_PoolStringArray(null)",
"fullname": "test_when_calling_is_not_PoolStringArray",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Quat",
"context": "Then it passes",
"expected": "Null is not builtin: Quat",
"success": true
} ],
"context": "when calling asserts.is_not_Quat(null)",
"fullname": "test_when_calling_is_not_Quat",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: PoolRealArray",
"context": "Then it passes",
"expected": "Null is not builtin: PoolRealArray",
"success": true
} ],
"context": "when calling asserts.is_not_PoolRealArray(null)",
"fullname": "test_when_calling_is_not_PoolRealArray",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: RID",
"context": "Then it passes",
"expected": "Null is not builtin: RID",
"success": true
} ],
"context": "when calling asserts.is_not_RID(null)",
"fullname": "test_when_calling_is_not_RID",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: PoolIntArray",
"context": "Then it passes",
"expected": "Null is not builtin: PoolIntArray",
"success": true
} ],
"context": "when calling asserts.is_not_PoolIntArray(null)",
"fullname": "test_when_calling_is_not_PoolIntArray",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Vector2",
"context": "Then it passes",
"expected": "Null is not builtin: Vector2",
"success": true
} ],
"context": "when calling asserts.is_not_Vector2(null)",
"fullname": "test_when_calling_is_not_Vector2",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Transform",
"context": "Then it passes",
"expected": "Null is not builtin: Transform",
"success": true
} ],
"context": "when calling asserts.is_not_Transform(null)",
"fullname": "test_when_calling_is_not_Transform",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: String",
"context": "Then it passes",
"expected": "Null is not builtin: String",
"success": true
} ],
"context": "when calling asserts.is_not_String(null)",
"fullname": "test_when_calling_is_not_String",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: PoolVector2Array",
"context": "Then it passes",
"expected": "Null is not builtin: PoolVector2Array",
"success": true
} ],
"context": "when calling asserts.is_not_PoolVector2Array(null)",
"fullname": "test_when_calling_is_not_PoolVector2Array",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: PoolVector3Array",
"context": "Then it passes",
"expected": "Null is not builtin: PoolVector3Array",
"success": true
} ],
"context": "when calling asserts.is_not_PoolVector3Array(null)",
"fullname": "test_when_calling_is_not_PoolVector3Array",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Plane",
"context": "Then it passes",
"expected": "Null is not builtin: Plane",
"success": true
} ],
"context": "when calling asserts.is_not_Plane(null)",
"fullname": "test_when_calling_is_not_Plane",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Transform2D",
"context": "Then it passes",
"expected": "Null is not builtin: Transform2D",
"success": true
} ],
"context": "when calling asserts.is_not_Transform2D(null)",
"fullname": "test_when_calling_is_not_Transform2D",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: PoolColorArray",
"context": "Then it passes",
"expected": "Null is not builtin: PoolColorArray",
"success": true
} ],
"context": "when calling asserts.is_not_PoolColorArray(null)",
"fullname": "test_when_calling_is_not_PoolColorArray",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Vector3",
"context": "Then it passes",
"expected": "Null is not builtin: Vector3",
"success": true
} ],
"context": "when calling asserts.is_not_Vector3(null)",
"fullname": "test_when_calling_is_not_Vector3",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: PoolByteArray",
"context": "Then it passes",
"expected": "Null is not builtin: PoolByteArray",
"success": true
} ],
"context": "when calling asserts.is_not_PoolByteArray(null)",
"fullname": "test_when_calling_is_not_PoolByteArray",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Rect2",
"context": "Then it passes",
"expected": "Null is not builtin: Rect2",
"success": true
} ],
"context": "when calling asserts.is_not_Rect2(null)",
"fullname": "test_when_calling_is_not_Rect2",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 26,
"path": "res://tests/unit/is_not_instance.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/is_not_instance.test.gd",
"tags": [  ],
"test": ExtResource( 2 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 26
}, {
"context": "Given a Null Assertion",
"methods": [ {
"assertions": [ {
"actual": "|Object| [Node:1818] != null",
"context": "Then it passes",
"expected": "|Object| [Node:1818] != null",
"success": true
} ],
"context": "When calling Node is not null",
"fullname": "test_when_calling_node_is_not_null",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|null| Null == null",
"context": "Then it passes",
"expected": "|null| Null == null",
"success": true
} ],
"context": "When calling asserts.is_null(null)",
"fullname": "test_when_calling_null_is_null",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|Object| [Deleted Object] == null",
"context": "A Freed Node is null in Engine 3.2.2 or greater",
"expected": "|Object| [Deleted Object] == null",
"success": true
} ],
"context": "When calling freed object is null",
"fullname": "test_when_calling_freed_object_is_not_null",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 3,
"path": "res://tests/unit/null.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/null.test.gd",
"tags": [  ],
"test": ExtResource( 12 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 3
}, {
"context": "Given an Object Assertion",
"methods": [ {
"assertions": [ {
"actual": "[Node:1823] does not have meta: confusing",
"context": "Then it passes",
"expected": "[Node:1823] does not have meta: confusing",
"success": true
} ],
"context": "When calling asserts.object_has_meta with real key but null val",
"fullname": "test_when_calling_does_not_have_meta_real_key_null_value_pair",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:1823] has method: title",
"context": "Then it passes",
"expected": "[Node:1823] has method: title",
"success": true
} ],
"context": "When calling has_method('title')",
"fullname": "test_when_calling_has_method_title",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:1823] has user signal: dummy_signal",
"context": "Then it passes",
"expected": "[Node:1823] has user signal: dummy_signal",
"success": true
} ],
"context": "When calling obj_has_user_signal after adding a signal",
"fullname": "test_when_calling_has_user_signal_after_adding_a_signal",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:1823] does not have user signal: false_signal",
"context": "Then it passes",
"expected": "[Node:1823] does not have user signal: false_signal",
"success": true
} ],
"context": "When calling obj_does_not_have_user_signal with fake signal",
"fullname": "test_when_calling_does_not_have_user_signal",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is freed from memory",
"context": "Then it passes",
"expected": "Null is freed from memory",
"success": true
} ],
"context": "When calling asserts.is_freed(freed_object",
"fullname": "test_when_calling_freed_object_is_freed",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:1823] has meta: dummy",
"context": "Then it passes",
"expected": "[Node:1823] has meta: dummy",
"success": true
}, {
"actual": "[Node:1823] has meta: dummy",
"context": "Then it passes",
"expected": "[Node:1823] has meta: dummy",
"success": true
} ],
"context": "When calling asserts.object_has_meta() after adding metadata",
"fullname": "test_when_calling_has_meta_after_adding_metadata",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "[Node:1834] is not freed",
"context": "Then it passes",
"expected": "[Node:1834] is not freed",
"success": true
} ],
"context": "When calling asserts.is_not_freed(unfreed_object)",
"fullname": "test_when_calling_unfreed_object_is_not_freed",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:1823] does not have meta: bad_meta",
"context": "Then it passes",
"expected": "[Node:1823] does not have meta: bad_meta",
"success": true
} ],
"context": "When calling asserts.object_does_not_have_meta()",
"fullname": "test_when_calling_does_not_have_meta",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:1837] is queued for deletion",
"context": "Then it passes",
"expected": "[Node:1837] is queued for deletion",
"success": true
} ],
"context": "When calling asserts.object_is_queued for deletion after calling queue_free",
"fullname": "test_when_calling_obj_is_queued_for_deletion_after_calling_queue_free",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:1839] is blocking signals",
"context": "Then it passes",
"expected": "[Node:1839] is blocking signals",
"success": true
} ],
"context": "When calling is blocking signals while blocking signals",
"fullname": "test_is_blocking_signals",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:1841] is not blocking signals",
"context": "Then it passes",
"expected": "[Node:1841] is not blocking signals",
"success": true
} ],
"context": "When calling is not blocking signals while not blocking signals",
"fullname": "test_is_not_blocking_signals",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:1843] is not queued for deletion",
"context": "Then it passes",
"expected": "[Node:1843] is not queued for deletion",
"success": true
} ],
"context": "When calling asserts.object_is_not_for_queued_deletion after not calling queue free()",
"fullname": "test_when_calling_obj_is_not_for_queued_deletion_after_not_calling_queue_free",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:1823].builtin_dummy is connected to [Node:1823].title",
"context": "Then it passes",
"expected": "[Node:1823].builtin_dummy is connected to [Node:1823].title",
"success": true
} ],
"context": "When calling asserts object is connected with a valid connection",
"fullname": "test_when_calling_obj_is_connected_with_a_real_connection",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:1823].builtin_dummy is not connected to [Node:1823].title",
"context": "Then it passes",
"expected": "[Node:1823].builtin_dummy is not connected to [Node:1823].title",
"success": true
} ],
"context": "When calling asserts object is not connected with an invalid connection",
"fullname": "test_when_calling_obj_is_not_connected_with_an_invalid_connection",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:1823] does not have user signal: builtin_dummy",
"context": "Then it passes",
"expected": "[Node:1823] does not have user signal: builtin_dummy",
"success": true
} ],
"context": "When calling does not have user signal with class signal",
"fullname": "test_when_calling_does_not_have_user_signal_with_class_signal_constant",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 15,
"path": "res://tests/unit/object.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/object.test.gd",
"tags": [  ],
"test": ExtResource( 7 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 15
}, {
"context": "Given the Addition Operator",
"methods": [ {
"assertions": [ {
"actual": "|int| 4 is equal to |int| 4",
"context": "",
"expected": "|int| 4 is equal to |int| 4",
"success": true
} ],
"context": "When we add 2 to 2 we get 4",
"fullname": "test_add",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 8 is equal to |int| 8",
"context": "",
"expected": "|int| 8 is equal to |int| 8",
"success": true
} ],
"context": "When we add 5 to 3 we get 8",
"fullname": "test_add",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 13 is equal to |int| 13",
"context": "",
"expected": "|int| 13 is equal to |int| 13",
"success": true
} ],
"context": "When we add 7 to 6 we get 13",
"fullname": "test_add",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 0 is equal to |int| 0",
"context": "",
"expected": "|int| 0 is equal to |int| 0",
"success": true
} ],
"context": "When we subtract 2 from 2 we get 0",
"fullname": "test_subtract",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 2 is equal to |int| 2",
"context": "",
"expected": "|int| 2 is equal to |int| 2",
"success": true
} ],
"context": "When we subtract 5 from 3 we get 2",
"fullname": "test_subtract",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 1 is equal to |int| 1",
"context": "",
"expected": "|int| 1 is equal to |int| 1",
"success": true
} ],
"context": "When we subtract 7 from 6 we get 1",
"fullname": "test_subtract",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 6,
"path": "res://tests/unit/parameters.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/parameters.test.gd",
"tags": [  ],
"test": ExtResource( 16 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 6
}, {
"context": "Given A Range Assertion",
"methods": [ {
"assertions": [ {
"actual": "10 is not in range(0, 10)",
"context": "Then it passes",
"expected": "10 is not in range(0, 10)",
"success": true
} ],
"context": "When calling is (10) not in range (in range(0, 10)",
"fullname": "test_when_calling_is_not_in_range",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "0 is in range(0, 10)",
"context": "Then it passes",
"expected": "0 is in range(0, 10)",
"success": true
} ],
"context": "When calling is (0) in range(0, 10)",
"fullname": "test_when_calling_is_in_range",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 2,
"path": "res://tests/unit/range.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/range.test.gd",
"tags": [  ],
"test": ExtResource( 15 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 2
}, {
"context": "Given a String Assertion",
"methods": [ {
"assertions": [ {
"actual": "impsum does not begin with bleh lorem",
"context": "Then it passes",
"expected": "impsum does not begin with bleh lorem",
"success": true
} ],
"context": "When calling asserts.string_does_not_begin_with('lorem', 'impsum')",
"fullname": "test_when_calling_string_does_not_begin_with",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "lorem impsum begins with lorem",
"context": "Then it passes",
"expected": "lorem impsum begins with lorem",
"success": true
} ],
"context": "When calling asserts.string_begins_with('lorem', 'lorem impsum')",
"fullname": "test_when_calling_string_begins_with",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "lorem impsum ends with impsum",
"context": "Then it passes",
"expected": "lorem impsum ends with impsum",
"success": true
} ],
"context": "When calling asserts.string_ends_with('impsum', 'lorem impsum')",
"fullname": "test_when_calling_string_ends_with",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "impsum does not contain beem im",
"context": "Then it passes",
"expected": "impsum does not contain beem im",
"success": true
} ],
"context": "When calling asserts.string_does_not_contain('em im', 'impsum')",
"fullname": "test_when_calling_string_does_not_contain",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "lorem impsum contains em im",
"context": "Then it passes",
"expected": "lorem impsum contains em im",
"success": true
} ],
"context": "When calling asserts.string_contains('em im', 'lorem impsum')",
"fullname": "test_when_calling_string_contains",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "impsum does not end with lorem",
"context": "Then it passes",
"expected": "impsum does not end with lorem",
"success": true
} ],
"context": "When calling asserts.string_does_not_end_with('lorem', 'impsum')",
"fullname": "test_when_calling_string_does_not_end_with",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 6,
"path": "res://tests/unit/string.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/string.test.gd",
"tags": [  ],
"test": ExtResource( 9 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 6
}, {
"context": "Dummy Passing Test",
"methods": [ {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Passing!",
"expected": "|bool| True == true",
"success": true
} ],
"context": "This method passes",
"fullname": "test_this_method_passes",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 1,
"path": "res://tests/unit/suite.test.gd.DummyOne",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/suite.test.gd.DummyOne",
"tags": [  ],
"test": SubResource( 19 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 1
}, {
"context": "Dummy Test 2",
"methods": [ {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Passing!",
"expected": "|bool| True == true",
"success": true
} ],
"context": "This method passes",
"fullname": "test_this_method_passes",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 1,
"path": "res://tests/unit/suite.test.gd.DummyTwo",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/suite.test.gd.DummyTwo",
"tags": [  ],
"test": SubResource( 20 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 1
}, {
"context": "Given a Test Script",
"methods": [ {
"assertions": [ {
"actual": "|int| 10 is greater than |int| 1",
"context": "We get an array of multiple values back",
"expected": "|int| 10 is greater than |int| 1",
"success": true
}, {
"actual": "|int| 0 is not equal to |int| 9",
"context": "With different values",
"expected": "|int| 0 != |int| 9",
"success": true
}, {
"actual": "|int| 10 is greater than |int| 1",
"context": "And we can track multiple properties",
"expected": "|int| 10 is greater than |int| 1",
"success": true
} ],
"context": "When we record properties",
"fullname": "test_we_can_record_properties",
"passed": 3,
"success": true,
"time": 0.0,
"total": 3
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "if the test didn't break this works",
"expected": "|bool| True == true",
"success": true
} ],
"context": " we can omit describe",
"fullname": "test_we_can_omit_describe",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|int| 2 is equal to |int| 2",
"context": "",
"expected": "|int| 2 is equal to |int| 2",
"success": true
} ],
"context": " when we omit context we can see expected and got under method",
"fullname": "test_when_we_omit_context_we_can_see_expected_and_got_under_method",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
} ],
"passed": 3,
"path": "res://tests/unit/test.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/test.test.gd",
"tags": [  ],
"test": ExtResource( 19 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 3
}, {
"context": "Given a Signal Watcher",
"methods": [ {
"assertions": [ {
"actual": "signal: multiple was emitted from [Node:1890] 2",
"context": "Then we can track how many times we emitted it",
"expected": "signal: multiple was emitted from [Node:1890] 2",
"success": true
} ],
"context": "When we watch and signal and emit it multiple times",
"fullname": "test_When_we_watch_a_signal_and_emit_it_multiple_times",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Signal: example was not emitted from [Node:1890]",
"context": "Then it does not capture the non-emitted signal",
"expected": "Signal: example was not emitted from [Node:1890]",
"success": true
} ],
"context": "When we watch and do not emit a signal",
"fullname": "test_When_we_watch_and_do_not_emit_a_signal",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Signal: example was emitted from [Node:1890] with arguments: [1, 20, 5]",
"context": "Then it captures any arguments that where passed when the signal was emitted",
"expected": "Signal: example was emitted from [Node:1890] with arguments: [1, 20, 5]",
"success": true
} ],
"context": "When we watch a signal from an object with no bound variables",
"fullname": "test_When_we_watch_a_signal_from_an_object_with_no_bound_variables",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "signal: example was emitted from [Node:1890]",
"context": "Then it captures the emitted signal",
"expected": "signal: example was emitted from [Node:1890]",
"success": true
} ],
"context": "When we watch and emit a signal",
"fullname": "test_When_we_watch_and_emit_a_signal",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 4,
"path": "res://tests/unit/watcher.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/watcher.test.gd",
"tags": [  ],
"test": ExtResource( 17 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 4
}, {
"context": "Given a Yield",
"methods": [ {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then we set var a to true",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then we set var b to true",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we yield in start twice",
"fullname": "test_When_we_yield_in_start",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then we set var c to true",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then we set var d to true",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we yield in pre thrice",
"fullname": "test_When_we_yield_in_pre",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "[100, Null, Null, Null, Null, Null] is builtin: Array",
"context": "Then we get an array",
"expected": "[100, Null, Null, Null, Null, Null] is builtin: Array",
"success": true
}, {
"actual": "|int| 6 is equal to |int| 6",
"context": "Of size 6",
"expected": "|int| 6 is equal to |int| 6",
"success": true
}, {
"actual": "|int| 100 is equal to |int| 100",
"context": "Where element 0 is 100",
"expected": "|int| 100 is equal to |int| 100",
"success": true
} ],
"context": "When yield(self.yield_value()) returns",
"fullname": "test_When_we_yield_we_get_the_return_value",
"passed": 3,
"success": true,
"time": 0.0,
"total": 3
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then yielder is unpaused",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "The timeout signal of the yielder is connected",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we call until_timeout (with 1.0)",
"fullname": "test_When_we_call_until_timeout",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then the yielder is unpaused",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then the timeout signal of the yielder is connected",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then our signal is connected to the yielder",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we call until signal",
"fullname": "test_When_we_call_until_signal",
"passed": 3,
"success": true,
"time": 0.0,
"total": 3
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then yielder is not active",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When asserting against a test",
"fullname": "test_Yielder_is_not_active_when_asserting",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then we set var e to true",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then we set var f to true",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we yield twice in execute",
"fullname": "test_When_we_yield_in_execute",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then the timeout signal is disconnected",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then the signal-signal is disconnected",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When it is finished",
"fullname": "test_When_yielder_is_finished_signals_are_disconnected",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then the yielder is paused",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When a signal being yielded on is emitted",
"fullname": "test_When_a_signal_being_yielded_on_is_emitted_the_yielder_is_stopped",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then the yielder is paused",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "The timeout signal of the yielder is not connected",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When the yielder times out on until_timeout(0.1)",
"fullname": "test_When_the_yielder_times_out",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then the yielder is paused",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then the timeout signal of the yielder is disconnected",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then our signal to the yielder is disconnected",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When the yielder heres our signal",
"fullname": "test_When_the_yielder_hears_our_signal",
"passed": 3,
"success": true,
"time": 0.0,
"total": 3
} ],
"passed": 11,
"path": "res://tests/unit/yield.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/yield.test.gd",
"tags": [  ],
"test": ExtResource( 18 ),
"yield_time": 1.9
},
"success": true,
"time_taken": 0.0,
"total": 11
}, {
"context": "Given a Boolean Assertion",
"methods": [ {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then it passes",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When calling asserts.is_true(true)",
"fullname": "test_when_calling_asserts_is_true",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| False == false",
"context": "Then it passes",
"expected": "|bool| False == false",
"success": true
} ],
"context": "When calling asserts.is_false(false)",
"fullname": "test_when_calling_asserts_is_false",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| True != false",
"context": "",
"expected": "|bool| True == false",
"success": false
} ],
"context": " intentional failure",
"fullname": "test_intentional_failure",
"passed": 0,
"success": false,
"time": 0.0,
"total": 1
} ],
"passed": 2,
"path": "res://tests/integration/boolean.test.gd",
"source": {
"containers": [ "res://tests/integration", "res://tests" ],
"method": "",
"path": "res://tests/integration/boolean.test.gd",
"tags": [  ],
"test": ExtResource( 20 ),
"yield_time": 0.0
},
"success": false,
"time_taken": 0.0,
"total": 3
}, {
"context": "Default Args",
"methods": [ {
"assertions": [ {
"actual": "|bool| True == true",
"context": "If this method can be reached then we have doubled a script with default argument(s) properly!",
"expected": "|bool| True == true",
"success": true
} ],
"context": " default arguments of interpolate property",
"fullname": "test_default_arguments_of_interpolate_property",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 1,
"path": "res://tests/integration/default_args.test.gd",
"source": {
"containers": [ "res://tests/integration", "res://tests" ],
"method": "",
"path": "res://tests/integration/default_args.test.gd",
"tags": [  ],
"test": ExtResource( 10 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 1
}, {
"context": "Given is_on_floor",
"methods": [ {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then it can be stubbed",
"expected": "|bool| True == true",
"success": true
} ],
"context": "From a user-defined script",
"fullname": "test_stubbing_is_on_floor_method_from_user_defined_class",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then it can be stubbed",
"expected": "|bool| True == true",
"success": true
} ],
"context": "From a child node of a scene without scripts",
"fullname": "test_stubbing_is_on_floor_as_child_node_with_no_script",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then it can be stubbed",
"expected": "|bool| True == true",
"success": true
} ],
"context": "From a built-in KinematicBody2D2",
"fullname": "test_stubbing_is_on_floor_method_from_builtin_class2",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 3,
"path": "res://tests/integration/on_floor.test.gd",
"source": {
"containers": [ "res://tests/integration", "res://tests" ],
"method": "",
"path": "res://tests/integration/on_floor.test.gd",
"tags": [  ],
"test": ExtResource( 5 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 3
}, {
"context": "Given a Scene Director",
"methods": [ {
"assertions": [ {
"actual": "|NodePath| A is equal to |NodePath| A",
"context": "We have the correct NodePath Set",
"expected": "|NodePath| A is equal to |NodePath| A",
"success": true
} ],
"context": "When we add it to the tree it runs",
"fullname": "test_When_we_add_it_to_the_tree_it_runs",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 9999 is equal to |int| 9999",
"context": "Then we get the stubbed return value",
"expected": "|int| 9999 is equal to |int| 9999",
"success": true
} ],
"context": "When we call a method from the root node that we stubbed",
"fullname": "test_When_we_call_a_method_from_the_root_node_that_we_stubbed",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 999 is equal to |int| 999",
"context": "Then we get the stubbed return value",
"expected": "|int| 999 is equal to |int| 999",
"success": true
} ],
"context": "When we call a method from a child node that we stubbed",
"fullname": "test_When_we_call_a_method_from_a_child_node_that_we_stubbed",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 99 is equal to |int| 99",
"context": "Then we get the stubbed return value",
"expected": "|int| 99 is equal to |int| 99",
"success": true
} ],
"context": "When we call a method from a grandchild node that we stubbed",
"fullname": "test_When_we_call_a_method_from_a_grandchild_node_that_we_stubbed",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|Dictionary| {.:[Reference:2193], A:[Reference:2194], A/B:[Reference:2196], C:[Reference:2195], C/D:[Reference:2197]} is not equal to |Dictionary| {.:[Reference:2207], A:[Reference:2208], A/B:[Reference:2210], C:[Reference:2209], C/D:[Reference:2211]}",
"context": "Then they do not share resources",
"expected": "|Dictionary| {.:[Reference:2193], A:[Reference:2194], A/B:[Reference:2196], C:[Reference:2195], C/D:[Reference:2197]} != |Dictionary| {.:[Reference:2207], A:[Reference:2208], A/B:[Reference:2210], C:[Reference:2209], C/D:[Reference:2211]}",
"success": true
} ],
"context": "When we create two of it for the same scene",
"fullname": "test_When_we_create_two_of_it_for_the_same_scene",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 5,
"path": "res://tests/integration/scene_director.test.gd",
"source": {
"containers": [ "res://tests/integration", "res://tests" ],
"method": "",
"path": "res://tests/integration/scene_director.test.gd",
"tags": [  ],
"test": ExtResource( 4 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 5
}, {
"context": "Given a Script Director",
"methods": [ {
"assertions": [ {
"actual": "|Dictionary| {_enter_tree:{arguments:, default_arguments:}, _exit_tree:{arguments:, default_arguments:}, _get:{arguments:a, default_arguments:a}, _get_configuration_warning:{arguments:, default_arguments:}, _get_editor_description:{arguments:, default_arguments:}, _get_import_path:{arguments:, default_arguments:}, _get_property_list:{arguments:, default_arguments:}, _init:{arguments:, default_arguments:}, _input:{arguments:a, default_arguments:a}, _notification:{arguments:a, default_arguments:a}, _physics_process:{arguments:a, default_arguments:a}, _process:{arguments:a, default_arguments:a}, _ready:{arguments:, default_arguments:}, _set:{arguments:a, b, default_arguments:a, b}, _set_editor_description:{arguments:a, default_arguments:a}, _set_import_path:{arguments:a, default_arguments:a}, _to_string:{arguments:, default_arguments:}, _unhandled_input:{arguments:a, default_arguments:a}, _unhandled_key_input:{arguments:a, default_arguments:a}, add:{arguments:a, b, default_arguments:a, b}, add_child:{arguments:a, b, default_arguments:a, b = False}, add_child_below_node:{arguments:a, b, c, default_arguments:a, b, c = False}, add_to_group:{arguments:a, b, default_arguments:a, b = False}, add_user_signal:{arguments:a, b, default_arguments:a, b = []}, call:{arguments:a, default_arguments:a}, call_deferred:{arguments:a, default_arguments:a}, callv:{arguments:a, b, default_arguments:a, b}, can_process:{arguments:, default_arguments:}, can_translate_messages:{arguments:, default_arguments:}, connect:{arguments:a, b, c, d, e, default_arguments:a, b, c, d = [], e = 0}, disconnect:{arguments:a, b, c, default_arguments:a, b, c}, divide:{arguments:a, b, default_arguments:a, b}, duplicate:{arguments:a, default_arguments:a = 15}, emit_signal:{arguments:a, default_arguments:a}, find_node:{arguments:a, b, c, default_arguments:a, b = True, c = True}, find_parent:{arguments:a, default_arguments:a}, free:{arguments:, default_arguments:}, get:{arguments:a, default_arguments:a}, get_child:{arguments:a, default_arguments:a}, get_child_count:{arguments:, default_arguments:}, get_children:{arguments:, default_arguments:}, get_class:{arguments:, default_arguments:}, get_custom_multiplayer:{arguments:, default_arguments:}, get_filename:{arguments:, default_arguments:}, get_groups:{arguments:, default_arguments:}, get_incoming_connections:{arguments:, default_arguments:}, get_index:{arguments:, default_arguments:}, get_indexed:{arguments:a, default_arguments:a}, get_instance_id:{arguments:, default_arguments:}, get_meta:{arguments:a, default_arguments:a}, get_meta_list:{arguments:, default_arguments:}, get_method_list:{arguments:, default_arguments:}, get_multiplayer:{arguments:, default_arguments:}, get_name:{arguments:, default_arguments:}, get_network_master:{arguments:, default_arguments:}, get_node:{arguments:a, default_arguments:a}, get_node_and_resource:{arguments:a, default_arguments:a}, get_node_or_null:{arguments:a, default_arguments:a}, get_owner:{arguments:, default_arguments:}, get_parent:{arguments:, default_arguments:}, get_path:{arguments:, default_arguments:}, get_path_to:{arguments:a, default_arguments:a}, get_pause_mode:{arguments:, default_arguments:}, get_physics_process_delta_time:{arguments:, default_arguments:}, get_position_in_parent:{arguments:, default_arguments:}, get_process_delta_time:{arguments:, default_arguments:}, get_process_priority:{arguments:, default_arguments:}, get_property_list:{arguments:, default_arguments:}, get_scene_instance_load_placeholder:{arguments:, default_arguments:}, get_script:{arguments:, default_arguments:}, get_signal_connection_list:{arguments:a, default_arguments:a}, get_signal_list:{arguments:, default_arguments:}, get_tree:{arguments:, default_arguments:}, get_viewport:{arguments:, default_arguments:}, has_meta:{arguments:a, default_arguments:a}, has_method:{arguments:a, default_arguments:a}, has_node:{arguments:a, default_arguments:a}, has_node_and_resource:{arguments:a, default_arguments:a}, has_signal:{arguments:a, default_arguments:a}, has_user_signal:{arguments:a, default_arguments:a}, is_a_parent_of:{arguments:a, default_arguments:a}, is_blocking_signals:{arguments:, default_arguments:}, is_class:{arguments:a, default_arguments:a}, is_connected:{arguments:a, b, c, default_arguments:a, b, c}, is_displayed_folded:{arguments:, default_arguments:}, is_greater_than:{arguments:a, default_arguments:a}, is_in_group:{arguments:a, default_arguments:a}, is_inside_tree:{arguments:, default_arguments:}, is_network_master:{arguments:, default_arguments:}, is_physics_processing:{arguments:, default_arguments:}, is_physics_processing_internal:{arguments:, default_arguments:}, is_processing:{arguments:, default_arguments:}, is_processing_input:{arguments:, default_arguments:}, is_processing_internal:{arguments:, default_arguments:}, is_processing_unhandled_input:{arguments:, default_arguments:}, is_processing_unhandled_key_input:{arguments:, default_arguments:}, is_queued_for_deletion:{arguments:, default_arguments:}, math_fight:{arguments:, default_arguments:}, move_child:{arguments:a, b, default_arguments:a, b}, multiply:{arguments:a, b, default_arguments:a, b}, notification:{arguments:a, b, default_arguments:a, b = False}, pi:{arguments:, default_arguments:}, print_stray_nodes:{arguments:, default_arguments:}, print_tree:{arguments:, default_arguments:}, print_tree_pretty:{arguments:, default_arguments:}, propagate_call:{arguments:a, b, c, default_arguments:a, b = [], c = False}, propagate_notification:{arguments:a, default_arguments:a}, property_list_changed_notify:{arguments:, default_arguments:}, queue_free:{arguments:, default_arguments:}, raise:{arguments:, default_arguments:}, remove_and_skip:{arguments:, default_arguments:}, remove_child:{arguments:a, default_arguments:a}, remove_from_group:{arguments:a, default_arguments:a}, remove_meta:{arguments:a, default_arguments:a}, replace_by:{arguments:a, b, default_arguments:a, b = False}, request_ready:{arguments:, default_arguments:}, rpc:{arguments:a, default_arguments:a}, rpc_config:{arguments:a, b, default_arguments:a, b}, rpc_id:{arguments:a, b, default_arguments:a, b}, rpc_unreliable:{arguments:a, default_arguments:a}, rpc_unreliable_id:{arguments:a, b, default_arguments:a, b}, rset:{arguments:a, b, default_arguments:a, b}, rset_config:{arguments:a, b, default_arguments:a, b}, rset_id:{arguments:a, b, c, default_arguments:a, b, c}, rset_unreliable:{arguments:a, b, default_arguments:a, b}, rset_unreliable_id:{arguments:a, b, c, default_arguments:a, b, c}, set:{arguments:a, b, default_arguments:a, b}, set_block_signals:{arguments:a, default_arguments:a}, set_custom_multiplayer:{arguments:a, default_arguments:a}, set_deferred:{arguments:a, b, default_arguments:a, b}, set_display_folded:{arguments:a, default_arguments:a}, set_filename:{arguments:a, default_arguments:a}, set_indexed:{arguments:a, b, default_arguments:a, b}, set_message_translation:{arguments:a, default_arguments:a}, set_meta:{arguments:a, b, default_arguments:a, b}, set_name:{arguments:a, default_arguments:a}, set_network_master:{arguments:a, b, default_arguments:a, b = True}, set_owner:{arguments:a, default_arguments:a}, set_pause_mode:{arguments:a, default_arguments:a}, set_physics_process:{arguments:a, default_arguments:a}, set_physics_process_internal:{arguments:a, default_arguments:a}, set_process:{arguments:a, default_arguments:a}, set_process_input:{arguments:a, default_arguments:a}, set_process_internal:{arguments:a, default_arguments:a}, set_process_priority:{arguments:a, default_arguments:a}, set_process_unhandled_input:{arguments:a, default_arguments:a}, set_process_unhandled_key_input:{arguments:a, default_arguments:a}, set_scene_instance_load_placeholder:{arguments:a, default_arguments:a}, set_script:{arguments:a, default_arguments:a}, subtract:{arguments:a, b, default_arguments:a, b}, sum:{arguments:a, default_arguments:a}, to_string:{arguments:, default_arguments:}, tr:{arguments:a, default_arguments:a}, update_configuration_warning:{arguments:, default_arguments:}} is not equal to |Dictionary| {_enter_tree:{arguments:, default_arguments:}, _exit_tree:{arguments:, default_arguments:}, _get:{arguments:a, default_arguments:a}, _get_configuration_warning:{arguments:, default_arguments:}, _get_editor_description:{arguments:, default_arguments:}, _get_import_path:{arguments:, default_arguments:}, _get_property_list:{arguments:, default_arguments:}, _init:{arguments:, default_arguments:}, _input:{arguments:a, default_arguments:a}, _notification:{arguments:a, default_arguments:a}, _physics_process:{arguments:a, default_arguments:a}, _process:{arguments:a, default_arguments:a}, _ready:{arguments:, default_arguments:}, _set:{arguments:a, b, default_arguments:a, b}, _set_editor_description:{arguments:a, default_arguments:a}, _set_import_path:{arguments:a, default_arguments:a}, _to_string:{arguments:, default_arguments:}, _unhandled_input:{arguments:a, default_arguments:a}, _unhandled_key_input:{arguments:a, default_arguments:a}, add:{arguments:a, b, default_arguments:a, b}, add_child:{arguments:a, b, default_arguments:a, b = False}, add_child_below_node:{arguments:a, b, c, default_arguments:a, b, c = False}, add_to_group:{arguments:a, b, default_arguments:a, b = False}, add_user_signal:{arguments:a, b, default_arguments:a, b = []}, call:{arguments:a, default_arguments:a}, call_deferred:{arguments:a, default_arguments:a}, callv:{arguments:a, b, default_arguments:a, b}, can_process:{arguments:, default_arguments:}, can_translate_messages:{arguments:, default_arguments:}, connect:{arguments:a, b, c, d, e, default_arguments:a, b, c, d = [], e = 0}, disconnect:{arguments:a, b, c, default_arguments:a, b, c}, divide:{arguments:a, b, default_arguments:a, b}, duplicate:{arguments:a, default_arguments:a = 15}, emit_signal:{arguments:a, default_arguments:a}, find_node:{arguments:a, b, c, default_arguments:a, b = True, c = True}, find_parent:{arguments:a, default_arguments:a}, free:{arguments:, default_arguments:}, get:{arguments:a, default_arguments:a}, get_child:{arguments:a, default_arguments:a}, get_child_count:{arguments:, default_arguments:}, get_children:{arguments:, default_arguments:}, get_class:{arguments:, default_arguments:}, get_custom_multiplayer:{arguments:, default_arguments:}, get_filename:{arguments:, default_arguments:}, get_groups:{arguments:, default_arguments:}, get_incoming_connections:{arguments:, default_arguments:}, get_index:{arguments:, default_arguments:}, get_indexed:{arguments:a, default_arguments:a}, get_instance_id:{arguments:, default_arguments:}, get_meta:{arguments:a, default_arguments:a}, get_meta_list:{arguments:, default_arguments:}, get_method_list:{arguments:, default_arguments:}, get_multiplayer:{arguments:, default_arguments:}, get_name:{arguments:, default_arguments:}, get_network_master:{arguments:, default_arguments:}, get_node:{arguments:a, default_arguments:a}, get_node_and_resource:{arguments:a, default_arguments:a}, get_node_or_null:{arguments:a, default_arguments:a}, get_owner:{arguments:, default_arguments:}, get_parent:{arguments:, default_arguments:}, get_path:{arguments:, default_arguments:}, get_path_to:{arguments:a, default_arguments:a}, get_pause_mode:{arguments:, default_arguments:}, get_physics_process_delta_time:{arguments:, default_arguments:}, get_position_in_parent:{arguments:, default_arguments:}, get_process_delta_time:{arguments:, default_arguments:}, get_process_priority:{arguments:, default_arguments:}, get_property_list:{arguments:, default_arguments:}, get_scene_instance_load_placeholder:{arguments:, default_arguments:}, get_script:{arguments:, default_arguments:}, get_signal_connection_list:{arguments:a, default_arguments:a}, get_signal_list:{arguments:, default_arguments:}, get_tree:{arguments:, default_arguments:}, get_viewport:{arguments:, default_arguments:}, has_meta:{arguments:a, default_arguments:a}, has_method:{arguments:a, default_arguments:a}, has_node:{arguments:a, default_arguments:a}, has_node_and_resource:{arguments:a, default_arguments:a}, has_signal:{arguments:a, default_arguments:a}, has_user_signal:{arguments:a, default_arguments:a}, is_a_parent_of:{arguments:a, default_arguments:a}, is_blocking_signals:{arguments:, default_arguments:}, is_class:{arguments:a, default_arguments:a}, is_connected:{arguments:a, b, c, default_arguments:a, b, c}, is_displayed_folded:{arguments:, default_arguments:}, is_greater_than:{arguments:a, default_arguments:a}, is_in_group:{arguments:a, default_arguments:a}, is_inside_tree:{arguments:, default_arguments:}, is_network_master:{arguments:, default_arguments:}, is_physics_processing:{arguments:, default_arguments:}, is_physics_processing_internal:{arguments:, default_arguments:}, is_processing:{arguments:, default_arguments:}, is_processing_input:{arguments:, default_arguments:}, is_processing_internal:{arguments:, default_arguments:}, is_processing_unhandled_input:{arguments:, default_arguments:}, is_processing_unhandled_key_input:{arguments:, default_arguments:}, is_queued_for_deletion:{arguments:, default_arguments:}, math_fight:{arguments:, default_arguments:}, move_child:{arguments:a, b, default_arguments:a, b}, multiply:{arguments:a, b, default_arguments:a, b}, notification:{arguments:a, b, default_arguments:a, b = False}, pi:{arguments:, default_arguments:}, print_stray_nodes:{arguments:, default_arguments:}, print_tree:{arguments:, default_arguments:}, print_tree_pretty:{arguments:, default_arguments:}, propagate_call:{arguments:a, b, c, default_arguments:a, b = [], c = False}, propagate_notification:{arguments:a, default_arguments:a}, property_list_changed_notify:{arguments:, default_arguments:}, queue_free:{arguments:, default_arguments:}, raise:{arguments:, default_arguments:}, remove_and_skip:{arguments:, default_arguments:}, remove_child:{arguments:a, default_arguments:a}, remove_from_group:{arguments:a, default_arguments:a}, remove_meta:{arguments:a, default_arguments:a}, replace_by:{arguments:a, b, default_arguments:a, b = False}, request_ready:{arguments:, default_arguments:}, rpc:{arguments:a, default_arguments:a}, rpc_config:{arguments:a, b, default_arguments:a, b}, rpc_id:{arguments:a, b, default_arguments:a, b}, rpc_unreliable:{arguments:a, default_arguments:a}, rpc_unreliable_id:{arguments:a, b, default_arguments:a, b}, rset:{arguments:a, b, default_arguments:a, b}, rset_config:{arguments:a, b, default_arguments:a, b}, rset_id:{arguments:a, b, c, default_arguments:a, b, c}, rset_unreliable:{arguments:a, b, default_arguments:a, b}, rset_unreliable_id:{arguments:a, b, c, default_arguments:a, b, c}, set:{arguments:a, b, default_arguments:a, b}, set_block_signals:{arguments:a, default_arguments:a}, set_custom_multiplayer:{arguments:a, default_arguments:a}, set_deferred:{arguments:a, b, default_arguments:a, b}, set_display_folded:{arguments:a, default_arguments:a}, set_filename:{arguments:a, default_arguments:a}, set_indexed:{arguments:a, b, default_arguments:a, b}, set_message_translation:{arguments:a, default_arguments:a}, set_meta:{arguments:a, b, default_arguments:a, b}, set_name:{arguments:a, default_arguments:a}, set_network_master:{arguments:a, b, default_arguments:a, b = True}, set_owner:{arguments:a, default_arguments:a}, set_pause_mode:{arguments:a, default_arguments:a}, set_physics_process:{arguments:a, default_arguments:a}, set_physics_process_internal:{arguments:a, default_arguments:a}, set_process:{arguments:a, default_arguments:a}, set_process_input:{arguments:a, default_arguments:a}, set_process_internal:{arguments:a, default_arguments:a}, set_process_priority:{arguments:a, default_arguments:a}, set_process_unhandled_input:{arguments:a, default_arguments:a}, set_process_unhandled_key_input:{arguments:a, default_arguments:a}, set_scene_instance_load_placeholder:{arguments:a, default_arguments:a}, set_script:{arguments:a, default_arguments:a}, subtract:{arguments:a, b, default_arguments:a, b}, sum:{arguments:a, default_arguments:a}, to_string:{arguments:, default_arguments:}, tr:{arguments:a, default_arguments:a}, update_configuration_warning:{arguments:, default_arguments:}}",
"context": "Then they do not share resources",
"expected": "|Dictionary| {_enter_tree:{arguments:, default_arguments:}, _exit_tree:{arguments:, default_arguments:}, _get:{arguments:a, default_arguments:a}, _get_configuration_warning:{arguments:, default_arguments:}, _get_editor_description:{arguments:, default_arguments:}, _get_import_path:{arguments:, default_arguments:}, _get_property_list:{arguments:, default_arguments:}, _init:{arguments:, default_arguments:}, _input:{arguments:a, default_arguments:a}, _notification:{arguments:a, default_arguments:a}, _physics_process:{arguments:a, default_arguments:a}, _process:{arguments:a, default_arguments:a}, _ready:{arguments:, default_arguments:}, _set:{arguments:a, b, default_arguments:a, b}, _set_editor_description:{arguments:a, default_arguments:a}, _set_import_path:{arguments:a, default_arguments:a}, _to_string:{arguments:, default_arguments:}, _unhandled_input:{arguments:a, default_arguments:a}, _unhandled_key_input:{arguments:a, default_arguments:a}, add:{arguments:a, b, default_arguments:a, b}, add_child:{arguments:a, b, default_arguments:a, b = False}, add_child_below_node:{arguments:a, b, c, default_arguments:a, b, c = False}, add_to_group:{arguments:a, b, default_arguments:a, b = False}, add_user_signal:{arguments:a, b, default_arguments:a, b = []}, call:{arguments:a, default_arguments:a}, call_deferred:{arguments:a, default_arguments:a}, callv:{arguments:a, b, default_arguments:a, b}, can_process:{arguments:, default_arguments:}, can_translate_messages:{arguments:, default_arguments:}, connect:{arguments:a, b, c, d, e, default_arguments:a, b, c, d = [], e = 0}, disconnect:{arguments:a, b, c, default_arguments:a, b, c}, divide:{arguments:a, b, default_arguments:a, b}, duplicate:{arguments:a, default_arguments:a = 15}, emit_signal:{arguments:a, default_arguments:a}, find_node:{arguments:a, b, c, default_arguments:a, b = True, c = True}, find_parent:{arguments:a, default_arguments:a}, free:{arguments:, default_arguments:}, get:{arguments:a, default_arguments:a}, get_child:{arguments:a, default_arguments:a}, get_child_count:{arguments:, default_arguments:}, get_children:{arguments:, default_arguments:}, get_class:{arguments:, default_arguments:}, get_custom_multiplayer:{arguments:, default_arguments:}, get_filename:{arguments:, default_arguments:}, get_groups:{arguments:, default_arguments:}, get_incoming_connections:{arguments:, default_arguments:}, get_index:{arguments:, default_arguments:}, get_indexed:{arguments:a, default_arguments:a}, get_instance_id:{arguments:, default_arguments:}, get_meta:{arguments:a, default_arguments:a}, get_meta_list:{arguments:, default_arguments:}, get_method_list:{arguments:, default_arguments:}, get_multiplayer:{arguments:, default_arguments:}, get_name:{arguments:, default_arguments:}, get_network_master:{arguments:, default_arguments:}, get_node:{arguments:a, default_arguments:a}, get_node_and_resource:{arguments:a, default_arguments:a}, get_node_or_null:{arguments:a, default_arguments:a}, get_owner:{arguments:, default_arguments:}, get_parent:{arguments:, default_arguments:}, get_path:{arguments:, default_arguments:}, get_path_to:{arguments:a, default_arguments:a}, get_pause_mode:{arguments:, default_arguments:}, get_physics_process_delta_time:{arguments:, default_arguments:}, get_position_in_parent:{arguments:, default_arguments:}, get_process_delta_time:{arguments:, default_arguments:}, get_process_priority:{arguments:, default_arguments:}, get_property_list:{arguments:, default_arguments:}, get_scene_instance_load_placeholder:{arguments:, default_arguments:}, get_script:{arguments:, default_arguments:}, get_signal_connection_list:{arguments:a, default_arguments:a}, get_signal_list:{arguments:, default_arguments:}, get_tree:{arguments:, default_arguments:}, get_viewport:{arguments:, default_arguments:}, has_meta:{arguments:a, default_arguments:a}, has_method:{arguments:a, default_arguments:a}, has_node:{arguments:a, default_arguments:a}, has_node_and_resource:{arguments:a, default_arguments:a}, has_signal:{arguments:a, default_arguments:a}, has_user_signal:{arguments:a, default_arguments:a}, is_a_parent_of:{arguments:a, default_arguments:a}, is_blocking_signals:{arguments:, default_arguments:}, is_class:{arguments:a, default_arguments:a}, is_connected:{arguments:a, b, c, default_arguments:a, b, c}, is_displayed_folded:{arguments:, default_arguments:}, is_greater_than:{arguments:a, default_arguments:a}, is_in_group:{arguments:a, default_arguments:a}, is_inside_tree:{arguments:, default_arguments:}, is_network_master:{arguments:, default_arguments:}, is_physics_processing:{arguments:, default_arguments:}, is_physics_processing_internal:{arguments:, default_arguments:}, is_processing:{arguments:, default_arguments:}, is_processing_input:{arguments:, default_arguments:}, is_processing_internal:{arguments:, default_arguments:}, is_processing_unhandled_input:{arguments:, default_arguments:}, is_processing_unhandled_key_input:{arguments:, default_arguments:}, is_queued_for_deletion:{arguments:, default_arguments:}, math_fight:{arguments:, default_arguments:}, move_child:{arguments:a, b, default_arguments:a, b}, multiply:{arguments:a, b, default_arguments:a, b}, notification:{arguments:a, b, default_arguments:a, b = False}, pi:{arguments:, default_arguments:}, print_stray_nodes:{arguments:, default_arguments:}, print_tree:{arguments:, default_arguments:}, print_tree_pretty:{arguments:, default_arguments:}, propagate_call:{arguments:a, b, c, default_arguments:a, b = [], c = False}, propagate_notification:{arguments:a, default_arguments:a}, property_list_changed_notify:{arguments:, default_arguments:}, queue_free:{arguments:, default_arguments:}, raise:{arguments:, default_arguments:}, remove_and_skip:{arguments:, default_arguments:}, remove_child:{arguments:a, default_arguments:a}, remove_from_group:{arguments:a, default_arguments:a}, remove_meta:{arguments:a, default_arguments:a}, replace_by:{arguments:a, b, default_arguments:a, b = False}, request_ready:{arguments:, default_arguments:}, rpc:{arguments:a, default_arguments:a}, rpc_config:{arguments:a, b, default_arguments:a, b}, rpc_id:{arguments:a, b, default_arguments:a, b}, rpc_unreliable:{arguments:a, default_arguments:a}, rpc_unreliable_id:{arguments:a, b, default_arguments:a, b}, rset:{arguments:a, b, default_arguments:a, b}, rset_config:{arguments:a, b, default_arguments:a, b}, rset_id:{arguments:a, b, c, default_arguments:a, b, c}, rset_unreliable:{arguments:a, b, default_arguments:a, b}, rset_unreliable_id:{arguments:a, b, c, default_arguments:a, b, c}, set:{arguments:a, b, default_arguments:a, b}, set_block_signals:{arguments:a, default_arguments:a}, set_custom_multiplayer:{arguments:a, default_arguments:a}, set_deferred:{arguments:a, b, default_arguments:a, b}, set_display_folded:{arguments:a, default_arguments:a}, set_filename:{arguments:a, default_arguments:a}, set_indexed:{arguments:a, b, default_arguments:a, b}, set_message_translation:{arguments:a, default_arguments:a}, set_meta:{arguments:a, b, default_arguments:a, b}, set_name:{arguments:a, default_arguments:a}, set_network_master:{arguments:a, b, default_arguments:a, b = True}, set_owner:{arguments:a, default_arguments:a}, set_pause_mode:{arguments:a, default_arguments:a}, set_physics_process:{arguments:a, default_arguments:a}, set_physics_process_internal:{arguments:a, default_arguments:a}, set_process:{arguments:a, default_arguments:a}, set_process_input:{arguments:a, default_arguments:a}, set_process_internal:{arguments:a, default_arguments:a}, set_process_priority:{arguments:a, default_arguments:a}, set_process_unhandled_input:{arguments:a, default_arguments:a}, set_process_unhandled_key_input:{arguments:a, default_arguments:a}, set_scene_instance_load_placeholder:{arguments:a, default_arguments:a}, set_script:{arguments:a, default_arguments:a}, subtract:{arguments:a, b, default_arguments:a, b}, sum:{arguments:a, default_arguments:a}, to_string:{arguments:, default_arguments:}, tr:{arguments:a, default_arguments:a}, update_configuration_warning:{arguments:, default_arguments:}} != |Dictionary| {_enter_tree:{arguments:, default_arguments:}, _exit_tree:{arguments:, default_arguments:}, _get:{arguments:a, default_arguments:a}, _get_configuration_warning:{arguments:, default_arguments:}, _get_editor_description:{arguments:, default_arguments:}, _get_import_path:{arguments:, default_arguments:}, _get_property_list:{arguments:, default_arguments:}, _init:{arguments:, default_arguments:}, _input:{arguments:a, default_arguments:a}, _notification:{arguments:a, default_arguments:a}, _physics_process:{arguments:a, default_arguments:a}, _process:{arguments:a, default_arguments:a}, _ready:{arguments:, default_arguments:}, _set:{arguments:a, b, default_arguments:a, b}, _set_editor_description:{arguments:a, default_arguments:a}, _set_import_path:{arguments:a, default_arguments:a}, _to_string:{arguments:, default_arguments:}, _unhandled_input:{arguments:a, default_arguments:a}, _unhandled_key_input:{arguments:a, default_arguments:a}, add:{arguments:a, b, default_arguments:a, b}, add_child:{arguments:a, b, default_arguments:a, b = False}, add_child_below_node:{arguments:a, b, c, default_arguments:a, b, c = False}, add_to_group:{arguments:a, b, default_arguments:a, b = False}, add_user_signal:{arguments:a, b, default_arguments:a, b = []}, call:{arguments:a, default_arguments:a}, call_deferred:{arguments:a, default_arguments:a}, callv:{arguments:a, b, default_arguments:a, b}, can_process:{arguments:, default_arguments:}, can_translate_messages:{arguments:, default_arguments:}, connect:{arguments:a, b, c, d, e, default_arguments:a, b, c, d = [], e = 0}, disconnect:{arguments:a, b, c, default_arguments:a, b, c}, divide:{arguments:a, b, default_arguments:a, b}, duplicate:{arguments:a, default_arguments:a = 15}, emit_signal:{arguments:a, default_arguments:a}, find_node:{arguments:a, b, c, default_arguments:a, b = True, c = True}, find_parent:{arguments:a, default_arguments:a}, free:{arguments:, default_arguments:}, get:{arguments:a, default_arguments:a}, get_child:{arguments:a, default_arguments:a}, get_child_count:{arguments:, default_arguments:}, get_children:{arguments:, default_arguments:}, get_class:{arguments:, default_arguments:}, get_custom_multiplayer:{arguments:, default_arguments:}, get_filename:{arguments:, default_arguments:}, get_groups:{arguments:, default_arguments:}, get_incoming_connections:{arguments:, default_arguments:}, get_index:{arguments:, default_arguments:}, get_indexed:{arguments:a, default_arguments:a}, get_instance_id:{arguments:, default_arguments:}, get_meta:{arguments:a, default_arguments:a}, get_meta_list:{arguments:, default_arguments:}, get_method_list:{arguments:, default_arguments:}, get_multiplayer:{arguments:, default_arguments:}, get_name:{arguments:, default_arguments:}, get_network_master:{arguments:, default_arguments:}, get_node:{arguments:a, default_arguments:a}, get_node_and_resource:{arguments:a, default_arguments:a}, get_node_or_null:{arguments:a, default_arguments:a}, get_owner:{arguments:, default_arguments:}, get_parent:{arguments:, default_arguments:}, get_path:{arguments:, default_arguments:}, get_path_to:{arguments:a, default_arguments:a}, get_pause_mode:{arguments:, default_arguments:}, get_physics_process_delta_time:{arguments:, default_arguments:}, get_position_in_parent:{arguments:, default_arguments:}, get_process_delta_time:{arguments:, default_arguments:}, get_process_priority:{arguments:, default_arguments:}, get_property_list:{arguments:, default_arguments:}, get_scene_instance_load_placeholder:{arguments:, default_arguments:}, get_script:{arguments:, default_arguments:}, get_signal_connection_list:{arguments:a, default_arguments:a}, get_signal_list:{arguments:, default_arguments:}, get_tree:{arguments:, default_arguments:}, get_viewport:{arguments:, default_arguments:}, has_meta:{arguments:a, default_arguments:a}, has_method:{arguments:a, default_arguments:a}, has_node:{arguments:a, default_arguments:a}, has_node_and_resource:{arguments:a, default_arguments:a}, has_signal:{arguments:a, default_arguments:a}, has_user_signal:{arguments:a, default_arguments:a}, is_a_parent_of:{arguments:a, default_arguments:a}, is_blocking_signals:{arguments:, default_arguments:}, is_class:{arguments:a, default_arguments:a}, is_connected:{arguments:a, b, c, default_arguments:a, b, c}, is_displayed_folded:{arguments:, default_arguments:}, is_greater_than:{arguments:a, default_arguments:a}, is_in_group:{arguments:a, default_arguments:a}, is_inside_tree:{arguments:, default_arguments:}, is_network_master:{arguments:, default_arguments:}, is_physics_processing:{arguments:, default_arguments:}, is_physics_processing_internal:{arguments:, default_arguments:}, is_processing:{arguments:, default_arguments:}, is_processing_input:{arguments:, default_arguments:}, is_processing_internal:{arguments:, default_arguments:}, is_processing_unhandled_input:{arguments:, default_arguments:}, is_processing_unhandled_key_input:{arguments:, default_arguments:}, is_queued_for_deletion:{arguments:, default_arguments:}, math_fight:{arguments:, default_arguments:}, move_child:{arguments:a, b, default_arguments:a, b}, multiply:{arguments:a, b, default_arguments:a, b}, notification:{arguments:a, b, default_arguments:a, b = False}, pi:{arguments:, default_arguments:}, print_stray_nodes:{arguments:, default_arguments:}, print_tree:{arguments:, default_arguments:}, print_tree_pretty:{arguments:, default_arguments:}, propagate_call:{arguments:a, b, c, default_arguments:a, b = [], c = False}, propagate_notification:{arguments:a, default_arguments:a}, property_list_changed_notify:{arguments:, default_arguments:}, queue_free:{arguments:, default_arguments:}, raise:{arguments:, default_arguments:}, remove_and_skip:{arguments:, default_arguments:}, remove_child:{arguments:a, default_arguments:a}, remove_from_group:{arguments:a, default_arguments:a}, remove_meta:{arguments:a, default_arguments:a}, replace_by:{arguments:a, b, default_arguments:a, b = False}, request_ready:{arguments:, default_arguments:}, rpc:{arguments:a, default_arguments:a}, rpc_config:{arguments:a, b, default_arguments:a, b}, rpc_id:{arguments:a, b, default_arguments:a, b}, rpc_unreliable:{arguments:a, default_arguments:a}, rpc_unreliable_id:{arguments:a, b, default_arguments:a, b}, rset:{arguments:a, b, default_arguments:a, b}, rset_config:{arguments:a, b, default_arguments:a, b}, rset_id:{arguments:a, b, c, default_arguments:a, b, c}, rset_unreliable:{arguments:a, b, default_arguments:a, b}, rset_unreliable_id:{arguments:a, b, c, default_arguments:a, b, c}, set:{arguments:a, b, default_arguments:a, b}, set_block_signals:{arguments:a, default_arguments:a}, set_custom_multiplayer:{arguments:a, default_arguments:a}, set_deferred:{arguments:a, b, default_arguments:a, b}, set_display_folded:{arguments:a, default_arguments:a}, set_filename:{arguments:a, default_arguments:a}, set_indexed:{arguments:a, b, default_arguments:a, b}, set_message_translation:{arguments:a, default_arguments:a}, set_meta:{arguments:a, b, default_arguments:a, b}, set_name:{arguments:a, default_arguments:a}, set_network_master:{arguments:a, b, default_arguments:a, b = True}, set_owner:{arguments:a, default_arguments:a}, set_pause_mode:{arguments:a, default_arguments:a}, set_physics_process:{arguments:a, default_arguments:a}, set_physics_process_internal:{arguments:a, default_arguments:a}, set_process:{arguments:a, default_arguments:a}, set_process_input:{arguments:a, default_arguments:a}, set_process_internal:{arguments:a, default_arguments:a}, set_process_priority:{arguments:a, default_arguments:a}, set_process_unhandled_input:{arguments:a, default_arguments:a}, set_process_unhandled_key_input:{arguments:a, default_arguments:a}, set_scene_instance_load_placeholder:{arguments:a, default_arguments:a}, set_script:{arguments:a, default_arguments:a}, subtract:{arguments:a, b, default_arguments:a, b}, sum:{arguments:a, default_arguments:a}, to_string:{arguments:, default_arguments:}, tr:{arguments:a, default_arguments:a}, update_configuration_warning:{arguments:, default_arguments:}}",
"success": true
} ],
"context": "When we create two of it for the same script",
"fullname": "test_When_we_create_two_of_it_for_the_same_script",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|Object| [Node:2223] is equal to |Object| [Node:2223]",
"context": "Then we get the same double back",
"expected": "|Object| [Node:2223] is equal to |Object| [Node:2223]",
"success": true
} ],
"context": "When we call the double the second time",
"fullname": "test_When_we_call_double_a_second_time_on",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Reference:2230] is instance of class: [GDScript:1564]",
"context": "Then we get that inner class back",
"expected": "[Reference:2230] is instance of class: [GDScript:1564]",
"success": true
} ],
"context": "When we double an inner class",
"fullname": "test_When_we_double_an_inner_class",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 3,
"path": "res://tests/integration/script_director.test.gd",
"source": {
"containers": [ "res://tests/integration", "res://tests" ],
"method": "",
"path": "res://tests/integration/script_director.test.gd",
"tags": [  ],
"test": ExtResource( 13 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 3
}, {
"context": "Given a Test Double",
"methods": [ {
"assertions": [ {
"actual": "|String| Jackie is equal to |String| Jackie",
"context": "Then we can double the object successfully",
"expected": "|String| Jackie is equal to |String| Jackie",
"success": true
} ],
"context": "When we pass in dependecies on double",
"fullname": "test_When_we_pass_in_deps_on_double",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "(1, 1) is builtin: Vector2",
"context": "Then we can call methods on it",
"expected": "(1, 1) is builtin: Vector2",
"success": true
} ],
"context": "When we double an inner class",
"fullname": "test_When_we_double_an_inner_class",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "method: add was called with arguments: [10, 10]",
"context": "Then we can see that it was called with those arguments",
"expected": "method: add was called with arguments: [10, 10]",
"success": true
} ],
"context": "When we pass arguments to a method call that we are spying on",
"fullname": "test_When_we_pass_arguments_to_a_method_call_that_we_are_spying_on",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|float| 6.283185 is equal to |float| 6.283185",
"context": "Then we can call the static methods of that inner double",
"expected": "|float| 6.283185 is equal to |float| 6.283185",
"success": true
} ],
"context": "When we add an doubled inner class to it",
"fullname": "test_When_we_add_a_doubled_inner_class_to_it",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 9999 is equal to |int| 9999",
"context": "Then it returns the corresponding value when the partial pattern matches",
"expected": "|int| 9999 is equal to |int| 9999",
"success": true
} ],
"context": "When we call a method that was stubbed with a partial (ie using any()) argument pattern",
"fullname": "test_When_we_call_a_method_that_was_stubbed_with_a_partial_argument_pattern",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "add was called",
"context": "Then we can see that it was called at least once",
"expected": "add was called",
"success": true
} ],
"context": "When we call a method that we are spying on",
"fullname": "test_When_we_call_a_method_that_we_are_spying_on",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 4 is equal to |int| 4",
"context": "Then we get the correct result",
"expected": "|int| 4 is equal to |int| 4",
"success": true
} ],
"context": "When we call an add(x, y) method that we haven't directed",
"fullname": "test_When_we_call_an_add_method_that_we_have_not_directed",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|null| Null == null",
"context": "Then we get the stubbed value back",
"expected": "|null| Null == null",
"success": true
} ],
"context": "When we stub a method of a doubled inner class",
"fullname": "test_When_we_stub_a_method_of_a_double_inner_class",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 99 is equal to |int| 99",
"context": "Then it affects the state of the double",
"expected": "|int| 99 is equal to |int| 99",
"success": true
} ],
"context": "When we pass a funcref as a subcall",
"fullname": "test_When_we_pass_a_funcref_as_a_subcall",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|Array| [10, 5] is equal to |Array| [10, 5]",
"context": "Then it returns a value",
"expected": "|Array| [10, 5] is equal to |Array| [10, 5]",
"success": true
} ],
"context": "When we pass an Object with a call_func function",
"fullname": "test_When_we_pass_an_object_with_callfunc_method_as_a_subcall",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 9999 is equal to |int| 9999",
"context": "Then it returns the corresponding value when the pattern matches",
"expected": "|int| 9999 is equal to |int| 9999",
"success": true
} ],
"context": "When we call a method that was stubbed with an argument pattern that includes a non-primitive object",
"fullname": "test_When_we_call_a_method_that_was_stubbed_with_an_argument_pattern_that_includes_a_non_primitive_object",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|null| Null == null",
"context": "Then we get null",
"expected": "|null| Null == null",
"success": true
} ],
"context": "When we call a method that we have dummied",
"fullname": "test_When_we_call_a_method_that_we_have_dummied",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 99 is equal to |int| 99",
"context": "Then it returns a value",
"expected": "|int| 99 is equal to |int| 99",
"success": true
} ],
"context": "When we pass a funcref as a subcall that returns",
"fullname": "test_When_we_pass_a_funcref_as_a_subcall_that_returns_a_value",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then it returns true",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we call a method that we have stubbed to return true",
"fullname": "test_When_we_call_a_method_that_we_have_stubbed_to_return_true",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|Object| [Node:2333] is equal to |Object| [Node:2333]",
"context": "Then it returns that same node",
"expected": "|Object| [Node:2333] is equal to |Object| [Node:2333]",
"success": true
} ],
"context": "When we call a method that we have stubbed to return a node",
"fullname": "test_When_we_call_a_method_that_we_have_stubbed_to_return_a_node",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|String| Jackie is equal to |String| Jackie",
"context": "Then we can double the object successfully",
"expected": "|String| Jackie is equal to |String| Jackie",
"success": true
} ],
"context": "When we pass in dependecies on direct",
"fullname": "test_When_we_pass_in_deps_on_direct",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 100 is equal to |int| 100",
"context": "Then it returns the default stubbed value when the arguments don't match any pattern",
"expected": "|int| 100 is equal to |int| 100",
"success": true
}, {
"actual": "|int| 1000 is equal to |int| 1000",
"context": "Then it returns the the corresponding value to the pattern the arguments matched",
"expected": "|int| 1000 is equal to |int| 1000",
"success": true
} ],
"context": "When we call a method that was stubbed to return different values based on argument patterns",
"fullname": "test_When_we_call_a_method_that_was_stubbed_to_return_different_values_based_on_argument_patterns",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|bool| True is equal to |bool| True",
"context": "Then we can call it",
"expected": "|bool| True is equal to |bool| True",
"success": true
} ],
"context": "When we stubbed a keyworded method by passing in the correct keyword",
"fullname": "test_When_we_stubbed_a_keyword_method_by_passing_in_the_correct_keyword",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 4 is equal to |int| 4",
"context": "Then it calls its super implementation by default",
"expected": "|int| 4 is equal to |int| 4",
"success": true
}, {
"actual": "|int| 9999 is equal to |int| 9999",
"context": "Then it does not call its super implementation when arguments patterns match a different return value",
"expected": "|int| 9999 is equal to |int| 9999",
"success": true
} ],
"context": "When we call a method that we stubbed to call its super implementation by default",
"fullname": "test_When_we_call_a_method_that_we_stubbed_to_call_its_super_implementation_by_default",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
} ],
"passed": 19,
"path": "res://tests/integration/test_double.test.gd",
"source": {
"containers": [ "res://tests/integration", "res://tests" ],
"method": "",
"path": "res://tests/integration/test_double.test.gd",
"tags": [  ],
"test": ExtResource( 14 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 19
}, {
"context": "Given a Boolean Assertion",
"methods": [ {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then it passes",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When calling asserts.is_true(true)",
"fullname": "test_when_calling_asserts_is_true",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| False == false",
"context": "Then it passes",
"expected": "|bool| False == false",
"success": true
} ],
"context": "When calling asserts.is_false(false)",
"fullname": "test_when_calling_asserts_is_false",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| True != false",
"context": "",
"expected": "|bool| True == false",
"success": false
} ],
"context": " intentional failure",
"fullname": "test_intentional_failure",
"passed": 0,
"success": false,
"time": 0.0,
"total": 1
} ],
"passed": 2,
"path": "res://tests/unit/boolean.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/boolean.test.gd",
"tags": [  ],
"test": ExtResource( 11 ),
"yield_time": 0.0
},
"success": false,
"time_taken": 0.0,
"total": 3
}, {
"context": "Given an Equality Assertion",
"methods": [ {
"assertions": [ {
"actual": "|int| 2 is equal or greater |int| 1",
"context": "Then it passes",
"expected": "|int| 2 is equal or greater |int| 1",
"success": true
} ],
"context": "When calling asserts.is_equal_or_greater_than(2, 1)",
"fullname": "test_when_calling_is_equal_or_greater_than",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 2 is greater than |int| 1",
"context": "Then it passes",
"expected": "|int| 2 is greater than |int| 1",
"success": true
} ],
"context": "When calling asserts.is_greater_than(2, 1)",
"fullname": "test_when_calling_is_greater_than",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 1 is equal to |int| 1",
"context": "Then it passes",
"expected": "|int| 1 is equal to |int| 1",
"success": true
} ],
"context": "When calling asserts.is_equal(1, 1)",
"fullname": "test_when_calling_is_equal",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 1 is less than |int| 2",
"context": "Then it passes",
"expected": "|int| 1 is less than |int| 2",
"success": true
} ],
"context": "When calling asserts.is_less_than(2, 1)",
"fullname": "test_when_calling_is_less_than",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 1 is equal or greater |int| 1",
"context": "Then it passes",
"expected": "|int| 1 is equal or greater |int| 1",
"success": true
} ],
"context": "When calling asserts.is_equal_or_greater_than(1, 1)",
"fullname": "test_when_calling_is_equal_or_greater_than_with_equal_values",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 5 is not equal to |int| 6",
"context": "Then it passes",
"expected": "|int| 5 != |int| 6",
"success": true
} ],
"context": "When callign asserts.is_not_equal(5, 6)",
"fullname": "test_when_calling_is_not_equal",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 1 is equal or less than |int| 1",
"context": "Then it passes!",
"expected": "|int| 1 is equal or less than |int| 1",
"success": true
} ],
"context": "When calling asserts.is_equal_or_less_than(1, 1)",
"fullname": "test_when_calling_is_equal_or_less_than_with_equal_values",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 7,
"path": "res://tests/unit/equality.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/equality.test.gd",
"tags": [  ],
"test": ExtResource( 8 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 7
}, {
"context": "Given A File Assertion",
"methods": [ {
"assertions": [ {
"actual": "res://somefile.gd does not exist",
"context": "Then it passes",
"expected": "res://somefile.gd does not exist",
"success": true
} ],
"context": "When calling asserts.file_does_not_exist when there is no file",
"fullname": "test_when_calling_file_does_not_exist_when_there_is_no_file",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": " does not exist",
"context": "Then it passes",
"expected": " does not exist",
"success": true
} ],
"context": "When calling asserts file does not exist when path is empty",
"fullname": "test_when_calling_file_does_not_exist_when_path_is_empty",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "res://tests/unit/file.test.gd exists",
"context": "Then it passes",
"expected": "res://tests/unit/file.test.gd exists",
"success": true
} ],
"context": "When calling asserts.file_exists when the file is this suite",
"fullname": "test_when_calling_file_exists_when_file_is_self",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 3,
"path": "res://tests/unit/file.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/file.test.gd",
"tags": [  ],
"test": ExtResource( 3 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 3
}, {
"context": "Given an Is Instance of class/type Assertion",
"methods": [ {
"assertions": [ {
"actual": "|AABB| 0, 0, 0 - 0, 0, 0 != null",
"context": "AABB is not null",
"expected": "|AABB| 0, 0, 0 - 0, 0, 0 != null",
"success": true
}, {
"actual": "0, 0, 0 - 0, 0, 0 is builtin: AABB",
"context": "Then it passes",
"expected": "0, 0, 0 - 0, 0, 0 is builtin: AABB",
"success": true
} ],
"context": "When calling asserts.is_AABB(aabb: AABB)",
"fullname": "test_when_calling_is_AABB",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|Array| [] != null",
"context": "array is not null",
"expected": "|Array| [] != null",
"success": true
}, {
"actual": "[] is builtin: Array",
"context": "Then it passes",
"expected": "[] is builtin: Array",
"success": true
} ],
"context": "When calling asserts.is_Array(array: Array)",
"fullname": "test_when_calling_is_Array",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|Transform2D| ((1, 0), (0, 1), (0, 0)) != null",
"context": "transform2D is not null",
"expected": "|Transform2D| ((1, 0), (0, 1), (0, 0)) != null",
"success": true
}, {
"actual": "((1, 0), (0, 1), (0, 0)) is builtin: Transform2D",
"context": "Then it passes",
"expected": "((1, 0), (0, 1), (0, 0)) is builtin: Transform2D",
"success": true
} ],
"context": "When calling asserts.is_Transform(transform2D: Transform2D)",
"fullname": "test_when_calling_is_Transform2D",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|Rect2| (0, 0, 0, 0) != null",
"context": "rect2 is not null",
"expected": "|Rect2| (0, 0, 0, 0) != null",
"success": true
}, {
"actual": "(0, 0, 0, 0) is builtin: Rect2",
"context": "Then it passes",
"expected": "(0, 0, 0, 0) is builtin: Rect2",
"success": true
} ],
"context": "When calling asserts.is_Rect2(rect2: Rect2)",
"fullname": "test_when_calling_is_Rect2",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|Vector3| (0, 0, 0) != null",
"context": "vec3 is not null",
"expected": "|Vector3| (0, 0, 0) != null",
"success": true
}, {
"actual": "(0, 0, 0) is builtin: Vector3",
"context": "Then it passes",
"expected": "(0, 0, 0) is builtin: Vector3",
"success": true
} ],
"context": "When calling asserts.is_Vector3(vec3: Vector3",
"fullname": "test_when_calling_is_Vector3",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|Quat| (0, 0, 0, 1) != null",
"context": "quat is not null",
"expected": "|Quat| (0, 0, 0, 1) != null",
"success": true
}, {
"actual": "(0, 0, 0, 1) is builtin: Quat",
"context": "Then it passes",
"expected": "(0, 0, 0, 1) is builtin: Quat",
"success": true
} ],
"context": "When calling asserts.is_Quat(quat: Quat)",
"fullname": "test_when_calling_is_Quat",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "{} is builtin: Dictionary",
"context": "Then it passes",
"expected": "{} is builtin: Dictionary",
"success": true
} ],
"context": "When calling asserts.is_Dictionary({})",
"fullname": "test_when_calling_is_Dictionary",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|PoolIntArray| [] != null",
"context": "ints is not null",
"expected": "|PoolIntArray| [] != null",
"success": true
}, {
"actual": "[] is builtin: PoolIntArray",
"context": "Then it passes",
"expected": "[] is builtin: PoolIntArray",
"success": true
} ],
"context": "When calling asserts.is_PoolIntArray(ints: PoolIntArray)",
"fullname": "test_when_calling_is_PoolIntArray",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|PoolByteArray| [PoolByteArray] != null",
"context": "bytes is not null",
"expected": "|PoolByteArray| [PoolByteArray] != null",
"success": true
}, {
"actual": "[PoolByteArray] is builtin: PoolByteArray",
"context": "Then it passes",
"expected": "[PoolByteArray] is builtin: PoolByteArray",
"success": true
} ],
"context": "When calling asserts.is_PoolByteArray(bytes: PoolByteArray)",
"fullname": "test_when_calling_is_PoolByteArray",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|RID| [RID] != null",
"context": "rid is not null",
"expected": "|RID| [RID] != null",
"success": true
}, {
"actual": "[RID] is builtin: RID",
"context": "Then it passes",
"expected": "[RID] is builtin: RID",
"success": true
} ],
"context": "When calling asserts.is_RID(rid: RID)",
"fullname": "test_when_calling_is_RID",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|PoolStringArray| [] != null",
"context": "strs is not null",
"expected": "|PoolStringArray| [] != null",
"success": true
}, {
"actual": "[] is builtin: PoolStringArray",
"context": "Then it passes",
"expected": "[] is builtin: PoolStringArray",
"success": true
} ],
"context": "When calling is asserts.is_PoolStringArray(strs: PoolStringArray)",
"fullname": "test_when_calling_is_PoolStringArray",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "1 is builtin: float",
"context": "Then it passes",
"expected": "1 is builtin: float",
"success": true
} ],
"context": "When calling asserts.is_float(1.0)",
"fullname": "test_when_calling_is_float",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|PoolColorArray| [PoolColorArray] != null",
"context": "colors is not null",
"expected": "|PoolColorArray| [PoolColorArray] != null",
"success": true
}, {
"actual": "[PoolColorArray] is builtin: PoolColorArray",
"context": "Then it passes",
"expected": "[PoolColorArray] is builtin: PoolColorArray",
"success": true
} ],
"context": "When calling asserts.is_PoolColorArray(colors: PoolColorArray)",
"fullname": "test_when_calling_is_PoolColorArray",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|NodePath| . != null",
"context": "@'Parent/Child' is not null",
"expected": "|NodePath| . != null",
"success": true
}, {
"actual": ". is builtin: NodePath",
"context": "Then it passes",
"expected": ". is builtin: NodePath",
"success": true
} ],
"context": "When calling asserts.is_NodePath(@'Parent/Child')",
"fullname": "test_when_calling_is_NodePath",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|PoolVector2Array| [] != null",
"context": "vec2s is not null",
"expected": "|PoolVector2Array| [] != null",
"success": true
}, {
"actual": "[] is builtin: PoolVector2Array",
"context": "Then it passes",
"expected": "[] is builtin: PoolVector2Array",
"success": true
} ],
"context": "When calling is asserts.is_PoolVector2Array(vec2s: PoolVector2Array)",
"fullname": "test_when_calling_is_PoolVector2Array",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|PoolVector3Array| [] != null",
"context": "vec3s is not null",
"expected": "|PoolVector3Array| [] != null",
"success": true
}, {
"actual": "[] is builtin: PoolVector3Array",
"context": "Then it passes",
"expected": "[] is builtin: PoolVector3Array",
"success": true
} ],
"context": "When calling is asserts.is_PoolVector3Array(vec3s: PoolVector3Array)",
"fullname": "test_when_calling_is_PoolVector3Array",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|Transform| 1, 0, 0, 0, 1, 0, 0, 0, 1 - 0, 0, 0 != null",
"context": "transform is not null",
"expected": "|Transform| 1, 0, 0, 0, 1, 0, 0, 0, 1 - 0, 0, 0 != null",
"success": true
}, {
"actual": "1, 0, 0, 0, 1, 0, 0, 0, 1 - 0, 0, 0 is builtin: Transform",
"context": "Then it passes",
"expected": "1, 0, 0, 0, 1, 0, 0, 0, 1 - 0, 0, 0 is builtin: Transform",
"success": true
} ],
"context": "When calling asserts.is_Transform(transform: Transform)",
"fullname": "test_when_calling_is_Transform",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|String|  != null",
"context": "strs is not null",
"expected": "|String|  != null",
"success": true
}, {
"actual": " is builtin: String",
"context": "Then it passes",
"expected": " is builtin: String",
"success": true
} ],
"context": "When calling asserts.is_string(strs: String)",
"fullname": "test_when_calling_is_string",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|Basis| ((1, 0, 0), (0, 1, 0), (0, 0, 1)) != null",
"context": "basis is not null",
"expected": "|Basis| ((1, 0, 0), (0, 1, 0), (0, 0, 1)) != null",
"success": true
}, {
"actual": "((1, 0, 0), (0, 1, 0), (0, 0, 1)) is builtin: Basis",
"context": "Then it passes",
"expected": "((1, 0, 0), (0, 1, 0), (0, 0, 1)) is builtin: Basis",
"success": true
} ],
"context": "When calling asserts.is_basis(basis: Basis",
"fullname": "test_when_calling_is_Basis",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|Plane| 0, 0, 0, 0 != null",
"context": "plane is not null",
"expected": "|Plane| 0, 0, 0, 0 != null",
"success": true
}, {
"actual": "0, 0, 0, 0 is builtin: Plane",
"context": "then it passes",
"expected": "0, 0, 0, 0 is builtin: Plane",
"success": true
} ],
"context": "When calling asserts.is_Plane(plane: Plane())",
"fullname": "test_when_calling_is_Plane",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|Vector2| (0, 0) != null",
"context": "vec2 is not null",
"expected": "|Vector2| (0, 0) != null",
"success": true
}, {
"actual": "(0, 0) is builtin: Vector2",
"context": "Then it passes",
"expected": "(0, 0) is builtin: Vector2",
"success": true
} ],
"context": "When calling asserts.is_Vector2(vec2)",
"fullname": "test_when_calling_is_Vector2",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|Object| [Node:2433] != null",
"context": "node is not null",
"expected": "|Object| [Node:2433] != null",
"success": true
}, {
"actual": "[Node:2433] is builtin: Object",
"context": "An instance of node is an Object",
"expected": "[Node:2433] is builtin: Object",
"success": true
} ],
"context": "When calling is asserts.object(node: Node)",
"fullname": "test_when_calling_is_object",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|PoolRealArray| [] != null",
"context": "reals is not null",
"expected": "|PoolRealArray| [] != null",
"success": true
}, {
"actual": "[] is builtin: PoolRealArray",
"context": "Then it passes",
"expected": "[] is builtin: PoolRealArray",
"success": true
} ],
"context": "When calling is asserts.is_PoolRealArray(reals: PoolRealArray)",
"fullname": "test_when_calling_is_PoolRealArray",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "True is builtin: bool",
"context": "Then it passes",
"expected": "True is builtin: bool",
"success": true
} ],
"context": "When calling asserts.is_bool(true)",
"fullname": "test_when_calling_is_bool",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "1 is builtin: int",
"context": "Then it passes",
"expected": "1 is builtin: int",
"success": true
} ],
"context": "When callign asserts.is_int(1)",
"fullname": "test_when_calling_is_int",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|Color| 0,0,0,1 != null",
"context": "color is not null",
"expected": "|Color| 0,0,0,1 != null",
"success": true
}, {
"actual": "0,0,0,1 is builtin: Color",
"context": "Then it passes",
"expected": "0,0,0,1 is builtin: Color",
"success": true
} ],
"context": "When calling asserts.is_color(color: Color)",
"fullname": "test_when_calling_is_Color",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
} ],
"passed": 26,
"path": "res://tests/unit/is_instance.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/is_instance.test.gd",
"tags": [  ],
"test": ExtResource( 6 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 26
}, {
"context": "Given an Is Not Instance of class/type Assertion",
"methods": [ {
"assertions": [ {
"actual": "Null is not builtin: Array",
"context": "Then it passes",
"expected": "Null is not builtin: Array",
"success": true
} ],
"context": "when calling asserts.is_not_Array(null)",
"fullname": "test_when_calling_is_not_Array",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Color",
"context": "Then it passes",
"expected": "Null is not builtin: Color",
"success": true
} ],
"context": "when calling asserts.is_not_Color(null)",
"fullname": "test_when_calling_is_not_Color",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: float",
"context": "Then it passes",
"expected": "Null is not builtin: float",
"success": true
} ],
"context": "when calling asserts.is_not_float(null)",
"fullname": "test_when_calling_is_not_float",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: AABB",
"context": "Then it passes",
"expected": "Null is not builtin: AABB",
"success": true
} ],
"context": "when calling asserts.is_not_AABB(null)",
"fullname": "test_when_calling_is_not_AABB",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Basis",
"context": "Then it passes",
"expected": "Null is not builtin: Basis",
"success": true
} ],
"context": "when calling asserts.is_not_Basis(null)",
"fullname": "test_when_calling_is_not_Basis",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: int",
"context": "Then it passes",
"expected": "Null is not builtin: int",
"success": true
} ],
"context": "when calling asserts.is_not_int(null)",
"fullname": "test_when_calling_is_not_int",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: bool",
"context": "Then it passes",
"expected": "Null is not builtin: bool",
"success": true
} ],
"context": "when calling asserts.is_not_bool(null)",
"fullname": "test_when_calling_is_not_bool",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Dictionary",
"context": "Then it passes",
"expected": "Null is not builtin: Dictionary",
"success": true
} ],
"context": "when calling asserts.is_not_Dictionary(null)",
"fullname": "test_when_calling_is_not_Dictionary",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: NodePath",
"context": "Then it passes",
"expected": "Null is not builtin: NodePath",
"success": true
} ],
"context": "when calling asserts.is_not_NodePath(null)",
"fullname": "test_when_calling_is_not_NodePath",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Object",
"context": "Then it passes",
"expected": "Null is not builtin: Object",
"success": true
} ],
"context": "when calling asserts.is_not_Object(null)",
"fullname": "test_when_calling_is_not_Object",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: PoolStringArray",
"context": "Then it passes",
"expected": "Null is not builtin: PoolStringArray",
"success": true
} ],
"context": "when calling asserts.is_not_PoolStringArray(null)",
"fullname": "test_when_calling_is_not_PoolStringArray",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Quat",
"context": "Then it passes",
"expected": "Null is not builtin: Quat",
"success": true
} ],
"context": "when calling asserts.is_not_Quat(null)",
"fullname": "test_when_calling_is_not_Quat",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: PoolRealArray",
"context": "Then it passes",
"expected": "Null is not builtin: PoolRealArray",
"success": true
} ],
"context": "when calling asserts.is_not_PoolRealArray(null)",
"fullname": "test_when_calling_is_not_PoolRealArray",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: RID",
"context": "Then it passes",
"expected": "Null is not builtin: RID",
"success": true
} ],
"context": "when calling asserts.is_not_RID(null)",
"fullname": "test_when_calling_is_not_RID",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: PoolIntArray",
"context": "Then it passes",
"expected": "Null is not builtin: PoolIntArray",
"success": true
} ],
"context": "when calling asserts.is_not_PoolIntArray(null)",
"fullname": "test_when_calling_is_not_PoolIntArray",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Vector2",
"context": "Then it passes",
"expected": "Null is not builtin: Vector2",
"success": true
} ],
"context": "when calling asserts.is_not_Vector2(null)",
"fullname": "test_when_calling_is_not_Vector2",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Transform",
"context": "Then it passes",
"expected": "Null is not builtin: Transform",
"success": true
} ],
"context": "when calling asserts.is_not_Transform(null)",
"fullname": "test_when_calling_is_not_Transform",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: String",
"context": "Then it passes",
"expected": "Null is not builtin: String",
"success": true
} ],
"context": "when calling asserts.is_not_String(null)",
"fullname": "test_when_calling_is_not_String",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: PoolVector2Array",
"context": "Then it passes",
"expected": "Null is not builtin: PoolVector2Array",
"success": true
} ],
"context": "when calling asserts.is_not_PoolVector2Array(null)",
"fullname": "test_when_calling_is_not_PoolVector2Array",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: PoolVector3Array",
"context": "Then it passes",
"expected": "Null is not builtin: PoolVector3Array",
"success": true
} ],
"context": "when calling asserts.is_not_PoolVector3Array(null)",
"fullname": "test_when_calling_is_not_PoolVector3Array",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Plane",
"context": "Then it passes",
"expected": "Null is not builtin: Plane",
"success": true
} ],
"context": "when calling asserts.is_not_Plane(null)",
"fullname": "test_when_calling_is_not_Plane",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Transform2D",
"context": "Then it passes",
"expected": "Null is not builtin: Transform2D",
"success": true
} ],
"context": "when calling asserts.is_not_Transform2D(null)",
"fullname": "test_when_calling_is_not_Transform2D",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: PoolColorArray",
"context": "Then it passes",
"expected": "Null is not builtin: PoolColorArray",
"success": true
} ],
"context": "when calling asserts.is_not_PoolColorArray(null)",
"fullname": "test_when_calling_is_not_PoolColorArray",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Vector3",
"context": "Then it passes",
"expected": "Null is not builtin: Vector3",
"success": true
} ],
"context": "when calling asserts.is_not_Vector3(null)",
"fullname": "test_when_calling_is_not_Vector3",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: PoolByteArray",
"context": "Then it passes",
"expected": "Null is not builtin: PoolByteArray",
"success": true
} ],
"context": "when calling asserts.is_not_PoolByteArray(null)",
"fullname": "test_when_calling_is_not_PoolByteArray",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Rect2",
"context": "Then it passes",
"expected": "Null is not builtin: Rect2",
"success": true
} ],
"context": "when calling asserts.is_not_Rect2(null)",
"fullname": "test_when_calling_is_not_Rect2",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 26,
"path": "res://tests/unit/is_not_instance.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/is_not_instance.test.gd",
"tags": [  ],
"test": ExtResource( 2 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 26
}, {
"context": "Given a Null Assertion",
"methods": [ {
"assertions": [ {
"actual": "|Object| [Node:2474] != null",
"context": "Then it passes",
"expected": "|Object| [Node:2474] != null",
"success": true
} ],
"context": "When calling Node is not null",
"fullname": "test_when_calling_node_is_not_null",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|null| Null == null",
"context": "Then it passes",
"expected": "|null| Null == null",
"success": true
} ],
"context": "When calling asserts.is_null(null)",
"fullname": "test_when_calling_null_is_null",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|Object| [Deleted Object] == null",
"context": "A Freed Node is null in Engine 3.2.2 or greater",
"expected": "|Object| [Deleted Object] == null",
"success": true
} ],
"context": "When calling freed object is null",
"fullname": "test_when_calling_freed_object_is_not_null",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 3,
"path": "res://tests/unit/null.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/null.test.gd",
"tags": [  ],
"test": ExtResource( 12 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 3
}, {
"context": "Given an Object Assertion",
"methods": [ {
"assertions": [ {
"actual": "[Node:2479] does not have meta: confusing",
"context": "Then it passes",
"expected": "[Node:2479] does not have meta: confusing",
"success": true
} ],
"context": "When calling asserts.object_has_meta with real key but null val",
"fullname": "test_when_calling_does_not_have_meta_real_key_null_value_pair",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:2479] has method: title",
"context": "Then it passes",
"expected": "[Node:2479] has method: title",
"success": true
} ],
"context": "When calling has_method('title')",
"fullname": "test_when_calling_has_method_title",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:2479] has user signal: dummy_signal",
"context": "Then it passes",
"expected": "[Node:2479] has user signal: dummy_signal",
"success": true
} ],
"context": "When calling obj_has_user_signal after adding a signal",
"fullname": "test_when_calling_has_user_signal_after_adding_a_signal",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:2479] does not have user signal: false_signal",
"context": "Then it passes",
"expected": "[Node:2479] does not have user signal: false_signal",
"success": true
} ],
"context": "When calling obj_does_not_have_user_signal with fake signal",
"fullname": "test_when_calling_does_not_have_user_signal",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is freed from memory",
"context": "Then it passes",
"expected": "Null is freed from memory",
"success": true
} ],
"context": "When calling asserts.is_freed(freed_object",
"fullname": "test_when_calling_freed_object_is_freed",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:2479] has meta: dummy",
"context": "Then it passes",
"expected": "[Node:2479] has meta: dummy",
"success": true
}, {
"actual": "[Node:2479] has meta: dummy",
"context": "Then it passes",
"expected": "[Node:2479] has meta: dummy",
"success": true
} ],
"context": "When calling asserts.object_has_meta() after adding metadata",
"fullname": "test_when_calling_has_meta_after_adding_metadata",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "[Node:2490] is not freed",
"context": "Then it passes",
"expected": "[Node:2490] is not freed",
"success": true
} ],
"context": "When calling asserts.is_not_freed(unfreed_object)",
"fullname": "test_when_calling_unfreed_object_is_not_freed",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:2479] does not have meta: bad_meta",
"context": "Then it passes",
"expected": "[Node:2479] does not have meta: bad_meta",
"success": true
} ],
"context": "When calling asserts.object_does_not_have_meta()",
"fullname": "test_when_calling_does_not_have_meta",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:2493] is queued for deletion",
"context": "Then it passes",
"expected": "[Node:2493] is queued for deletion",
"success": true
} ],
"context": "When calling asserts.object_is_queued for deletion after calling queue_free",
"fullname": "test_when_calling_obj_is_queued_for_deletion_after_calling_queue_free",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:2495] is blocking signals",
"context": "Then it passes",
"expected": "[Node:2495] is blocking signals",
"success": true
} ],
"context": "When calling is blocking signals while blocking signals",
"fullname": "test_is_blocking_signals",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:2497] is not blocking signals",
"context": "Then it passes",
"expected": "[Node:2497] is not blocking signals",
"success": true
} ],
"context": "When calling is not blocking signals while not blocking signals",
"fullname": "test_is_not_blocking_signals",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:2499] is not queued for deletion",
"context": "Then it passes",
"expected": "[Node:2499] is not queued for deletion",
"success": true
} ],
"context": "When calling asserts.object_is_not_for_queued_deletion after not calling queue free()",
"fullname": "test_when_calling_obj_is_not_for_queued_deletion_after_not_calling_queue_free",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:2479].builtin_dummy is connected to [Node:2479].title",
"context": "Then it passes",
"expected": "[Node:2479].builtin_dummy is connected to [Node:2479].title",
"success": true
} ],
"context": "When calling asserts object is connected with a valid connection",
"fullname": "test_when_calling_obj_is_connected_with_a_real_connection",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:2479].builtin_dummy is not connected to [Node:2479].title",
"context": "Then it passes",
"expected": "[Node:2479].builtin_dummy is not connected to [Node:2479].title",
"success": true
} ],
"context": "When calling asserts object is not connected with an invalid connection",
"fullname": "test_when_calling_obj_is_not_connected_with_an_invalid_connection",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:2479] does not have user signal: builtin_dummy",
"context": "Then it passes",
"expected": "[Node:2479] does not have user signal: builtin_dummy",
"success": true
} ],
"context": "When calling does not have user signal with class signal",
"fullname": "test_when_calling_does_not_have_user_signal_with_class_signal_constant",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 15,
"path": "res://tests/unit/object.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/object.test.gd",
"tags": [  ],
"test": ExtResource( 7 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 15
}, {
"context": "Given the Addition Operator",
"methods": [ {
"assertions": [ {
"actual": "|int| 4 is equal to |int| 4",
"context": "",
"expected": "|int| 4 is equal to |int| 4",
"success": true
} ],
"context": "When we add 2 to 2 we get 4",
"fullname": "test_add",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 8 is equal to |int| 8",
"context": "",
"expected": "|int| 8 is equal to |int| 8",
"success": true
} ],
"context": "When we add 5 to 3 we get 8",
"fullname": "test_add",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 13 is equal to |int| 13",
"context": "",
"expected": "|int| 13 is equal to |int| 13",
"success": true
} ],
"context": "When we add 7 to 6 we get 13",
"fullname": "test_add",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 0 is equal to |int| 0",
"context": "",
"expected": "|int| 0 is equal to |int| 0",
"success": true
} ],
"context": "When we subtract 2 from 2 we get 0",
"fullname": "test_subtract",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 2 is equal to |int| 2",
"context": "",
"expected": "|int| 2 is equal to |int| 2",
"success": true
} ],
"context": "When we subtract 5 from 3 we get 2",
"fullname": "test_subtract",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 1 is equal to |int| 1",
"context": "",
"expected": "|int| 1 is equal to |int| 1",
"success": true
} ],
"context": "When we subtract 7 from 6 we get 1",
"fullname": "test_subtract",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 6,
"path": "res://tests/unit/parameters.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/parameters.test.gd",
"tags": [  ],
"test": ExtResource( 16 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 6
}, {
"context": "Given A Range Assertion",
"methods": [ {
"assertions": [ {
"actual": "10 is not in range(0, 10)",
"context": "Then it passes",
"expected": "10 is not in range(0, 10)",
"success": true
} ],
"context": "When calling is (10) not in range (in range(0, 10)",
"fullname": "test_when_calling_is_not_in_range",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "0 is in range(0, 10)",
"context": "Then it passes",
"expected": "0 is in range(0, 10)",
"success": true
} ],
"context": "When calling is (0) in range(0, 10)",
"fullname": "test_when_calling_is_in_range",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 2,
"path": "res://tests/unit/range.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/range.test.gd",
"tags": [  ],
"test": ExtResource( 15 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 2
}, {
"context": "Given a String Assertion",
"methods": [ {
"assertions": [ {
"actual": "impsum does not begin with bleh lorem",
"context": "Then it passes",
"expected": "impsum does not begin with bleh lorem",
"success": true
} ],
"context": "When calling asserts.string_does_not_begin_with('lorem', 'impsum')",
"fullname": "test_when_calling_string_does_not_begin_with",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "lorem impsum begins with lorem",
"context": "Then it passes",
"expected": "lorem impsum begins with lorem",
"success": true
} ],
"context": "When calling asserts.string_begins_with('lorem', 'lorem impsum')",
"fullname": "test_when_calling_string_begins_with",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "lorem impsum ends with impsum",
"context": "Then it passes",
"expected": "lorem impsum ends with impsum",
"success": true
} ],
"context": "When calling asserts.string_ends_with('impsum', 'lorem impsum')",
"fullname": "test_when_calling_string_ends_with",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "impsum does not contain beem im",
"context": "Then it passes",
"expected": "impsum does not contain beem im",
"success": true
} ],
"context": "When calling asserts.string_does_not_contain('em im', 'impsum')",
"fullname": "test_when_calling_string_does_not_contain",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "lorem impsum contains em im",
"context": "Then it passes",
"expected": "lorem impsum contains em im",
"success": true
} ],
"context": "When calling asserts.string_contains('em im', 'lorem impsum')",
"fullname": "test_when_calling_string_contains",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "impsum does not end with lorem",
"context": "Then it passes",
"expected": "impsum does not end with lorem",
"success": true
} ],
"context": "When calling asserts.string_does_not_end_with('lorem', 'impsum')",
"fullname": "test_when_calling_string_does_not_end_with",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 6,
"path": "res://tests/unit/string.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/string.test.gd",
"tags": [  ],
"test": ExtResource( 9 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 6
}, {
"context": "Dummy Passing Test",
"methods": [ {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Passing!",
"expected": "|bool| True == true",
"success": true
} ],
"context": "This method passes",
"fullname": "test_this_method_passes",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 1,
"path": "res://tests/unit/suite.test.gd.DummyOne",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/suite.test.gd.DummyOne",
"tags": [  ],
"test": SubResource( 19 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 1
}, {
"context": "Dummy Test 2",
"methods": [ {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Passing!",
"expected": "|bool| True == true",
"success": true
} ],
"context": "This method passes",
"fullname": "test_this_method_passes",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 1,
"path": "res://tests/unit/suite.test.gd.DummyTwo",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/suite.test.gd.DummyTwo",
"tags": [  ],
"test": SubResource( 20 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 1
}, {
"context": "Given a Test Script",
"methods": [ {
"assertions": [ {
"actual": "|int| 10 is greater than |int| 1",
"context": "We get an array of multiple values back",
"expected": "|int| 10 is greater than |int| 1",
"success": true
}, {
"actual": "|int| 0 is not equal to |int| 9",
"context": "With different values",
"expected": "|int| 0 != |int| 9",
"success": true
}, {
"actual": "|int| 10 is greater than |int| 1",
"context": "And we can track multiple properties",
"expected": "|int| 10 is greater than |int| 1",
"success": true
} ],
"context": "When we record properties",
"fullname": "test_we_can_record_properties",
"passed": 3,
"success": true,
"time": 0.0,
"total": 3
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "if the test didn't break this works",
"expected": "|bool| True == true",
"success": true
} ],
"context": " we can omit describe",
"fullname": "test_we_can_omit_describe",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|int| 2 is equal to |int| 2",
"context": "",
"expected": "|int| 2 is equal to |int| 2",
"success": true
} ],
"context": " when we omit context we can see expected and got under method",
"fullname": "test_when_we_omit_context_we_can_see_expected_and_got_under_method",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
} ],
"passed": 3,
"path": "res://tests/unit/test.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/test.test.gd",
"tags": [  ],
"test": ExtResource( 19 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 3
}, {
"context": "Given a Signal Watcher",
"methods": [ {
"assertions": [ {
"actual": "signal: multiple was emitted from [Node:2546] 2",
"context": "Then we can track how many times we emitted it",
"expected": "signal: multiple was emitted from [Node:2546] 2",
"success": true
} ],
"context": "When we watch and signal and emit it multiple times",
"fullname": "test_When_we_watch_a_signal_and_emit_it_multiple_times",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Signal: example was not emitted from [Node:2546]",
"context": "Then it does not capture the non-emitted signal",
"expected": "Signal: example was not emitted from [Node:2546]",
"success": true
} ],
"context": "When we watch and do not emit a signal",
"fullname": "test_When_we_watch_and_do_not_emit_a_signal",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Signal: example was emitted from [Node:2546] with arguments: [1, 20, 5]",
"context": "Then it captures any arguments that where passed when the signal was emitted",
"expected": "Signal: example was emitted from [Node:2546] with arguments: [1, 20, 5]",
"success": true
} ],
"context": "When we watch a signal from an object with no bound variables",
"fullname": "test_When_we_watch_a_signal_from_an_object_with_no_bound_variables",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "signal: example was emitted from [Node:2546]",
"context": "Then it captures the emitted signal",
"expected": "signal: example was emitted from [Node:2546]",
"success": true
} ],
"context": "When we watch and emit a signal",
"fullname": "test_When_we_watch_and_emit_a_signal",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 4,
"path": "res://tests/unit/watcher.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/watcher.test.gd",
"tags": [  ],
"test": ExtResource( 17 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 4
}, {
"context": "Given a Yield",
"methods": [ {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then we set var a to true",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then we set var b to true",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we yield in start twice",
"fullname": "test_When_we_yield_in_start",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then we set var c to true",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then we set var d to true",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we yield in pre thrice",
"fullname": "test_When_we_yield_in_pre",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "[100, Null, Null, Null, Null, Null] is builtin: Array",
"context": "Then we get an array",
"expected": "[100, Null, Null, Null, Null, Null] is builtin: Array",
"success": true
}, {
"actual": "|int| 6 is equal to |int| 6",
"context": "Of size 6",
"expected": "|int| 6 is equal to |int| 6",
"success": true
}, {
"actual": "|int| 100 is equal to |int| 100",
"context": "Where element 0 is 100",
"expected": "|int| 100 is equal to |int| 100",
"success": true
} ],
"context": "When yield(self.yield_value()) returns",
"fullname": "test_When_we_yield_we_get_the_return_value",
"passed": 3,
"success": true,
"time": 0.0,
"total": 3
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then yielder is unpaused",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "The timeout signal of the yielder is connected",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we call until_timeout (with 1.0)",
"fullname": "test_When_we_call_until_timeout",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then the yielder is unpaused",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then the timeout signal of the yielder is connected",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then our signal is connected to the yielder",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we call until signal",
"fullname": "test_When_we_call_until_signal",
"passed": 3,
"success": true,
"time": 0.0,
"total": 3
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then yielder is not active",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When asserting against a test",
"fullname": "test_Yielder_is_not_active_when_asserting",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then we set var e to true",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then we set var f to true",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we yield twice in execute",
"fullname": "test_When_we_yield_in_execute",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then the timeout signal is disconnected",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then the signal-signal is disconnected",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When it is finished",
"fullname": "test_When_yielder_is_finished_signals_are_disconnected",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then the yielder is paused",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When a signal being yielded on is emitted",
"fullname": "test_When_a_signal_being_yielded_on_is_emitted_the_yielder_is_stopped",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then the yielder is paused",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "The timeout signal of the yielder is not connected",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When the yielder times out on until_timeout(0.1)",
"fullname": "test_When_the_yielder_times_out",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then the yielder is paused",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then the timeout signal of the yielder is disconnected",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then our signal to the yielder is disconnected",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When the yielder heres our signal",
"fullname": "test_When_the_yielder_hears_our_signal",
"passed": 3,
"success": true,
"time": 0.0,
"total": 3
} ],
"passed": 11,
"path": "res://tests/unit/yield.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/yield.test.gd",
"tags": [  ],
"test": ExtResource( 18 ),
"yield_time": 1.9
},
"success": true,
"time_taken": 0.0,
"total": 11
}, {
"context": "Given a Boolean Assertion",
"methods": [ {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then it passes",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When calling asserts.is_true(true)",
"fullname": "test_when_calling_asserts_is_true",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| False == false",
"context": "Then it passes",
"expected": "|bool| False == false",
"success": true
} ],
"context": "When calling asserts.is_false(false)",
"fullname": "test_when_calling_asserts_is_false",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| True != false",
"context": "",
"expected": "|bool| True == false",
"success": false
} ],
"context": " intentional failure",
"fullname": "test_intentional_failure",
"passed": 0,
"success": false,
"time": 0.0,
"total": 1
} ],
"passed": 2,
"path": "res://tests/integration/boolean.test.gd",
"source": {
"containers": [ "res://tests/integration", "res://tests" ],
"method": "",
"path": "res://tests/integration/boolean.test.gd",
"tags": [  ],
"test": ExtResource( 20 ),
"yield_time": 0.0
},
"success": false,
"time_taken": 0.0,
"total": 3
}, {
"context": "Default Args",
"methods": [ {
"assertions": [ {
"actual": "|bool| True == true",
"context": "If this method can be reached then we have doubled a script with default argument(s) properly!",
"expected": "|bool| True == true",
"success": true
} ],
"context": " default arguments of interpolate property",
"fullname": "test_default_arguments_of_interpolate_property",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 1,
"path": "res://tests/integration/default_args.test.gd",
"source": {
"containers": [ "res://tests/integration", "res://tests" ],
"method": "",
"path": "res://tests/integration/default_args.test.gd",
"tags": [  ],
"test": ExtResource( 10 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 1
}, {
"context": "Given is_on_floor",
"methods": [ {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then it can be stubbed",
"expected": "|bool| True == true",
"success": true
} ],
"context": "From a user-defined script",
"fullname": "test_stubbing_is_on_floor_method_from_user_defined_class",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then it can be stubbed",
"expected": "|bool| True == true",
"success": true
} ],
"context": "From a child node of a scene without scripts",
"fullname": "test_stubbing_is_on_floor_as_child_node_with_no_script",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then it can be stubbed",
"expected": "|bool| True == true",
"success": true
} ],
"context": "From a built-in KinematicBody2D2",
"fullname": "test_stubbing_is_on_floor_method_from_builtin_class2",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 3,
"path": "res://tests/integration/on_floor.test.gd",
"source": {
"containers": [ "res://tests/integration", "res://tests" ],
"method": "",
"path": "res://tests/integration/on_floor.test.gd",
"tags": [  ],
"test": ExtResource( 5 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 3
}, {
"context": "Given a Scene Director",
"methods": [ {
"assertions": [ {
"actual": "|NodePath| A is equal to |NodePath| A",
"context": "We have the correct NodePath Set",
"expected": "|NodePath| A is equal to |NodePath| A",
"success": true
} ],
"context": "When we add it to the tree it runs",
"fullname": "test_When_we_add_it_to_the_tree_it_runs",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 9999 is equal to |int| 9999",
"context": "Then we get the stubbed return value",
"expected": "|int| 9999 is equal to |int| 9999",
"success": true
} ],
"context": "When we call a method from the root node that we stubbed",
"fullname": "test_When_we_call_a_method_from_the_root_node_that_we_stubbed",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 999 is equal to |int| 999",
"context": "Then we get the stubbed return value",
"expected": "|int| 999 is equal to |int| 999",
"success": true
} ],
"context": "When we call a method from a child node that we stubbed",
"fullname": "test_When_we_call_a_method_from_a_child_node_that_we_stubbed",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 99 is equal to |int| 99",
"context": "Then we get the stubbed return value",
"expected": "|int| 99 is equal to |int| 99",
"success": true
} ],
"context": "When we call a method from a grandchild node that we stubbed",
"fullname": "test_When_we_call_a_method_from_a_grandchild_node_that_we_stubbed",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|Dictionary| {.:[Reference:2812], A:[Reference:2813], A/B:[Reference:2815], C:[Reference:2814], C/D:[Reference:2816]} is not equal to |Dictionary| {.:[Reference:2826], A:[Reference:2827], A/B:[Reference:2829], C:[Reference:2828], C/D:[Reference:2830]}",
"context": "Then they do not share resources",
"expected": "|Dictionary| {.:[Reference:2812], A:[Reference:2813], A/B:[Reference:2815], C:[Reference:2814], C/D:[Reference:2816]} != |Dictionary| {.:[Reference:2826], A:[Reference:2827], A/B:[Reference:2829], C:[Reference:2828], C/D:[Reference:2830]}",
"success": true
} ],
"context": "When we create two of it for the same scene",
"fullname": "test_When_we_create_two_of_it_for_the_same_scene",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 5,
"path": "res://tests/integration/scene_director.test.gd",
"source": {
"containers": [ "res://tests/integration", "res://tests" ],
"method": "",
"path": "res://tests/integration/scene_director.test.gd",
"tags": [  ],
"test": ExtResource( 4 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 5
}, {
"context": "Given a Script Director",
"methods": [ {
"assertions": [ {
"actual": "|Dictionary| {_enter_tree:{arguments:, default_arguments:}, _exit_tree:{arguments:, default_arguments:}, _get:{arguments:a, default_arguments:a}, _get_configuration_warning:{arguments:, default_arguments:}, _get_editor_description:{arguments:, default_arguments:}, _get_import_path:{arguments:, default_arguments:}, _get_property_list:{arguments:, default_arguments:}, _init:{arguments:, default_arguments:}, _input:{arguments:a, default_arguments:a}, _notification:{arguments:a, default_arguments:a}, _physics_process:{arguments:a, default_arguments:a}, _process:{arguments:a, default_arguments:a}, _ready:{arguments:, default_arguments:}, _set:{arguments:a, b, default_arguments:a, b}, _set_editor_description:{arguments:a, default_arguments:a}, _set_import_path:{arguments:a, default_arguments:a}, _to_string:{arguments:, default_arguments:}, _unhandled_input:{arguments:a, default_arguments:a}, _unhandled_key_input:{arguments:a, default_arguments:a}, add:{arguments:a, b, default_arguments:a, b}, add_child:{arguments:a, b, default_arguments:a, b = False}, add_child_below_node:{arguments:a, b, c, default_arguments:a, b, c = False}, add_to_group:{arguments:a, b, default_arguments:a, b = False}, add_user_signal:{arguments:a, b, default_arguments:a, b = []}, call:{arguments:a, default_arguments:a}, call_deferred:{arguments:a, default_arguments:a}, callv:{arguments:a, b, default_arguments:a, b}, can_process:{arguments:, default_arguments:}, can_translate_messages:{arguments:, default_arguments:}, connect:{arguments:a, b, c, d, e, default_arguments:a, b, c, d = [], e = 0}, disconnect:{arguments:a, b, c, default_arguments:a, b, c}, divide:{arguments:a, b, default_arguments:a, b}, duplicate:{arguments:a, default_arguments:a = 15}, emit_signal:{arguments:a, default_arguments:a}, find_node:{arguments:a, b, c, default_arguments:a, b = True, c = True}, find_parent:{arguments:a, default_arguments:a}, free:{arguments:, default_arguments:}, get:{arguments:a, default_arguments:a}, get_child:{arguments:a, default_arguments:a}, get_child_count:{arguments:, default_arguments:}, get_children:{arguments:, default_arguments:}, get_class:{arguments:, default_arguments:}, get_custom_multiplayer:{arguments:, default_arguments:}, get_filename:{arguments:, default_arguments:}, get_groups:{arguments:, default_arguments:}, get_incoming_connections:{arguments:, default_arguments:}, get_index:{arguments:, default_arguments:}, get_indexed:{arguments:a, default_arguments:a}, get_instance_id:{arguments:, default_arguments:}, get_meta:{arguments:a, default_arguments:a}, get_meta_list:{arguments:, default_arguments:}, get_method_list:{arguments:, default_arguments:}, get_multiplayer:{arguments:, default_arguments:}, get_name:{arguments:, default_arguments:}, get_network_master:{arguments:, default_arguments:}, get_node:{arguments:a, default_arguments:a}, get_node_and_resource:{arguments:a, default_arguments:a}, get_node_or_null:{arguments:a, default_arguments:a}, get_owner:{arguments:, default_arguments:}, get_parent:{arguments:, default_arguments:}, get_path:{arguments:, default_arguments:}, get_path_to:{arguments:a, default_arguments:a}, get_pause_mode:{arguments:, default_arguments:}, get_physics_process_delta_time:{arguments:, default_arguments:}, get_position_in_parent:{arguments:, default_arguments:}, get_process_delta_time:{arguments:, default_arguments:}, get_process_priority:{arguments:, default_arguments:}, get_property_list:{arguments:, default_arguments:}, get_scene_instance_load_placeholder:{arguments:, default_arguments:}, get_script:{arguments:, default_arguments:}, get_signal_connection_list:{arguments:a, default_arguments:a}, get_signal_list:{arguments:, default_arguments:}, get_tree:{arguments:, default_arguments:}, get_viewport:{arguments:, default_arguments:}, has_meta:{arguments:a, default_arguments:a}, has_method:{arguments:a, default_arguments:a}, has_node:{arguments:a, default_arguments:a}, has_node_and_resource:{arguments:a, default_arguments:a}, has_signal:{arguments:a, default_arguments:a}, has_user_signal:{arguments:a, default_arguments:a}, is_a_parent_of:{arguments:a, default_arguments:a}, is_blocking_signals:{arguments:, default_arguments:}, is_class:{arguments:a, default_arguments:a}, is_connected:{arguments:a, b, c, default_arguments:a, b, c}, is_displayed_folded:{arguments:, default_arguments:}, is_greater_than:{arguments:a, default_arguments:a}, is_in_group:{arguments:a, default_arguments:a}, is_inside_tree:{arguments:, default_arguments:}, is_network_master:{arguments:, default_arguments:}, is_physics_processing:{arguments:, default_arguments:}, is_physics_processing_internal:{arguments:, default_arguments:}, is_processing:{arguments:, default_arguments:}, is_processing_input:{arguments:, default_arguments:}, is_processing_internal:{arguments:, default_arguments:}, is_processing_unhandled_input:{arguments:, default_arguments:}, is_processing_unhandled_key_input:{arguments:, default_arguments:}, is_queued_for_deletion:{arguments:, default_arguments:}, math_fight:{arguments:, default_arguments:}, move_child:{arguments:a, b, default_arguments:a, b}, multiply:{arguments:a, b, default_arguments:a, b}, notification:{arguments:a, b, default_arguments:a, b = False}, pi:{arguments:, default_arguments:}, print_stray_nodes:{arguments:, default_arguments:}, print_tree:{arguments:, default_arguments:}, print_tree_pretty:{arguments:, default_arguments:}, propagate_call:{arguments:a, b, c, default_arguments:a, b = [], c = False}, propagate_notification:{arguments:a, default_arguments:a}, property_list_changed_notify:{arguments:, default_arguments:}, queue_free:{arguments:, default_arguments:}, raise:{arguments:, default_arguments:}, remove_and_skip:{arguments:, default_arguments:}, remove_child:{arguments:a, default_arguments:a}, remove_from_group:{arguments:a, default_arguments:a}, remove_meta:{arguments:a, default_arguments:a}, replace_by:{arguments:a, b, default_arguments:a, b = False}, request_ready:{arguments:, default_arguments:}, rpc:{arguments:a, default_arguments:a}, rpc_config:{arguments:a, b, default_arguments:a, b}, rpc_id:{arguments:a, b, default_arguments:a, b}, rpc_unreliable:{arguments:a, default_arguments:a}, rpc_unreliable_id:{arguments:a, b, default_arguments:a, b}, rset:{arguments:a, b, default_arguments:a, b}, rset_config:{arguments:a, b, default_arguments:a, b}, rset_id:{arguments:a, b, c, default_arguments:a, b, c}, rset_unreliable:{arguments:a, b, default_arguments:a, b}, rset_unreliable_id:{arguments:a, b, c, default_arguments:a, b, c}, set:{arguments:a, b, default_arguments:a, b}, set_block_signals:{arguments:a, default_arguments:a}, set_custom_multiplayer:{arguments:a, default_arguments:a}, set_deferred:{arguments:a, b, default_arguments:a, b}, set_display_folded:{arguments:a, default_arguments:a}, set_filename:{arguments:a, default_arguments:a}, set_indexed:{arguments:a, b, default_arguments:a, b}, set_message_translation:{arguments:a, default_arguments:a}, set_meta:{arguments:a, b, default_arguments:a, b}, set_name:{arguments:a, default_arguments:a}, set_network_master:{arguments:a, b, default_arguments:a, b = True}, set_owner:{arguments:a, default_arguments:a}, set_pause_mode:{arguments:a, default_arguments:a}, set_physics_process:{arguments:a, default_arguments:a}, set_physics_process_internal:{arguments:a, default_arguments:a}, set_process:{arguments:a, default_arguments:a}, set_process_input:{arguments:a, default_arguments:a}, set_process_internal:{arguments:a, default_arguments:a}, set_process_priority:{arguments:a, default_arguments:a}, set_process_unhandled_input:{arguments:a, default_arguments:a}, set_process_unhandled_key_input:{arguments:a, default_arguments:a}, set_scene_instance_load_placeholder:{arguments:a, default_arguments:a}, set_script:{arguments:a, default_arguments:a}, subtract:{arguments:a, b, default_arguments:a, b}, sum:{arguments:a, default_arguments:a}, to_string:{arguments:, default_arguments:}, tr:{arguments:a, default_arguments:a}, update_configuration_warning:{arguments:, default_arguments:}} is not equal to |Dictionary| {_enter_tree:{arguments:, default_arguments:}, _exit_tree:{arguments:, default_arguments:}, _get:{arguments:a, default_arguments:a}, _get_configuration_warning:{arguments:, default_arguments:}, _get_editor_description:{arguments:, default_arguments:}, _get_import_path:{arguments:, default_arguments:}, _get_property_list:{arguments:, default_arguments:}, _init:{arguments:, default_arguments:}, _input:{arguments:a, default_arguments:a}, _notification:{arguments:a, default_arguments:a}, _physics_process:{arguments:a, default_arguments:a}, _process:{arguments:a, default_arguments:a}, _ready:{arguments:, default_arguments:}, _set:{arguments:a, b, default_arguments:a, b}, _set_editor_description:{arguments:a, default_arguments:a}, _set_import_path:{arguments:a, default_arguments:a}, _to_string:{arguments:, default_arguments:}, _unhandled_input:{arguments:a, default_arguments:a}, _unhandled_key_input:{arguments:a, default_arguments:a}, add:{arguments:a, b, default_arguments:a, b}, add_child:{arguments:a, b, default_arguments:a, b = False}, add_child_below_node:{arguments:a, b, c, default_arguments:a, b, c = False}, add_to_group:{arguments:a, b, default_arguments:a, b = False}, add_user_signal:{arguments:a, b, default_arguments:a, b = []}, call:{arguments:a, default_arguments:a}, call_deferred:{arguments:a, default_arguments:a}, callv:{arguments:a, b, default_arguments:a, b}, can_process:{arguments:, default_arguments:}, can_translate_messages:{arguments:, default_arguments:}, connect:{arguments:a, b, c, d, e, default_arguments:a, b, c, d = [], e = 0}, disconnect:{arguments:a, b, c, default_arguments:a, b, c}, divide:{arguments:a, b, default_arguments:a, b}, duplicate:{arguments:a, default_arguments:a = 15}, emit_signal:{arguments:a, default_arguments:a}, find_node:{arguments:a, b, c, default_arguments:a, b = True, c = True}, find_parent:{arguments:a, default_arguments:a}, free:{arguments:, default_arguments:}, get:{arguments:a, default_arguments:a}, get_child:{arguments:a, default_arguments:a}, get_child_count:{arguments:, default_arguments:}, get_children:{arguments:, default_arguments:}, get_class:{arguments:, default_arguments:}, get_custom_multiplayer:{arguments:, default_arguments:}, get_filename:{arguments:, default_arguments:}, get_groups:{arguments:, default_arguments:}, get_incoming_connections:{arguments:, default_arguments:}, get_index:{arguments:, default_arguments:}, get_indexed:{arguments:a, default_arguments:a}, get_instance_id:{arguments:, default_arguments:}, get_meta:{arguments:a, default_arguments:a}, get_meta_list:{arguments:, default_arguments:}, get_method_list:{arguments:, default_arguments:}, get_multiplayer:{arguments:, default_arguments:}, get_name:{arguments:, default_arguments:}, get_network_master:{arguments:, default_arguments:}, get_node:{arguments:a, default_arguments:a}, get_node_and_resource:{arguments:a, default_arguments:a}, get_node_or_null:{arguments:a, default_arguments:a}, get_owner:{arguments:, default_arguments:}, get_parent:{arguments:, default_arguments:}, get_path:{arguments:, default_arguments:}, get_path_to:{arguments:a, default_arguments:a}, get_pause_mode:{arguments:, default_arguments:}, get_physics_process_delta_time:{arguments:, default_arguments:}, get_position_in_parent:{arguments:, default_arguments:}, get_process_delta_time:{arguments:, default_arguments:}, get_process_priority:{arguments:, default_arguments:}, get_property_list:{arguments:, default_arguments:}, get_scene_instance_load_placeholder:{arguments:, default_arguments:}, get_script:{arguments:, default_arguments:}, get_signal_connection_list:{arguments:a, default_arguments:a}, get_signal_list:{arguments:, default_arguments:}, get_tree:{arguments:, default_arguments:}, get_viewport:{arguments:, default_arguments:}, has_meta:{arguments:a, default_arguments:a}, has_method:{arguments:a, default_arguments:a}, has_node:{arguments:a, default_arguments:a}, has_node_and_resource:{arguments:a, default_arguments:a}, has_signal:{arguments:a, default_arguments:a}, has_user_signal:{arguments:a, default_arguments:a}, is_a_parent_of:{arguments:a, default_arguments:a}, is_blocking_signals:{arguments:, default_arguments:}, is_class:{arguments:a, default_arguments:a}, is_connected:{arguments:a, b, c, default_arguments:a, b, c}, is_displayed_folded:{arguments:, default_arguments:}, is_greater_than:{arguments:a, default_arguments:a}, is_in_group:{arguments:a, default_arguments:a}, is_inside_tree:{arguments:, default_arguments:}, is_network_master:{arguments:, default_arguments:}, is_physics_processing:{arguments:, default_arguments:}, is_physics_processing_internal:{arguments:, default_arguments:}, is_processing:{arguments:, default_arguments:}, is_processing_input:{arguments:, default_arguments:}, is_processing_internal:{arguments:, default_arguments:}, is_processing_unhandled_input:{arguments:, default_arguments:}, is_processing_unhandled_key_input:{arguments:, default_arguments:}, is_queued_for_deletion:{arguments:, default_arguments:}, math_fight:{arguments:, default_arguments:}, move_child:{arguments:a, b, default_arguments:a, b}, multiply:{arguments:a, b, default_arguments:a, b}, notification:{arguments:a, b, default_arguments:a, b = False}, pi:{arguments:, default_arguments:}, print_stray_nodes:{arguments:, default_arguments:}, print_tree:{arguments:, default_arguments:}, print_tree_pretty:{arguments:, default_arguments:}, propagate_call:{arguments:a, b, c, default_arguments:a, b = [], c = False}, propagate_notification:{arguments:a, default_arguments:a}, property_list_changed_notify:{arguments:, default_arguments:}, queue_free:{arguments:, default_arguments:}, raise:{arguments:, default_arguments:}, remove_and_skip:{arguments:, default_arguments:}, remove_child:{arguments:a, default_arguments:a}, remove_from_group:{arguments:a, default_arguments:a}, remove_meta:{arguments:a, default_arguments:a}, replace_by:{arguments:a, b, default_arguments:a, b = False}, request_ready:{arguments:, default_arguments:}, rpc:{arguments:a, default_arguments:a}, rpc_config:{arguments:a, b, default_arguments:a, b}, rpc_id:{arguments:a, b, default_arguments:a, b}, rpc_unreliable:{arguments:a, default_arguments:a}, rpc_unreliable_id:{arguments:a, b, default_arguments:a, b}, rset:{arguments:a, b, default_arguments:a, b}, rset_config:{arguments:a, b, default_arguments:a, b}, rset_id:{arguments:a, b, c, default_arguments:a, b, c}, rset_unreliable:{arguments:a, b, default_arguments:a, b}, rset_unreliable_id:{arguments:a, b, c, default_arguments:a, b, c}, set:{arguments:a, b, default_arguments:a, b}, set_block_signals:{arguments:a, default_arguments:a}, set_custom_multiplayer:{arguments:a, default_arguments:a}, set_deferred:{arguments:a, b, default_arguments:a, b}, set_display_folded:{arguments:a, default_arguments:a}, set_filename:{arguments:a, default_arguments:a}, set_indexed:{arguments:a, b, default_arguments:a, b}, set_message_translation:{arguments:a, default_arguments:a}, set_meta:{arguments:a, b, default_arguments:a, b}, set_name:{arguments:a, default_arguments:a}, set_network_master:{arguments:a, b, default_arguments:a, b = True}, set_owner:{arguments:a, default_arguments:a}, set_pause_mode:{arguments:a, default_arguments:a}, set_physics_process:{arguments:a, default_arguments:a}, set_physics_process_internal:{arguments:a, default_arguments:a}, set_process:{arguments:a, default_arguments:a}, set_process_input:{arguments:a, default_arguments:a}, set_process_internal:{arguments:a, default_arguments:a}, set_process_priority:{arguments:a, default_arguments:a}, set_process_unhandled_input:{arguments:a, default_arguments:a}, set_process_unhandled_key_input:{arguments:a, default_arguments:a}, set_scene_instance_load_placeholder:{arguments:a, default_arguments:a}, set_script:{arguments:a, default_arguments:a}, subtract:{arguments:a, b, default_arguments:a, b}, sum:{arguments:a, default_arguments:a}, to_string:{arguments:, default_arguments:}, tr:{arguments:a, default_arguments:a}, update_configuration_warning:{arguments:, default_arguments:}}",
"context": "Then they do not share resources",
"expected": "|Dictionary| {_enter_tree:{arguments:, default_arguments:}, _exit_tree:{arguments:, default_arguments:}, _get:{arguments:a, default_arguments:a}, _get_configuration_warning:{arguments:, default_arguments:}, _get_editor_description:{arguments:, default_arguments:}, _get_import_path:{arguments:, default_arguments:}, _get_property_list:{arguments:, default_arguments:}, _init:{arguments:, default_arguments:}, _input:{arguments:a, default_arguments:a}, _notification:{arguments:a, default_arguments:a}, _physics_process:{arguments:a, default_arguments:a}, _process:{arguments:a, default_arguments:a}, _ready:{arguments:, default_arguments:}, _set:{arguments:a, b, default_arguments:a, b}, _set_editor_description:{arguments:a, default_arguments:a}, _set_import_path:{arguments:a, default_arguments:a}, _to_string:{arguments:, default_arguments:}, _unhandled_input:{arguments:a, default_arguments:a}, _unhandled_key_input:{arguments:a, default_arguments:a}, add:{arguments:a, b, default_arguments:a, b}, add_child:{arguments:a, b, default_arguments:a, b = False}, add_child_below_node:{arguments:a, b, c, default_arguments:a, b, c = False}, add_to_group:{arguments:a, b, default_arguments:a, b = False}, add_user_signal:{arguments:a, b, default_arguments:a, b = []}, call:{arguments:a, default_arguments:a}, call_deferred:{arguments:a, default_arguments:a}, callv:{arguments:a, b, default_arguments:a, b}, can_process:{arguments:, default_arguments:}, can_translate_messages:{arguments:, default_arguments:}, connect:{arguments:a, b, c, d, e, default_arguments:a, b, c, d = [], e = 0}, disconnect:{arguments:a, b, c, default_arguments:a, b, c}, divide:{arguments:a, b, default_arguments:a, b}, duplicate:{arguments:a, default_arguments:a = 15}, emit_signal:{arguments:a, default_arguments:a}, find_node:{arguments:a, b, c, default_arguments:a, b = True, c = True}, find_parent:{arguments:a, default_arguments:a}, free:{arguments:, default_arguments:}, get:{arguments:a, default_arguments:a}, get_child:{arguments:a, default_arguments:a}, get_child_count:{arguments:, default_arguments:}, get_children:{arguments:, default_arguments:}, get_class:{arguments:, default_arguments:}, get_custom_multiplayer:{arguments:, default_arguments:}, get_filename:{arguments:, default_arguments:}, get_groups:{arguments:, default_arguments:}, get_incoming_connections:{arguments:, default_arguments:}, get_index:{arguments:, default_arguments:}, get_indexed:{arguments:a, default_arguments:a}, get_instance_id:{arguments:, default_arguments:}, get_meta:{arguments:a, default_arguments:a}, get_meta_list:{arguments:, default_arguments:}, get_method_list:{arguments:, default_arguments:}, get_multiplayer:{arguments:, default_arguments:}, get_name:{arguments:, default_arguments:}, get_network_master:{arguments:, default_arguments:}, get_node:{arguments:a, default_arguments:a}, get_node_and_resource:{arguments:a, default_arguments:a}, get_node_or_null:{arguments:a, default_arguments:a}, get_owner:{arguments:, default_arguments:}, get_parent:{arguments:, default_arguments:}, get_path:{arguments:, default_arguments:}, get_path_to:{arguments:a, default_arguments:a}, get_pause_mode:{arguments:, default_arguments:}, get_physics_process_delta_time:{arguments:, default_arguments:}, get_position_in_parent:{arguments:, default_arguments:}, get_process_delta_time:{arguments:, default_arguments:}, get_process_priority:{arguments:, default_arguments:}, get_property_list:{arguments:, default_arguments:}, get_scene_instance_load_placeholder:{arguments:, default_arguments:}, get_script:{arguments:, default_arguments:}, get_signal_connection_list:{arguments:a, default_arguments:a}, get_signal_list:{arguments:, default_arguments:}, get_tree:{arguments:, default_arguments:}, get_viewport:{arguments:, default_arguments:}, has_meta:{arguments:a, default_arguments:a}, has_method:{arguments:a, default_arguments:a}, has_node:{arguments:a, default_arguments:a}, has_node_and_resource:{arguments:a, default_arguments:a}, has_signal:{arguments:a, default_arguments:a}, has_user_signal:{arguments:a, default_arguments:a}, is_a_parent_of:{arguments:a, default_arguments:a}, is_blocking_signals:{arguments:, default_arguments:}, is_class:{arguments:a, default_arguments:a}, is_connected:{arguments:a, b, c, default_arguments:a, b, c}, is_displayed_folded:{arguments:, default_arguments:}, is_greater_than:{arguments:a, default_arguments:a}, is_in_group:{arguments:a, default_arguments:a}, is_inside_tree:{arguments:, default_arguments:}, is_network_master:{arguments:, default_arguments:}, is_physics_processing:{arguments:, default_arguments:}, is_physics_processing_internal:{arguments:, default_arguments:}, is_processing:{arguments:, default_arguments:}, is_processing_input:{arguments:, default_arguments:}, is_processing_internal:{arguments:, default_arguments:}, is_processing_unhandled_input:{arguments:, default_arguments:}, is_processing_unhandled_key_input:{arguments:, default_arguments:}, is_queued_for_deletion:{arguments:, default_arguments:}, math_fight:{arguments:, default_arguments:}, move_child:{arguments:a, b, default_arguments:a, b}, multiply:{arguments:a, b, default_arguments:a, b}, notification:{arguments:a, b, default_arguments:a, b = False}, pi:{arguments:, default_arguments:}, print_stray_nodes:{arguments:, default_arguments:}, print_tree:{arguments:, default_arguments:}, print_tree_pretty:{arguments:, default_arguments:}, propagate_call:{arguments:a, b, c, default_arguments:a, b = [], c = False}, propagate_notification:{arguments:a, default_arguments:a}, property_list_changed_notify:{arguments:, default_arguments:}, queue_free:{arguments:, default_arguments:}, raise:{arguments:, default_arguments:}, remove_and_skip:{arguments:, default_arguments:}, remove_child:{arguments:a, default_arguments:a}, remove_from_group:{arguments:a, default_arguments:a}, remove_meta:{arguments:a, default_arguments:a}, replace_by:{arguments:a, b, default_arguments:a, b = False}, request_ready:{arguments:, default_arguments:}, rpc:{arguments:a, default_arguments:a}, rpc_config:{arguments:a, b, default_arguments:a, b}, rpc_id:{arguments:a, b, default_arguments:a, b}, rpc_unreliable:{arguments:a, default_arguments:a}, rpc_unreliable_id:{arguments:a, b, default_arguments:a, b}, rset:{arguments:a, b, default_arguments:a, b}, rset_config:{arguments:a, b, default_arguments:a, b}, rset_id:{arguments:a, b, c, default_arguments:a, b, c}, rset_unreliable:{arguments:a, b, default_arguments:a, b}, rset_unreliable_id:{arguments:a, b, c, default_arguments:a, b, c}, set:{arguments:a, b, default_arguments:a, b}, set_block_signals:{arguments:a, default_arguments:a}, set_custom_multiplayer:{arguments:a, default_arguments:a}, set_deferred:{arguments:a, b, default_arguments:a, b}, set_display_folded:{arguments:a, default_arguments:a}, set_filename:{arguments:a, default_arguments:a}, set_indexed:{arguments:a, b, default_arguments:a, b}, set_message_translation:{arguments:a, default_arguments:a}, set_meta:{arguments:a, b, default_arguments:a, b}, set_name:{arguments:a, default_arguments:a}, set_network_master:{arguments:a, b, default_arguments:a, b = True}, set_owner:{arguments:a, default_arguments:a}, set_pause_mode:{arguments:a, default_arguments:a}, set_physics_process:{arguments:a, default_arguments:a}, set_physics_process_internal:{arguments:a, default_arguments:a}, set_process:{arguments:a, default_arguments:a}, set_process_input:{arguments:a, default_arguments:a}, set_process_internal:{arguments:a, default_arguments:a}, set_process_priority:{arguments:a, default_arguments:a}, set_process_unhandled_input:{arguments:a, default_arguments:a}, set_process_unhandled_key_input:{arguments:a, default_arguments:a}, set_scene_instance_load_placeholder:{arguments:a, default_arguments:a}, set_script:{arguments:a, default_arguments:a}, subtract:{arguments:a, b, default_arguments:a, b}, sum:{arguments:a, default_arguments:a}, to_string:{arguments:, default_arguments:}, tr:{arguments:a, default_arguments:a}, update_configuration_warning:{arguments:, default_arguments:}} != |Dictionary| {_enter_tree:{arguments:, default_arguments:}, _exit_tree:{arguments:, default_arguments:}, _get:{arguments:a, default_arguments:a}, _get_configuration_warning:{arguments:, default_arguments:}, _get_editor_description:{arguments:, default_arguments:}, _get_import_path:{arguments:, default_arguments:}, _get_property_list:{arguments:, default_arguments:}, _init:{arguments:, default_arguments:}, _input:{arguments:a, default_arguments:a}, _notification:{arguments:a, default_arguments:a}, _physics_process:{arguments:a, default_arguments:a}, _process:{arguments:a, default_arguments:a}, _ready:{arguments:, default_arguments:}, _set:{arguments:a, b, default_arguments:a, b}, _set_editor_description:{arguments:a, default_arguments:a}, _set_import_path:{arguments:a, default_arguments:a}, _to_string:{arguments:, default_arguments:}, _unhandled_input:{arguments:a, default_arguments:a}, _unhandled_key_input:{arguments:a, default_arguments:a}, add:{arguments:a, b, default_arguments:a, b}, add_child:{arguments:a, b, default_arguments:a, b = False}, add_child_below_node:{arguments:a, b, c, default_arguments:a, b, c = False}, add_to_group:{arguments:a, b, default_arguments:a, b = False}, add_user_signal:{arguments:a, b, default_arguments:a, b = []}, call:{arguments:a, default_arguments:a}, call_deferred:{arguments:a, default_arguments:a}, callv:{arguments:a, b, default_arguments:a, b}, can_process:{arguments:, default_arguments:}, can_translate_messages:{arguments:, default_arguments:}, connect:{arguments:a, b, c, d, e, default_arguments:a, b, c, d = [], e = 0}, disconnect:{arguments:a, b, c, default_arguments:a, b, c}, divide:{arguments:a, b, default_arguments:a, b}, duplicate:{arguments:a, default_arguments:a = 15}, emit_signal:{arguments:a, default_arguments:a}, find_node:{arguments:a, b, c, default_arguments:a, b = True, c = True}, find_parent:{arguments:a, default_arguments:a}, free:{arguments:, default_arguments:}, get:{arguments:a, default_arguments:a}, get_child:{arguments:a, default_arguments:a}, get_child_count:{arguments:, default_arguments:}, get_children:{arguments:, default_arguments:}, get_class:{arguments:, default_arguments:}, get_custom_multiplayer:{arguments:, default_arguments:}, get_filename:{arguments:, default_arguments:}, get_groups:{arguments:, default_arguments:}, get_incoming_connections:{arguments:, default_arguments:}, get_index:{arguments:, default_arguments:}, get_indexed:{arguments:a, default_arguments:a}, get_instance_id:{arguments:, default_arguments:}, get_meta:{arguments:a, default_arguments:a}, get_meta_list:{arguments:, default_arguments:}, get_method_list:{arguments:, default_arguments:}, get_multiplayer:{arguments:, default_arguments:}, get_name:{arguments:, default_arguments:}, get_network_master:{arguments:, default_arguments:}, get_node:{arguments:a, default_arguments:a}, get_node_and_resource:{arguments:a, default_arguments:a}, get_node_or_null:{arguments:a, default_arguments:a}, get_owner:{arguments:, default_arguments:}, get_parent:{arguments:, default_arguments:}, get_path:{arguments:, default_arguments:}, get_path_to:{arguments:a, default_arguments:a}, get_pause_mode:{arguments:, default_arguments:}, get_physics_process_delta_time:{arguments:, default_arguments:}, get_position_in_parent:{arguments:, default_arguments:}, get_process_delta_time:{arguments:, default_arguments:}, get_process_priority:{arguments:, default_arguments:}, get_property_list:{arguments:, default_arguments:}, get_scene_instance_load_placeholder:{arguments:, default_arguments:}, get_script:{arguments:, default_arguments:}, get_signal_connection_list:{arguments:a, default_arguments:a}, get_signal_list:{arguments:, default_arguments:}, get_tree:{arguments:, default_arguments:}, get_viewport:{arguments:, default_arguments:}, has_meta:{arguments:a, default_arguments:a}, has_method:{arguments:a, default_arguments:a}, has_node:{arguments:a, default_arguments:a}, has_node_and_resource:{arguments:a, default_arguments:a}, has_signal:{arguments:a, default_arguments:a}, has_user_signal:{arguments:a, default_arguments:a}, is_a_parent_of:{arguments:a, default_arguments:a}, is_blocking_signals:{arguments:, default_arguments:}, is_class:{arguments:a, default_arguments:a}, is_connected:{arguments:a, b, c, default_arguments:a, b, c}, is_displayed_folded:{arguments:, default_arguments:}, is_greater_than:{arguments:a, default_arguments:a}, is_in_group:{arguments:a, default_arguments:a}, is_inside_tree:{arguments:, default_arguments:}, is_network_master:{arguments:, default_arguments:}, is_physics_processing:{arguments:, default_arguments:}, is_physics_processing_internal:{arguments:, default_arguments:}, is_processing:{arguments:, default_arguments:}, is_processing_input:{arguments:, default_arguments:}, is_processing_internal:{arguments:, default_arguments:}, is_processing_unhandled_input:{arguments:, default_arguments:}, is_processing_unhandled_key_input:{arguments:, default_arguments:}, is_queued_for_deletion:{arguments:, default_arguments:}, math_fight:{arguments:, default_arguments:}, move_child:{arguments:a, b, default_arguments:a, b}, multiply:{arguments:a, b, default_arguments:a, b}, notification:{arguments:a, b, default_arguments:a, b = False}, pi:{arguments:, default_arguments:}, print_stray_nodes:{arguments:, default_arguments:}, print_tree:{arguments:, default_arguments:}, print_tree_pretty:{arguments:, default_arguments:}, propagate_call:{arguments:a, b, c, default_arguments:a, b = [], c = False}, propagate_notification:{arguments:a, default_arguments:a}, property_list_changed_notify:{arguments:, default_arguments:}, queue_free:{arguments:, default_arguments:}, raise:{arguments:, default_arguments:}, remove_and_skip:{arguments:, default_arguments:}, remove_child:{arguments:a, default_arguments:a}, remove_from_group:{arguments:a, default_arguments:a}, remove_meta:{arguments:a, default_arguments:a}, replace_by:{arguments:a, b, default_arguments:a, b = False}, request_ready:{arguments:, default_arguments:}, rpc:{arguments:a, default_arguments:a}, rpc_config:{arguments:a, b, default_arguments:a, b}, rpc_id:{arguments:a, b, default_arguments:a, b}, rpc_unreliable:{arguments:a, default_arguments:a}, rpc_unreliable_id:{arguments:a, b, default_arguments:a, b}, rset:{arguments:a, b, default_arguments:a, b}, rset_config:{arguments:a, b, default_arguments:a, b}, rset_id:{arguments:a, b, c, default_arguments:a, b, c}, rset_unreliable:{arguments:a, b, default_arguments:a, b}, rset_unreliable_id:{arguments:a, b, c, default_arguments:a, b, c}, set:{arguments:a, b, default_arguments:a, b}, set_block_signals:{arguments:a, default_arguments:a}, set_custom_multiplayer:{arguments:a, default_arguments:a}, set_deferred:{arguments:a, b, default_arguments:a, b}, set_display_folded:{arguments:a, default_arguments:a}, set_filename:{arguments:a, default_arguments:a}, set_indexed:{arguments:a, b, default_arguments:a, b}, set_message_translation:{arguments:a, default_arguments:a}, set_meta:{arguments:a, b, default_arguments:a, b}, set_name:{arguments:a, default_arguments:a}, set_network_master:{arguments:a, b, default_arguments:a, b = True}, set_owner:{arguments:a, default_arguments:a}, set_pause_mode:{arguments:a, default_arguments:a}, set_physics_process:{arguments:a, default_arguments:a}, set_physics_process_internal:{arguments:a, default_arguments:a}, set_process:{arguments:a, default_arguments:a}, set_process_input:{arguments:a, default_arguments:a}, set_process_internal:{arguments:a, default_arguments:a}, set_process_priority:{arguments:a, default_arguments:a}, set_process_unhandled_input:{arguments:a, default_arguments:a}, set_process_unhandled_key_input:{arguments:a, default_arguments:a}, set_scene_instance_load_placeholder:{arguments:a, default_arguments:a}, set_script:{arguments:a, default_arguments:a}, subtract:{arguments:a, b, default_arguments:a, b}, sum:{arguments:a, default_arguments:a}, to_string:{arguments:, default_arguments:}, tr:{arguments:a, default_arguments:a}, update_configuration_warning:{arguments:, default_arguments:}}",
"success": true
} ],
"context": "When we create two of it for the same script",
"fullname": "test_When_we_create_two_of_it_for_the_same_script",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|Object| [Node:2842] is equal to |Object| [Node:2842]",
"context": "Then we get the same double back",
"expected": "|Object| [Node:2842] is equal to |Object| [Node:2842]",
"success": true
} ],
"context": "When we call the double the second time",
"fullname": "test_When_we_call_double_a_second_time_on",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Reference:2849] is instance of class: [GDScript:1564]",
"context": "Then we get that inner class back",
"expected": "[Reference:2849] is instance of class: [GDScript:1564]",
"success": true
} ],
"context": "When we double an inner class",
"fullname": "test_When_we_double_an_inner_class",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 3,
"path": "res://tests/integration/script_director.test.gd",
"source": {
"containers": [ "res://tests/integration", "res://tests" ],
"method": "",
"path": "res://tests/integration/script_director.test.gd",
"tags": [  ],
"test": ExtResource( 13 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 3
}, {
"context": "Given a Test Double",
"methods": [ {
"assertions": [ {
"actual": "|String| Jackie is equal to |String| Jackie",
"context": "Then we can double the object successfully",
"expected": "|String| Jackie is equal to |String| Jackie",
"success": true
} ],
"context": "When we pass in dependecies on double",
"fullname": "test_When_we_pass_in_deps_on_double",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "(1, 1) is builtin: Vector2",
"context": "Then we can call methods on it",
"expected": "(1, 1) is builtin: Vector2",
"success": true
} ],
"context": "When we double an inner class",
"fullname": "test_When_we_double_an_inner_class",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "method: add was called with arguments: [10, 10]",
"context": "Then we can see that it was called with those arguments",
"expected": "method: add was called with arguments: [10, 10]",
"success": true
} ],
"context": "When we pass arguments to a method call that we are spying on",
"fullname": "test_When_we_pass_arguments_to_a_method_call_that_we_are_spying_on",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|float| 6.283185 is equal to |float| 6.283185",
"context": "Then we can call the static methods of that inner double",
"expected": "|float| 6.283185 is equal to |float| 6.283185",
"success": true
} ],
"context": "When we add an doubled inner class to it",
"fullname": "test_When_we_add_a_doubled_inner_class_to_it",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 9999 is equal to |int| 9999",
"context": "Then it returns the corresponding value when the partial pattern matches",
"expected": "|int| 9999 is equal to |int| 9999",
"success": true
} ],
"context": "When we call a method that was stubbed with a partial (ie using any()) argument pattern",
"fullname": "test_When_we_call_a_method_that_was_stubbed_with_a_partial_argument_pattern",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "add was called",
"context": "Then we can see that it was called at least once",
"expected": "add was called",
"success": true
} ],
"context": "When we call a method that we are spying on",
"fullname": "test_When_we_call_a_method_that_we_are_spying_on",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 4 is equal to |int| 4",
"context": "Then we get the correct result",
"expected": "|int| 4 is equal to |int| 4",
"success": true
} ],
"context": "When we call an add(x, y) method that we haven't directed",
"fullname": "test_When_we_call_an_add_method_that_we_have_not_directed",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|null| Null == null",
"context": "Then we get the stubbed value back",
"expected": "|null| Null == null",
"success": true
} ],
"context": "When we stub a method of a doubled inner class",
"fullname": "test_When_we_stub_a_method_of_a_double_inner_class",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 99 is equal to |int| 99",
"context": "Then it affects the state of the double",
"expected": "|int| 99 is equal to |int| 99",
"success": true
} ],
"context": "When we pass a funcref as a subcall",
"fullname": "test_When_we_pass_a_funcref_as_a_subcall",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|Array| [10, 5] is equal to |Array| [10, 5]",
"context": "Then it returns a value",
"expected": "|Array| [10, 5] is equal to |Array| [10, 5]",
"success": true
} ],
"context": "When we pass an Object with a call_func function",
"fullname": "test_When_we_pass_an_object_with_callfunc_method_as_a_subcall",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 9999 is equal to |int| 9999",
"context": "Then it returns the corresponding value when the pattern matches",
"expected": "|int| 9999 is equal to |int| 9999",
"success": true
} ],
"context": "When we call a method that was stubbed with an argument pattern that includes a non-primitive object",
"fullname": "test_When_we_call_a_method_that_was_stubbed_with_an_argument_pattern_that_includes_a_non_primitive_object",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|null| Null == null",
"context": "Then we get null",
"expected": "|null| Null == null",
"success": true
} ],
"context": "When we call a method that we have dummied",
"fullname": "test_When_we_call_a_method_that_we_have_dummied",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 99 is equal to |int| 99",
"context": "Then it returns a value",
"expected": "|int| 99 is equal to |int| 99",
"success": true
} ],
"context": "When we pass a funcref as a subcall that returns",
"fullname": "test_When_we_pass_a_funcref_as_a_subcall_that_returns_a_value",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then it returns true",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we call a method that we have stubbed to return true",
"fullname": "test_When_we_call_a_method_that_we_have_stubbed_to_return_true",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|Object| [Node:2952] is equal to |Object| [Node:2952]",
"context": "Then it returns that same node",
"expected": "|Object| [Node:2952] is equal to |Object| [Node:2952]",
"success": true
} ],
"context": "When we call a method that we have stubbed to return a node",
"fullname": "test_When_we_call_a_method_that_we_have_stubbed_to_return_a_node",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|String| Jackie is equal to |String| Jackie",
"context": "Then we can double the object successfully",
"expected": "|String| Jackie is equal to |String| Jackie",
"success": true
} ],
"context": "When we pass in dependecies on direct",
"fullname": "test_When_we_pass_in_deps_on_direct",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 100 is equal to |int| 100",
"context": "Then it returns the default stubbed value when the arguments don't match any pattern",
"expected": "|int| 100 is equal to |int| 100",
"success": true
}, {
"actual": "|int| 1000 is equal to |int| 1000",
"context": "Then it returns the the corresponding value to the pattern the arguments matched",
"expected": "|int| 1000 is equal to |int| 1000",
"success": true
} ],
"context": "When we call a method that was stubbed to return different values based on argument patterns",
"fullname": "test_When_we_call_a_method_that_was_stubbed_to_return_different_values_based_on_argument_patterns",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|bool| True is equal to |bool| True",
"context": "Then we can call it",
"expected": "|bool| True is equal to |bool| True",
"success": true
} ],
"context": "When we stubbed a keyworded method by passing in the correct keyword",
"fullname": "test_When_we_stubbed_a_keyword_method_by_passing_in_the_correct_keyword",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 4 is equal to |int| 4",
"context": "Then it calls its super implementation by default",
"expected": "|int| 4 is equal to |int| 4",
"success": true
}, {
"actual": "|int| 9999 is equal to |int| 9999",
"context": "Then it does not call its super implementation when arguments patterns match a different return value",
"expected": "|int| 9999 is equal to |int| 9999",
"success": true
} ],
"context": "When we call a method that we stubbed to call its super implementation by default",
"fullname": "test_When_we_call_a_method_that_we_stubbed_to_call_its_super_implementation_by_default",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
} ],
"passed": 19,
"path": "res://tests/integration/test_double.test.gd",
"source": {
"containers": [ "res://tests/integration", "res://tests" ],
"method": "",
"path": "res://tests/integration/test_double.test.gd",
"tags": [  ],
"test": ExtResource( 14 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 19
}, {
"context": "Given a Boolean Assertion",
"methods": [ {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then it passes",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When calling asserts.is_true(true)",
"fullname": "test_when_calling_asserts_is_true",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| False == false",
"context": "Then it passes",
"expected": "|bool| False == false",
"success": true
} ],
"context": "When calling asserts.is_false(false)",
"fullname": "test_when_calling_asserts_is_false",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| True != false",
"context": "",
"expected": "|bool| True == false",
"success": false
} ],
"context": " intentional failure",
"fullname": "test_intentional_failure",
"passed": 0,
"success": false,
"time": 0.0,
"total": 1
} ],
"passed": 2,
"path": "res://tests/unit/boolean.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/boolean.test.gd",
"tags": [  ],
"test": ExtResource( 11 ),
"yield_time": 0.0
},
"success": false,
"time_taken": 0.0,
"total": 3
}, {
"context": "Given an Equality Assertion",
"methods": [ {
"assertions": [ {
"actual": "|int| 2 is equal or greater |int| 1",
"context": "Then it passes",
"expected": "|int| 2 is equal or greater |int| 1",
"success": true
} ],
"context": "When calling asserts.is_equal_or_greater_than(2, 1)",
"fullname": "test_when_calling_is_equal_or_greater_than",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 2 is greater than |int| 1",
"context": "Then it passes",
"expected": "|int| 2 is greater than |int| 1",
"success": true
} ],
"context": "When calling asserts.is_greater_than(2, 1)",
"fullname": "test_when_calling_is_greater_than",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 1 is equal to |int| 1",
"context": "Then it passes",
"expected": "|int| 1 is equal to |int| 1",
"success": true
} ],
"context": "When calling asserts.is_equal(1, 1)",
"fullname": "test_when_calling_is_equal",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 1 is less than |int| 2",
"context": "Then it passes",
"expected": "|int| 1 is less than |int| 2",
"success": true
} ],
"context": "When calling asserts.is_less_than(2, 1)",
"fullname": "test_when_calling_is_less_than",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 1 is equal or greater |int| 1",
"context": "Then it passes",
"expected": "|int| 1 is equal or greater |int| 1",
"success": true
} ],
"context": "When calling asserts.is_equal_or_greater_than(1, 1)",
"fullname": "test_when_calling_is_equal_or_greater_than_with_equal_values",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 5 is not equal to |int| 6",
"context": "Then it passes",
"expected": "|int| 5 != |int| 6",
"success": true
} ],
"context": "When callign asserts.is_not_equal(5, 6)",
"fullname": "test_when_calling_is_not_equal",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 1 is equal or less than |int| 1",
"context": "Then it passes!",
"expected": "|int| 1 is equal or less than |int| 1",
"success": true
} ],
"context": "When calling asserts.is_equal_or_less_than(1, 1)",
"fullname": "test_when_calling_is_equal_or_less_than_with_equal_values",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 7,
"path": "res://tests/unit/equality.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/equality.test.gd",
"tags": [  ],
"test": ExtResource( 8 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 7
}, {
"context": "Given A File Assertion",
"methods": [ {
"assertions": [ {
"actual": "res://somefile.gd does not exist",
"context": "Then it passes",
"expected": "res://somefile.gd does not exist",
"success": true
} ],
"context": "When calling asserts.file_does_not_exist when there is no file",
"fullname": "test_when_calling_file_does_not_exist_when_there_is_no_file",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": " does not exist",
"context": "Then it passes",
"expected": " does not exist",
"success": true
} ],
"context": "When calling asserts file does not exist when path is empty",
"fullname": "test_when_calling_file_does_not_exist_when_path_is_empty",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "res://tests/unit/file.test.gd exists",
"context": "Then it passes",
"expected": "res://tests/unit/file.test.gd exists",
"success": true
} ],
"context": "When calling asserts.file_exists when the file is this suite",
"fullname": "test_when_calling_file_exists_when_file_is_self",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 3,
"path": "res://tests/unit/file.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/file.test.gd",
"tags": [  ],
"test": ExtResource( 3 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 3
}, {
"context": "Given an Is Instance of class/type Assertion",
"methods": [ {
"assertions": [ {
"actual": "|AABB| 0, 0, 0 - 0, 0, 0 != null",
"context": "AABB is not null",
"expected": "|AABB| 0, 0, 0 - 0, 0, 0 != null",
"success": true
}, {
"actual": "0, 0, 0 - 0, 0, 0 is builtin: AABB",
"context": "Then it passes",
"expected": "0, 0, 0 - 0, 0, 0 is builtin: AABB",
"success": true
} ],
"context": "When calling asserts.is_AABB(aabb: AABB)",
"fullname": "test_when_calling_is_AABB",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|Array| [] != null",
"context": "array is not null",
"expected": "|Array| [] != null",
"success": true
}, {
"actual": "[] is builtin: Array",
"context": "Then it passes",
"expected": "[] is builtin: Array",
"success": true
} ],
"context": "When calling asserts.is_Array(array: Array)",
"fullname": "test_when_calling_is_Array",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|Transform2D| ((1, 0), (0, 1), (0, 0)) != null",
"context": "transform2D is not null",
"expected": "|Transform2D| ((1, 0), (0, 1), (0, 0)) != null",
"success": true
}, {
"actual": "((1, 0), (0, 1), (0, 0)) is builtin: Transform2D",
"context": "Then it passes",
"expected": "((1, 0), (0, 1), (0, 0)) is builtin: Transform2D",
"success": true
} ],
"context": "When calling asserts.is_Transform(transform2D: Transform2D)",
"fullname": "test_when_calling_is_Transform2D",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|Rect2| (0, 0, 0, 0) != null",
"context": "rect2 is not null",
"expected": "|Rect2| (0, 0, 0, 0) != null",
"success": true
}, {
"actual": "(0, 0, 0, 0) is builtin: Rect2",
"context": "Then it passes",
"expected": "(0, 0, 0, 0) is builtin: Rect2",
"success": true
} ],
"context": "When calling asserts.is_Rect2(rect2: Rect2)",
"fullname": "test_when_calling_is_Rect2",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|Vector3| (0, 0, 0) != null",
"context": "vec3 is not null",
"expected": "|Vector3| (0, 0, 0) != null",
"success": true
}, {
"actual": "(0, 0, 0) is builtin: Vector3",
"context": "Then it passes",
"expected": "(0, 0, 0) is builtin: Vector3",
"success": true
} ],
"context": "When calling asserts.is_Vector3(vec3: Vector3",
"fullname": "test_when_calling_is_Vector3",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|Quat| (0, 0, 0, 1) != null",
"context": "quat is not null",
"expected": "|Quat| (0, 0, 0, 1) != null",
"success": true
}, {
"actual": "(0, 0, 0, 1) is builtin: Quat",
"context": "Then it passes",
"expected": "(0, 0, 0, 1) is builtin: Quat",
"success": true
} ],
"context": "When calling asserts.is_Quat(quat: Quat)",
"fullname": "test_when_calling_is_Quat",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "{} is builtin: Dictionary",
"context": "Then it passes",
"expected": "{} is builtin: Dictionary",
"success": true
} ],
"context": "When calling asserts.is_Dictionary({})",
"fullname": "test_when_calling_is_Dictionary",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|PoolIntArray| [] != null",
"context": "ints is not null",
"expected": "|PoolIntArray| [] != null",
"success": true
}, {
"actual": "[] is builtin: PoolIntArray",
"context": "Then it passes",
"expected": "[] is builtin: PoolIntArray",
"success": true
} ],
"context": "When calling asserts.is_PoolIntArray(ints: PoolIntArray)",
"fullname": "test_when_calling_is_PoolIntArray",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|PoolByteArray| [PoolByteArray] != null",
"context": "bytes is not null",
"expected": "|PoolByteArray| [PoolByteArray] != null",
"success": true
}, {
"actual": "[PoolByteArray] is builtin: PoolByteArray",
"context": "Then it passes",
"expected": "[PoolByteArray] is builtin: PoolByteArray",
"success": true
} ],
"context": "When calling asserts.is_PoolByteArray(bytes: PoolByteArray)",
"fullname": "test_when_calling_is_PoolByteArray",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|RID| [RID] != null",
"context": "rid is not null",
"expected": "|RID| [RID] != null",
"success": true
}, {
"actual": "[RID] is builtin: RID",
"context": "Then it passes",
"expected": "[RID] is builtin: RID",
"success": true
} ],
"context": "When calling asserts.is_RID(rid: RID)",
"fullname": "test_when_calling_is_RID",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|PoolStringArray| [] != null",
"context": "strs is not null",
"expected": "|PoolStringArray| [] != null",
"success": true
}, {
"actual": "[] is builtin: PoolStringArray",
"context": "Then it passes",
"expected": "[] is builtin: PoolStringArray",
"success": true
} ],
"context": "When calling is asserts.is_PoolStringArray(strs: PoolStringArray)",
"fullname": "test_when_calling_is_PoolStringArray",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "1 is builtin: float",
"context": "Then it passes",
"expected": "1 is builtin: float",
"success": true
} ],
"context": "When calling asserts.is_float(1.0)",
"fullname": "test_when_calling_is_float",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|PoolColorArray| [PoolColorArray] != null",
"context": "colors is not null",
"expected": "|PoolColorArray| [PoolColorArray] != null",
"success": true
}, {
"actual": "[PoolColorArray] is builtin: PoolColorArray",
"context": "Then it passes",
"expected": "[PoolColorArray] is builtin: PoolColorArray",
"success": true
} ],
"context": "When calling asserts.is_PoolColorArray(colors: PoolColorArray)",
"fullname": "test_when_calling_is_PoolColorArray",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|NodePath| . != null",
"context": "@'Parent/Child' is not null",
"expected": "|NodePath| . != null",
"success": true
}, {
"actual": ". is builtin: NodePath",
"context": "Then it passes",
"expected": ". is builtin: NodePath",
"success": true
} ],
"context": "When calling asserts.is_NodePath(@'Parent/Child')",
"fullname": "test_when_calling_is_NodePath",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|PoolVector2Array| [] != null",
"context": "vec2s is not null",
"expected": "|PoolVector2Array| [] != null",
"success": true
}, {
"actual": "[] is builtin: PoolVector2Array",
"context": "Then it passes",
"expected": "[] is builtin: PoolVector2Array",
"success": true
} ],
"context": "When calling is asserts.is_PoolVector2Array(vec2s: PoolVector2Array)",
"fullname": "test_when_calling_is_PoolVector2Array",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|PoolVector3Array| [] != null",
"context": "vec3s is not null",
"expected": "|PoolVector3Array| [] != null",
"success": true
}, {
"actual": "[] is builtin: PoolVector3Array",
"context": "Then it passes",
"expected": "[] is builtin: PoolVector3Array",
"success": true
} ],
"context": "When calling is asserts.is_PoolVector3Array(vec3s: PoolVector3Array)",
"fullname": "test_when_calling_is_PoolVector3Array",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|Transform| 1, 0, 0, 0, 1, 0, 0, 0, 1 - 0, 0, 0 != null",
"context": "transform is not null",
"expected": "|Transform| 1, 0, 0, 0, 1, 0, 0, 0, 1 - 0, 0, 0 != null",
"success": true
}, {
"actual": "1, 0, 0, 0, 1, 0, 0, 0, 1 - 0, 0, 0 is builtin: Transform",
"context": "Then it passes",
"expected": "1, 0, 0, 0, 1, 0, 0, 0, 1 - 0, 0, 0 is builtin: Transform",
"success": true
} ],
"context": "When calling asserts.is_Transform(transform: Transform)",
"fullname": "test_when_calling_is_Transform",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|String|  != null",
"context": "strs is not null",
"expected": "|String|  != null",
"success": true
}, {
"actual": " is builtin: String",
"context": "Then it passes",
"expected": " is builtin: String",
"success": true
} ],
"context": "When calling asserts.is_string(strs: String)",
"fullname": "test_when_calling_is_string",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|Basis| ((1, 0, 0), (0, 1, 0), (0, 0, 1)) != null",
"context": "basis is not null",
"expected": "|Basis| ((1, 0, 0), (0, 1, 0), (0, 0, 1)) != null",
"success": true
}, {
"actual": "((1, 0, 0), (0, 1, 0), (0, 0, 1)) is builtin: Basis",
"context": "Then it passes",
"expected": "((1, 0, 0), (0, 1, 0), (0, 0, 1)) is builtin: Basis",
"success": true
} ],
"context": "When calling asserts.is_basis(basis: Basis",
"fullname": "test_when_calling_is_Basis",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|Plane| 0, 0, 0, 0 != null",
"context": "plane is not null",
"expected": "|Plane| 0, 0, 0, 0 != null",
"success": true
}, {
"actual": "0, 0, 0, 0 is builtin: Plane",
"context": "then it passes",
"expected": "0, 0, 0, 0 is builtin: Plane",
"success": true
} ],
"context": "When calling asserts.is_Plane(plane: Plane())",
"fullname": "test_when_calling_is_Plane",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|Vector2| (0, 0) != null",
"context": "vec2 is not null",
"expected": "|Vector2| (0, 0) != null",
"success": true
}, {
"actual": "(0, 0) is builtin: Vector2",
"context": "Then it passes",
"expected": "(0, 0) is builtin: Vector2",
"success": true
} ],
"context": "When calling asserts.is_Vector2(vec2)",
"fullname": "test_when_calling_is_Vector2",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|Object| [Node:3052] != null",
"context": "node is not null",
"expected": "|Object| [Node:3052] != null",
"success": true
}, {
"actual": "[Node:3052] is builtin: Object",
"context": "An instance of node is an Object",
"expected": "[Node:3052] is builtin: Object",
"success": true
} ],
"context": "When calling is asserts.object(node: Node)",
"fullname": "test_when_calling_is_object",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|PoolRealArray| [] != null",
"context": "reals is not null",
"expected": "|PoolRealArray| [] != null",
"success": true
}, {
"actual": "[] is builtin: PoolRealArray",
"context": "Then it passes",
"expected": "[] is builtin: PoolRealArray",
"success": true
} ],
"context": "When calling is asserts.is_PoolRealArray(reals: PoolRealArray)",
"fullname": "test_when_calling_is_PoolRealArray",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "True is builtin: bool",
"context": "Then it passes",
"expected": "True is builtin: bool",
"success": true
} ],
"context": "When calling asserts.is_bool(true)",
"fullname": "test_when_calling_is_bool",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "1 is builtin: int",
"context": "Then it passes",
"expected": "1 is builtin: int",
"success": true
} ],
"context": "When callign asserts.is_int(1)",
"fullname": "test_when_calling_is_int",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|Color| 0,0,0,1 != null",
"context": "color is not null",
"expected": "|Color| 0,0,0,1 != null",
"success": true
}, {
"actual": "0,0,0,1 is builtin: Color",
"context": "Then it passes",
"expected": "0,0,0,1 is builtin: Color",
"success": true
} ],
"context": "When calling asserts.is_color(color: Color)",
"fullname": "test_when_calling_is_Color",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
} ],
"passed": 26,
"path": "res://tests/unit/is_instance.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/is_instance.test.gd",
"tags": [  ],
"test": ExtResource( 6 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 26
}, {
"context": "Given an Is Not Instance of class/type Assertion",
"methods": [ {
"assertions": [ {
"actual": "Null is not builtin: Array",
"context": "Then it passes",
"expected": "Null is not builtin: Array",
"success": true
} ],
"context": "when calling asserts.is_not_Array(null)",
"fullname": "test_when_calling_is_not_Array",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Color",
"context": "Then it passes",
"expected": "Null is not builtin: Color",
"success": true
} ],
"context": "when calling asserts.is_not_Color(null)",
"fullname": "test_when_calling_is_not_Color",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: float",
"context": "Then it passes",
"expected": "Null is not builtin: float",
"success": true
} ],
"context": "when calling asserts.is_not_float(null)",
"fullname": "test_when_calling_is_not_float",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: AABB",
"context": "Then it passes",
"expected": "Null is not builtin: AABB",
"success": true
} ],
"context": "when calling asserts.is_not_AABB(null)",
"fullname": "test_when_calling_is_not_AABB",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Basis",
"context": "Then it passes",
"expected": "Null is not builtin: Basis",
"success": true
} ],
"context": "when calling asserts.is_not_Basis(null)",
"fullname": "test_when_calling_is_not_Basis",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: int",
"context": "Then it passes",
"expected": "Null is not builtin: int",
"success": true
} ],
"context": "when calling asserts.is_not_int(null)",
"fullname": "test_when_calling_is_not_int",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: bool",
"context": "Then it passes",
"expected": "Null is not builtin: bool",
"success": true
} ],
"context": "when calling asserts.is_not_bool(null)",
"fullname": "test_when_calling_is_not_bool",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Dictionary",
"context": "Then it passes",
"expected": "Null is not builtin: Dictionary",
"success": true
} ],
"context": "when calling asserts.is_not_Dictionary(null)",
"fullname": "test_when_calling_is_not_Dictionary",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: NodePath",
"context": "Then it passes",
"expected": "Null is not builtin: NodePath",
"success": true
} ],
"context": "when calling asserts.is_not_NodePath(null)",
"fullname": "test_when_calling_is_not_NodePath",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Object",
"context": "Then it passes",
"expected": "Null is not builtin: Object",
"success": true
} ],
"context": "when calling asserts.is_not_Object(null)",
"fullname": "test_when_calling_is_not_Object",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: PoolStringArray",
"context": "Then it passes",
"expected": "Null is not builtin: PoolStringArray",
"success": true
} ],
"context": "when calling asserts.is_not_PoolStringArray(null)",
"fullname": "test_when_calling_is_not_PoolStringArray",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Quat",
"context": "Then it passes",
"expected": "Null is not builtin: Quat",
"success": true
} ],
"context": "when calling asserts.is_not_Quat(null)",
"fullname": "test_when_calling_is_not_Quat",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: PoolRealArray",
"context": "Then it passes",
"expected": "Null is not builtin: PoolRealArray",
"success": true
} ],
"context": "when calling asserts.is_not_PoolRealArray(null)",
"fullname": "test_when_calling_is_not_PoolRealArray",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: RID",
"context": "Then it passes",
"expected": "Null is not builtin: RID",
"success": true
} ],
"context": "when calling asserts.is_not_RID(null)",
"fullname": "test_when_calling_is_not_RID",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: PoolIntArray",
"context": "Then it passes",
"expected": "Null is not builtin: PoolIntArray",
"success": true
} ],
"context": "when calling asserts.is_not_PoolIntArray(null)",
"fullname": "test_when_calling_is_not_PoolIntArray",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Vector2",
"context": "Then it passes",
"expected": "Null is not builtin: Vector2",
"success": true
} ],
"context": "when calling asserts.is_not_Vector2(null)",
"fullname": "test_when_calling_is_not_Vector2",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Transform",
"context": "Then it passes",
"expected": "Null is not builtin: Transform",
"success": true
} ],
"context": "when calling asserts.is_not_Transform(null)",
"fullname": "test_when_calling_is_not_Transform",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: String",
"context": "Then it passes",
"expected": "Null is not builtin: String",
"success": true
} ],
"context": "when calling asserts.is_not_String(null)",
"fullname": "test_when_calling_is_not_String",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: PoolVector2Array",
"context": "Then it passes",
"expected": "Null is not builtin: PoolVector2Array",
"success": true
} ],
"context": "when calling asserts.is_not_PoolVector2Array(null)",
"fullname": "test_when_calling_is_not_PoolVector2Array",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: PoolVector3Array",
"context": "Then it passes",
"expected": "Null is not builtin: PoolVector3Array",
"success": true
} ],
"context": "when calling asserts.is_not_PoolVector3Array(null)",
"fullname": "test_when_calling_is_not_PoolVector3Array",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Plane",
"context": "Then it passes",
"expected": "Null is not builtin: Plane",
"success": true
} ],
"context": "when calling asserts.is_not_Plane(null)",
"fullname": "test_when_calling_is_not_Plane",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Transform2D",
"context": "Then it passes",
"expected": "Null is not builtin: Transform2D",
"success": true
} ],
"context": "when calling asserts.is_not_Transform2D(null)",
"fullname": "test_when_calling_is_not_Transform2D",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: PoolColorArray",
"context": "Then it passes",
"expected": "Null is not builtin: PoolColorArray",
"success": true
} ],
"context": "when calling asserts.is_not_PoolColorArray(null)",
"fullname": "test_when_calling_is_not_PoolColorArray",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Vector3",
"context": "Then it passes",
"expected": "Null is not builtin: Vector3",
"success": true
} ],
"context": "when calling asserts.is_not_Vector3(null)",
"fullname": "test_when_calling_is_not_Vector3",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: PoolByteArray",
"context": "Then it passes",
"expected": "Null is not builtin: PoolByteArray",
"success": true
} ],
"context": "when calling asserts.is_not_PoolByteArray(null)",
"fullname": "test_when_calling_is_not_PoolByteArray",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Rect2",
"context": "Then it passes",
"expected": "Null is not builtin: Rect2",
"success": true
} ],
"context": "when calling asserts.is_not_Rect2(null)",
"fullname": "test_when_calling_is_not_Rect2",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 26,
"path": "res://tests/unit/is_not_instance.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/is_not_instance.test.gd",
"tags": [  ],
"test": ExtResource( 2 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 26
}, {
"context": "Given a Null Assertion",
"methods": [ {
"assertions": [ {
"actual": "|Object| [Node:3093] != null",
"context": "Then it passes",
"expected": "|Object| [Node:3093] != null",
"success": true
} ],
"context": "When calling Node is not null",
"fullname": "test_when_calling_node_is_not_null",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|null| Null == null",
"context": "Then it passes",
"expected": "|null| Null == null",
"success": true
} ],
"context": "When calling asserts.is_null(null)",
"fullname": "test_when_calling_null_is_null",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|Object| [Deleted Object] == null",
"context": "A Freed Node is null in Engine 3.2.2 or greater",
"expected": "|Object| [Deleted Object] == null",
"success": true
} ],
"context": "When calling freed object is null",
"fullname": "test_when_calling_freed_object_is_not_null",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 3,
"path": "res://tests/unit/null.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/null.test.gd",
"tags": [  ],
"test": ExtResource( 12 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 3
}, {
"context": "Given an Object Assertion",
"methods": [ {
"assertions": [ {
"actual": "[Node:3098] does not have meta: confusing",
"context": "Then it passes",
"expected": "[Node:3098] does not have meta: confusing",
"success": true
} ],
"context": "When calling asserts.object_has_meta with real key but null val",
"fullname": "test_when_calling_does_not_have_meta_real_key_null_value_pair",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:3098] has method: title",
"context": "Then it passes",
"expected": "[Node:3098] has method: title",
"success": true
} ],
"context": "When calling has_method('title')",
"fullname": "test_when_calling_has_method_title",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:3098] has user signal: dummy_signal",
"context": "Then it passes",
"expected": "[Node:3098] has user signal: dummy_signal",
"success": true
} ],
"context": "When calling obj_has_user_signal after adding a signal",
"fullname": "test_when_calling_has_user_signal_after_adding_a_signal",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:3098] does not have user signal: false_signal",
"context": "Then it passes",
"expected": "[Node:3098] does not have user signal: false_signal",
"success": true
} ],
"context": "When calling obj_does_not_have_user_signal with fake signal",
"fullname": "test_when_calling_does_not_have_user_signal",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is freed from memory",
"context": "Then it passes",
"expected": "Null is freed from memory",
"success": true
} ],
"context": "When calling asserts.is_freed(freed_object",
"fullname": "test_when_calling_freed_object_is_freed",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:3098] has meta: dummy",
"context": "Then it passes",
"expected": "[Node:3098] has meta: dummy",
"success": true
}, {
"actual": "[Node:3098] has meta: dummy",
"context": "Then it passes",
"expected": "[Node:3098] has meta: dummy",
"success": true
} ],
"context": "When calling asserts.object_has_meta() after adding metadata",
"fullname": "test_when_calling_has_meta_after_adding_metadata",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "[Node:3109] is not freed",
"context": "Then it passes",
"expected": "[Node:3109] is not freed",
"success": true
} ],
"context": "When calling asserts.is_not_freed(unfreed_object)",
"fullname": "test_when_calling_unfreed_object_is_not_freed",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:3098] does not have meta: bad_meta",
"context": "Then it passes",
"expected": "[Node:3098] does not have meta: bad_meta",
"success": true
} ],
"context": "When calling asserts.object_does_not_have_meta()",
"fullname": "test_when_calling_does_not_have_meta",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:3112] is queued for deletion",
"context": "Then it passes",
"expected": "[Node:3112] is queued for deletion",
"success": true
} ],
"context": "When calling asserts.object_is_queued for deletion after calling queue_free",
"fullname": "test_when_calling_obj_is_queued_for_deletion_after_calling_queue_free",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:3114] is blocking signals",
"context": "Then it passes",
"expected": "[Node:3114] is blocking signals",
"success": true
} ],
"context": "When calling is blocking signals while blocking signals",
"fullname": "test_is_blocking_signals",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:3116] is not blocking signals",
"context": "Then it passes",
"expected": "[Node:3116] is not blocking signals",
"success": true
} ],
"context": "When calling is not blocking signals while not blocking signals",
"fullname": "test_is_not_blocking_signals",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:3118] is not queued for deletion",
"context": "Then it passes",
"expected": "[Node:3118] is not queued for deletion",
"success": true
} ],
"context": "When calling asserts.object_is_not_for_queued_deletion after not calling queue free()",
"fullname": "test_when_calling_obj_is_not_for_queued_deletion_after_not_calling_queue_free",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:3098].builtin_dummy is connected to [Node:3098].title",
"context": "Then it passes",
"expected": "[Node:3098].builtin_dummy is connected to [Node:3098].title",
"success": true
} ],
"context": "When calling asserts object is connected with a valid connection",
"fullname": "test_when_calling_obj_is_connected_with_a_real_connection",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:3098].builtin_dummy is not connected to [Node:3098].title",
"context": "Then it passes",
"expected": "[Node:3098].builtin_dummy is not connected to [Node:3098].title",
"success": true
} ],
"context": "When calling asserts object is not connected with an invalid connection",
"fullname": "test_when_calling_obj_is_not_connected_with_an_invalid_connection",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:3098] does not have user signal: builtin_dummy",
"context": "Then it passes",
"expected": "[Node:3098] does not have user signal: builtin_dummy",
"success": true
} ],
"context": "When calling does not have user signal with class signal",
"fullname": "test_when_calling_does_not_have_user_signal_with_class_signal_constant",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 15,
"path": "res://tests/unit/object.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/object.test.gd",
"tags": [  ],
"test": ExtResource( 7 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 15
}, {
"context": "Given the Addition Operator",
"methods": [ {
"assertions": [ {
"actual": "|int| 4 is equal to |int| 4",
"context": "",
"expected": "|int| 4 is equal to |int| 4",
"success": true
} ],
"context": "When we add 2 to 2 we get 4",
"fullname": "test_add",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 8 is equal to |int| 8",
"context": "",
"expected": "|int| 8 is equal to |int| 8",
"success": true
} ],
"context": "When we add 5 to 3 we get 8",
"fullname": "test_add",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 13 is equal to |int| 13",
"context": "",
"expected": "|int| 13 is equal to |int| 13",
"success": true
} ],
"context": "When we add 7 to 6 we get 13",
"fullname": "test_add",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 0 is equal to |int| 0",
"context": "",
"expected": "|int| 0 is equal to |int| 0",
"success": true
} ],
"context": "When we subtract 2 from 2 we get 0",
"fullname": "test_subtract",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 2 is equal to |int| 2",
"context": "",
"expected": "|int| 2 is equal to |int| 2",
"success": true
} ],
"context": "When we subtract 5 from 3 we get 2",
"fullname": "test_subtract",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 1 is equal to |int| 1",
"context": "",
"expected": "|int| 1 is equal to |int| 1",
"success": true
} ],
"context": "When we subtract 7 from 6 we get 1",
"fullname": "test_subtract",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 6,
"path": "res://tests/unit/parameters.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/parameters.test.gd",
"tags": [  ],
"test": ExtResource( 16 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 6
}, {
"context": "Given A Range Assertion",
"methods": [ {
"assertions": [ {
"actual": "10 is not in range(0, 10)",
"context": "Then it passes",
"expected": "10 is not in range(0, 10)",
"success": true
} ],
"context": "When calling is (10) not in range (in range(0, 10)",
"fullname": "test_when_calling_is_not_in_range",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "0 is in range(0, 10)",
"context": "Then it passes",
"expected": "0 is in range(0, 10)",
"success": true
} ],
"context": "When calling is (0) in range(0, 10)",
"fullname": "test_when_calling_is_in_range",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 2,
"path": "res://tests/unit/range.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/range.test.gd",
"tags": [  ],
"test": ExtResource( 15 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 2
}, {
"context": "Given a String Assertion",
"methods": [ {
"assertions": [ {
"actual": "impsum does not begin with bleh lorem",
"context": "Then it passes",
"expected": "impsum does not begin with bleh lorem",
"success": true
} ],
"context": "When calling asserts.string_does_not_begin_with('lorem', 'impsum')",
"fullname": "test_when_calling_string_does_not_begin_with",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "lorem impsum begins with lorem",
"context": "Then it passes",
"expected": "lorem impsum begins with lorem",
"success": true
} ],
"context": "When calling asserts.string_begins_with('lorem', 'lorem impsum')",
"fullname": "test_when_calling_string_begins_with",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "lorem impsum ends with impsum",
"context": "Then it passes",
"expected": "lorem impsum ends with impsum",
"success": true
} ],
"context": "When calling asserts.string_ends_with('impsum', 'lorem impsum')",
"fullname": "test_when_calling_string_ends_with",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "impsum does not contain beem im",
"context": "Then it passes",
"expected": "impsum does not contain beem im",
"success": true
} ],
"context": "When calling asserts.string_does_not_contain('em im', 'impsum')",
"fullname": "test_when_calling_string_does_not_contain",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "lorem impsum contains em im",
"context": "Then it passes",
"expected": "lorem impsum contains em im",
"success": true
} ],
"context": "When calling asserts.string_contains('em im', 'lorem impsum')",
"fullname": "test_when_calling_string_contains",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "impsum does not end with lorem",
"context": "Then it passes",
"expected": "impsum does not end with lorem",
"success": true
} ],
"context": "When calling asserts.string_does_not_end_with('lorem', 'impsum')",
"fullname": "test_when_calling_string_does_not_end_with",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 6,
"path": "res://tests/unit/string.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/string.test.gd",
"tags": [  ],
"test": ExtResource( 9 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 6
}, {
"context": "Dummy Passing Test",
"methods": [ {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Passing!",
"expected": "|bool| True == true",
"success": true
} ],
"context": "This method passes",
"fullname": "test_this_method_passes",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 1,
"path": "res://tests/unit/suite.test.gd.DummyOne",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/suite.test.gd.DummyOne",
"tags": [  ],
"test": SubResource( 19 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 1
}, {
"context": "Dummy Test 2",
"methods": [ {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Passing!",
"expected": "|bool| True == true",
"success": true
} ],
"context": "This method passes",
"fullname": "test_this_method_passes",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 1,
"path": "res://tests/unit/suite.test.gd.DummyTwo",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/suite.test.gd.DummyTwo",
"tags": [  ],
"test": SubResource( 20 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 1
}, {
"context": "Given a Test Script",
"methods": [ {
"assertions": [ {
"actual": "|int| 10 is greater than |int| 1",
"context": "We get an array of multiple values back",
"expected": "|int| 10 is greater than |int| 1",
"success": true
}, {
"actual": "|int| 0 is not equal to |int| 9",
"context": "With different values",
"expected": "|int| 0 != |int| 9",
"success": true
}, {
"actual": "|int| 10 is greater than |int| 1",
"context": "And we can track multiple properties",
"expected": "|int| 10 is greater than |int| 1",
"success": true
} ],
"context": "When we record properties",
"fullname": "test_we_can_record_properties",
"passed": 3,
"success": true,
"time": 0.0,
"total": 3
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "if the test didn't break this works",
"expected": "|bool| True == true",
"success": true
} ],
"context": " we can omit describe",
"fullname": "test_we_can_omit_describe",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|int| 2 is equal to |int| 2",
"context": "",
"expected": "|int| 2 is equal to |int| 2",
"success": true
} ],
"context": " when we omit context we can see expected and got under method",
"fullname": "test_when_we_omit_context_we_can_see_expected_and_got_under_method",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
} ],
"passed": 3,
"path": "res://tests/unit/test.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/test.test.gd",
"tags": [  ],
"test": ExtResource( 19 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 3
}, {
"context": "Given a Signal Watcher",
"methods": [ {
"assertions": [ {
"actual": "signal: multiple was emitted from [Node:3165] 2",
"context": "Then we can track how many times we emitted it",
"expected": "signal: multiple was emitted from [Node:3165] 2",
"success": true
} ],
"context": "When we watch and signal and emit it multiple times",
"fullname": "test_When_we_watch_a_signal_and_emit_it_multiple_times",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Signal: example was not emitted from [Node:3165]",
"context": "Then it does not capture the non-emitted signal",
"expected": "Signal: example was not emitted from [Node:3165]",
"success": true
} ],
"context": "When we watch and do not emit a signal",
"fullname": "test_When_we_watch_and_do_not_emit_a_signal",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Signal: example was emitted from [Node:3165] with arguments: [1, 20, 5]",
"context": "Then it captures any arguments that where passed when the signal was emitted",
"expected": "Signal: example was emitted from [Node:3165] with arguments: [1, 20, 5]",
"success": true
} ],
"context": "When we watch a signal from an object with no bound variables",
"fullname": "test_When_we_watch_a_signal_from_an_object_with_no_bound_variables",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "signal: example was emitted from [Node:3165]",
"context": "Then it captures the emitted signal",
"expected": "signal: example was emitted from [Node:3165]",
"success": true
} ],
"context": "When we watch and emit a signal",
"fullname": "test_When_we_watch_and_emit_a_signal",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 4,
"path": "res://tests/unit/watcher.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/watcher.test.gd",
"tags": [  ],
"test": ExtResource( 17 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 4
}, {
"context": "Given a Yield",
"methods": [ {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then we set var a to true",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then we set var b to true",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we yield in start twice",
"fullname": "test_When_we_yield_in_start",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then we set var c to true",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then we set var d to true",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we yield in pre thrice",
"fullname": "test_When_we_yield_in_pre",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "[100, Null, Null, Null, Null, Null] is builtin: Array",
"context": "Then we get an array",
"expected": "[100, Null, Null, Null, Null, Null] is builtin: Array",
"success": true
}, {
"actual": "|int| 6 is equal to |int| 6",
"context": "Of size 6",
"expected": "|int| 6 is equal to |int| 6",
"success": true
}, {
"actual": "|int| 100 is equal to |int| 100",
"context": "Where element 0 is 100",
"expected": "|int| 100 is equal to |int| 100",
"success": true
} ],
"context": "When yield(self.yield_value()) returns",
"fullname": "test_When_we_yield_we_get_the_return_value",
"passed": 3,
"success": true,
"time": 0.0,
"total": 3
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then yielder is unpaused",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "The timeout signal of the yielder is connected",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we call until_timeout (with 1.0)",
"fullname": "test_When_we_call_until_timeout",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then the yielder is unpaused",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then the timeout signal of the yielder is connected",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then our signal is connected to the yielder",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we call until signal",
"fullname": "test_When_we_call_until_signal",
"passed": 3,
"success": true,
"time": 0.0,
"total": 3
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then yielder is not active",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When asserting against a test",
"fullname": "test_Yielder_is_not_active_when_asserting",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then we set var e to true",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then we set var f to true",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we yield twice in execute",
"fullname": "test_When_we_yield_in_execute",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then the timeout signal is disconnected",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then the signal-signal is disconnected",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When it is finished",
"fullname": "test_When_yielder_is_finished_signals_are_disconnected",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then the yielder is paused",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When a signal being yielded on is emitted",
"fullname": "test_When_a_signal_being_yielded_on_is_emitted_the_yielder_is_stopped",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then the yielder is paused",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "The timeout signal of the yielder is not connected",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When the yielder times out on until_timeout(0.1)",
"fullname": "test_When_the_yielder_times_out",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then the yielder is paused",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then the timeout signal of the yielder is disconnected",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then our signal to the yielder is disconnected",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When the yielder heres our signal",
"fullname": "test_When_the_yielder_hears_our_signal",
"passed": 3,
"success": true,
"time": 0.0,
"total": 3
} ],
"passed": 11,
"path": "res://tests/unit/yield.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/yield.test.gd",
"tags": [  ],
"test": ExtResource( 18 ),
"yield_time": 1.9
},
"success": true,
"time_taken": 0.0,
"total": 11
}, {
"context": "Given a Boolean Assertion",
"methods": [ {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then it passes",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When calling asserts.is_true(true)",
"fullname": "test_when_calling_asserts_is_true",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| False == false",
"context": "Then it passes",
"expected": "|bool| False == false",
"success": true
} ],
"context": "When calling asserts.is_false(false)",
"fullname": "test_when_calling_asserts_is_false",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| True != false",
"context": "",
"expected": "|bool| True == false",
"success": false
} ],
"context": " intentional failure",
"fullname": "test_intentional_failure",
"passed": 0,
"success": false,
"time": 0.0,
"total": 1
} ],
"passed": 2,
"path": "res://tests/integration/boolean.test.gd",
"source": {
"containers": [ "res://tests/integration", "res://tests" ],
"method": "",
"path": "res://tests/integration/boolean.test.gd",
"tags": [  ],
"test": ExtResource( 20 ),
"yield_time": 0.0
},
"success": false,
"time_taken": 0.0,
"total": 3
}, {
"context": "Default Args",
"methods": [ {
"assertions": [ {
"actual": "|bool| True == true",
"context": "If this method can be reached then we have doubled a script with default argument(s) properly!",
"expected": "|bool| True == true",
"success": true
} ],
"context": " default arguments of interpolate property",
"fullname": "test_default_arguments_of_interpolate_property",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 1,
"path": "res://tests/integration/default_args.test.gd",
"source": {
"containers": [ "res://tests/integration", "res://tests" ],
"method": "",
"path": "res://tests/integration/default_args.test.gd",
"tags": [  ],
"test": ExtResource( 10 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 1
}, {
"context": "Given is_on_floor",
"methods": [ {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then it can be stubbed",
"expected": "|bool| True == true",
"success": true
} ],
"context": "From a user-defined script",
"fullname": "test_stubbing_is_on_floor_method_from_user_defined_class",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then it can be stubbed",
"expected": "|bool| True == true",
"success": true
} ],
"context": "From a child node of a scene without scripts",
"fullname": "test_stubbing_is_on_floor_as_child_node_with_no_script",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then it can be stubbed",
"expected": "|bool| True == true",
"success": true
} ],
"context": "From a built-in KinematicBody2D2",
"fullname": "test_stubbing_is_on_floor_method_from_builtin_class2",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 3,
"path": "res://tests/integration/on_floor.test.gd",
"source": {
"containers": [ "res://tests/integration", "res://tests" ],
"method": "",
"path": "res://tests/integration/on_floor.test.gd",
"tags": [  ],
"test": ExtResource( 5 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 3
}, {
"context": "Given a Scene Director",
"methods": [ {
"assertions": [ {
"actual": "|NodePath| A is equal to |NodePath| A",
"context": "We have the correct NodePath Set",
"expected": "|NodePath| A is equal to |NodePath| A",
"success": true
} ],
"context": "When we add it to the tree it runs",
"fullname": "test_When_we_add_it_to_the_tree_it_runs",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 9999 is equal to |int| 9999",
"context": "Then we get the stubbed return value",
"expected": "|int| 9999 is equal to |int| 9999",
"success": true
} ],
"context": "When we call a method from the root node that we stubbed",
"fullname": "test_When_we_call_a_method_from_the_root_node_that_we_stubbed",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 999 is equal to |int| 999",
"context": "Then we get the stubbed return value",
"expected": "|int| 999 is equal to |int| 999",
"success": true
} ],
"context": "When we call a method from a child node that we stubbed",
"fullname": "test_When_we_call_a_method_from_a_child_node_that_we_stubbed",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 99 is equal to |int| 99",
"context": "Then we get the stubbed return value",
"expected": "|int| 99 is equal to |int| 99",
"success": true
} ],
"context": "When we call a method from a grandchild node that we stubbed",
"fullname": "test_When_we_call_a_method_from_a_grandchild_node_that_we_stubbed",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|Dictionary| {.:[Reference:3491], A:[Reference:3492], A/B:[Reference:3494], C:[Reference:3493], C/D:[Reference:3495]} is not equal to |Dictionary| {.:[Reference:3505], A:[Reference:3506], A/B:[Reference:3508], C:[Reference:3507], C/D:[Reference:3509]}",
"context": "Then they do not share resources",
"expected": "|Dictionary| {.:[Reference:3491], A:[Reference:3492], A/B:[Reference:3494], C:[Reference:3493], C/D:[Reference:3495]} != |Dictionary| {.:[Reference:3505], A:[Reference:3506], A/B:[Reference:3508], C:[Reference:3507], C/D:[Reference:3509]}",
"success": true
} ],
"context": "When we create two of it for the same scene",
"fullname": "test_When_we_create_two_of_it_for_the_same_scene",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 5,
"path": "res://tests/integration/scene_director.test.gd",
"source": {
"containers": [ "res://tests/integration", "res://tests" ],
"method": "",
"path": "res://tests/integration/scene_director.test.gd",
"tags": [  ],
"test": ExtResource( 4 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 5
}, {
"context": "Given a Script Director",
"methods": [ {
"assertions": [ {
"actual": "|Dictionary| {_enter_tree:{arguments:, default_arguments:}, _exit_tree:{arguments:, default_arguments:}, _get:{arguments:a, default_arguments:a}, _get_configuration_warning:{arguments:, default_arguments:}, _get_editor_description:{arguments:, default_arguments:}, _get_import_path:{arguments:, default_arguments:}, _get_property_list:{arguments:, default_arguments:}, _init:{arguments:, default_arguments:}, _input:{arguments:a, default_arguments:a}, _notification:{arguments:a, default_arguments:a}, _physics_process:{arguments:a, default_arguments:a}, _process:{arguments:a, default_arguments:a}, _ready:{arguments:, default_arguments:}, _set:{arguments:a, b, default_arguments:a, b}, _set_editor_description:{arguments:a, default_arguments:a}, _set_import_path:{arguments:a, default_arguments:a}, _to_string:{arguments:, default_arguments:}, _unhandled_input:{arguments:a, default_arguments:a}, _unhandled_key_input:{arguments:a, default_arguments:a}, add:{arguments:a, b, default_arguments:a, b}, add_child:{arguments:a, b, default_arguments:a, b = False}, add_child_below_node:{arguments:a, b, c, default_arguments:a, b, c = False}, add_to_group:{arguments:a, b, default_arguments:a, b = False}, add_user_signal:{arguments:a, b, default_arguments:a, b = []}, call:{arguments:a, default_arguments:a}, call_deferred:{arguments:a, default_arguments:a}, callv:{arguments:a, b, default_arguments:a, b}, can_process:{arguments:, default_arguments:}, can_translate_messages:{arguments:, default_arguments:}, connect:{arguments:a, b, c, d, e, default_arguments:a, b, c, d = [], e = 0}, disconnect:{arguments:a, b, c, default_arguments:a, b, c}, divide:{arguments:a, b, default_arguments:a, b}, duplicate:{arguments:a, default_arguments:a = 15}, emit_signal:{arguments:a, default_arguments:a}, find_node:{arguments:a, b, c, default_arguments:a, b = True, c = True}, find_parent:{arguments:a, default_arguments:a}, free:{arguments:, default_arguments:}, get:{arguments:a, default_arguments:a}, get_child:{arguments:a, default_arguments:a}, get_child_count:{arguments:, default_arguments:}, get_children:{arguments:, default_arguments:}, get_class:{arguments:, default_arguments:}, get_custom_multiplayer:{arguments:, default_arguments:}, get_filename:{arguments:, default_arguments:}, get_groups:{arguments:, default_arguments:}, get_incoming_connections:{arguments:, default_arguments:}, get_index:{arguments:, default_arguments:}, get_indexed:{arguments:a, default_arguments:a}, get_instance_id:{arguments:, default_arguments:}, get_meta:{arguments:a, default_arguments:a}, get_meta_list:{arguments:, default_arguments:}, get_method_list:{arguments:, default_arguments:}, get_multiplayer:{arguments:, default_arguments:}, get_name:{arguments:, default_arguments:}, get_network_master:{arguments:, default_arguments:}, get_node:{arguments:a, default_arguments:a}, get_node_and_resource:{arguments:a, default_arguments:a}, get_node_or_null:{arguments:a, default_arguments:a}, get_owner:{arguments:, default_arguments:}, get_parent:{arguments:, default_arguments:}, get_path:{arguments:, default_arguments:}, get_path_to:{arguments:a, default_arguments:a}, get_pause_mode:{arguments:, default_arguments:}, get_physics_process_delta_time:{arguments:, default_arguments:}, get_position_in_parent:{arguments:, default_arguments:}, get_process_delta_time:{arguments:, default_arguments:}, get_process_priority:{arguments:, default_arguments:}, get_property_list:{arguments:, default_arguments:}, get_scene_instance_load_placeholder:{arguments:, default_arguments:}, get_script:{arguments:, default_arguments:}, get_signal_connection_list:{arguments:a, default_arguments:a}, get_signal_list:{arguments:, default_arguments:}, get_tree:{arguments:, default_arguments:}, get_viewport:{arguments:, default_arguments:}, has_meta:{arguments:a, default_arguments:a}, has_method:{arguments:a, default_arguments:a}, has_node:{arguments:a, default_arguments:a}, has_node_and_resource:{arguments:a, default_arguments:a}, has_signal:{arguments:a, default_arguments:a}, has_user_signal:{arguments:a, default_arguments:a}, is_a_parent_of:{arguments:a, default_arguments:a}, is_blocking_signals:{arguments:, default_arguments:}, is_class:{arguments:a, default_arguments:a}, is_connected:{arguments:a, b, c, default_arguments:a, b, c}, is_displayed_folded:{arguments:, default_arguments:}, is_greater_than:{arguments:a, default_arguments:a}, is_in_group:{arguments:a, default_arguments:a}, is_inside_tree:{arguments:, default_arguments:}, is_network_master:{arguments:, default_arguments:}, is_physics_processing:{arguments:, default_arguments:}, is_physics_processing_internal:{arguments:, default_arguments:}, is_processing:{arguments:, default_arguments:}, is_processing_input:{arguments:, default_arguments:}, is_processing_internal:{arguments:, default_arguments:}, is_processing_unhandled_input:{arguments:, default_arguments:}, is_processing_unhandled_key_input:{arguments:, default_arguments:}, is_queued_for_deletion:{arguments:, default_arguments:}, math_fight:{arguments:, default_arguments:}, move_child:{arguments:a, b, default_arguments:a, b}, multiply:{arguments:a, b, default_arguments:a, b}, notification:{arguments:a, b, default_arguments:a, b = False}, pi:{arguments:, default_arguments:}, print_stray_nodes:{arguments:, default_arguments:}, print_tree:{arguments:, default_arguments:}, print_tree_pretty:{arguments:, default_arguments:}, propagate_call:{arguments:a, b, c, default_arguments:a, b = [], c = False}, propagate_notification:{arguments:a, default_arguments:a}, property_list_changed_notify:{arguments:, default_arguments:}, queue_free:{arguments:, default_arguments:}, raise:{arguments:, default_arguments:}, remove_and_skip:{arguments:, default_arguments:}, remove_child:{arguments:a, default_arguments:a}, remove_from_group:{arguments:a, default_arguments:a}, remove_meta:{arguments:a, default_arguments:a}, replace_by:{arguments:a, b, default_arguments:a, b = False}, request_ready:{arguments:, default_arguments:}, rpc:{arguments:a, default_arguments:a}, rpc_config:{arguments:a, b, default_arguments:a, b}, rpc_id:{arguments:a, b, default_arguments:a, b}, rpc_unreliable:{arguments:a, default_arguments:a}, rpc_unreliable_id:{arguments:a, b, default_arguments:a, b}, rset:{arguments:a, b, default_arguments:a, b}, rset_config:{arguments:a, b, default_arguments:a, b}, rset_id:{arguments:a, b, c, default_arguments:a, b, c}, rset_unreliable:{arguments:a, b, default_arguments:a, b}, rset_unreliable_id:{arguments:a, b, c, default_arguments:a, b, c}, set:{arguments:a, b, default_arguments:a, b}, set_block_signals:{arguments:a, default_arguments:a}, set_custom_multiplayer:{arguments:a, default_arguments:a}, set_deferred:{arguments:a, b, default_arguments:a, b}, set_display_folded:{arguments:a, default_arguments:a}, set_filename:{arguments:a, default_arguments:a}, set_indexed:{arguments:a, b, default_arguments:a, b}, set_message_translation:{arguments:a, default_arguments:a}, set_meta:{arguments:a, b, default_arguments:a, b}, set_name:{arguments:a, default_arguments:a}, set_network_master:{arguments:a, b, default_arguments:a, b = True}, set_owner:{arguments:a, default_arguments:a}, set_pause_mode:{arguments:a, default_arguments:a}, set_physics_process:{arguments:a, default_arguments:a}, set_physics_process_internal:{arguments:a, default_arguments:a}, set_process:{arguments:a, default_arguments:a}, set_process_input:{arguments:a, default_arguments:a}, set_process_internal:{arguments:a, default_arguments:a}, set_process_priority:{arguments:a, default_arguments:a}, set_process_unhandled_input:{arguments:a, default_arguments:a}, set_process_unhandled_key_input:{arguments:a, default_arguments:a}, set_scene_instance_load_placeholder:{arguments:a, default_arguments:a}, set_script:{arguments:a, default_arguments:a}, subtract:{arguments:a, b, default_arguments:a, b}, sum:{arguments:a, default_arguments:a}, to_string:{arguments:, default_arguments:}, tr:{arguments:a, default_arguments:a}, update_configuration_warning:{arguments:, default_arguments:}} is not equal to |Dictionary| {_enter_tree:{arguments:, default_arguments:}, _exit_tree:{arguments:, default_arguments:}, _get:{arguments:a, default_arguments:a}, _get_configuration_warning:{arguments:, default_arguments:}, _get_editor_description:{arguments:, default_arguments:}, _get_import_path:{arguments:, default_arguments:}, _get_property_list:{arguments:, default_arguments:}, _init:{arguments:, default_arguments:}, _input:{arguments:a, default_arguments:a}, _notification:{arguments:a, default_arguments:a}, _physics_process:{arguments:a, default_arguments:a}, _process:{arguments:a, default_arguments:a}, _ready:{arguments:, default_arguments:}, _set:{arguments:a, b, default_arguments:a, b}, _set_editor_description:{arguments:a, default_arguments:a}, _set_import_path:{arguments:a, default_arguments:a}, _to_string:{arguments:, default_arguments:}, _unhandled_input:{arguments:a, default_arguments:a}, _unhandled_key_input:{arguments:a, default_arguments:a}, add:{arguments:a, b, default_arguments:a, b}, add_child:{arguments:a, b, default_arguments:a, b = False}, add_child_below_node:{arguments:a, b, c, default_arguments:a, b, c = False}, add_to_group:{arguments:a, b, default_arguments:a, b = False}, add_user_signal:{arguments:a, b, default_arguments:a, b = []}, call:{arguments:a, default_arguments:a}, call_deferred:{arguments:a, default_arguments:a}, callv:{arguments:a, b, default_arguments:a, b}, can_process:{arguments:, default_arguments:}, can_translate_messages:{arguments:, default_arguments:}, connect:{arguments:a, b, c, d, e, default_arguments:a, b, c, d = [], e = 0}, disconnect:{arguments:a, b, c, default_arguments:a, b, c}, divide:{arguments:a, b, default_arguments:a, b}, duplicate:{arguments:a, default_arguments:a = 15}, emit_signal:{arguments:a, default_arguments:a}, find_node:{arguments:a, b, c, default_arguments:a, b = True, c = True}, find_parent:{arguments:a, default_arguments:a}, free:{arguments:, default_arguments:}, get:{arguments:a, default_arguments:a}, get_child:{arguments:a, default_arguments:a}, get_child_count:{arguments:, default_arguments:}, get_children:{arguments:, default_arguments:}, get_class:{arguments:, default_arguments:}, get_custom_multiplayer:{arguments:, default_arguments:}, get_filename:{arguments:, default_arguments:}, get_groups:{arguments:, default_arguments:}, get_incoming_connections:{arguments:, default_arguments:}, get_index:{arguments:, default_arguments:}, get_indexed:{arguments:a, default_arguments:a}, get_instance_id:{arguments:, default_arguments:}, get_meta:{arguments:a, default_arguments:a}, get_meta_list:{arguments:, default_arguments:}, get_method_list:{arguments:, default_arguments:}, get_multiplayer:{arguments:, default_arguments:}, get_name:{arguments:, default_arguments:}, get_network_master:{arguments:, default_arguments:}, get_node:{arguments:a, default_arguments:a}, get_node_and_resource:{arguments:a, default_arguments:a}, get_node_or_null:{arguments:a, default_arguments:a}, get_owner:{arguments:, default_arguments:}, get_parent:{arguments:, default_arguments:}, get_path:{arguments:, default_arguments:}, get_path_to:{arguments:a, default_arguments:a}, get_pause_mode:{arguments:, default_arguments:}, get_physics_process_delta_time:{arguments:, default_arguments:}, get_position_in_parent:{arguments:, default_arguments:}, get_process_delta_time:{arguments:, default_arguments:}, get_process_priority:{arguments:, default_arguments:}, get_property_list:{arguments:, default_arguments:}, get_scene_instance_load_placeholder:{arguments:, default_arguments:}, get_script:{arguments:, default_arguments:}, get_signal_connection_list:{arguments:a, default_arguments:a}, get_signal_list:{arguments:, default_arguments:}, get_tree:{arguments:, default_arguments:}, get_viewport:{arguments:, default_arguments:}, has_meta:{arguments:a, default_arguments:a}, has_method:{arguments:a, default_arguments:a}, has_node:{arguments:a, default_arguments:a}, has_node_and_resource:{arguments:a, default_arguments:a}, has_signal:{arguments:a, default_arguments:a}, has_user_signal:{arguments:a, default_arguments:a}, is_a_parent_of:{arguments:a, default_arguments:a}, is_blocking_signals:{arguments:, default_arguments:}, is_class:{arguments:a, default_arguments:a}, is_connected:{arguments:a, b, c, default_arguments:a, b, c}, is_displayed_folded:{arguments:, default_arguments:}, is_greater_than:{arguments:a, default_arguments:a}, is_in_group:{arguments:a, default_arguments:a}, is_inside_tree:{arguments:, default_arguments:}, is_network_master:{arguments:, default_arguments:}, is_physics_processing:{arguments:, default_arguments:}, is_physics_processing_internal:{arguments:, default_arguments:}, is_processing:{arguments:, default_arguments:}, is_processing_input:{arguments:, default_arguments:}, is_processing_internal:{arguments:, default_arguments:}, is_processing_unhandled_input:{arguments:, default_arguments:}, is_processing_unhandled_key_input:{arguments:, default_arguments:}, is_queued_for_deletion:{arguments:, default_arguments:}, math_fight:{arguments:, default_arguments:}, move_child:{arguments:a, b, default_arguments:a, b}, multiply:{arguments:a, b, default_arguments:a, b}, notification:{arguments:a, b, default_arguments:a, b = False}, pi:{arguments:, default_arguments:}, print_stray_nodes:{arguments:, default_arguments:}, print_tree:{arguments:, default_arguments:}, print_tree_pretty:{arguments:, default_arguments:}, propagate_call:{arguments:a, b, c, default_arguments:a, b = [], c = False}, propagate_notification:{arguments:a, default_arguments:a}, property_list_changed_notify:{arguments:, default_arguments:}, queue_free:{arguments:, default_arguments:}, raise:{arguments:, default_arguments:}, remove_and_skip:{arguments:, default_arguments:}, remove_child:{arguments:a, default_arguments:a}, remove_from_group:{arguments:a, default_arguments:a}, remove_meta:{arguments:a, default_arguments:a}, replace_by:{arguments:a, b, default_arguments:a, b = False}, request_ready:{arguments:, default_arguments:}, rpc:{arguments:a, default_arguments:a}, rpc_config:{arguments:a, b, default_arguments:a, b}, rpc_id:{arguments:a, b, default_arguments:a, b}, rpc_unreliable:{arguments:a, default_arguments:a}, rpc_unreliable_id:{arguments:a, b, default_arguments:a, b}, rset:{arguments:a, b, default_arguments:a, b}, rset_config:{arguments:a, b, default_arguments:a, b}, rset_id:{arguments:a, b, c, default_arguments:a, b, c}, rset_unreliable:{arguments:a, b, default_arguments:a, b}, rset_unreliable_id:{arguments:a, b, c, default_arguments:a, b, c}, set:{arguments:a, b, default_arguments:a, b}, set_block_signals:{arguments:a, default_arguments:a}, set_custom_multiplayer:{arguments:a, default_arguments:a}, set_deferred:{arguments:a, b, default_arguments:a, b}, set_display_folded:{arguments:a, default_arguments:a}, set_filename:{arguments:a, default_arguments:a}, set_indexed:{arguments:a, b, default_arguments:a, b}, set_message_translation:{arguments:a, default_arguments:a}, set_meta:{arguments:a, b, default_arguments:a, b}, set_name:{arguments:a, default_arguments:a}, set_network_master:{arguments:a, b, default_arguments:a, b = True}, set_owner:{arguments:a, default_arguments:a}, set_pause_mode:{arguments:a, default_arguments:a}, set_physics_process:{arguments:a, default_arguments:a}, set_physics_process_internal:{arguments:a, default_arguments:a}, set_process:{arguments:a, default_arguments:a}, set_process_input:{arguments:a, default_arguments:a}, set_process_internal:{arguments:a, default_arguments:a}, set_process_priority:{arguments:a, default_arguments:a}, set_process_unhandled_input:{arguments:a, default_arguments:a}, set_process_unhandled_key_input:{arguments:a, default_arguments:a}, set_scene_instance_load_placeholder:{arguments:a, default_arguments:a}, set_script:{arguments:a, default_arguments:a}, subtract:{arguments:a, b, default_arguments:a, b}, sum:{arguments:a, default_arguments:a}, to_string:{arguments:, default_arguments:}, tr:{arguments:a, default_arguments:a}, update_configuration_warning:{arguments:, default_arguments:}}",
"context": "Then they do not share resources",
"expected": "|Dictionary| {_enter_tree:{arguments:, default_arguments:}, _exit_tree:{arguments:, default_arguments:}, _get:{arguments:a, default_arguments:a}, _get_configuration_warning:{arguments:, default_arguments:}, _get_editor_description:{arguments:, default_arguments:}, _get_import_path:{arguments:, default_arguments:}, _get_property_list:{arguments:, default_arguments:}, _init:{arguments:, default_arguments:}, _input:{arguments:a, default_arguments:a}, _notification:{arguments:a, default_arguments:a}, _physics_process:{arguments:a, default_arguments:a}, _process:{arguments:a, default_arguments:a}, _ready:{arguments:, default_arguments:}, _set:{arguments:a, b, default_arguments:a, b}, _set_editor_description:{arguments:a, default_arguments:a}, _set_import_path:{arguments:a, default_arguments:a}, _to_string:{arguments:, default_arguments:}, _unhandled_input:{arguments:a, default_arguments:a}, _unhandled_key_input:{arguments:a, default_arguments:a}, add:{arguments:a, b, default_arguments:a, b}, add_child:{arguments:a, b, default_arguments:a, b = False}, add_child_below_node:{arguments:a, b, c, default_arguments:a, b, c = False}, add_to_group:{arguments:a, b, default_arguments:a, b = False}, add_user_signal:{arguments:a, b, default_arguments:a, b = []}, call:{arguments:a, default_arguments:a}, call_deferred:{arguments:a, default_arguments:a}, callv:{arguments:a, b, default_arguments:a, b}, can_process:{arguments:, default_arguments:}, can_translate_messages:{arguments:, default_arguments:}, connect:{arguments:a, b, c, d, e, default_arguments:a, b, c, d = [], e = 0}, disconnect:{arguments:a, b, c, default_arguments:a, b, c}, divide:{arguments:a, b, default_arguments:a, b}, duplicate:{arguments:a, default_arguments:a = 15}, emit_signal:{arguments:a, default_arguments:a}, find_node:{arguments:a, b, c, default_arguments:a, b = True, c = True}, find_parent:{arguments:a, default_arguments:a}, free:{arguments:, default_arguments:}, get:{arguments:a, default_arguments:a}, get_child:{arguments:a, default_arguments:a}, get_child_count:{arguments:, default_arguments:}, get_children:{arguments:, default_arguments:}, get_class:{arguments:, default_arguments:}, get_custom_multiplayer:{arguments:, default_arguments:}, get_filename:{arguments:, default_arguments:}, get_groups:{arguments:, default_arguments:}, get_incoming_connections:{arguments:, default_arguments:}, get_index:{arguments:, default_arguments:}, get_indexed:{arguments:a, default_arguments:a}, get_instance_id:{arguments:, default_arguments:}, get_meta:{arguments:a, default_arguments:a}, get_meta_list:{arguments:, default_arguments:}, get_method_list:{arguments:, default_arguments:}, get_multiplayer:{arguments:, default_arguments:}, get_name:{arguments:, default_arguments:}, get_network_master:{arguments:, default_arguments:}, get_node:{arguments:a, default_arguments:a}, get_node_and_resource:{arguments:a, default_arguments:a}, get_node_or_null:{arguments:a, default_arguments:a}, get_owner:{arguments:, default_arguments:}, get_parent:{arguments:, default_arguments:}, get_path:{arguments:, default_arguments:}, get_path_to:{arguments:a, default_arguments:a}, get_pause_mode:{arguments:, default_arguments:}, get_physics_process_delta_time:{arguments:, default_arguments:}, get_position_in_parent:{arguments:, default_arguments:}, get_process_delta_time:{arguments:, default_arguments:}, get_process_priority:{arguments:, default_arguments:}, get_property_list:{arguments:, default_arguments:}, get_scene_instance_load_placeholder:{arguments:, default_arguments:}, get_script:{arguments:, default_arguments:}, get_signal_connection_list:{arguments:a, default_arguments:a}, get_signal_list:{arguments:, default_arguments:}, get_tree:{arguments:, default_arguments:}, get_viewport:{arguments:, default_arguments:}, has_meta:{arguments:a, default_arguments:a}, has_method:{arguments:a, default_arguments:a}, has_node:{arguments:a, default_arguments:a}, has_node_and_resource:{arguments:a, default_arguments:a}, has_signal:{arguments:a, default_arguments:a}, has_user_signal:{arguments:a, default_arguments:a}, is_a_parent_of:{arguments:a, default_arguments:a}, is_blocking_signals:{arguments:, default_arguments:}, is_class:{arguments:a, default_arguments:a}, is_connected:{arguments:a, b, c, default_arguments:a, b, c}, is_displayed_folded:{arguments:, default_arguments:}, is_greater_than:{arguments:a, default_arguments:a}, is_in_group:{arguments:a, default_arguments:a}, is_inside_tree:{arguments:, default_arguments:}, is_network_master:{arguments:, default_arguments:}, is_physics_processing:{arguments:, default_arguments:}, is_physics_processing_internal:{arguments:, default_arguments:}, is_processing:{arguments:, default_arguments:}, is_processing_input:{arguments:, default_arguments:}, is_processing_internal:{arguments:, default_arguments:}, is_processing_unhandled_input:{arguments:, default_arguments:}, is_processing_unhandled_key_input:{arguments:, default_arguments:}, is_queued_for_deletion:{arguments:, default_arguments:}, math_fight:{arguments:, default_arguments:}, move_child:{arguments:a, b, default_arguments:a, b}, multiply:{arguments:a, b, default_arguments:a, b}, notification:{arguments:a, b, default_arguments:a, b = False}, pi:{arguments:, default_arguments:}, print_stray_nodes:{arguments:, default_arguments:}, print_tree:{arguments:, default_arguments:}, print_tree_pretty:{arguments:, default_arguments:}, propagate_call:{arguments:a, b, c, default_arguments:a, b = [], c = False}, propagate_notification:{arguments:a, default_arguments:a}, property_list_changed_notify:{arguments:, default_arguments:}, queue_free:{arguments:, default_arguments:}, raise:{arguments:, default_arguments:}, remove_and_skip:{arguments:, default_arguments:}, remove_child:{arguments:a, default_arguments:a}, remove_from_group:{arguments:a, default_arguments:a}, remove_meta:{arguments:a, default_arguments:a}, replace_by:{arguments:a, b, default_arguments:a, b = False}, request_ready:{arguments:, default_arguments:}, rpc:{arguments:a, default_arguments:a}, rpc_config:{arguments:a, b, default_arguments:a, b}, rpc_id:{arguments:a, b, default_arguments:a, b}, rpc_unreliable:{arguments:a, default_arguments:a}, rpc_unreliable_id:{arguments:a, b, default_arguments:a, b}, rset:{arguments:a, b, default_arguments:a, b}, rset_config:{arguments:a, b, default_arguments:a, b}, rset_id:{arguments:a, b, c, default_arguments:a, b, c}, rset_unreliable:{arguments:a, b, default_arguments:a, b}, rset_unreliable_id:{arguments:a, b, c, default_arguments:a, b, c}, set:{arguments:a, b, default_arguments:a, b}, set_block_signals:{arguments:a, default_arguments:a}, set_custom_multiplayer:{arguments:a, default_arguments:a}, set_deferred:{arguments:a, b, default_arguments:a, b}, set_display_folded:{arguments:a, default_arguments:a}, set_filename:{arguments:a, default_arguments:a}, set_indexed:{arguments:a, b, default_arguments:a, b}, set_message_translation:{arguments:a, default_arguments:a}, set_meta:{arguments:a, b, default_arguments:a, b}, set_name:{arguments:a, default_arguments:a}, set_network_master:{arguments:a, b, default_arguments:a, b = True}, set_owner:{arguments:a, default_arguments:a}, set_pause_mode:{arguments:a, default_arguments:a}, set_physics_process:{arguments:a, default_arguments:a}, set_physics_process_internal:{arguments:a, default_arguments:a}, set_process:{arguments:a, default_arguments:a}, set_process_input:{arguments:a, default_arguments:a}, set_process_internal:{arguments:a, default_arguments:a}, set_process_priority:{arguments:a, default_arguments:a}, set_process_unhandled_input:{arguments:a, default_arguments:a}, set_process_unhandled_key_input:{arguments:a, default_arguments:a}, set_scene_instance_load_placeholder:{arguments:a, default_arguments:a}, set_script:{arguments:a, default_arguments:a}, subtract:{arguments:a, b, default_arguments:a, b}, sum:{arguments:a, default_arguments:a}, to_string:{arguments:, default_arguments:}, tr:{arguments:a, default_arguments:a}, update_configuration_warning:{arguments:, default_arguments:}} != |Dictionary| {_enter_tree:{arguments:, default_arguments:}, _exit_tree:{arguments:, default_arguments:}, _get:{arguments:a, default_arguments:a}, _get_configuration_warning:{arguments:, default_arguments:}, _get_editor_description:{arguments:, default_arguments:}, _get_import_path:{arguments:, default_arguments:}, _get_property_list:{arguments:, default_arguments:}, _init:{arguments:, default_arguments:}, _input:{arguments:a, default_arguments:a}, _notification:{arguments:a, default_arguments:a}, _physics_process:{arguments:a, default_arguments:a}, _process:{arguments:a, default_arguments:a}, _ready:{arguments:, default_arguments:}, _set:{arguments:a, b, default_arguments:a, b}, _set_editor_description:{arguments:a, default_arguments:a}, _set_import_path:{arguments:a, default_arguments:a}, _to_string:{arguments:, default_arguments:}, _unhandled_input:{arguments:a, default_arguments:a}, _unhandled_key_input:{arguments:a, default_arguments:a}, add:{arguments:a, b, default_arguments:a, b}, add_child:{arguments:a, b, default_arguments:a, b = False}, add_child_below_node:{arguments:a, b, c, default_arguments:a, b, c = False}, add_to_group:{arguments:a, b, default_arguments:a, b = False}, add_user_signal:{arguments:a, b, default_arguments:a, b = []}, call:{arguments:a, default_arguments:a}, call_deferred:{arguments:a, default_arguments:a}, callv:{arguments:a, b, default_arguments:a, b}, can_process:{arguments:, default_arguments:}, can_translate_messages:{arguments:, default_arguments:}, connect:{arguments:a, b, c, d, e, default_arguments:a, b, c, d = [], e = 0}, disconnect:{arguments:a, b, c, default_arguments:a, b, c}, divide:{arguments:a, b, default_arguments:a, b}, duplicate:{arguments:a, default_arguments:a = 15}, emit_signal:{arguments:a, default_arguments:a}, find_node:{arguments:a, b, c, default_arguments:a, b = True, c = True}, find_parent:{arguments:a, default_arguments:a}, free:{arguments:, default_arguments:}, get:{arguments:a, default_arguments:a}, get_child:{arguments:a, default_arguments:a}, get_child_count:{arguments:, default_arguments:}, get_children:{arguments:, default_arguments:}, get_class:{arguments:, default_arguments:}, get_custom_multiplayer:{arguments:, default_arguments:}, get_filename:{arguments:, default_arguments:}, get_groups:{arguments:, default_arguments:}, get_incoming_connections:{arguments:, default_arguments:}, get_index:{arguments:, default_arguments:}, get_indexed:{arguments:a, default_arguments:a}, get_instance_id:{arguments:, default_arguments:}, get_meta:{arguments:a, default_arguments:a}, get_meta_list:{arguments:, default_arguments:}, get_method_list:{arguments:, default_arguments:}, get_multiplayer:{arguments:, default_arguments:}, get_name:{arguments:, default_arguments:}, get_network_master:{arguments:, default_arguments:}, get_node:{arguments:a, default_arguments:a}, get_node_and_resource:{arguments:a, default_arguments:a}, get_node_or_null:{arguments:a, default_arguments:a}, get_owner:{arguments:, default_arguments:}, get_parent:{arguments:, default_arguments:}, get_path:{arguments:, default_arguments:}, get_path_to:{arguments:a, default_arguments:a}, get_pause_mode:{arguments:, default_arguments:}, get_physics_process_delta_time:{arguments:, default_arguments:}, get_position_in_parent:{arguments:, default_arguments:}, get_process_delta_time:{arguments:, default_arguments:}, get_process_priority:{arguments:, default_arguments:}, get_property_list:{arguments:, default_arguments:}, get_scene_instance_load_placeholder:{arguments:, default_arguments:}, get_script:{arguments:, default_arguments:}, get_signal_connection_list:{arguments:a, default_arguments:a}, get_signal_list:{arguments:, default_arguments:}, get_tree:{arguments:, default_arguments:}, get_viewport:{arguments:, default_arguments:}, has_meta:{arguments:a, default_arguments:a}, has_method:{arguments:a, default_arguments:a}, has_node:{arguments:a, default_arguments:a}, has_node_and_resource:{arguments:a, default_arguments:a}, has_signal:{arguments:a, default_arguments:a}, has_user_signal:{arguments:a, default_arguments:a}, is_a_parent_of:{arguments:a, default_arguments:a}, is_blocking_signals:{arguments:, default_arguments:}, is_class:{arguments:a, default_arguments:a}, is_connected:{arguments:a, b, c, default_arguments:a, b, c}, is_displayed_folded:{arguments:, default_arguments:}, is_greater_than:{arguments:a, default_arguments:a}, is_in_group:{arguments:a, default_arguments:a}, is_inside_tree:{arguments:, default_arguments:}, is_network_master:{arguments:, default_arguments:}, is_physics_processing:{arguments:, default_arguments:}, is_physics_processing_internal:{arguments:, default_arguments:}, is_processing:{arguments:, default_arguments:}, is_processing_input:{arguments:, default_arguments:}, is_processing_internal:{arguments:, default_arguments:}, is_processing_unhandled_input:{arguments:, default_arguments:}, is_processing_unhandled_key_input:{arguments:, default_arguments:}, is_queued_for_deletion:{arguments:, default_arguments:}, math_fight:{arguments:, default_arguments:}, move_child:{arguments:a, b, default_arguments:a, b}, multiply:{arguments:a, b, default_arguments:a, b}, notification:{arguments:a, b, default_arguments:a, b = False}, pi:{arguments:, default_arguments:}, print_stray_nodes:{arguments:, default_arguments:}, print_tree:{arguments:, default_arguments:}, print_tree_pretty:{arguments:, default_arguments:}, propagate_call:{arguments:a, b, c, default_arguments:a, b = [], c = False}, propagate_notification:{arguments:a, default_arguments:a}, property_list_changed_notify:{arguments:, default_arguments:}, queue_free:{arguments:, default_arguments:}, raise:{arguments:, default_arguments:}, remove_and_skip:{arguments:, default_arguments:}, remove_child:{arguments:a, default_arguments:a}, remove_from_group:{arguments:a, default_arguments:a}, remove_meta:{arguments:a, default_arguments:a}, replace_by:{arguments:a, b, default_arguments:a, b = False}, request_ready:{arguments:, default_arguments:}, rpc:{arguments:a, default_arguments:a}, rpc_config:{arguments:a, b, default_arguments:a, b}, rpc_id:{arguments:a, b, default_arguments:a, b}, rpc_unreliable:{arguments:a, default_arguments:a}, rpc_unreliable_id:{arguments:a, b, default_arguments:a, b}, rset:{arguments:a, b, default_arguments:a, b}, rset_config:{arguments:a, b, default_arguments:a, b}, rset_id:{arguments:a, b, c, default_arguments:a, b, c}, rset_unreliable:{arguments:a, b, default_arguments:a, b}, rset_unreliable_id:{arguments:a, b, c, default_arguments:a, b, c}, set:{arguments:a, b, default_arguments:a, b}, set_block_signals:{arguments:a, default_arguments:a}, set_custom_multiplayer:{arguments:a, default_arguments:a}, set_deferred:{arguments:a, b, default_arguments:a, b}, set_display_folded:{arguments:a, default_arguments:a}, set_filename:{arguments:a, default_arguments:a}, set_indexed:{arguments:a, b, default_arguments:a, b}, set_message_translation:{arguments:a, default_arguments:a}, set_meta:{arguments:a, b, default_arguments:a, b}, set_name:{arguments:a, default_arguments:a}, set_network_master:{arguments:a, b, default_arguments:a, b = True}, set_owner:{arguments:a, default_arguments:a}, set_pause_mode:{arguments:a, default_arguments:a}, set_physics_process:{arguments:a, default_arguments:a}, set_physics_process_internal:{arguments:a, default_arguments:a}, set_process:{arguments:a, default_arguments:a}, set_process_input:{arguments:a, default_arguments:a}, set_process_internal:{arguments:a, default_arguments:a}, set_process_priority:{arguments:a, default_arguments:a}, set_process_unhandled_input:{arguments:a, default_arguments:a}, set_process_unhandled_key_input:{arguments:a, default_arguments:a}, set_scene_instance_load_placeholder:{arguments:a, default_arguments:a}, set_script:{arguments:a, default_arguments:a}, subtract:{arguments:a, b, default_arguments:a, b}, sum:{arguments:a, default_arguments:a}, to_string:{arguments:, default_arguments:}, tr:{arguments:a, default_arguments:a}, update_configuration_warning:{arguments:, default_arguments:}}",
"success": true
} ],
"context": "When we create two of it for the same script",
"fullname": "test_When_we_create_two_of_it_for_the_same_script",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|Object| [Node:3521] is equal to |Object| [Node:3521]",
"context": "Then we get the same double back",
"expected": "|Object| [Node:3521] is equal to |Object| [Node:3521]",
"success": true
} ],
"context": "When we call the double the second time",
"fullname": "test_When_we_call_double_a_second_time_on",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Reference:3528] is instance of class: [GDScript:1564]",
"context": "Then we get that inner class back",
"expected": "[Reference:3528] is instance of class: [GDScript:1564]",
"success": true
} ],
"context": "When we double an inner class",
"fullname": "test_When_we_double_an_inner_class",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 3,
"path": "res://tests/integration/script_director.test.gd",
"source": {
"containers": [ "res://tests/integration", "res://tests" ],
"method": "",
"path": "res://tests/integration/script_director.test.gd",
"tags": [  ],
"test": ExtResource( 13 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 3
}, {
"context": "Given a Test Double",
"methods": [ {
"assertions": [ {
"actual": "|String| Jackie is equal to |String| Jackie",
"context": "Then we can double the object successfully",
"expected": "|String| Jackie is equal to |String| Jackie",
"success": true
} ],
"context": "When we pass in dependecies on double",
"fullname": "test_When_we_pass_in_deps_on_double",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "(1, 1) is builtin: Vector2",
"context": "Then we can call methods on it",
"expected": "(1, 1) is builtin: Vector2",
"success": true
} ],
"context": "When we double an inner class",
"fullname": "test_When_we_double_an_inner_class",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "method: add was called with arguments: [10, 10]",
"context": "Then we can see that it was called with those arguments",
"expected": "method: add was called with arguments: [10, 10]",
"success": true
} ],
"context": "When we pass arguments to a method call that we are spying on",
"fullname": "test_When_we_pass_arguments_to_a_method_call_that_we_are_spying_on",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|float| 6.283185 is equal to |float| 6.283185",
"context": "Then we can call the static methods of that inner double",
"expected": "|float| 6.283185 is equal to |float| 6.283185",
"success": true
} ],
"context": "When we add an doubled inner class to it",
"fullname": "test_When_we_add_a_doubled_inner_class_to_it",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 9999 is equal to |int| 9999",
"context": "Then it returns the corresponding value when the partial pattern matches",
"expected": "|int| 9999 is equal to |int| 9999",
"success": true
} ],
"context": "When we call a method that was stubbed with a partial (ie using any()) argument pattern",
"fullname": "test_When_we_call_a_method_that_was_stubbed_with_a_partial_argument_pattern",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "add was called",
"context": "Then we can see that it was called at least once",
"expected": "add was called",
"success": true
} ],
"context": "When we call a method that we are spying on",
"fullname": "test_When_we_call_a_method_that_we_are_spying_on",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 4 is equal to |int| 4",
"context": "Then we get the correct result",
"expected": "|int| 4 is equal to |int| 4",
"success": true
} ],
"context": "When we call an add(x, y) method that we haven't directed",
"fullname": "test_When_we_call_an_add_method_that_we_have_not_directed",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|null| Null == null",
"context": "Then we get the stubbed value back",
"expected": "|null| Null == null",
"success": true
} ],
"context": "When we stub a method of a doubled inner class",
"fullname": "test_When_we_stub_a_method_of_a_double_inner_class",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 99 is equal to |int| 99",
"context": "Then it affects the state of the double",
"expected": "|int| 99 is equal to |int| 99",
"success": true
} ],
"context": "When we pass a funcref as a subcall",
"fullname": "test_When_we_pass_a_funcref_as_a_subcall",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|Array| [10, 5] is equal to |Array| [10, 5]",
"context": "Then it returns a value",
"expected": "|Array| [10, 5] is equal to |Array| [10, 5]",
"success": true
} ],
"context": "When we pass an Object with a call_func function",
"fullname": "test_When_we_pass_an_object_with_callfunc_method_as_a_subcall",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 9999 is equal to |int| 9999",
"context": "Then it returns the corresponding value when the pattern matches",
"expected": "|int| 9999 is equal to |int| 9999",
"success": true
} ],
"context": "When we call a method that was stubbed with an argument pattern that includes a non-primitive object",
"fullname": "test_When_we_call_a_method_that_was_stubbed_with_an_argument_pattern_that_includes_a_non_primitive_object",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|null| Null == null",
"context": "Then we get null",
"expected": "|null| Null == null",
"success": true
} ],
"context": "When we call a method that we have dummied",
"fullname": "test_When_we_call_a_method_that_we_have_dummied",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 99 is equal to |int| 99",
"context": "Then it returns a value",
"expected": "|int| 99 is equal to |int| 99",
"success": true
} ],
"context": "When we pass a funcref as a subcall that returns",
"fullname": "test_When_we_pass_a_funcref_as_a_subcall_that_returns_a_value",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then it returns true",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we call a method that we have stubbed to return true",
"fullname": "test_When_we_call_a_method_that_we_have_stubbed_to_return_true",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|Object| [Node:3631] is equal to |Object| [Node:3631]",
"context": "Then it returns that same node",
"expected": "|Object| [Node:3631] is equal to |Object| [Node:3631]",
"success": true
} ],
"context": "When we call a method that we have stubbed to return a node",
"fullname": "test_When_we_call_a_method_that_we_have_stubbed_to_return_a_node",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|String| Jackie is equal to |String| Jackie",
"context": "Then we can double the object successfully",
"expected": "|String| Jackie is equal to |String| Jackie",
"success": true
} ],
"context": "When we pass in dependecies on direct",
"fullname": "test_When_we_pass_in_deps_on_direct",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 100 is equal to |int| 100",
"context": "Then it returns the default stubbed value when the arguments don't match any pattern",
"expected": "|int| 100 is equal to |int| 100",
"success": true
}, {
"actual": "|int| 1000 is equal to |int| 1000",
"context": "Then it returns the the corresponding value to the pattern the arguments matched",
"expected": "|int| 1000 is equal to |int| 1000",
"success": true
} ],
"context": "When we call a method that was stubbed to return different values based on argument patterns",
"fullname": "test_When_we_call_a_method_that_was_stubbed_to_return_different_values_based_on_argument_patterns",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|bool| True is equal to |bool| True",
"context": "Then we can call it",
"expected": "|bool| True is equal to |bool| True",
"success": true
} ],
"context": "When we stubbed a keyworded method by passing in the correct keyword",
"fullname": "test_When_we_stubbed_a_keyword_method_by_passing_in_the_correct_keyword",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 4 is equal to |int| 4",
"context": "Then it calls its super implementation by default",
"expected": "|int| 4 is equal to |int| 4",
"success": true
}, {
"actual": "|int| 9999 is equal to |int| 9999",
"context": "Then it does not call its super implementation when arguments patterns match a different return value",
"expected": "|int| 9999 is equal to |int| 9999",
"success": true
} ],
"context": "When we call a method that we stubbed to call its super implementation by default",
"fullname": "test_When_we_call_a_method_that_we_stubbed_to_call_its_super_implementation_by_default",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
} ],
"passed": 19,
"path": "res://tests/integration/test_double.test.gd",
"source": {
"containers": [ "res://tests/integration", "res://tests" ],
"method": "",
"path": "res://tests/integration/test_double.test.gd",
"tags": [  ],
"test": ExtResource( 14 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 19
}, {
"context": "Given a Boolean Assertion",
"methods": [ {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then it passes",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When calling asserts.is_true(true)",
"fullname": "test_when_calling_asserts_is_true",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| False == false",
"context": "Then it passes",
"expected": "|bool| False == false",
"success": true
} ],
"context": "When calling asserts.is_false(false)",
"fullname": "test_when_calling_asserts_is_false",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| True != false",
"context": "",
"expected": "|bool| True == false",
"success": false
} ],
"context": " intentional failure",
"fullname": "test_intentional_failure",
"passed": 0,
"success": false,
"time": 0.0,
"total": 1
} ],
"passed": 2,
"path": "res://tests/unit/boolean.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/boolean.test.gd",
"tags": [  ],
"test": ExtResource( 11 ),
"yield_time": 0.0
},
"success": false,
"time_taken": 0.0,
"total": 3
}, {
"context": "Given an Equality Assertion",
"methods": [ {
"assertions": [ {
"actual": "|int| 2 is equal or greater |int| 1",
"context": "Then it passes",
"expected": "|int| 2 is equal or greater |int| 1",
"success": true
} ],
"context": "When calling asserts.is_equal_or_greater_than(2, 1)",
"fullname": "test_when_calling_is_equal_or_greater_than",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 2 is greater than |int| 1",
"context": "Then it passes",
"expected": "|int| 2 is greater than |int| 1",
"success": true
} ],
"context": "When calling asserts.is_greater_than(2, 1)",
"fullname": "test_when_calling_is_greater_than",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 1 is equal to |int| 1",
"context": "Then it passes",
"expected": "|int| 1 is equal to |int| 1",
"success": true
} ],
"context": "When calling asserts.is_equal(1, 1)",
"fullname": "test_when_calling_is_equal",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 1 is less than |int| 2",
"context": "Then it passes",
"expected": "|int| 1 is less than |int| 2",
"success": true
} ],
"context": "When calling asserts.is_less_than(2, 1)",
"fullname": "test_when_calling_is_less_than",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 1 is equal or greater |int| 1",
"context": "Then it passes",
"expected": "|int| 1 is equal or greater |int| 1",
"success": true
} ],
"context": "When calling asserts.is_equal_or_greater_than(1, 1)",
"fullname": "test_when_calling_is_equal_or_greater_than_with_equal_values",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 5 is not equal to |int| 6",
"context": "Then it passes",
"expected": "|int| 5 != |int| 6",
"success": true
} ],
"context": "When callign asserts.is_not_equal(5, 6)",
"fullname": "test_when_calling_is_not_equal",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 1 is equal or less than |int| 1",
"context": "Then it passes!",
"expected": "|int| 1 is equal or less than |int| 1",
"success": true
} ],
"context": "When calling asserts.is_equal_or_less_than(1, 1)",
"fullname": "test_when_calling_is_equal_or_less_than_with_equal_values",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 7,
"path": "res://tests/unit/equality.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/equality.test.gd",
"tags": [  ],
"test": ExtResource( 8 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 7
}, {
"context": "Given A File Assertion",
"methods": [ {
"assertions": [ {
"actual": "res://somefile.gd does not exist",
"context": "Then it passes",
"expected": "res://somefile.gd does not exist",
"success": true
} ],
"context": "When calling asserts.file_does_not_exist when there is no file",
"fullname": "test_when_calling_file_does_not_exist_when_there_is_no_file",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": " does not exist",
"context": "Then it passes",
"expected": " does not exist",
"success": true
} ],
"context": "When calling asserts file does not exist when path is empty",
"fullname": "test_when_calling_file_does_not_exist_when_path_is_empty",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "res://tests/unit/file.test.gd exists",
"context": "Then it passes",
"expected": "res://tests/unit/file.test.gd exists",
"success": true
} ],
"context": "When calling asserts.file_exists when the file is this suite",
"fullname": "test_when_calling_file_exists_when_file_is_self",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 3,
"path": "res://tests/unit/file.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/file.test.gd",
"tags": [  ],
"test": ExtResource( 3 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 3
}, {
"context": "Given an Is Instance of class/type Assertion",
"methods": [ {
"assertions": [ {
"actual": "|AABB| 0, 0, 0 - 0, 0, 0 != null",
"context": "AABB is not null",
"expected": "|AABB| 0, 0, 0 - 0, 0, 0 != null",
"success": true
}, {
"actual": "0, 0, 0 - 0, 0, 0 is builtin: AABB",
"context": "Then it passes",
"expected": "0, 0, 0 - 0, 0, 0 is builtin: AABB",
"success": true
} ],
"context": "When calling asserts.is_AABB(aabb: AABB)",
"fullname": "test_when_calling_is_AABB",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|Array| [] != null",
"context": "array is not null",
"expected": "|Array| [] != null",
"success": true
}, {
"actual": "[] is builtin: Array",
"context": "Then it passes",
"expected": "[] is builtin: Array",
"success": true
} ],
"context": "When calling asserts.is_Array(array: Array)",
"fullname": "test_when_calling_is_Array",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|Transform2D| ((1, 0), (0, 1), (0, 0)) != null",
"context": "transform2D is not null",
"expected": "|Transform2D| ((1, 0), (0, 1), (0, 0)) != null",
"success": true
}, {
"actual": "((1, 0), (0, 1), (0, 0)) is builtin: Transform2D",
"context": "Then it passes",
"expected": "((1, 0), (0, 1), (0, 0)) is builtin: Transform2D",
"success": true
} ],
"context": "When calling asserts.is_Transform(transform2D: Transform2D)",
"fullname": "test_when_calling_is_Transform2D",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|Rect2| (0, 0, 0, 0) != null",
"context": "rect2 is not null",
"expected": "|Rect2| (0, 0, 0, 0) != null",
"success": true
}, {
"actual": "(0, 0, 0, 0) is builtin: Rect2",
"context": "Then it passes",
"expected": "(0, 0, 0, 0) is builtin: Rect2",
"success": true
} ],
"context": "When calling asserts.is_Rect2(rect2: Rect2)",
"fullname": "test_when_calling_is_Rect2",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|Vector3| (0, 0, 0) != null",
"context": "vec3 is not null",
"expected": "|Vector3| (0, 0, 0) != null",
"success": true
}, {
"actual": "(0, 0, 0) is builtin: Vector3",
"context": "Then it passes",
"expected": "(0, 0, 0) is builtin: Vector3",
"success": true
} ],
"context": "When calling asserts.is_Vector3(vec3: Vector3",
"fullname": "test_when_calling_is_Vector3",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|Quat| (0, 0, 0, 1) != null",
"context": "quat is not null",
"expected": "|Quat| (0, 0, 0, 1) != null",
"success": true
}, {
"actual": "(0, 0, 0, 1) is builtin: Quat",
"context": "Then it passes",
"expected": "(0, 0, 0, 1) is builtin: Quat",
"success": true
} ],
"context": "When calling asserts.is_Quat(quat: Quat)",
"fullname": "test_when_calling_is_Quat",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "{} is builtin: Dictionary",
"context": "Then it passes",
"expected": "{} is builtin: Dictionary",
"success": true
} ],
"context": "When calling asserts.is_Dictionary({})",
"fullname": "test_when_calling_is_Dictionary",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|PoolIntArray| [] != null",
"context": "ints is not null",
"expected": "|PoolIntArray| [] != null",
"success": true
}, {
"actual": "[] is builtin: PoolIntArray",
"context": "Then it passes",
"expected": "[] is builtin: PoolIntArray",
"success": true
} ],
"context": "When calling asserts.is_PoolIntArray(ints: PoolIntArray)",
"fullname": "test_when_calling_is_PoolIntArray",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|PoolByteArray| [PoolByteArray] != null",
"context": "bytes is not null",
"expected": "|PoolByteArray| [PoolByteArray] != null",
"success": true
}, {
"actual": "[PoolByteArray] is builtin: PoolByteArray",
"context": "Then it passes",
"expected": "[PoolByteArray] is builtin: PoolByteArray",
"success": true
} ],
"context": "When calling asserts.is_PoolByteArray(bytes: PoolByteArray)",
"fullname": "test_when_calling_is_PoolByteArray",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|RID| [RID] != null",
"context": "rid is not null",
"expected": "|RID| [RID] != null",
"success": true
}, {
"actual": "[RID] is builtin: RID",
"context": "Then it passes",
"expected": "[RID] is builtin: RID",
"success": true
} ],
"context": "When calling asserts.is_RID(rid: RID)",
"fullname": "test_when_calling_is_RID",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|PoolStringArray| [] != null",
"context": "strs is not null",
"expected": "|PoolStringArray| [] != null",
"success": true
}, {
"actual": "[] is builtin: PoolStringArray",
"context": "Then it passes",
"expected": "[] is builtin: PoolStringArray",
"success": true
} ],
"context": "When calling is asserts.is_PoolStringArray(strs: PoolStringArray)",
"fullname": "test_when_calling_is_PoolStringArray",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "1 is builtin: float",
"context": "Then it passes",
"expected": "1 is builtin: float",
"success": true
} ],
"context": "When calling asserts.is_float(1.0)",
"fullname": "test_when_calling_is_float",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|PoolColorArray| [PoolColorArray] != null",
"context": "colors is not null",
"expected": "|PoolColorArray| [PoolColorArray] != null",
"success": true
}, {
"actual": "[PoolColorArray] is builtin: PoolColorArray",
"context": "Then it passes",
"expected": "[PoolColorArray] is builtin: PoolColorArray",
"success": true
} ],
"context": "When calling asserts.is_PoolColorArray(colors: PoolColorArray)",
"fullname": "test_when_calling_is_PoolColorArray",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|NodePath| . != null",
"context": "@'Parent/Child' is not null",
"expected": "|NodePath| . != null",
"success": true
}, {
"actual": ". is builtin: NodePath",
"context": "Then it passes",
"expected": ". is builtin: NodePath",
"success": true
} ],
"context": "When calling asserts.is_NodePath(@'Parent/Child')",
"fullname": "test_when_calling_is_NodePath",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|PoolVector2Array| [] != null",
"context": "vec2s is not null",
"expected": "|PoolVector2Array| [] != null",
"success": true
}, {
"actual": "[] is builtin: PoolVector2Array",
"context": "Then it passes",
"expected": "[] is builtin: PoolVector2Array",
"success": true
} ],
"context": "When calling is asserts.is_PoolVector2Array(vec2s: PoolVector2Array)",
"fullname": "test_when_calling_is_PoolVector2Array",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|PoolVector3Array| [] != null",
"context": "vec3s is not null",
"expected": "|PoolVector3Array| [] != null",
"success": true
}, {
"actual": "[] is builtin: PoolVector3Array",
"context": "Then it passes",
"expected": "[] is builtin: PoolVector3Array",
"success": true
} ],
"context": "When calling is asserts.is_PoolVector3Array(vec3s: PoolVector3Array)",
"fullname": "test_when_calling_is_PoolVector3Array",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|Transform| 1, 0, 0, 0, 1, 0, 0, 0, 1 - 0, 0, 0 != null",
"context": "transform is not null",
"expected": "|Transform| 1, 0, 0, 0, 1, 0, 0, 0, 1 - 0, 0, 0 != null",
"success": true
}, {
"actual": "1, 0, 0, 0, 1, 0, 0, 0, 1 - 0, 0, 0 is builtin: Transform",
"context": "Then it passes",
"expected": "1, 0, 0, 0, 1, 0, 0, 0, 1 - 0, 0, 0 is builtin: Transform",
"success": true
} ],
"context": "When calling asserts.is_Transform(transform: Transform)",
"fullname": "test_when_calling_is_Transform",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|String|  != null",
"context": "strs is not null",
"expected": "|String|  != null",
"success": true
}, {
"actual": " is builtin: String",
"context": "Then it passes",
"expected": " is builtin: String",
"success": true
} ],
"context": "When calling asserts.is_string(strs: String)",
"fullname": "test_when_calling_is_string",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|Basis| ((1, 0, 0), (0, 1, 0), (0, 0, 1)) != null",
"context": "basis is not null",
"expected": "|Basis| ((1, 0, 0), (0, 1, 0), (0, 0, 1)) != null",
"success": true
}, {
"actual": "((1, 0, 0), (0, 1, 0), (0, 0, 1)) is builtin: Basis",
"context": "Then it passes",
"expected": "((1, 0, 0), (0, 1, 0), (0, 0, 1)) is builtin: Basis",
"success": true
} ],
"context": "When calling asserts.is_basis(basis: Basis",
"fullname": "test_when_calling_is_Basis",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|Plane| 0, 0, 0, 0 != null",
"context": "plane is not null",
"expected": "|Plane| 0, 0, 0, 0 != null",
"success": true
}, {
"actual": "0, 0, 0, 0 is builtin: Plane",
"context": "then it passes",
"expected": "0, 0, 0, 0 is builtin: Plane",
"success": true
} ],
"context": "When calling asserts.is_Plane(plane: Plane())",
"fullname": "test_when_calling_is_Plane",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|Vector2| (0, 0) != null",
"context": "vec2 is not null",
"expected": "|Vector2| (0, 0) != null",
"success": true
}, {
"actual": "(0, 0) is builtin: Vector2",
"context": "Then it passes",
"expected": "(0, 0) is builtin: Vector2",
"success": true
} ],
"context": "When calling asserts.is_Vector2(vec2)",
"fullname": "test_when_calling_is_Vector2",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|Object| [Node:3731] != null",
"context": "node is not null",
"expected": "|Object| [Node:3731] != null",
"success": true
}, {
"actual": "[Node:3731] is builtin: Object",
"context": "An instance of node is an Object",
"expected": "[Node:3731] is builtin: Object",
"success": true
} ],
"context": "When calling is asserts.object(node: Node)",
"fullname": "test_when_calling_is_object",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|PoolRealArray| [] != null",
"context": "reals is not null",
"expected": "|PoolRealArray| [] != null",
"success": true
}, {
"actual": "[] is builtin: PoolRealArray",
"context": "Then it passes",
"expected": "[] is builtin: PoolRealArray",
"success": true
} ],
"context": "When calling is asserts.is_PoolRealArray(reals: PoolRealArray)",
"fullname": "test_when_calling_is_PoolRealArray",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "True is builtin: bool",
"context": "Then it passes",
"expected": "True is builtin: bool",
"success": true
} ],
"context": "When calling asserts.is_bool(true)",
"fullname": "test_when_calling_is_bool",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "1 is builtin: int",
"context": "Then it passes",
"expected": "1 is builtin: int",
"success": true
} ],
"context": "When callign asserts.is_int(1)",
"fullname": "test_when_calling_is_int",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|Color| 0,0,0,1 != null",
"context": "color is not null",
"expected": "|Color| 0,0,0,1 != null",
"success": true
}, {
"actual": "0,0,0,1 is builtin: Color",
"context": "Then it passes",
"expected": "0,0,0,1 is builtin: Color",
"success": true
} ],
"context": "When calling asserts.is_color(color: Color)",
"fullname": "test_when_calling_is_Color",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
} ],
"passed": 26,
"path": "res://tests/unit/is_instance.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/is_instance.test.gd",
"tags": [  ],
"test": ExtResource( 6 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 26
}, {
"context": "Given an Is Not Instance of class/type Assertion",
"methods": [ {
"assertions": [ {
"actual": "Null is not builtin: Array",
"context": "Then it passes",
"expected": "Null is not builtin: Array",
"success": true
} ],
"context": "when calling asserts.is_not_Array(null)",
"fullname": "test_when_calling_is_not_Array",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Color",
"context": "Then it passes",
"expected": "Null is not builtin: Color",
"success": true
} ],
"context": "when calling asserts.is_not_Color(null)",
"fullname": "test_when_calling_is_not_Color",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: float",
"context": "Then it passes",
"expected": "Null is not builtin: float",
"success": true
} ],
"context": "when calling asserts.is_not_float(null)",
"fullname": "test_when_calling_is_not_float",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: AABB",
"context": "Then it passes",
"expected": "Null is not builtin: AABB",
"success": true
} ],
"context": "when calling asserts.is_not_AABB(null)",
"fullname": "test_when_calling_is_not_AABB",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Basis",
"context": "Then it passes",
"expected": "Null is not builtin: Basis",
"success": true
} ],
"context": "when calling asserts.is_not_Basis(null)",
"fullname": "test_when_calling_is_not_Basis",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: int",
"context": "Then it passes",
"expected": "Null is not builtin: int",
"success": true
} ],
"context": "when calling asserts.is_not_int(null)",
"fullname": "test_when_calling_is_not_int",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: bool",
"context": "Then it passes",
"expected": "Null is not builtin: bool",
"success": true
} ],
"context": "when calling asserts.is_not_bool(null)",
"fullname": "test_when_calling_is_not_bool",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Dictionary",
"context": "Then it passes",
"expected": "Null is not builtin: Dictionary",
"success": true
} ],
"context": "when calling asserts.is_not_Dictionary(null)",
"fullname": "test_when_calling_is_not_Dictionary",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: NodePath",
"context": "Then it passes",
"expected": "Null is not builtin: NodePath",
"success": true
} ],
"context": "when calling asserts.is_not_NodePath(null)",
"fullname": "test_when_calling_is_not_NodePath",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Object",
"context": "Then it passes",
"expected": "Null is not builtin: Object",
"success": true
} ],
"context": "when calling asserts.is_not_Object(null)",
"fullname": "test_when_calling_is_not_Object",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: PoolStringArray",
"context": "Then it passes",
"expected": "Null is not builtin: PoolStringArray",
"success": true
} ],
"context": "when calling asserts.is_not_PoolStringArray(null)",
"fullname": "test_when_calling_is_not_PoolStringArray",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Quat",
"context": "Then it passes",
"expected": "Null is not builtin: Quat",
"success": true
} ],
"context": "when calling asserts.is_not_Quat(null)",
"fullname": "test_when_calling_is_not_Quat",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: PoolRealArray",
"context": "Then it passes",
"expected": "Null is not builtin: PoolRealArray",
"success": true
} ],
"context": "when calling asserts.is_not_PoolRealArray(null)",
"fullname": "test_when_calling_is_not_PoolRealArray",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: RID",
"context": "Then it passes",
"expected": "Null is not builtin: RID",
"success": true
} ],
"context": "when calling asserts.is_not_RID(null)",
"fullname": "test_when_calling_is_not_RID",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: PoolIntArray",
"context": "Then it passes",
"expected": "Null is not builtin: PoolIntArray",
"success": true
} ],
"context": "when calling asserts.is_not_PoolIntArray(null)",
"fullname": "test_when_calling_is_not_PoolIntArray",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Vector2",
"context": "Then it passes",
"expected": "Null is not builtin: Vector2",
"success": true
} ],
"context": "when calling asserts.is_not_Vector2(null)",
"fullname": "test_when_calling_is_not_Vector2",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Transform",
"context": "Then it passes",
"expected": "Null is not builtin: Transform",
"success": true
} ],
"context": "when calling asserts.is_not_Transform(null)",
"fullname": "test_when_calling_is_not_Transform",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: String",
"context": "Then it passes",
"expected": "Null is not builtin: String",
"success": true
} ],
"context": "when calling asserts.is_not_String(null)",
"fullname": "test_when_calling_is_not_String",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: PoolVector2Array",
"context": "Then it passes",
"expected": "Null is not builtin: PoolVector2Array",
"success": true
} ],
"context": "when calling asserts.is_not_PoolVector2Array(null)",
"fullname": "test_when_calling_is_not_PoolVector2Array",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: PoolVector3Array",
"context": "Then it passes",
"expected": "Null is not builtin: PoolVector3Array",
"success": true
} ],
"context": "when calling asserts.is_not_PoolVector3Array(null)",
"fullname": "test_when_calling_is_not_PoolVector3Array",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Plane",
"context": "Then it passes",
"expected": "Null is not builtin: Plane",
"success": true
} ],
"context": "when calling asserts.is_not_Plane(null)",
"fullname": "test_when_calling_is_not_Plane",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Transform2D",
"context": "Then it passes",
"expected": "Null is not builtin: Transform2D",
"success": true
} ],
"context": "when calling asserts.is_not_Transform2D(null)",
"fullname": "test_when_calling_is_not_Transform2D",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: PoolColorArray",
"context": "Then it passes",
"expected": "Null is not builtin: PoolColorArray",
"success": true
} ],
"context": "when calling asserts.is_not_PoolColorArray(null)",
"fullname": "test_when_calling_is_not_PoolColorArray",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Vector3",
"context": "Then it passes",
"expected": "Null is not builtin: Vector3",
"success": true
} ],
"context": "when calling asserts.is_not_Vector3(null)",
"fullname": "test_when_calling_is_not_Vector3",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: PoolByteArray",
"context": "Then it passes",
"expected": "Null is not builtin: PoolByteArray",
"success": true
} ],
"context": "when calling asserts.is_not_PoolByteArray(null)",
"fullname": "test_when_calling_is_not_PoolByteArray",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Rect2",
"context": "Then it passes",
"expected": "Null is not builtin: Rect2",
"success": true
} ],
"context": "when calling asserts.is_not_Rect2(null)",
"fullname": "test_when_calling_is_not_Rect2",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 26,
"path": "res://tests/unit/is_not_instance.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/is_not_instance.test.gd",
"tags": [  ],
"test": ExtResource( 2 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 26
}, {
"context": "Given a Null Assertion",
"methods": [ {
"assertions": [ {
"actual": "|Object| [Node:3772] != null",
"context": "Then it passes",
"expected": "|Object| [Node:3772] != null",
"success": true
} ],
"context": "When calling Node is not null",
"fullname": "test_when_calling_node_is_not_null",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|null| Null == null",
"context": "Then it passes",
"expected": "|null| Null == null",
"success": true
} ],
"context": "When calling asserts.is_null(null)",
"fullname": "test_when_calling_null_is_null",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|Object| [Deleted Object] == null",
"context": "A Freed Node is null in Engine 3.2.2 or greater",
"expected": "|Object| [Deleted Object] == null",
"success": true
} ],
"context": "When calling freed object is null",
"fullname": "test_when_calling_freed_object_is_not_null",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 3,
"path": "res://tests/unit/null.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/null.test.gd",
"tags": [  ],
"test": ExtResource( 12 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 3
}, {
"context": "Given an Object Assertion",
"methods": [ {
"assertions": [ {
"actual": "[Node:3777] does not have meta: confusing",
"context": "Then it passes",
"expected": "[Node:3777] does not have meta: confusing",
"success": true
} ],
"context": "When calling asserts.object_has_meta with real key but null val",
"fullname": "test_when_calling_does_not_have_meta_real_key_null_value_pair",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:3777] has method: title",
"context": "Then it passes",
"expected": "[Node:3777] has method: title",
"success": true
} ],
"context": "When calling has_method('title')",
"fullname": "test_when_calling_has_method_title",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:3777] has user signal: dummy_signal",
"context": "Then it passes",
"expected": "[Node:3777] has user signal: dummy_signal",
"success": true
} ],
"context": "When calling obj_has_user_signal after adding a signal",
"fullname": "test_when_calling_has_user_signal_after_adding_a_signal",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:3777] does not have user signal: false_signal",
"context": "Then it passes",
"expected": "[Node:3777] does not have user signal: false_signal",
"success": true
} ],
"context": "When calling obj_does_not_have_user_signal with fake signal",
"fullname": "test_when_calling_does_not_have_user_signal",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is freed from memory",
"context": "Then it passes",
"expected": "Null is freed from memory",
"success": true
} ],
"context": "When calling asserts.is_freed(freed_object",
"fullname": "test_when_calling_freed_object_is_freed",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:3777] has meta: dummy",
"context": "Then it passes",
"expected": "[Node:3777] has meta: dummy",
"success": true
}, {
"actual": "[Node:3777] has meta: dummy",
"context": "Then it passes",
"expected": "[Node:3777] has meta: dummy",
"success": true
} ],
"context": "When calling asserts.object_has_meta() after adding metadata",
"fullname": "test_when_calling_has_meta_after_adding_metadata",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "[Node:3788] is not freed",
"context": "Then it passes",
"expected": "[Node:3788] is not freed",
"success": true
} ],
"context": "When calling asserts.is_not_freed(unfreed_object)",
"fullname": "test_when_calling_unfreed_object_is_not_freed",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:3777] does not have meta: bad_meta",
"context": "Then it passes",
"expected": "[Node:3777] does not have meta: bad_meta",
"success": true
} ],
"context": "When calling asserts.object_does_not_have_meta()",
"fullname": "test_when_calling_does_not_have_meta",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:3791] is queued for deletion",
"context": "Then it passes",
"expected": "[Node:3791] is queued for deletion",
"success": true
} ],
"context": "When calling asserts.object_is_queued for deletion after calling queue_free",
"fullname": "test_when_calling_obj_is_queued_for_deletion_after_calling_queue_free",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:3793] is blocking signals",
"context": "Then it passes",
"expected": "[Node:3793] is blocking signals",
"success": true
} ],
"context": "When calling is blocking signals while blocking signals",
"fullname": "test_is_blocking_signals",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:3795] is not blocking signals",
"context": "Then it passes",
"expected": "[Node:3795] is not blocking signals",
"success": true
} ],
"context": "When calling is not blocking signals while not blocking signals",
"fullname": "test_is_not_blocking_signals",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:3797] is not queued for deletion",
"context": "Then it passes",
"expected": "[Node:3797] is not queued for deletion",
"success": true
} ],
"context": "When calling asserts.object_is_not_for_queued_deletion after not calling queue free()",
"fullname": "test_when_calling_obj_is_not_for_queued_deletion_after_not_calling_queue_free",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:3777].builtin_dummy is connected to [Node:3777].title",
"context": "Then it passes",
"expected": "[Node:3777].builtin_dummy is connected to [Node:3777].title",
"success": true
} ],
"context": "When calling asserts object is connected with a valid connection",
"fullname": "test_when_calling_obj_is_connected_with_a_real_connection",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:3777].builtin_dummy is not connected to [Node:3777].title",
"context": "Then it passes",
"expected": "[Node:3777].builtin_dummy is not connected to [Node:3777].title",
"success": true
} ],
"context": "When calling asserts object is not connected with an invalid connection",
"fullname": "test_when_calling_obj_is_not_connected_with_an_invalid_connection",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:3777] does not have user signal: builtin_dummy",
"context": "Then it passes",
"expected": "[Node:3777] does not have user signal: builtin_dummy",
"success": true
} ],
"context": "When calling does not have user signal with class signal",
"fullname": "test_when_calling_does_not_have_user_signal_with_class_signal_constant",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 15,
"path": "res://tests/unit/object.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/object.test.gd",
"tags": [  ],
"test": ExtResource( 7 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 15
}, {
"context": "Given the Addition Operator",
"methods": [ {
"assertions": [ {
"actual": "|int| 4 is equal to |int| 4",
"context": "",
"expected": "|int| 4 is equal to |int| 4",
"success": true
} ],
"context": "When we add 2 to 2 we get 4",
"fullname": "test_add",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 8 is equal to |int| 8",
"context": "",
"expected": "|int| 8 is equal to |int| 8",
"success": true
} ],
"context": "When we add 5 to 3 we get 8",
"fullname": "test_add",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 13 is equal to |int| 13",
"context": "",
"expected": "|int| 13 is equal to |int| 13",
"success": true
} ],
"context": "When we add 7 to 6 we get 13",
"fullname": "test_add",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 0 is equal to |int| 0",
"context": "",
"expected": "|int| 0 is equal to |int| 0",
"success": true
} ],
"context": "When we subtract 2 from 2 we get 0",
"fullname": "test_subtract",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 2 is equal to |int| 2",
"context": "",
"expected": "|int| 2 is equal to |int| 2",
"success": true
} ],
"context": "When we subtract 5 from 3 we get 2",
"fullname": "test_subtract",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 1 is equal to |int| 1",
"context": "",
"expected": "|int| 1 is equal to |int| 1",
"success": true
} ],
"context": "When we subtract 7 from 6 we get 1",
"fullname": "test_subtract",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 6,
"path": "res://tests/unit/parameters.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/parameters.test.gd",
"tags": [  ],
"test": ExtResource( 16 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 6
}, {
"context": "Given A Range Assertion",
"methods": [ {
"assertions": [ {
"actual": "10 is not in range(0, 10)",
"context": "Then it passes",
"expected": "10 is not in range(0, 10)",
"success": true
} ],
"context": "When calling is (10) not in range (in range(0, 10)",
"fullname": "test_when_calling_is_not_in_range",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "0 is in range(0, 10)",
"context": "Then it passes",
"expected": "0 is in range(0, 10)",
"success": true
} ],
"context": "When calling is (0) in range(0, 10)",
"fullname": "test_when_calling_is_in_range",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 2,
"path": "res://tests/unit/range.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/range.test.gd",
"tags": [  ],
"test": ExtResource( 15 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 2
}, {
"context": "Given a String Assertion",
"methods": [ {
"assertions": [ {
"actual": "impsum does not begin with bleh lorem",
"context": "Then it passes",
"expected": "impsum does not begin with bleh lorem",
"success": true
} ],
"context": "When calling asserts.string_does_not_begin_with('lorem', 'impsum')",
"fullname": "test_when_calling_string_does_not_begin_with",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "lorem impsum begins with lorem",
"context": "Then it passes",
"expected": "lorem impsum begins with lorem",
"success": true
} ],
"context": "When calling asserts.string_begins_with('lorem', 'lorem impsum')",
"fullname": "test_when_calling_string_begins_with",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "lorem impsum ends with impsum",
"context": "Then it passes",
"expected": "lorem impsum ends with impsum",
"success": true
} ],
"context": "When calling asserts.string_ends_with('impsum', 'lorem impsum')",
"fullname": "test_when_calling_string_ends_with",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "impsum does not contain beem im",
"context": "Then it passes",
"expected": "impsum does not contain beem im",
"success": true
} ],
"context": "When calling asserts.string_does_not_contain('em im', 'impsum')",
"fullname": "test_when_calling_string_does_not_contain",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "lorem impsum contains em im",
"context": "Then it passes",
"expected": "lorem impsum contains em im",
"success": true
} ],
"context": "When calling asserts.string_contains('em im', 'lorem impsum')",
"fullname": "test_when_calling_string_contains",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "impsum does not end with lorem",
"context": "Then it passes",
"expected": "impsum does not end with lorem",
"success": true
} ],
"context": "When calling asserts.string_does_not_end_with('lorem', 'impsum')",
"fullname": "test_when_calling_string_does_not_end_with",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 6,
"path": "res://tests/unit/string.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/string.test.gd",
"tags": [  ],
"test": ExtResource( 9 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 6
}, {
"context": "Dummy Passing Test",
"methods": [ {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Passing!",
"expected": "|bool| True == true",
"success": true
} ],
"context": "This method passes",
"fullname": "test_this_method_passes",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 1,
"path": "res://tests/unit/suite.test.gd.DummyOne",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/suite.test.gd.DummyOne",
"tags": [  ],
"test": SubResource( 19 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 1
}, {
"context": "Dummy Test 2",
"methods": [ {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Passing!",
"expected": "|bool| True == true",
"success": true
} ],
"context": "This method passes",
"fullname": "test_this_method_passes",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 1,
"path": "res://tests/unit/suite.test.gd.DummyTwo",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/suite.test.gd.DummyTwo",
"tags": [  ],
"test": SubResource( 20 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 1
}, {
"context": "Given a Test Script",
"methods": [ {
"assertions": [ {
"actual": "|int| 10 is greater than |int| 1",
"context": "We get an array of multiple values back",
"expected": "|int| 10 is greater than |int| 1",
"success": true
}, {
"actual": "|int| 0 is not equal to |int| 9",
"context": "With different values",
"expected": "|int| 0 != |int| 9",
"success": true
}, {
"actual": "|int| 10 is greater than |int| 1",
"context": "And we can track multiple properties",
"expected": "|int| 10 is greater than |int| 1",
"success": true
} ],
"context": "When we record properties",
"fullname": "test_we_can_record_properties",
"passed": 3,
"success": true,
"time": 0.0,
"total": 3
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "if the test didn't break this works",
"expected": "|bool| True == true",
"success": true
} ],
"context": " we can omit describe",
"fullname": "test_we_can_omit_describe",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|int| 2 is equal to |int| 2",
"context": "",
"expected": "|int| 2 is equal to |int| 2",
"success": true
} ],
"context": " when we omit context we can see expected and got under method",
"fullname": "test_when_we_omit_context_we_can_see_expected_and_got_under_method",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
} ],
"passed": 3,
"path": "res://tests/unit/test.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/test.test.gd",
"tags": [  ],
"test": ExtResource( 19 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 3
}, {
"context": "Given a Signal Watcher",
"methods": [ {
"assertions": [ {
"actual": "signal: multiple was emitted from [Node:3844] 2",
"context": "Then we can track how many times we emitted it",
"expected": "signal: multiple was emitted from [Node:3844] 2",
"success": true
} ],
"context": "When we watch and signal and emit it multiple times",
"fullname": "test_When_we_watch_a_signal_and_emit_it_multiple_times",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Signal: example was not emitted from [Node:3844]",
"context": "Then it does not capture the non-emitted signal",
"expected": "Signal: example was not emitted from [Node:3844]",
"success": true
} ],
"context": "When we watch and do not emit a signal",
"fullname": "test_When_we_watch_and_do_not_emit_a_signal",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Signal: example was emitted from [Node:3844] with arguments: [1, 20, 5]",
"context": "Then it captures any arguments that where passed when the signal was emitted",
"expected": "Signal: example was emitted from [Node:3844] with arguments: [1, 20, 5]",
"success": true
} ],
"context": "When we watch a signal from an object with no bound variables",
"fullname": "test_When_we_watch_a_signal_from_an_object_with_no_bound_variables",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "signal: example was emitted from [Node:3844]",
"context": "Then it captures the emitted signal",
"expected": "signal: example was emitted from [Node:3844]",
"success": true
} ],
"context": "When we watch and emit a signal",
"fullname": "test_When_we_watch_and_emit_a_signal",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 4,
"path": "res://tests/unit/watcher.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/watcher.test.gd",
"tags": [  ],
"test": ExtResource( 17 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 4
}, {
"context": "Given a Yield",
"methods": [ {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then we set var a to true",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then we set var b to true",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we yield in start twice",
"fullname": "test_When_we_yield_in_start",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then we set var c to true",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then we set var d to true",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we yield in pre thrice",
"fullname": "test_When_we_yield_in_pre",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "[100, Null, Null, Null, Null, Null] is builtin: Array",
"context": "Then we get an array",
"expected": "[100, Null, Null, Null, Null, Null] is builtin: Array",
"success": true
}, {
"actual": "|int| 6 is equal to |int| 6",
"context": "Of size 6",
"expected": "|int| 6 is equal to |int| 6",
"success": true
}, {
"actual": "|int| 100 is equal to |int| 100",
"context": "Where element 0 is 100",
"expected": "|int| 100 is equal to |int| 100",
"success": true
} ],
"context": "When yield(self.yield_value()) returns",
"fullname": "test_When_we_yield_we_get_the_return_value",
"passed": 3,
"success": true,
"time": 0.0,
"total": 3
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then yielder is unpaused",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "The timeout signal of the yielder is connected",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we call until_timeout (with 1.0)",
"fullname": "test_When_we_call_until_timeout",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then the yielder is unpaused",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then the timeout signal of the yielder is connected",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then our signal is connected to the yielder",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we call until signal",
"fullname": "test_When_we_call_until_signal",
"passed": 3,
"success": true,
"time": 0.0,
"total": 3
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then yielder is not active",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When asserting against a test",
"fullname": "test_Yielder_is_not_active_when_asserting",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then we set var e to true",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then we set var f to true",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we yield twice in execute",
"fullname": "test_When_we_yield_in_execute",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then the timeout signal is disconnected",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then the signal-signal is disconnected",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When it is finished",
"fullname": "test_When_yielder_is_finished_signals_are_disconnected",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then the yielder is paused",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When a signal being yielded on is emitted",
"fullname": "test_When_a_signal_being_yielded_on_is_emitted_the_yielder_is_stopped",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then the yielder is paused",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "The timeout signal of the yielder is not connected",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When the yielder times out on until_timeout(0.1)",
"fullname": "test_When_the_yielder_times_out",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then the yielder is paused",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then the timeout signal of the yielder is disconnected",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then our signal to the yielder is disconnected",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When the yielder heres our signal",
"fullname": "test_When_the_yielder_hears_our_signal",
"passed": 3,
"success": true,
"time": 0.0,
"total": 3
} ],
"passed": 11,
"path": "res://tests/unit/yield.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/yield.test.gd",
"tags": [  ],
"test": ExtResource( 18 ),
"yield_time": 1.9
},
"success": true,
"time_taken": 0.0,
"total": 11
}, {
"context": "Given a Boolean Assertion",
"methods": [ {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then it passes",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When calling asserts.is_true(true)",
"fullname": "test_when_calling_asserts_is_true",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| False == false",
"context": "Then it passes",
"expected": "|bool| False == false",
"success": true
} ],
"context": "When calling asserts.is_false(false)",
"fullname": "test_when_calling_asserts_is_false",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| True != false",
"context": "",
"expected": "|bool| True == false",
"success": false
} ],
"context": " intentional failure",
"fullname": "test_intentional_failure",
"passed": 0,
"success": false,
"time": 0.0,
"total": 1
} ],
"passed": 2,
"path": "res://tests/integration/boolean.test.gd",
"source": {
"containers": [ "res://tests/integration", "res://tests" ],
"method": "",
"path": "res://tests/integration/boolean.test.gd",
"tags": [  ],
"test": ExtResource( 20 ),
"yield_time": 0.0
},
"success": false,
"time_taken": 0.0,
"total": 3
}, {
"context": "Default Args",
"methods": [ {
"assertions": [ {
"actual": "|bool| True == true",
"context": "If this method can be reached then we have doubled a script with default argument(s) properly!",
"expected": "|bool| True == true",
"success": true
} ],
"context": " default arguments of interpolate property",
"fullname": "test_default_arguments_of_interpolate_property",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 1,
"path": "res://tests/integration/default_args.test.gd",
"source": {
"containers": [ "res://tests/integration", "res://tests" ],
"method": "",
"path": "res://tests/integration/default_args.test.gd",
"tags": [  ],
"test": ExtResource( 10 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 1
}, {
"context": "Given is_on_floor",
"methods": [ {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then it can be stubbed",
"expected": "|bool| True == true",
"success": true
} ],
"context": "From a user-defined script",
"fullname": "test_stubbing_is_on_floor_method_from_user_defined_class",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then it can be stubbed",
"expected": "|bool| True == true",
"success": true
} ],
"context": "From a child node of a scene without scripts",
"fullname": "test_stubbing_is_on_floor_as_child_node_with_no_script",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then it can be stubbed",
"expected": "|bool| True == true",
"success": true
} ],
"context": "From a built-in KinematicBody2D2",
"fullname": "test_stubbing_is_on_floor_method_from_builtin_class2",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 3,
"path": "res://tests/integration/on_floor.test.gd",
"source": {
"containers": [ "res://tests/integration", "res://tests" ],
"method": "",
"path": "res://tests/integration/on_floor.test.gd",
"tags": [  ],
"test": ExtResource( 5 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 3
}, {
"context": "Given a Scene Director",
"methods": [ {
"assertions": [ {
"actual": "|NodePath| A is equal to |NodePath| A",
"context": "We have the correct NodePath Set",
"expected": "|NodePath| A is equal to |NodePath| A",
"success": true
} ],
"context": "When we add it to the tree it runs",
"fullname": "test_When_we_add_it_to_the_tree_it_runs",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 9999 is equal to |int| 9999",
"context": "Then we get the stubbed return value",
"expected": "|int| 9999 is equal to |int| 9999",
"success": true
} ],
"context": "When we call a method from the root node that we stubbed",
"fullname": "test_When_we_call_a_method_from_the_root_node_that_we_stubbed",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 999 is equal to |int| 999",
"context": "Then we get the stubbed return value",
"expected": "|int| 999 is equal to |int| 999",
"success": true
} ],
"context": "When we call a method from a child node that we stubbed",
"fullname": "test_When_we_call_a_method_from_a_child_node_that_we_stubbed",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 99 is equal to |int| 99",
"context": "Then we get the stubbed return value",
"expected": "|int| 99 is equal to |int| 99",
"success": true
} ],
"context": "When we call a method from a grandchild node that we stubbed",
"fullname": "test_When_we_call_a_method_from_a_grandchild_node_that_we_stubbed",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|Dictionary| {.:[Reference:4110], A:[Reference:4111], A/B:[Reference:4113], C:[Reference:4112], C/D:[Reference:4114]} is not equal to |Dictionary| {.:[Reference:4124], A:[Reference:4125], A/B:[Reference:4127], C:[Reference:4126], C/D:[Reference:4128]}",
"context": "Then they do not share resources",
"expected": "|Dictionary| {.:[Reference:4110], A:[Reference:4111], A/B:[Reference:4113], C:[Reference:4112], C/D:[Reference:4114]} != |Dictionary| {.:[Reference:4124], A:[Reference:4125], A/B:[Reference:4127], C:[Reference:4126], C/D:[Reference:4128]}",
"success": true
} ],
"context": "When we create two of it for the same scene",
"fullname": "test_When_we_create_two_of_it_for_the_same_scene",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 5,
"path": "res://tests/integration/scene_director.test.gd",
"source": {
"containers": [ "res://tests/integration", "res://tests" ],
"method": "",
"path": "res://tests/integration/scene_director.test.gd",
"tags": [  ],
"test": ExtResource( 4 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 5
}, {
"context": "Given a Script Director",
"methods": [ {
"assertions": [ {
"actual": "|Dictionary| {_enter_tree:{arguments:, default_arguments:}, _exit_tree:{arguments:, default_arguments:}, _get:{arguments:a, default_arguments:a}, _get_configuration_warning:{arguments:, default_arguments:}, _get_editor_description:{arguments:, default_arguments:}, _get_import_path:{arguments:, default_arguments:}, _get_property_list:{arguments:, default_arguments:}, _init:{arguments:, default_arguments:}, _input:{arguments:a, default_arguments:a}, _notification:{arguments:a, default_arguments:a}, _physics_process:{arguments:a, default_arguments:a}, _process:{arguments:a, default_arguments:a}, _ready:{arguments:, default_arguments:}, _set:{arguments:a, b, default_arguments:a, b}, _set_editor_description:{arguments:a, default_arguments:a}, _set_import_path:{arguments:a, default_arguments:a}, _to_string:{arguments:, default_arguments:}, _unhandled_input:{arguments:a, default_arguments:a}, _unhandled_key_input:{arguments:a, default_arguments:a}, add:{arguments:a, b, default_arguments:a, b}, add_child:{arguments:a, b, default_arguments:a, b = False}, add_child_below_node:{arguments:a, b, c, default_arguments:a, b, c = False}, add_to_group:{arguments:a, b, default_arguments:a, b = False}, add_user_signal:{arguments:a, b, default_arguments:a, b = []}, call:{arguments:a, default_arguments:a}, call_deferred:{arguments:a, default_arguments:a}, callv:{arguments:a, b, default_arguments:a, b}, can_process:{arguments:, default_arguments:}, can_translate_messages:{arguments:, default_arguments:}, connect:{arguments:a, b, c, d, e, default_arguments:a, b, c, d = [], e = 0}, disconnect:{arguments:a, b, c, default_arguments:a, b, c}, divide:{arguments:a, b, default_arguments:a, b}, duplicate:{arguments:a, default_arguments:a = 15}, emit_signal:{arguments:a, default_arguments:a}, find_node:{arguments:a, b, c, default_arguments:a, b = True, c = True}, find_parent:{arguments:a, default_arguments:a}, free:{arguments:, default_arguments:}, get:{arguments:a, default_arguments:a}, get_child:{arguments:a, default_arguments:a}, get_child_count:{arguments:, default_arguments:}, get_children:{arguments:, default_arguments:}, get_class:{arguments:, default_arguments:}, get_custom_multiplayer:{arguments:, default_arguments:}, get_filename:{arguments:, default_arguments:}, get_groups:{arguments:, default_arguments:}, get_incoming_connections:{arguments:, default_arguments:}, get_index:{arguments:, default_arguments:}, get_indexed:{arguments:a, default_arguments:a}, get_instance_id:{arguments:, default_arguments:}, get_meta:{arguments:a, default_arguments:a}, get_meta_list:{arguments:, default_arguments:}, get_method_list:{arguments:, default_arguments:}, get_multiplayer:{arguments:, default_arguments:}, get_name:{arguments:, default_arguments:}, get_network_master:{arguments:, default_arguments:}, get_node:{arguments:a, default_arguments:a}, get_node_and_resource:{arguments:a, default_arguments:a}, get_node_or_null:{arguments:a, default_arguments:a}, get_owner:{arguments:, default_arguments:}, get_parent:{arguments:, default_arguments:}, get_path:{arguments:, default_arguments:}, get_path_to:{arguments:a, default_arguments:a}, get_pause_mode:{arguments:, default_arguments:}, get_physics_process_delta_time:{arguments:, default_arguments:}, get_position_in_parent:{arguments:, default_arguments:}, get_process_delta_time:{arguments:, default_arguments:}, get_process_priority:{arguments:, default_arguments:}, get_property_list:{arguments:, default_arguments:}, get_scene_instance_load_placeholder:{arguments:, default_arguments:}, get_script:{arguments:, default_arguments:}, get_signal_connection_list:{arguments:a, default_arguments:a}, get_signal_list:{arguments:, default_arguments:}, get_tree:{arguments:, default_arguments:}, get_viewport:{arguments:, default_arguments:}, has_meta:{arguments:a, default_arguments:a}, has_method:{arguments:a, default_arguments:a}, has_node:{arguments:a, default_arguments:a}, has_node_and_resource:{arguments:a, default_arguments:a}, has_signal:{arguments:a, default_arguments:a}, has_user_signal:{arguments:a, default_arguments:a}, is_a_parent_of:{arguments:a, default_arguments:a}, is_blocking_signals:{arguments:, default_arguments:}, is_class:{arguments:a, default_arguments:a}, is_connected:{arguments:a, b, c, default_arguments:a, b, c}, is_displayed_folded:{arguments:, default_arguments:}, is_greater_than:{arguments:a, default_arguments:a}, is_in_group:{arguments:a, default_arguments:a}, is_inside_tree:{arguments:, default_arguments:}, is_network_master:{arguments:, default_arguments:}, is_physics_processing:{arguments:, default_arguments:}, is_physics_processing_internal:{arguments:, default_arguments:}, is_processing:{arguments:, default_arguments:}, is_processing_input:{arguments:, default_arguments:}, is_processing_internal:{arguments:, default_arguments:}, is_processing_unhandled_input:{arguments:, default_arguments:}, is_processing_unhandled_key_input:{arguments:, default_arguments:}, is_queued_for_deletion:{arguments:, default_arguments:}, math_fight:{arguments:, default_arguments:}, move_child:{arguments:a, b, default_arguments:a, b}, multiply:{arguments:a, b, default_arguments:a, b}, notification:{arguments:a, b, default_arguments:a, b = False}, pi:{arguments:, default_arguments:}, print_stray_nodes:{arguments:, default_arguments:}, print_tree:{arguments:, default_arguments:}, print_tree_pretty:{arguments:, default_arguments:}, propagate_call:{arguments:a, b, c, default_arguments:a, b = [], c = False}, propagate_notification:{arguments:a, default_arguments:a}, property_list_changed_notify:{arguments:, default_arguments:}, queue_free:{arguments:, default_arguments:}, raise:{arguments:, default_arguments:}, remove_and_skip:{arguments:, default_arguments:}, remove_child:{arguments:a, default_arguments:a}, remove_from_group:{arguments:a, default_arguments:a}, remove_meta:{arguments:a, default_arguments:a}, replace_by:{arguments:a, b, default_arguments:a, b = False}, request_ready:{arguments:, default_arguments:}, rpc:{arguments:a, default_arguments:a}, rpc_config:{arguments:a, b, default_arguments:a, b}, rpc_id:{arguments:a, b, default_arguments:a, b}, rpc_unreliable:{arguments:a, default_arguments:a}, rpc_unreliable_id:{arguments:a, b, default_arguments:a, b}, rset:{arguments:a, b, default_arguments:a, b}, rset_config:{arguments:a, b, default_arguments:a, b}, rset_id:{arguments:a, b, c, default_arguments:a, b, c}, rset_unreliable:{arguments:a, b, default_arguments:a, b}, rset_unreliable_id:{arguments:a, b, c, default_arguments:a, b, c}, set:{arguments:a, b, default_arguments:a, b}, set_block_signals:{arguments:a, default_arguments:a}, set_custom_multiplayer:{arguments:a, default_arguments:a}, set_deferred:{arguments:a, b, default_arguments:a, b}, set_display_folded:{arguments:a, default_arguments:a}, set_filename:{arguments:a, default_arguments:a}, set_indexed:{arguments:a, b, default_arguments:a, b}, set_message_translation:{arguments:a, default_arguments:a}, set_meta:{arguments:a, b, default_arguments:a, b}, set_name:{arguments:a, default_arguments:a}, set_network_master:{arguments:a, b, default_arguments:a, b = True}, set_owner:{arguments:a, default_arguments:a}, set_pause_mode:{arguments:a, default_arguments:a}, set_physics_process:{arguments:a, default_arguments:a}, set_physics_process_internal:{arguments:a, default_arguments:a}, set_process:{arguments:a, default_arguments:a}, set_process_input:{arguments:a, default_arguments:a}, set_process_internal:{arguments:a, default_arguments:a}, set_process_priority:{arguments:a, default_arguments:a}, set_process_unhandled_input:{arguments:a, default_arguments:a}, set_process_unhandled_key_input:{arguments:a, default_arguments:a}, set_scene_instance_load_placeholder:{arguments:a, default_arguments:a}, set_script:{arguments:a, default_arguments:a}, subtract:{arguments:a, b, default_arguments:a, b}, sum:{arguments:a, default_arguments:a}, to_string:{arguments:, default_arguments:}, tr:{arguments:a, default_arguments:a}, update_configuration_warning:{arguments:, default_arguments:}} is not equal to |Dictionary| {_enter_tree:{arguments:, default_arguments:}, _exit_tree:{arguments:, default_arguments:}, _get:{arguments:a, default_arguments:a}, _get_configuration_warning:{arguments:, default_arguments:}, _get_editor_description:{arguments:, default_arguments:}, _get_import_path:{arguments:, default_arguments:}, _get_property_list:{arguments:, default_arguments:}, _init:{arguments:, default_arguments:}, _input:{arguments:a, default_arguments:a}, _notification:{arguments:a, default_arguments:a}, _physics_process:{arguments:a, default_arguments:a}, _process:{arguments:a, default_arguments:a}, _ready:{arguments:, default_arguments:}, _set:{arguments:a, b, default_arguments:a, b}, _set_editor_description:{arguments:a, default_arguments:a}, _set_import_path:{arguments:a, default_arguments:a}, _to_string:{arguments:, default_arguments:}, _unhandled_input:{arguments:a, default_arguments:a}, _unhandled_key_input:{arguments:a, default_arguments:a}, add:{arguments:a, b, default_arguments:a, b}, add_child:{arguments:a, b, default_arguments:a, b = False}, add_child_below_node:{arguments:a, b, c, default_arguments:a, b, c = False}, add_to_group:{arguments:a, b, default_arguments:a, b = False}, add_user_signal:{arguments:a, b, default_arguments:a, b = []}, call:{arguments:a, default_arguments:a}, call_deferred:{arguments:a, default_arguments:a}, callv:{arguments:a, b, default_arguments:a, b}, can_process:{arguments:, default_arguments:}, can_translate_messages:{arguments:, default_arguments:}, connect:{arguments:a, b, c, d, e, default_arguments:a, b, c, d = [], e = 0}, disconnect:{arguments:a, b, c, default_arguments:a, b, c}, divide:{arguments:a, b, default_arguments:a, b}, duplicate:{arguments:a, default_arguments:a = 15}, emit_signal:{arguments:a, default_arguments:a}, find_node:{arguments:a, b, c, default_arguments:a, b = True, c = True}, find_parent:{arguments:a, default_arguments:a}, free:{arguments:, default_arguments:}, get:{arguments:a, default_arguments:a}, get_child:{arguments:a, default_arguments:a}, get_child_count:{arguments:, default_arguments:}, get_children:{arguments:, default_arguments:}, get_class:{arguments:, default_arguments:}, get_custom_multiplayer:{arguments:, default_arguments:}, get_filename:{arguments:, default_arguments:}, get_groups:{arguments:, default_arguments:}, get_incoming_connections:{arguments:, default_arguments:}, get_index:{arguments:, default_arguments:}, get_indexed:{arguments:a, default_arguments:a}, get_instance_id:{arguments:, default_arguments:}, get_meta:{arguments:a, default_arguments:a}, get_meta_list:{arguments:, default_arguments:}, get_method_list:{arguments:, default_arguments:}, get_multiplayer:{arguments:, default_arguments:}, get_name:{arguments:, default_arguments:}, get_network_master:{arguments:, default_arguments:}, get_node:{arguments:a, default_arguments:a}, get_node_and_resource:{arguments:a, default_arguments:a}, get_node_or_null:{arguments:a, default_arguments:a}, get_owner:{arguments:, default_arguments:}, get_parent:{arguments:, default_arguments:}, get_path:{arguments:, default_arguments:}, get_path_to:{arguments:a, default_arguments:a}, get_pause_mode:{arguments:, default_arguments:}, get_physics_process_delta_time:{arguments:, default_arguments:}, get_position_in_parent:{arguments:, default_arguments:}, get_process_delta_time:{arguments:, default_arguments:}, get_process_priority:{arguments:, default_arguments:}, get_property_list:{arguments:, default_arguments:}, get_scene_instance_load_placeholder:{arguments:, default_arguments:}, get_script:{arguments:, default_arguments:}, get_signal_connection_list:{arguments:a, default_arguments:a}, get_signal_list:{arguments:, default_arguments:}, get_tree:{arguments:, default_arguments:}, get_viewport:{arguments:, default_arguments:}, has_meta:{arguments:a, default_arguments:a}, has_method:{arguments:a, default_arguments:a}, has_node:{arguments:a, default_arguments:a}, has_node_and_resource:{arguments:a, default_arguments:a}, has_signal:{arguments:a, default_arguments:a}, has_user_signal:{arguments:a, default_arguments:a}, is_a_parent_of:{arguments:a, default_arguments:a}, is_blocking_signals:{arguments:, default_arguments:}, is_class:{arguments:a, default_arguments:a}, is_connected:{arguments:a, b, c, default_arguments:a, b, c}, is_displayed_folded:{arguments:, default_arguments:}, is_greater_than:{arguments:a, default_arguments:a}, is_in_group:{arguments:a, default_arguments:a}, is_inside_tree:{arguments:, default_arguments:}, is_network_master:{arguments:, default_arguments:}, is_physics_processing:{arguments:, default_arguments:}, is_physics_processing_internal:{arguments:, default_arguments:}, is_processing:{arguments:, default_arguments:}, is_processing_input:{arguments:, default_arguments:}, is_processing_internal:{arguments:, default_arguments:}, is_processing_unhandled_input:{arguments:, default_arguments:}, is_processing_unhandled_key_input:{arguments:, default_arguments:}, is_queued_for_deletion:{arguments:, default_arguments:}, math_fight:{arguments:, default_arguments:}, move_child:{arguments:a, b, default_arguments:a, b}, multiply:{arguments:a, b, default_arguments:a, b}, notification:{arguments:a, b, default_arguments:a, b = False}, pi:{arguments:, default_arguments:}, print_stray_nodes:{arguments:, default_arguments:}, print_tree:{arguments:, default_arguments:}, print_tree_pretty:{arguments:, default_arguments:}, propagate_call:{arguments:a, b, c, default_arguments:a, b = [], c = False}, propagate_notification:{arguments:a, default_arguments:a}, property_list_changed_notify:{arguments:, default_arguments:}, queue_free:{arguments:, default_arguments:}, raise:{arguments:, default_arguments:}, remove_and_skip:{arguments:, default_arguments:}, remove_child:{arguments:a, default_arguments:a}, remove_from_group:{arguments:a, default_arguments:a}, remove_meta:{arguments:a, default_arguments:a}, replace_by:{arguments:a, b, default_arguments:a, b = False}, request_ready:{arguments:, default_arguments:}, rpc:{arguments:a, default_arguments:a}, rpc_config:{arguments:a, b, default_arguments:a, b}, rpc_id:{arguments:a, b, default_arguments:a, b}, rpc_unreliable:{arguments:a, default_arguments:a}, rpc_unreliable_id:{arguments:a, b, default_arguments:a, b}, rset:{arguments:a, b, default_arguments:a, b}, rset_config:{arguments:a, b, default_arguments:a, b}, rset_id:{arguments:a, b, c, default_arguments:a, b, c}, rset_unreliable:{arguments:a, b, default_arguments:a, b}, rset_unreliable_id:{arguments:a, b, c, default_arguments:a, b, c}, set:{arguments:a, b, default_arguments:a, b}, set_block_signals:{arguments:a, default_arguments:a}, set_custom_multiplayer:{arguments:a, default_arguments:a}, set_deferred:{arguments:a, b, default_arguments:a, b}, set_display_folded:{arguments:a, default_arguments:a}, set_filename:{arguments:a, default_arguments:a}, set_indexed:{arguments:a, b, default_arguments:a, b}, set_message_translation:{arguments:a, default_arguments:a}, set_meta:{arguments:a, b, default_arguments:a, b}, set_name:{arguments:a, default_arguments:a}, set_network_master:{arguments:a, b, default_arguments:a, b = True}, set_owner:{arguments:a, default_arguments:a}, set_pause_mode:{arguments:a, default_arguments:a}, set_physics_process:{arguments:a, default_arguments:a}, set_physics_process_internal:{arguments:a, default_arguments:a}, set_process:{arguments:a, default_arguments:a}, set_process_input:{arguments:a, default_arguments:a}, set_process_internal:{arguments:a, default_arguments:a}, set_process_priority:{arguments:a, default_arguments:a}, set_process_unhandled_input:{arguments:a, default_arguments:a}, set_process_unhandled_key_input:{arguments:a, default_arguments:a}, set_scene_instance_load_placeholder:{arguments:a, default_arguments:a}, set_script:{arguments:a, default_arguments:a}, subtract:{arguments:a, b, default_arguments:a, b}, sum:{arguments:a, default_arguments:a}, to_string:{arguments:, default_arguments:}, tr:{arguments:a, default_arguments:a}, update_configuration_warning:{arguments:, default_arguments:}}",
"context": "Then they do not share resources",
"expected": "|Dictionary| {_enter_tree:{arguments:, default_arguments:}, _exit_tree:{arguments:, default_arguments:}, _get:{arguments:a, default_arguments:a}, _get_configuration_warning:{arguments:, default_arguments:}, _get_editor_description:{arguments:, default_arguments:}, _get_import_path:{arguments:, default_arguments:}, _get_property_list:{arguments:, default_arguments:}, _init:{arguments:, default_arguments:}, _input:{arguments:a, default_arguments:a}, _notification:{arguments:a, default_arguments:a}, _physics_process:{arguments:a, default_arguments:a}, _process:{arguments:a, default_arguments:a}, _ready:{arguments:, default_arguments:}, _set:{arguments:a, b, default_arguments:a, b}, _set_editor_description:{arguments:a, default_arguments:a}, _set_import_path:{arguments:a, default_arguments:a}, _to_string:{arguments:, default_arguments:}, _unhandled_input:{arguments:a, default_arguments:a}, _unhandled_key_input:{arguments:a, default_arguments:a}, add:{arguments:a, b, default_arguments:a, b}, add_child:{arguments:a, b, default_arguments:a, b = False}, add_child_below_node:{arguments:a, b, c, default_arguments:a, b, c = False}, add_to_group:{arguments:a, b, default_arguments:a, b = False}, add_user_signal:{arguments:a, b, default_arguments:a, b = []}, call:{arguments:a, default_arguments:a}, call_deferred:{arguments:a, default_arguments:a}, callv:{arguments:a, b, default_arguments:a, b}, can_process:{arguments:, default_arguments:}, can_translate_messages:{arguments:, default_arguments:}, connect:{arguments:a, b, c, d, e, default_arguments:a, b, c, d = [], e = 0}, disconnect:{arguments:a, b, c, default_arguments:a, b, c}, divide:{arguments:a, b, default_arguments:a, b}, duplicate:{arguments:a, default_arguments:a = 15}, emit_signal:{arguments:a, default_arguments:a}, find_node:{arguments:a, b, c, default_arguments:a, b = True, c = True}, find_parent:{arguments:a, default_arguments:a}, free:{arguments:, default_arguments:}, get:{arguments:a, default_arguments:a}, get_child:{arguments:a, default_arguments:a}, get_child_count:{arguments:, default_arguments:}, get_children:{arguments:, default_arguments:}, get_class:{arguments:, default_arguments:}, get_custom_multiplayer:{arguments:, default_arguments:}, get_filename:{arguments:, default_arguments:}, get_groups:{arguments:, default_arguments:}, get_incoming_connections:{arguments:, default_arguments:}, get_index:{arguments:, default_arguments:}, get_indexed:{arguments:a, default_arguments:a}, get_instance_id:{arguments:, default_arguments:}, get_meta:{arguments:a, default_arguments:a}, get_meta_list:{arguments:, default_arguments:}, get_method_list:{arguments:, default_arguments:}, get_multiplayer:{arguments:, default_arguments:}, get_name:{arguments:, default_arguments:}, get_network_master:{arguments:, default_arguments:}, get_node:{arguments:a, default_arguments:a}, get_node_and_resource:{arguments:a, default_arguments:a}, get_node_or_null:{arguments:a, default_arguments:a}, get_owner:{arguments:, default_arguments:}, get_parent:{arguments:, default_arguments:}, get_path:{arguments:, default_arguments:}, get_path_to:{arguments:a, default_arguments:a}, get_pause_mode:{arguments:, default_arguments:}, get_physics_process_delta_time:{arguments:, default_arguments:}, get_position_in_parent:{arguments:, default_arguments:}, get_process_delta_time:{arguments:, default_arguments:}, get_process_priority:{arguments:, default_arguments:}, get_property_list:{arguments:, default_arguments:}, get_scene_instance_load_placeholder:{arguments:, default_arguments:}, get_script:{arguments:, default_arguments:}, get_signal_connection_list:{arguments:a, default_arguments:a}, get_signal_list:{arguments:, default_arguments:}, get_tree:{arguments:, default_arguments:}, get_viewport:{arguments:, default_arguments:}, has_meta:{arguments:a, default_arguments:a}, has_method:{arguments:a, default_arguments:a}, has_node:{arguments:a, default_arguments:a}, has_node_and_resource:{arguments:a, default_arguments:a}, has_signal:{arguments:a, default_arguments:a}, has_user_signal:{arguments:a, default_arguments:a}, is_a_parent_of:{arguments:a, default_arguments:a}, is_blocking_signals:{arguments:, default_arguments:}, is_class:{arguments:a, default_arguments:a}, is_connected:{arguments:a, b, c, default_arguments:a, b, c}, is_displayed_folded:{arguments:, default_arguments:}, is_greater_than:{arguments:a, default_arguments:a}, is_in_group:{arguments:a, default_arguments:a}, is_inside_tree:{arguments:, default_arguments:}, is_network_master:{arguments:, default_arguments:}, is_physics_processing:{arguments:, default_arguments:}, is_physics_processing_internal:{arguments:, default_arguments:}, is_processing:{arguments:, default_arguments:}, is_processing_input:{arguments:, default_arguments:}, is_processing_internal:{arguments:, default_arguments:}, is_processing_unhandled_input:{arguments:, default_arguments:}, is_processing_unhandled_key_input:{arguments:, default_arguments:}, is_queued_for_deletion:{arguments:, default_arguments:}, math_fight:{arguments:, default_arguments:}, move_child:{arguments:a, b, default_arguments:a, b}, multiply:{arguments:a, b, default_arguments:a, b}, notification:{arguments:a, b, default_arguments:a, b = False}, pi:{arguments:, default_arguments:}, print_stray_nodes:{arguments:, default_arguments:}, print_tree:{arguments:, default_arguments:}, print_tree_pretty:{arguments:, default_arguments:}, propagate_call:{arguments:a, b, c, default_arguments:a, b = [], c = False}, propagate_notification:{arguments:a, default_arguments:a}, property_list_changed_notify:{arguments:, default_arguments:}, queue_free:{arguments:, default_arguments:}, raise:{arguments:, default_arguments:}, remove_and_skip:{arguments:, default_arguments:}, remove_child:{arguments:a, default_arguments:a}, remove_from_group:{arguments:a, default_arguments:a}, remove_meta:{arguments:a, default_arguments:a}, replace_by:{arguments:a, b, default_arguments:a, b = False}, request_ready:{arguments:, default_arguments:}, rpc:{arguments:a, default_arguments:a}, rpc_config:{arguments:a, b, default_arguments:a, b}, rpc_id:{arguments:a, b, default_arguments:a, b}, rpc_unreliable:{arguments:a, default_arguments:a}, rpc_unreliable_id:{arguments:a, b, default_arguments:a, b}, rset:{arguments:a, b, default_arguments:a, b}, rset_config:{arguments:a, b, default_arguments:a, b}, rset_id:{arguments:a, b, c, default_arguments:a, b, c}, rset_unreliable:{arguments:a, b, default_arguments:a, b}, rset_unreliable_id:{arguments:a, b, c, default_arguments:a, b, c}, set:{arguments:a, b, default_arguments:a, b}, set_block_signals:{arguments:a, default_arguments:a}, set_custom_multiplayer:{arguments:a, default_arguments:a}, set_deferred:{arguments:a, b, default_arguments:a, b}, set_display_folded:{arguments:a, default_arguments:a}, set_filename:{arguments:a, default_arguments:a}, set_indexed:{arguments:a, b, default_arguments:a, b}, set_message_translation:{arguments:a, default_arguments:a}, set_meta:{arguments:a, b, default_arguments:a, b}, set_name:{arguments:a, default_arguments:a}, set_network_master:{arguments:a, b, default_arguments:a, b = True}, set_owner:{arguments:a, default_arguments:a}, set_pause_mode:{arguments:a, default_arguments:a}, set_physics_process:{arguments:a, default_arguments:a}, set_physics_process_internal:{arguments:a, default_arguments:a}, set_process:{arguments:a, default_arguments:a}, set_process_input:{arguments:a, default_arguments:a}, set_process_internal:{arguments:a, default_arguments:a}, set_process_priority:{arguments:a, default_arguments:a}, set_process_unhandled_input:{arguments:a, default_arguments:a}, set_process_unhandled_key_input:{arguments:a, default_arguments:a}, set_scene_instance_load_placeholder:{arguments:a, default_arguments:a}, set_script:{arguments:a, default_arguments:a}, subtract:{arguments:a, b, default_arguments:a, b}, sum:{arguments:a, default_arguments:a}, to_string:{arguments:, default_arguments:}, tr:{arguments:a, default_arguments:a}, update_configuration_warning:{arguments:, default_arguments:}} != |Dictionary| {_enter_tree:{arguments:, default_arguments:}, _exit_tree:{arguments:, default_arguments:}, _get:{arguments:a, default_arguments:a}, _get_configuration_warning:{arguments:, default_arguments:}, _get_editor_description:{arguments:, default_arguments:}, _get_import_path:{arguments:, default_arguments:}, _get_property_list:{arguments:, default_arguments:}, _init:{arguments:, default_arguments:}, _input:{arguments:a, default_arguments:a}, _notification:{arguments:a, default_arguments:a}, _physics_process:{arguments:a, default_arguments:a}, _process:{arguments:a, default_arguments:a}, _ready:{arguments:, default_arguments:}, _set:{arguments:a, b, default_arguments:a, b}, _set_editor_description:{arguments:a, default_arguments:a}, _set_import_path:{arguments:a, default_arguments:a}, _to_string:{arguments:, default_arguments:}, _unhandled_input:{arguments:a, default_arguments:a}, _unhandled_key_input:{arguments:a, default_arguments:a}, add:{arguments:a, b, default_arguments:a, b}, add_child:{arguments:a, b, default_arguments:a, b = False}, add_child_below_node:{arguments:a, b, c, default_arguments:a, b, c = False}, add_to_group:{arguments:a, b, default_arguments:a, b = False}, add_user_signal:{arguments:a, b, default_arguments:a, b = []}, call:{arguments:a, default_arguments:a}, call_deferred:{arguments:a, default_arguments:a}, callv:{arguments:a, b, default_arguments:a, b}, can_process:{arguments:, default_arguments:}, can_translate_messages:{arguments:, default_arguments:}, connect:{arguments:a, b, c, d, e, default_arguments:a, b, c, d = [], e = 0}, disconnect:{arguments:a, b, c, default_arguments:a, b, c}, divide:{arguments:a, b, default_arguments:a, b}, duplicate:{arguments:a, default_arguments:a = 15}, emit_signal:{arguments:a, default_arguments:a}, find_node:{arguments:a, b, c, default_arguments:a, b = True, c = True}, find_parent:{arguments:a, default_arguments:a}, free:{arguments:, default_arguments:}, get:{arguments:a, default_arguments:a}, get_child:{arguments:a, default_arguments:a}, get_child_count:{arguments:, default_arguments:}, get_children:{arguments:, default_arguments:}, get_class:{arguments:, default_arguments:}, get_custom_multiplayer:{arguments:, default_arguments:}, get_filename:{arguments:, default_arguments:}, get_groups:{arguments:, default_arguments:}, get_incoming_connections:{arguments:, default_arguments:}, get_index:{arguments:, default_arguments:}, get_indexed:{arguments:a, default_arguments:a}, get_instance_id:{arguments:, default_arguments:}, get_meta:{arguments:a, default_arguments:a}, get_meta_list:{arguments:, default_arguments:}, get_method_list:{arguments:, default_arguments:}, get_multiplayer:{arguments:, default_arguments:}, get_name:{arguments:, default_arguments:}, get_network_master:{arguments:, default_arguments:}, get_node:{arguments:a, default_arguments:a}, get_node_and_resource:{arguments:a, default_arguments:a}, get_node_or_null:{arguments:a, default_arguments:a}, get_owner:{arguments:, default_arguments:}, get_parent:{arguments:, default_arguments:}, get_path:{arguments:, default_arguments:}, get_path_to:{arguments:a, default_arguments:a}, get_pause_mode:{arguments:, default_arguments:}, get_physics_process_delta_time:{arguments:, default_arguments:}, get_position_in_parent:{arguments:, default_arguments:}, get_process_delta_time:{arguments:, default_arguments:}, get_process_priority:{arguments:, default_arguments:}, get_property_list:{arguments:, default_arguments:}, get_scene_instance_load_placeholder:{arguments:, default_arguments:}, get_script:{arguments:, default_arguments:}, get_signal_connection_list:{arguments:a, default_arguments:a}, get_signal_list:{arguments:, default_arguments:}, get_tree:{arguments:, default_arguments:}, get_viewport:{arguments:, default_arguments:}, has_meta:{arguments:a, default_arguments:a}, has_method:{arguments:a, default_arguments:a}, has_node:{arguments:a, default_arguments:a}, has_node_and_resource:{arguments:a, default_arguments:a}, has_signal:{arguments:a, default_arguments:a}, has_user_signal:{arguments:a, default_arguments:a}, is_a_parent_of:{arguments:a, default_arguments:a}, is_blocking_signals:{arguments:, default_arguments:}, is_class:{arguments:a, default_arguments:a}, is_connected:{arguments:a, b, c, default_arguments:a, b, c}, is_displayed_folded:{arguments:, default_arguments:}, is_greater_than:{arguments:a, default_arguments:a}, is_in_group:{arguments:a, default_arguments:a}, is_inside_tree:{arguments:, default_arguments:}, is_network_master:{arguments:, default_arguments:}, is_physics_processing:{arguments:, default_arguments:}, is_physics_processing_internal:{arguments:, default_arguments:}, is_processing:{arguments:, default_arguments:}, is_processing_input:{arguments:, default_arguments:}, is_processing_internal:{arguments:, default_arguments:}, is_processing_unhandled_input:{arguments:, default_arguments:}, is_processing_unhandled_key_input:{arguments:, default_arguments:}, is_queued_for_deletion:{arguments:, default_arguments:}, math_fight:{arguments:, default_arguments:}, move_child:{arguments:a, b, default_arguments:a, b}, multiply:{arguments:a, b, default_arguments:a, b}, notification:{arguments:a, b, default_arguments:a, b = False}, pi:{arguments:, default_arguments:}, print_stray_nodes:{arguments:, default_arguments:}, print_tree:{arguments:, default_arguments:}, print_tree_pretty:{arguments:, default_arguments:}, propagate_call:{arguments:a, b, c, default_arguments:a, b = [], c = False}, propagate_notification:{arguments:a, default_arguments:a}, property_list_changed_notify:{arguments:, default_arguments:}, queue_free:{arguments:, default_arguments:}, raise:{arguments:, default_arguments:}, remove_and_skip:{arguments:, default_arguments:}, remove_child:{arguments:a, default_arguments:a}, remove_from_group:{arguments:a, default_arguments:a}, remove_meta:{arguments:a, default_arguments:a}, replace_by:{arguments:a, b, default_arguments:a, b = False}, request_ready:{arguments:, default_arguments:}, rpc:{arguments:a, default_arguments:a}, rpc_config:{arguments:a, b, default_arguments:a, b}, rpc_id:{arguments:a, b, default_arguments:a, b}, rpc_unreliable:{arguments:a, default_arguments:a}, rpc_unreliable_id:{arguments:a, b, default_arguments:a, b}, rset:{arguments:a, b, default_arguments:a, b}, rset_config:{arguments:a, b, default_arguments:a, b}, rset_id:{arguments:a, b, c, default_arguments:a, b, c}, rset_unreliable:{arguments:a, b, default_arguments:a, b}, rset_unreliable_id:{arguments:a, b, c, default_arguments:a, b, c}, set:{arguments:a, b, default_arguments:a, b}, set_block_signals:{arguments:a, default_arguments:a}, set_custom_multiplayer:{arguments:a, default_arguments:a}, set_deferred:{arguments:a, b, default_arguments:a, b}, set_display_folded:{arguments:a, default_arguments:a}, set_filename:{arguments:a, default_arguments:a}, set_indexed:{arguments:a, b, default_arguments:a, b}, set_message_translation:{arguments:a, default_arguments:a}, set_meta:{arguments:a, b, default_arguments:a, b}, set_name:{arguments:a, default_arguments:a}, set_network_master:{arguments:a, b, default_arguments:a, b = True}, set_owner:{arguments:a, default_arguments:a}, set_pause_mode:{arguments:a, default_arguments:a}, set_physics_process:{arguments:a, default_arguments:a}, set_physics_process_internal:{arguments:a, default_arguments:a}, set_process:{arguments:a, default_arguments:a}, set_process_input:{arguments:a, default_arguments:a}, set_process_internal:{arguments:a, default_arguments:a}, set_process_priority:{arguments:a, default_arguments:a}, set_process_unhandled_input:{arguments:a, default_arguments:a}, set_process_unhandled_key_input:{arguments:a, default_arguments:a}, set_scene_instance_load_placeholder:{arguments:a, default_arguments:a}, set_script:{arguments:a, default_arguments:a}, subtract:{arguments:a, b, default_arguments:a, b}, sum:{arguments:a, default_arguments:a}, to_string:{arguments:, default_arguments:}, tr:{arguments:a, default_arguments:a}, update_configuration_warning:{arguments:, default_arguments:}}",
"success": true
} ],
"context": "When we create two of it for the same script",
"fullname": "test_When_we_create_two_of_it_for_the_same_script",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|Object| [Node:4140] is equal to |Object| [Node:4140]",
"context": "Then we get the same double back",
"expected": "|Object| [Node:4140] is equal to |Object| [Node:4140]",
"success": true
} ],
"context": "When we call the double the second time",
"fullname": "test_When_we_call_double_a_second_time_on",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Reference:4147] is instance of class: [GDScript:1564]",
"context": "Then we get that inner class back",
"expected": "[Reference:4147] is instance of class: [GDScript:1564]",
"success": true
} ],
"context": "When we double an inner class",
"fullname": "test_When_we_double_an_inner_class",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 3,
"path": "res://tests/integration/script_director.test.gd",
"source": {
"containers": [ "res://tests/integration", "res://tests" ],
"method": "",
"path": "res://tests/integration/script_director.test.gd",
"tags": [  ],
"test": ExtResource( 13 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 3
}, {
"context": "Given a Test Double",
"methods": [ {
"assertions": [ {
"actual": "|String| Jackie is equal to |String| Jackie",
"context": "Then we can double the object successfully",
"expected": "|String| Jackie is equal to |String| Jackie",
"success": true
} ],
"context": "When we pass in dependecies on double",
"fullname": "test_When_we_pass_in_deps_on_double",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "(1, 1) is builtin: Vector2",
"context": "Then we can call methods on it",
"expected": "(1, 1) is builtin: Vector2",
"success": true
} ],
"context": "When we double an inner class",
"fullname": "test_When_we_double_an_inner_class",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "method: add was called with arguments: [10, 10]",
"context": "Then we can see that it was called with those arguments",
"expected": "method: add was called with arguments: [10, 10]",
"success": true
} ],
"context": "When we pass arguments to a method call that we are spying on",
"fullname": "test_When_we_pass_arguments_to_a_method_call_that_we_are_spying_on",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|float| 6.283185 is equal to |float| 6.283185",
"context": "Then we can call the static methods of that inner double",
"expected": "|float| 6.283185 is equal to |float| 6.283185",
"success": true
} ],
"context": "When we add an doubled inner class to it",
"fullname": "test_When_we_add_a_doubled_inner_class_to_it",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 9999 is equal to |int| 9999",
"context": "Then it returns the corresponding value when the partial pattern matches",
"expected": "|int| 9999 is equal to |int| 9999",
"success": true
} ],
"context": "When we call a method that was stubbed with a partial (ie using any()) argument pattern",
"fullname": "test_When_we_call_a_method_that_was_stubbed_with_a_partial_argument_pattern",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "add was called",
"context": "Then we can see that it was called at least once",
"expected": "add was called",
"success": true
} ],
"context": "When we call a method that we are spying on",
"fullname": "test_When_we_call_a_method_that_we_are_spying_on",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 4 is equal to |int| 4",
"context": "Then we get the correct result",
"expected": "|int| 4 is equal to |int| 4",
"success": true
} ],
"context": "When we call an add(x, y) method that we haven't directed",
"fullname": "test_When_we_call_an_add_method_that_we_have_not_directed",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|null| Null == null",
"context": "Then we get the stubbed value back",
"expected": "|null| Null == null",
"success": true
} ],
"context": "When we stub a method of a doubled inner class",
"fullname": "test_When_we_stub_a_method_of_a_double_inner_class",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 99 is equal to |int| 99",
"context": "Then it affects the state of the double",
"expected": "|int| 99 is equal to |int| 99",
"success": true
} ],
"context": "When we pass a funcref as a subcall",
"fullname": "test_When_we_pass_a_funcref_as_a_subcall",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|Array| [10, 5] is equal to |Array| [10, 5]",
"context": "Then it returns a value",
"expected": "|Array| [10, 5] is equal to |Array| [10, 5]",
"success": true
} ],
"context": "When we pass an Object with a call_func function",
"fullname": "test_When_we_pass_an_object_with_callfunc_method_as_a_subcall",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 9999 is equal to |int| 9999",
"context": "Then it returns the corresponding value when the pattern matches",
"expected": "|int| 9999 is equal to |int| 9999",
"success": true
} ],
"context": "When we call a method that was stubbed with an argument pattern that includes a non-primitive object",
"fullname": "test_When_we_call_a_method_that_was_stubbed_with_an_argument_pattern_that_includes_a_non_primitive_object",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|null| Null == null",
"context": "Then we get null",
"expected": "|null| Null == null",
"success": true
} ],
"context": "When we call a method that we have dummied",
"fullname": "test_When_we_call_a_method_that_we_have_dummied",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 99 is equal to |int| 99",
"context": "Then it returns a value",
"expected": "|int| 99 is equal to |int| 99",
"success": true
} ],
"context": "When we pass a funcref as a subcall that returns",
"fullname": "test_When_we_pass_a_funcref_as_a_subcall_that_returns_a_value",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then it returns true",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we call a method that we have stubbed to return true",
"fullname": "test_When_we_call_a_method_that_we_have_stubbed_to_return_true",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|Object| [Node:4250] is equal to |Object| [Node:4250]",
"context": "Then it returns that same node",
"expected": "|Object| [Node:4250] is equal to |Object| [Node:4250]",
"success": true
} ],
"context": "When we call a method that we have stubbed to return a node",
"fullname": "test_When_we_call_a_method_that_we_have_stubbed_to_return_a_node",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|String| Jackie is equal to |String| Jackie",
"context": "Then we can double the object successfully",
"expected": "|String| Jackie is equal to |String| Jackie",
"success": true
} ],
"context": "When we pass in dependecies on direct",
"fullname": "test_When_we_pass_in_deps_on_direct",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 100 is equal to |int| 100",
"context": "Then it returns the default stubbed value when the arguments don't match any pattern",
"expected": "|int| 100 is equal to |int| 100",
"success": true
}, {
"actual": "|int| 1000 is equal to |int| 1000",
"context": "Then it returns the the corresponding value to the pattern the arguments matched",
"expected": "|int| 1000 is equal to |int| 1000",
"success": true
} ],
"context": "When we call a method that was stubbed to return different values based on argument patterns",
"fullname": "test_When_we_call_a_method_that_was_stubbed_to_return_different_values_based_on_argument_patterns",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|bool| True is equal to |bool| True",
"context": "Then we can call it",
"expected": "|bool| True is equal to |bool| True",
"success": true
} ],
"context": "When we stubbed a keyworded method by passing in the correct keyword",
"fullname": "test_When_we_stubbed_a_keyword_method_by_passing_in_the_correct_keyword",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 4 is equal to |int| 4",
"context": "Then it calls its super implementation by default",
"expected": "|int| 4 is equal to |int| 4",
"success": true
}, {
"actual": "|int| 9999 is equal to |int| 9999",
"context": "Then it does not call its super implementation when arguments patterns match a different return value",
"expected": "|int| 9999 is equal to |int| 9999",
"success": true
} ],
"context": "When we call a method that we stubbed to call its super implementation by default",
"fullname": "test_When_we_call_a_method_that_we_stubbed_to_call_its_super_implementation_by_default",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
} ],
"passed": 19,
"path": "res://tests/integration/test_double.test.gd",
"source": {
"containers": [ "res://tests/integration", "res://tests" ],
"method": "",
"path": "res://tests/integration/test_double.test.gd",
"tags": [  ],
"test": ExtResource( 14 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 19
}, {
"context": "Given a Boolean Assertion",
"methods": [ {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then it passes",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When calling asserts.is_true(true)",
"fullname": "test_when_calling_asserts_is_true",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| False == false",
"context": "Then it passes",
"expected": "|bool| False == false",
"success": true
} ],
"context": "When calling asserts.is_false(false)",
"fullname": "test_when_calling_asserts_is_false",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| True != false",
"context": "",
"expected": "|bool| True == false",
"success": false
} ],
"context": " intentional failure",
"fullname": "test_intentional_failure",
"passed": 0,
"success": false,
"time": 0.0,
"total": 1
} ],
"passed": 2,
"path": "res://tests/unit/boolean.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/boolean.test.gd",
"tags": [  ],
"test": ExtResource( 11 ),
"yield_time": 0.0
},
"success": false,
"time_taken": 0.0,
"total": 3
}, {
"context": "Given an Equality Assertion",
"methods": [ {
"assertions": [ {
"actual": "|int| 2 is equal or greater |int| 1",
"context": "Then it passes",
"expected": "|int| 2 is equal or greater |int| 1",
"success": true
} ],
"context": "When calling asserts.is_equal_or_greater_than(2, 1)",
"fullname": "test_when_calling_is_equal_or_greater_than",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 2 is greater than |int| 1",
"context": "Then it passes",
"expected": "|int| 2 is greater than |int| 1",
"success": true
} ],
"context": "When calling asserts.is_greater_than(2, 1)",
"fullname": "test_when_calling_is_greater_than",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 1 is equal to |int| 1",
"context": "Then it passes",
"expected": "|int| 1 is equal to |int| 1",
"success": true
} ],
"context": "When calling asserts.is_equal(1, 1)",
"fullname": "test_when_calling_is_equal",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 1 is less than |int| 2",
"context": "Then it passes",
"expected": "|int| 1 is less than |int| 2",
"success": true
} ],
"context": "When calling asserts.is_less_than(2, 1)",
"fullname": "test_when_calling_is_less_than",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 1 is equal or greater |int| 1",
"context": "Then it passes",
"expected": "|int| 1 is equal or greater |int| 1",
"success": true
} ],
"context": "When calling asserts.is_equal_or_greater_than(1, 1)",
"fullname": "test_when_calling_is_equal_or_greater_than_with_equal_values",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 5 is not equal to |int| 6",
"context": "Then it passes",
"expected": "|int| 5 != |int| 6",
"success": true
} ],
"context": "When callign asserts.is_not_equal(5, 6)",
"fullname": "test_when_calling_is_not_equal",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 1 is equal or less than |int| 1",
"context": "Then it passes!",
"expected": "|int| 1 is equal or less than |int| 1",
"success": true
} ],
"context": "When calling asserts.is_equal_or_less_than(1, 1)",
"fullname": "test_when_calling_is_equal_or_less_than_with_equal_values",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 7,
"path": "res://tests/unit/equality.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/equality.test.gd",
"tags": [  ],
"test": ExtResource( 8 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 7
}, {
"context": "Given A File Assertion",
"methods": [ {
"assertions": [ {
"actual": "res://somefile.gd does not exist",
"context": "Then it passes",
"expected": "res://somefile.gd does not exist",
"success": true
} ],
"context": "When calling asserts.file_does_not_exist when there is no file",
"fullname": "test_when_calling_file_does_not_exist_when_there_is_no_file",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": " does not exist",
"context": "Then it passes",
"expected": " does not exist",
"success": true
} ],
"context": "When calling asserts file does not exist when path is empty",
"fullname": "test_when_calling_file_does_not_exist_when_path_is_empty",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "res://tests/unit/file.test.gd exists",
"context": "Then it passes",
"expected": "res://tests/unit/file.test.gd exists",
"success": true
} ],
"context": "When calling asserts.file_exists when the file is this suite",
"fullname": "test_when_calling_file_exists_when_file_is_self",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 3,
"path": "res://tests/unit/file.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/file.test.gd",
"tags": [  ],
"test": ExtResource( 3 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 3
}, {
"context": "Given an Is Instance of class/type Assertion",
"methods": [ {
"assertions": [ {
"actual": "|AABB| 0, 0, 0 - 0, 0, 0 != null",
"context": "AABB is not null",
"expected": "|AABB| 0, 0, 0 - 0, 0, 0 != null",
"success": true
}, {
"actual": "0, 0, 0 - 0, 0, 0 is builtin: AABB",
"context": "Then it passes",
"expected": "0, 0, 0 - 0, 0, 0 is builtin: AABB",
"success": true
} ],
"context": "When calling asserts.is_AABB(aabb: AABB)",
"fullname": "test_when_calling_is_AABB",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|Array| [] != null",
"context": "array is not null",
"expected": "|Array| [] != null",
"success": true
}, {
"actual": "[] is builtin: Array",
"context": "Then it passes",
"expected": "[] is builtin: Array",
"success": true
} ],
"context": "When calling asserts.is_Array(array: Array)",
"fullname": "test_when_calling_is_Array",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|Transform2D| ((1, 0), (0, 1), (0, 0)) != null",
"context": "transform2D is not null",
"expected": "|Transform2D| ((1, 0), (0, 1), (0, 0)) != null",
"success": true
}, {
"actual": "((1, 0), (0, 1), (0, 0)) is builtin: Transform2D",
"context": "Then it passes",
"expected": "((1, 0), (0, 1), (0, 0)) is builtin: Transform2D",
"success": true
} ],
"context": "When calling asserts.is_Transform(transform2D: Transform2D)",
"fullname": "test_when_calling_is_Transform2D",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|Rect2| (0, 0, 0, 0) != null",
"context": "rect2 is not null",
"expected": "|Rect2| (0, 0, 0, 0) != null",
"success": true
}, {
"actual": "(0, 0, 0, 0) is builtin: Rect2",
"context": "Then it passes",
"expected": "(0, 0, 0, 0) is builtin: Rect2",
"success": true
} ],
"context": "When calling asserts.is_Rect2(rect2: Rect2)",
"fullname": "test_when_calling_is_Rect2",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|Vector3| (0, 0, 0) != null",
"context": "vec3 is not null",
"expected": "|Vector3| (0, 0, 0) != null",
"success": true
}, {
"actual": "(0, 0, 0) is builtin: Vector3",
"context": "Then it passes",
"expected": "(0, 0, 0) is builtin: Vector3",
"success": true
} ],
"context": "When calling asserts.is_Vector3(vec3: Vector3",
"fullname": "test_when_calling_is_Vector3",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|Quat| (0, 0, 0, 1) != null",
"context": "quat is not null",
"expected": "|Quat| (0, 0, 0, 1) != null",
"success": true
}, {
"actual": "(0, 0, 0, 1) is builtin: Quat",
"context": "Then it passes",
"expected": "(0, 0, 0, 1) is builtin: Quat",
"success": true
} ],
"context": "When calling asserts.is_Quat(quat: Quat)",
"fullname": "test_when_calling_is_Quat",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "{} is builtin: Dictionary",
"context": "Then it passes",
"expected": "{} is builtin: Dictionary",
"success": true
} ],
"context": "When calling asserts.is_Dictionary({})",
"fullname": "test_when_calling_is_Dictionary",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|PoolIntArray| [] != null",
"context": "ints is not null",
"expected": "|PoolIntArray| [] != null",
"success": true
}, {
"actual": "[] is builtin: PoolIntArray",
"context": "Then it passes",
"expected": "[] is builtin: PoolIntArray",
"success": true
} ],
"context": "When calling asserts.is_PoolIntArray(ints: PoolIntArray)",
"fullname": "test_when_calling_is_PoolIntArray",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|PoolByteArray| [PoolByteArray] != null",
"context": "bytes is not null",
"expected": "|PoolByteArray| [PoolByteArray] != null",
"success": true
}, {
"actual": "[PoolByteArray] is builtin: PoolByteArray",
"context": "Then it passes",
"expected": "[PoolByteArray] is builtin: PoolByteArray",
"success": true
} ],
"context": "When calling asserts.is_PoolByteArray(bytes: PoolByteArray)",
"fullname": "test_when_calling_is_PoolByteArray",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|RID| [RID] != null",
"context": "rid is not null",
"expected": "|RID| [RID] != null",
"success": true
}, {
"actual": "[RID] is builtin: RID",
"context": "Then it passes",
"expected": "[RID] is builtin: RID",
"success": true
} ],
"context": "When calling asserts.is_RID(rid: RID)",
"fullname": "test_when_calling_is_RID",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|PoolStringArray| [] != null",
"context": "strs is not null",
"expected": "|PoolStringArray| [] != null",
"success": true
}, {
"actual": "[] is builtin: PoolStringArray",
"context": "Then it passes",
"expected": "[] is builtin: PoolStringArray",
"success": true
} ],
"context": "When calling is asserts.is_PoolStringArray(strs: PoolStringArray)",
"fullname": "test_when_calling_is_PoolStringArray",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "1 is builtin: float",
"context": "Then it passes",
"expected": "1 is builtin: float",
"success": true
} ],
"context": "When calling asserts.is_float(1.0)",
"fullname": "test_when_calling_is_float",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|PoolColorArray| [PoolColorArray] != null",
"context": "colors is not null",
"expected": "|PoolColorArray| [PoolColorArray] != null",
"success": true
}, {
"actual": "[PoolColorArray] is builtin: PoolColorArray",
"context": "Then it passes",
"expected": "[PoolColorArray] is builtin: PoolColorArray",
"success": true
} ],
"context": "When calling asserts.is_PoolColorArray(colors: PoolColorArray)",
"fullname": "test_when_calling_is_PoolColorArray",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|NodePath| . != null",
"context": "@'Parent/Child' is not null",
"expected": "|NodePath| . != null",
"success": true
}, {
"actual": ". is builtin: NodePath",
"context": "Then it passes",
"expected": ". is builtin: NodePath",
"success": true
} ],
"context": "When calling asserts.is_NodePath(@'Parent/Child')",
"fullname": "test_when_calling_is_NodePath",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|PoolVector2Array| [] != null",
"context": "vec2s is not null",
"expected": "|PoolVector2Array| [] != null",
"success": true
}, {
"actual": "[] is builtin: PoolVector2Array",
"context": "Then it passes",
"expected": "[] is builtin: PoolVector2Array",
"success": true
} ],
"context": "When calling is asserts.is_PoolVector2Array(vec2s: PoolVector2Array)",
"fullname": "test_when_calling_is_PoolVector2Array",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|PoolVector3Array| [] != null",
"context": "vec3s is not null",
"expected": "|PoolVector3Array| [] != null",
"success": true
}, {
"actual": "[] is builtin: PoolVector3Array",
"context": "Then it passes",
"expected": "[] is builtin: PoolVector3Array",
"success": true
} ],
"context": "When calling is asserts.is_PoolVector3Array(vec3s: PoolVector3Array)",
"fullname": "test_when_calling_is_PoolVector3Array",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|Transform| 1, 0, 0, 0, 1, 0, 0, 0, 1 - 0, 0, 0 != null",
"context": "transform is not null",
"expected": "|Transform| 1, 0, 0, 0, 1, 0, 0, 0, 1 - 0, 0, 0 != null",
"success": true
}, {
"actual": "1, 0, 0, 0, 1, 0, 0, 0, 1 - 0, 0, 0 is builtin: Transform",
"context": "Then it passes",
"expected": "1, 0, 0, 0, 1, 0, 0, 0, 1 - 0, 0, 0 is builtin: Transform",
"success": true
} ],
"context": "When calling asserts.is_Transform(transform: Transform)",
"fullname": "test_when_calling_is_Transform",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|String|  != null",
"context": "strs is not null",
"expected": "|String|  != null",
"success": true
}, {
"actual": " is builtin: String",
"context": "Then it passes",
"expected": " is builtin: String",
"success": true
} ],
"context": "When calling asserts.is_string(strs: String)",
"fullname": "test_when_calling_is_string",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|Basis| ((1, 0, 0), (0, 1, 0), (0, 0, 1)) != null",
"context": "basis is not null",
"expected": "|Basis| ((1, 0, 0), (0, 1, 0), (0, 0, 1)) != null",
"success": true
}, {
"actual": "((1, 0, 0), (0, 1, 0), (0, 0, 1)) is builtin: Basis",
"context": "Then it passes",
"expected": "((1, 0, 0), (0, 1, 0), (0, 0, 1)) is builtin: Basis",
"success": true
} ],
"context": "When calling asserts.is_basis(basis: Basis",
"fullname": "test_when_calling_is_Basis",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|Plane| 0, 0, 0, 0 != null",
"context": "plane is not null",
"expected": "|Plane| 0, 0, 0, 0 != null",
"success": true
}, {
"actual": "0, 0, 0, 0 is builtin: Plane",
"context": "then it passes",
"expected": "0, 0, 0, 0 is builtin: Plane",
"success": true
} ],
"context": "When calling asserts.is_Plane(plane: Plane())",
"fullname": "test_when_calling_is_Plane",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|Vector2| (0, 0) != null",
"context": "vec2 is not null",
"expected": "|Vector2| (0, 0) != null",
"success": true
}, {
"actual": "(0, 0) is builtin: Vector2",
"context": "Then it passes",
"expected": "(0, 0) is builtin: Vector2",
"success": true
} ],
"context": "When calling asserts.is_Vector2(vec2)",
"fullname": "test_when_calling_is_Vector2",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|Object| [Node:4350] != null",
"context": "node is not null",
"expected": "|Object| [Node:4350] != null",
"success": true
}, {
"actual": "[Node:4350] is builtin: Object",
"context": "An instance of node is an Object",
"expected": "[Node:4350] is builtin: Object",
"success": true
} ],
"context": "When calling is asserts.object(node: Node)",
"fullname": "test_when_calling_is_object",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|PoolRealArray| [] != null",
"context": "reals is not null",
"expected": "|PoolRealArray| [] != null",
"success": true
}, {
"actual": "[] is builtin: PoolRealArray",
"context": "Then it passes",
"expected": "[] is builtin: PoolRealArray",
"success": true
} ],
"context": "When calling is asserts.is_PoolRealArray(reals: PoolRealArray)",
"fullname": "test_when_calling_is_PoolRealArray",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "True is builtin: bool",
"context": "Then it passes",
"expected": "True is builtin: bool",
"success": true
} ],
"context": "When calling asserts.is_bool(true)",
"fullname": "test_when_calling_is_bool",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "1 is builtin: int",
"context": "Then it passes",
"expected": "1 is builtin: int",
"success": true
} ],
"context": "When callign asserts.is_int(1)",
"fullname": "test_when_calling_is_int",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|Color| 0,0,0,1 != null",
"context": "color is not null",
"expected": "|Color| 0,0,0,1 != null",
"success": true
}, {
"actual": "0,0,0,1 is builtin: Color",
"context": "Then it passes",
"expected": "0,0,0,1 is builtin: Color",
"success": true
} ],
"context": "When calling asserts.is_color(color: Color)",
"fullname": "test_when_calling_is_Color",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
} ],
"passed": 26,
"path": "res://tests/unit/is_instance.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/is_instance.test.gd",
"tags": [  ],
"test": ExtResource( 6 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 26
}, {
"context": "Given an Is Not Instance of class/type Assertion",
"methods": [ {
"assertions": [ {
"actual": "Null is not builtin: Array",
"context": "Then it passes",
"expected": "Null is not builtin: Array",
"success": true
} ],
"context": "when calling asserts.is_not_Array(null)",
"fullname": "test_when_calling_is_not_Array",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Color",
"context": "Then it passes",
"expected": "Null is not builtin: Color",
"success": true
} ],
"context": "when calling asserts.is_not_Color(null)",
"fullname": "test_when_calling_is_not_Color",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: float",
"context": "Then it passes",
"expected": "Null is not builtin: float",
"success": true
} ],
"context": "when calling asserts.is_not_float(null)",
"fullname": "test_when_calling_is_not_float",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: AABB",
"context": "Then it passes",
"expected": "Null is not builtin: AABB",
"success": true
} ],
"context": "when calling asserts.is_not_AABB(null)",
"fullname": "test_when_calling_is_not_AABB",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Basis",
"context": "Then it passes",
"expected": "Null is not builtin: Basis",
"success": true
} ],
"context": "when calling asserts.is_not_Basis(null)",
"fullname": "test_when_calling_is_not_Basis",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: int",
"context": "Then it passes",
"expected": "Null is not builtin: int",
"success": true
} ],
"context": "when calling asserts.is_not_int(null)",
"fullname": "test_when_calling_is_not_int",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: bool",
"context": "Then it passes",
"expected": "Null is not builtin: bool",
"success": true
} ],
"context": "when calling asserts.is_not_bool(null)",
"fullname": "test_when_calling_is_not_bool",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Dictionary",
"context": "Then it passes",
"expected": "Null is not builtin: Dictionary",
"success": true
} ],
"context": "when calling asserts.is_not_Dictionary(null)",
"fullname": "test_when_calling_is_not_Dictionary",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: NodePath",
"context": "Then it passes",
"expected": "Null is not builtin: NodePath",
"success": true
} ],
"context": "when calling asserts.is_not_NodePath(null)",
"fullname": "test_when_calling_is_not_NodePath",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Object",
"context": "Then it passes",
"expected": "Null is not builtin: Object",
"success": true
} ],
"context": "when calling asserts.is_not_Object(null)",
"fullname": "test_when_calling_is_not_Object",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: PoolStringArray",
"context": "Then it passes",
"expected": "Null is not builtin: PoolStringArray",
"success": true
} ],
"context": "when calling asserts.is_not_PoolStringArray(null)",
"fullname": "test_when_calling_is_not_PoolStringArray",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Quat",
"context": "Then it passes",
"expected": "Null is not builtin: Quat",
"success": true
} ],
"context": "when calling asserts.is_not_Quat(null)",
"fullname": "test_when_calling_is_not_Quat",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: PoolRealArray",
"context": "Then it passes",
"expected": "Null is not builtin: PoolRealArray",
"success": true
} ],
"context": "when calling asserts.is_not_PoolRealArray(null)",
"fullname": "test_when_calling_is_not_PoolRealArray",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: RID",
"context": "Then it passes",
"expected": "Null is not builtin: RID",
"success": true
} ],
"context": "when calling asserts.is_not_RID(null)",
"fullname": "test_when_calling_is_not_RID",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: PoolIntArray",
"context": "Then it passes",
"expected": "Null is not builtin: PoolIntArray",
"success": true
} ],
"context": "when calling asserts.is_not_PoolIntArray(null)",
"fullname": "test_when_calling_is_not_PoolIntArray",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Vector2",
"context": "Then it passes",
"expected": "Null is not builtin: Vector2",
"success": true
} ],
"context": "when calling asserts.is_not_Vector2(null)",
"fullname": "test_when_calling_is_not_Vector2",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Transform",
"context": "Then it passes",
"expected": "Null is not builtin: Transform",
"success": true
} ],
"context": "when calling asserts.is_not_Transform(null)",
"fullname": "test_when_calling_is_not_Transform",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: String",
"context": "Then it passes",
"expected": "Null is not builtin: String",
"success": true
} ],
"context": "when calling asserts.is_not_String(null)",
"fullname": "test_when_calling_is_not_String",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: PoolVector2Array",
"context": "Then it passes",
"expected": "Null is not builtin: PoolVector2Array",
"success": true
} ],
"context": "when calling asserts.is_not_PoolVector2Array(null)",
"fullname": "test_when_calling_is_not_PoolVector2Array",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: PoolVector3Array",
"context": "Then it passes",
"expected": "Null is not builtin: PoolVector3Array",
"success": true
} ],
"context": "when calling asserts.is_not_PoolVector3Array(null)",
"fullname": "test_when_calling_is_not_PoolVector3Array",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Plane",
"context": "Then it passes",
"expected": "Null is not builtin: Plane",
"success": true
} ],
"context": "when calling asserts.is_not_Plane(null)",
"fullname": "test_when_calling_is_not_Plane",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Transform2D",
"context": "Then it passes",
"expected": "Null is not builtin: Transform2D",
"success": true
} ],
"context": "when calling asserts.is_not_Transform2D(null)",
"fullname": "test_when_calling_is_not_Transform2D",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: PoolColorArray",
"context": "Then it passes",
"expected": "Null is not builtin: PoolColorArray",
"success": true
} ],
"context": "when calling asserts.is_not_PoolColorArray(null)",
"fullname": "test_when_calling_is_not_PoolColorArray",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Vector3",
"context": "Then it passes",
"expected": "Null is not builtin: Vector3",
"success": true
} ],
"context": "when calling asserts.is_not_Vector3(null)",
"fullname": "test_when_calling_is_not_Vector3",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: PoolByteArray",
"context": "Then it passes",
"expected": "Null is not builtin: PoolByteArray",
"success": true
} ],
"context": "when calling asserts.is_not_PoolByteArray(null)",
"fullname": "test_when_calling_is_not_PoolByteArray",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Rect2",
"context": "Then it passes",
"expected": "Null is not builtin: Rect2",
"success": true
} ],
"context": "when calling asserts.is_not_Rect2(null)",
"fullname": "test_when_calling_is_not_Rect2",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 26,
"path": "res://tests/unit/is_not_instance.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/is_not_instance.test.gd",
"tags": [  ],
"test": ExtResource( 2 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 26
}, {
"context": "Given a Null Assertion",
"methods": [ {
"assertions": [ {
"actual": "|Object| [Node:4391] != null",
"context": "Then it passes",
"expected": "|Object| [Node:4391] != null",
"success": true
} ],
"context": "When calling Node is not null",
"fullname": "test_when_calling_node_is_not_null",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|null| Null == null",
"context": "Then it passes",
"expected": "|null| Null == null",
"success": true
} ],
"context": "When calling asserts.is_null(null)",
"fullname": "test_when_calling_null_is_null",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|Object| [Deleted Object] == null",
"context": "A Freed Node is null in Engine 3.2.2 or greater",
"expected": "|Object| [Deleted Object] == null",
"success": true
} ],
"context": "When calling freed object is null",
"fullname": "test_when_calling_freed_object_is_not_null",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 3,
"path": "res://tests/unit/null.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/null.test.gd",
"tags": [  ],
"test": ExtResource( 12 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 3
}, {
"context": "Given an Object Assertion",
"methods": [ {
"assertions": [ {
"actual": "[Node:4396] does not have meta: confusing",
"context": "Then it passes",
"expected": "[Node:4396] does not have meta: confusing",
"success": true
} ],
"context": "When calling asserts.object_has_meta with real key but null val",
"fullname": "test_when_calling_does_not_have_meta_real_key_null_value_pair",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:4396] has method: title",
"context": "Then it passes",
"expected": "[Node:4396] has method: title",
"success": true
} ],
"context": "When calling has_method('title')",
"fullname": "test_when_calling_has_method_title",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:4396] has user signal: dummy_signal",
"context": "Then it passes",
"expected": "[Node:4396] has user signal: dummy_signal",
"success": true
} ],
"context": "When calling obj_has_user_signal after adding a signal",
"fullname": "test_when_calling_has_user_signal_after_adding_a_signal",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:4396] does not have user signal: false_signal",
"context": "Then it passes",
"expected": "[Node:4396] does not have user signal: false_signal",
"success": true
} ],
"context": "When calling obj_does_not_have_user_signal with fake signal",
"fullname": "test_when_calling_does_not_have_user_signal",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is freed from memory",
"context": "Then it passes",
"expected": "Null is freed from memory",
"success": true
} ],
"context": "When calling asserts.is_freed(freed_object",
"fullname": "test_when_calling_freed_object_is_freed",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:4396] has meta: dummy",
"context": "Then it passes",
"expected": "[Node:4396] has meta: dummy",
"success": true
}, {
"actual": "[Node:4396] has meta: dummy",
"context": "Then it passes",
"expected": "[Node:4396] has meta: dummy",
"success": true
} ],
"context": "When calling asserts.object_has_meta() after adding metadata",
"fullname": "test_when_calling_has_meta_after_adding_metadata",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "[Node:4407] is not freed",
"context": "Then it passes",
"expected": "[Node:4407] is not freed",
"success": true
} ],
"context": "When calling asserts.is_not_freed(unfreed_object)",
"fullname": "test_when_calling_unfreed_object_is_not_freed",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:4396] does not have meta: bad_meta",
"context": "Then it passes",
"expected": "[Node:4396] does not have meta: bad_meta",
"success": true
} ],
"context": "When calling asserts.object_does_not_have_meta()",
"fullname": "test_when_calling_does_not_have_meta",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:4410] is queued for deletion",
"context": "Then it passes",
"expected": "[Node:4410] is queued for deletion",
"success": true
} ],
"context": "When calling asserts.object_is_queued for deletion after calling queue_free",
"fullname": "test_when_calling_obj_is_queued_for_deletion_after_calling_queue_free",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:4412] is blocking signals",
"context": "Then it passes",
"expected": "[Node:4412] is blocking signals",
"success": true
} ],
"context": "When calling is blocking signals while blocking signals",
"fullname": "test_is_blocking_signals",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:4414] is not blocking signals",
"context": "Then it passes",
"expected": "[Node:4414] is not blocking signals",
"success": true
} ],
"context": "When calling is not blocking signals while not blocking signals",
"fullname": "test_is_not_blocking_signals",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:4416] is not queued for deletion",
"context": "Then it passes",
"expected": "[Node:4416] is not queued for deletion",
"success": true
} ],
"context": "When calling asserts.object_is_not_for_queued_deletion after not calling queue free()",
"fullname": "test_when_calling_obj_is_not_for_queued_deletion_after_not_calling_queue_free",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:4396].builtin_dummy is connected to [Node:4396].title",
"context": "Then it passes",
"expected": "[Node:4396].builtin_dummy is connected to [Node:4396].title",
"success": true
} ],
"context": "When calling asserts object is connected with a valid connection",
"fullname": "test_when_calling_obj_is_connected_with_a_real_connection",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:4396].builtin_dummy is not connected to [Node:4396].title",
"context": "Then it passes",
"expected": "[Node:4396].builtin_dummy is not connected to [Node:4396].title",
"success": true
} ],
"context": "When calling asserts object is not connected with an invalid connection",
"fullname": "test_when_calling_obj_is_not_connected_with_an_invalid_connection",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:4396] does not have user signal: builtin_dummy",
"context": "Then it passes",
"expected": "[Node:4396] does not have user signal: builtin_dummy",
"success": true
} ],
"context": "When calling does not have user signal with class signal",
"fullname": "test_when_calling_does_not_have_user_signal_with_class_signal_constant",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 15,
"path": "res://tests/unit/object.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/object.test.gd",
"tags": [  ],
"test": ExtResource( 7 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 15
}, {
"context": "Given the Addition Operator",
"methods": [ {
"assertions": [ {
"actual": "|int| 4 is equal to |int| 4",
"context": "",
"expected": "|int| 4 is equal to |int| 4",
"success": true
} ],
"context": "When we add 2 to 2 we get 4",
"fullname": "test_add",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 8 is equal to |int| 8",
"context": "",
"expected": "|int| 8 is equal to |int| 8",
"success": true
} ],
"context": "When we add 5 to 3 we get 8",
"fullname": "test_add",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 13 is equal to |int| 13",
"context": "",
"expected": "|int| 13 is equal to |int| 13",
"success": true
} ],
"context": "When we add 7 to 6 we get 13",
"fullname": "test_add",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 0 is equal to |int| 0",
"context": "",
"expected": "|int| 0 is equal to |int| 0",
"success": true
} ],
"context": "When we subtract 2 from 2 we get 0",
"fullname": "test_subtract",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 2 is equal to |int| 2",
"context": "",
"expected": "|int| 2 is equal to |int| 2",
"success": true
} ],
"context": "When we subtract 5 from 3 we get 2",
"fullname": "test_subtract",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 1 is equal to |int| 1",
"context": "",
"expected": "|int| 1 is equal to |int| 1",
"success": true
} ],
"context": "When we subtract 7 from 6 we get 1",
"fullname": "test_subtract",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 6,
"path": "res://tests/unit/parameters.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/parameters.test.gd",
"tags": [  ],
"test": ExtResource( 16 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 6
}, {
"context": "Given A Range Assertion",
"methods": [ {
"assertions": [ {
"actual": "10 is not in range(0, 10)",
"context": "Then it passes",
"expected": "10 is not in range(0, 10)",
"success": true
} ],
"context": "When calling is (10) not in range (in range(0, 10)",
"fullname": "test_when_calling_is_not_in_range",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "0 is in range(0, 10)",
"context": "Then it passes",
"expected": "0 is in range(0, 10)",
"success": true
} ],
"context": "When calling is (0) in range(0, 10)",
"fullname": "test_when_calling_is_in_range",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 2,
"path": "res://tests/unit/range.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/range.test.gd",
"tags": [  ],
"test": ExtResource( 15 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 2
}, {
"context": "Given a String Assertion",
"methods": [ {
"assertions": [ {
"actual": "impsum does not begin with bleh lorem",
"context": "Then it passes",
"expected": "impsum does not begin with bleh lorem",
"success": true
} ],
"context": "When calling asserts.string_does_not_begin_with('lorem', 'impsum')",
"fullname": "test_when_calling_string_does_not_begin_with",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "lorem impsum begins with lorem",
"context": "Then it passes",
"expected": "lorem impsum begins with lorem",
"success": true
} ],
"context": "When calling asserts.string_begins_with('lorem', 'lorem impsum')",
"fullname": "test_when_calling_string_begins_with",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "lorem impsum ends with impsum",
"context": "Then it passes",
"expected": "lorem impsum ends with impsum",
"success": true
} ],
"context": "When calling asserts.string_ends_with('impsum', 'lorem impsum')",
"fullname": "test_when_calling_string_ends_with",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "impsum does not contain beem im",
"context": "Then it passes",
"expected": "impsum does not contain beem im",
"success": true
} ],
"context": "When calling asserts.string_does_not_contain('em im', 'impsum')",
"fullname": "test_when_calling_string_does_not_contain",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "lorem impsum contains em im",
"context": "Then it passes",
"expected": "lorem impsum contains em im",
"success": true
} ],
"context": "When calling asserts.string_contains('em im', 'lorem impsum')",
"fullname": "test_when_calling_string_contains",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "impsum does not end with lorem",
"context": "Then it passes",
"expected": "impsum does not end with lorem",
"success": true
} ],
"context": "When calling asserts.string_does_not_end_with('lorem', 'impsum')",
"fullname": "test_when_calling_string_does_not_end_with",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 6,
"path": "res://tests/unit/string.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/string.test.gd",
"tags": [  ],
"test": ExtResource( 9 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 6
}, {
"context": "Dummy Passing Test",
"methods": [ {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Passing!",
"expected": "|bool| True == true",
"success": true
} ],
"context": "This method passes",
"fullname": "test_this_method_passes",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 1,
"path": "res://tests/unit/suite.test.gd.DummyOne",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/suite.test.gd.DummyOne",
"tags": [  ],
"test": SubResource( 19 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 1
}, {
"context": "Dummy Test 2",
"methods": [ {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Passing!",
"expected": "|bool| True == true",
"success": true
} ],
"context": "This method passes",
"fullname": "test_this_method_passes",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 1,
"path": "res://tests/unit/suite.test.gd.DummyTwo",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/suite.test.gd.DummyTwo",
"tags": [  ],
"test": SubResource( 20 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 1
}, {
"context": "Given a Test Script",
"methods": [ {
"assertions": [ {
"actual": "|int| 10 is greater than |int| 1",
"context": "We get an array of multiple values back",
"expected": "|int| 10 is greater than |int| 1",
"success": true
}, {
"actual": "|int| 0 is not equal to |int| 9",
"context": "With different values",
"expected": "|int| 0 != |int| 9",
"success": true
}, {
"actual": "|int| 10 is greater than |int| 1",
"context": "And we can track multiple properties",
"expected": "|int| 10 is greater than |int| 1",
"success": true
} ],
"context": "When we record properties",
"fullname": "test_we_can_record_properties",
"passed": 3,
"success": true,
"time": 0.0,
"total": 3
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "if the test didn't break this works",
"expected": "|bool| True == true",
"success": true
} ],
"context": " we can omit describe",
"fullname": "test_we_can_omit_describe",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|int| 2 is equal to |int| 2",
"context": "",
"expected": "|int| 2 is equal to |int| 2",
"success": true
} ],
"context": " when we omit context we can see expected and got under method",
"fullname": "test_when_we_omit_context_we_can_see_expected_and_got_under_method",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
} ],
"passed": 3,
"path": "res://tests/unit/test.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/test.test.gd",
"tags": [  ],
"test": ExtResource( 19 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 3
}, {
"context": "Given a Signal Watcher",
"methods": [ {
"assertions": [ {
"actual": "signal: multiple was emitted from [Node:4463] 2",
"context": "Then we can track how many times we emitted it",
"expected": "signal: multiple was emitted from [Node:4463] 2",
"success": true
} ],
"context": "When we watch and signal and emit it multiple times",
"fullname": "test_When_we_watch_a_signal_and_emit_it_multiple_times",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Signal: example was not emitted from [Node:4463]",
"context": "Then it does not capture the non-emitted signal",
"expected": "Signal: example was not emitted from [Node:4463]",
"success": true
} ],
"context": "When we watch and do not emit a signal",
"fullname": "test_When_we_watch_and_do_not_emit_a_signal",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Signal: example was emitted from [Node:4463] with arguments: [1, 20, 5]",
"context": "Then it captures any arguments that where passed when the signal was emitted",
"expected": "Signal: example was emitted from [Node:4463] with arguments: [1, 20, 5]",
"success": true
} ],
"context": "When we watch a signal from an object with no bound variables",
"fullname": "test_When_we_watch_a_signal_from_an_object_with_no_bound_variables",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "signal: example was emitted from [Node:4463]",
"context": "Then it captures the emitted signal",
"expected": "signal: example was emitted from [Node:4463]",
"success": true
} ],
"context": "When we watch and emit a signal",
"fullname": "test_When_we_watch_and_emit_a_signal",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 4,
"path": "res://tests/unit/watcher.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/watcher.test.gd",
"tags": [  ],
"test": ExtResource( 17 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 4
}, {
"context": "Given a Yield",
"methods": [ {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then we set var a to true",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then we set var b to true",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we yield in start twice",
"fullname": "test_When_we_yield_in_start",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then we set var c to true",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then we set var d to true",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we yield in pre thrice",
"fullname": "test_When_we_yield_in_pre",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "[100, Null, Null, Null, Null, Null] is builtin: Array",
"context": "Then we get an array",
"expected": "[100, Null, Null, Null, Null, Null] is builtin: Array",
"success": true
}, {
"actual": "|int| 6 is equal to |int| 6",
"context": "Of size 6",
"expected": "|int| 6 is equal to |int| 6",
"success": true
}, {
"actual": "|int| 100 is equal to |int| 100",
"context": "Where element 0 is 100",
"expected": "|int| 100 is equal to |int| 100",
"success": true
} ],
"context": "When yield(self.yield_value()) returns",
"fullname": "test_When_we_yield_we_get_the_return_value",
"passed": 3,
"success": true,
"time": 0.0,
"total": 3
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then yielder is unpaused",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "The timeout signal of the yielder is connected",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we call until_timeout (with 1.0)",
"fullname": "test_When_we_call_until_timeout",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then the yielder is unpaused",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then the timeout signal of the yielder is connected",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then our signal is connected to the yielder",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we call until signal",
"fullname": "test_When_we_call_until_signal",
"passed": 3,
"success": true,
"time": 0.0,
"total": 3
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then yielder is not active",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When asserting against a test",
"fullname": "test_Yielder_is_not_active_when_asserting",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then we set var e to true",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then we set var f to true",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we yield twice in execute",
"fullname": "test_When_we_yield_in_execute",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then the timeout signal is disconnected",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then the signal-signal is disconnected",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When it is finished",
"fullname": "test_When_yielder_is_finished_signals_are_disconnected",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then the yielder is paused",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When a signal being yielded on is emitted",
"fullname": "test_When_a_signal_being_yielded_on_is_emitted_the_yielder_is_stopped",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then the yielder is paused",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "The timeout signal of the yielder is not connected",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When the yielder times out on until_timeout(0.1)",
"fullname": "test_When_the_yielder_times_out",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then the yielder is paused",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then the timeout signal of the yielder is disconnected",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then our signal to the yielder is disconnected",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When the yielder heres our signal",
"fullname": "test_When_the_yielder_hears_our_signal",
"passed": 3,
"success": true,
"time": 0.0,
"total": 3
} ],
"passed": 11,
"path": "res://tests/unit/yield.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/yield.test.gd",
"tags": [  ],
"test": ExtResource( 18 ),
"yield_time": 1.9
},
"success": true,
"time_taken": 0.0,
"total": 11
}, {
"context": "Given a Boolean Assertion",
"methods": [ {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then it passes",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When calling asserts.is_true(true)",
"fullname": "test_when_calling_asserts_is_true",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| False == false",
"context": "Then it passes",
"expected": "|bool| False == false",
"success": true
} ],
"context": "When calling asserts.is_false(false)",
"fullname": "test_when_calling_asserts_is_false",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| True != false",
"context": "",
"expected": "|bool| True == false",
"success": false
} ],
"context": " intentional failure",
"fullname": "test_intentional_failure",
"passed": 0,
"success": false,
"time": 0.0,
"total": 1
} ],
"passed": 2,
"path": "res://tests/integration/boolean.test.gd",
"source": {
"containers": [ "res://tests/integration", "res://tests" ],
"method": "",
"path": "res://tests/integration/boolean.test.gd",
"tags": [  ],
"test": ExtResource( 20 ),
"yield_time": 0.0
},
"success": false,
"time_taken": 0.0,
"total": 3
}, {
"context": "Default Args",
"methods": [ {
"assertions": [ {
"actual": "|bool| True == true",
"context": "If this method can be reached then we have doubled a script with default argument(s) properly!",
"expected": "|bool| True == true",
"success": true
} ],
"context": " default arguments of interpolate property",
"fullname": "test_default_arguments_of_interpolate_property",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 1,
"path": "res://tests/integration/default_args.test.gd",
"source": {
"containers": [ "res://tests/integration", "res://tests" ],
"method": "",
"path": "res://tests/integration/default_args.test.gd",
"tags": [  ],
"test": ExtResource( 10 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 1
}, {
"context": "Given is_on_floor",
"methods": [ {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then it can be stubbed",
"expected": "|bool| True == true",
"success": true
} ],
"context": "From a user-defined script",
"fullname": "test_stubbing_is_on_floor_method_from_user_defined_class",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then it can be stubbed",
"expected": "|bool| True == true",
"success": true
} ],
"context": "From a child node of a scene without scripts",
"fullname": "test_stubbing_is_on_floor_as_child_node_with_no_script",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then it can be stubbed",
"expected": "|bool| True == true",
"success": true
} ],
"context": "From a built-in KinematicBody2D2",
"fullname": "test_stubbing_is_on_floor_method_from_builtin_class2",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 3,
"path": "res://tests/integration/on_floor.test.gd",
"source": {
"containers": [ "res://tests/integration", "res://tests" ],
"method": "",
"path": "res://tests/integration/on_floor.test.gd",
"tags": [  ],
"test": ExtResource( 5 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 3
}, {
"context": "Given a Scene Director",
"methods": [ {
"assertions": [ {
"actual": "|NodePath| A is equal to |NodePath| A",
"context": "We have the correct NodePath Set",
"expected": "|NodePath| A is equal to |NodePath| A",
"success": true
} ],
"context": "When we add it to the tree it runs",
"fullname": "test_When_we_add_it_to_the_tree_it_runs",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 9999 is equal to |int| 9999",
"context": "Then we get the stubbed return value",
"expected": "|int| 9999 is equal to |int| 9999",
"success": true
} ],
"context": "When we call a method from the root node that we stubbed",
"fullname": "test_When_we_call_a_method_from_the_root_node_that_we_stubbed",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 999 is equal to |int| 999",
"context": "Then we get the stubbed return value",
"expected": "|int| 999 is equal to |int| 999",
"success": true
} ],
"context": "When we call a method from a child node that we stubbed",
"fullname": "test_When_we_call_a_method_from_a_child_node_that_we_stubbed",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 99 is equal to |int| 99",
"context": "Then we get the stubbed return value",
"expected": "|int| 99 is equal to |int| 99",
"success": true
} ],
"context": "When we call a method from a grandchild node that we stubbed",
"fullname": "test_When_we_call_a_method_from_a_grandchild_node_that_we_stubbed",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|Dictionary| {.:[Reference:4729], A:[Reference:4730], A/B:[Reference:4732], C:[Reference:4731], C/D:[Reference:4733]} is not equal to |Dictionary| {.:[Reference:4743], A:[Reference:4744], A/B:[Reference:4746], C:[Reference:4745], C/D:[Reference:4747]}",
"context": "Then they do not share resources",
"expected": "|Dictionary| {.:[Reference:4729], A:[Reference:4730], A/B:[Reference:4732], C:[Reference:4731], C/D:[Reference:4733]} != |Dictionary| {.:[Reference:4743], A:[Reference:4744], A/B:[Reference:4746], C:[Reference:4745], C/D:[Reference:4747]}",
"success": true
} ],
"context": "When we create two of it for the same scene",
"fullname": "test_When_we_create_two_of_it_for_the_same_scene",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 5,
"path": "res://tests/integration/scene_director.test.gd",
"source": {
"containers": [ "res://tests/integration", "res://tests" ],
"method": "",
"path": "res://tests/integration/scene_director.test.gd",
"tags": [  ],
"test": ExtResource( 4 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 5
}, {
"context": "Given a Script Director",
"methods": [ {
"assertions": [ {
"actual": "|Dictionary| {_enter_tree:{arguments:, default_arguments:}, _exit_tree:{arguments:, default_arguments:}, _get:{arguments:a, default_arguments:a}, _get_configuration_warning:{arguments:, default_arguments:}, _get_editor_description:{arguments:, default_arguments:}, _get_import_path:{arguments:, default_arguments:}, _get_property_list:{arguments:, default_arguments:}, _init:{arguments:, default_arguments:}, _input:{arguments:a, default_arguments:a}, _notification:{arguments:a, default_arguments:a}, _physics_process:{arguments:a, default_arguments:a}, _process:{arguments:a, default_arguments:a}, _ready:{arguments:, default_arguments:}, _set:{arguments:a, b, default_arguments:a, b}, _set_editor_description:{arguments:a, default_arguments:a}, _set_import_path:{arguments:a, default_arguments:a}, _to_string:{arguments:, default_arguments:}, _unhandled_input:{arguments:a, default_arguments:a}, _unhandled_key_input:{arguments:a, default_arguments:a}, add:{arguments:a, b, default_arguments:a, b}, add_child:{arguments:a, b, default_arguments:a, b = False}, add_child_below_node:{arguments:a, b, c, default_arguments:a, b, c = False}, add_to_group:{arguments:a, b, default_arguments:a, b = False}, add_user_signal:{arguments:a, b, default_arguments:a, b = []}, call:{arguments:a, default_arguments:a}, call_deferred:{arguments:a, default_arguments:a}, callv:{arguments:a, b, default_arguments:a, b}, can_process:{arguments:, default_arguments:}, can_translate_messages:{arguments:, default_arguments:}, connect:{arguments:a, b, c, d, e, default_arguments:a, b, c, d = [], e = 0}, disconnect:{arguments:a, b, c, default_arguments:a, b, c}, divide:{arguments:a, b, default_arguments:a, b}, duplicate:{arguments:a, default_arguments:a = 15}, emit_signal:{arguments:a, default_arguments:a}, find_node:{arguments:a, b, c, default_arguments:a, b = True, c = True}, find_parent:{arguments:a, default_arguments:a}, free:{arguments:, default_arguments:}, get:{arguments:a, default_arguments:a}, get_child:{arguments:a, default_arguments:a}, get_child_count:{arguments:, default_arguments:}, get_children:{arguments:, default_arguments:}, get_class:{arguments:, default_arguments:}, get_custom_multiplayer:{arguments:, default_arguments:}, get_filename:{arguments:, default_arguments:}, get_groups:{arguments:, default_arguments:}, get_incoming_connections:{arguments:, default_arguments:}, get_index:{arguments:, default_arguments:}, get_indexed:{arguments:a, default_arguments:a}, get_instance_id:{arguments:, default_arguments:}, get_meta:{arguments:a, default_arguments:a}, get_meta_list:{arguments:, default_arguments:}, get_method_list:{arguments:, default_arguments:}, get_multiplayer:{arguments:, default_arguments:}, get_name:{arguments:, default_arguments:}, get_network_master:{arguments:, default_arguments:}, get_node:{arguments:a, default_arguments:a}, get_node_and_resource:{arguments:a, default_arguments:a}, get_node_or_null:{arguments:a, default_arguments:a}, get_owner:{arguments:, default_arguments:}, get_parent:{arguments:, default_arguments:}, get_path:{arguments:, default_arguments:}, get_path_to:{arguments:a, default_arguments:a}, get_pause_mode:{arguments:, default_arguments:}, get_physics_process_delta_time:{arguments:, default_arguments:}, get_position_in_parent:{arguments:, default_arguments:}, get_process_delta_time:{arguments:, default_arguments:}, get_process_priority:{arguments:, default_arguments:}, get_property_list:{arguments:, default_arguments:}, get_scene_instance_load_placeholder:{arguments:, default_arguments:}, get_script:{arguments:, default_arguments:}, get_signal_connection_list:{arguments:a, default_arguments:a}, get_signal_list:{arguments:, default_arguments:}, get_tree:{arguments:, default_arguments:}, get_viewport:{arguments:, default_arguments:}, has_meta:{arguments:a, default_arguments:a}, has_method:{arguments:a, default_arguments:a}, has_node:{arguments:a, default_arguments:a}, has_node_and_resource:{arguments:a, default_arguments:a}, has_signal:{arguments:a, default_arguments:a}, has_user_signal:{arguments:a, default_arguments:a}, is_a_parent_of:{arguments:a, default_arguments:a}, is_blocking_signals:{arguments:, default_arguments:}, is_class:{arguments:a, default_arguments:a}, is_connected:{arguments:a, b, c, default_arguments:a, b, c}, is_displayed_folded:{arguments:, default_arguments:}, is_greater_than:{arguments:a, default_arguments:a}, is_in_group:{arguments:a, default_arguments:a}, is_inside_tree:{arguments:, default_arguments:}, is_network_master:{arguments:, default_arguments:}, is_physics_processing:{arguments:, default_arguments:}, is_physics_processing_internal:{arguments:, default_arguments:}, is_processing:{arguments:, default_arguments:}, is_processing_input:{arguments:, default_arguments:}, is_processing_internal:{arguments:, default_arguments:}, is_processing_unhandled_input:{arguments:, default_arguments:}, is_processing_unhandled_key_input:{arguments:, default_arguments:}, is_queued_for_deletion:{arguments:, default_arguments:}, math_fight:{arguments:, default_arguments:}, move_child:{arguments:a, b, default_arguments:a, b}, multiply:{arguments:a, b, default_arguments:a, b}, notification:{arguments:a, b, default_arguments:a, b = False}, pi:{arguments:, default_arguments:}, print_stray_nodes:{arguments:, default_arguments:}, print_tree:{arguments:, default_arguments:}, print_tree_pretty:{arguments:, default_arguments:}, propagate_call:{arguments:a, b, c, default_arguments:a, b = [], c = False}, propagate_notification:{arguments:a, default_arguments:a}, property_list_changed_notify:{arguments:, default_arguments:}, queue_free:{arguments:, default_arguments:}, raise:{arguments:, default_arguments:}, remove_and_skip:{arguments:, default_arguments:}, remove_child:{arguments:a, default_arguments:a}, remove_from_group:{arguments:a, default_arguments:a}, remove_meta:{arguments:a, default_arguments:a}, replace_by:{arguments:a, b, default_arguments:a, b = False}, request_ready:{arguments:, default_arguments:}, rpc:{arguments:a, default_arguments:a}, rpc_config:{arguments:a, b, default_arguments:a, b}, rpc_id:{arguments:a, b, default_arguments:a, b}, rpc_unreliable:{arguments:a, default_arguments:a}, rpc_unreliable_id:{arguments:a, b, default_arguments:a, b}, rset:{arguments:a, b, default_arguments:a, b}, rset_config:{arguments:a, b, default_arguments:a, b}, rset_id:{arguments:a, b, c, default_arguments:a, b, c}, rset_unreliable:{arguments:a, b, default_arguments:a, b}, rset_unreliable_id:{arguments:a, b, c, default_arguments:a, b, c}, set:{arguments:a, b, default_arguments:a, b}, set_block_signals:{arguments:a, default_arguments:a}, set_custom_multiplayer:{arguments:a, default_arguments:a}, set_deferred:{arguments:a, b, default_arguments:a, b}, set_display_folded:{arguments:a, default_arguments:a}, set_filename:{arguments:a, default_arguments:a}, set_indexed:{arguments:a, b, default_arguments:a, b}, set_message_translation:{arguments:a, default_arguments:a}, set_meta:{arguments:a, b, default_arguments:a, b}, set_name:{arguments:a, default_arguments:a}, set_network_master:{arguments:a, b, default_arguments:a, b = True}, set_owner:{arguments:a, default_arguments:a}, set_pause_mode:{arguments:a, default_arguments:a}, set_physics_process:{arguments:a, default_arguments:a}, set_physics_process_internal:{arguments:a, default_arguments:a}, set_process:{arguments:a, default_arguments:a}, set_process_input:{arguments:a, default_arguments:a}, set_process_internal:{arguments:a, default_arguments:a}, set_process_priority:{arguments:a, default_arguments:a}, set_process_unhandled_input:{arguments:a, default_arguments:a}, set_process_unhandled_key_input:{arguments:a, default_arguments:a}, set_scene_instance_load_placeholder:{arguments:a, default_arguments:a}, set_script:{arguments:a, default_arguments:a}, subtract:{arguments:a, b, default_arguments:a, b}, sum:{arguments:a, default_arguments:a}, to_string:{arguments:, default_arguments:}, tr:{arguments:a, default_arguments:a}, update_configuration_warning:{arguments:, default_arguments:}} is not equal to |Dictionary| {_enter_tree:{arguments:, default_arguments:}, _exit_tree:{arguments:, default_arguments:}, _get:{arguments:a, default_arguments:a}, _get_configuration_warning:{arguments:, default_arguments:}, _get_editor_description:{arguments:, default_arguments:}, _get_import_path:{arguments:, default_arguments:}, _get_property_list:{arguments:, default_arguments:}, _init:{arguments:, default_arguments:}, _input:{arguments:a, default_arguments:a}, _notification:{arguments:a, default_arguments:a}, _physics_process:{arguments:a, default_arguments:a}, _process:{arguments:a, default_arguments:a}, _ready:{arguments:, default_arguments:}, _set:{arguments:a, b, default_arguments:a, b}, _set_editor_description:{arguments:a, default_arguments:a}, _set_import_path:{arguments:a, default_arguments:a}, _to_string:{arguments:, default_arguments:}, _unhandled_input:{arguments:a, default_arguments:a}, _unhandled_key_input:{arguments:a, default_arguments:a}, add:{arguments:a, b, default_arguments:a, b}, add_child:{arguments:a, b, default_arguments:a, b = False}, add_child_below_node:{arguments:a, b, c, default_arguments:a, b, c = False}, add_to_group:{arguments:a, b, default_arguments:a, b = False}, add_user_signal:{arguments:a, b, default_arguments:a, b = []}, call:{arguments:a, default_arguments:a}, call_deferred:{arguments:a, default_arguments:a}, callv:{arguments:a, b, default_arguments:a, b}, can_process:{arguments:, default_arguments:}, can_translate_messages:{arguments:, default_arguments:}, connect:{arguments:a, b, c, d, e, default_arguments:a, b, c, d = [], e = 0}, disconnect:{arguments:a, b, c, default_arguments:a, b, c}, divide:{arguments:a, b, default_arguments:a, b}, duplicate:{arguments:a, default_arguments:a = 15}, emit_signal:{arguments:a, default_arguments:a}, find_node:{arguments:a, b, c, default_arguments:a, b = True, c = True}, find_parent:{arguments:a, default_arguments:a}, free:{arguments:, default_arguments:}, get:{arguments:a, default_arguments:a}, get_child:{arguments:a, default_arguments:a}, get_child_count:{arguments:, default_arguments:}, get_children:{arguments:, default_arguments:}, get_class:{arguments:, default_arguments:}, get_custom_multiplayer:{arguments:, default_arguments:}, get_filename:{arguments:, default_arguments:}, get_groups:{arguments:, default_arguments:}, get_incoming_connections:{arguments:, default_arguments:}, get_index:{arguments:, default_arguments:}, get_indexed:{arguments:a, default_arguments:a}, get_instance_id:{arguments:, default_arguments:}, get_meta:{arguments:a, default_arguments:a}, get_meta_list:{arguments:, default_arguments:}, get_method_list:{arguments:, default_arguments:}, get_multiplayer:{arguments:, default_arguments:}, get_name:{arguments:, default_arguments:}, get_network_master:{arguments:, default_arguments:}, get_node:{arguments:a, default_arguments:a}, get_node_and_resource:{arguments:a, default_arguments:a}, get_node_or_null:{arguments:a, default_arguments:a}, get_owner:{arguments:, default_arguments:}, get_parent:{arguments:, default_arguments:}, get_path:{arguments:, default_arguments:}, get_path_to:{arguments:a, default_arguments:a}, get_pause_mode:{arguments:, default_arguments:}, get_physics_process_delta_time:{arguments:, default_arguments:}, get_position_in_parent:{arguments:, default_arguments:}, get_process_delta_time:{arguments:, default_arguments:}, get_process_priority:{arguments:, default_arguments:}, get_property_list:{arguments:, default_arguments:}, get_scene_instance_load_placeholder:{arguments:, default_arguments:}, get_script:{arguments:, default_arguments:}, get_signal_connection_list:{arguments:a, default_arguments:a}, get_signal_list:{arguments:, default_arguments:}, get_tree:{arguments:, default_arguments:}, get_viewport:{arguments:, default_arguments:}, has_meta:{arguments:a, default_arguments:a}, has_method:{arguments:a, default_arguments:a}, has_node:{arguments:a, default_arguments:a}, has_node_and_resource:{arguments:a, default_arguments:a}, has_signal:{arguments:a, default_arguments:a}, has_user_signal:{arguments:a, default_arguments:a}, is_a_parent_of:{arguments:a, default_arguments:a}, is_blocking_signals:{arguments:, default_arguments:}, is_class:{arguments:a, default_arguments:a}, is_connected:{arguments:a, b, c, default_arguments:a, b, c}, is_displayed_folded:{arguments:, default_arguments:}, is_greater_than:{arguments:a, default_arguments:a}, is_in_group:{arguments:a, default_arguments:a}, is_inside_tree:{arguments:, default_arguments:}, is_network_master:{arguments:, default_arguments:}, is_physics_processing:{arguments:, default_arguments:}, is_physics_processing_internal:{arguments:, default_arguments:}, is_processing:{arguments:, default_arguments:}, is_processing_input:{arguments:, default_arguments:}, is_processing_internal:{arguments:, default_arguments:}, is_processing_unhandled_input:{arguments:, default_arguments:}, is_processing_unhandled_key_input:{arguments:, default_arguments:}, is_queued_for_deletion:{arguments:, default_arguments:}, math_fight:{arguments:, default_arguments:}, move_child:{arguments:a, b, default_arguments:a, b}, multiply:{arguments:a, b, default_arguments:a, b}, notification:{arguments:a, b, default_arguments:a, b = False}, pi:{arguments:, default_arguments:}, print_stray_nodes:{arguments:, default_arguments:}, print_tree:{arguments:, default_arguments:}, print_tree_pretty:{arguments:, default_arguments:}, propagate_call:{arguments:a, b, c, default_arguments:a, b = [], c = False}, propagate_notification:{arguments:a, default_arguments:a}, property_list_changed_notify:{arguments:, default_arguments:}, queue_free:{arguments:, default_arguments:}, raise:{arguments:, default_arguments:}, remove_and_skip:{arguments:, default_arguments:}, remove_child:{arguments:a, default_arguments:a}, remove_from_group:{arguments:a, default_arguments:a}, remove_meta:{arguments:a, default_arguments:a}, replace_by:{arguments:a, b, default_arguments:a, b = False}, request_ready:{arguments:, default_arguments:}, rpc:{arguments:a, default_arguments:a}, rpc_config:{arguments:a, b, default_arguments:a, b}, rpc_id:{arguments:a, b, default_arguments:a, b}, rpc_unreliable:{arguments:a, default_arguments:a}, rpc_unreliable_id:{arguments:a, b, default_arguments:a, b}, rset:{arguments:a, b, default_arguments:a, b}, rset_config:{arguments:a, b, default_arguments:a, b}, rset_id:{arguments:a, b, c, default_arguments:a, b, c}, rset_unreliable:{arguments:a, b, default_arguments:a, b}, rset_unreliable_id:{arguments:a, b, c, default_arguments:a, b, c}, set:{arguments:a, b, default_arguments:a, b}, set_block_signals:{arguments:a, default_arguments:a}, set_custom_multiplayer:{arguments:a, default_arguments:a}, set_deferred:{arguments:a, b, default_arguments:a, b}, set_display_folded:{arguments:a, default_arguments:a}, set_filename:{arguments:a, default_arguments:a}, set_indexed:{arguments:a, b, default_arguments:a, b}, set_message_translation:{arguments:a, default_arguments:a}, set_meta:{arguments:a, b, default_arguments:a, b}, set_name:{arguments:a, default_arguments:a}, set_network_master:{arguments:a, b, default_arguments:a, b = True}, set_owner:{arguments:a, default_arguments:a}, set_pause_mode:{arguments:a, default_arguments:a}, set_physics_process:{arguments:a, default_arguments:a}, set_physics_process_internal:{arguments:a, default_arguments:a}, set_process:{arguments:a, default_arguments:a}, set_process_input:{arguments:a, default_arguments:a}, set_process_internal:{arguments:a, default_arguments:a}, set_process_priority:{arguments:a, default_arguments:a}, set_process_unhandled_input:{arguments:a, default_arguments:a}, set_process_unhandled_key_input:{arguments:a, default_arguments:a}, set_scene_instance_load_placeholder:{arguments:a, default_arguments:a}, set_script:{arguments:a, default_arguments:a}, subtract:{arguments:a, b, default_arguments:a, b}, sum:{arguments:a, default_arguments:a}, to_string:{arguments:, default_arguments:}, tr:{arguments:a, default_arguments:a}, update_configuration_warning:{arguments:, default_arguments:}}",
"context": "Then they do not share resources",
"expected": "|Dictionary| {_enter_tree:{arguments:, default_arguments:}, _exit_tree:{arguments:, default_arguments:}, _get:{arguments:a, default_arguments:a}, _get_configuration_warning:{arguments:, default_arguments:}, _get_editor_description:{arguments:, default_arguments:}, _get_import_path:{arguments:, default_arguments:}, _get_property_list:{arguments:, default_arguments:}, _init:{arguments:, default_arguments:}, _input:{arguments:a, default_arguments:a}, _notification:{arguments:a, default_arguments:a}, _physics_process:{arguments:a, default_arguments:a}, _process:{arguments:a, default_arguments:a}, _ready:{arguments:, default_arguments:}, _set:{arguments:a, b, default_arguments:a, b}, _set_editor_description:{arguments:a, default_arguments:a}, _set_import_path:{arguments:a, default_arguments:a}, _to_string:{arguments:, default_arguments:}, _unhandled_input:{arguments:a, default_arguments:a}, _unhandled_key_input:{arguments:a, default_arguments:a}, add:{arguments:a, b, default_arguments:a, b}, add_child:{arguments:a, b, default_arguments:a, b = False}, add_child_below_node:{arguments:a, b, c, default_arguments:a, b, c = False}, add_to_group:{arguments:a, b, default_arguments:a, b = False}, add_user_signal:{arguments:a, b, default_arguments:a, b = []}, call:{arguments:a, default_arguments:a}, call_deferred:{arguments:a, default_arguments:a}, callv:{arguments:a, b, default_arguments:a, b}, can_process:{arguments:, default_arguments:}, can_translate_messages:{arguments:, default_arguments:}, connect:{arguments:a, b, c, d, e, default_arguments:a, b, c, d = [], e = 0}, disconnect:{arguments:a, b, c, default_arguments:a, b, c}, divide:{arguments:a, b, default_arguments:a, b}, duplicate:{arguments:a, default_arguments:a = 15}, emit_signal:{arguments:a, default_arguments:a}, find_node:{arguments:a, b, c, default_arguments:a, b = True, c = True}, find_parent:{arguments:a, default_arguments:a}, free:{arguments:, default_arguments:}, get:{arguments:a, default_arguments:a}, get_child:{arguments:a, default_arguments:a}, get_child_count:{arguments:, default_arguments:}, get_children:{arguments:, default_arguments:}, get_class:{arguments:, default_arguments:}, get_custom_multiplayer:{arguments:, default_arguments:}, get_filename:{arguments:, default_arguments:}, get_groups:{arguments:, default_arguments:}, get_incoming_connections:{arguments:, default_arguments:}, get_index:{arguments:, default_arguments:}, get_indexed:{arguments:a, default_arguments:a}, get_instance_id:{arguments:, default_arguments:}, get_meta:{arguments:a, default_arguments:a}, get_meta_list:{arguments:, default_arguments:}, get_method_list:{arguments:, default_arguments:}, get_multiplayer:{arguments:, default_arguments:}, get_name:{arguments:, default_arguments:}, get_network_master:{arguments:, default_arguments:}, get_node:{arguments:a, default_arguments:a}, get_node_and_resource:{arguments:a, default_arguments:a}, get_node_or_null:{arguments:a, default_arguments:a}, get_owner:{arguments:, default_arguments:}, get_parent:{arguments:, default_arguments:}, get_path:{arguments:, default_arguments:}, get_path_to:{arguments:a, default_arguments:a}, get_pause_mode:{arguments:, default_arguments:}, get_physics_process_delta_time:{arguments:, default_arguments:}, get_position_in_parent:{arguments:, default_arguments:}, get_process_delta_time:{arguments:, default_arguments:}, get_process_priority:{arguments:, default_arguments:}, get_property_list:{arguments:, default_arguments:}, get_scene_instance_load_placeholder:{arguments:, default_arguments:}, get_script:{arguments:, default_arguments:}, get_signal_connection_list:{arguments:a, default_arguments:a}, get_signal_list:{arguments:, default_arguments:}, get_tree:{arguments:, default_arguments:}, get_viewport:{arguments:, default_arguments:}, has_meta:{arguments:a, default_arguments:a}, has_method:{arguments:a, default_arguments:a}, has_node:{arguments:a, default_arguments:a}, has_node_and_resource:{arguments:a, default_arguments:a}, has_signal:{arguments:a, default_arguments:a}, has_user_signal:{arguments:a, default_arguments:a}, is_a_parent_of:{arguments:a, default_arguments:a}, is_blocking_signals:{arguments:, default_arguments:}, is_class:{arguments:a, default_arguments:a}, is_connected:{arguments:a, b, c, default_arguments:a, b, c}, is_displayed_folded:{arguments:, default_arguments:}, is_greater_than:{arguments:a, default_arguments:a}, is_in_group:{arguments:a, default_arguments:a}, is_inside_tree:{arguments:, default_arguments:}, is_network_master:{arguments:, default_arguments:}, is_physics_processing:{arguments:, default_arguments:}, is_physics_processing_internal:{arguments:, default_arguments:}, is_processing:{arguments:, default_arguments:}, is_processing_input:{arguments:, default_arguments:}, is_processing_internal:{arguments:, default_arguments:}, is_processing_unhandled_input:{arguments:, default_arguments:}, is_processing_unhandled_key_input:{arguments:, default_arguments:}, is_queued_for_deletion:{arguments:, default_arguments:}, math_fight:{arguments:, default_arguments:}, move_child:{arguments:a, b, default_arguments:a, b}, multiply:{arguments:a, b, default_arguments:a, b}, notification:{arguments:a, b, default_arguments:a, b = False}, pi:{arguments:, default_arguments:}, print_stray_nodes:{arguments:, default_arguments:}, print_tree:{arguments:, default_arguments:}, print_tree_pretty:{arguments:, default_arguments:}, propagate_call:{arguments:a, b, c, default_arguments:a, b = [], c = False}, propagate_notification:{arguments:a, default_arguments:a}, property_list_changed_notify:{arguments:, default_arguments:}, queue_free:{arguments:, default_arguments:}, raise:{arguments:, default_arguments:}, remove_and_skip:{arguments:, default_arguments:}, remove_child:{arguments:a, default_arguments:a}, remove_from_group:{arguments:a, default_arguments:a}, remove_meta:{arguments:a, default_arguments:a}, replace_by:{arguments:a, b, default_arguments:a, b = False}, request_ready:{arguments:, default_arguments:}, rpc:{arguments:a, default_arguments:a}, rpc_config:{arguments:a, b, default_arguments:a, b}, rpc_id:{arguments:a, b, default_arguments:a, b}, rpc_unreliable:{arguments:a, default_arguments:a}, rpc_unreliable_id:{arguments:a, b, default_arguments:a, b}, rset:{arguments:a, b, default_arguments:a, b}, rset_config:{arguments:a, b, default_arguments:a, b}, rset_id:{arguments:a, b, c, default_arguments:a, b, c}, rset_unreliable:{arguments:a, b, default_arguments:a, b}, rset_unreliable_id:{arguments:a, b, c, default_arguments:a, b, c}, set:{arguments:a, b, default_arguments:a, b}, set_block_signals:{arguments:a, default_arguments:a}, set_custom_multiplayer:{arguments:a, default_arguments:a}, set_deferred:{arguments:a, b, default_arguments:a, b}, set_display_folded:{arguments:a, default_arguments:a}, set_filename:{arguments:a, default_arguments:a}, set_indexed:{arguments:a, b, default_arguments:a, b}, set_message_translation:{arguments:a, default_arguments:a}, set_meta:{arguments:a, b, default_arguments:a, b}, set_name:{arguments:a, default_arguments:a}, set_network_master:{arguments:a, b, default_arguments:a, b = True}, set_owner:{arguments:a, default_arguments:a}, set_pause_mode:{arguments:a, default_arguments:a}, set_physics_process:{arguments:a, default_arguments:a}, set_physics_process_internal:{arguments:a, default_arguments:a}, set_process:{arguments:a, default_arguments:a}, set_process_input:{arguments:a, default_arguments:a}, set_process_internal:{arguments:a, default_arguments:a}, set_process_priority:{arguments:a, default_arguments:a}, set_process_unhandled_input:{arguments:a, default_arguments:a}, set_process_unhandled_key_input:{arguments:a, default_arguments:a}, set_scene_instance_load_placeholder:{arguments:a, default_arguments:a}, set_script:{arguments:a, default_arguments:a}, subtract:{arguments:a, b, default_arguments:a, b}, sum:{arguments:a, default_arguments:a}, to_string:{arguments:, default_arguments:}, tr:{arguments:a, default_arguments:a}, update_configuration_warning:{arguments:, default_arguments:}} != |Dictionary| {_enter_tree:{arguments:, default_arguments:}, _exit_tree:{arguments:, default_arguments:}, _get:{arguments:a, default_arguments:a}, _get_configuration_warning:{arguments:, default_arguments:}, _get_editor_description:{arguments:, default_arguments:}, _get_import_path:{arguments:, default_arguments:}, _get_property_list:{arguments:, default_arguments:}, _init:{arguments:, default_arguments:}, _input:{arguments:a, default_arguments:a}, _notification:{arguments:a, default_arguments:a}, _physics_process:{arguments:a, default_arguments:a}, _process:{arguments:a, default_arguments:a}, _ready:{arguments:, default_arguments:}, _set:{arguments:a, b, default_arguments:a, b}, _set_editor_description:{arguments:a, default_arguments:a}, _set_import_path:{arguments:a, default_arguments:a}, _to_string:{arguments:, default_arguments:}, _unhandled_input:{arguments:a, default_arguments:a}, _unhandled_key_input:{arguments:a, default_arguments:a}, add:{arguments:a, b, default_arguments:a, b}, add_child:{arguments:a, b, default_arguments:a, b = False}, add_child_below_node:{arguments:a, b, c, default_arguments:a, b, c = False}, add_to_group:{arguments:a, b, default_arguments:a, b = False}, add_user_signal:{arguments:a, b, default_arguments:a, b = []}, call:{arguments:a, default_arguments:a}, call_deferred:{arguments:a, default_arguments:a}, callv:{arguments:a, b, default_arguments:a, b}, can_process:{arguments:, default_arguments:}, can_translate_messages:{arguments:, default_arguments:}, connect:{arguments:a, b, c, d, e, default_arguments:a, b, c, d = [], e = 0}, disconnect:{arguments:a, b, c, default_arguments:a, b, c}, divide:{arguments:a, b, default_arguments:a, b}, duplicate:{arguments:a, default_arguments:a = 15}, emit_signal:{arguments:a, default_arguments:a}, find_node:{arguments:a, b, c, default_arguments:a, b = True, c = True}, find_parent:{arguments:a, default_arguments:a}, free:{arguments:, default_arguments:}, get:{arguments:a, default_arguments:a}, get_child:{arguments:a, default_arguments:a}, get_child_count:{arguments:, default_arguments:}, get_children:{arguments:, default_arguments:}, get_class:{arguments:, default_arguments:}, get_custom_multiplayer:{arguments:, default_arguments:}, get_filename:{arguments:, default_arguments:}, get_groups:{arguments:, default_arguments:}, get_incoming_connections:{arguments:, default_arguments:}, get_index:{arguments:, default_arguments:}, get_indexed:{arguments:a, default_arguments:a}, get_instance_id:{arguments:, default_arguments:}, get_meta:{arguments:a, default_arguments:a}, get_meta_list:{arguments:, default_arguments:}, get_method_list:{arguments:, default_arguments:}, get_multiplayer:{arguments:, default_arguments:}, get_name:{arguments:, default_arguments:}, get_network_master:{arguments:, default_arguments:}, get_node:{arguments:a, default_arguments:a}, get_node_and_resource:{arguments:a, default_arguments:a}, get_node_or_null:{arguments:a, default_arguments:a}, get_owner:{arguments:, default_arguments:}, get_parent:{arguments:, default_arguments:}, get_path:{arguments:, default_arguments:}, get_path_to:{arguments:a, default_arguments:a}, get_pause_mode:{arguments:, default_arguments:}, get_physics_process_delta_time:{arguments:, default_arguments:}, get_position_in_parent:{arguments:, default_arguments:}, get_process_delta_time:{arguments:, default_arguments:}, get_process_priority:{arguments:, default_arguments:}, get_property_list:{arguments:, default_arguments:}, get_scene_instance_load_placeholder:{arguments:, default_arguments:}, get_script:{arguments:, default_arguments:}, get_signal_connection_list:{arguments:a, default_arguments:a}, get_signal_list:{arguments:, default_arguments:}, get_tree:{arguments:, default_arguments:}, get_viewport:{arguments:, default_arguments:}, has_meta:{arguments:a, default_arguments:a}, has_method:{arguments:a, default_arguments:a}, has_node:{arguments:a, default_arguments:a}, has_node_and_resource:{arguments:a, default_arguments:a}, has_signal:{arguments:a, default_arguments:a}, has_user_signal:{arguments:a, default_arguments:a}, is_a_parent_of:{arguments:a, default_arguments:a}, is_blocking_signals:{arguments:, default_arguments:}, is_class:{arguments:a, default_arguments:a}, is_connected:{arguments:a, b, c, default_arguments:a, b, c}, is_displayed_folded:{arguments:, default_arguments:}, is_greater_than:{arguments:a, default_arguments:a}, is_in_group:{arguments:a, default_arguments:a}, is_inside_tree:{arguments:, default_arguments:}, is_network_master:{arguments:, default_arguments:}, is_physics_processing:{arguments:, default_arguments:}, is_physics_processing_internal:{arguments:, default_arguments:}, is_processing:{arguments:, default_arguments:}, is_processing_input:{arguments:, default_arguments:}, is_processing_internal:{arguments:, default_arguments:}, is_processing_unhandled_input:{arguments:, default_arguments:}, is_processing_unhandled_key_input:{arguments:, default_arguments:}, is_queued_for_deletion:{arguments:, default_arguments:}, math_fight:{arguments:, default_arguments:}, move_child:{arguments:a, b, default_arguments:a, b}, multiply:{arguments:a, b, default_arguments:a, b}, notification:{arguments:a, b, default_arguments:a, b = False}, pi:{arguments:, default_arguments:}, print_stray_nodes:{arguments:, default_arguments:}, print_tree:{arguments:, default_arguments:}, print_tree_pretty:{arguments:, default_arguments:}, propagate_call:{arguments:a, b, c, default_arguments:a, b = [], c = False}, propagate_notification:{arguments:a, default_arguments:a}, property_list_changed_notify:{arguments:, default_arguments:}, queue_free:{arguments:, default_arguments:}, raise:{arguments:, default_arguments:}, remove_and_skip:{arguments:, default_arguments:}, remove_child:{arguments:a, default_arguments:a}, remove_from_group:{arguments:a, default_arguments:a}, remove_meta:{arguments:a, default_arguments:a}, replace_by:{arguments:a, b, default_arguments:a, b = False}, request_ready:{arguments:, default_arguments:}, rpc:{arguments:a, default_arguments:a}, rpc_config:{arguments:a, b, default_arguments:a, b}, rpc_id:{arguments:a, b, default_arguments:a, b}, rpc_unreliable:{arguments:a, default_arguments:a}, rpc_unreliable_id:{arguments:a, b, default_arguments:a, b}, rset:{arguments:a, b, default_arguments:a, b}, rset_config:{arguments:a, b, default_arguments:a, b}, rset_id:{arguments:a, b, c, default_arguments:a, b, c}, rset_unreliable:{arguments:a, b, default_arguments:a, b}, rset_unreliable_id:{arguments:a, b, c, default_arguments:a, b, c}, set:{arguments:a, b, default_arguments:a, b}, set_block_signals:{arguments:a, default_arguments:a}, set_custom_multiplayer:{arguments:a, default_arguments:a}, set_deferred:{arguments:a, b, default_arguments:a, b}, set_display_folded:{arguments:a, default_arguments:a}, set_filename:{arguments:a, default_arguments:a}, set_indexed:{arguments:a, b, default_arguments:a, b}, set_message_translation:{arguments:a, default_arguments:a}, set_meta:{arguments:a, b, default_arguments:a, b}, set_name:{arguments:a, default_arguments:a}, set_network_master:{arguments:a, b, default_arguments:a, b = True}, set_owner:{arguments:a, default_arguments:a}, set_pause_mode:{arguments:a, default_arguments:a}, set_physics_process:{arguments:a, default_arguments:a}, set_physics_process_internal:{arguments:a, default_arguments:a}, set_process:{arguments:a, default_arguments:a}, set_process_input:{arguments:a, default_arguments:a}, set_process_internal:{arguments:a, default_arguments:a}, set_process_priority:{arguments:a, default_arguments:a}, set_process_unhandled_input:{arguments:a, default_arguments:a}, set_process_unhandled_key_input:{arguments:a, default_arguments:a}, set_scene_instance_load_placeholder:{arguments:a, default_arguments:a}, set_script:{arguments:a, default_arguments:a}, subtract:{arguments:a, b, default_arguments:a, b}, sum:{arguments:a, default_arguments:a}, to_string:{arguments:, default_arguments:}, tr:{arguments:a, default_arguments:a}, update_configuration_warning:{arguments:, default_arguments:}}",
"success": true
} ],
"context": "When we create two of it for the same script",
"fullname": "test_When_we_create_two_of_it_for_the_same_script",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|Object| [Node:4759] is equal to |Object| [Node:4759]",
"context": "Then we get the same double back",
"expected": "|Object| [Node:4759] is equal to |Object| [Node:4759]",
"success": true
} ],
"context": "When we call the double the second time",
"fullname": "test_When_we_call_double_a_second_time_on",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Reference:4766] is instance of class: [GDScript:1564]",
"context": "Then we get that inner class back",
"expected": "[Reference:4766] is instance of class: [GDScript:1564]",
"success": true
} ],
"context": "When we double an inner class",
"fullname": "test_When_we_double_an_inner_class",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 3,
"path": "res://tests/integration/script_director.test.gd",
"source": {
"containers": [ "res://tests/integration", "res://tests" ],
"method": "",
"path": "res://tests/integration/script_director.test.gd",
"tags": [  ],
"test": ExtResource( 13 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 3
}, {
"context": "Given a Test Double",
"methods": [ {
"assertions": [ {
"actual": "|String| Jackie is equal to |String| Jackie",
"context": "Then we can double the object successfully",
"expected": "|String| Jackie is equal to |String| Jackie",
"success": true
} ],
"context": "When we pass in dependecies on double",
"fullname": "test_When_we_pass_in_deps_on_double",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "(1, 1) is builtin: Vector2",
"context": "Then we can call methods on it",
"expected": "(1, 1) is builtin: Vector2",
"success": true
} ],
"context": "When we double an inner class",
"fullname": "test_When_we_double_an_inner_class",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "method: add was called with arguments: [10, 10]",
"context": "Then we can see that it was called with those arguments",
"expected": "method: add was called with arguments: [10, 10]",
"success": true
} ],
"context": "When we pass arguments to a method call that we are spying on",
"fullname": "test_When_we_pass_arguments_to_a_method_call_that_we_are_spying_on",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|float| 6.283185 is equal to |float| 6.283185",
"context": "Then we can call the static methods of that inner double",
"expected": "|float| 6.283185 is equal to |float| 6.283185",
"success": true
} ],
"context": "When we add an doubled inner class to it",
"fullname": "test_When_we_add_a_doubled_inner_class_to_it",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 9999 is equal to |int| 9999",
"context": "Then it returns the corresponding value when the partial pattern matches",
"expected": "|int| 9999 is equal to |int| 9999",
"success": true
} ],
"context": "When we call a method that was stubbed with a partial (ie using any()) argument pattern",
"fullname": "test_When_we_call_a_method_that_was_stubbed_with_a_partial_argument_pattern",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "add was called",
"context": "Then we can see that it was called at least once",
"expected": "add was called",
"success": true
} ],
"context": "When we call a method that we are spying on",
"fullname": "test_When_we_call_a_method_that_we_are_spying_on",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 4 is equal to |int| 4",
"context": "Then we get the correct result",
"expected": "|int| 4 is equal to |int| 4",
"success": true
} ],
"context": "When we call an add(x, y) method that we haven't directed",
"fullname": "test_When_we_call_an_add_method_that_we_have_not_directed",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|null| Null == null",
"context": "Then we get the stubbed value back",
"expected": "|null| Null == null",
"success": true
} ],
"context": "When we stub a method of a doubled inner class",
"fullname": "test_When_we_stub_a_method_of_a_double_inner_class",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 99 is equal to |int| 99",
"context": "Then it affects the state of the double",
"expected": "|int| 99 is equal to |int| 99",
"success": true
} ],
"context": "When we pass a funcref as a subcall",
"fullname": "test_When_we_pass_a_funcref_as_a_subcall",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|Array| [10, 5] is equal to |Array| [10, 5]",
"context": "Then it returns a value",
"expected": "|Array| [10, 5] is equal to |Array| [10, 5]",
"success": true
} ],
"context": "When we pass an Object with a call_func function",
"fullname": "test_When_we_pass_an_object_with_callfunc_method_as_a_subcall",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 9999 is equal to |int| 9999",
"context": "Then it returns the corresponding value when the pattern matches",
"expected": "|int| 9999 is equal to |int| 9999",
"success": true
} ],
"context": "When we call a method that was stubbed with an argument pattern that includes a non-primitive object",
"fullname": "test_When_we_call_a_method_that_was_stubbed_with_an_argument_pattern_that_includes_a_non_primitive_object",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|null| Null == null",
"context": "Then we get null",
"expected": "|null| Null == null",
"success": true
} ],
"context": "When we call a method that we have dummied",
"fullname": "test_When_we_call_a_method_that_we_have_dummied",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 99 is equal to |int| 99",
"context": "Then it returns a value",
"expected": "|int| 99 is equal to |int| 99",
"success": true
} ],
"context": "When we pass a funcref as a subcall that returns",
"fullname": "test_When_we_pass_a_funcref_as_a_subcall_that_returns_a_value",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then it returns true",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we call a method that we have stubbed to return true",
"fullname": "test_When_we_call_a_method_that_we_have_stubbed_to_return_true",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|Object| [Node:4869] is equal to |Object| [Node:4869]",
"context": "Then it returns that same node",
"expected": "|Object| [Node:4869] is equal to |Object| [Node:4869]",
"success": true
} ],
"context": "When we call a method that we have stubbed to return a node",
"fullname": "test_When_we_call_a_method_that_we_have_stubbed_to_return_a_node",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|String| Jackie is equal to |String| Jackie",
"context": "Then we can double the object successfully",
"expected": "|String| Jackie is equal to |String| Jackie",
"success": true
} ],
"context": "When we pass in dependecies on direct",
"fullname": "test_When_we_pass_in_deps_on_direct",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 100 is equal to |int| 100",
"context": "Then it returns the default stubbed value when the arguments don't match any pattern",
"expected": "|int| 100 is equal to |int| 100",
"success": true
}, {
"actual": "|int| 1000 is equal to |int| 1000",
"context": "Then it returns the the corresponding value to the pattern the arguments matched",
"expected": "|int| 1000 is equal to |int| 1000",
"success": true
} ],
"context": "When we call a method that was stubbed to return different values based on argument patterns",
"fullname": "test_When_we_call_a_method_that_was_stubbed_to_return_different_values_based_on_argument_patterns",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|bool| True is equal to |bool| True",
"context": "Then we can call it",
"expected": "|bool| True is equal to |bool| True",
"success": true
} ],
"context": "When we stubbed a keyworded method by passing in the correct keyword",
"fullname": "test_When_we_stubbed_a_keyword_method_by_passing_in_the_correct_keyword",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 4 is equal to |int| 4",
"context": "Then it calls its super implementation by default",
"expected": "|int| 4 is equal to |int| 4",
"success": true
}, {
"actual": "|int| 9999 is equal to |int| 9999",
"context": "Then it does not call its super implementation when arguments patterns match a different return value",
"expected": "|int| 9999 is equal to |int| 9999",
"success": true
} ],
"context": "When we call a method that we stubbed to call its super implementation by default",
"fullname": "test_When_we_call_a_method_that_we_stubbed_to_call_its_super_implementation_by_default",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
} ],
"passed": 19,
"path": "res://tests/integration/test_double.test.gd",
"source": {
"containers": [ "res://tests/integration", "res://tests" ],
"method": "",
"path": "res://tests/integration/test_double.test.gd",
"tags": [  ],
"test": ExtResource( 14 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 19
}, {
"context": "Given a Boolean Assertion",
"methods": [ {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then it passes",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When calling asserts.is_true(true)",
"fullname": "test_when_calling_asserts_is_true",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| False == false",
"context": "Then it passes",
"expected": "|bool| False == false",
"success": true
} ],
"context": "When calling asserts.is_false(false)",
"fullname": "test_when_calling_asserts_is_false",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| True != false",
"context": "",
"expected": "|bool| True == false",
"success": false
} ],
"context": " intentional failure",
"fullname": "test_intentional_failure",
"passed": 0,
"success": false,
"time": 0.0,
"total": 1
} ],
"passed": 2,
"path": "res://tests/unit/boolean.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/boolean.test.gd",
"tags": [  ],
"test": ExtResource( 11 ),
"yield_time": 0.0
},
"success": false,
"time_taken": 0.0,
"total": 3
}, {
"context": "Given an Equality Assertion",
"methods": [ {
"assertions": [ {
"actual": "|int| 2 is equal or greater |int| 1",
"context": "Then it passes",
"expected": "|int| 2 is equal or greater |int| 1",
"success": true
} ],
"context": "When calling asserts.is_equal_or_greater_than(2, 1)",
"fullname": "test_when_calling_is_equal_or_greater_than",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 2 is greater than |int| 1",
"context": "Then it passes",
"expected": "|int| 2 is greater than |int| 1",
"success": true
} ],
"context": "When calling asserts.is_greater_than(2, 1)",
"fullname": "test_when_calling_is_greater_than",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 1 is equal to |int| 1",
"context": "Then it passes",
"expected": "|int| 1 is equal to |int| 1",
"success": true
} ],
"context": "When calling asserts.is_equal(1, 1)",
"fullname": "test_when_calling_is_equal",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 1 is less than |int| 2",
"context": "Then it passes",
"expected": "|int| 1 is less than |int| 2",
"success": true
} ],
"context": "When calling asserts.is_less_than(2, 1)",
"fullname": "test_when_calling_is_less_than",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 1 is equal or greater |int| 1",
"context": "Then it passes",
"expected": "|int| 1 is equal or greater |int| 1",
"success": true
} ],
"context": "When calling asserts.is_equal_or_greater_than(1, 1)",
"fullname": "test_when_calling_is_equal_or_greater_than_with_equal_values",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 5 is not equal to |int| 6",
"context": "Then it passes",
"expected": "|int| 5 != |int| 6",
"success": true
} ],
"context": "When callign asserts.is_not_equal(5, 6)",
"fullname": "test_when_calling_is_not_equal",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 1 is equal or less than |int| 1",
"context": "Then it passes!",
"expected": "|int| 1 is equal or less than |int| 1",
"success": true
} ],
"context": "When calling asserts.is_equal_or_less_than(1, 1)",
"fullname": "test_when_calling_is_equal_or_less_than_with_equal_values",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 7,
"path": "res://tests/unit/equality.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/equality.test.gd",
"tags": [  ],
"test": ExtResource( 8 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 7
}, {
"context": "Given A File Assertion",
"methods": [ {
"assertions": [ {
"actual": "res://somefile.gd does not exist",
"context": "Then it passes",
"expected": "res://somefile.gd does not exist",
"success": true
} ],
"context": "When calling asserts.file_does_not_exist when there is no file",
"fullname": "test_when_calling_file_does_not_exist_when_there_is_no_file",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": " does not exist",
"context": "Then it passes",
"expected": " does not exist",
"success": true
} ],
"context": "When calling asserts file does not exist when path is empty",
"fullname": "test_when_calling_file_does_not_exist_when_path_is_empty",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "res://tests/unit/file.test.gd exists",
"context": "Then it passes",
"expected": "res://tests/unit/file.test.gd exists",
"success": true
} ],
"context": "When calling asserts.file_exists when the file is this suite",
"fullname": "test_when_calling_file_exists_when_file_is_self",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 3,
"path": "res://tests/unit/file.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/file.test.gd",
"tags": [  ],
"test": ExtResource( 3 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 3
}, {
"context": "Given an Is Instance of class/type Assertion",
"methods": [ {
"assertions": [ {
"actual": "|AABB| 0, 0, 0 - 0, 0, 0 != null",
"context": "AABB is not null",
"expected": "|AABB| 0, 0, 0 - 0, 0, 0 != null",
"success": true
}, {
"actual": "0, 0, 0 - 0, 0, 0 is builtin: AABB",
"context": "Then it passes",
"expected": "0, 0, 0 - 0, 0, 0 is builtin: AABB",
"success": true
} ],
"context": "When calling asserts.is_AABB(aabb: AABB)",
"fullname": "test_when_calling_is_AABB",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|Array| [] != null",
"context": "array is not null",
"expected": "|Array| [] != null",
"success": true
}, {
"actual": "[] is builtin: Array",
"context": "Then it passes",
"expected": "[] is builtin: Array",
"success": true
} ],
"context": "When calling asserts.is_Array(array: Array)",
"fullname": "test_when_calling_is_Array",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|Transform2D| ((1, 0), (0, 1), (0, 0)) != null",
"context": "transform2D is not null",
"expected": "|Transform2D| ((1, 0), (0, 1), (0, 0)) != null",
"success": true
}, {
"actual": "((1, 0), (0, 1), (0, 0)) is builtin: Transform2D",
"context": "Then it passes",
"expected": "((1, 0), (0, 1), (0, 0)) is builtin: Transform2D",
"success": true
} ],
"context": "When calling asserts.is_Transform(transform2D: Transform2D)",
"fullname": "test_when_calling_is_Transform2D",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|Rect2| (0, 0, 0, 0) != null",
"context": "rect2 is not null",
"expected": "|Rect2| (0, 0, 0, 0) != null",
"success": true
}, {
"actual": "(0, 0, 0, 0) is builtin: Rect2",
"context": "Then it passes",
"expected": "(0, 0, 0, 0) is builtin: Rect2",
"success": true
} ],
"context": "When calling asserts.is_Rect2(rect2: Rect2)",
"fullname": "test_when_calling_is_Rect2",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|Vector3| (0, 0, 0) != null",
"context": "vec3 is not null",
"expected": "|Vector3| (0, 0, 0) != null",
"success": true
}, {
"actual": "(0, 0, 0) is builtin: Vector3",
"context": "Then it passes",
"expected": "(0, 0, 0) is builtin: Vector3",
"success": true
} ],
"context": "When calling asserts.is_Vector3(vec3: Vector3",
"fullname": "test_when_calling_is_Vector3",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|Quat| (0, 0, 0, 1) != null",
"context": "quat is not null",
"expected": "|Quat| (0, 0, 0, 1) != null",
"success": true
}, {
"actual": "(0, 0, 0, 1) is builtin: Quat",
"context": "Then it passes",
"expected": "(0, 0, 0, 1) is builtin: Quat",
"success": true
} ],
"context": "When calling asserts.is_Quat(quat: Quat)",
"fullname": "test_when_calling_is_Quat",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "{} is builtin: Dictionary",
"context": "Then it passes",
"expected": "{} is builtin: Dictionary",
"success": true
} ],
"context": "When calling asserts.is_Dictionary({})",
"fullname": "test_when_calling_is_Dictionary",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|PoolIntArray| [] != null",
"context": "ints is not null",
"expected": "|PoolIntArray| [] != null",
"success": true
}, {
"actual": "[] is builtin: PoolIntArray",
"context": "Then it passes",
"expected": "[] is builtin: PoolIntArray",
"success": true
} ],
"context": "When calling asserts.is_PoolIntArray(ints: PoolIntArray)",
"fullname": "test_when_calling_is_PoolIntArray",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|PoolByteArray| [PoolByteArray] != null",
"context": "bytes is not null",
"expected": "|PoolByteArray| [PoolByteArray] != null",
"success": true
}, {
"actual": "[PoolByteArray] is builtin: PoolByteArray",
"context": "Then it passes",
"expected": "[PoolByteArray] is builtin: PoolByteArray",
"success": true
} ],
"context": "When calling asserts.is_PoolByteArray(bytes: PoolByteArray)",
"fullname": "test_when_calling_is_PoolByteArray",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|RID| [RID] != null",
"context": "rid is not null",
"expected": "|RID| [RID] != null",
"success": true
}, {
"actual": "[RID] is builtin: RID",
"context": "Then it passes",
"expected": "[RID] is builtin: RID",
"success": true
} ],
"context": "When calling asserts.is_RID(rid: RID)",
"fullname": "test_when_calling_is_RID",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|PoolStringArray| [] != null",
"context": "strs is not null",
"expected": "|PoolStringArray| [] != null",
"success": true
}, {
"actual": "[] is builtin: PoolStringArray",
"context": "Then it passes",
"expected": "[] is builtin: PoolStringArray",
"success": true
} ],
"context": "When calling is asserts.is_PoolStringArray(strs: PoolStringArray)",
"fullname": "test_when_calling_is_PoolStringArray",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "1 is builtin: float",
"context": "Then it passes",
"expected": "1 is builtin: float",
"success": true
} ],
"context": "When calling asserts.is_float(1.0)",
"fullname": "test_when_calling_is_float",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|PoolColorArray| [PoolColorArray] != null",
"context": "colors is not null",
"expected": "|PoolColorArray| [PoolColorArray] != null",
"success": true
}, {
"actual": "[PoolColorArray] is builtin: PoolColorArray",
"context": "Then it passes",
"expected": "[PoolColorArray] is builtin: PoolColorArray",
"success": true
} ],
"context": "When calling asserts.is_PoolColorArray(colors: PoolColorArray)",
"fullname": "test_when_calling_is_PoolColorArray",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|NodePath| . != null",
"context": "@'Parent/Child' is not null",
"expected": "|NodePath| . != null",
"success": true
}, {
"actual": ". is builtin: NodePath",
"context": "Then it passes",
"expected": ". is builtin: NodePath",
"success": true
} ],
"context": "When calling asserts.is_NodePath(@'Parent/Child')",
"fullname": "test_when_calling_is_NodePath",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|PoolVector2Array| [] != null",
"context": "vec2s is not null",
"expected": "|PoolVector2Array| [] != null",
"success": true
}, {
"actual": "[] is builtin: PoolVector2Array",
"context": "Then it passes",
"expected": "[] is builtin: PoolVector2Array",
"success": true
} ],
"context": "When calling is asserts.is_PoolVector2Array(vec2s: PoolVector2Array)",
"fullname": "test_when_calling_is_PoolVector2Array",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|PoolVector3Array| [] != null",
"context": "vec3s is not null",
"expected": "|PoolVector3Array| [] != null",
"success": true
}, {
"actual": "[] is builtin: PoolVector3Array",
"context": "Then it passes",
"expected": "[] is builtin: PoolVector3Array",
"success": true
} ],
"context": "When calling is asserts.is_PoolVector3Array(vec3s: PoolVector3Array)",
"fullname": "test_when_calling_is_PoolVector3Array",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|Transform| 1, 0, 0, 0, 1, 0, 0, 0, 1 - 0, 0, 0 != null",
"context": "transform is not null",
"expected": "|Transform| 1, 0, 0, 0, 1, 0, 0, 0, 1 - 0, 0, 0 != null",
"success": true
}, {
"actual": "1, 0, 0, 0, 1, 0, 0, 0, 1 - 0, 0, 0 is builtin: Transform",
"context": "Then it passes",
"expected": "1, 0, 0, 0, 1, 0, 0, 0, 1 - 0, 0, 0 is builtin: Transform",
"success": true
} ],
"context": "When calling asserts.is_Transform(transform: Transform)",
"fullname": "test_when_calling_is_Transform",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|String|  != null",
"context": "strs is not null",
"expected": "|String|  != null",
"success": true
}, {
"actual": " is builtin: String",
"context": "Then it passes",
"expected": " is builtin: String",
"success": true
} ],
"context": "When calling asserts.is_string(strs: String)",
"fullname": "test_when_calling_is_string",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|Basis| ((1, 0, 0), (0, 1, 0), (0, 0, 1)) != null",
"context": "basis is not null",
"expected": "|Basis| ((1, 0, 0), (0, 1, 0), (0, 0, 1)) != null",
"success": true
}, {
"actual": "((1, 0, 0), (0, 1, 0), (0, 0, 1)) is builtin: Basis",
"context": "Then it passes",
"expected": "((1, 0, 0), (0, 1, 0), (0, 0, 1)) is builtin: Basis",
"success": true
} ],
"context": "When calling asserts.is_basis(basis: Basis",
"fullname": "test_when_calling_is_Basis",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|Plane| 0, 0, 0, 0 != null",
"context": "plane is not null",
"expected": "|Plane| 0, 0, 0, 0 != null",
"success": true
}, {
"actual": "0, 0, 0, 0 is builtin: Plane",
"context": "then it passes",
"expected": "0, 0, 0, 0 is builtin: Plane",
"success": true
} ],
"context": "When calling asserts.is_Plane(plane: Plane())",
"fullname": "test_when_calling_is_Plane",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|Vector2| (0, 0) != null",
"context": "vec2 is not null",
"expected": "|Vector2| (0, 0) != null",
"success": true
}, {
"actual": "(0, 0) is builtin: Vector2",
"context": "Then it passes",
"expected": "(0, 0) is builtin: Vector2",
"success": true
} ],
"context": "When calling asserts.is_Vector2(vec2)",
"fullname": "test_when_calling_is_Vector2",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|Object| [Node:4969] != null",
"context": "node is not null",
"expected": "|Object| [Node:4969] != null",
"success": true
}, {
"actual": "[Node:4969] is builtin: Object",
"context": "An instance of node is an Object",
"expected": "[Node:4969] is builtin: Object",
"success": true
} ],
"context": "When calling is asserts.object(node: Node)",
"fullname": "test_when_calling_is_object",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|PoolRealArray| [] != null",
"context": "reals is not null",
"expected": "|PoolRealArray| [] != null",
"success": true
}, {
"actual": "[] is builtin: PoolRealArray",
"context": "Then it passes",
"expected": "[] is builtin: PoolRealArray",
"success": true
} ],
"context": "When calling is asserts.is_PoolRealArray(reals: PoolRealArray)",
"fullname": "test_when_calling_is_PoolRealArray",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "True is builtin: bool",
"context": "Then it passes",
"expected": "True is builtin: bool",
"success": true
} ],
"context": "When calling asserts.is_bool(true)",
"fullname": "test_when_calling_is_bool",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "1 is builtin: int",
"context": "Then it passes",
"expected": "1 is builtin: int",
"success": true
} ],
"context": "When callign asserts.is_int(1)",
"fullname": "test_when_calling_is_int",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|Color| 0,0,0,1 != null",
"context": "color is not null",
"expected": "|Color| 0,0,0,1 != null",
"success": true
}, {
"actual": "0,0,0,1 is builtin: Color",
"context": "Then it passes",
"expected": "0,0,0,1 is builtin: Color",
"success": true
} ],
"context": "When calling asserts.is_color(color: Color)",
"fullname": "test_when_calling_is_Color",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
} ],
"passed": 26,
"path": "res://tests/unit/is_instance.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/is_instance.test.gd",
"tags": [  ],
"test": ExtResource( 6 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 26
}, {
"context": "Given an Is Not Instance of class/type Assertion",
"methods": [ {
"assertions": [ {
"actual": "Null is not builtin: Array",
"context": "Then it passes",
"expected": "Null is not builtin: Array",
"success": true
} ],
"context": "when calling asserts.is_not_Array(null)",
"fullname": "test_when_calling_is_not_Array",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Color",
"context": "Then it passes",
"expected": "Null is not builtin: Color",
"success": true
} ],
"context": "when calling asserts.is_not_Color(null)",
"fullname": "test_when_calling_is_not_Color",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: float",
"context": "Then it passes",
"expected": "Null is not builtin: float",
"success": true
} ],
"context": "when calling asserts.is_not_float(null)",
"fullname": "test_when_calling_is_not_float",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: AABB",
"context": "Then it passes",
"expected": "Null is not builtin: AABB",
"success": true
} ],
"context": "when calling asserts.is_not_AABB(null)",
"fullname": "test_when_calling_is_not_AABB",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Basis",
"context": "Then it passes",
"expected": "Null is not builtin: Basis",
"success": true
} ],
"context": "when calling asserts.is_not_Basis(null)",
"fullname": "test_when_calling_is_not_Basis",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: int",
"context": "Then it passes",
"expected": "Null is not builtin: int",
"success": true
} ],
"context": "when calling asserts.is_not_int(null)",
"fullname": "test_when_calling_is_not_int",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: bool",
"context": "Then it passes",
"expected": "Null is not builtin: bool",
"success": true
} ],
"context": "when calling asserts.is_not_bool(null)",
"fullname": "test_when_calling_is_not_bool",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Dictionary",
"context": "Then it passes",
"expected": "Null is not builtin: Dictionary",
"success": true
} ],
"context": "when calling asserts.is_not_Dictionary(null)",
"fullname": "test_when_calling_is_not_Dictionary",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: NodePath",
"context": "Then it passes",
"expected": "Null is not builtin: NodePath",
"success": true
} ],
"context": "when calling asserts.is_not_NodePath(null)",
"fullname": "test_when_calling_is_not_NodePath",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Object",
"context": "Then it passes",
"expected": "Null is not builtin: Object",
"success": true
} ],
"context": "when calling asserts.is_not_Object(null)",
"fullname": "test_when_calling_is_not_Object",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: PoolStringArray",
"context": "Then it passes",
"expected": "Null is not builtin: PoolStringArray",
"success": true
} ],
"context": "when calling asserts.is_not_PoolStringArray(null)",
"fullname": "test_when_calling_is_not_PoolStringArray",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Quat",
"context": "Then it passes",
"expected": "Null is not builtin: Quat",
"success": true
} ],
"context": "when calling asserts.is_not_Quat(null)",
"fullname": "test_when_calling_is_not_Quat",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: PoolRealArray",
"context": "Then it passes",
"expected": "Null is not builtin: PoolRealArray",
"success": true
} ],
"context": "when calling asserts.is_not_PoolRealArray(null)",
"fullname": "test_when_calling_is_not_PoolRealArray",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: RID",
"context": "Then it passes",
"expected": "Null is not builtin: RID",
"success": true
} ],
"context": "when calling asserts.is_not_RID(null)",
"fullname": "test_when_calling_is_not_RID",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: PoolIntArray",
"context": "Then it passes",
"expected": "Null is not builtin: PoolIntArray",
"success": true
} ],
"context": "when calling asserts.is_not_PoolIntArray(null)",
"fullname": "test_when_calling_is_not_PoolIntArray",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Vector2",
"context": "Then it passes",
"expected": "Null is not builtin: Vector2",
"success": true
} ],
"context": "when calling asserts.is_not_Vector2(null)",
"fullname": "test_when_calling_is_not_Vector2",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Transform",
"context": "Then it passes",
"expected": "Null is not builtin: Transform",
"success": true
} ],
"context": "when calling asserts.is_not_Transform(null)",
"fullname": "test_when_calling_is_not_Transform",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: String",
"context": "Then it passes",
"expected": "Null is not builtin: String",
"success": true
} ],
"context": "when calling asserts.is_not_String(null)",
"fullname": "test_when_calling_is_not_String",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: PoolVector2Array",
"context": "Then it passes",
"expected": "Null is not builtin: PoolVector2Array",
"success": true
} ],
"context": "when calling asserts.is_not_PoolVector2Array(null)",
"fullname": "test_when_calling_is_not_PoolVector2Array",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: PoolVector3Array",
"context": "Then it passes",
"expected": "Null is not builtin: PoolVector3Array",
"success": true
} ],
"context": "when calling asserts.is_not_PoolVector3Array(null)",
"fullname": "test_when_calling_is_not_PoolVector3Array",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Plane",
"context": "Then it passes",
"expected": "Null is not builtin: Plane",
"success": true
} ],
"context": "when calling asserts.is_not_Plane(null)",
"fullname": "test_when_calling_is_not_Plane",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Transform2D",
"context": "Then it passes",
"expected": "Null is not builtin: Transform2D",
"success": true
} ],
"context": "when calling asserts.is_not_Transform2D(null)",
"fullname": "test_when_calling_is_not_Transform2D",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: PoolColorArray",
"context": "Then it passes",
"expected": "Null is not builtin: PoolColorArray",
"success": true
} ],
"context": "when calling asserts.is_not_PoolColorArray(null)",
"fullname": "test_when_calling_is_not_PoolColorArray",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Vector3",
"context": "Then it passes",
"expected": "Null is not builtin: Vector3",
"success": true
} ],
"context": "when calling asserts.is_not_Vector3(null)",
"fullname": "test_when_calling_is_not_Vector3",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: PoolByteArray",
"context": "Then it passes",
"expected": "Null is not builtin: PoolByteArray",
"success": true
} ],
"context": "when calling asserts.is_not_PoolByteArray(null)",
"fullname": "test_when_calling_is_not_PoolByteArray",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Rect2",
"context": "Then it passes",
"expected": "Null is not builtin: Rect2",
"success": true
} ],
"context": "when calling asserts.is_not_Rect2(null)",
"fullname": "test_when_calling_is_not_Rect2",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 26,
"path": "res://tests/unit/is_not_instance.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/is_not_instance.test.gd",
"tags": [  ],
"test": ExtResource( 2 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 26
}, {
"context": "Given a Null Assertion",
"methods": [ {
"assertions": [ {
"actual": "|Object| [Node:5010] != null",
"context": "Then it passes",
"expected": "|Object| [Node:5010] != null",
"success": true
} ],
"context": "When calling Node is not null",
"fullname": "test_when_calling_node_is_not_null",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|null| Null == null",
"context": "Then it passes",
"expected": "|null| Null == null",
"success": true
} ],
"context": "When calling asserts.is_null(null)",
"fullname": "test_when_calling_null_is_null",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|Object| [Deleted Object] == null",
"context": "A Freed Node is null in Engine 3.2.2 or greater",
"expected": "|Object| [Deleted Object] == null",
"success": true
} ],
"context": "When calling freed object is null",
"fullname": "test_when_calling_freed_object_is_not_null",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 3,
"path": "res://tests/unit/null.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/null.test.gd",
"tags": [  ],
"test": ExtResource( 12 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 3
}, {
"context": "Given an Object Assertion",
"methods": [ {
"assertions": [ {
"actual": "[Node:5015] does not have meta: confusing",
"context": "Then it passes",
"expected": "[Node:5015] does not have meta: confusing",
"success": true
} ],
"context": "When calling asserts.object_has_meta with real key but null val",
"fullname": "test_when_calling_does_not_have_meta_real_key_null_value_pair",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:5015] has method: title",
"context": "Then it passes",
"expected": "[Node:5015] has method: title",
"success": true
} ],
"context": "When calling has_method('title')",
"fullname": "test_when_calling_has_method_title",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:5015] has user signal: dummy_signal",
"context": "Then it passes",
"expected": "[Node:5015] has user signal: dummy_signal",
"success": true
} ],
"context": "When calling obj_has_user_signal after adding a signal",
"fullname": "test_when_calling_has_user_signal_after_adding_a_signal",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:5015] does not have user signal: false_signal",
"context": "Then it passes",
"expected": "[Node:5015] does not have user signal: false_signal",
"success": true
} ],
"context": "When calling obj_does_not_have_user_signal with fake signal",
"fullname": "test_when_calling_does_not_have_user_signal",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is freed from memory",
"context": "Then it passes",
"expected": "Null is freed from memory",
"success": true
} ],
"context": "When calling asserts.is_freed(freed_object",
"fullname": "test_when_calling_freed_object_is_freed",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:5015] has meta: dummy",
"context": "Then it passes",
"expected": "[Node:5015] has meta: dummy",
"success": true
}, {
"actual": "[Node:5015] has meta: dummy",
"context": "Then it passes",
"expected": "[Node:5015] has meta: dummy",
"success": true
} ],
"context": "When calling asserts.object_has_meta() after adding metadata",
"fullname": "test_when_calling_has_meta_after_adding_metadata",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "[Node:5026] is not freed",
"context": "Then it passes",
"expected": "[Node:5026] is not freed",
"success": true
} ],
"context": "When calling asserts.is_not_freed(unfreed_object)",
"fullname": "test_when_calling_unfreed_object_is_not_freed",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:5015] does not have meta: bad_meta",
"context": "Then it passes",
"expected": "[Node:5015] does not have meta: bad_meta",
"success": true
} ],
"context": "When calling asserts.object_does_not_have_meta()",
"fullname": "test_when_calling_does_not_have_meta",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:5029] is queued for deletion",
"context": "Then it passes",
"expected": "[Node:5029] is queued for deletion",
"success": true
} ],
"context": "When calling asserts.object_is_queued for deletion after calling queue_free",
"fullname": "test_when_calling_obj_is_queued_for_deletion_after_calling_queue_free",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:5031] is blocking signals",
"context": "Then it passes",
"expected": "[Node:5031] is blocking signals",
"success": true
} ],
"context": "When calling is blocking signals while blocking signals",
"fullname": "test_is_blocking_signals",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:5033] is not blocking signals",
"context": "Then it passes",
"expected": "[Node:5033] is not blocking signals",
"success": true
} ],
"context": "When calling is not blocking signals while not blocking signals",
"fullname": "test_is_not_blocking_signals",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:5035] is not queued for deletion",
"context": "Then it passes",
"expected": "[Node:5035] is not queued for deletion",
"success": true
} ],
"context": "When calling asserts.object_is_not_for_queued_deletion after not calling queue free()",
"fullname": "test_when_calling_obj_is_not_for_queued_deletion_after_not_calling_queue_free",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:5015].builtin_dummy is connected to [Node:5015].title",
"context": "Then it passes",
"expected": "[Node:5015].builtin_dummy is connected to [Node:5015].title",
"success": true
} ],
"context": "When calling asserts object is connected with a valid connection",
"fullname": "test_when_calling_obj_is_connected_with_a_real_connection",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:5015].builtin_dummy is not connected to [Node:5015].title",
"context": "Then it passes",
"expected": "[Node:5015].builtin_dummy is not connected to [Node:5015].title",
"success": true
} ],
"context": "When calling asserts object is not connected with an invalid connection",
"fullname": "test_when_calling_obj_is_not_connected_with_an_invalid_connection",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:5015] does not have user signal: builtin_dummy",
"context": "Then it passes",
"expected": "[Node:5015] does not have user signal: builtin_dummy",
"success": true
} ],
"context": "When calling does not have user signal with class signal",
"fullname": "test_when_calling_does_not_have_user_signal_with_class_signal_constant",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 15,
"path": "res://tests/unit/object.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/object.test.gd",
"tags": [  ],
"test": ExtResource( 7 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 15
}, {
"context": "Given the Addition Operator",
"methods": [ {
"assertions": [ {
"actual": "|int| 4 is equal to |int| 4",
"context": "",
"expected": "|int| 4 is equal to |int| 4",
"success": true
} ],
"context": "When we add 2 to 2 we get 4",
"fullname": "test_add",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 8 is equal to |int| 8",
"context": "",
"expected": "|int| 8 is equal to |int| 8",
"success": true
} ],
"context": "When we add 5 to 3 we get 8",
"fullname": "test_add",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 13 is equal to |int| 13",
"context": "",
"expected": "|int| 13 is equal to |int| 13",
"success": true
} ],
"context": "When we add 7 to 6 we get 13",
"fullname": "test_add",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 0 is equal to |int| 0",
"context": "",
"expected": "|int| 0 is equal to |int| 0",
"success": true
} ],
"context": "When we subtract 2 from 2 we get 0",
"fullname": "test_subtract",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 2 is equal to |int| 2",
"context": "",
"expected": "|int| 2 is equal to |int| 2",
"success": true
} ],
"context": "When we subtract 5 from 3 we get 2",
"fullname": "test_subtract",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 1 is equal to |int| 1",
"context": "",
"expected": "|int| 1 is equal to |int| 1",
"success": true
} ],
"context": "When we subtract 7 from 6 we get 1",
"fullname": "test_subtract",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 6,
"path": "res://tests/unit/parameters.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/parameters.test.gd",
"tags": [  ],
"test": ExtResource( 16 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 6
}, {
"context": "Given A Range Assertion",
"methods": [ {
"assertions": [ {
"actual": "10 is not in range(0, 10)",
"context": "Then it passes",
"expected": "10 is not in range(0, 10)",
"success": true
} ],
"context": "When calling is (10) not in range (in range(0, 10)",
"fullname": "test_when_calling_is_not_in_range",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "0 is in range(0, 10)",
"context": "Then it passes",
"expected": "0 is in range(0, 10)",
"success": true
} ],
"context": "When calling is (0) in range(0, 10)",
"fullname": "test_when_calling_is_in_range",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 2,
"path": "res://tests/unit/range.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/range.test.gd",
"tags": [  ],
"test": ExtResource( 15 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 2
}, {
"context": "Given a String Assertion",
"methods": [ {
"assertions": [ {
"actual": "impsum does not begin with bleh lorem",
"context": "Then it passes",
"expected": "impsum does not begin with bleh lorem",
"success": true
} ],
"context": "When calling asserts.string_does_not_begin_with('lorem', 'impsum')",
"fullname": "test_when_calling_string_does_not_begin_with",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "lorem impsum begins with lorem",
"context": "Then it passes",
"expected": "lorem impsum begins with lorem",
"success": true
} ],
"context": "When calling asserts.string_begins_with('lorem', 'lorem impsum')",
"fullname": "test_when_calling_string_begins_with",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "lorem impsum ends with impsum",
"context": "Then it passes",
"expected": "lorem impsum ends with impsum",
"success": true
} ],
"context": "When calling asserts.string_ends_with('impsum', 'lorem impsum')",
"fullname": "test_when_calling_string_ends_with",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "impsum does not contain beem im",
"context": "Then it passes",
"expected": "impsum does not contain beem im",
"success": true
} ],
"context": "When calling asserts.string_does_not_contain('em im', 'impsum')",
"fullname": "test_when_calling_string_does_not_contain",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "lorem impsum contains em im",
"context": "Then it passes",
"expected": "lorem impsum contains em im",
"success": true
} ],
"context": "When calling asserts.string_contains('em im', 'lorem impsum')",
"fullname": "test_when_calling_string_contains",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "impsum does not end with lorem",
"context": "Then it passes",
"expected": "impsum does not end with lorem",
"success": true
} ],
"context": "When calling asserts.string_does_not_end_with('lorem', 'impsum')",
"fullname": "test_when_calling_string_does_not_end_with",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 6,
"path": "res://tests/unit/string.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/string.test.gd",
"tags": [  ],
"test": ExtResource( 9 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 6
}, {
"context": "Dummy Passing Test",
"methods": [ {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Passing!",
"expected": "|bool| True == true",
"success": true
} ],
"context": "This method passes",
"fullname": "test_this_method_passes",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 1,
"path": "res://tests/unit/suite.test.gd.DummyOne",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/suite.test.gd.DummyOne",
"tags": [  ],
"test": SubResource( 19 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 1
}, {
"context": "Dummy Test 2",
"methods": [ {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Passing!",
"expected": "|bool| True == true",
"success": true
} ],
"context": "This method passes",
"fullname": "test_this_method_passes",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 1,
"path": "res://tests/unit/suite.test.gd.DummyTwo",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/suite.test.gd.DummyTwo",
"tags": [  ],
"test": SubResource( 20 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 1
}, {
"context": "Given a Test Script",
"methods": [ {
"assertions": [ {
"actual": "|int| 10 is greater than |int| 1",
"context": "We get an array of multiple values back",
"expected": "|int| 10 is greater than |int| 1",
"success": true
}, {
"actual": "|int| 0 is not equal to |int| 9",
"context": "With different values",
"expected": "|int| 0 != |int| 9",
"success": true
}, {
"actual": "|int| 10 is greater than |int| 1",
"context": "And we can track multiple properties",
"expected": "|int| 10 is greater than |int| 1",
"success": true
} ],
"context": "When we record properties",
"fullname": "test_we_can_record_properties",
"passed": 3,
"success": true,
"time": 0.0,
"total": 3
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "if the test didn't break this works",
"expected": "|bool| True == true",
"success": true
} ],
"context": " we can omit describe",
"fullname": "test_we_can_omit_describe",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|int| 2 is equal to |int| 2",
"context": "",
"expected": "|int| 2 is equal to |int| 2",
"success": true
} ],
"context": " when we omit context we can see expected and got under method",
"fullname": "test_when_we_omit_context_we_can_see_expected_and_got_under_method",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
} ],
"passed": 3,
"path": "res://tests/unit/test.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/test.test.gd",
"tags": [  ],
"test": ExtResource( 19 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 3
}, {
"context": "Given a Signal Watcher",
"methods": [ {
"assertions": [ {
"actual": "signal: multiple was emitted from [Node:5082] 2",
"context": "Then we can track how many times we emitted it",
"expected": "signal: multiple was emitted from [Node:5082] 2",
"success": true
} ],
"context": "When we watch and signal and emit it multiple times",
"fullname": "test_When_we_watch_a_signal_and_emit_it_multiple_times",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Signal: example was not emitted from [Node:5082]",
"context": "Then it does not capture the non-emitted signal",
"expected": "Signal: example was not emitted from [Node:5082]",
"success": true
} ],
"context": "When we watch and do not emit a signal",
"fullname": "test_When_we_watch_and_do_not_emit_a_signal",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Signal: example was emitted from [Node:5082] with arguments: [1, 20, 5]",
"context": "Then it captures any arguments that where passed when the signal was emitted",
"expected": "Signal: example was emitted from [Node:5082] with arguments: [1, 20, 5]",
"success": true
} ],
"context": "When we watch a signal from an object with no bound variables",
"fullname": "test_When_we_watch_a_signal_from_an_object_with_no_bound_variables",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "signal: example was emitted from [Node:5082]",
"context": "Then it captures the emitted signal",
"expected": "signal: example was emitted from [Node:5082]",
"success": true
} ],
"context": "When we watch and emit a signal",
"fullname": "test_When_we_watch_and_emit_a_signal",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 4,
"path": "res://tests/unit/watcher.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/watcher.test.gd",
"tags": [  ],
"test": ExtResource( 17 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 4
}, {
"context": "Given a Yield",
"methods": [ {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then we set var a to true",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then we set var b to true",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we yield in start twice",
"fullname": "test_When_we_yield_in_start",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then we set var c to true",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then we set var d to true",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we yield in pre thrice",
"fullname": "test_When_we_yield_in_pre",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "[100, Null, Null, Null, Null, Null] is builtin: Array",
"context": "Then we get an array",
"expected": "[100, Null, Null, Null, Null, Null] is builtin: Array",
"success": true
}, {
"actual": "|int| 6 is equal to |int| 6",
"context": "Of size 6",
"expected": "|int| 6 is equal to |int| 6",
"success": true
}, {
"actual": "|int| 100 is equal to |int| 100",
"context": "Where element 0 is 100",
"expected": "|int| 100 is equal to |int| 100",
"success": true
} ],
"context": "When yield(self.yield_value()) returns",
"fullname": "test_When_we_yield_we_get_the_return_value",
"passed": 3,
"success": true,
"time": 0.0,
"total": 3
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then yielder is unpaused",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "The timeout signal of the yielder is connected",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we call until_timeout (with 1.0)",
"fullname": "test_When_we_call_until_timeout",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then the yielder is unpaused",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then the timeout signal of the yielder is connected",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then our signal is connected to the yielder",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we call until signal",
"fullname": "test_When_we_call_until_signal",
"passed": 3,
"success": true,
"time": 0.0,
"total": 3
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then yielder is not active",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When asserting against a test",
"fullname": "test_Yielder_is_not_active_when_asserting",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then we set var e to true",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then we set var f to true",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we yield twice in execute",
"fullname": "test_When_we_yield_in_execute",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then the timeout signal is disconnected",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then the signal-signal is disconnected",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When it is finished",
"fullname": "test_When_yielder_is_finished_signals_are_disconnected",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then the yielder is paused",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When a signal being yielded on is emitted",
"fullname": "test_When_a_signal_being_yielded_on_is_emitted_the_yielder_is_stopped",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then the yielder is paused",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "The timeout signal of the yielder is not connected",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When the yielder times out on until_timeout(0.1)",
"fullname": "test_When_the_yielder_times_out",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then the yielder is paused",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then the timeout signal of the yielder is disconnected",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then our signal to the yielder is disconnected",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When the yielder heres our signal",
"fullname": "test_When_the_yielder_hears_our_signal",
"passed": 3,
"success": true,
"time": 0.0,
"total": 3
} ],
"passed": 11,
"path": "res://tests/unit/yield.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/yield.test.gd",
"tags": [  ],
"test": ExtResource( 18 ),
"yield_time": 1.9
},
"success": true,
"time_taken": 0.0,
"total": 11
}, {
"context": "Given a Boolean Assertion",
"methods": [ {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then it passes",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When calling asserts.is_true(true)",
"fullname": "test_when_calling_asserts_is_true",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| False == false",
"context": "Then it passes",
"expected": "|bool| False == false",
"success": true
} ],
"context": "When calling asserts.is_false(false)",
"fullname": "test_when_calling_asserts_is_false",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| True != false",
"context": "",
"expected": "|bool| True == false",
"success": false
} ],
"context": " intentional failure",
"fullname": "test_intentional_failure",
"passed": 0,
"success": false,
"time": 0.0,
"total": 1
} ],
"passed": 2,
"path": "res://tests/integration/boolean.test.gd",
"source": {
"containers": [ "res://tests/integration", "res://tests" ],
"method": "",
"path": "res://tests/integration/boolean.test.gd",
"tags": [  ],
"test": ExtResource( 20 ),
"yield_time": 0.0
},
"success": false,
"time_taken": 0.0,
"total": 3
}, {
"context": "Default Args",
"methods": [ {
"assertions": [ {
"actual": "|bool| True == true",
"context": "If this method can be reached then we have doubled a script with default argument(s) properly!",
"expected": "|bool| True == true",
"success": true
} ],
"context": " default arguments of interpolate property",
"fullname": "test_default_arguments_of_interpolate_property",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 1,
"path": "res://tests/integration/default_args.test.gd",
"source": {
"containers": [ "res://tests/integration", "res://tests" ],
"method": "",
"path": "res://tests/integration/default_args.test.gd",
"tags": [  ],
"test": ExtResource( 10 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 1
}, {
"context": "Given is_on_floor",
"methods": [ {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then it can be stubbed",
"expected": "|bool| True == true",
"success": true
} ],
"context": "From a user-defined script",
"fullname": "test_stubbing_is_on_floor_method_from_user_defined_class",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then it can be stubbed",
"expected": "|bool| True == true",
"success": true
} ],
"context": "From a child node of a scene without scripts",
"fullname": "test_stubbing_is_on_floor_as_child_node_with_no_script",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then it can be stubbed",
"expected": "|bool| True == true",
"success": true
} ],
"context": "From a built-in KinematicBody2D2",
"fullname": "test_stubbing_is_on_floor_method_from_builtin_class2",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 3,
"path": "res://tests/integration/on_floor.test.gd",
"source": {
"containers": [ "res://tests/integration", "res://tests" ],
"method": "",
"path": "res://tests/integration/on_floor.test.gd",
"tags": [  ],
"test": ExtResource( 5 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 3
}, {
"context": "Given a Scene Director",
"methods": [ {
"assertions": [ {
"actual": "|NodePath| A is equal to |NodePath| A",
"context": "We have the correct NodePath Set",
"expected": "|NodePath| A is equal to |NodePath| A",
"success": true
} ],
"context": "When we add it to the tree it runs",
"fullname": "test_When_we_add_it_to_the_tree_it_runs",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 9999 is equal to |int| 9999",
"context": "Then we get the stubbed return value",
"expected": "|int| 9999 is equal to |int| 9999",
"success": true
} ],
"context": "When we call a method from the root node that we stubbed",
"fullname": "test_When_we_call_a_method_from_the_root_node_that_we_stubbed",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 999 is equal to |int| 999",
"context": "Then we get the stubbed return value",
"expected": "|int| 999 is equal to |int| 999",
"success": true
} ],
"context": "When we call a method from a child node that we stubbed",
"fullname": "test_When_we_call_a_method_from_a_child_node_that_we_stubbed",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 99 is equal to |int| 99",
"context": "Then we get the stubbed return value",
"expected": "|int| 99 is equal to |int| 99",
"success": true
} ],
"context": "When we call a method from a grandchild node that we stubbed",
"fullname": "test_When_we_call_a_method_from_a_grandchild_node_that_we_stubbed",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|Dictionary| {.:[Reference:5348], A:[Reference:5349], A/B:[Reference:5351], C:[Reference:5350], C/D:[Reference:5352]} is not equal to |Dictionary| {.:[Reference:5362], A:[Reference:5363], A/B:[Reference:5365], C:[Reference:5364], C/D:[Reference:5366]}",
"context": "Then they do not share resources",
"expected": "|Dictionary| {.:[Reference:5348], A:[Reference:5349], A/B:[Reference:5351], C:[Reference:5350], C/D:[Reference:5352]} != |Dictionary| {.:[Reference:5362], A:[Reference:5363], A/B:[Reference:5365], C:[Reference:5364], C/D:[Reference:5366]}",
"success": true
} ],
"context": "When we create two of it for the same scene",
"fullname": "test_When_we_create_two_of_it_for_the_same_scene",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 5,
"path": "res://tests/integration/scene_director.test.gd",
"source": {
"containers": [ "res://tests/integration", "res://tests" ],
"method": "",
"path": "res://tests/integration/scene_director.test.gd",
"tags": [  ],
"test": ExtResource( 4 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 5
}, {
"context": "Given a Script Director",
"methods": [ {
"assertions": [ {
"actual": "|Dictionary| {_enter_tree:{arguments:, default_arguments:}, _exit_tree:{arguments:, default_arguments:}, _get:{arguments:a, default_arguments:a}, _get_configuration_warning:{arguments:, default_arguments:}, _get_editor_description:{arguments:, default_arguments:}, _get_import_path:{arguments:, default_arguments:}, _get_property_list:{arguments:, default_arguments:}, _init:{arguments:, default_arguments:}, _input:{arguments:a, default_arguments:a}, _notification:{arguments:a, default_arguments:a}, _physics_process:{arguments:a, default_arguments:a}, _process:{arguments:a, default_arguments:a}, _ready:{arguments:, default_arguments:}, _set:{arguments:a, b, default_arguments:a, b}, _set_editor_description:{arguments:a, default_arguments:a}, _set_import_path:{arguments:a, default_arguments:a}, _to_string:{arguments:, default_arguments:}, _unhandled_input:{arguments:a, default_arguments:a}, _unhandled_key_input:{arguments:a, default_arguments:a}, add:{arguments:a, b, default_arguments:a, b}, add_child:{arguments:a, b, default_arguments:a, b = False}, add_child_below_node:{arguments:a, b, c, default_arguments:a, b, c = False}, add_to_group:{arguments:a, b, default_arguments:a, b = False}, add_user_signal:{arguments:a, b, default_arguments:a, b = []}, call:{arguments:a, default_arguments:a}, call_deferred:{arguments:a, default_arguments:a}, callv:{arguments:a, b, default_arguments:a, b}, can_process:{arguments:, default_arguments:}, can_translate_messages:{arguments:, default_arguments:}, connect:{arguments:a, b, c, d, e, default_arguments:a, b, c, d = [], e = 0}, disconnect:{arguments:a, b, c, default_arguments:a, b, c}, divide:{arguments:a, b, default_arguments:a, b}, duplicate:{arguments:a, default_arguments:a = 15}, emit_signal:{arguments:a, default_arguments:a}, find_node:{arguments:a, b, c, default_arguments:a, b = True, c = True}, find_parent:{arguments:a, default_arguments:a}, free:{arguments:, default_arguments:}, get:{arguments:a, default_arguments:a}, get_child:{arguments:a, default_arguments:a}, get_child_count:{arguments:, default_arguments:}, get_children:{arguments:, default_arguments:}, get_class:{arguments:, default_arguments:}, get_custom_multiplayer:{arguments:, default_arguments:}, get_filename:{arguments:, default_arguments:}, get_groups:{arguments:, default_arguments:}, get_incoming_connections:{arguments:, default_arguments:}, get_index:{arguments:, default_arguments:}, get_indexed:{arguments:a, default_arguments:a}, get_instance_id:{arguments:, default_arguments:}, get_meta:{arguments:a, default_arguments:a}, get_meta_list:{arguments:, default_arguments:}, get_method_list:{arguments:, default_arguments:}, get_multiplayer:{arguments:, default_arguments:}, get_name:{arguments:, default_arguments:}, get_network_master:{arguments:, default_arguments:}, get_node:{arguments:a, default_arguments:a}, get_node_and_resource:{arguments:a, default_arguments:a}, get_node_or_null:{arguments:a, default_arguments:a}, get_owner:{arguments:, default_arguments:}, get_parent:{arguments:, default_arguments:}, get_path:{arguments:, default_arguments:}, get_path_to:{arguments:a, default_arguments:a}, get_pause_mode:{arguments:, default_arguments:}, get_physics_process_delta_time:{arguments:, default_arguments:}, get_position_in_parent:{arguments:, default_arguments:}, get_process_delta_time:{arguments:, default_arguments:}, get_process_priority:{arguments:, default_arguments:}, get_property_list:{arguments:, default_arguments:}, get_scene_instance_load_placeholder:{arguments:, default_arguments:}, get_script:{arguments:, default_arguments:}, get_signal_connection_list:{arguments:a, default_arguments:a}, get_signal_list:{arguments:, default_arguments:}, get_tree:{arguments:, default_arguments:}, get_viewport:{arguments:, default_arguments:}, has_meta:{arguments:a, default_arguments:a}, has_method:{arguments:a, default_arguments:a}, has_node:{arguments:a, default_arguments:a}, has_node_and_resource:{arguments:a, default_arguments:a}, has_signal:{arguments:a, default_arguments:a}, has_user_signal:{arguments:a, default_arguments:a}, is_a_parent_of:{arguments:a, default_arguments:a}, is_blocking_signals:{arguments:, default_arguments:}, is_class:{arguments:a, default_arguments:a}, is_connected:{arguments:a, b, c, default_arguments:a, b, c}, is_displayed_folded:{arguments:, default_arguments:}, is_greater_than:{arguments:a, default_arguments:a}, is_in_group:{arguments:a, default_arguments:a}, is_inside_tree:{arguments:, default_arguments:}, is_network_master:{arguments:, default_arguments:}, is_physics_processing:{arguments:, default_arguments:}, is_physics_processing_internal:{arguments:, default_arguments:}, is_processing:{arguments:, default_arguments:}, is_processing_input:{arguments:, default_arguments:}, is_processing_internal:{arguments:, default_arguments:}, is_processing_unhandled_input:{arguments:, default_arguments:}, is_processing_unhandled_key_input:{arguments:, default_arguments:}, is_queued_for_deletion:{arguments:, default_arguments:}, math_fight:{arguments:, default_arguments:}, move_child:{arguments:a, b, default_arguments:a, b}, multiply:{arguments:a, b, default_arguments:a, b}, notification:{arguments:a, b, default_arguments:a, b = False}, pi:{arguments:, default_arguments:}, print_stray_nodes:{arguments:, default_arguments:}, print_tree:{arguments:, default_arguments:}, print_tree_pretty:{arguments:, default_arguments:}, propagate_call:{arguments:a, b, c, default_arguments:a, b = [], c = False}, propagate_notification:{arguments:a, default_arguments:a}, property_list_changed_notify:{arguments:, default_arguments:}, queue_free:{arguments:, default_arguments:}, raise:{arguments:, default_arguments:}, remove_and_skip:{arguments:, default_arguments:}, remove_child:{arguments:a, default_arguments:a}, remove_from_group:{arguments:a, default_arguments:a}, remove_meta:{arguments:a, default_arguments:a}, replace_by:{arguments:a, b, default_arguments:a, b = False}, request_ready:{arguments:, default_arguments:}, rpc:{arguments:a, default_arguments:a}, rpc_config:{arguments:a, b, default_arguments:a, b}, rpc_id:{arguments:a, b, default_arguments:a, b}, rpc_unreliable:{arguments:a, default_arguments:a}, rpc_unreliable_id:{arguments:a, b, default_arguments:a, b}, rset:{arguments:a, b, default_arguments:a, b}, rset_config:{arguments:a, b, default_arguments:a, b}, rset_id:{arguments:a, b, c, default_arguments:a, b, c}, rset_unreliable:{arguments:a, b, default_arguments:a, b}, rset_unreliable_id:{arguments:a, b, c, default_arguments:a, b, c}, set:{arguments:a, b, default_arguments:a, b}, set_block_signals:{arguments:a, default_arguments:a}, set_custom_multiplayer:{arguments:a, default_arguments:a}, set_deferred:{arguments:a, b, default_arguments:a, b}, set_display_folded:{arguments:a, default_arguments:a}, set_filename:{arguments:a, default_arguments:a}, set_indexed:{arguments:a, b, default_arguments:a, b}, set_message_translation:{arguments:a, default_arguments:a}, set_meta:{arguments:a, b, default_arguments:a, b}, set_name:{arguments:a, default_arguments:a}, set_network_master:{arguments:a, b, default_arguments:a, b = True}, set_owner:{arguments:a, default_arguments:a}, set_pause_mode:{arguments:a, default_arguments:a}, set_physics_process:{arguments:a, default_arguments:a}, set_physics_process_internal:{arguments:a, default_arguments:a}, set_process:{arguments:a, default_arguments:a}, set_process_input:{arguments:a, default_arguments:a}, set_process_internal:{arguments:a, default_arguments:a}, set_process_priority:{arguments:a, default_arguments:a}, set_process_unhandled_input:{arguments:a, default_arguments:a}, set_process_unhandled_key_input:{arguments:a, default_arguments:a}, set_scene_instance_load_placeholder:{arguments:a, default_arguments:a}, set_script:{arguments:a, default_arguments:a}, subtract:{arguments:a, b, default_arguments:a, b}, sum:{arguments:a, default_arguments:a}, to_string:{arguments:, default_arguments:}, tr:{arguments:a, default_arguments:a}, update_configuration_warning:{arguments:, default_arguments:}} is not equal to |Dictionary| {_enter_tree:{arguments:, default_arguments:}, _exit_tree:{arguments:, default_arguments:}, _get:{arguments:a, default_arguments:a}, _get_configuration_warning:{arguments:, default_arguments:}, _get_editor_description:{arguments:, default_arguments:}, _get_import_path:{arguments:, default_arguments:}, _get_property_list:{arguments:, default_arguments:}, _init:{arguments:, default_arguments:}, _input:{arguments:a, default_arguments:a}, _notification:{arguments:a, default_arguments:a}, _physics_process:{arguments:a, default_arguments:a}, _process:{arguments:a, default_arguments:a}, _ready:{arguments:, default_arguments:}, _set:{arguments:a, b, default_arguments:a, b}, _set_editor_description:{arguments:a, default_arguments:a}, _set_import_path:{arguments:a, default_arguments:a}, _to_string:{arguments:, default_arguments:}, _unhandled_input:{arguments:a, default_arguments:a}, _unhandled_key_input:{arguments:a, default_arguments:a}, add:{arguments:a, b, default_arguments:a, b}, add_child:{arguments:a, b, default_arguments:a, b = False}, add_child_below_node:{arguments:a, b, c, default_arguments:a, b, c = False}, add_to_group:{arguments:a, b, default_arguments:a, b = False}, add_user_signal:{arguments:a, b, default_arguments:a, b = []}, call:{arguments:a, default_arguments:a}, call_deferred:{arguments:a, default_arguments:a}, callv:{arguments:a, b, default_arguments:a, b}, can_process:{arguments:, default_arguments:}, can_translate_messages:{arguments:, default_arguments:}, connect:{arguments:a, b, c, d, e, default_arguments:a, b, c, d = [], e = 0}, disconnect:{arguments:a, b, c, default_arguments:a, b, c}, divide:{arguments:a, b, default_arguments:a, b}, duplicate:{arguments:a, default_arguments:a = 15}, emit_signal:{arguments:a, default_arguments:a}, find_node:{arguments:a, b, c, default_arguments:a, b = True, c = True}, find_parent:{arguments:a, default_arguments:a}, free:{arguments:, default_arguments:}, get:{arguments:a, default_arguments:a}, get_child:{arguments:a, default_arguments:a}, get_child_count:{arguments:, default_arguments:}, get_children:{arguments:, default_arguments:}, get_class:{arguments:, default_arguments:}, get_custom_multiplayer:{arguments:, default_arguments:}, get_filename:{arguments:, default_arguments:}, get_groups:{arguments:, default_arguments:}, get_incoming_connections:{arguments:, default_arguments:}, get_index:{arguments:, default_arguments:}, get_indexed:{arguments:a, default_arguments:a}, get_instance_id:{arguments:, default_arguments:}, get_meta:{arguments:a, default_arguments:a}, get_meta_list:{arguments:, default_arguments:}, get_method_list:{arguments:, default_arguments:}, get_multiplayer:{arguments:, default_arguments:}, get_name:{arguments:, default_arguments:}, get_network_master:{arguments:, default_arguments:}, get_node:{arguments:a, default_arguments:a}, get_node_and_resource:{arguments:a, default_arguments:a}, get_node_or_null:{arguments:a, default_arguments:a}, get_owner:{arguments:, default_arguments:}, get_parent:{arguments:, default_arguments:}, get_path:{arguments:, default_arguments:}, get_path_to:{arguments:a, default_arguments:a}, get_pause_mode:{arguments:, default_arguments:}, get_physics_process_delta_time:{arguments:, default_arguments:}, get_position_in_parent:{arguments:, default_arguments:}, get_process_delta_time:{arguments:, default_arguments:}, get_process_priority:{arguments:, default_arguments:}, get_property_list:{arguments:, default_arguments:}, get_scene_instance_load_placeholder:{arguments:, default_arguments:}, get_script:{arguments:, default_arguments:}, get_signal_connection_list:{arguments:a, default_arguments:a}, get_signal_list:{arguments:, default_arguments:}, get_tree:{arguments:, default_arguments:}, get_viewport:{arguments:, default_arguments:}, has_meta:{arguments:a, default_arguments:a}, has_method:{arguments:a, default_arguments:a}, has_node:{arguments:a, default_arguments:a}, has_node_and_resource:{arguments:a, default_arguments:a}, has_signal:{arguments:a, default_arguments:a}, has_user_signal:{arguments:a, default_arguments:a}, is_a_parent_of:{arguments:a, default_arguments:a}, is_blocking_signals:{arguments:, default_arguments:}, is_class:{arguments:a, default_arguments:a}, is_connected:{arguments:a, b, c, default_arguments:a, b, c}, is_displayed_folded:{arguments:, default_arguments:}, is_greater_than:{arguments:a, default_arguments:a}, is_in_group:{arguments:a, default_arguments:a}, is_inside_tree:{arguments:, default_arguments:}, is_network_master:{arguments:, default_arguments:}, is_physics_processing:{arguments:, default_arguments:}, is_physics_processing_internal:{arguments:, default_arguments:}, is_processing:{arguments:, default_arguments:}, is_processing_input:{arguments:, default_arguments:}, is_processing_internal:{arguments:, default_arguments:}, is_processing_unhandled_input:{arguments:, default_arguments:}, is_processing_unhandled_key_input:{arguments:, default_arguments:}, is_queued_for_deletion:{arguments:, default_arguments:}, math_fight:{arguments:, default_arguments:}, move_child:{arguments:a, b, default_arguments:a, b}, multiply:{arguments:a, b, default_arguments:a, b}, notification:{arguments:a, b, default_arguments:a, b = False}, pi:{arguments:, default_arguments:}, print_stray_nodes:{arguments:, default_arguments:}, print_tree:{arguments:, default_arguments:}, print_tree_pretty:{arguments:, default_arguments:}, propagate_call:{arguments:a, b, c, default_arguments:a, b = [], c = False}, propagate_notification:{arguments:a, default_arguments:a}, property_list_changed_notify:{arguments:, default_arguments:}, queue_free:{arguments:, default_arguments:}, raise:{arguments:, default_arguments:}, remove_and_skip:{arguments:, default_arguments:}, remove_child:{arguments:a, default_arguments:a}, remove_from_group:{arguments:a, default_arguments:a}, remove_meta:{arguments:a, default_arguments:a}, replace_by:{arguments:a, b, default_arguments:a, b = False}, request_ready:{arguments:, default_arguments:}, rpc:{arguments:a, default_arguments:a}, rpc_config:{arguments:a, b, default_arguments:a, b}, rpc_id:{arguments:a, b, default_arguments:a, b}, rpc_unreliable:{arguments:a, default_arguments:a}, rpc_unreliable_id:{arguments:a, b, default_arguments:a, b}, rset:{arguments:a, b, default_arguments:a, b}, rset_config:{arguments:a, b, default_arguments:a, b}, rset_id:{arguments:a, b, c, default_arguments:a, b, c}, rset_unreliable:{arguments:a, b, default_arguments:a, b}, rset_unreliable_id:{arguments:a, b, c, default_arguments:a, b, c}, set:{arguments:a, b, default_arguments:a, b}, set_block_signals:{arguments:a, default_arguments:a}, set_custom_multiplayer:{arguments:a, default_arguments:a}, set_deferred:{arguments:a, b, default_arguments:a, b}, set_display_folded:{arguments:a, default_arguments:a}, set_filename:{arguments:a, default_arguments:a}, set_indexed:{arguments:a, b, default_arguments:a, b}, set_message_translation:{arguments:a, default_arguments:a}, set_meta:{arguments:a, b, default_arguments:a, b}, set_name:{arguments:a, default_arguments:a}, set_network_master:{arguments:a, b, default_arguments:a, b = True}, set_owner:{arguments:a, default_arguments:a}, set_pause_mode:{arguments:a, default_arguments:a}, set_physics_process:{arguments:a, default_arguments:a}, set_physics_process_internal:{arguments:a, default_arguments:a}, set_process:{arguments:a, default_arguments:a}, set_process_input:{arguments:a, default_arguments:a}, set_process_internal:{arguments:a, default_arguments:a}, set_process_priority:{arguments:a, default_arguments:a}, set_process_unhandled_input:{arguments:a, default_arguments:a}, set_process_unhandled_key_input:{arguments:a, default_arguments:a}, set_scene_instance_load_placeholder:{arguments:a, default_arguments:a}, set_script:{arguments:a, default_arguments:a}, subtract:{arguments:a, b, default_arguments:a, b}, sum:{arguments:a, default_arguments:a}, to_string:{arguments:, default_arguments:}, tr:{arguments:a, default_arguments:a}, update_configuration_warning:{arguments:, default_arguments:}}",
"context": "Then they do not share resources",
"expected": "|Dictionary| {_enter_tree:{arguments:, default_arguments:}, _exit_tree:{arguments:, default_arguments:}, _get:{arguments:a, default_arguments:a}, _get_configuration_warning:{arguments:, default_arguments:}, _get_editor_description:{arguments:, default_arguments:}, _get_import_path:{arguments:, default_arguments:}, _get_property_list:{arguments:, default_arguments:}, _init:{arguments:, default_arguments:}, _input:{arguments:a, default_arguments:a}, _notification:{arguments:a, default_arguments:a}, _physics_process:{arguments:a, default_arguments:a}, _process:{arguments:a, default_arguments:a}, _ready:{arguments:, default_arguments:}, _set:{arguments:a, b, default_arguments:a, b}, _set_editor_description:{arguments:a, default_arguments:a}, _set_import_path:{arguments:a, default_arguments:a}, _to_string:{arguments:, default_arguments:}, _unhandled_input:{arguments:a, default_arguments:a}, _unhandled_key_input:{arguments:a, default_arguments:a}, add:{arguments:a, b, default_arguments:a, b}, add_child:{arguments:a, b, default_arguments:a, b = False}, add_child_below_node:{arguments:a, b, c, default_arguments:a, b, c = False}, add_to_group:{arguments:a, b, default_arguments:a, b = False}, add_user_signal:{arguments:a, b, default_arguments:a, b = []}, call:{arguments:a, default_arguments:a}, call_deferred:{arguments:a, default_arguments:a}, callv:{arguments:a, b, default_arguments:a, b}, can_process:{arguments:, default_arguments:}, can_translate_messages:{arguments:, default_arguments:}, connect:{arguments:a, b, c, d, e, default_arguments:a, b, c, d = [], e = 0}, disconnect:{arguments:a, b, c, default_arguments:a, b, c}, divide:{arguments:a, b, default_arguments:a, b}, duplicate:{arguments:a, default_arguments:a = 15}, emit_signal:{arguments:a, default_arguments:a}, find_node:{arguments:a, b, c, default_arguments:a, b = True, c = True}, find_parent:{arguments:a, default_arguments:a}, free:{arguments:, default_arguments:}, get:{arguments:a, default_arguments:a}, get_child:{arguments:a, default_arguments:a}, get_child_count:{arguments:, default_arguments:}, get_children:{arguments:, default_arguments:}, get_class:{arguments:, default_arguments:}, get_custom_multiplayer:{arguments:, default_arguments:}, get_filename:{arguments:, default_arguments:}, get_groups:{arguments:, default_arguments:}, get_incoming_connections:{arguments:, default_arguments:}, get_index:{arguments:, default_arguments:}, get_indexed:{arguments:a, default_arguments:a}, get_instance_id:{arguments:, default_arguments:}, get_meta:{arguments:a, default_arguments:a}, get_meta_list:{arguments:, default_arguments:}, get_method_list:{arguments:, default_arguments:}, get_multiplayer:{arguments:, default_arguments:}, get_name:{arguments:, default_arguments:}, get_network_master:{arguments:, default_arguments:}, get_node:{arguments:a, default_arguments:a}, get_node_and_resource:{arguments:a, default_arguments:a}, get_node_or_null:{arguments:a, default_arguments:a}, get_owner:{arguments:, default_arguments:}, get_parent:{arguments:, default_arguments:}, get_path:{arguments:, default_arguments:}, get_path_to:{arguments:a, default_arguments:a}, get_pause_mode:{arguments:, default_arguments:}, get_physics_process_delta_time:{arguments:, default_arguments:}, get_position_in_parent:{arguments:, default_arguments:}, get_process_delta_time:{arguments:, default_arguments:}, get_process_priority:{arguments:, default_arguments:}, get_property_list:{arguments:, default_arguments:}, get_scene_instance_load_placeholder:{arguments:, default_arguments:}, get_script:{arguments:, default_arguments:}, get_signal_connection_list:{arguments:a, default_arguments:a}, get_signal_list:{arguments:, default_arguments:}, get_tree:{arguments:, default_arguments:}, get_viewport:{arguments:, default_arguments:}, has_meta:{arguments:a, default_arguments:a}, has_method:{arguments:a, default_arguments:a}, has_node:{arguments:a, default_arguments:a}, has_node_and_resource:{arguments:a, default_arguments:a}, has_signal:{arguments:a, default_arguments:a}, has_user_signal:{arguments:a, default_arguments:a}, is_a_parent_of:{arguments:a, default_arguments:a}, is_blocking_signals:{arguments:, default_arguments:}, is_class:{arguments:a, default_arguments:a}, is_connected:{arguments:a, b, c, default_arguments:a, b, c}, is_displayed_folded:{arguments:, default_arguments:}, is_greater_than:{arguments:a, default_arguments:a}, is_in_group:{arguments:a, default_arguments:a}, is_inside_tree:{arguments:, default_arguments:}, is_network_master:{arguments:, default_arguments:}, is_physics_processing:{arguments:, default_arguments:}, is_physics_processing_internal:{arguments:, default_arguments:}, is_processing:{arguments:, default_arguments:}, is_processing_input:{arguments:, default_arguments:}, is_processing_internal:{arguments:, default_arguments:}, is_processing_unhandled_input:{arguments:, default_arguments:}, is_processing_unhandled_key_input:{arguments:, default_arguments:}, is_queued_for_deletion:{arguments:, default_arguments:}, math_fight:{arguments:, default_arguments:}, move_child:{arguments:a, b, default_arguments:a, b}, multiply:{arguments:a, b, default_arguments:a, b}, notification:{arguments:a, b, default_arguments:a, b = False}, pi:{arguments:, default_arguments:}, print_stray_nodes:{arguments:, default_arguments:}, print_tree:{arguments:, default_arguments:}, print_tree_pretty:{arguments:, default_arguments:}, propagate_call:{arguments:a, b, c, default_arguments:a, b = [], c = False}, propagate_notification:{arguments:a, default_arguments:a}, property_list_changed_notify:{arguments:, default_arguments:}, queue_free:{arguments:, default_arguments:}, raise:{arguments:, default_arguments:}, remove_and_skip:{arguments:, default_arguments:}, remove_child:{arguments:a, default_arguments:a}, remove_from_group:{arguments:a, default_arguments:a}, remove_meta:{arguments:a, default_arguments:a}, replace_by:{arguments:a, b, default_arguments:a, b = False}, request_ready:{arguments:, default_arguments:}, rpc:{arguments:a, default_arguments:a}, rpc_config:{arguments:a, b, default_arguments:a, b}, rpc_id:{arguments:a, b, default_arguments:a, b}, rpc_unreliable:{arguments:a, default_arguments:a}, rpc_unreliable_id:{arguments:a, b, default_arguments:a, b}, rset:{arguments:a, b, default_arguments:a, b}, rset_config:{arguments:a, b, default_arguments:a, b}, rset_id:{arguments:a, b, c, default_arguments:a, b, c}, rset_unreliable:{arguments:a, b, default_arguments:a, b}, rset_unreliable_id:{arguments:a, b, c, default_arguments:a, b, c}, set:{arguments:a, b, default_arguments:a, b}, set_block_signals:{arguments:a, default_arguments:a}, set_custom_multiplayer:{arguments:a, default_arguments:a}, set_deferred:{arguments:a, b, default_arguments:a, b}, set_display_folded:{arguments:a, default_arguments:a}, set_filename:{arguments:a, default_arguments:a}, set_indexed:{arguments:a, b, default_arguments:a, b}, set_message_translation:{arguments:a, default_arguments:a}, set_meta:{arguments:a, b, default_arguments:a, b}, set_name:{arguments:a, default_arguments:a}, set_network_master:{arguments:a, b, default_arguments:a, b = True}, set_owner:{arguments:a, default_arguments:a}, set_pause_mode:{arguments:a, default_arguments:a}, set_physics_process:{arguments:a, default_arguments:a}, set_physics_process_internal:{arguments:a, default_arguments:a}, set_process:{arguments:a, default_arguments:a}, set_process_input:{arguments:a, default_arguments:a}, set_process_internal:{arguments:a, default_arguments:a}, set_process_priority:{arguments:a, default_arguments:a}, set_process_unhandled_input:{arguments:a, default_arguments:a}, set_process_unhandled_key_input:{arguments:a, default_arguments:a}, set_scene_instance_load_placeholder:{arguments:a, default_arguments:a}, set_script:{arguments:a, default_arguments:a}, subtract:{arguments:a, b, default_arguments:a, b}, sum:{arguments:a, default_arguments:a}, to_string:{arguments:, default_arguments:}, tr:{arguments:a, default_arguments:a}, update_configuration_warning:{arguments:, default_arguments:}} != |Dictionary| {_enter_tree:{arguments:, default_arguments:}, _exit_tree:{arguments:, default_arguments:}, _get:{arguments:a, default_arguments:a}, _get_configuration_warning:{arguments:, default_arguments:}, _get_editor_description:{arguments:, default_arguments:}, _get_import_path:{arguments:, default_arguments:}, _get_property_list:{arguments:, default_arguments:}, _init:{arguments:, default_arguments:}, _input:{arguments:a, default_arguments:a}, _notification:{arguments:a, default_arguments:a}, _physics_process:{arguments:a, default_arguments:a}, _process:{arguments:a, default_arguments:a}, _ready:{arguments:, default_arguments:}, _set:{arguments:a, b, default_arguments:a, b}, _set_editor_description:{arguments:a, default_arguments:a}, _set_import_path:{arguments:a, default_arguments:a}, _to_string:{arguments:, default_arguments:}, _unhandled_input:{arguments:a, default_arguments:a}, _unhandled_key_input:{arguments:a, default_arguments:a}, add:{arguments:a, b, default_arguments:a, b}, add_child:{arguments:a, b, default_arguments:a, b = False}, add_child_below_node:{arguments:a, b, c, default_arguments:a, b, c = False}, add_to_group:{arguments:a, b, default_arguments:a, b = False}, add_user_signal:{arguments:a, b, default_arguments:a, b = []}, call:{arguments:a, default_arguments:a}, call_deferred:{arguments:a, default_arguments:a}, callv:{arguments:a, b, default_arguments:a, b}, can_process:{arguments:, default_arguments:}, can_translate_messages:{arguments:, default_arguments:}, connect:{arguments:a, b, c, d, e, default_arguments:a, b, c, d = [], e = 0}, disconnect:{arguments:a, b, c, default_arguments:a, b, c}, divide:{arguments:a, b, default_arguments:a, b}, duplicate:{arguments:a, default_arguments:a = 15}, emit_signal:{arguments:a, default_arguments:a}, find_node:{arguments:a, b, c, default_arguments:a, b = True, c = True}, find_parent:{arguments:a, default_arguments:a}, free:{arguments:, default_arguments:}, get:{arguments:a, default_arguments:a}, get_child:{arguments:a, default_arguments:a}, get_child_count:{arguments:, default_arguments:}, get_children:{arguments:, default_arguments:}, get_class:{arguments:, default_arguments:}, get_custom_multiplayer:{arguments:, default_arguments:}, get_filename:{arguments:, default_arguments:}, get_groups:{arguments:, default_arguments:}, get_incoming_connections:{arguments:, default_arguments:}, get_index:{arguments:, default_arguments:}, get_indexed:{arguments:a, default_arguments:a}, get_instance_id:{arguments:, default_arguments:}, get_meta:{arguments:a, default_arguments:a}, get_meta_list:{arguments:, default_arguments:}, get_method_list:{arguments:, default_arguments:}, get_multiplayer:{arguments:, default_arguments:}, get_name:{arguments:, default_arguments:}, get_network_master:{arguments:, default_arguments:}, get_node:{arguments:a, default_arguments:a}, get_node_and_resource:{arguments:a, default_arguments:a}, get_node_or_null:{arguments:a, default_arguments:a}, get_owner:{arguments:, default_arguments:}, get_parent:{arguments:, default_arguments:}, get_path:{arguments:, default_arguments:}, get_path_to:{arguments:a, default_arguments:a}, get_pause_mode:{arguments:, default_arguments:}, get_physics_process_delta_time:{arguments:, default_arguments:}, get_position_in_parent:{arguments:, default_arguments:}, get_process_delta_time:{arguments:, default_arguments:}, get_process_priority:{arguments:, default_arguments:}, get_property_list:{arguments:, default_arguments:}, get_scene_instance_load_placeholder:{arguments:, default_arguments:}, get_script:{arguments:, default_arguments:}, get_signal_connection_list:{arguments:a, default_arguments:a}, get_signal_list:{arguments:, default_arguments:}, get_tree:{arguments:, default_arguments:}, get_viewport:{arguments:, default_arguments:}, has_meta:{arguments:a, default_arguments:a}, has_method:{arguments:a, default_arguments:a}, has_node:{arguments:a, default_arguments:a}, has_node_and_resource:{arguments:a, default_arguments:a}, has_signal:{arguments:a, default_arguments:a}, has_user_signal:{arguments:a, default_arguments:a}, is_a_parent_of:{arguments:a, default_arguments:a}, is_blocking_signals:{arguments:, default_arguments:}, is_class:{arguments:a, default_arguments:a}, is_connected:{arguments:a, b, c, default_arguments:a, b, c}, is_displayed_folded:{arguments:, default_arguments:}, is_greater_than:{arguments:a, default_arguments:a}, is_in_group:{arguments:a, default_arguments:a}, is_inside_tree:{arguments:, default_arguments:}, is_network_master:{arguments:, default_arguments:}, is_physics_processing:{arguments:, default_arguments:}, is_physics_processing_internal:{arguments:, default_arguments:}, is_processing:{arguments:, default_arguments:}, is_processing_input:{arguments:, default_arguments:}, is_processing_internal:{arguments:, default_arguments:}, is_processing_unhandled_input:{arguments:, default_arguments:}, is_processing_unhandled_key_input:{arguments:, default_arguments:}, is_queued_for_deletion:{arguments:, default_arguments:}, math_fight:{arguments:, default_arguments:}, move_child:{arguments:a, b, default_arguments:a, b}, multiply:{arguments:a, b, default_arguments:a, b}, notification:{arguments:a, b, default_arguments:a, b = False}, pi:{arguments:, default_arguments:}, print_stray_nodes:{arguments:, default_arguments:}, print_tree:{arguments:, default_arguments:}, print_tree_pretty:{arguments:, default_arguments:}, propagate_call:{arguments:a, b, c, default_arguments:a, b = [], c = False}, propagate_notification:{arguments:a, default_arguments:a}, property_list_changed_notify:{arguments:, default_arguments:}, queue_free:{arguments:, default_arguments:}, raise:{arguments:, default_arguments:}, remove_and_skip:{arguments:, default_arguments:}, remove_child:{arguments:a, default_arguments:a}, remove_from_group:{arguments:a, default_arguments:a}, remove_meta:{arguments:a, default_arguments:a}, replace_by:{arguments:a, b, default_arguments:a, b = False}, request_ready:{arguments:, default_arguments:}, rpc:{arguments:a, default_arguments:a}, rpc_config:{arguments:a, b, default_arguments:a, b}, rpc_id:{arguments:a, b, default_arguments:a, b}, rpc_unreliable:{arguments:a, default_arguments:a}, rpc_unreliable_id:{arguments:a, b, default_arguments:a, b}, rset:{arguments:a, b, default_arguments:a, b}, rset_config:{arguments:a, b, default_arguments:a, b}, rset_id:{arguments:a, b, c, default_arguments:a, b, c}, rset_unreliable:{arguments:a, b, default_arguments:a, b}, rset_unreliable_id:{arguments:a, b, c, default_arguments:a, b, c}, set:{arguments:a, b, default_arguments:a, b}, set_block_signals:{arguments:a, default_arguments:a}, set_custom_multiplayer:{arguments:a, default_arguments:a}, set_deferred:{arguments:a, b, default_arguments:a, b}, set_display_folded:{arguments:a, default_arguments:a}, set_filename:{arguments:a, default_arguments:a}, set_indexed:{arguments:a, b, default_arguments:a, b}, set_message_translation:{arguments:a, default_arguments:a}, set_meta:{arguments:a, b, default_arguments:a, b}, set_name:{arguments:a, default_arguments:a}, set_network_master:{arguments:a, b, default_arguments:a, b = True}, set_owner:{arguments:a, default_arguments:a}, set_pause_mode:{arguments:a, default_arguments:a}, set_physics_process:{arguments:a, default_arguments:a}, set_physics_process_internal:{arguments:a, default_arguments:a}, set_process:{arguments:a, default_arguments:a}, set_process_input:{arguments:a, default_arguments:a}, set_process_internal:{arguments:a, default_arguments:a}, set_process_priority:{arguments:a, default_arguments:a}, set_process_unhandled_input:{arguments:a, default_arguments:a}, set_process_unhandled_key_input:{arguments:a, default_arguments:a}, set_scene_instance_load_placeholder:{arguments:a, default_arguments:a}, set_script:{arguments:a, default_arguments:a}, subtract:{arguments:a, b, default_arguments:a, b}, sum:{arguments:a, default_arguments:a}, to_string:{arguments:, default_arguments:}, tr:{arguments:a, default_arguments:a}, update_configuration_warning:{arguments:, default_arguments:}}",
"success": true
} ],
"context": "When we create two of it for the same script",
"fullname": "test_When_we_create_two_of_it_for_the_same_script",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|Object| [Node:5378] is equal to |Object| [Node:5378]",
"context": "Then we get the same double back",
"expected": "|Object| [Node:5378] is equal to |Object| [Node:5378]",
"success": true
} ],
"context": "When we call the double the second time",
"fullname": "test_When_we_call_double_a_second_time_on",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Reference:5385] is instance of class: [GDScript:1564]",
"context": "Then we get that inner class back",
"expected": "[Reference:5385] is instance of class: [GDScript:1564]",
"success": true
} ],
"context": "When we double an inner class",
"fullname": "test_When_we_double_an_inner_class",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 3,
"path": "res://tests/integration/script_director.test.gd",
"source": {
"containers": [ "res://tests/integration", "res://tests" ],
"method": "",
"path": "res://tests/integration/script_director.test.gd",
"tags": [  ],
"test": ExtResource( 13 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 3
}, {
"context": "Given a Test Double",
"methods": [ {
"assertions": [ {
"actual": "|String| Jackie is equal to |String| Jackie",
"context": "Then we can double the object successfully",
"expected": "|String| Jackie is equal to |String| Jackie",
"success": true
} ],
"context": "When we pass in dependecies on double",
"fullname": "test_When_we_pass_in_deps_on_double",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "(1, 1) is builtin: Vector2",
"context": "Then we can call methods on it",
"expected": "(1, 1) is builtin: Vector2",
"success": true
} ],
"context": "When we double an inner class",
"fullname": "test_When_we_double_an_inner_class",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "method: add was called with arguments: [10, 10]",
"context": "Then we can see that it was called with those arguments",
"expected": "method: add was called with arguments: [10, 10]",
"success": true
} ],
"context": "When we pass arguments to a method call that we are spying on",
"fullname": "test_When_we_pass_arguments_to_a_method_call_that_we_are_spying_on",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|float| 6.283185 is equal to |float| 6.283185",
"context": "Then we can call the static methods of that inner double",
"expected": "|float| 6.283185 is equal to |float| 6.283185",
"success": true
} ],
"context": "When we add an doubled inner class to it",
"fullname": "test_When_we_add_a_doubled_inner_class_to_it",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 9999 is equal to |int| 9999",
"context": "Then it returns the corresponding value when the partial pattern matches",
"expected": "|int| 9999 is equal to |int| 9999",
"success": true
} ],
"context": "When we call a method that was stubbed with a partial (ie using any()) argument pattern",
"fullname": "test_When_we_call_a_method_that_was_stubbed_with_a_partial_argument_pattern",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "add was called",
"context": "Then we can see that it was called at least once",
"expected": "add was called",
"success": true
} ],
"context": "When we call a method that we are spying on",
"fullname": "test_When_we_call_a_method_that_we_are_spying_on",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 4 is equal to |int| 4",
"context": "Then we get the correct result",
"expected": "|int| 4 is equal to |int| 4",
"success": true
} ],
"context": "When we call an add(x, y) method that we haven't directed",
"fullname": "test_When_we_call_an_add_method_that_we_have_not_directed",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|null| Null == null",
"context": "Then we get the stubbed value back",
"expected": "|null| Null == null",
"success": true
} ],
"context": "When we stub a method of a doubled inner class",
"fullname": "test_When_we_stub_a_method_of_a_double_inner_class",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 99 is equal to |int| 99",
"context": "Then it affects the state of the double",
"expected": "|int| 99 is equal to |int| 99",
"success": true
} ],
"context": "When we pass a funcref as a subcall",
"fullname": "test_When_we_pass_a_funcref_as_a_subcall",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|Array| [10, 5] is equal to |Array| [10, 5]",
"context": "Then it returns a value",
"expected": "|Array| [10, 5] is equal to |Array| [10, 5]",
"success": true
} ],
"context": "When we pass an Object with a call_func function",
"fullname": "test_When_we_pass_an_object_with_callfunc_method_as_a_subcall",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 9999 is equal to |int| 9999",
"context": "Then it returns the corresponding value when the pattern matches",
"expected": "|int| 9999 is equal to |int| 9999",
"success": true
} ],
"context": "When we call a method that was stubbed with an argument pattern that includes a non-primitive object",
"fullname": "test_When_we_call_a_method_that_was_stubbed_with_an_argument_pattern_that_includes_a_non_primitive_object",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|null| Null == null",
"context": "Then we get null",
"expected": "|null| Null == null",
"success": true
} ],
"context": "When we call a method that we have dummied",
"fullname": "test_When_we_call_a_method_that_we_have_dummied",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 99 is equal to |int| 99",
"context": "Then it returns a value",
"expected": "|int| 99 is equal to |int| 99",
"success": true
} ],
"context": "When we pass a funcref as a subcall that returns",
"fullname": "test_When_we_pass_a_funcref_as_a_subcall_that_returns_a_value",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then it returns true",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we call a method that we have stubbed to return true",
"fullname": "test_When_we_call_a_method_that_we_have_stubbed_to_return_true",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|Object| [Node:5488] is equal to |Object| [Node:5488]",
"context": "Then it returns that same node",
"expected": "|Object| [Node:5488] is equal to |Object| [Node:5488]",
"success": true
} ],
"context": "When we call a method that we have stubbed to return a node",
"fullname": "test_When_we_call_a_method_that_we_have_stubbed_to_return_a_node",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|String| Jackie is equal to |String| Jackie",
"context": "Then we can double the object successfully",
"expected": "|String| Jackie is equal to |String| Jackie",
"success": true
} ],
"context": "When we pass in dependecies on direct",
"fullname": "test_When_we_pass_in_deps_on_direct",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 100 is equal to |int| 100",
"context": "Then it returns the default stubbed value when the arguments don't match any pattern",
"expected": "|int| 100 is equal to |int| 100",
"success": true
}, {
"actual": "|int| 1000 is equal to |int| 1000",
"context": "Then it returns the the corresponding value to the pattern the arguments matched",
"expected": "|int| 1000 is equal to |int| 1000",
"success": true
} ],
"context": "When we call a method that was stubbed to return different values based on argument patterns",
"fullname": "test_When_we_call_a_method_that_was_stubbed_to_return_different_values_based_on_argument_patterns",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|bool| True is equal to |bool| True",
"context": "Then we can call it",
"expected": "|bool| True is equal to |bool| True",
"success": true
} ],
"context": "When we stubbed a keyworded method by passing in the correct keyword",
"fullname": "test_When_we_stubbed_a_keyword_method_by_passing_in_the_correct_keyword",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 4 is equal to |int| 4",
"context": "Then it calls its super implementation by default",
"expected": "|int| 4 is equal to |int| 4",
"success": true
}, {
"actual": "|int| 9999 is equal to |int| 9999",
"context": "Then it does not call its super implementation when arguments patterns match a different return value",
"expected": "|int| 9999 is equal to |int| 9999",
"success": true
} ],
"context": "When we call a method that we stubbed to call its super implementation by default",
"fullname": "test_When_we_call_a_method_that_we_stubbed_to_call_its_super_implementation_by_default",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
} ],
"passed": 19,
"path": "res://tests/integration/test_double.test.gd",
"source": {
"containers": [ "res://tests/integration", "res://tests" ],
"method": "",
"path": "res://tests/integration/test_double.test.gd",
"tags": [  ],
"test": ExtResource( 14 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 19
}, {
"context": "Given a Boolean Assertion",
"methods": [ {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then it passes",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When calling asserts.is_true(true)",
"fullname": "test_when_calling_asserts_is_true",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| False == false",
"context": "Then it passes",
"expected": "|bool| False == false",
"success": true
} ],
"context": "When calling asserts.is_false(false)",
"fullname": "test_when_calling_asserts_is_false",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| True != false",
"context": "",
"expected": "|bool| True == false",
"success": false
} ],
"context": " intentional failure",
"fullname": "test_intentional_failure",
"passed": 0,
"success": false,
"time": 0.0,
"total": 1
} ],
"passed": 2,
"path": "res://tests/unit/boolean.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/boolean.test.gd",
"tags": [  ],
"test": ExtResource( 11 ),
"yield_time": 0.0
},
"success": false,
"time_taken": 0.0,
"total": 3
}, {
"context": "Given an Equality Assertion",
"methods": [ {
"assertions": [ {
"actual": "|int| 2 is equal or greater |int| 1",
"context": "Then it passes",
"expected": "|int| 2 is equal or greater |int| 1",
"success": true
} ],
"context": "When calling asserts.is_equal_or_greater_than(2, 1)",
"fullname": "test_when_calling_is_equal_or_greater_than",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 2 is greater than |int| 1",
"context": "Then it passes",
"expected": "|int| 2 is greater than |int| 1",
"success": true
} ],
"context": "When calling asserts.is_greater_than(2, 1)",
"fullname": "test_when_calling_is_greater_than",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 1 is equal to |int| 1",
"context": "Then it passes",
"expected": "|int| 1 is equal to |int| 1",
"success": true
} ],
"context": "When calling asserts.is_equal(1, 1)",
"fullname": "test_when_calling_is_equal",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 1 is less than |int| 2",
"context": "Then it passes",
"expected": "|int| 1 is less than |int| 2",
"success": true
} ],
"context": "When calling asserts.is_less_than(2, 1)",
"fullname": "test_when_calling_is_less_than",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 1 is equal or greater |int| 1",
"context": "Then it passes",
"expected": "|int| 1 is equal or greater |int| 1",
"success": true
} ],
"context": "When calling asserts.is_equal_or_greater_than(1, 1)",
"fullname": "test_when_calling_is_equal_or_greater_than_with_equal_values",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 5 is not equal to |int| 6",
"context": "Then it passes",
"expected": "|int| 5 != |int| 6",
"success": true
} ],
"context": "When callign asserts.is_not_equal(5, 6)",
"fullname": "test_when_calling_is_not_equal",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 1 is equal or less than |int| 1",
"context": "Then it passes!",
"expected": "|int| 1 is equal or less than |int| 1",
"success": true
} ],
"context": "When calling asserts.is_equal_or_less_than(1, 1)",
"fullname": "test_when_calling_is_equal_or_less_than_with_equal_values",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 7,
"path": "res://tests/unit/equality.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/equality.test.gd",
"tags": [  ],
"test": ExtResource( 8 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 7
}, {
"context": "Given A File Assertion",
"methods": [ {
"assertions": [ {
"actual": "res://somefile.gd does not exist",
"context": "Then it passes",
"expected": "res://somefile.gd does not exist",
"success": true
} ],
"context": "When calling asserts.file_does_not_exist when there is no file",
"fullname": "test_when_calling_file_does_not_exist_when_there_is_no_file",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": " does not exist",
"context": "Then it passes",
"expected": " does not exist",
"success": true
} ],
"context": "When calling asserts file does not exist when path is empty",
"fullname": "test_when_calling_file_does_not_exist_when_path_is_empty",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "res://tests/unit/file.test.gd exists",
"context": "Then it passes",
"expected": "res://tests/unit/file.test.gd exists",
"success": true
} ],
"context": "When calling asserts.file_exists when the file is this suite",
"fullname": "test_when_calling_file_exists_when_file_is_self",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 3,
"path": "res://tests/unit/file.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/file.test.gd",
"tags": [  ],
"test": ExtResource( 3 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 3
}, {
"context": "Given an Is Instance of class/type Assertion",
"methods": [ {
"assertions": [ {
"actual": "|AABB| 0, 0, 0 - 0, 0, 0 != null",
"context": "AABB is not null",
"expected": "|AABB| 0, 0, 0 - 0, 0, 0 != null",
"success": true
}, {
"actual": "0, 0, 0 - 0, 0, 0 is builtin: AABB",
"context": "Then it passes",
"expected": "0, 0, 0 - 0, 0, 0 is builtin: AABB",
"success": true
} ],
"context": "When calling asserts.is_AABB(aabb: AABB)",
"fullname": "test_when_calling_is_AABB",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|Array| [] != null",
"context": "array is not null",
"expected": "|Array| [] != null",
"success": true
}, {
"actual": "[] is builtin: Array",
"context": "Then it passes",
"expected": "[] is builtin: Array",
"success": true
} ],
"context": "When calling asserts.is_Array(array: Array)",
"fullname": "test_when_calling_is_Array",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|Transform2D| ((1, 0), (0, 1), (0, 0)) != null",
"context": "transform2D is not null",
"expected": "|Transform2D| ((1, 0), (0, 1), (0, 0)) != null",
"success": true
}, {
"actual": "((1, 0), (0, 1), (0, 0)) is builtin: Transform2D",
"context": "Then it passes",
"expected": "((1, 0), (0, 1), (0, 0)) is builtin: Transform2D",
"success": true
} ],
"context": "When calling asserts.is_Transform(transform2D: Transform2D)",
"fullname": "test_when_calling_is_Transform2D",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|Rect2| (0, 0, 0, 0) != null",
"context": "rect2 is not null",
"expected": "|Rect2| (0, 0, 0, 0) != null",
"success": true
}, {
"actual": "(0, 0, 0, 0) is builtin: Rect2",
"context": "Then it passes",
"expected": "(0, 0, 0, 0) is builtin: Rect2",
"success": true
} ],
"context": "When calling asserts.is_Rect2(rect2: Rect2)",
"fullname": "test_when_calling_is_Rect2",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|Vector3| (0, 0, 0) != null",
"context": "vec3 is not null",
"expected": "|Vector3| (0, 0, 0) != null",
"success": true
}, {
"actual": "(0, 0, 0) is builtin: Vector3",
"context": "Then it passes",
"expected": "(0, 0, 0) is builtin: Vector3",
"success": true
} ],
"context": "When calling asserts.is_Vector3(vec3: Vector3",
"fullname": "test_when_calling_is_Vector3",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|Quat| (0, 0, 0, 1) != null",
"context": "quat is not null",
"expected": "|Quat| (0, 0, 0, 1) != null",
"success": true
}, {
"actual": "(0, 0, 0, 1) is builtin: Quat",
"context": "Then it passes",
"expected": "(0, 0, 0, 1) is builtin: Quat",
"success": true
} ],
"context": "When calling asserts.is_Quat(quat: Quat)",
"fullname": "test_when_calling_is_Quat",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "{} is builtin: Dictionary",
"context": "Then it passes",
"expected": "{} is builtin: Dictionary",
"success": true
} ],
"context": "When calling asserts.is_Dictionary({})",
"fullname": "test_when_calling_is_Dictionary",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|PoolIntArray| [] != null",
"context": "ints is not null",
"expected": "|PoolIntArray| [] != null",
"success": true
}, {
"actual": "[] is builtin: PoolIntArray",
"context": "Then it passes",
"expected": "[] is builtin: PoolIntArray",
"success": true
} ],
"context": "When calling asserts.is_PoolIntArray(ints: PoolIntArray)",
"fullname": "test_when_calling_is_PoolIntArray",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|PoolByteArray| [PoolByteArray] != null",
"context": "bytes is not null",
"expected": "|PoolByteArray| [PoolByteArray] != null",
"success": true
}, {
"actual": "[PoolByteArray] is builtin: PoolByteArray",
"context": "Then it passes",
"expected": "[PoolByteArray] is builtin: PoolByteArray",
"success": true
} ],
"context": "When calling asserts.is_PoolByteArray(bytes: PoolByteArray)",
"fullname": "test_when_calling_is_PoolByteArray",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|RID| [RID] != null",
"context": "rid is not null",
"expected": "|RID| [RID] != null",
"success": true
}, {
"actual": "[RID] is builtin: RID",
"context": "Then it passes",
"expected": "[RID] is builtin: RID",
"success": true
} ],
"context": "When calling asserts.is_RID(rid: RID)",
"fullname": "test_when_calling_is_RID",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|PoolStringArray| [] != null",
"context": "strs is not null",
"expected": "|PoolStringArray| [] != null",
"success": true
}, {
"actual": "[] is builtin: PoolStringArray",
"context": "Then it passes",
"expected": "[] is builtin: PoolStringArray",
"success": true
} ],
"context": "When calling is asserts.is_PoolStringArray(strs: PoolStringArray)",
"fullname": "test_when_calling_is_PoolStringArray",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "1 is builtin: float",
"context": "Then it passes",
"expected": "1 is builtin: float",
"success": true
} ],
"context": "When calling asserts.is_float(1.0)",
"fullname": "test_when_calling_is_float",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|PoolColorArray| [PoolColorArray] != null",
"context": "colors is not null",
"expected": "|PoolColorArray| [PoolColorArray] != null",
"success": true
}, {
"actual": "[PoolColorArray] is builtin: PoolColorArray",
"context": "Then it passes",
"expected": "[PoolColorArray] is builtin: PoolColorArray",
"success": true
} ],
"context": "When calling asserts.is_PoolColorArray(colors: PoolColorArray)",
"fullname": "test_when_calling_is_PoolColorArray",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|NodePath| . != null",
"context": "@'Parent/Child' is not null",
"expected": "|NodePath| . != null",
"success": true
}, {
"actual": ". is builtin: NodePath",
"context": "Then it passes",
"expected": ". is builtin: NodePath",
"success": true
} ],
"context": "When calling asserts.is_NodePath(@'Parent/Child')",
"fullname": "test_when_calling_is_NodePath",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|PoolVector2Array| [] != null",
"context": "vec2s is not null",
"expected": "|PoolVector2Array| [] != null",
"success": true
}, {
"actual": "[] is builtin: PoolVector2Array",
"context": "Then it passes",
"expected": "[] is builtin: PoolVector2Array",
"success": true
} ],
"context": "When calling is asserts.is_PoolVector2Array(vec2s: PoolVector2Array)",
"fullname": "test_when_calling_is_PoolVector2Array",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|PoolVector3Array| [] != null",
"context": "vec3s is not null",
"expected": "|PoolVector3Array| [] != null",
"success": true
}, {
"actual": "[] is builtin: PoolVector3Array",
"context": "Then it passes",
"expected": "[] is builtin: PoolVector3Array",
"success": true
} ],
"context": "When calling is asserts.is_PoolVector3Array(vec3s: PoolVector3Array)",
"fullname": "test_when_calling_is_PoolVector3Array",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|Transform| 1, 0, 0, 0, 1, 0, 0, 0, 1 - 0, 0, 0 != null",
"context": "transform is not null",
"expected": "|Transform| 1, 0, 0, 0, 1, 0, 0, 0, 1 - 0, 0, 0 != null",
"success": true
}, {
"actual": "1, 0, 0, 0, 1, 0, 0, 0, 1 - 0, 0, 0 is builtin: Transform",
"context": "Then it passes",
"expected": "1, 0, 0, 0, 1, 0, 0, 0, 1 - 0, 0, 0 is builtin: Transform",
"success": true
} ],
"context": "When calling asserts.is_Transform(transform: Transform)",
"fullname": "test_when_calling_is_Transform",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|String|  != null",
"context": "strs is not null",
"expected": "|String|  != null",
"success": true
}, {
"actual": " is builtin: String",
"context": "Then it passes",
"expected": " is builtin: String",
"success": true
} ],
"context": "When calling asserts.is_string(strs: String)",
"fullname": "test_when_calling_is_string",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|Basis| ((1, 0, 0), (0, 1, 0), (0, 0, 1)) != null",
"context": "basis is not null",
"expected": "|Basis| ((1, 0, 0), (0, 1, 0), (0, 0, 1)) != null",
"success": true
}, {
"actual": "((1, 0, 0), (0, 1, 0), (0, 0, 1)) is builtin: Basis",
"context": "Then it passes",
"expected": "((1, 0, 0), (0, 1, 0), (0, 0, 1)) is builtin: Basis",
"success": true
} ],
"context": "When calling asserts.is_basis(basis: Basis",
"fullname": "test_when_calling_is_Basis",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|Plane| 0, 0, 0, 0 != null",
"context": "plane is not null",
"expected": "|Plane| 0, 0, 0, 0 != null",
"success": true
}, {
"actual": "0, 0, 0, 0 is builtin: Plane",
"context": "then it passes",
"expected": "0, 0, 0, 0 is builtin: Plane",
"success": true
} ],
"context": "When calling asserts.is_Plane(plane: Plane())",
"fullname": "test_when_calling_is_Plane",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|Vector2| (0, 0) != null",
"context": "vec2 is not null",
"expected": "|Vector2| (0, 0) != null",
"success": true
}, {
"actual": "(0, 0) is builtin: Vector2",
"context": "Then it passes",
"expected": "(0, 0) is builtin: Vector2",
"success": true
} ],
"context": "When calling asserts.is_Vector2(vec2)",
"fullname": "test_when_calling_is_Vector2",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|Object| [Node:5588] != null",
"context": "node is not null",
"expected": "|Object| [Node:5588] != null",
"success": true
}, {
"actual": "[Node:5588] is builtin: Object",
"context": "An instance of node is an Object",
"expected": "[Node:5588] is builtin: Object",
"success": true
} ],
"context": "When calling is asserts.object(node: Node)",
"fullname": "test_when_calling_is_object",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|PoolRealArray| [] != null",
"context": "reals is not null",
"expected": "|PoolRealArray| [] != null",
"success": true
}, {
"actual": "[] is builtin: PoolRealArray",
"context": "Then it passes",
"expected": "[] is builtin: PoolRealArray",
"success": true
} ],
"context": "When calling is asserts.is_PoolRealArray(reals: PoolRealArray)",
"fullname": "test_when_calling_is_PoolRealArray",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "True is builtin: bool",
"context": "Then it passes",
"expected": "True is builtin: bool",
"success": true
} ],
"context": "When calling asserts.is_bool(true)",
"fullname": "test_when_calling_is_bool",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "1 is builtin: int",
"context": "Then it passes",
"expected": "1 is builtin: int",
"success": true
} ],
"context": "When callign asserts.is_int(1)",
"fullname": "test_when_calling_is_int",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|Color| 0,0,0,1 != null",
"context": "color is not null",
"expected": "|Color| 0,0,0,1 != null",
"success": true
}, {
"actual": "0,0,0,1 is builtin: Color",
"context": "Then it passes",
"expected": "0,0,0,1 is builtin: Color",
"success": true
} ],
"context": "When calling asserts.is_color(color: Color)",
"fullname": "test_when_calling_is_Color",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
} ],
"passed": 26,
"path": "res://tests/unit/is_instance.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/is_instance.test.gd",
"tags": [  ],
"test": ExtResource( 6 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 26
}, {
"context": "Given an Is Not Instance of class/type Assertion",
"methods": [ {
"assertions": [ {
"actual": "Null is not builtin: Array",
"context": "Then it passes",
"expected": "Null is not builtin: Array",
"success": true
} ],
"context": "when calling asserts.is_not_Array(null)",
"fullname": "test_when_calling_is_not_Array",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Color",
"context": "Then it passes",
"expected": "Null is not builtin: Color",
"success": true
} ],
"context": "when calling asserts.is_not_Color(null)",
"fullname": "test_when_calling_is_not_Color",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: float",
"context": "Then it passes",
"expected": "Null is not builtin: float",
"success": true
} ],
"context": "when calling asserts.is_not_float(null)",
"fullname": "test_when_calling_is_not_float",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: AABB",
"context": "Then it passes",
"expected": "Null is not builtin: AABB",
"success": true
} ],
"context": "when calling asserts.is_not_AABB(null)",
"fullname": "test_when_calling_is_not_AABB",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Basis",
"context": "Then it passes",
"expected": "Null is not builtin: Basis",
"success": true
} ],
"context": "when calling asserts.is_not_Basis(null)",
"fullname": "test_when_calling_is_not_Basis",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: int",
"context": "Then it passes",
"expected": "Null is not builtin: int",
"success": true
} ],
"context": "when calling asserts.is_not_int(null)",
"fullname": "test_when_calling_is_not_int",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: bool",
"context": "Then it passes",
"expected": "Null is not builtin: bool",
"success": true
} ],
"context": "when calling asserts.is_not_bool(null)",
"fullname": "test_when_calling_is_not_bool",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Dictionary",
"context": "Then it passes",
"expected": "Null is not builtin: Dictionary",
"success": true
} ],
"context": "when calling asserts.is_not_Dictionary(null)",
"fullname": "test_when_calling_is_not_Dictionary",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: NodePath",
"context": "Then it passes",
"expected": "Null is not builtin: NodePath",
"success": true
} ],
"context": "when calling asserts.is_not_NodePath(null)",
"fullname": "test_when_calling_is_not_NodePath",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Object",
"context": "Then it passes",
"expected": "Null is not builtin: Object",
"success": true
} ],
"context": "when calling asserts.is_not_Object(null)",
"fullname": "test_when_calling_is_not_Object",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: PoolStringArray",
"context": "Then it passes",
"expected": "Null is not builtin: PoolStringArray",
"success": true
} ],
"context": "when calling asserts.is_not_PoolStringArray(null)",
"fullname": "test_when_calling_is_not_PoolStringArray",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Quat",
"context": "Then it passes",
"expected": "Null is not builtin: Quat",
"success": true
} ],
"context": "when calling asserts.is_not_Quat(null)",
"fullname": "test_when_calling_is_not_Quat",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: PoolRealArray",
"context": "Then it passes",
"expected": "Null is not builtin: PoolRealArray",
"success": true
} ],
"context": "when calling asserts.is_not_PoolRealArray(null)",
"fullname": "test_when_calling_is_not_PoolRealArray",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: RID",
"context": "Then it passes",
"expected": "Null is not builtin: RID",
"success": true
} ],
"context": "when calling asserts.is_not_RID(null)",
"fullname": "test_when_calling_is_not_RID",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: PoolIntArray",
"context": "Then it passes",
"expected": "Null is not builtin: PoolIntArray",
"success": true
} ],
"context": "when calling asserts.is_not_PoolIntArray(null)",
"fullname": "test_when_calling_is_not_PoolIntArray",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Vector2",
"context": "Then it passes",
"expected": "Null is not builtin: Vector2",
"success": true
} ],
"context": "when calling asserts.is_not_Vector2(null)",
"fullname": "test_when_calling_is_not_Vector2",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Transform",
"context": "Then it passes",
"expected": "Null is not builtin: Transform",
"success": true
} ],
"context": "when calling asserts.is_not_Transform(null)",
"fullname": "test_when_calling_is_not_Transform",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: String",
"context": "Then it passes",
"expected": "Null is not builtin: String",
"success": true
} ],
"context": "when calling asserts.is_not_String(null)",
"fullname": "test_when_calling_is_not_String",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: PoolVector2Array",
"context": "Then it passes",
"expected": "Null is not builtin: PoolVector2Array",
"success": true
} ],
"context": "when calling asserts.is_not_PoolVector2Array(null)",
"fullname": "test_when_calling_is_not_PoolVector2Array",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: PoolVector3Array",
"context": "Then it passes",
"expected": "Null is not builtin: PoolVector3Array",
"success": true
} ],
"context": "when calling asserts.is_not_PoolVector3Array(null)",
"fullname": "test_when_calling_is_not_PoolVector3Array",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Plane",
"context": "Then it passes",
"expected": "Null is not builtin: Plane",
"success": true
} ],
"context": "when calling asserts.is_not_Plane(null)",
"fullname": "test_when_calling_is_not_Plane",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Transform2D",
"context": "Then it passes",
"expected": "Null is not builtin: Transform2D",
"success": true
} ],
"context": "when calling asserts.is_not_Transform2D(null)",
"fullname": "test_when_calling_is_not_Transform2D",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: PoolColorArray",
"context": "Then it passes",
"expected": "Null is not builtin: PoolColorArray",
"success": true
} ],
"context": "when calling asserts.is_not_PoolColorArray(null)",
"fullname": "test_when_calling_is_not_PoolColorArray",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Vector3",
"context": "Then it passes",
"expected": "Null is not builtin: Vector3",
"success": true
} ],
"context": "when calling asserts.is_not_Vector3(null)",
"fullname": "test_when_calling_is_not_Vector3",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: PoolByteArray",
"context": "Then it passes",
"expected": "Null is not builtin: PoolByteArray",
"success": true
} ],
"context": "when calling asserts.is_not_PoolByteArray(null)",
"fullname": "test_when_calling_is_not_PoolByteArray",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Rect2",
"context": "Then it passes",
"expected": "Null is not builtin: Rect2",
"success": true
} ],
"context": "when calling asserts.is_not_Rect2(null)",
"fullname": "test_when_calling_is_not_Rect2",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 26,
"path": "res://tests/unit/is_not_instance.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/is_not_instance.test.gd",
"tags": [  ],
"test": ExtResource( 2 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 26
}, {
"context": "Given a Null Assertion",
"methods": [ {
"assertions": [ {
"actual": "|Object| [Node:5629] != null",
"context": "Then it passes",
"expected": "|Object| [Node:5629] != null",
"success": true
} ],
"context": "When calling Node is not null",
"fullname": "test_when_calling_node_is_not_null",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|null| Null == null",
"context": "Then it passes",
"expected": "|null| Null == null",
"success": true
} ],
"context": "When calling asserts.is_null(null)",
"fullname": "test_when_calling_null_is_null",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|Object| [Deleted Object] == null",
"context": "A Freed Node is null in Engine 3.2.2 or greater",
"expected": "|Object| [Deleted Object] == null",
"success": true
} ],
"context": "When calling freed object is null",
"fullname": "test_when_calling_freed_object_is_not_null",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 3,
"path": "res://tests/unit/null.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/null.test.gd",
"tags": [  ],
"test": ExtResource( 12 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 3
}, {
"context": "Given an Object Assertion",
"methods": [ {
"assertions": [ {
"actual": "[Node:5634] does not have meta: confusing",
"context": "Then it passes",
"expected": "[Node:5634] does not have meta: confusing",
"success": true
} ],
"context": "When calling asserts.object_has_meta with real key but null val",
"fullname": "test_when_calling_does_not_have_meta_real_key_null_value_pair",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:5634] has method: title",
"context": "Then it passes",
"expected": "[Node:5634] has method: title",
"success": true
} ],
"context": "When calling has_method('title')",
"fullname": "test_when_calling_has_method_title",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:5634] has user signal: dummy_signal",
"context": "Then it passes",
"expected": "[Node:5634] has user signal: dummy_signal",
"success": true
} ],
"context": "When calling obj_has_user_signal after adding a signal",
"fullname": "test_when_calling_has_user_signal_after_adding_a_signal",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:5634] does not have user signal: false_signal",
"context": "Then it passes",
"expected": "[Node:5634] does not have user signal: false_signal",
"success": true
} ],
"context": "When calling obj_does_not_have_user_signal with fake signal",
"fullname": "test_when_calling_does_not_have_user_signal",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is freed from memory",
"context": "Then it passes",
"expected": "Null is freed from memory",
"success": true
} ],
"context": "When calling asserts.is_freed(freed_object",
"fullname": "test_when_calling_freed_object_is_freed",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:5634] has meta: dummy",
"context": "Then it passes",
"expected": "[Node:5634] has meta: dummy",
"success": true
}, {
"actual": "[Node:5634] has meta: dummy",
"context": "Then it passes",
"expected": "[Node:5634] has meta: dummy",
"success": true
} ],
"context": "When calling asserts.object_has_meta() after adding metadata",
"fullname": "test_when_calling_has_meta_after_adding_metadata",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "[Node:5645] is not freed",
"context": "Then it passes",
"expected": "[Node:5645] is not freed",
"success": true
} ],
"context": "When calling asserts.is_not_freed(unfreed_object)",
"fullname": "test_when_calling_unfreed_object_is_not_freed",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:5634] does not have meta: bad_meta",
"context": "Then it passes",
"expected": "[Node:5634] does not have meta: bad_meta",
"success": true
} ],
"context": "When calling asserts.object_does_not_have_meta()",
"fullname": "test_when_calling_does_not_have_meta",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:5648] is queued for deletion",
"context": "Then it passes",
"expected": "[Node:5648] is queued for deletion",
"success": true
} ],
"context": "When calling asserts.object_is_queued for deletion after calling queue_free",
"fullname": "test_when_calling_obj_is_queued_for_deletion_after_calling_queue_free",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:5650] is blocking signals",
"context": "Then it passes",
"expected": "[Node:5650] is blocking signals",
"success": true
} ],
"context": "When calling is blocking signals while blocking signals",
"fullname": "test_is_blocking_signals",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:5652] is not blocking signals",
"context": "Then it passes",
"expected": "[Node:5652] is not blocking signals",
"success": true
} ],
"context": "When calling is not blocking signals while not blocking signals",
"fullname": "test_is_not_blocking_signals",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:5654] is not queued for deletion",
"context": "Then it passes",
"expected": "[Node:5654] is not queued for deletion",
"success": true
} ],
"context": "When calling asserts.object_is_not_for_queued_deletion after not calling queue free()",
"fullname": "test_when_calling_obj_is_not_for_queued_deletion_after_not_calling_queue_free",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:5634].builtin_dummy is connected to [Node:5634].title",
"context": "Then it passes",
"expected": "[Node:5634].builtin_dummy is connected to [Node:5634].title",
"success": true
} ],
"context": "When calling asserts object is connected with a valid connection",
"fullname": "test_when_calling_obj_is_connected_with_a_real_connection",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:5634].builtin_dummy is not connected to [Node:5634].title",
"context": "Then it passes",
"expected": "[Node:5634].builtin_dummy is not connected to [Node:5634].title",
"success": true
} ],
"context": "When calling asserts object is not connected with an invalid connection",
"fullname": "test_when_calling_obj_is_not_connected_with_an_invalid_connection",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:5634] does not have user signal: builtin_dummy",
"context": "Then it passes",
"expected": "[Node:5634] does not have user signal: builtin_dummy",
"success": true
} ],
"context": "When calling does not have user signal with class signal",
"fullname": "test_when_calling_does_not_have_user_signal_with_class_signal_constant",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 15,
"path": "res://tests/unit/object.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/object.test.gd",
"tags": [  ],
"test": ExtResource( 7 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 15
}, {
"context": "Given the Addition Operator",
"methods": [ {
"assertions": [ {
"actual": "|int| 4 is equal to |int| 4",
"context": "",
"expected": "|int| 4 is equal to |int| 4",
"success": true
} ],
"context": "When we add 2 to 2 we get 4",
"fullname": "test_add",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 8 is equal to |int| 8",
"context": "",
"expected": "|int| 8 is equal to |int| 8",
"success": true
} ],
"context": "When we add 5 to 3 we get 8",
"fullname": "test_add",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 13 is equal to |int| 13",
"context": "",
"expected": "|int| 13 is equal to |int| 13",
"success": true
} ],
"context": "When we add 7 to 6 we get 13",
"fullname": "test_add",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 0 is equal to |int| 0",
"context": "",
"expected": "|int| 0 is equal to |int| 0",
"success": true
} ],
"context": "When we subtract 2 from 2 we get 0",
"fullname": "test_subtract",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 2 is equal to |int| 2",
"context": "",
"expected": "|int| 2 is equal to |int| 2",
"success": true
} ],
"context": "When we subtract 5 from 3 we get 2",
"fullname": "test_subtract",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 1 is equal to |int| 1",
"context": "",
"expected": "|int| 1 is equal to |int| 1",
"success": true
} ],
"context": "When we subtract 7 from 6 we get 1",
"fullname": "test_subtract",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 6,
"path": "res://tests/unit/parameters.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/parameters.test.gd",
"tags": [  ],
"test": ExtResource( 16 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 6
}, {
"context": "Given A Range Assertion",
"methods": [ {
"assertions": [ {
"actual": "10 is not in range(0, 10)",
"context": "Then it passes",
"expected": "10 is not in range(0, 10)",
"success": true
} ],
"context": "When calling is (10) not in range (in range(0, 10)",
"fullname": "test_when_calling_is_not_in_range",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "0 is in range(0, 10)",
"context": "Then it passes",
"expected": "0 is in range(0, 10)",
"success": true
} ],
"context": "When calling is (0) in range(0, 10)",
"fullname": "test_when_calling_is_in_range",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 2,
"path": "res://tests/unit/range.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/range.test.gd",
"tags": [  ],
"test": ExtResource( 15 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 2
}, {
"context": "Given a String Assertion",
"methods": [ {
"assertions": [ {
"actual": "impsum does not begin with bleh lorem",
"context": "Then it passes",
"expected": "impsum does not begin with bleh lorem",
"success": true
} ],
"context": "When calling asserts.string_does_not_begin_with('lorem', 'impsum')",
"fullname": "test_when_calling_string_does_not_begin_with",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "lorem impsum begins with lorem",
"context": "Then it passes",
"expected": "lorem impsum begins with lorem",
"success": true
} ],
"context": "When calling asserts.string_begins_with('lorem', 'lorem impsum')",
"fullname": "test_when_calling_string_begins_with",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "lorem impsum ends with impsum",
"context": "Then it passes",
"expected": "lorem impsum ends with impsum",
"success": true
} ],
"context": "When calling asserts.string_ends_with('impsum', 'lorem impsum')",
"fullname": "test_when_calling_string_ends_with",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "impsum does not contain beem im",
"context": "Then it passes",
"expected": "impsum does not contain beem im",
"success": true
} ],
"context": "When calling asserts.string_does_not_contain('em im', 'impsum')",
"fullname": "test_when_calling_string_does_not_contain",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "lorem impsum contains em im",
"context": "Then it passes",
"expected": "lorem impsum contains em im",
"success": true
} ],
"context": "When calling asserts.string_contains('em im', 'lorem impsum')",
"fullname": "test_when_calling_string_contains",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "impsum does not end with lorem",
"context": "Then it passes",
"expected": "impsum does not end with lorem",
"success": true
} ],
"context": "When calling asserts.string_does_not_end_with('lorem', 'impsum')",
"fullname": "test_when_calling_string_does_not_end_with",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 6,
"path": "res://tests/unit/string.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/string.test.gd",
"tags": [  ],
"test": ExtResource( 9 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 6
}, {
"context": "Dummy Passing Test",
"methods": [ {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Passing!",
"expected": "|bool| True == true",
"success": true
} ],
"context": "This method passes",
"fullname": "test_this_method_passes",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 1,
"path": "res://tests/unit/suite.test.gd.DummyOne",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/suite.test.gd.DummyOne",
"tags": [  ],
"test": SubResource( 19 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 1
}, {
"context": "Dummy Test 2",
"methods": [ {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Passing!",
"expected": "|bool| True == true",
"success": true
} ],
"context": "This method passes",
"fullname": "test_this_method_passes",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 1,
"path": "res://tests/unit/suite.test.gd.DummyTwo",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/suite.test.gd.DummyTwo",
"tags": [  ],
"test": SubResource( 20 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 1
}, {
"context": "Given a Test Script",
"methods": [ {
"assertions": [ {
"actual": "|int| 10 is greater than |int| 1",
"context": "We get an array of multiple values back",
"expected": "|int| 10 is greater than |int| 1",
"success": true
}, {
"actual": "|int| 0 is not equal to |int| 9",
"context": "With different values",
"expected": "|int| 0 != |int| 9",
"success": true
}, {
"actual": "|int| 10 is greater than |int| 1",
"context": "And we can track multiple properties",
"expected": "|int| 10 is greater than |int| 1",
"success": true
} ],
"context": "When we record properties",
"fullname": "test_we_can_record_properties",
"passed": 3,
"success": true,
"time": 0.0,
"total": 3
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "if the test didn't break this works",
"expected": "|bool| True == true",
"success": true
} ],
"context": " we can omit describe",
"fullname": "test_we_can_omit_describe",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|int| 2 is equal to |int| 2",
"context": "",
"expected": "|int| 2 is equal to |int| 2",
"success": true
} ],
"context": " when we omit context we can see expected and got under method",
"fullname": "test_when_we_omit_context_we_can_see_expected_and_got_under_method",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
} ],
"passed": 3,
"path": "res://tests/unit/test.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/test.test.gd",
"tags": [  ],
"test": ExtResource( 19 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 3
}, {
"context": "Given a Signal Watcher",
"methods": [ {
"assertions": [ {
"actual": "signal: multiple was emitted from [Node:5701] 2",
"context": "Then we can track how many times we emitted it",
"expected": "signal: multiple was emitted from [Node:5701] 2",
"success": true
} ],
"context": "When we watch and signal and emit it multiple times",
"fullname": "test_When_we_watch_a_signal_and_emit_it_multiple_times",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Signal: example was not emitted from [Node:5701]",
"context": "Then it does not capture the non-emitted signal",
"expected": "Signal: example was not emitted from [Node:5701]",
"success": true
} ],
"context": "When we watch and do not emit a signal",
"fullname": "test_When_we_watch_and_do_not_emit_a_signal",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Signal: example was emitted from [Node:5701] with arguments: [1, 20, 5]",
"context": "Then it captures any arguments that where passed when the signal was emitted",
"expected": "Signal: example was emitted from [Node:5701] with arguments: [1, 20, 5]",
"success": true
} ],
"context": "When we watch a signal from an object with no bound variables",
"fullname": "test_When_we_watch_a_signal_from_an_object_with_no_bound_variables",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "signal: example was emitted from [Node:5701]",
"context": "Then it captures the emitted signal",
"expected": "signal: example was emitted from [Node:5701]",
"success": true
} ],
"context": "When we watch and emit a signal",
"fullname": "test_When_we_watch_and_emit_a_signal",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 4,
"path": "res://tests/unit/watcher.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/watcher.test.gd",
"tags": [  ],
"test": ExtResource( 17 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 4
}, {
"context": "Given a Yield",
"methods": [ {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then we set var a to true",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then we set var b to true",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we yield in start twice",
"fullname": "test_When_we_yield_in_start",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then we set var c to true",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then we set var d to true",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we yield in pre thrice",
"fullname": "test_When_we_yield_in_pre",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "[100, Null, Null, Null, Null, Null] is builtin: Array",
"context": "Then we get an array",
"expected": "[100, Null, Null, Null, Null, Null] is builtin: Array",
"success": true
}, {
"actual": "|int| 6 is equal to |int| 6",
"context": "Of size 6",
"expected": "|int| 6 is equal to |int| 6",
"success": true
}, {
"actual": "|int| 100 is equal to |int| 100",
"context": "Where element 0 is 100",
"expected": "|int| 100 is equal to |int| 100",
"success": true
} ],
"context": "When yield(self.yield_value()) returns",
"fullname": "test_When_we_yield_we_get_the_return_value",
"passed": 3,
"success": true,
"time": 0.0,
"total": 3
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then yielder is unpaused",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "The timeout signal of the yielder is connected",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we call until_timeout (with 1.0)",
"fullname": "test_When_we_call_until_timeout",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then the yielder is unpaused",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then the timeout signal of the yielder is connected",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then our signal is connected to the yielder",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we call until signal",
"fullname": "test_When_we_call_until_signal",
"passed": 3,
"success": true,
"time": 0.0,
"total": 3
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then yielder is not active",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When asserting against a test",
"fullname": "test_Yielder_is_not_active_when_asserting",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then we set var e to true",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then we set var f to true",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we yield twice in execute",
"fullname": "test_When_we_yield_in_execute",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then the timeout signal is disconnected",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then the signal-signal is disconnected",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When it is finished",
"fullname": "test_When_yielder_is_finished_signals_are_disconnected",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then the yielder is paused",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When a signal being yielded on is emitted",
"fullname": "test_When_a_signal_being_yielded_on_is_emitted_the_yielder_is_stopped",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then the yielder is paused",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "The timeout signal of the yielder is not connected",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When the yielder times out on until_timeout(0.1)",
"fullname": "test_When_the_yielder_times_out",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then the yielder is paused",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then the timeout signal of the yielder is disconnected",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then our signal to the yielder is disconnected",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When the yielder heres our signal",
"fullname": "test_When_the_yielder_hears_our_signal",
"passed": 3,
"success": true,
"time": 0.0,
"total": 3
} ],
"passed": 11,
"path": "res://tests/unit/yield.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/yield.test.gd",
"tags": [  ],
"test": ExtResource( 18 ),
"yield_time": 1.9
},
"success": true,
"time_taken": 0.0,
"total": 11
}, {
"context": "Given a Boolean Assertion",
"methods": [ {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then it passes",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When calling asserts.is_true(true)",
"fullname": "test_when_calling_asserts_is_true",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| False == false",
"context": "Then it passes",
"expected": "|bool| False == false",
"success": true
} ],
"context": "When calling asserts.is_false(false)",
"fullname": "test_when_calling_asserts_is_false",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| True != false",
"context": "",
"expected": "|bool| True == false",
"success": false
} ],
"context": " intentional failure",
"fullname": "test_intentional_failure",
"passed": 0,
"success": false,
"time": 0.0,
"total": 1
} ],
"passed": 2,
"path": "res://tests/integration/boolean.test.gd",
"source": {
"containers": [ "res://tests/integration", "res://tests" ],
"method": "",
"path": "res://tests/integration/boolean.test.gd",
"tags": [  ],
"test": ExtResource( 20 ),
"yield_time": 0.0
},
"success": false,
"time_taken": 0.0,
"total": 3
}, {
"context": "Default Args",
"methods": [ {
"assertions": [ {
"actual": "|bool| True == true",
"context": "If this method can be reached then we have doubled a script with default argument(s) properly!",
"expected": "|bool| True == true",
"success": true
} ],
"context": " default arguments of interpolate property",
"fullname": "test_default_arguments_of_interpolate_property",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 1,
"path": "res://tests/integration/default_args.test.gd",
"source": {
"containers": [ "res://tests/integration", "res://tests" ],
"method": "",
"path": "res://tests/integration/default_args.test.gd",
"tags": [  ],
"test": ExtResource( 10 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 1
}, {
"context": "Given is_on_floor",
"methods": [ {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then it can be stubbed",
"expected": "|bool| True == true",
"success": true
} ],
"context": "From a user-defined script",
"fullname": "test_stubbing_is_on_floor_method_from_user_defined_class",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then it can be stubbed",
"expected": "|bool| True == true",
"success": true
} ],
"context": "From a child node of a scene without scripts",
"fullname": "test_stubbing_is_on_floor_as_child_node_with_no_script",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then it can be stubbed",
"expected": "|bool| True == true",
"success": true
} ],
"context": "From a built-in KinematicBody2D2",
"fullname": "test_stubbing_is_on_floor_method_from_builtin_class2",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 3,
"path": "res://tests/integration/on_floor.test.gd",
"source": {
"containers": [ "res://tests/integration", "res://tests" ],
"method": "",
"path": "res://tests/integration/on_floor.test.gd",
"tags": [  ],
"test": ExtResource( 5 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 3
}, {
"context": "Given a Scene Director",
"methods": [ {
"assertions": [ {
"actual": "|NodePath| A is equal to |NodePath| A",
"context": "We have the correct NodePath Set",
"expected": "|NodePath| A is equal to |NodePath| A",
"success": true
} ],
"context": "When we add it to the tree it runs",
"fullname": "test_When_we_add_it_to_the_tree_it_runs",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 9999 is equal to |int| 9999",
"context": "Then we get the stubbed return value",
"expected": "|int| 9999 is equal to |int| 9999",
"success": true
} ],
"context": "When we call a method from the root node that we stubbed",
"fullname": "test_When_we_call_a_method_from_the_root_node_that_we_stubbed",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 999 is equal to |int| 999",
"context": "Then we get the stubbed return value",
"expected": "|int| 999 is equal to |int| 999",
"success": true
} ],
"context": "When we call a method from a child node that we stubbed",
"fullname": "test_When_we_call_a_method_from_a_child_node_that_we_stubbed",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 99 is equal to |int| 99",
"context": "Then we get the stubbed return value",
"expected": "|int| 99 is equal to |int| 99",
"success": true
} ],
"context": "When we call a method from a grandchild node that we stubbed",
"fullname": "test_When_we_call_a_method_from_a_grandchild_node_that_we_stubbed",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|Dictionary| {.:[Reference:5967], A:[Reference:5968], A/B:[Reference:5970], C:[Reference:5969], C/D:[Reference:5971]} is not equal to |Dictionary| {.:[Reference:5981], A:[Reference:5982], A/B:[Reference:5984], C:[Reference:5983], C/D:[Reference:5985]}",
"context": "Then they do not share resources",
"expected": "|Dictionary| {.:[Reference:5967], A:[Reference:5968], A/B:[Reference:5970], C:[Reference:5969], C/D:[Reference:5971]} != |Dictionary| {.:[Reference:5981], A:[Reference:5982], A/B:[Reference:5984], C:[Reference:5983], C/D:[Reference:5985]}",
"success": true
} ],
"context": "When we create two of it for the same scene",
"fullname": "test_When_we_create_two_of_it_for_the_same_scene",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 5,
"path": "res://tests/integration/scene_director.test.gd",
"source": {
"containers": [ "res://tests/integration", "res://tests" ],
"method": "",
"path": "res://tests/integration/scene_director.test.gd",
"tags": [  ],
"test": ExtResource( 4 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 5
}, {
"context": "Given a Script Director",
"methods": [ {
"assertions": [ {
"actual": "|Dictionary| {_enter_tree:{arguments:, default_arguments:}, _exit_tree:{arguments:, default_arguments:}, _get:{arguments:a, default_arguments:a}, _get_configuration_warning:{arguments:, default_arguments:}, _get_editor_description:{arguments:, default_arguments:}, _get_import_path:{arguments:, default_arguments:}, _get_property_list:{arguments:, default_arguments:}, _init:{arguments:, default_arguments:}, _input:{arguments:a, default_arguments:a}, _notification:{arguments:a, default_arguments:a}, _physics_process:{arguments:a, default_arguments:a}, _process:{arguments:a, default_arguments:a}, _ready:{arguments:, default_arguments:}, _set:{arguments:a, b, default_arguments:a, b}, _set_editor_description:{arguments:a, default_arguments:a}, _set_import_path:{arguments:a, default_arguments:a}, _to_string:{arguments:, default_arguments:}, _unhandled_input:{arguments:a, default_arguments:a}, _unhandled_key_input:{arguments:a, default_arguments:a}, add:{arguments:a, b, default_arguments:a, b}, add_child:{arguments:a, b, default_arguments:a, b = False}, add_child_below_node:{arguments:a, b, c, default_arguments:a, b, c = False}, add_to_group:{arguments:a, b, default_arguments:a, b = False}, add_user_signal:{arguments:a, b, default_arguments:a, b = []}, call:{arguments:a, default_arguments:a}, call_deferred:{arguments:a, default_arguments:a}, callv:{arguments:a, b, default_arguments:a, b}, can_process:{arguments:, default_arguments:}, can_translate_messages:{arguments:, default_arguments:}, connect:{arguments:a, b, c, d, e, default_arguments:a, b, c, d = [], e = 0}, disconnect:{arguments:a, b, c, default_arguments:a, b, c}, divide:{arguments:a, b, default_arguments:a, b}, duplicate:{arguments:a, default_arguments:a = 15}, emit_signal:{arguments:a, default_arguments:a}, find_node:{arguments:a, b, c, default_arguments:a, b = True, c = True}, find_parent:{arguments:a, default_arguments:a}, free:{arguments:, default_arguments:}, get:{arguments:a, default_arguments:a}, get_child:{arguments:a, default_arguments:a}, get_child_count:{arguments:, default_arguments:}, get_children:{arguments:, default_arguments:}, get_class:{arguments:, default_arguments:}, get_custom_multiplayer:{arguments:, default_arguments:}, get_filename:{arguments:, default_arguments:}, get_groups:{arguments:, default_arguments:}, get_incoming_connections:{arguments:, default_arguments:}, get_index:{arguments:, default_arguments:}, get_indexed:{arguments:a, default_arguments:a}, get_instance_id:{arguments:, default_arguments:}, get_meta:{arguments:a, default_arguments:a}, get_meta_list:{arguments:, default_arguments:}, get_method_list:{arguments:, default_arguments:}, get_multiplayer:{arguments:, default_arguments:}, get_name:{arguments:, default_arguments:}, get_network_master:{arguments:, default_arguments:}, get_node:{arguments:a, default_arguments:a}, get_node_and_resource:{arguments:a, default_arguments:a}, get_node_or_null:{arguments:a, default_arguments:a}, get_owner:{arguments:, default_arguments:}, get_parent:{arguments:, default_arguments:}, get_path:{arguments:, default_arguments:}, get_path_to:{arguments:a, default_arguments:a}, get_pause_mode:{arguments:, default_arguments:}, get_physics_process_delta_time:{arguments:, default_arguments:}, get_position_in_parent:{arguments:, default_arguments:}, get_process_delta_time:{arguments:, default_arguments:}, get_process_priority:{arguments:, default_arguments:}, get_property_list:{arguments:, default_arguments:}, get_scene_instance_load_placeholder:{arguments:, default_arguments:}, get_script:{arguments:, default_arguments:}, get_signal_connection_list:{arguments:a, default_arguments:a}, get_signal_list:{arguments:, default_arguments:}, get_tree:{arguments:, default_arguments:}, get_viewport:{arguments:, default_arguments:}, has_meta:{arguments:a, default_arguments:a}, has_method:{arguments:a, default_arguments:a}, has_node:{arguments:a, default_arguments:a}, has_node_and_resource:{arguments:a, default_arguments:a}, has_signal:{arguments:a, default_arguments:a}, has_user_signal:{arguments:a, default_arguments:a}, is_a_parent_of:{arguments:a, default_arguments:a}, is_blocking_signals:{arguments:, default_arguments:}, is_class:{arguments:a, default_arguments:a}, is_connected:{arguments:a, b, c, default_arguments:a, b, c}, is_displayed_folded:{arguments:, default_arguments:}, is_greater_than:{arguments:a, default_arguments:a}, is_in_group:{arguments:a, default_arguments:a}, is_inside_tree:{arguments:, default_arguments:}, is_network_master:{arguments:, default_arguments:}, is_physics_processing:{arguments:, default_arguments:}, is_physics_processing_internal:{arguments:, default_arguments:}, is_processing:{arguments:, default_arguments:}, is_processing_input:{arguments:, default_arguments:}, is_processing_internal:{arguments:, default_arguments:}, is_processing_unhandled_input:{arguments:, default_arguments:}, is_processing_unhandled_key_input:{arguments:, default_arguments:}, is_queued_for_deletion:{arguments:, default_arguments:}, math_fight:{arguments:, default_arguments:}, move_child:{arguments:a, b, default_arguments:a, b}, multiply:{arguments:a, b, default_arguments:a, b}, notification:{arguments:a, b, default_arguments:a, b = False}, pi:{arguments:, default_arguments:}, print_stray_nodes:{arguments:, default_arguments:}, print_tree:{arguments:, default_arguments:}, print_tree_pretty:{arguments:, default_arguments:}, propagate_call:{arguments:a, b, c, default_arguments:a, b = [], c = False}, propagate_notification:{arguments:a, default_arguments:a}, property_list_changed_notify:{arguments:, default_arguments:}, queue_free:{arguments:, default_arguments:}, raise:{arguments:, default_arguments:}, remove_and_skip:{arguments:, default_arguments:}, remove_child:{arguments:a, default_arguments:a}, remove_from_group:{arguments:a, default_arguments:a}, remove_meta:{arguments:a, default_arguments:a}, replace_by:{arguments:a, b, default_arguments:a, b = False}, request_ready:{arguments:, default_arguments:}, rpc:{arguments:a, default_arguments:a}, rpc_config:{arguments:a, b, default_arguments:a, b}, rpc_id:{arguments:a, b, default_arguments:a, b}, rpc_unreliable:{arguments:a, default_arguments:a}, rpc_unreliable_id:{arguments:a, b, default_arguments:a, b}, rset:{arguments:a, b, default_arguments:a, b}, rset_config:{arguments:a, b, default_arguments:a, b}, rset_id:{arguments:a, b, c, default_arguments:a, b, c}, rset_unreliable:{arguments:a, b, default_arguments:a, b}, rset_unreliable_id:{arguments:a, b, c, default_arguments:a, b, c}, set:{arguments:a, b, default_arguments:a, b}, set_block_signals:{arguments:a, default_arguments:a}, set_custom_multiplayer:{arguments:a, default_arguments:a}, set_deferred:{arguments:a, b, default_arguments:a, b}, set_display_folded:{arguments:a, default_arguments:a}, set_filename:{arguments:a, default_arguments:a}, set_indexed:{arguments:a, b, default_arguments:a, b}, set_message_translation:{arguments:a, default_arguments:a}, set_meta:{arguments:a, b, default_arguments:a, b}, set_name:{arguments:a, default_arguments:a}, set_network_master:{arguments:a, b, default_arguments:a, b = True}, set_owner:{arguments:a, default_arguments:a}, set_pause_mode:{arguments:a, default_arguments:a}, set_physics_process:{arguments:a, default_arguments:a}, set_physics_process_internal:{arguments:a, default_arguments:a}, set_process:{arguments:a, default_arguments:a}, set_process_input:{arguments:a, default_arguments:a}, set_process_internal:{arguments:a, default_arguments:a}, set_process_priority:{arguments:a, default_arguments:a}, set_process_unhandled_input:{arguments:a, default_arguments:a}, set_process_unhandled_key_input:{arguments:a, default_arguments:a}, set_scene_instance_load_placeholder:{arguments:a, default_arguments:a}, set_script:{arguments:a, default_arguments:a}, subtract:{arguments:a, b, default_arguments:a, b}, sum:{arguments:a, default_arguments:a}, to_string:{arguments:, default_arguments:}, tr:{arguments:a, default_arguments:a}, update_configuration_warning:{arguments:, default_arguments:}} is not equal to |Dictionary| {_enter_tree:{arguments:, default_arguments:}, _exit_tree:{arguments:, default_arguments:}, _get:{arguments:a, default_arguments:a}, _get_configuration_warning:{arguments:, default_arguments:}, _get_editor_description:{arguments:, default_arguments:}, _get_import_path:{arguments:, default_arguments:}, _get_property_list:{arguments:, default_arguments:}, _init:{arguments:, default_arguments:}, _input:{arguments:a, default_arguments:a}, _notification:{arguments:a, default_arguments:a}, _physics_process:{arguments:a, default_arguments:a}, _process:{arguments:a, default_arguments:a}, _ready:{arguments:, default_arguments:}, _set:{arguments:a, b, default_arguments:a, b}, _set_editor_description:{arguments:a, default_arguments:a}, _set_import_path:{arguments:a, default_arguments:a}, _to_string:{arguments:, default_arguments:}, _unhandled_input:{arguments:a, default_arguments:a}, _unhandled_key_input:{arguments:a, default_arguments:a}, add:{arguments:a, b, default_arguments:a, b}, add_child:{arguments:a, b, default_arguments:a, b = False}, add_child_below_node:{arguments:a, b, c, default_arguments:a, b, c = False}, add_to_group:{arguments:a, b, default_arguments:a, b = False}, add_user_signal:{arguments:a, b, default_arguments:a, b = []}, call:{arguments:a, default_arguments:a}, call_deferred:{arguments:a, default_arguments:a}, callv:{arguments:a, b, default_arguments:a, b}, can_process:{arguments:, default_arguments:}, can_translate_messages:{arguments:, default_arguments:}, connect:{arguments:a, b, c, d, e, default_arguments:a, b, c, d = [], e = 0}, disconnect:{arguments:a, b, c, default_arguments:a, b, c}, divide:{arguments:a, b, default_arguments:a, b}, duplicate:{arguments:a, default_arguments:a = 15}, emit_signal:{arguments:a, default_arguments:a}, find_node:{arguments:a, b, c, default_arguments:a, b = True, c = True}, find_parent:{arguments:a, default_arguments:a}, free:{arguments:, default_arguments:}, get:{arguments:a, default_arguments:a}, get_child:{arguments:a, default_arguments:a}, get_child_count:{arguments:, default_arguments:}, get_children:{arguments:, default_arguments:}, get_class:{arguments:, default_arguments:}, get_custom_multiplayer:{arguments:, default_arguments:}, get_filename:{arguments:, default_arguments:}, get_groups:{arguments:, default_arguments:}, get_incoming_connections:{arguments:, default_arguments:}, get_index:{arguments:, default_arguments:}, get_indexed:{arguments:a, default_arguments:a}, get_instance_id:{arguments:, default_arguments:}, get_meta:{arguments:a, default_arguments:a}, get_meta_list:{arguments:, default_arguments:}, get_method_list:{arguments:, default_arguments:}, get_multiplayer:{arguments:, default_arguments:}, get_name:{arguments:, default_arguments:}, get_network_master:{arguments:, default_arguments:}, get_node:{arguments:a, default_arguments:a}, get_node_and_resource:{arguments:a, default_arguments:a}, get_node_or_null:{arguments:a, default_arguments:a}, get_owner:{arguments:, default_arguments:}, get_parent:{arguments:, default_arguments:}, get_path:{arguments:, default_arguments:}, get_path_to:{arguments:a, default_arguments:a}, get_pause_mode:{arguments:, default_arguments:}, get_physics_process_delta_time:{arguments:, default_arguments:}, get_position_in_parent:{arguments:, default_arguments:}, get_process_delta_time:{arguments:, default_arguments:}, get_process_priority:{arguments:, default_arguments:}, get_property_list:{arguments:, default_arguments:}, get_scene_instance_load_placeholder:{arguments:, default_arguments:}, get_script:{arguments:, default_arguments:}, get_signal_connection_list:{arguments:a, default_arguments:a}, get_signal_list:{arguments:, default_arguments:}, get_tree:{arguments:, default_arguments:}, get_viewport:{arguments:, default_arguments:}, has_meta:{arguments:a, default_arguments:a}, has_method:{arguments:a, default_arguments:a}, has_node:{arguments:a, default_arguments:a}, has_node_and_resource:{arguments:a, default_arguments:a}, has_signal:{arguments:a, default_arguments:a}, has_user_signal:{arguments:a, default_arguments:a}, is_a_parent_of:{arguments:a, default_arguments:a}, is_blocking_signals:{arguments:, default_arguments:}, is_class:{arguments:a, default_arguments:a}, is_connected:{arguments:a, b, c, default_arguments:a, b, c}, is_displayed_folded:{arguments:, default_arguments:}, is_greater_than:{arguments:a, default_arguments:a}, is_in_group:{arguments:a, default_arguments:a}, is_inside_tree:{arguments:, default_arguments:}, is_network_master:{arguments:, default_arguments:}, is_physics_processing:{arguments:, default_arguments:}, is_physics_processing_internal:{arguments:, default_arguments:}, is_processing:{arguments:, default_arguments:}, is_processing_input:{arguments:, default_arguments:}, is_processing_internal:{arguments:, default_arguments:}, is_processing_unhandled_input:{arguments:, default_arguments:}, is_processing_unhandled_key_input:{arguments:, default_arguments:}, is_queued_for_deletion:{arguments:, default_arguments:}, math_fight:{arguments:, default_arguments:}, move_child:{arguments:a, b, default_arguments:a, b}, multiply:{arguments:a, b, default_arguments:a, b}, notification:{arguments:a, b, default_arguments:a, b = False}, pi:{arguments:, default_arguments:}, print_stray_nodes:{arguments:, default_arguments:}, print_tree:{arguments:, default_arguments:}, print_tree_pretty:{arguments:, default_arguments:}, propagate_call:{arguments:a, b, c, default_arguments:a, b = [], c = False}, propagate_notification:{arguments:a, default_arguments:a}, property_list_changed_notify:{arguments:, default_arguments:}, queue_free:{arguments:, default_arguments:}, raise:{arguments:, default_arguments:}, remove_and_skip:{arguments:, default_arguments:}, remove_child:{arguments:a, default_arguments:a}, remove_from_group:{arguments:a, default_arguments:a}, remove_meta:{arguments:a, default_arguments:a}, replace_by:{arguments:a, b, default_arguments:a, b = False}, request_ready:{arguments:, default_arguments:}, rpc:{arguments:a, default_arguments:a}, rpc_config:{arguments:a, b, default_arguments:a, b}, rpc_id:{arguments:a, b, default_arguments:a, b}, rpc_unreliable:{arguments:a, default_arguments:a}, rpc_unreliable_id:{arguments:a, b, default_arguments:a, b}, rset:{arguments:a, b, default_arguments:a, b}, rset_config:{arguments:a, b, default_arguments:a, b}, rset_id:{arguments:a, b, c, default_arguments:a, b, c}, rset_unreliable:{arguments:a, b, default_arguments:a, b}, rset_unreliable_id:{arguments:a, b, c, default_arguments:a, b, c}, set:{arguments:a, b, default_arguments:a, b}, set_block_signals:{arguments:a, default_arguments:a}, set_custom_multiplayer:{arguments:a, default_arguments:a}, set_deferred:{arguments:a, b, default_arguments:a, b}, set_display_folded:{arguments:a, default_arguments:a}, set_filename:{arguments:a, default_arguments:a}, set_indexed:{arguments:a, b, default_arguments:a, b}, set_message_translation:{arguments:a, default_arguments:a}, set_meta:{arguments:a, b, default_arguments:a, b}, set_name:{arguments:a, default_arguments:a}, set_network_master:{arguments:a, b, default_arguments:a, b = True}, set_owner:{arguments:a, default_arguments:a}, set_pause_mode:{arguments:a, default_arguments:a}, set_physics_process:{arguments:a, default_arguments:a}, set_physics_process_internal:{arguments:a, default_arguments:a}, set_process:{arguments:a, default_arguments:a}, set_process_input:{arguments:a, default_arguments:a}, set_process_internal:{arguments:a, default_arguments:a}, set_process_priority:{arguments:a, default_arguments:a}, set_process_unhandled_input:{arguments:a, default_arguments:a}, set_process_unhandled_key_input:{arguments:a, default_arguments:a}, set_scene_instance_load_placeholder:{arguments:a, default_arguments:a}, set_script:{arguments:a, default_arguments:a}, subtract:{arguments:a, b, default_arguments:a, b}, sum:{arguments:a, default_arguments:a}, to_string:{arguments:, default_arguments:}, tr:{arguments:a, default_arguments:a}, update_configuration_warning:{arguments:, default_arguments:}}",
"context": "Then they do not share resources",
"expected": "|Dictionary| {_enter_tree:{arguments:, default_arguments:}, _exit_tree:{arguments:, default_arguments:}, _get:{arguments:a, default_arguments:a}, _get_configuration_warning:{arguments:, default_arguments:}, _get_editor_description:{arguments:, default_arguments:}, _get_import_path:{arguments:, default_arguments:}, _get_property_list:{arguments:, default_arguments:}, _init:{arguments:, default_arguments:}, _input:{arguments:a, default_arguments:a}, _notification:{arguments:a, default_arguments:a}, _physics_process:{arguments:a, default_arguments:a}, _process:{arguments:a, default_arguments:a}, _ready:{arguments:, default_arguments:}, _set:{arguments:a, b, default_arguments:a, b}, _set_editor_description:{arguments:a, default_arguments:a}, _set_import_path:{arguments:a, default_arguments:a}, _to_string:{arguments:, default_arguments:}, _unhandled_input:{arguments:a, default_arguments:a}, _unhandled_key_input:{arguments:a, default_arguments:a}, add:{arguments:a, b, default_arguments:a, b}, add_child:{arguments:a, b, default_arguments:a, b = False}, add_child_below_node:{arguments:a, b, c, default_arguments:a, b, c = False}, add_to_group:{arguments:a, b, default_arguments:a, b = False}, add_user_signal:{arguments:a, b, default_arguments:a, b = []}, call:{arguments:a, default_arguments:a}, call_deferred:{arguments:a, default_arguments:a}, callv:{arguments:a, b, default_arguments:a, b}, can_process:{arguments:, default_arguments:}, can_translate_messages:{arguments:, default_arguments:}, connect:{arguments:a, b, c, d, e, default_arguments:a, b, c, d = [], e = 0}, disconnect:{arguments:a, b, c, default_arguments:a, b, c}, divide:{arguments:a, b, default_arguments:a, b}, duplicate:{arguments:a, default_arguments:a = 15}, emit_signal:{arguments:a, default_arguments:a}, find_node:{arguments:a, b, c, default_arguments:a, b = True, c = True}, find_parent:{arguments:a, default_arguments:a}, free:{arguments:, default_arguments:}, get:{arguments:a, default_arguments:a}, get_child:{arguments:a, default_arguments:a}, get_child_count:{arguments:, default_arguments:}, get_children:{arguments:, default_arguments:}, get_class:{arguments:, default_arguments:}, get_custom_multiplayer:{arguments:, default_arguments:}, get_filename:{arguments:, default_arguments:}, get_groups:{arguments:, default_arguments:}, get_incoming_connections:{arguments:, default_arguments:}, get_index:{arguments:, default_arguments:}, get_indexed:{arguments:a, default_arguments:a}, get_instance_id:{arguments:, default_arguments:}, get_meta:{arguments:a, default_arguments:a}, get_meta_list:{arguments:, default_arguments:}, get_method_list:{arguments:, default_arguments:}, get_multiplayer:{arguments:, default_arguments:}, get_name:{arguments:, default_arguments:}, get_network_master:{arguments:, default_arguments:}, get_node:{arguments:a, default_arguments:a}, get_node_and_resource:{arguments:a, default_arguments:a}, get_node_or_null:{arguments:a, default_arguments:a}, get_owner:{arguments:, default_arguments:}, get_parent:{arguments:, default_arguments:}, get_path:{arguments:, default_arguments:}, get_path_to:{arguments:a, default_arguments:a}, get_pause_mode:{arguments:, default_arguments:}, get_physics_process_delta_time:{arguments:, default_arguments:}, get_position_in_parent:{arguments:, default_arguments:}, get_process_delta_time:{arguments:, default_arguments:}, get_process_priority:{arguments:, default_arguments:}, get_property_list:{arguments:, default_arguments:}, get_scene_instance_load_placeholder:{arguments:, default_arguments:}, get_script:{arguments:, default_arguments:}, get_signal_connection_list:{arguments:a, default_arguments:a}, get_signal_list:{arguments:, default_arguments:}, get_tree:{arguments:, default_arguments:}, get_viewport:{arguments:, default_arguments:}, has_meta:{arguments:a, default_arguments:a}, has_method:{arguments:a, default_arguments:a}, has_node:{arguments:a, default_arguments:a}, has_node_and_resource:{arguments:a, default_arguments:a}, has_signal:{arguments:a, default_arguments:a}, has_user_signal:{arguments:a, default_arguments:a}, is_a_parent_of:{arguments:a, default_arguments:a}, is_blocking_signals:{arguments:, default_arguments:}, is_class:{arguments:a, default_arguments:a}, is_connected:{arguments:a, b, c, default_arguments:a, b, c}, is_displayed_folded:{arguments:, default_arguments:}, is_greater_than:{arguments:a, default_arguments:a}, is_in_group:{arguments:a, default_arguments:a}, is_inside_tree:{arguments:, default_arguments:}, is_network_master:{arguments:, default_arguments:}, is_physics_processing:{arguments:, default_arguments:}, is_physics_processing_internal:{arguments:, default_arguments:}, is_processing:{arguments:, default_arguments:}, is_processing_input:{arguments:, default_arguments:}, is_processing_internal:{arguments:, default_arguments:}, is_processing_unhandled_input:{arguments:, default_arguments:}, is_processing_unhandled_key_input:{arguments:, default_arguments:}, is_queued_for_deletion:{arguments:, default_arguments:}, math_fight:{arguments:, default_arguments:}, move_child:{arguments:a, b, default_arguments:a, b}, multiply:{arguments:a, b, default_arguments:a, b}, notification:{arguments:a, b, default_arguments:a, b = False}, pi:{arguments:, default_arguments:}, print_stray_nodes:{arguments:, default_arguments:}, print_tree:{arguments:, default_arguments:}, print_tree_pretty:{arguments:, default_arguments:}, propagate_call:{arguments:a, b, c, default_arguments:a, b = [], c = False}, propagate_notification:{arguments:a, default_arguments:a}, property_list_changed_notify:{arguments:, default_arguments:}, queue_free:{arguments:, default_arguments:}, raise:{arguments:, default_arguments:}, remove_and_skip:{arguments:, default_arguments:}, remove_child:{arguments:a, default_arguments:a}, remove_from_group:{arguments:a, default_arguments:a}, remove_meta:{arguments:a, default_arguments:a}, replace_by:{arguments:a, b, default_arguments:a, b = False}, request_ready:{arguments:, default_arguments:}, rpc:{arguments:a, default_arguments:a}, rpc_config:{arguments:a, b, default_arguments:a, b}, rpc_id:{arguments:a, b, default_arguments:a, b}, rpc_unreliable:{arguments:a, default_arguments:a}, rpc_unreliable_id:{arguments:a, b, default_arguments:a, b}, rset:{arguments:a, b, default_arguments:a, b}, rset_config:{arguments:a, b, default_arguments:a, b}, rset_id:{arguments:a, b, c, default_arguments:a, b, c}, rset_unreliable:{arguments:a, b, default_arguments:a, b}, rset_unreliable_id:{arguments:a, b, c, default_arguments:a, b, c}, set:{arguments:a, b, default_arguments:a, b}, set_block_signals:{arguments:a, default_arguments:a}, set_custom_multiplayer:{arguments:a, default_arguments:a}, set_deferred:{arguments:a, b, default_arguments:a, b}, set_display_folded:{arguments:a, default_arguments:a}, set_filename:{arguments:a, default_arguments:a}, set_indexed:{arguments:a, b, default_arguments:a, b}, set_message_translation:{arguments:a, default_arguments:a}, set_meta:{arguments:a, b, default_arguments:a, b}, set_name:{arguments:a, default_arguments:a}, set_network_master:{arguments:a, b, default_arguments:a, b = True}, set_owner:{arguments:a, default_arguments:a}, set_pause_mode:{arguments:a, default_arguments:a}, set_physics_process:{arguments:a, default_arguments:a}, set_physics_process_internal:{arguments:a, default_arguments:a}, set_process:{arguments:a, default_arguments:a}, set_process_input:{arguments:a, default_arguments:a}, set_process_internal:{arguments:a, default_arguments:a}, set_process_priority:{arguments:a, default_arguments:a}, set_process_unhandled_input:{arguments:a, default_arguments:a}, set_process_unhandled_key_input:{arguments:a, default_arguments:a}, set_scene_instance_load_placeholder:{arguments:a, default_arguments:a}, set_script:{arguments:a, default_arguments:a}, subtract:{arguments:a, b, default_arguments:a, b}, sum:{arguments:a, default_arguments:a}, to_string:{arguments:, default_arguments:}, tr:{arguments:a, default_arguments:a}, update_configuration_warning:{arguments:, default_arguments:}} != |Dictionary| {_enter_tree:{arguments:, default_arguments:}, _exit_tree:{arguments:, default_arguments:}, _get:{arguments:a, default_arguments:a}, _get_configuration_warning:{arguments:, default_arguments:}, _get_editor_description:{arguments:, default_arguments:}, _get_import_path:{arguments:, default_arguments:}, _get_property_list:{arguments:, default_arguments:}, _init:{arguments:, default_arguments:}, _input:{arguments:a, default_arguments:a}, _notification:{arguments:a, default_arguments:a}, _physics_process:{arguments:a, default_arguments:a}, _process:{arguments:a, default_arguments:a}, _ready:{arguments:, default_arguments:}, _set:{arguments:a, b, default_arguments:a, b}, _set_editor_description:{arguments:a, default_arguments:a}, _set_import_path:{arguments:a, default_arguments:a}, _to_string:{arguments:, default_arguments:}, _unhandled_input:{arguments:a, default_arguments:a}, _unhandled_key_input:{arguments:a, default_arguments:a}, add:{arguments:a, b, default_arguments:a, b}, add_child:{arguments:a, b, default_arguments:a, b = False}, add_child_below_node:{arguments:a, b, c, default_arguments:a, b, c = False}, add_to_group:{arguments:a, b, default_arguments:a, b = False}, add_user_signal:{arguments:a, b, default_arguments:a, b = []}, call:{arguments:a, default_arguments:a}, call_deferred:{arguments:a, default_arguments:a}, callv:{arguments:a, b, default_arguments:a, b}, can_process:{arguments:, default_arguments:}, can_translate_messages:{arguments:, default_arguments:}, connect:{arguments:a, b, c, d, e, default_arguments:a, b, c, d = [], e = 0}, disconnect:{arguments:a, b, c, default_arguments:a, b, c}, divide:{arguments:a, b, default_arguments:a, b}, duplicate:{arguments:a, default_arguments:a = 15}, emit_signal:{arguments:a, default_arguments:a}, find_node:{arguments:a, b, c, default_arguments:a, b = True, c = True}, find_parent:{arguments:a, default_arguments:a}, free:{arguments:, default_arguments:}, get:{arguments:a, default_arguments:a}, get_child:{arguments:a, default_arguments:a}, get_child_count:{arguments:, default_arguments:}, get_children:{arguments:, default_arguments:}, get_class:{arguments:, default_arguments:}, get_custom_multiplayer:{arguments:, default_arguments:}, get_filename:{arguments:, default_arguments:}, get_groups:{arguments:, default_arguments:}, get_incoming_connections:{arguments:, default_arguments:}, get_index:{arguments:, default_arguments:}, get_indexed:{arguments:a, default_arguments:a}, get_instance_id:{arguments:, default_arguments:}, get_meta:{arguments:a, default_arguments:a}, get_meta_list:{arguments:, default_arguments:}, get_method_list:{arguments:, default_arguments:}, get_multiplayer:{arguments:, default_arguments:}, get_name:{arguments:, default_arguments:}, get_network_master:{arguments:, default_arguments:}, get_node:{arguments:a, default_arguments:a}, get_node_and_resource:{arguments:a, default_arguments:a}, get_node_or_null:{arguments:a, default_arguments:a}, get_owner:{arguments:, default_arguments:}, get_parent:{arguments:, default_arguments:}, get_path:{arguments:, default_arguments:}, get_path_to:{arguments:a, default_arguments:a}, get_pause_mode:{arguments:, default_arguments:}, get_physics_process_delta_time:{arguments:, default_arguments:}, get_position_in_parent:{arguments:, default_arguments:}, get_process_delta_time:{arguments:, default_arguments:}, get_process_priority:{arguments:, default_arguments:}, get_property_list:{arguments:, default_arguments:}, get_scene_instance_load_placeholder:{arguments:, default_arguments:}, get_script:{arguments:, default_arguments:}, get_signal_connection_list:{arguments:a, default_arguments:a}, get_signal_list:{arguments:, default_arguments:}, get_tree:{arguments:, default_arguments:}, get_viewport:{arguments:, default_arguments:}, has_meta:{arguments:a, default_arguments:a}, has_method:{arguments:a, default_arguments:a}, has_node:{arguments:a, default_arguments:a}, has_node_and_resource:{arguments:a, default_arguments:a}, has_signal:{arguments:a, default_arguments:a}, has_user_signal:{arguments:a, default_arguments:a}, is_a_parent_of:{arguments:a, default_arguments:a}, is_blocking_signals:{arguments:, default_arguments:}, is_class:{arguments:a, default_arguments:a}, is_connected:{arguments:a, b, c, default_arguments:a, b, c}, is_displayed_folded:{arguments:, default_arguments:}, is_greater_than:{arguments:a, default_arguments:a}, is_in_group:{arguments:a, default_arguments:a}, is_inside_tree:{arguments:, default_arguments:}, is_network_master:{arguments:, default_arguments:}, is_physics_processing:{arguments:, default_arguments:}, is_physics_processing_internal:{arguments:, default_arguments:}, is_processing:{arguments:, default_arguments:}, is_processing_input:{arguments:, default_arguments:}, is_processing_internal:{arguments:, default_arguments:}, is_processing_unhandled_input:{arguments:, default_arguments:}, is_processing_unhandled_key_input:{arguments:, default_arguments:}, is_queued_for_deletion:{arguments:, default_arguments:}, math_fight:{arguments:, default_arguments:}, move_child:{arguments:a, b, default_arguments:a, b}, multiply:{arguments:a, b, default_arguments:a, b}, notification:{arguments:a, b, default_arguments:a, b = False}, pi:{arguments:, default_arguments:}, print_stray_nodes:{arguments:, default_arguments:}, print_tree:{arguments:, default_arguments:}, print_tree_pretty:{arguments:, default_arguments:}, propagate_call:{arguments:a, b, c, default_arguments:a, b = [], c = False}, propagate_notification:{arguments:a, default_arguments:a}, property_list_changed_notify:{arguments:, default_arguments:}, queue_free:{arguments:, default_arguments:}, raise:{arguments:, default_arguments:}, remove_and_skip:{arguments:, default_arguments:}, remove_child:{arguments:a, default_arguments:a}, remove_from_group:{arguments:a, default_arguments:a}, remove_meta:{arguments:a, default_arguments:a}, replace_by:{arguments:a, b, default_arguments:a, b = False}, request_ready:{arguments:, default_arguments:}, rpc:{arguments:a, default_arguments:a}, rpc_config:{arguments:a, b, default_arguments:a, b}, rpc_id:{arguments:a, b, default_arguments:a, b}, rpc_unreliable:{arguments:a, default_arguments:a}, rpc_unreliable_id:{arguments:a, b, default_arguments:a, b}, rset:{arguments:a, b, default_arguments:a, b}, rset_config:{arguments:a, b, default_arguments:a, b}, rset_id:{arguments:a, b, c, default_arguments:a, b, c}, rset_unreliable:{arguments:a, b, default_arguments:a, b}, rset_unreliable_id:{arguments:a, b, c, default_arguments:a, b, c}, set:{arguments:a, b, default_arguments:a, b}, set_block_signals:{arguments:a, default_arguments:a}, set_custom_multiplayer:{arguments:a, default_arguments:a}, set_deferred:{arguments:a, b, default_arguments:a, b}, set_display_folded:{arguments:a, default_arguments:a}, set_filename:{arguments:a, default_arguments:a}, set_indexed:{arguments:a, b, default_arguments:a, b}, set_message_translation:{arguments:a, default_arguments:a}, set_meta:{arguments:a, b, default_arguments:a, b}, set_name:{arguments:a, default_arguments:a}, set_network_master:{arguments:a, b, default_arguments:a, b = True}, set_owner:{arguments:a, default_arguments:a}, set_pause_mode:{arguments:a, default_arguments:a}, set_physics_process:{arguments:a, default_arguments:a}, set_physics_process_internal:{arguments:a, default_arguments:a}, set_process:{arguments:a, default_arguments:a}, set_process_input:{arguments:a, default_arguments:a}, set_process_internal:{arguments:a, default_arguments:a}, set_process_priority:{arguments:a, default_arguments:a}, set_process_unhandled_input:{arguments:a, default_arguments:a}, set_process_unhandled_key_input:{arguments:a, default_arguments:a}, set_scene_instance_load_placeholder:{arguments:a, default_arguments:a}, set_script:{arguments:a, default_arguments:a}, subtract:{arguments:a, b, default_arguments:a, b}, sum:{arguments:a, default_arguments:a}, to_string:{arguments:, default_arguments:}, tr:{arguments:a, default_arguments:a}, update_configuration_warning:{arguments:, default_arguments:}}",
"success": true
} ],
"context": "When we create two of it for the same script",
"fullname": "test_When_we_create_two_of_it_for_the_same_script",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|Object| [Node:5997] is equal to |Object| [Node:5997]",
"context": "Then we get the same double back",
"expected": "|Object| [Node:5997] is equal to |Object| [Node:5997]",
"success": true
} ],
"context": "When we call the double the second time",
"fullname": "test_When_we_call_double_a_second_time_on",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Reference:6004] is instance of class: [GDScript:1564]",
"context": "Then we get that inner class back",
"expected": "[Reference:6004] is instance of class: [GDScript:1564]",
"success": true
} ],
"context": "When we double an inner class",
"fullname": "test_When_we_double_an_inner_class",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 3,
"path": "res://tests/integration/script_director.test.gd",
"source": {
"containers": [ "res://tests/integration", "res://tests" ],
"method": "",
"path": "res://tests/integration/script_director.test.gd",
"tags": [  ],
"test": ExtResource( 13 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 3
}, {
"context": "Given a Test Double",
"methods": [ {
"assertions": [ {
"actual": "|String| Jackie is equal to |String| Jackie",
"context": "Then we can double the object successfully",
"expected": "|String| Jackie is equal to |String| Jackie",
"success": true
} ],
"context": "When we pass in dependecies on double",
"fullname": "test_When_we_pass_in_deps_on_double",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "(1, 1) is builtin: Vector2",
"context": "Then we can call methods on it",
"expected": "(1, 1) is builtin: Vector2",
"success": true
} ],
"context": "When we double an inner class",
"fullname": "test_When_we_double_an_inner_class",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "method: add was called with arguments: [10, 10]",
"context": "Then we can see that it was called with those arguments",
"expected": "method: add was called with arguments: [10, 10]",
"success": true
} ],
"context": "When we pass arguments to a method call that we are spying on",
"fullname": "test_When_we_pass_arguments_to_a_method_call_that_we_are_spying_on",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|float| 6.283185 is equal to |float| 6.283185",
"context": "Then we can call the static methods of that inner double",
"expected": "|float| 6.283185 is equal to |float| 6.283185",
"success": true
} ],
"context": "When we add an doubled inner class to it",
"fullname": "test_When_we_add_a_doubled_inner_class_to_it",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 9999 is equal to |int| 9999",
"context": "Then it returns the corresponding value when the partial pattern matches",
"expected": "|int| 9999 is equal to |int| 9999",
"success": true
} ],
"context": "When we call a method that was stubbed with a partial (ie using any()) argument pattern",
"fullname": "test_When_we_call_a_method_that_was_stubbed_with_a_partial_argument_pattern",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "add was called",
"context": "Then we can see that it was called at least once",
"expected": "add was called",
"success": true
} ],
"context": "When we call a method that we are spying on",
"fullname": "test_When_we_call_a_method_that_we_are_spying_on",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 4 is equal to |int| 4",
"context": "Then we get the correct result",
"expected": "|int| 4 is equal to |int| 4",
"success": true
} ],
"context": "When we call an add(x, y) method that we haven't directed",
"fullname": "test_When_we_call_an_add_method_that_we_have_not_directed",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|null| Null == null",
"context": "Then we get the stubbed value back",
"expected": "|null| Null == null",
"success": true
} ],
"context": "When we stub a method of a doubled inner class",
"fullname": "test_When_we_stub_a_method_of_a_double_inner_class",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 99 is equal to |int| 99",
"context": "Then it affects the state of the double",
"expected": "|int| 99 is equal to |int| 99",
"success": true
} ],
"context": "When we pass a funcref as a subcall",
"fullname": "test_When_we_pass_a_funcref_as_a_subcall",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|Array| [10, 5] is equal to |Array| [10, 5]",
"context": "Then it returns a value",
"expected": "|Array| [10, 5] is equal to |Array| [10, 5]",
"success": true
} ],
"context": "When we pass an Object with a call_func function",
"fullname": "test_When_we_pass_an_object_with_callfunc_method_as_a_subcall",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 9999 is equal to |int| 9999",
"context": "Then it returns the corresponding value when the pattern matches",
"expected": "|int| 9999 is equal to |int| 9999",
"success": true
} ],
"context": "When we call a method that was stubbed with an argument pattern that includes a non-primitive object",
"fullname": "test_When_we_call_a_method_that_was_stubbed_with_an_argument_pattern_that_includes_a_non_primitive_object",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|null| Null == null",
"context": "Then we get null",
"expected": "|null| Null == null",
"success": true
} ],
"context": "When we call a method that we have dummied",
"fullname": "test_When_we_call_a_method_that_we_have_dummied",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 99 is equal to |int| 99",
"context": "Then it returns a value",
"expected": "|int| 99 is equal to |int| 99",
"success": true
} ],
"context": "When we pass a funcref as a subcall that returns",
"fullname": "test_When_we_pass_a_funcref_as_a_subcall_that_returns_a_value",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then it returns true",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we call a method that we have stubbed to return true",
"fullname": "test_When_we_call_a_method_that_we_have_stubbed_to_return_true",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|Object| [Node:6107] is equal to |Object| [Node:6107]",
"context": "Then it returns that same node",
"expected": "|Object| [Node:6107] is equal to |Object| [Node:6107]",
"success": true
} ],
"context": "When we call a method that we have stubbed to return a node",
"fullname": "test_When_we_call_a_method_that_we_have_stubbed_to_return_a_node",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|String| Jackie is equal to |String| Jackie",
"context": "Then we can double the object successfully",
"expected": "|String| Jackie is equal to |String| Jackie",
"success": true
} ],
"context": "When we pass in dependecies on direct",
"fullname": "test_When_we_pass_in_deps_on_direct",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 100 is equal to |int| 100",
"context": "Then it returns the default stubbed value when the arguments don't match any pattern",
"expected": "|int| 100 is equal to |int| 100",
"success": true
}, {
"actual": "|int| 1000 is equal to |int| 1000",
"context": "Then it returns the the corresponding value to the pattern the arguments matched",
"expected": "|int| 1000 is equal to |int| 1000",
"success": true
} ],
"context": "When we call a method that was stubbed to return different values based on argument patterns",
"fullname": "test_When_we_call_a_method_that_was_stubbed_to_return_different_values_based_on_argument_patterns",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|bool| True is equal to |bool| True",
"context": "Then we can call it",
"expected": "|bool| True is equal to |bool| True",
"success": true
} ],
"context": "When we stubbed a keyworded method by passing in the correct keyword",
"fullname": "test_When_we_stubbed_a_keyword_method_by_passing_in_the_correct_keyword",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 4 is equal to |int| 4",
"context": "Then it calls its super implementation by default",
"expected": "|int| 4 is equal to |int| 4",
"success": true
}, {
"actual": "|int| 9999 is equal to |int| 9999",
"context": "Then it does not call its super implementation when arguments patterns match a different return value",
"expected": "|int| 9999 is equal to |int| 9999",
"success": true
} ],
"context": "When we call a method that we stubbed to call its super implementation by default",
"fullname": "test_When_we_call_a_method_that_we_stubbed_to_call_its_super_implementation_by_default",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
} ],
"passed": 19,
"path": "res://tests/integration/test_double.test.gd",
"source": {
"containers": [ "res://tests/integration", "res://tests" ],
"method": "",
"path": "res://tests/integration/test_double.test.gd",
"tags": [  ],
"test": ExtResource( 14 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 19
}, {
"context": "Given a Boolean Assertion",
"methods": [ {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then it passes",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When calling asserts.is_true(true)",
"fullname": "test_when_calling_asserts_is_true",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| False == false",
"context": "Then it passes",
"expected": "|bool| False == false",
"success": true
} ],
"context": "When calling asserts.is_false(false)",
"fullname": "test_when_calling_asserts_is_false",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| True != false",
"context": "",
"expected": "|bool| True == false",
"success": false
} ],
"context": " intentional failure",
"fullname": "test_intentional_failure",
"passed": 0,
"success": false,
"time": 0.0,
"total": 1
} ],
"passed": 2,
"path": "res://tests/unit/boolean.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/boolean.test.gd",
"tags": [  ],
"test": ExtResource( 11 ),
"yield_time": 0.0
},
"success": false,
"time_taken": 0.0,
"total": 3
}, {
"context": "Given an Equality Assertion",
"methods": [ {
"assertions": [ {
"actual": "|int| 2 is equal or greater |int| 1",
"context": "Then it passes",
"expected": "|int| 2 is equal or greater |int| 1",
"success": true
} ],
"context": "When calling asserts.is_equal_or_greater_than(2, 1)",
"fullname": "test_when_calling_is_equal_or_greater_than",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 2 is greater than |int| 1",
"context": "Then it passes",
"expected": "|int| 2 is greater than |int| 1",
"success": true
} ],
"context": "When calling asserts.is_greater_than(2, 1)",
"fullname": "test_when_calling_is_greater_than",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 1 is equal to |int| 1",
"context": "Then it passes",
"expected": "|int| 1 is equal to |int| 1",
"success": true
} ],
"context": "When calling asserts.is_equal(1, 1)",
"fullname": "test_when_calling_is_equal",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 1 is less than |int| 2",
"context": "Then it passes",
"expected": "|int| 1 is less than |int| 2",
"success": true
} ],
"context": "When calling asserts.is_less_than(2, 1)",
"fullname": "test_when_calling_is_less_than",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 1 is equal or greater |int| 1",
"context": "Then it passes",
"expected": "|int| 1 is equal or greater |int| 1",
"success": true
} ],
"context": "When calling asserts.is_equal_or_greater_than(1, 1)",
"fullname": "test_when_calling_is_equal_or_greater_than_with_equal_values",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 5 is not equal to |int| 6",
"context": "Then it passes",
"expected": "|int| 5 != |int| 6",
"success": true
} ],
"context": "When callign asserts.is_not_equal(5, 6)",
"fullname": "test_when_calling_is_not_equal",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 1 is equal or less than |int| 1",
"context": "Then it passes!",
"expected": "|int| 1 is equal or less than |int| 1",
"success": true
} ],
"context": "When calling asserts.is_equal_or_less_than(1, 1)",
"fullname": "test_when_calling_is_equal_or_less_than_with_equal_values",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 7,
"path": "res://tests/unit/equality.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/equality.test.gd",
"tags": [  ],
"test": ExtResource( 8 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 7
}, {
"context": "Given A File Assertion",
"methods": [ {
"assertions": [ {
"actual": "res://somefile.gd does not exist",
"context": "Then it passes",
"expected": "res://somefile.gd does not exist",
"success": true
} ],
"context": "When calling asserts.file_does_not_exist when there is no file",
"fullname": "test_when_calling_file_does_not_exist_when_there_is_no_file",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": " does not exist",
"context": "Then it passes",
"expected": " does not exist",
"success": true
} ],
"context": "When calling asserts file does not exist when path is empty",
"fullname": "test_when_calling_file_does_not_exist_when_path_is_empty",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "res://tests/unit/file.test.gd exists",
"context": "Then it passes",
"expected": "res://tests/unit/file.test.gd exists",
"success": true
} ],
"context": "When calling asserts.file_exists when the file is this suite",
"fullname": "test_when_calling_file_exists_when_file_is_self",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 3,
"path": "res://tests/unit/file.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/file.test.gd",
"tags": [  ],
"test": ExtResource( 3 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 3
}, {
"context": "Given an Is Instance of class/type Assertion",
"methods": [ {
"assertions": [ {
"actual": "|AABB| 0, 0, 0 - 0, 0, 0 != null",
"context": "AABB is not null",
"expected": "|AABB| 0, 0, 0 - 0, 0, 0 != null",
"success": true
}, {
"actual": "0, 0, 0 - 0, 0, 0 is builtin: AABB",
"context": "Then it passes",
"expected": "0, 0, 0 - 0, 0, 0 is builtin: AABB",
"success": true
} ],
"context": "When calling asserts.is_AABB(aabb: AABB)",
"fullname": "test_when_calling_is_AABB",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|Array| [] != null",
"context": "array is not null",
"expected": "|Array| [] != null",
"success": true
}, {
"actual": "[] is builtin: Array",
"context": "Then it passes",
"expected": "[] is builtin: Array",
"success": true
} ],
"context": "When calling asserts.is_Array(array: Array)",
"fullname": "test_when_calling_is_Array",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|Transform2D| ((1, 0), (0, 1), (0, 0)) != null",
"context": "transform2D is not null",
"expected": "|Transform2D| ((1, 0), (0, 1), (0, 0)) != null",
"success": true
}, {
"actual": "((1, 0), (0, 1), (0, 0)) is builtin: Transform2D",
"context": "Then it passes",
"expected": "((1, 0), (0, 1), (0, 0)) is builtin: Transform2D",
"success": true
} ],
"context": "When calling asserts.is_Transform(transform2D: Transform2D)",
"fullname": "test_when_calling_is_Transform2D",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|Rect2| (0, 0, 0, 0) != null",
"context": "rect2 is not null",
"expected": "|Rect2| (0, 0, 0, 0) != null",
"success": true
}, {
"actual": "(0, 0, 0, 0) is builtin: Rect2",
"context": "Then it passes",
"expected": "(0, 0, 0, 0) is builtin: Rect2",
"success": true
} ],
"context": "When calling asserts.is_Rect2(rect2: Rect2)",
"fullname": "test_when_calling_is_Rect2",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|Vector3| (0, 0, 0) != null",
"context": "vec3 is not null",
"expected": "|Vector3| (0, 0, 0) != null",
"success": true
}, {
"actual": "(0, 0, 0) is builtin: Vector3",
"context": "Then it passes",
"expected": "(0, 0, 0) is builtin: Vector3",
"success": true
} ],
"context": "When calling asserts.is_Vector3(vec3: Vector3",
"fullname": "test_when_calling_is_Vector3",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|Quat| (0, 0, 0, 1) != null",
"context": "quat is not null",
"expected": "|Quat| (0, 0, 0, 1) != null",
"success": true
}, {
"actual": "(0, 0, 0, 1) is builtin: Quat",
"context": "Then it passes",
"expected": "(0, 0, 0, 1) is builtin: Quat",
"success": true
} ],
"context": "When calling asserts.is_Quat(quat: Quat)",
"fullname": "test_when_calling_is_Quat",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "{} is builtin: Dictionary",
"context": "Then it passes",
"expected": "{} is builtin: Dictionary",
"success": true
} ],
"context": "When calling asserts.is_Dictionary({})",
"fullname": "test_when_calling_is_Dictionary",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|PoolIntArray| [] != null",
"context": "ints is not null",
"expected": "|PoolIntArray| [] != null",
"success": true
}, {
"actual": "[] is builtin: PoolIntArray",
"context": "Then it passes",
"expected": "[] is builtin: PoolIntArray",
"success": true
} ],
"context": "When calling asserts.is_PoolIntArray(ints: PoolIntArray)",
"fullname": "test_when_calling_is_PoolIntArray",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|PoolByteArray| [PoolByteArray] != null",
"context": "bytes is not null",
"expected": "|PoolByteArray| [PoolByteArray] != null",
"success": true
}, {
"actual": "[PoolByteArray] is builtin: PoolByteArray",
"context": "Then it passes",
"expected": "[PoolByteArray] is builtin: PoolByteArray",
"success": true
} ],
"context": "When calling asserts.is_PoolByteArray(bytes: PoolByteArray)",
"fullname": "test_when_calling_is_PoolByteArray",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|RID| [RID] != null",
"context": "rid is not null",
"expected": "|RID| [RID] != null",
"success": true
}, {
"actual": "[RID] is builtin: RID",
"context": "Then it passes",
"expected": "[RID] is builtin: RID",
"success": true
} ],
"context": "When calling asserts.is_RID(rid: RID)",
"fullname": "test_when_calling_is_RID",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|PoolStringArray| [] != null",
"context": "strs is not null",
"expected": "|PoolStringArray| [] != null",
"success": true
}, {
"actual": "[] is builtin: PoolStringArray",
"context": "Then it passes",
"expected": "[] is builtin: PoolStringArray",
"success": true
} ],
"context": "When calling is asserts.is_PoolStringArray(strs: PoolStringArray)",
"fullname": "test_when_calling_is_PoolStringArray",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "1 is builtin: float",
"context": "Then it passes",
"expected": "1 is builtin: float",
"success": true
} ],
"context": "When calling asserts.is_float(1.0)",
"fullname": "test_when_calling_is_float",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|PoolColorArray| [PoolColorArray] != null",
"context": "colors is not null",
"expected": "|PoolColorArray| [PoolColorArray] != null",
"success": true
}, {
"actual": "[PoolColorArray] is builtin: PoolColorArray",
"context": "Then it passes",
"expected": "[PoolColorArray] is builtin: PoolColorArray",
"success": true
} ],
"context": "When calling asserts.is_PoolColorArray(colors: PoolColorArray)",
"fullname": "test_when_calling_is_PoolColorArray",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|NodePath| . != null",
"context": "@'Parent/Child' is not null",
"expected": "|NodePath| . != null",
"success": true
}, {
"actual": ". is builtin: NodePath",
"context": "Then it passes",
"expected": ". is builtin: NodePath",
"success": true
} ],
"context": "When calling asserts.is_NodePath(@'Parent/Child')",
"fullname": "test_when_calling_is_NodePath",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|PoolVector2Array| [] != null",
"context": "vec2s is not null",
"expected": "|PoolVector2Array| [] != null",
"success": true
}, {
"actual": "[] is builtin: PoolVector2Array",
"context": "Then it passes",
"expected": "[] is builtin: PoolVector2Array",
"success": true
} ],
"context": "When calling is asserts.is_PoolVector2Array(vec2s: PoolVector2Array)",
"fullname": "test_when_calling_is_PoolVector2Array",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|PoolVector3Array| [] != null",
"context": "vec3s is not null",
"expected": "|PoolVector3Array| [] != null",
"success": true
}, {
"actual": "[] is builtin: PoolVector3Array",
"context": "Then it passes",
"expected": "[] is builtin: PoolVector3Array",
"success": true
} ],
"context": "When calling is asserts.is_PoolVector3Array(vec3s: PoolVector3Array)",
"fullname": "test_when_calling_is_PoolVector3Array",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|Transform| 1, 0, 0, 0, 1, 0, 0, 0, 1 - 0, 0, 0 != null",
"context": "transform is not null",
"expected": "|Transform| 1, 0, 0, 0, 1, 0, 0, 0, 1 - 0, 0, 0 != null",
"success": true
}, {
"actual": "1, 0, 0, 0, 1, 0, 0, 0, 1 - 0, 0, 0 is builtin: Transform",
"context": "Then it passes",
"expected": "1, 0, 0, 0, 1, 0, 0, 0, 1 - 0, 0, 0 is builtin: Transform",
"success": true
} ],
"context": "When calling asserts.is_Transform(transform: Transform)",
"fullname": "test_when_calling_is_Transform",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|String|  != null",
"context": "strs is not null",
"expected": "|String|  != null",
"success": true
}, {
"actual": " is builtin: String",
"context": "Then it passes",
"expected": " is builtin: String",
"success": true
} ],
"context": "When calling asserts.is_string(strs: String)",
"fullname": "test_when_calling_is_string",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|Basis| ((1, 0, 0), (0, 1, 0), (0, 0, 1)) != null",
"context": "basis is not null",
"expected": "|Basis| ((1, 0, 0), (0, 1, 0), (0, 0, 1)) != null",
"success": true
}, {
"actual": "((1, 0, 0), (0, 1, 0), (0, 0, 1)) is builtin: Basis",
"context": "Then it passes",
"expected": "((1, 0, 0), (0, 1, 0), (0, 0, 1)) is builtin: Basis",
"success": true
} ],
"context": "When calling asserts.is_basis(basis: Basis",
"fullname": "test_when_calling_is_Basis",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|Plane| 0, 0, 0, 0 != null",
"context": "plane is not null",
"expected": "|Plane| 0, 0, 0, 0 != null",
"success": true
}, {
"actual": "0, 0, 0, 0 is builtin: Plane",
"context": "then it passes",
"expected": "0, 0, 0, 0 is builtin: Plane",
"success": true
} ],
"context": "When calling asserts.is_Plane(plane: Plane())",
"fullname": "test_when_calling_is_Plane",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|Vector2| (0, 0) != null",
"context": "vec2 is not null",
"expected": "|Vector2| (0, 0) != null",
"success": true
}, {
"actual": "(0, 0) is builtin: Vector2",
"context": "Then it passes",
"expected": "(0, 0) is builtin: Vector2",
"success": true
} ],
"context": "When calling asserts.is_Vector2(vec2)",
"fullname": "test_when_calling_is_Vector2",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|Object| [Node:6207] != null",
"context": "node is not null",
"expected": "|Object| [Node:6207] != null",
"success": true
}, {
"actual": "[Node:6207] is builtin: Object",
"context": "An instance of node is an Object",
"expected": "[Node:6207] is builtin: Object",
"success": true
} ],
"context": "When calling is asserts.object(node: Node)",
"fullname": "test_when_calling_is_object",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|PoolRealArray| [] != null",
"context": "reals is not null",
"expected": "|PoolRealArray| [] != null",
"success": true
}, {
"actual": "[] is builtin: PoolRealArray",
"context": "Then it passes",
"expected": "[] is builtin: PoolRealArray",
"success": true
} ],
"context": "When calling is asserts.is_PoolRealArray(reals: PoolRealArray)",
"fullname": "test_when_calling_is_PoolRealArray",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "True is builtin: bool",
"context": "Then it passes",
"expected": "True is builtin: bool",
"success": true
} ],
"context": "When calling asserts.is_bool(true)",
"fullname": "test_when_calling_is_bool",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "1 is builtin: int",
"context": "Then it passes",
"expected": "1 is builtin: int",
"success": true
} ],
"context": "When callign asserts.is_int(1)",
"fullname": "test_when_calling_is_int",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|Color| 0,0,0,1 != null",
"context": "color is not null",
"expected": "|Color| 0,0,0,1 != null",
"success": true
}, {
"actual": "0,0,0,1 is builtin: Color",
"context": "Then it passes",
"expected": "0,0,0,1 is builtin: Color",
"success": true
} ],
"context": "When calling asserts.is_color(color: Color)",
"fullname": "test_when_calling_is_Color",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
} ],
"passed": 26,
"path": "res://tests/unit/is_instance.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/is_instance.test.gd",
"tags": [  ],
"test": ExtResource( 6 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 26
}, {
"context": "Given an Is Not Instance of class/type Assertion",
"methods": [ {
"assertions": [ {
"actual": "Null is not builtin: Array",
"context": "Then it passes",
"expected": "Null is not builtin: Array",
"success": true
} ],
"context": "when calling asserts.is_not_Array(null)",
"fullname": "test_when_calling_is_not_Array",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Color",
"context": "Then it passes",
"expected": "Null is not builtin: Color",
"success": true
} ],
"context": "when calling asserts.is_not_Color(null)",
"fullname": "test_when_calling_is_not_Color",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: float",
"context": "Then it passes",
"expected": "Null is not builtin: float",
"success": true
} ],
"context": "when calling asserts.is_not_float(null)",
"fullname": "test_when_calling_is_not_float",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: AABB",
"context": "Then it passes",
"expected": "Null is not builtin: AABB",
"success": true
} ],
"context": "when calling asserts.is_not_AABB(null)",
"fullname": "test_when_calling_is_not_AABB",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Basis",
"context": "Then it passes",
"expected": "Null is not builtin: Basis",
"success": true
} ],
"context": "when calling asserts.is_not_Basis(null)",
"fullname": "test_when_calling_is_not_Basis",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: int",
"context": "Then it passes",
"expected": "Null is not builtin: int",
"success": true
} ],
"context": "when calling asserts.is_not_int(null)",
"fullname": "test_when_calling_is_not_int",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: bool",
"context": "Then it passes",
"expected": "Null is not builtin: bool",
"success": true
} ],
"context": "when calling asserts.is_not_bool(null)",
"fullname": "test_when_calling_is_not_bool",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Dictionary",
"context": "Then it passes",
"expected": "Null is not builtin: Dictionary",
"success": true
} ],
"context": "when calling asserts.is_not_Dictionary(null)",
"fullname": "test_when_calling_is_not_Dictionary",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: NodePath",
"context": "Then it passes",
"expected": "Null is not builtin: NodePath",
"success": true
} ],
"context": "when calling asserts.is_not_NodePath(null)",
"fullname": "test_when_calling_is_not_NodePath",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Object",
"context": "Then it passes",
"expected": "Null is not builtin: Object",
"success": true
} ],
"context": "when calling asserts.is_not_Object(null)",
"fullname": "test_when_calling_is_not_Object",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: PoolStringArray",
"context": "Then it passes",
"expected": "Null is not builtin: PoolStringArray",
"success": true
} ],
"context": "when calling asserts.is_not_PoolStringArray(null)",
"fullname": "test_when_calling_is_not_PoolStringArray",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Quat",
"context": "Then it passes",
"expected": "Null is not builtin: Quat",
"success": true
} ],
"context": "when calling asserts.is_not_Quat(null)",
"fullname": "test_when_calling_is_not_Quat",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: PoolRealArray",
"context": "Then it passes",
"expected": "Null is not builtin: PoolRealArray",
"success": true
} ],
"context": "when calling asserts.is_not_PoolRealArray(null)",
"fullname": "test_when_calling_is_not_PoolRealArray",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: RID",
"context": "Then it passes",
"expected": "Null is not builtin: RID",
"success": true
} ],
"context": "when calling asserts.is_not_RID(null)",
"fullname": "test_when_calling_is_not_RID",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: PoolIntArray",
"context": "Then it passes",
"expected": "Null is not builtin: PoolIntArray",
"success": true
} ],
"context": "when calling asserts.is_not_PoolIntArray(null)",
"fullname": "test_when_calling_is_not_PoolIntArray",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Vector2",
"context": "Then it passes",
"expected": "Null is not builtin: Vector2",
"success": true
} ],
"context": "when calling asserts.is_not_Vector2(null)",
"fullname": "test_when_calling_is_not_Vector2",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Transform",
"context": "Then it passes",
"expected": "Null is not builtin: Transform",
"success": true
} ],
"context": "when calling asserts.is_not_Transform(null)",
"fullname": "test_when_calling_is_not_Transform",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: String",
"context": "Then it passes",
"expected": "Null is not builtin: String",
"success": true
} ],
"context": "when calling asserts.is_not_String(null)",
"fullname": "test_when_calling_is_not_String",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: PoolVector2Array",
"context": "Then it passes",
"expected": "Null is not builtin: PoolVector2Array",
"success": true
} ],
"context": "when calling asserts.is_not_PoolVector2Array(null)",
"fullname": "test_when_calling_is_not_PoolVector2Array",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: PoolVector3Array",
"context": "Then it passes",
"expected": "Null is not builtin: PoolVector3Array",
"success": true
} ],
"context": "when calling asserts.is_not_PoolVector3Array(null)",
"fullname": "test_when_calling_is_not_PoolVector3Array",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Plane",
"context": "Then it passes",
"expected": "Null is not builtin: Plane",
"success": true
} ],
"context": "when calling asserts.is_not_Plane(null)",
"fullname": "test_when_calling_is_not_Plane",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Transform2D",
"context": "Then it passes",
"expected": "Null is not builtin: Transform2D",
"success": true
} ],
"context": "when calling asserts.is_not_Transform2D(null)",
"fullname": "test_when_calling_is_not_Transform2D",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: PoolColorArray",
"context": "Then it passes",
"expected": "Null is not builtin: PoolColorArray",
"success": true
} ],
"context": "when calling asserts.is_not_PoolColorArray(null)",
"fullname": "test_when_calling_is_not_PoolColorArray",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Vector3",
"context": "Then it passes",
"expected": "Null is not builtin: Vector3",
"success": true
} ],
"context": "when calling asserts.is_not_Vector3(null)",
"fullname": "test_when_calling_is_not_Vector3",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: PoolByteArray",
"context": "Then it passes",
"expected": "Null is not builtin: PoolByteArray",
"success": true
} ],
"context": "when calling asserts.is_not_PoolByteArray(null)",
"fullname": "test_when_calling_is_not_PoolByteArray",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Rect2",
"context": "Then it passes",
"expected": "Null is not builtin: Rect2",
"success": true
} ],
"context": "when calling asserts.is_not_Rect2(null)",
"fullname": "test_when_calling_is_not_Rect2",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 26,
"path": "res://tests/unit/is_not_instance.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/is_not_instance.test.gd",
"tags": [  ],
"test": ExtResource( 2 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 26
}, {
"context": "Given a Null Assertion",
"methods": [ {
"assertions": [ {
"actual": "|Object| [Node:6248] != null",
"context": "Then it passes",
"expected": "|Object| [Node:6248] != null",
"success": true
} ],
"context": "When calling Node is not null",
"fullname": "test_when_calling_node_is_not_null",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|null| Null == null",
"context": "Then it passes",
"expected": "|null| Null == null",
"success": true
} ],
"context": "When calling asserts.is_null(null)",
"fullname": "test_when_calling_null_is_null",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|Object| [Deleted Object] == null",
"context": "A Freed Node is null in Engine 3.2.2 or greater",
"expected": "|Object| [Deleted Object] == null",
"success": true
} ],
"context": "When calling freed object is null",
"fullname": "test_when_calling_freed_object_is_not_null",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 3,
"path": "res://tests/unit/null.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/null.test.gd",
"tags": [  ],
"test": ExtResource( 12 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 3
}, {
"context": "Given an Object Assertion",
"methods": [ {
"assertions": [ {
"actual": "[Node:6253] does not have meta: confusing",
"context": "Then it passes",
"expected": "[Node:6253] does not have meta: confusing",
"success": true
} ],
"context": "When calling asserts.object_has_meta with real key but null val",
"fullname": "test_when_calling_does_not_have_meta_real_key_null_value_pair",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:6253] has method: title",
"context": "Then it passes",
"expected": "[Node:6253] has method: title",
"success": true
} ],
"context": "When calling has_method('title')",
"fullname": "test_when_calling_has_method_title",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:6253] has user signal: dummy_signal",
"context": "Then it passes",
"expected": "[Node:6253] has user signal: dummy_signal",
"success": true
} ],
"context": "When calling obj_has_user_signal after adding a signal",
"fullname": "test_when_calling_has_user_signal_after_adding_a_signal",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:6253] does not have user signal: false_signal",
"context": "Then it passes",
"expected": "[Node:6253] does not have user signal: false_signal",
"success": true
} ],
"context": "When calling obj_does_not_have_user_signal with fake signal",
"fullname": "test_when_calling_does_not_have_user_signal",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is freed from memory",
"context": "Then it passes",
"expected": "Null is freed from memory",
"success": true
} ],
"context": "When calling asserts.is_freed(freed_object",
"fullname": "test_when_calling_freed_object_is_freed",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:6253] has meta: dummy",
"context": "Then it passes",
"expected": "[Node:6253] has meta: dummy",
"success": true
}, {
"actual": "[Node:6253] has meta: dummy",
"context": "Then it passes",
"expected": "[Node:6253] has meta: dummy",
"success": true
} ],
"context": "When calling asserts.object_has_meta() after adding metadata",
"fullname": "test_when_calling_has_meta_after_adding_metadata",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "[Node:6264] is not freed",
"context": "Then it passes",
"expected": "[Node:6264] is not freed",
"success": true
} ],
"context": "When calling asserts.is_not_freed(unfreed_object)",
"fullname": "test_when_calling_unfreed_object_is_not_freed",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:6253] does not have meta: bad_meta",
"context": "Then it passes",
"expected": "[Node:6253] does not have meta: bad_meta",
"success": true
} ],
"context": "When calling asserts.object_does_not_have_meta()",
"fullname": "test_when_calling_does_not_have_meta",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:6267] is queued for deletion",
"context": "Then it passes",
"expected": "[Node:6267] is queued for deletion",
"success": true
} ],
"context": "When calling asserts.object_is_queued for deletion after calling queue_free",
"fullname": "test_when_calling_obj_is_queued_for_deletion_after_calling_queue_free",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:6269] is blocking signals",
"context": "Then it passes",
"expected": "[Node:6269] is blocking signals",
"success": true
} ],
"context": "When calling is blocking signals while blocking signals",
"fullname": "test_is_blocking_signals",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:6271] is not blocking signals",
"context": "Then it passes",
"expected": "[Node:6271] is not blocking signals",
"success": true
} ],
"context": "When calling is not blocking signals while not blocking signals",
"fullname": "test_is_not_blocking_signals",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:6273] is not queued for deletion",
"context": "Then it passes",
"expected": "[Node:6273] is not queued for deletion",
"success": true
} ],
"context": "When calling asserts.object_is_not_for_queued_deletion after not calling queue free()",
"fullname": "test_when_calling_obj_is_not_for_queued_deletion_after_not_calling_queue_free",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:6253].builtin_dummy is connected to [Node:6253].title",
"context": "Then it passes",
"expected": "[Node:6253].builtin_dummy is connected to [Node:6253].title",
"success": true
} ],
"context": "When calling asserts object is connected with a valid connection",
"fullname": "test_when_calling_obj_is_connected_with_a_real_connection",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:6253].builtin_dummy is not connected to [Node:6253].title",
"context": "Then it passes",
"expected": "[Node:6253].builtin_dummy is not connected to [Node:6253].title",
"success": true
} ],
"context": "When calling asserts object is not connected with an invalid connection",
"fullname": "test_when_calling_obj_is_not_connected_with_an_invalid_connection",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:6253] does not have user signal: builtin_dummy",
"context": "Then it passes",
"expected": "[Node:6253] does not have user signal: builtin_dummy",
"success": true
} ],
"context": "When calling does not have user signal with class signal",
"fullname": "test_when_calling_does_not_have_user_signal_with_class_signal_constant",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 15,
"path": "res://tests/unit/object.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/object.test.gd",
"tags": [  ],
"test": ExtResource( 7 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 15
}, {
"context": "Given the Addition Operator",
"methods": [ {
"assertions": [ {
"actual": "|int| 4 is equal to |int| 4",
"context": "",
"expected": "|int| 4 is equal to |int| 4",
"success": true
} ],
"context": "When we add 2 to 2 we get 4",
"fullname": "test_add",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 8 is equal to |int| 8",
"context": "",
"expected": "|int| 8 is equal to |int| 8",
"success": true
} ],
"context": "When we add 5 to 3 we get 8",
"fullname": "test_add",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 13 is equal to |int| 13",
"context": "",
"expected": "|int| 13 is equal to |int| 13",
"success": true
} ],
"context": "When we add 7 to 6 we get 13",
"fullname": "test_add",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 0 is equal to |int| 0",
"context": "",
"expected": "|int| 0 is equal to |int| 0",
"success": true
} ],
"context": "When we subtract 2 from 2 we get 0",
"fullname": "test_subtract",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 2 is equal to |int| 2",
"context": "",
"expected": "|int| 2 is equal to |int| 2",
"success": true
} ],
"context": "When we subtract 5 from 3 we get 2",
"fullname": "test_subtract",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 1 is equal to |int| 1",
"context": "",
"expected": "|int| 1 is equal to |int| 1",
"success": true
} ],
"context": "When we subtract 7 from 6 we get 1",
"fullname": "test_subtract",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 6,
"path": "res://tests/unit/parameters.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/parameters.test.gd",
"tags": [  ],
"test": ExtResource( 16 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 6
}, {
"context": "Given A Range Assertion",
"methods": [ {
"assertions": [ {
"actual": "10 is not in range(0, 10)",
"context": "Then it passes",
"expected": "10 is not in range(0, 10)",
"success": true
} ],
"context": "When calling is (10) not in range (in range(0, 10)",
"fullname": "test_when_calling_is_not_in_range",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "0 is in range(0, 10)",
"context": "Then it passes",
"expected": "0 is in range(0, 10)",
"success": true
} ],
"context": "When calling is (0) in range(0, 10)",
"fullname": "test_when_calling_is_in_range",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 2,
"path": "res://tests/unit/range.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/range.test.gd",
"tags": [  ],
"test": ExtResource( 15 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 2
}, {
"context": "Given a String Assertion",
"methods": [ {
"assertions": [ {
"actual": "impsum does not begin with bleh lorem",
"context": "Then it passes",
"expected": "impsum does not begin with bleh lorem",
"success": true
} ],
"context": "When calling asserts.string_does_not_begin_with('lorem', 'impsum')",
"fullname": "test_when_calling_string_does_not_begin_with",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "lorem impsum begins with lorem",
"context": "Then it passes",
"expected": "lorem impsum begins with lorem",
"success": true
} ],
"context": "When calling asserts.string_begins_with('lorem', 'lorem impsum')",
"fullname": "test_when_calling_string_begins_with",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "lorem impsum ends with impsum",
"context": "Then it passes",
"expected": "lorem impsum ends with impsum",
"success": true
} ],
"context": "When calling asserts.string_ends_with('impsum', 'lorem impsum')",
"fullname": "test_when_calling_string_ends_with",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "impsum does not contain beem im",
"context": "Then it passes",
"expected": "impsum does not contain beem im",
"success": true
} ],
"context": "When calling asserts.string_does_not_contain('em im', 'impsum')",
"fullname": "test_when_calling_string_does_not_contain",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "lorem impsum contains em im",
"context": "Then it passes",
"expected": "lorem impsum contains em im",
"success": true
} ],
"context": "When calling asserts.string_contains('em im', 'lorem impsum')",
"fullname": "test_when_calling_string_contains",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "impsum does not end with lorem",
"context": "Then it passes",
"expected": "impsum does not end with lorem",
"success": true
} ],
"context": "When calling asserts.string_does_not_end_with('lorem', 'impsum')",
"fullname": "test_when_calling_string_does_not_end_with",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 6,
"path": "res://tests/unit/string.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/string.test.gd",
"tags": [  ],
"test": ExtResource( 9 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 6
}, {
"context": "Dummy Passing Test",
"methods": [ {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Passing!",
"expected": "|bool| True == true",
"success": true
} ],
"context": "This method passes",
"fullname": "test_this_method_passes",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 1,
"path": "res://tests/unit/suite.test.gd.DummyOne",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/suite.test.gd.DummyOne",
"tags": [  ],
"test": SubResource( 19 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 1
}, {
"context": "Dummy Test 2",
"methods": [ {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Passing!",
"expected": "|bool| True == true",
"success": true
} ],
"context": "This method passes",
"fullname": "test_this_method_passes",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 1,
"path": "res://tests/unit/suite.test.gd.DummyTwo",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/suite.test.gd.DummyTwo",
"tags": [  ],
"test": SubResource( 20 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 1
}, {
"context": "Given a Test Script",
"methods": [ {
"assertions": [ {
"actual": "|int| 10 is greater than |int| 1",
"context": "We get an array of multiple values back",
"expected": "|int| 10 is greater than |int| 1",
"success": true
}, {
"actual": "|int| 0 is not equal to |int| 9",
"context": "With different values",
"expected": "|int| 0 != |int| 9",
"success": true
}, {
"actual": "|int| 10 is greater than |int| 1",
"context": "And we can track multiple properties",
"expected": "|int| 10 is greater than |int| 1",
"success": true
} ],
"context": "When we record properties",
"fullname": "test_we_can_record_properties",
"passed": 3,
"success": true,
"time": 0.0,
"total": 3
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "if the test didn't break this works",
"expected": "|bool| True == true",
"success": true
} ],
"context": " we can omit describe",
"fullname": "test_we_can_omit_describe",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|int| 2 is equal to |int| 2",
"context": "",
"expected": "|int| 2 is equal to |int| 2",
"success": true
} ],
"context": " when we omit context we can see expected and got under method",
"fullname": "test_when_we_omit_context_we_can_see_expected_and_got_under_method",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
} ],
"passed": 3,
"path": "res://tests/unit/test.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/test.test.gd",
"tags": [  ],
"test": ExtResource( 19 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 3
}, {
"context": "Given a Signal Watcher",
"methods": [ {
"assertions": [ {
"actual": "signal: multiple was emitted from [Node:6320] 2",
"context": "Then we can track how many times we emitted it",
"expected": "signal: multiple was emitted from [Node:6320] 2",
"success": true
} ],
"context": "When we watch and signal and emit it multiple times",
"fullname": "test_When_we_watch_a_signal_and_emit_it_multiple_times",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Signal: example was not emitted from [Node:6320]",
"context": "Then it does not capture the non-emitted signal",
"expected": "Signal: example was not emitted from [Node:6320]",
"success": true
} ],
"context": "When we watch and do not emit a signal",
"fullname": "test_When_we_watch_and_do_not_emit_a_signal",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Signal: example was emitted from [Node:6320] with arguments: [1, 20, 5]",
"context": "Then it captures any arguments that where passed when the signal was emitted",
"expected": "Signal: example was emitted from [Node:6320] with arguments: [1, 20, 5]",
"success": true
} ],
"context": "When we watch a signal from an object with no bound variables",
"fullname": "test_When_we_watch_a_signal_from_an_object_with_no_bound_variables",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "signal: example was emitted from [Node:6320]",
"context": "Then it captures the emitted signal",
"expected": "signal: example was emitted from [Node:6320]",
"success": true
} ],
"context": "When we watch and emit a signal",
"fullname": "test_When_we_watch_and_emit_a_signal",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 4,
"path": "res://tests/unit/watcher.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/watcher.test.gd",
"tags": [  ],
"test": ExtResource( 17 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 4
}, {
"context": "Given a Yield",
"methods": [ {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then we set var a to true",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then we set var b to true",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we yield in start twice",
"fullname": "test_When_we_yield_in_start",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then we set var c to true",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then we set var d to true",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we yield in pre thrice",
"fullname": "test_When_we_yield_in_pre",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "[100, Null, Null, Null, Null, Null] is builtin: Array",
"context": "Then we get an array",
"expected": "[100, Null, Null, Null, Null, Null] is builtin: Array",
"success": true
}, {
"actual": "|int| 6 is equal to |int| 6",
"context": "Of size 6",
"expected": "|int| 6 is equal to |int| 6",
"success": true
}, {
"actual": "|int| 100 is equal to |int| 100",
"context": "Where element 0 is 100",
"expected": "|int| 100 is equal to |int| 100",
"success": true
} ],
"context": "When yield(self.yield_value()) returns",
"fullname": "test_When_we_yield_we_get_the_return_value",
"passed": 3,
"success": true,
"time": 0.0,
"total": 3
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then yielder is unpaused",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "The timeout signal of the yielder is connected",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we call until_timeout (with 1.0)",
"fullname": "test_When_we_call_until_timeout",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then the yielder is unpaused",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then the timeout signal of the yielder is connected",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then our signal is connected to the yielder",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we call until signal",
"fullname": "test_When_we_call_until_signal",
"passed": 3,
"success": true,
"time": 0.0,
"total": 3
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then yielder is not active",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When asserting against a test",
"fullname": "test_Yielder_is_not_active_when_asserting",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then we set var e to true",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then we set var f to true",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we yield twice in execute",
"fullname": "test_When_we_yield_in_execute",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then the timeout signal is disconnected",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then the signal-signal is disconnected",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When it is finished",
"fullname": "test_When_yielder_is_finished_signals_are_disconnected",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then the yielder is paused",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When a signal being yielded on is emitted",
"fullname": "test_When_a_signal_being_yielded_on_is_emitted_the_yielder_is_stopped",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then the yielder is paused",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "The timeout signal of the yielder is not connected",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When the yielder times out on until_timeout(0.1)",
"fullname": "test_When_the_yielder_times_out",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then the yielder is paused",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then the timeout signal of the yielder is disconnected",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then our signal to the yielder is disconnected",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When the yielder heres our signal",
"fullname": "test_When_the_yielder_hears_our_signal",
"passed": 3,
"success": true,
"time": 0.0,
"total": 3
} ],
"passed": 11,
"path": "res://tests/unit/yield.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/yield.test.gd",
"tags": [  ],
"test": ExtResource( 18 ),
"yield_time": 1.9
},
"success": true,
"time_taken": 0.0,
"total": 11
}, {
"context": "Given a Boolean Assertion",
"methods": [ {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then it passes",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When calling asserts.is_true(true)",
"fullname": "test_when_calling_asserts_is_true",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| False == false",
"context": "Then it passes",
"expected": "|bool| False == false",
"success": true
} ],
"context": "When calling asserts.is_false(false)",
"fullname": "test_when_calling_asserts_is_false",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| True != false",
"context": "",
"expected": "|bool| True == false",
"success": false
} ],
"context": " intentional failure",
"fullname": "test_intentional_failure",
"passed": 0,
"success": false,
"time": 0.0,
"total": 1
} ],
"passed": 2,
"path": "res://tests/integration/boolean.test.gd",
"source": {
"containers": [ "res://tests/integration", "res://tests" ],
"method": "",
"path": "res://tests/integration/boolean.test.gd",
"tags": [  ],
"test": ExtResource( 20 ),
"yield_time": 0.0
},
"success": false,
"time_taken": 0.0,
"total": 3
}, {
"context": "Default Args",
"methods": [ {
"assertions": [ {
"actual": "|bool| True == true",
"context": "If this method can be reached then we have doubled a script with default argument(s) properly!",
"expected": "|bool| True == true",
"success": true
} ],
"context": " default arguments of interpolate property",
"fullname": "test_default_arguments_of_interpolate_property",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 1,
"path": "res://tests/integration/default_args.test.gd",
"source": {
"containers": [ "res://tests/integration", "res://tests" ],
"method": "",
"path": "res://tests/integration/default_args.test.gd",
"tags": [  ],
"test": ExtResource( 10 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 1
}, {
"context": "Given is_on_floor",
"methods": [ {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then it can be stubbed",
"expected": "|bool| True == true",
"success": true
} ],
"context": "From a user-defined script",
"fullname": "test_stubbing_is_on_floor_method_from_user_defined_class",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then it can be stubbed",
"expected": "|bool| True == true",
"success": true
} ],
"context": "From a child node of a scene without scripts",
"fullname": "test_stubbing_is_on_floor_as_child_node_with_no_script",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then it can be stubbed",
"expected": "|bool| True == true",
"success": true
} ],
"context": "From a built-in KinematicBody2D2",
"fullname": "test_stubbing_is_on_floor_method_from_builtin_class2",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 3,
"path": "res://tests/integration/on_floor.test.gd",
"source": {
"containers": [ "res://tests/integration", "res://tests" ],
"method": "",
"path": "res://tests/integration/on_floor.test.gd",
"tags": [  ],
"test": ExtResource( 5 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 3
}, {
"context": "Given a Scene Director",
"methods": [ {
"assertions": [ {
"actual": "|NodePath| A is equal to |NodePath| A",
"context": "We have the correct NodePath Set",
"expected": "|NodePath| A is equal to |NodePath| A",
"success": true
} ],
"context": "When we add it to the tree it runs",
"fullname": "test_When_we_add_it_to_the_tree_it_runs",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 9999 is equal to |int| 9999",
"context": "Then we get the stubbed return value",
"expected": "|int| 9999 is equal to |int| 9999",
"success": true
} ],
"context": "When we call a method from the root node that we stubbed",
"fullname": "test_When_we_call_a_method_from_the_root_node_that_we_stubbed",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 999 is equal to |int| 999",
"context": "Then we get the stubbed return value",
"expected": "|int| 999 is equal to |int| 999",
"success": true
} ],
"context": "When we call a method from a child node that we stubbed",
"fullname": "test_When_we_call_a_method_from_a_child_node_that_we_stubbed",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 99 is equal to |int| 99",
"context": "Then we get the stubbed return value",
"expected": "|int| 99 is equal to |int| 99",
"success": true
} ],
"context": "When we call a method from a grandchild node that we stubbed",
"fullname": "test_When_we_call_a_method_from_a_grandchild_node_that_we_stubbed",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|Dictionary| {.:[Reference:6627], A:[Reference:6628], A/B:[Reference:6630], C:[Reference:6629], C/D:[Reference:6631]} is not equal to |Dictionary| {.:[Reference:6641], A:[Reference:6642], A/B:[Reference:6644], C:[Reference:6643], C/D:[Reference:6645]}",
"context": "Then they do not share resources",
"expected": "|Dictionary| {.:[Reference:6627], A:[Reference:6628], A/B:[Reference:6630], C:[Reference:6629], C/D:[Reference:6631]} != |Dictionary| {.:[Reference:6641], A:[Reference:6642], A/B:[Reference:6644], C:[Reference:6643], C/D:[Reference:6645]}",
"success": true
} ],
"context": "When we create two of it for the same scene",
"fullname": "test_When_we_create_two_of_it_for_the_same_scene",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 5,
"path": "res://tests/integration/scene_director.test.gd",
"source": {
"containers": [ "res://tests/integration", "res://tests" ],
"method": "",
"path": "res://tests/integration/scene_director.test.gd",
"tags": [  ],
"test": ExtResource( 4 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 5
}, {
"context": "Given a Script Director",
"methods": [ {
"assertions": [ {
"actual": "|Dictionary| {_enter_tree:{arguments:, default_arguments:}, _exit_tree:{arguments:, default_arguments:}, _get:{arguments:a, default_arguments:a}, _get_configuration_warning:{arguments:, default_arguments:}, _get_editor_description:{arguments:, default_arguments:}, _get_import_path:{arguments:, default_arguments:}, _get_property_list:{arguments:, default_arguments:}, _init:{arguments:, default_arguments:}, _input:{arguments:a, default_arguments:a}, _notification:{arguments:a, default_arguments:a}, _physics_process:{arguments:a, default_arguments:a}, _process:{arguments:a, default_arguments:a}, _ready:{arguments:, default_arguments:}, _set:{arguments:a, b, default_arguments:a, b}, _set_editor_description:{arguments:a, default_arguments:a}, _set_import_path:{arguments:a, default_arguments:a}, _to_string:{arguments:, default_arguments:}, _unhandled_input:{arguments:a, default_arguments:a}, _unhandled_key_input:{arguments:a, default_arguments:a}, add:{arguments:a, b, default_arguments:a, b}, add_child:{arguments:a, b, default_arguments:a, b = False}, add_child_below_node:{arguments:a, b, c, default_arguments:a, b, c = False}, add_to_group:{arguments:a, b, default_arguments:a, b = False}, add_user_signal:{arguments:a, b, default_arguments:a, b = []}, call:{arguments:a, default_arguments:a}, call_deferred:{arguments:a, default_arguments:a}, callv:{arguments:a, b, default_arguments:a, b}, can_process:{arguments:, default_arguments:}, can_translate_messages:{arguments:, default_arguments:}, connect:{arguments:a, b, c, d, e, default_arguments:a, b, c, d = [], e = 0}, disconnect:{arguments:a, b, c, default_arguments:a, b, c}, divide:{arguments:a, b, default_arguments:a, b}, duplicate:{arguments:a, default_arguments:a = 15}, emit_signal:{arguments:a, default_arguments:a}, find_node:{arguments:a, b, c, default_arguments:a, b = True, c = True}, find_parent:{arguments:a, default_arguments:a}, free:{arguments:, default_arguments:}, get:{arguments:a, default_arguments:a}, get_child:{arguments:a, default_arguments:a}, get_child_count:{arguments:, default_arguments:}, get_children:{arguments:, default_arguments:}, get_class:{arguments:, default_arguments:}, get_custom_multiplayer:{arguments:, default_arguments:}, get_filename:{arguments:, default_arguments:}, get_groups:{arguments:, default_arguments:}, get_incoming_connections:{arguments:, default_arguments:}, get_index:{arguments:, default_arguments:}, get_indexed:{arguments:a, default_arguments:a}, get_instance_id:{arguments:, default_arguments:}, get_meta:{arguments:a, default_arguments:a}, get_meta_list:{arguments:, default_arguments:}, get_method_list:{arguments:, default_arguments:}, get_multiplayer:{arguments:, default_arguments:}, get_name:{arguments:, default_arguments:}, get_network_master:{arguments:, default_arguments:}, get_node:{arguments:a, default_arguments:a}, get_node_and_resource:{arguments:a, default_arguments:a}, get_node_or_null:{arguments:a, default_arguments:a}, get_owner:{arguments:, default_arguments:}, get_parent:{arguments:, default_arguments:}, get_path:{arguments:, default_arguments:}, get_path_to:{arguments:a, default_arguments:a}, get_pause_mode:{arguments:, default_arguments:}, get_physics_process_delta_time:{arguments:, default_arguments:}, get_position_in_parent:{arguments:, default_arguments:}, get_process_delta_time:{arguments:, default_arguments:}, get_process_priority:{arguments:, default_arguments:}, get_property_list:{arguments:, default_arguments:}, get_scene_instance_load_placeholder:{arguments:, default_arguments:}, get_script:{arguments:, default_arguments:}, get_signal_connection_list:{arguments:a, default_arguments:a}, get_signal_list:{arguments:, default_arguments:}, get_tree:{arguments:, default_arguments:}, get_viewport:{arguments:, default_arguments:}, has_meta:{arguments:a, default_arguments:a}, has_method:{arguments:a, default_arguments:a}, has_node:{arguments:a, default_arguments:a}, has_node_and_resource:{arguments:a, default_arguments:a}, has_signal:{arguments:a, default_arguments:a}, has_user_signal:{arguments:a, default_arguments:a}, is_a_parent_of:{arguments:a, default_arguments:a}, is_blocking_signals:{arguments:, default_arguments:}, is_class:{arguments:a, default_arguments:a}, is_connected:{arguments:a, b, c, default_arguments:a, b, c}, is_displayed_folded:{arguments:, default_arguments:}, is_greater_than:{arguments:a, default_arguments:a}, is_in_group:{arguments:a, default_arguments:a}, is_inside_tree:{arguments:, default_arguments:}, is_network_master:{arguments:, default_arguments:}, is_physics_processing:{arguments:, default_arguments:}, is_physics_processing_internal:{arguments:, default_arguments:}, is_processing:{arguments:, default_arguments:}, is_processing_input:{arguments:, default_arguments:}, is_processing_internal:{arguments:, default_arguments:}, is_processing_unhandled_input:{arguments:, default_arguments:}, is_processing_unhandled_key_input:{arguments:, default_arguments:}, is_queued_for_deletion:{arguments:, default_arguments:}, math_fight:{arguments:, default_arguments:}, move_child:{arguments:a, b, default_arguments:a, b}, multiply:{arguments:a, b, default_arguments:a, b}, notification:{arguments:a, b, default_arguments:a, b = False}, pi:{arguments:, default_arguments:}, print_stray_nodes:{arguments:, default_arguments:}, print_tree:{arguments:, default_arguments:}, print_tree_pretty:{arguments:, default_arguments:}, propagate_call:{arguments:a, b, c, default_arguments:a, b = [], c = False}, propagate_notification:{arguments:a, default_arguments:a}, property_list_changed_notify:{arguments:, default_arguments:}, queue_free:{arguments:, default_arguments:}, raise:{arguments:, default_arguments:}, remove_and_skip:{arguments:, default_arguments:}, remove_child:{arguments:a, default_arguments:a}, remove_from_group:{arguments:a, default_arguments:a}, remove_meta:{arguments:a, default_arguments:a}, replace_by:{arguments:a, b, default_arguments:a, b = False}, request_ready:{arguments:, default_arguments:}, rpc:{arguments:a, default_arguments:a}, rpc_config:{arguments:a, b, default_arguments:a, b}, rpc_id:{arguments:a, b, default_arguments:a, b}, rpc_unreliable:{arguments:a, default_arguments:a}, rpc_unreliable_id:{arguments:a, b, default_arguments:a, b}, rset:{arguments:a, b, default_arguments:a, b}, rset_config:{arguments:a, b, default_arguments:a, b}, rset_id:{arguments:a, b, c, default_arguments:a, b, c}, rset_unreliable:{arguments:a, b, default_arguments:a, b}, rset_unreliable_id:{arguments:a, b, c, default_arguments:a, b, c}, set:{arguments:a, b, default_arguments:a, b}, set_block_signals:{arguments:a, default_arguments:a}, set_custom_multiplayer:{arguments:a, default_arguments:a}, set_deferred:{arguments:a, b, default_arguments:a, b}, set_display_folded:{arguments:a, default_arguments:a}, set_filename:{arguments:a, default_arguments:a}, set_indexed:{arguments:a, b, default_arguments:a, b}, set_message_translation:{arguments:a, default_arguments:a}, set_meta:{arguments:a, b, default_arguments:a, b}, set_name:{arguments:a, default_arguments:a}, set_network_master:{arguments:a, b, default_arguments:a, b = True}, set_owner:{arguments:a, default_arguments:a}, set_pause_mode:{arguments:a, default_arguments:a}, set_physics_process:{arguments:a, default_arguments:a}, set_physics_process_internal:{arguments:a, default_arguments:a}, set_process:{arguments:a, default_arguments:a}, set_process_input:{arguments:a, default_arguments:a}, set_process_internal:{arguments:a, default_arguments:a}, set_process_priority:{arguments:a, default_arguments:a}, set_process_unhandled_input:{arguments:a, default_arguments:a}, set_process_unhandled_key_input:{arguments:a, default_arguments:a}, set_scene_instance_load_placeholder:{arguments:a, default_arguments:a}, set_script:{arguments:a, default_arguments:a}, subtract:{arguments:a, b, default_arguments:a, b}, sum:{arguments:a, default_arguments:a}, to_string:{arguments:, default_arguments:}, tr:{arguments:a, default_arguments:a}, update_configuration_warning:{arguments:, default_arguments:}} is not equal to |Dictionary| {_enter_tree:{arguments:, default_arguments:}, _exit_tree:{arguments:, default_arguments:}, _get:{arguments:a, default_arguments:a}, _get_configuration_warning:{arguments:, default_arguments:}, _get_editor_description:{arguments:, default_arguments:}, _get_import_path:{arguments:, default_arguments:}, _get_property_list:{arguments:, default_arguments:}, _init:{arguments:, default_arguments:}, _input:{arguments:a, default_arguments:a}, _notification:{arguments:a, default_arguments:a}, _physics_process:{arguments:a, default_arguments:a}, _process:{arguments:a, default_arguments:a}, _ready:{arguments:, default_arguments:}, _set:{arguments:a, b, default_arguments:a, b}, _set_editor_description:{arguments:a, default_arguments:a}, _set_import_path:{arguments:a, default_arguments:a}, _to_string:{arguments:, default_arguments:}, _unhandled_input:{arguments:a, default_arguments:a}, _unhandled_key_input:{arguments:a, default_arguments:a}, add:{arguments:a, b, default_arguments:a, b}, add_child:{arguments:a, b, default_arguments:a, b = False}, add_child_below_node:{arguments:a, b, c, default_arguments:a, b, c = False}, add_to_group:{arguments:a, b, default_arguments:a, b = False}, add_user_signal:{arguments:a, b, default_arguments:a, b = []}, call:{arguments:a, default_arguments:a}, call_deferred:{arguments:a, default_arguments:a}, callv:{arguments:a, b, default_arguments:a, b}, can_process:{arguments:, default_arguments:}, can_translate_messages:{arguments:, default_arguments:}, connect:{arguments:a, b, c, d, e, default_arguments:a, b, c, d = [], e = 0}, disconnect:{arguments:a, b, c, default_arguments:a, b, c}, divide:{arguments:a, b, default_arguments:a, b}, duplicate:{arguments:a, default_arguments:a = 15}, emit_signal:{arguments:a, default_arguments:a}, find_node:{arguments:a, b, c, default_arguments:a, b = True, c = True}, find_parent:{arguments:a, default_arguments:a}, free:{arguments:, default_arguments:}, get:{arguments:a, default_arguments:a}, get_child:{arguments:a, default_arguments:a}, get_child_count:{arguments:, default_arguments:}, get_children:{arguments:, default_arguments:}, get_class:{arguments:, default_arguments:}, get_custom_multiplayer:{arguments:, default_arguments:}, get_filename:{arguments:, default_arguments:}, get_groups:{arguments:, default_arguments:}, get_incoming_connections:{arguments:, default_arguments:}, get_index:{arguments:, default_arguments:}, get_indexed:{arguments:a, default_arguments:a}, get_instance_id:{arguments:, default_arguments:}, get_meta:{arguments:a, default_arguments:a}, get_meta_list:{arguments:, default_arguments:}, get_method_list:{arguments:, default_arguments:}, get_multiplayer:{arguments:, default_arguments:}, get_name:{arguments:, default_arguments:}, get_network_master:{arguments:, default_arguments:}, get_node:{arguments:a, default_arguments:a}, get_node_and_resource:{arguments:a, default_arguments:a}, get_node_or_null:{arguments:a, default_arguments:a}, get_owner:{arguments:, default_arguments:}, get_parent:{arguments:, default_arguments:}, get_path:{arguments:, default_arguments:}, get_path_to:{arguments:a, default_arguments:a}, get_pause_mode:{arguments:, default_arguments:}, get_physics_process_delta_time:{arguments:, default_arguments:}, get_position_in_parent:{arguments:, default_arguments:}, get_process_delta_time:{arguments:, default_arguments:}, get_process_priority:{arguments:, default_arguments:}, get_property_list:{arguments:, default_arguments:}, get_scene_instance_load_placeholder:{arguments:, default_arguments:}, get_script:{arguments:, default_arguments:}, get_signal_connection_list:{arguments:a, default_arguments:a}, get_signal_list:{arguments:, default_arguments:}, get_tree:{arguments:, default_arguments:}, get_viewport:{arguments:, default_arguments:}, has_meta:{arguments:a, default_arguments:a}, has_method:{arguments:a, default_arguments:a}, has_node:{arguments:a, default_arguments:a}, has_node_and_resource:{arguments:a, default_arguments:a}, has_signal:{arguments:a, default_arguments:a}, has_user_signal:{arguments:a, default_arguments:a}, is_a_parent_of:{arguments:a, default_arguments:a}, is_blocking_signals:{arguments:, default_arguments:}, is_class:{arguments:a, default_arguments:a}, is_connected:{arguments:a, b, c, default_arguments:a, b, c}, is_displayed_folded:{arguments:, default_arguments:}, is_greater_than:{arguments:a, default_arguments:a}, is_in_group:{arguments:a, default_arguments:a}, is_inside_tree:{arguments:, default_arguments:}, is_network_master:{arguments:, default_arguments:}, is_physics_processing:{arguments:, default_arguments:}, is_physics_processing_internal:{arguments:, default_arguments:}, is_processing:{arguments:, default_arguments:}, is_processing_input:{arguments:, default_arguments:}, is_processing_internal:{arguments:, default_arguments:}, is_processing_unhandled_input:{arguments:, default_arguments:}, is_processing_unhandled_key_input:{arguments:, default_arguments:}, is_queued_for_deletion:{arguments:, default_arguments:}, math_fight:{arguments:, default_arguments:}, move_child:{arguments:a, b, default_arguments:a, b}, multiply:{arguments:a, b, default_arguments:a, b}, notification:{arguments:a, b, default_arguments:a, b = False}, pi:{arguments:, default_arguments:}, print_stray_nodes:{arguments:, default_arguments:}, print_tree:{arguments:, default_arguments:}, print_tree_pretty:{arguments:, default_arguments:}, propagate_call:{arguments:a, b, c, default_arguments:a, b = [], c = False}, propagate_notification:{arguments:a, default_arguments:a}, property_list_changed_notify:{arguments:, default_arguments:}, queue_free:{arguments:, default_arguments:}, raise:{arguments:, default_arguments:}, remove_and_skip:{arguments:, default_arguments:}, remove_child:{arguments:a, default_arguments:a}, remove_from_group:{arguments:a, default_arguments:a}, remove_meta:{arguments:a, default_arguments:a}, replace_by:{arguments:a, b, default_arguments:a, b = False}, request_ready:{arguments:, default_arguments:}, rpc:{arguments:a, default_arguments:a}, rpc_config:{arguments:a, b, default_arguments:a, b}, rpc_id:{arguments:a, b, default_arguments:a, b}, rpc_unreliable:{arguments:a, default_arguments:a}, rpc_unreliable_id:{arguments:a, b, default_arguments:a, b}, rset:{arguments:a, b, default_arguments:a, b}, rset_config:{arguments:a, b, default_arguments:a, b}, rset_id:{arguments:a, b, c, default_arguments:a, b, c}, rset_unreliable:{arguments:a, b, default_arguments:a, b}, rset_unreliable_id:{arguments:a, b, c, default_arguments:a, b, c}, set:{arguments:a, b, default_arguments:a, b}, set_block_signals:{arguments:a, default_arguments:a}, set_custom_multiplayer:{arguments:a, default_arguments:a}, set_deferred:{arguments:a, b, default_arguments:a, b}, set_display_folded:{arguments:a, default_arguments:a}, set_filename:{arguments:a, default_arguments:a}, set_indexed:{arguments:a, b, default_arguments:a, b}, set_message_translation:{arguments:a, default_arguments:a}, set_meta:{arguments:a, b, default_arguments:a, b}, set_name:{arguments:a, default_arguments:a}, set_network_master:{arguments:a, b, default_arguments:a, b = True}, set_owner:{arguments:a, default_arguments:a}, set_pause_mode:{arguments:a, default_arguments:a}, set_physics_process:{arguments:a, default_arguments:a}, set_physics_process_internal:{arguments:a, default_arguments:a}, set_process:{arguments:a, default_arguments:a}, set_process_input:{arguments:a, default_arguments:a}, set_process_internal:{arguments:a, default_arguments:a}, set_process_priority:{arguments:a, default_arguments:a}, set_process_unhandled_input:{arguments:a, default_arguments:a}, set_process_unhandled_key_input:{arguments:a, default_arguments:a}, set_scene_instance_load_placeholder:{arguments:a, default_arguments:a}, set_script:{arguments:a, default_arguments:a}, subtract:{arguments:a, b, default_arguments:a, b}, sum:{arguments:a, default_arguments:a}, to_string:{arguments:, default_arguments:}, tr:{arguments:a, default_arguments:a}, update_configuration_warning:{arguments:, default_arguments:}}",
"context": "Then they do not share resources",
"expected": "|Dictionary| {_enter_tree:{arguments:, default_arguments:}, _exit_tree:{arguments:, default_arguments:}, _get:{arguments:a, default_arguments:a}, _get_configuration_warning:{arguments:, default_arguments:}, _get_editor_description:{arguments:, default_arguments:}, _get_import_path:{arguments:, default_arguments:}, _get_property_list:{arguments:, default_arguments:}, _init:{arguments:, default_arguments:}, _input:{arguments:a, default_arguments:a}, _notification:{arguments:a, default_arguments:a}, _physics_process:{arguments:a, default_arguments:a}, _process:{arguments:a, default_arguments:a}, _ready:{arguments:, default_arguments:}, _set:{arguments:a, b, default_arguments:a, b}, _set_editor_description:{arguments:a, default_arguments:a}, _set_import_path:{arguments:a, default_arguments:a}, _to_string:{arguments:, default_arguments:}, _unhandled_input:{arguments:a, default_arguments:a}, _unhandled_key_input:{arguments:a, default_arguments:a}, add:{arguments:a, b, default_arguments:a, b}, add_child:{arguments:a, b, default_arguments:a, b = False}, add_child_below_node:{arguments:a, b, c, default_arguments:a, b, c = False}, add_to_group:{arguments:a, b, default_arguments:a, b = False}, add_user_signal:{arguments:a, b, default_arguments:a, b = []}, call:{arguments:a, default_arguments:a}, call_deferred:{arguments:a, default_arguments:a}, callv:{arguments:a, b, default_arguments:a, b}, can_process:{arguments:, default_arguments:}, can_translate_messages:{arguments:, default_arguments:}, connect:{arguments:a, b, c, d, e, default_arguments:a, b, c, d = [], e = 0}, disconnect:{arguments:a, b, c, default_arguments:a, b, c}, divide:{arguments:a, b, default_arguments:a, b}, duplicate:{arguments:a, default_arguments:a = 15}, emit_signal:{arguments:a, default_arguments:a}, find_node:{arguments:a, b, c, default_arguments:a, b = True, c = True}, find_parent:{arguments:a, default_arguments:a}, free:{arguments:, default_arguments:}, get:{arguments:a, default_arguments:a}, get_child:{arguments:a, default_arguments:a}, get_child_count:{arguments:, default_arguments:}, get_children:{arguments:, default_arguments:}, get_class:{arguments:, default_arguments:}, get_custom_multiplayer:{arguments:, default_arguments:}, get_filename:{arguments:, default_arguments:}, get_groups:{arguments:, default_arguments:}, get_incoming_connections:{arguments:, default_arguments:}, get_index:{arguments:, default_arguments:}, get_indexed:{arguments:a, default_arguments:a}, get_instance_id:{arguments:, default_arguments:}, get_meta:{arguments:a, default_arguments:a}, get_meta_list:{arguments:, default_arguments:}, get_method_list:{arguments:, default_arguments:}, get_multiplayer:{arguments:, default_arguments:}, get_name:{arguments:, default_arguments:}, get_network_master:{arguments:, default_arguments:}, get_node:{arguments:a, default_arguments:a}, get_node_and_resource:{arguments:a, default_arguments:a}, get_node_or_null:{arguments:a, default_arguments:a}, get_owner:{arguments:, default_arguments:}, get_parent:{arguments:, default_arguments:}, get_path:{arguments:, default_arguments:}, get_path_to:{arguments:a, default_arguments:a}, get_pause_mode:{arguments:, default_arguments:}, get_physics_process_delta_time:{arguments:, default_arguments:}, get_position_in_parent:{arguments:, default_arguments:}, get_process_delta_time:{arguments:, default_arguments:}, get_process_priority:{arguments:, default_arguments:}, get_property_list:{arguments:, default_arguments:}, get_scene_instance_load_placeholder:{arguments:, default_arguments:}, get_script:{arguments:, default_arguments:}, get_signal_connection_list:{arguments:a, default_arguments:a}, get_signal_list:{arguments:, default_arguments:}, get_tree:{arguments:, default_arguments:}, get_viewport:{arguments:, default_arguments:}, has_meta:{arguments:a, default_arguments:a}, has_method:{arguments:a, default_arguments:a}, has_node:{arguments:a, default_arguments:a}, has_node_and_resource:{arguments:a, default_arguments:a}, has_signal:{arguments:a, default_arguments:a}, has_user_signal:{arguments:a, default_arguments:a}, is_a_parent_of:{arguments:a, default_arguments:a}, is_blocking_signals:{arguments:, default_arguments:}, is_class:{arguments:a, default_arguments:a}, is_connected:{arguments:a, b, c, default_arguments:a, b, c}, is_displayed_folded:{arguments:, default_arguments:}, is_greater_than:{arguments:a, default_arguments:a}, is_in_group:{arguments:a, default_arguments:a}, is_inside_tree:{arguments:, default_arguments:}, is_network_master:{arguments:, default_arguments:}, is_physics_processing:{arguments:, default_arguments:}, is_physics_processing_internal:{arguments:, default_arguments:}, is_processing:{arguments:, default_arguments:}, is_processing_input:{arguments:, default_arguments:}, is_processing_internal:{arguments:, default_arguments:}, is_processing_unhandled_input:{arguments:, default_arguments:}, is_processing_unhandled_key_input:{arguments:, default_arguments:}, is_queued_for_deletion:{arguments:, default_arguments:}, math_fight:{arguments:, default_arguments:}, move_child:{arguments:a, b, default_arguments:a, b}, multiply:{arguments:a, b, default_arguments:a, b}, notification:{arguments:a, b, default_arguments:a, b = False}, pi:{arguments:, default_arguments:}, print_stray_nodes:{arguments:, default_arguments:}, print_tree:{arguments:, default_arguments:}, print_tree_pretty:{arguments:, default_arguments:}, propagate_call:{arguments:a, b, c, default_arguments:a, b = [], c = False}, propagate_notification:{arguments:a, default_arguments:a}, property_list_changed_notify:{arguments:, default_arguments:}, queue_free:{arguments:, default_arguments:}, raise:{arguments:, default_arguments:}, remove_and_skip:{arguments:, default_arguments:}, remove_child:{arguments:a, default_arguments:a}, remove_from_group:{arguments:a, default_arguments:a}, remove_meta:{arguments:a, default_arguments:a}, replace_by:{arguments:a, b, default_arguments:a, b = False}, request_ready:{arguments:, default_arguments:}, rpc:{arguments:a, default_arguments:a}, rpc_config:{arguments:a, b, default_arguments:a, b}, rpc_id:{arguments:a, b, default_arguments:a, b}, rpc_unreliable:{arguments:a, default_arguments:a}, rpc_unreliable_id:{arguments:a, b, default_arguments:a, b}, rset:{arguments:a, b, default_arguments:a, b}, rset_config:{arguments:a, b, default_arguments:a, b}, rset_id:{arguments:a, b, c, default_arguments:a, b, c}, rset_unreliable:{arguments:a, b, default_arguments:a, b}, rset_unreliable_id:{arguments:a, b, c, default_arguments:a, b, c}, set:{arguments:a, b, default_arguments:a, b}, set_block_signals:{arguments:a, default_arguments:a}, set_custom_multiplayer:{arguments:a, default_arguments:a}, set_deferred:{arguments:a, b, default_arguments:a, b}, set_display_folded:{arguments:a, default_arguments:a}, set_filename:{arguments:a, default_arguments:a}, set_indexed:{arguments:a, b, default_arguments:a, b}, set_message_translation:{arguments:a, default_arguments:a}, set_meta:{arguments:a, b, default_arguments:a, b}, set_name:{arguments:a, default_arguments:a}, set_network_master:{arguments:a, b, default_arguments:a, b = True}, set_owner:{arguments:a, default_arguments:a}, set_pause_mode:{arguments:a, default_arguments:a}, set_physics_process:{arguments:a, default_arguments:a}, set_physics_process_internal:{arguments:a, default_arguments:a}, set_process:{arguments:a, default_arguments:a}, set_process_input:{arguments:a, default_arguments:a}, set_process_internal:{arguments:a, default_arguments:a}, set_process_priority:{arguments:a, default_arguments:a}, set_process_unhandled_input:{arguments:a, default_arguments:a}, set_process_unhandled_key_input:{arguments:a, default_arguments:a}, set_scene_instance_load_placeholder:{arguments:a, default_arguments:a}, set_script:{arguments:a, default_arguments:a}, subtract:{arguments:a, b, default_arguments:a, b}, sum:{arguments:a, default_arguments:a}, to_string:{arguments:, default_arguments:}, tr:{arguments:a, default_arguments:a}, update_configuration_warning:{arguments:, default_arguments:}} != |Dictionary| {_enter_tree:{arguments:, default_arguments:}, _exit_tree:{arguments:, default_arguments:}, _get:{arguments:a, default_arguments:a}, _get_configuration_warning:{arguments:, default_arguments:}, _get_editor_description:{arguments:, default_arguments:}, _get_import_path:{arguments:, default_arguments:}, _get_property_list:{arguments:, default_arguments:}, _init:{arguments:, default_arguments:}, _input:{arguments:a, default_arguments:a}, _notification:{arguments:a, default_arguments:a}, _physics_process:{arguments:a, default_arguments:a}, _process:{arguments:a, default_arguments:a}, _ready:{arguments:, default_arguments:}, _set:{arguments:a, b, default_arguments:a, b}, _set_editor_description:{arguments:a, default_arguments:a}, _set_import_path:{arguments:a, default_arguments:a}, _to_string:{arguments:, default_arguments:}, _unhandled_input:{arguments:a, default_arguments:a}, _unhandled_key_input:{arguments:a, default_arguments:a}, add:{arguments:a, b, default_arguments:a, b}, add_child:{arguments:a, b, default_arguments:a, b = False}, add_child_below_node:{arguments:a, b, c, default_arguments:a, b, c = False}, add_to_group:{arguments:a, b, default_arguments:a, b = False}, add_user_signal:{arguments:a, b, default_arguments:a, b = []}, call:{arguments:a, default_arguments:a}, call_deferred:{arguments:a, default_arguments:a}, callv:{arguments:a, b, default_arguments:a, b}, can_process:{arguments:, default_arguments:}, can_translate_messages:{arguments:, default_arguments:}, connect:{arguments:a, b, c, d, e, default_arguments:a, b, c, d = [], e = 0}, disconnect:{arguments:a, b, c, default_arguments:a, b, c}, divide:{arguments:a, b, default_arguments:a, b}, duplicate:{arguments:a, default_arguments:a = 15}, emit_signal:{arguments:a, default_arguments:a}, find_node:{arguments:a, b, c, default_arguments:a, b = True, c = True}, find_parent:{arguments:a, default_arguments:a}, free:{arguments:, default_arguments:}, get:{arguments:a, default_arguments:a}, get_child:{arguments:a, default_arguments:a}, get_child_count:{arguments:, default_arguments:}, get_children:{arguments:, default_arguments:}, get_class:{arguments:, default_arguments:}, get_custom_multiplayer:{arguments:, default_arguments:}, get_filename:{arguments:, default_arguments:}, get_groups:{arguments:, default_arguments:}, get_incoming_connections:{arguments:, default_arguments:}, get_index:{arguments:, default_arguments:}, get_indexed:{arguments:a, default_arguments:a}, get_instance_id:{arguments:, default_arguments:}, get_meta:{arguments:a, default_arguments:a}, get_meta_list:{arguments:, default_arguments:}, get_method_list:{arguments:, default_arguments:}, get_multiplayer:{arguments:, default_arguments:}, get_name:{arguments:, default_arguments:}, get_network_master:{arguments:, default_arguments:}, get_node:{arguments:a, default_arguments:a}, get_node_and_resource:{arguments:a, default_arguments:a}, get_node_or_null:{arguments:a, default_arguments:a}, get_owner:{arguments:, default_arguments:}, get_parent:{arguments:, default_arguments:}, get_path:{arguments:, default_arguments:}, get_path_to:{arguments:a, default_arguments:a}, get_pause_mode:{arguments:, default_arguments:}, get_physics_process_delta_time:{arguments:, default_arguments:}, get_position_in_parent:{arguments:, default_arguments:}, get_process_delta_time:{arguments:, default_arguments:}, get_process_priority:{arguments:, default_arguments:}, get_property_list:{arguments:, default_arguments:}, get_scene_instance_load_placeholder:{arguments:, default_arguments:}, get_script:{arguments:, default_arguments:}, get_signal_connection_list:{arguments:a, default_arguments:a}, get_signal_list:{arguments:, default_arguments:}, get_tree:{arguments:, default_arguments:}, get_viewport:{arguments:, default_arguments:}, has_meta:{arguments:a, default_arguments:a}, has_method:{arguments:a, default_arguments:a}, has_node:{arguments:a, default_arguments:a}, has_node_and_resource:{arguments:a, default_arguments:a}, has_signal:{arguments:a, default_arguments:a}, has_user_signal:{arguments:a, default_arguments:a}, is_a_parent_of:{arguments:a, default_arguments:a}, is_blocking_signals:{arguments:, default_arguments:}, is_class:{arguments:a, default_arguments:a}, is_connected:{arguments:a, b, c, default_arguments:a, b, c}, is_displayed_folded:{arguments:, default_arguments:}, is_greater_than:{arguments:a, default_arguments:a}, is_in_group:{arguments:a, default_arguments:a}, is_inside_tree:{arguments:, default_arguments:}, is_network_master:{arguments:, default_arguments:}, is_physics_processing:{arguments:, default_arguments:}, is_physics_processing_internal:{arguments:, default_arguments:}, is_processing:{arguments:, default_arguments:}, is_processing_input:{arguments:, default_arguments:}, is_processing_internal:{arguments:, default_arguments:}, is_processing_unhandled_input:{arguments:, default_arguments:}, is_processing_unhandled_key_input:{arguments:, default_arguments:}, is_queued_for_deletion:{arguments:, default_arguments:}, math_fight:{arguments:, default_arguments:}, move_child:{arguments:a, b, default_arguments:a, b}, multiply:{arguments:a, b, default_arguments:a, b}, notification:{arguments:a, b, default_arguments:a, b = False}, pi:{arguments:, default_arguments:}, print_stray_nodes:{arguments:, default_arguments:}, print_tree:{arguments:, default_arguments:}, print_tree_pretty:{arguments:, default_arguments:}, propagate_call:{arguments:a, b, c, default_arguments:a, b = [], c = False}, propagate_notification:{arguments:a, default_arguments:a}, property_list_changed_notify:{arguments:, default_arguments:}, queue_free:{arguments:, default_arguments:}, raise:{arguments:, default_arguments:}, remove_and_skip:{arguments:, default_arguments:}, remove_child:{arguments:a, default_arguments:a}, remove_from_group:{arguments:a, default_arguments:a}, remove_meta:{arguments:a, default_arguments:a}, replace_by:{arguments:a, b, default_arguments:a, b = False}, request_ready:{arguments:, default_arguments:}, rpc:{arguments:a, default_arguments:a}, rpc_config:{arguments:a, b, default_arguments:a, b}, rpc_id:{arguments:a, b, default_arguments:a, b}, rpc_unreliable:{arguments:a, default_arguments:a}, rpc_unreliable_id:{arguments:a, b, default_arguments:a, b}, rset:{arguments:a, b, default_arguments:a, b}, rset_config:{arguments:a, b, default_arguments:a, b}, rset_id:{arguments:a, b, c, default_arguments:a, b, c}, rset_unreliable:{arguments:a, b, default_arguments:a, b}, rset_unreliable_id:{arguments:a, b, c, default_arguments:a, b, c}, set:{arguments:a, b, default_arguments:a, b}, set_block_signals:{arguments:a, default_arguments:a}, set_custom_multiplayer:{arguments:a, default_arguments:a}, set_deferred:{arguments:a, b, default_arguments:a, b}, set_display_folded:{arguments:a, default_arguments:a}, set_filename:{arguments:a, default_arguments:a}, set_indexed:{arguments:a, b, default_arguments:a, b}, set_message_translation:{arguments:a, default_arguments:a}, set_meta:{arguments:a, b, default_arguments:a, b}, set_name:{arguments:a, default_arguments:a}, set_network_master:{arguments:a, b, default_arguments:a, b = True}, set_owner:{arguments:a, default_arguments:a}, set_pause_mode:{arguments:a, default_arguments:a}, set_physics_process:{arguments:a, default_arguments:a}, set_physics_process_internal:{arguments:a, default_arguments:a}, set_process:{arguments:a, default_arguments:a}, set_process_input:{arguments:a, default_arguments:a}, set_process_internal:{arguments:a, default_arguments:a}, set_process_priority:{arguments:a, default_arguments:a}, set_process_unhandled_input:{arguments:a, default_arguments:a}, set_process_unhandled_key_input:{arguments:a, default_arguments:a}, set_scene_instance_load_placeholder:{arguments:a, default_arguments:a}, set_script:{arguments:a, default_arguments:a}, subtract:{arguments:a, b, default_arguments:a, b}, sum:{arguments:a, default_arguments:a}, to_string:{arguments:, default_arguments:}, tr:{arguments:a, default_arguments:a}, update_configuration_warning:{arguments:, default_arguments:}}",
"success": true
} ],
"context": "When we create two of it for the same script",
"fullname": "test_When_we_create_two_of_it_for_the_same_script",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|Object| [Node:6657] is equal to |Object| [Node:6657]",
"context": "Then we get the same double back",
"expected": "|Object| [Node:6657] is equal to |Object| [Node:6657]",
"success": true
} ],
"context": "When we call the double the second time",
"fullname": "test_When_we_call_double_a_second_time_on",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Reference:6664] is instance of class: [GDScript:1564]",
"context": "Then we get that inner class back",
"expected": "[Reference:6664] is instance of class: [GDScript:1564]",
"success": true
} ],
"context": "When we double an inner class",
"fullname": "test_When_we_double_an_inner_class",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 3,
"path": "res://tests/integration/script_director.test.gd",
"source": {
"containers": [ "res://tests/integration", "res://tests" ],
"method": "",
"path": "res://tests/integration/script_director.test.gd",
"tags": [  ],
"test": ExtResource( 13 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 3
}, {
"context": "Given a Test Double",
"methods": [ {
"assertions": [ {
"actual": "|String| Jackie is equal to |String| Jackie",
"context": "Then we can double the object successfully",
"expected": "|String| Jackie is equal to |String| Jackie",
"success": true
} ],
"context": "When we pass in dependecies on double",
"fullname": "test_When_we_pass_in_deps_on_double",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "(1, 1) is builtin: Vector2",
"context": "Then we can call methods on it",
"expected": "(1, 1) is builtin: Vector2",
"success": true
} ],
"context": "When we double an inner class",
"fullname": "test_When_we_double_an_inner_class",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "method: add was called with arguments: [10, 10]",
"context": "Then we can see that it was called with those arguments",
"expected": "method: add was called with arguments: [10, 10]",
"success": true
} ],
"context": "When we pass arguments to a method call that we are spying on",
"fullname": "test_When_we_pass_arguments_to_a_method_call_that_we_are_spying_on",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|float| 6.283185 is equal to |float| 6.283185",
"context": "Then we can call the static methods of that inner double",
"expected": "|float| 6.283185 is equal to |float| 6.283185",
"success": true
} ],
"context": "When we add an doubled inner class to it",
"fullname": "test_When_we_add_a_doubled_inner_class_to_it",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 9999 is equal to |int| 9999",
"context": "Then it returns the corresponding value when the partial pattern matches",
"expected": "|int| 9999 is equal to |int| 9999",
"success": true
} ],
"context": "When we call a method that was stubbed with a partial (ie using any()) argument pattern",
"fullname": "test_When_we_call_a_method_that_was_stubbed_with_a_partial_argument_pattern",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "add was called",
"context": "Then we can see that it was called at least once",
"expected": "add was called",
"success": true
} ],
"context": "When we call a method that we are spying on",
"fullname": "test_When_we_call_a_method_that_we_are_spying_on",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 4 is equal to |int| 4",
"context": "Then we get the correct result",
"expected": "|int| 4 is equal to |int| 4",
"success": true
} ],
"context": "When we call an add(x, y) method that we haven't directed",
"fullname": "test_When_we_call_an_add_method_that_we_have_not_directed",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|null| Null == null",
"context": "Then we get the stubbed value back",
"expected": "|null| Null == null",
"success": true
} ],
"context": "When we stub a method of a doubled inner class",
"fullname": "test_When_we_stub_a_method_of_a_double_inner_class",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 99 is equal to |int| 99",
"context": "Then it affects the state of the double",
"expected": "|int| 99 is equal to |int| 99",
"success": true
} ],
"context": "When we pass a funcref as a subcall",
"fullname": "test_When_we_pass_a_funcref_as_a_subcall",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|Array| [10, 5] is equal to |Array| [10, 5]",
"context": "Then it returns a value",
"expected": "|Array| [10, 5] is equal to |Array| [10, 5]",
"success": true
} ],
"context": "When we pass an Object with a call_func function",
"fullname": "test_When_we_pass_an_object_with_callfunc_method_as_a_subcall",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 9999 is equal to |int| 9999",
"context": "Then it returns the corresponding value when the pattern matches",
"expected": "|int| 9999 is equal to |int| 9999",
"success": true
} ],
"context": "When we call a method that was stubbed with an argument pattern that includes a non-primitive object",
"fullname": "test_When_we_call_a_method_that_was_stubbed_with_an_argument_pattern_that_includes_a_non_primitive_object",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|null| Null == null",
"context": "Then we get null",
"expected": "|null| Null == null",
"success": true
} ],
"context": "When we call a method that we have dummied",
"fullname": "test_When_we_call_a_method_that_we_have_dummied",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 99 is equal to |int| 99",
"context": "Then it returns a value",
"expected": "|int| 99 is equal to |int| 99",
"success": true
} ],
"context": "When we pass a funcref as a subcall that returns",
"fullname": "test_When_we_pass_a_funcref_as_a_subcall_that_returns_a_value",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then it returns true",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we call a method that we have stubbed to return true",
"fullname": "test_When_we_call_a_method_that_we_have_stubbed_to_return_true",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|Object| [Node:6767] is equal to |Object| [Node:6767]",
"context": "Then it returns that same node",
"expected": "|Object| [Node:6767] is equal to |Object| [Node:6767]",
"success": true
} ],
"context": "When we call a method that we have stubbed to return a node",
"fullname": "test_When_we_call_a_method_that_we_have_stubbed_to_return_a_node",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|String| Jackie is equal to |String| Jackie",
"context": "Then we can double the object successfully",
"expected": "|String| Jackie is equal to |String| Jackie",
"success": true
} ],
"context": "When we pass in dependecies on direct",
"fullname": "test_When_we_pass_in_deps_on_direct",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 100 is equal to |int| 100",
"context": "Then it returns the default stubbed value when the arguments don't match any pattern",
"expected": "|int| 100 is equal to |int| 100",
"success": true
}, {
"actual": "|int| 1000 is equal to |int| 1000",
"context": "Then it returns the the corresponding value to the pattern the arguments matched",
"expected": "|int| 1000 is equal to |int| 1000",
"success": true
} ],
"context": "When we call a method that was stubbed to return different values based on argument patterns",
"fullname": "test_When_we_call_a_method_that_was_stubbed_to_return_different_values_based_on_argument_patterns",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|bool| True is equal to |bool| True",
"context": "Then we can call it",
"expected": "|bool| True is equal to |bool| True",
"success": true
} ],
"context": "When we stubbed a keyworded method by passing in the correct keyword",
"fullname": "test_When_we_stubbed_a_keyword_method_by_passing_in_the_correct_keyword",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 4 is equal to |int| 4",
"context": "Then it calls its super implementation by default",
"expected": "|int| 4 is equal to |int| 4",
"success": true
}, {
"actual": "|int| 9999 is equal to |int| 9999",
"context": "Then it does not call its super implementation when arguments patterns match a different return value",
"expected": "|int| 9999 is equal to |int| 9999",
"success": true
} ],
"context": "When we call a method that we stubbed to call its super implementation by default",
"fullname": "test_When_we_call_a_method_that_we_stubbed_to_call_its_super_implementation_by_default",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
} ],
"passed": 19,
"path": "res://tests/integration/test_double.test.gd",
"source": {
"containers": [ "res://tests/integration", "res://tests" ],
"method": "",
"path": "res://tests/integration/test_double.test.gd",
"tags": [  ],
"test": ExtResource( 14 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 19
}, {
"context": "Given a Boolean Assertion",
"methods": [ {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then it passes",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When calling asserts.is_true(true)",
"fullname": "test_when_calling_asserts_is_true",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| False == false",
"context": "Then it passes",
"expected": "|bool| False == false",
"success": true
} ],
"context": "When calling asserts.is_false(false)",
"fullname": "test_when_calling_asserts_is_false",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| True != false",
"context": "",
"expected": "|bool| True == false",
"success": false
} ],
"context": " intentional failure",
"fullname": "test_intentional_failure",
"passed": 0,
"success": false,
"time": 0.0,
"total": 1
} ],
"passed": 2,
"path": "res://tests/unit/boolean.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/boolean.test.gd",
"tags": [  ],
"test": ExtResource( 11 ),
"yield_time": 0.0
},
"success": false,
"time_taken": 0.0,
"total": 3
}, {
"context": "Given an Equality Assertion",
"methods": [ {
"assertions": [ {
"actual": "|int| 2 is equal or greater |int| 1",
"context": "Then it passes",
"expected": "|int| 2 is equal or greater |int| 1",
"success": true
} ],
"context": "When calling asserts.is_equal_or_greater_than(2, 1)",
"fullname": "test_when_calling_is_equal_or_greater_than",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 2 is greater than |int| 1",
"context": "Then it passes",
"expected": "|int| 2 is greater than |int| 1",
"success": true
} ],
"context": "When calling asserts.is_greater_than(2, 1)",
"fullname": "test_when_calling_is_greater_than",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 1 is equal to |int| 1",
"context": "Then it passes",
"expected": "|int| 1 is equal to |int| 1",
"success": true
} ],
"context": "When calling asserts.is_equal(1, 1)",
"fullname": "test_when_calling_is_equal",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 1 is less than |int| 2",
"context": "Then it passes",
"expected": "|int| 1 is less than |int| 2",
"success": true
} ],
"context": "When calling asserts.is_less_than(2, 1)",
"fullname": "test_when_calling_is_less_than",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 1 is equal or greater |int| 1",
"context": "Then it passes",
"expected": "|int| 1 is equal or greater |int| 1",
"success": true
} ],
"context": "When calling asserts.is_equal_or_greater_than(1, 1)",
"fullname": "test_when_calling_is_equal_or_greater_than_with_equal_values",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 5 is not equal to |int| 6",
"context": "Then it passes",
"expected": "|int| 5 != |int| 6",
"success": true
} ],
"context": "When callign asserts.is_not_equal(5, 6)",
"fullname": "test_when_calling_is_not_equal",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 1 is equal or less than |int| 1",
"context": "Then it passes!",
"expected": "|int| 1 is equal or less than |int| 1",
"success": true
} ],
"context": "When calling asserts.is_equal_or_less_than(1, 1)",
"fullname": "test_when_calling_is_equal_or_less_than_with_equal_values",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 7,
"path": "res://tests/unit/equality.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/equality.test.gd",
"tags": [  ],
"test": ExtResource( 8 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 7
}, {
"context": "Given A File Assertion",
"methods": [ {
"assertions": [ {
"actual": "res://somefile.gd does not exist",
"context": "Then it passes",
"expected": "res://somefile.gd does not exist",
"success": true
} ],
"context": "When calling asserts.file_does_not_exist when there is no file",
"fullname": "test_when_calling_file_does_not_exist_when_there_is_no_file",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": " does not exist",
"context": "Then it passes",
"expected": " does not exist",
"success": true
} ],
"context": "When calling asserts file does not exist when path is empty",
"fullname": "test_when_calling_file_does_not_exist_when_path_is_empty",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "res://tests/unit/file.test.gd exists",
"context": "Then it passes",
"expected": "res://tests/unit/file.test.gd exists",
"success": true
} ],
"context": "When calling asserts.file_exists when the file is this suite",
"fullname": "test_when_calling_file_exists_when_file_is_self",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 3,
"path": "res://tests/unit/file.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/file.test.gd",
"tags": [  ],
"test": ExtResource( 3 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 3
}, {
"context": "Given an Is Instance of class/type Assertion",
"methods": [ {
"assertions": [ {
"actual": "|AABB| 0, 0, 0 - 0, 0, 0 != null",
"context": "AABB is not null",
"expected": "|AABB| 0, 0, 0 - 0, 0, 0 != null",
"success": true
}, {
"actual": "0, 0, 0 - 0, 0, 0 is builtin: AABB",
"context": "Then it passes",
"expected": "0, 0, 0 - 0, 0, 0 is builtin: AABB",
"success": true
} ],
"context": "When calling asserts.is_AABB(aabb: AABB)",
"fullname": "test_when_calling_is_AABB",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|Array| [] != null",
"context": "array is not null",
"expected": "|Array| [] != null",
"success": true
}, {
"actual": "[] is builtin: Array",
"context": "Then it passes",
"expected": "[] is builtin: Array",
"success": true
} ],
"context": "When calling asserts.is_Array(array: Array)",
"fullname": "test_when_calling_is_Array",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|Transform2D| ((1, 0), (0, 1), (0, 0)) != null",
"context": "transform2D is not null",
"expected": "|Transform2D| ((1, 0), (0, 1), (0, 0)) != null",
"success": true
}, {
"actual": "((1, 0), (0, 1), (0, 0)) is builtin: Transform2D",
"context": "Then it passes",
"expected": "((1, 0), (0, 1), (0, 0)) is builtin: Transform2D",
"success": true
} ],
"context": "When calling asserts.is_Transform(transform2D: Transform2D)",
"fullname": "test_when_calling_is_Transform2D",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|Rect2| (0, 0, 0, 0) != null",
"context": "rect2 is not null",
"expected": "|Rect2| (0, 0, 0, 0) != null",
"success": true
}, {
"actual": "(0, 0, 0, 0) is builtin: Rect2",
"context": "Then it passes",
"expected": "(0, 0, 0, 0) is builtin: Rect2",
"success": true
} ],
"context": "When calling asserts.is_Rect2(rect2: Rect2)",
"fullname": "test_when_calling_is_Rect2",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|Vector3| (0, 0, 0) != null",
"context": "vec3 is not null",
"expected": "|Vector3| (0, 0, 0) != null",
"success": true
}, {
"actual": "(0, 0, 0) is builtin: Vector3",
"context": "Then it passes",
"expected": "(0, 0, 0) is builtin: Vector3",
"success": true
} ],
"context": "When calling asserts.is_Vector3(vec3: Vector3",
"fullname": "test_when_calling_is_Vector3",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|Quat| (0, 0, 0, 1) != null",
"context": "quat is not null",
"expected": "|Quat| (0, 0, 0, 1) != null",
"success": true
}, {
"actual": "(0, 0, 0, 1) is builtin: Quat",
"context": "Then it passes",
"expected": "(0, 0, 0, 1) is builtin: Quat",
"success": true
} ],
"context": "When calling asserts.is_Quat(quat: Quat)",
"fullname": "test_when_calling_is_Quat",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "{} is builtin: Dictionary",
"context": "Then it passes",
"expected": "{} is builtin: Dictionary",
"success": true
} ],
"context": "When calling asserts.is_Dictionary({})",
"fullname": "test_when_calling_is_Dictionary",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|PoolIntArray| [] != null",
"context": "ints is not null",
"expected": "|PoolIntArray| [] != null",
"success": true
}, {
"actual": "[] is builtin: PoolIntArray",
"context": "Then it passes",
"expected": "[] is builtin: PoolIntArray",
"success": true
} ],
"context": "When calling asserts.is_PoolIntArray(ints: PoolIntArray)",
"fullname": "test_when_calling_is_PoolIntArray",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|PoolByteArray| [PoolByteArray] != null",
"context": "bytes is not null",
"expected": "|PoolByteArray| [PoolByteArray] != null",
"success": true
}, {
"actual": "[PoolByteArray] is builtin: PoolByteArray",
"context": "Then it passes",
"expected": "[PoolByteArray] is builtin: PoolByteArray",
"success": true
} ],
"context": "When calling asserts.is_PoolByteArray(bytes: PoolByteArray)",
"fullname": "test_when_calling_is_PoolByteArray",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|RID| [RID] != null",
"context": "rid is not null",
"expected": "|RID| [RID] != null",
"success": true
}, {
"actual": "[RID] is builtin: RID",
"context": "Then it passes",
"expected": "[RID] is builtin: RID",
"success": true
} ],
"context": "When calling asserts.is_RID(rid: RID)",
"fullname": "test_when_calling_is_RID",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|PoolStringArray| [] != null",
"context": "strs is not null",
"expected": "|PoolStringArray| [] != null",
"success": true
}, {
"actual": "[] is builtin: PoolStringArray",
"context": "Then it passes",
"expected": "[] is builtin: PoolStringArray",
"success": true
} ],
"context": "When calling is asserts.is_PoolStringArray(strs: PoolStringArray)",
"fullname": "test_when_calling_is_PoolStringArray",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "1 is builtin: float",
"context": "Then it passes",
"expected": "1 is builtin: float",
"success": true
} ],
"context": "When calling asserts.is_float(1.0)",
"fullname": "test_when_calling_is_float",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|PoolColorArray| [PoolColorArray] != null",
"context": "colors is not null",
"expected": "|PoolColorArray| [PoolColorArray] != null",
"success": true
}, {
"actual": "[PoolColorArray] is builtin: PoolColorArray",
"context": "Then it passes",
"expected": "[PoolColorArray] is builtin: PoolColorArray",
"success": true
} ],
"context": "When calling asserts.is_PoolColorArray(colors: PoolColorArray)",
"fullname": "test_when_calling_is_PoolColorArray",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|NodePath| . != null",
"context": "@'Parent/Child' is not null",
"expected": "|NodePath| . != null",
"success": true
}, {
"actual": ". is builtin: NodePath",
"context": "Then it passes",
"expected": ". is builtin: NodePath",
"success": true
} ],
"context": "When calling asserts.is_NodePath(@'Parent/Child')",
"fullname": "test_when_calling_is_NodePath",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|PoolVector2Array| [] != null",
"context": "vec2s is not null",
"expected": "|PoolVector2Array| [] != null",
"success": true
}, {
"actual": "[] is builtin: PoolVector2Array",
"context": "Then it passes",
"expected": "[] is builtin: PoolVector2Array",
"success": true
} ],
"context": "When calling is asserts.is_PoolVector2Array(vec2s: PoolVector2Array)",
"fullname": "test_when_calling_is_PoolVector2Array",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|PoolVector3Array| [] != null",
"context": "vec3s is not null",
"expected": "|PoolVector3Array| [] != null",
"success": true
}, {
"actual": "[] is builtin: PoolVector3Array",
"context": "Then it passes",
"expected": "[] is builtin: PoolVector3Array",
"success": true
} ],
"context": "When calling is asserts.is_PoolVector3Array(vec3s: PoolVector3Array)",
"fullname": "test_when_calling_is_PoolVector3Array",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|Transform| 1, 0, 0, 0, 1, 0, 0, 0, 1 - 0, 0, 0 != null",
"context": "transform is not null",
"expected": "|Transform| 1, 0, 0, 0, 1, 0, 0, 0, 1 - 0, 0, 0 != null",
"success": true
}, {
"actual": "1, 0, 0, 0, 1, 0, 0, 0, 1 - 0, 0, 0 is builtin: Transform",
"context": "Then it passes",
"expected": "1, 0, 0, 0, 1, 0, 0, 0, 1 - 0, 0, 0 is builtin: Transform",
"success": true
} ],
"context": "When calling asserts.is_Transform(transform: Transform)",
"fullname": "test_when_calling_is_Transform",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|String|  != null",
"context": "strs is not null",
"expected": "|String|  != null",
"success": true
}, {
"actual": " is builtin: String",
"context": "Then it passes",
"expected": " is builtin: String",
"success": true
} ],
"context": "When calling asserts.is_string(strs: String)",
"fullname": "test_when_calling_is_string",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|Basis| ((1, 0, 0), (0, 1, 0), (0, 0, 1)) != null",
"context": "basis is not null",
"expected": "|Basis| ((1, 0, 0), (0, 1, 0), (0, 0, 1)) != null",
"success": true
}, {
"actual": "((1, 0, 0), (0, 1, 0), (0, 0, 1)) is builtin: Basis",
"context": "Then it passes",
"expected": "((1, 0, 0), (0, 1, 0), (0, 0, 1)) is builtin: Basis",
"success": true
} ],
"context": "When calling asserts.is_basis(basis: Basis",
"fullname": "test_when_calling_is_Basis",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|Plane| 0, 0, 0, 0 != null",
"context": "plane is not null",
"expected": "|Plane| 0, 0, 0, 0 != null",
"success": true
}, {
"actual": "0, 0, 0, 0 is builtin: Plane",
"context": "then it passes",
"expected": "0, 0, 0, 0 is builtin: Plane",
"success": true
} ],
"context": "When calling asserts.is_Plane(plane: Plane())",
"fullname": "test_when_calling_is_Plane",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|Vector2| (0, 0) != null",
"context": "vec2 is not null",
"expected": "|Vector2| (0, 0) != null",
"success": true
}, {
"actual": "(0, 0) is builtin: Vector2",
"context": "Then it passes",
"expected": "(0, 0) is builtin: Vector2",
"success": true
} ],
"context": "When calling asserts.is_Vector2(vec2)",
"fullname": "test_when_calling_is_Vector2",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|Object| [Node:6867] != null",
"context": "node is not null",
"expected": "|Object| [Node:6867] != null",
"success": true
}, {
"actual": "[Node:6867] is builtin: Object",
"context": "An instance of node is an Object",
"expected": "[Node:6867] is builtin: Object",
"success": true
} ],
"context": "When calling is asserts.object(node: Node)",
"fullname": "test_when_calling_is_object",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|PoolRealArray| [] != null",
"context": "reals is not null",
"expected": "|PoolRealArray| [] != null",
"success": true
}, {
"actual": "[] is builtin: PoolRealArray",
"context": "Then it passes",
"expected": "[] is builtin: PoolRealArray",
"success": true
} ],
"context": "When calling is asserts.is_PoolRealArray(reals: PoolRealArray)",
"fullname": "test_when_calling_is_PoolRealArray",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "True is builtin: bool",
"context": "Then it passes",
"expected": "True is builtin: bool",
"success": true
} ],
"context": "When calling asserts.is_bool(true)",
"fullname": "test_when_calling_is_bool",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "1 is builtin: int",
"context": "Then it passes",
"expected": "1 is builtin: int",
"success": true
} ],
"context": "When callign asserts.is_int(1)",
"fullname": "test_when_calling_is_int",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|Color| 0,0,0,1 != null",
"context": "color is not null",
"expected": "|Color| 0,0,0,1 != null",
"success": true
}, {
"actual": "0,0,0,1 is builtin: Color",
"context": "Then it passes",
"expected": "0,0,0,1 is builtin: Color",
"success": true
} ],
"context": "When calling asserts.is_color(color: Color)",
"fullname": "test_when_calling_is_Color",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
} ],
"passed": 26,
"path": "res://tests/unit/is_instance.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/is_instance.test.gd",
"tags": [  ],
"test": ExtResource( 6 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 26
}, {
"context": "Given an Is Not Instance of class/type Assertion",
"methods": [ {
"assertions": [ {
"actual": "Null is not builtin: Array",
"context": "Then it passes",
"expected": "Null is not builtin: Array",
"success": true
} ],
"context": "when calling asserts.is_not_Array(null)",
"fullname": "test_when_calling_is_not_Array",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Color",
"context": "Then it passes",
"expected": "Null is not builtin: Color",
"success": true
} ],
"context": "when calling asserts.is_not_Color(null)",
"fullname": "test_when_calling_is_not_Color",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: float",
"context": "Then it passes",
"expected": "Null is not builtin: float",
"success": true
} ],
"context": "when calling asserts.is_not_float(null)",
"fullname": "test_when_calling_is_not_float",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: AABB",
"context": "Then it passes",
"expected": "Null is not builtin: AABB",
"success": true
} ],
"context": "when calling asserts.is_not_AABB(null)",
"fullname": "test_when_calling_is_not_AABB",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Basis",
"context": "Then it passes",
"expected": "Null is not builtin: Basis",
"success": true
} ],
"context": "when calling asserts.is_not_Basis(null)",
"fullname": "test_when_calling_is_not_Basis",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: int",
"context": "Then it passes",
"expected": "Null is not builtin: int",
"success": true
} ],
"context": "when calling asserts.is_not_int(null)",
"fullname": "test_when_calling_is_not_int",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: bool",
"context": "Then it passes",
"expected": "Null is not builtin: bool",
"success": true
} ],
"context": "when calling asserts.is_not_bool(null)",
"fullname": "test_when_calling_is_not_bool",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Dictionary",
"context": "Then it passes",
"expected": "Null is not builtin: Dictionary",
"success": true
} ],
"context": "when calling asserts.is_not_Dictionary(null)",
"fullname": "test_when_calling_is_not_Dictionary",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: NodePath",
"context": "Then it passes",
"expected": "Null is not builtin: NodePath",
"success": true
} ],
"context": "when calling asserts.is_not_NodePath(null)",
"fullname": "test_when_calling_is_not_NodePath",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Object",
"context": "Then it passes",
"expected": "Null is not builtin: Object",
"success": true
} ],
"context": "when calling asserts.is_not_Object(null)",
"fullname": "test_when_calling_is_not_Object",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: PoolStringArray",
"context": "Then it passes",
"expected": "Null is not builtin: PoolStringArray",
"success": true
} ],
"context": "when calling asserts.is_not_PoolStringArray(null)",
"fullname": "test_when_calling_is_not_PoolStringArray",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Quat",
"context": "Then it passes",
"expected": "Null is not builtin: Quat",
"success": true
} ],
"context": "when calling asserts.is_not_Quat(null)",
"fullname": "test_when_calling_is_not_Quat",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: PoolRealArray",
"context": "Then it passes",
"expected": "Null is not builtin: PoolRealArray",
"success": true
} ],
"context": "when calling asserts.is_not_PoolRealArray(null)",
"fullname": "test_when_calling_is_not_PoolRealArray",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: RID",
"context": "Then it passes",
"expected": "Null is not builtin: RID",
"success": true
} ],
"context": "when calling asserts.is_not_RID(null)",
"fullname": "test_when_calling_is_not_RID",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: PoolIntArray",
"context": "Then it passes",
"expected": "Null is not builtin: PoolIntArray",
"success": true
} ],
"context": "when calling asserts.is_not_PoolIntArray(null)",
"fullname": "test_when_calling_is_not_PoolIntArray",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Vector2",
"context": "Then it passes",
"expected": "Null is not builtin: Vector2",
"success": true
} ],
"context": "when calling asserts.is_not_Vector2(null)",
"fullname": "test_when_calling_is_not_Vector2",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Transform",
"context": "Then it passes",
"expected": "Null is not builtin: Transform",
"success": true
} ],
"context": "when calling asserts.is_not_Transform(null)",
"fullname": "test_when_calling_is_not_Transform",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: String",
"context": "Then it passes",
"expected": "Null is not builtin: String",
"success": true
} ],
"context": "when calling asserts.is_not_String(null)",
"fullname": "test_when_calling_is_not_String",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: PoolVector2Array",
"context": "Then it passes",
"expected": "Null is not builtin: PoolVector2Array",
"success": true
} ],
"context": "when calling asserts.is_not_PoolVector2Array(null)",
"fullname": "test_when_calling_is_not_PoolVector2Array",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: PoolVector3Array",
"context": "Then it passes",
"expected": "Null is not builtin: PoolVector3Array",
"success": true
} ],
"context": "when calling asserts.is_not_PoolVector3Array(null)",
"fullname": "test_when_calling_is_not_PoolVector3Array",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Plane",
"context": "Then it passes",
"expected": "Null is not builtin: Plane",
"success": true
} ],
"context": "when calling asserts.is_not_Plane(null)",
"fullname": "test_when_calling_is_not_Plane",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Transform2D",
"context": "Then it passes",
"expected": "Null is not builtin: Transform2D",
"success": true
} ],
"context": "when calling asserts.is_not_Transform2D(null)",
"fullname": "test_when_calling_is_not_Transform2D",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: PoolColorArray",
"context": "Then it passes",
"expected": "Null is not builtin: PoolColorArray",
"success": true
} ],
"context": "when calling asserts.is_not_PoolColorArray(null)",
"fullname": "test_when_calling_is_not_PoolColorArray",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Vector3",
"context": "Then it passes",
"expected": "Null is not builtin: Vector3",
"success": true
} ],
"context": "when calling asserts.is_not_Vector3(null)",
"fullname": "test_when_calling_is_not_Vector3",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: PoolByteArray",
"context": "Then it passes",
"expected": "Null is not builtin: PoolByteArray",
"success": true
} ],
"context": "when calling asserts.is_not_PoolByteArray(null)",
"fullname": "test_when_calling_is_not_PoolByteArray",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Rect2",
"context": "Then it passes",
"expected": "Null is not builtin: Rect2",
"success": true
} ],
"context": "when calling asserts.is_not_Rect2(null)",
"fullname": "test_when_calling_is_not_Rect2",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 26,
"path": "res://tests/unit/is_not_instance.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/is_not_instance.test.gd",
"tags": [  ],
"test": ExtResource( 2 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 26
}, {
"context": "Given a Null Assertion",
"methods": [ {
"assertions": [ {
"actual": "|Object| [Node:6908] != null",
"context": "Then it passes",
"expected": "|Object| [Node:6908] != null",
"success": true
} ],
"context": "When calling Node is not null",
"fullname": "test_when_calling_node_is_not_null",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|null| Null == null",
"context": "Then it passes",
"expected": "|null| Null == null",
"success": true
} ],
"context": "When calling asserts.is_null(null)",
"fullname": "test_when_calling_null_is_null",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|Object| [Deleted Object] == null",
"context": "A Freed Node is null in Engine 3.2.2 or greater",
"expected": "|Object| [Deleted Object] == null",
"success": true
} ],
"context": "When calling freed object is null",
"fullname": "test_when_calling_freed_object_is_not_null",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 3,
"path": "res://tests/unit/null.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/null.test.gd",
"tags": [  ],
"test": ExtResource( 12 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 3
}, {
"context": "Given an Object Assertion",
"methods": [ {
"assertions": [ {
"actual": "[Node:6913] does not have meta: confusing",
"context": "Then it passes",
"expected": "[Node:6913] does not have meta: confusing",
"success": true
} ],
"context": "When calling asserts.object_has_meta with real key but null val",
"fullname": "test_when_calling_does_not_have_meta_real_key_null_value_pair",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:6913] has method: title",
"context": "Then it passes",
"expected": "[Node:6913] has method: title",
"success": true
} ],
"context": "When calling has_method('title')",
"fullname": "test_when_calling_has_method_title",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:6913] has user signal: dummy_signal",
"context": "Then it passes",
"expected": "[Node:6913] has user signal: dummy_signal",
"success": true
} ],
"context": "When calling obj_has_user_signal after adding a signal",
"fullname": "test_when_calling_has_user_signal_after_adding_a_signal",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:6913] does not have user signal: false_signal",
"context": "Then it passes",
"expected": "[Node:6913] does not have user signal: false_signal",
"success": true
} ],
"context": "When calling obj_does_not_have_user_signal with fake signal",
"fullname": "test_when_calling_does_not_have_user_signal",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is freed from memory",
"context": "Then it passes",
"expected": "Null is freed from memory",
"success": true
} ],
"context": "When calling asserts.is_freed(freed_object",
"fullname": "test_when_calling_freed_object_is_freed",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:6913] has meta: dummy",
"context": "Then it passes",
"expected": "[Node:6913] has meta: dummy",
"success": true
}, {
"actual": "[Node:6913] has meta: dummy",
"context": "Then it passes",
"expected": "[Node:6913] has meta: dummy",
"success": true
} ],
"context": "When calling asserts.object_has_meta() after adding metadata",
"fullname": "test_when_calling_has_meta_after_adding_metadata",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "[Node:6924] is not freed",
"context": "Then it passes",
"expected": "[Node:6924] is not freed",
"success": true
} ],
"context": "When calling asserts.is_not_freed(unfreed_object)",
"fullname": "test_when_calling_unfreed_object_is_not_freed",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:6913] does not have meta: bad_meta",
"context": "Then it passes",
"expected": "[Node:6913] does not have meta: bad_meta",
"success": true
} ],
"context": "When calling asserts.object_does_not_have_meta()",
"fullname": "test_when_calling_does_not_have_meta",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:6927] is queued for deletion",
"context": "Then it passes",
"expected": "[Node:6927] is queued for deletion",
"success": true
} ],
"context": "When calling asserts.object_is_queued for deletion after calling queue_free",
"fullname": "test_when_calling_obj_is_queued_for_deletion_after_calling_queue_free",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:6929] is blocking signals",
"context": "Then it passes",
"expected": "[Node:6929] is blocking signals",
"success": true
} ],
"context": "When calling is blocking signals while blocking signals",
"fullname": "test_is_blocking_signals",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:6931] is not blocking signals",
"context": "Then it passes",
"expected": "[Node:6931] is not blocking signals",
"success": true
} ],
"context": "When calling is not blocking signals while not blocking signals",
"fullname": "test_is_not_blocking_signals",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:6933] is not queued for deletion",
"context": "Then it passes",
"expected": "[Node:6933] is not queued for deletion",
"success": true
} ],
"context": "When calling asserts.object_is_not_for_queued_deletion after not calling queue free()",
"fullname": "test_when_calling_obj_is_not_for_queued_deletion_after_not_calling_queue_free",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:6913].builtin_dummy is connected to [Node:6913].title",
"context": "Then it passes",
"expected": "[Node:6913].builtin_dummy is connected to [Node:6913].title",
"success": true
} ],
"context": "When calling asserts object is connected with a valid connection",
"fullname": "test_when_calling_obj_is_connected_with_a_real_connection",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:6913].builtin_dummy is not connected to [Node:6913].title",
"context": "Then it passes",
"expected": "[Node:6913].builtin_dummy is not connected to [Node:6913].title",
"success": true
} ],
"context": "When calling asserts object is not connected with an invalid connection",
"fullname": "test_when_calling_obj_is_not_connected_with_an_invalid_connection",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:6913] does not have user signal: builtin_dummy",
"context": "Then it passes",
"expected": "[Node:6913] does not have user signal: builtin_dummy",
"success": true
} ],
"context": "When calling does not have user signal with class signal",
"fullname": "test_when_calling_does_not_have_user_signal_with_class_signal_constant",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 15,
"path": "res://tests/unit/object.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/object.test.gd",
"tags": [  ],
"test": ExtResource( 7 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 15
}, {
"context": "Given the Addition Operator",
"methods": [ {
"assertions": [ {
"actual": "|int| 4 is equal to |int| 4",
"context": "",
"expected": "|int| 4 is equal to |int| 4",
"success": true
} ],
"context": "When we add 2 to 2 we get 4",
"fullname": "test_add",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 8 is equal to |int| 8",
"context": "",
"expected": "|int| 8 is equal to |int| 8",
"success": true
} ],
"context": "When we add 5 to 3 we get 8",
"fullname": "test_add",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 13 is equal to |int| 13",
"context": "",
"expected": "|int| 13 is equal to |int| 13",
"success": true
} ],
"context": "When we add 7 to 6 we get 13",
"fullname": "test_add",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 0 is equal to |int| 0",
"context": "",
"expected": "|int| 0 is equal to |int| 0",
"success": true
} ],
"context": "When we subtract 2 from 2 we get 0",
"fullname": "test_subtract",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 2 is equal to |int| 2",
"context": "",
"expected": "|int| 2 is equal to |int| 2",
"success": true
} ],
"context": "When we subtract 5 from 3 we get 2",
"fullname": "test_subtract",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 1 is equal to |int| 1",
"context": "",
"expected": "|int| 1 is equal to |int| 1",
"success": true
} ],
"context": "When we subtract 7 from 6 we get 1",
"fullname": "test_subtract",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 6,
"path": "res://tests/unit/parameters.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/parameters.test.gd",
"tags": [  ],
"test": ExtResource( 16 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 6
}, {
"context": "Given A Range Assertion",
"methods": [ {
"assertions": [ {
"actual": "10 is not in range(0, 10)",
"context": "Then it passes",
"expected": "10 is not in range(0, 10)",
"success": true
} ],
"context": "When calling is (10) not in range (in range(0, 10)",
"fullname": "test_when_calling_is_not_in_range",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "0 is in range(0, 10)",
"context": "Then it passes",
"expected": "0 is in range(0, 10)",
"success": true
} ],
"context": "When calling is (0) in range(0, 10)",
"fullname": "test_when_calling_is_in_range",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 2,
"path": "res://tests/unit/range.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/range.test.gd",
"tags": [  ],
"test": ExtResource( 15 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 2
}, {
"context": "Given a String Assertion",
"methods": [ {
"assertions": [ {
"actual": "impsum does not begin with bleh lorem",
"context": "Then it passes",
"expected": "impsum does not begin with bleh lorem",
"success": true
} ],
"context": "When calling asserts.string_does_not_begin_with('lorem', 'impsum')",
"fullname": "test_when_calling_string_does_not_begin_with",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "lorem impsum begins with lorem",
"context": "Then it passes",
"expected": "lorem impsum begins with lorem",
"success": true
} ],
"context": "When calling asserts.string_begins_with('lorem', 'lorem impsum')",
"fullname": "test_when_calling_string_begins_with",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "lorem impsum ends with impsum",
"context": "Then it passes",
"expected": "lorem impsum ends with impsum",
"success": true
} ],
"context": "When calling asserts.string_ends_with('impsum', 'lorem impsum')",
"fullname": "test_when_calling_string_ends_with",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "impsum does not contain beem im",
"context": "Then it passes",
"expected": "impsum does not contain beem im",
"success": true
} ],
"context": "When calling asserts.string_does_not_contain('em im', 'impsum')",
"fullname": "test_when_calling_string_does_not_contain",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "lorem impsum contains em im",
"context": "Then it passes",
"expected": "lorem impsum contains em im",
"success": true
} ],
"context": "When calling asserts.string_contains('em im', 'lorem impsum')",
"fullname": "test_when_calling_string_contains",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "impsum does not end with lorem",
"context": "Then it passes",
"expected": "impsum does not end with lorem",
"success": true
} ],
"context": "When calling asserts.string_does_not_end_with('lorem', 'impsum')",
"fullname": "test_when_calling_string_does_not_end_with",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 6,
"path": "res://tests/unit/string.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/string.test.gd",
"tags": [  ],
"test": ExtResource( 9 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 6
}, {
"context": "Dummy Passing Test",
"methods": [ {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Passing!",
"expected": "|bool| True == true",
"success": true
} ],
"context": "This method passes",
"fullname": "test_this_method_passes",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 1,
"path": "res://tests/unit/suite.test.gd.DummyOne",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/suite.test.gd.DummyOne",
"tags": [  ],
"test": SubResource( 19 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 1
}, {
"context": "Dummy Test 2",
"methods": [ {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Passing!",
"expected": "|bool| True == true",
"success": true
} ],
"context": "This method passes",
"fullname": "test_this_method_passes",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 1,
"path": "res://tests/unit/suite.test.gd.DummyTwo",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/suite.test.gd.DummyTwo",
"tags": [  ],
"test": SubResource( 20 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 1
}, {
"context": "Given a Test Script",
"methods": [ {
"assertions": [ {
"actual": "|int| 10 is greater than |int| 1",
"context": "We get an array of multiple values back",
"expected": "|int| 10 is greater than |int| 1",
"success": true
}, {
"actual": "|int| 0 is not equal to |int| 9",
"context": "With different values",
"expected": "|int| 0 != |int| 9",
"success": true
}, {
"actual": "|int| 10 is greater than |int| 1",
"context": "And we can track multiple properties",
"expected": "|int| 10 is greater than |int| 1",
"success": true
} ],
"context": "When we record properties",
"fullname": "test_we_can_record_properties",
"passed": 3,
"success": true,
"time": 0.0,
"total": 3
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "if the test didn't break this works",
"expected": "|bool| True == true",
"success": true
} ],
"context": " we can omit describe",
"fullname": "test_we_can_omit_describe",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|int| 2 is equal to |int| 2",
"context": "",
"expected": "|int| 2 is equal to |int| 2",
"success": true
} ],
"context": " when we omit context we can see expected and got under method",
"fullname": "test_when_we_omit_context_we_can_see_expected_and_got_under_method",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
} ],
"passed": 3,
"path": "res://tests/unit/test.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/test.test.gd",
"tags": [  ],
"test": ExtResource( 19 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 3
}, {
"context": "Given a Signal Watcher",
"methods": [ {
"assertions": [ {
"actual": "signal: multiple was emitted from [Node:6980] 2",
"context": "Then we can track how many times we emitted it",
"expected": "signal: multiple was emitted from [Node:6980] 2",
"success": true
} ],
"context": "When we watch and signal and emit it multiple times",
"fullname": "test_When_we_watch_a_signal_and_emit_it_multiple_times",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Signal: example was not emitted from [Node:6980]",
"context": "Then it does not capture the non-emitted signal",
"expected": "Signal: example was not emitted from [Node:6980]",
"success": true
} ],
"context": "When we watch and do not emit a signal",
"fullname": "test_When_we_watch_and_do_not_emit_a_signal",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Signal: example was emitted from [Node:6980] with arguments: [1, 20, 5]",
"context": "Then it captures any arguments that where passed when the signal was emitted",
"expected": "Signal: example was emitted from [Node:6980] with arguments: [1, 20, 5]",
"success": true
} ],
"context": "When we watch a signal from an object with no bound variables",
"fullname": "test_When_we_watch_a_signal_from_an_object_with_no_bound_variables",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "signal: example was emitted from [Node:6980]",
"context": "Then it captures the emitted signal",
"expected": "signal: example was emitted from [Node:6980]",
"success": true
} ],
"context": "When we watch and emit a signal",
"fullname": "test_When_we_watch_and_emit_a_signal",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 4,
"path": "res://tests/unit/watcher.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/watcher.test.gd",
"tags": [  ],
"test": ExtResource( 17 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 4
}, {
"context": "Given a Yield",
"methods": [ {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then we set var a to true",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then we set var b to true",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we yield in start twice",
"fullname": "test_When_we_yield_in_start",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then we set var c to true",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then we set var d to true",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we yield in pre thrice",
"fullname": "test_When_we_yield_in_pre",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "[100, Null, Null, Null, Null, Null] is builtin: Array",
"context": "Then we get an array",
"expected": "[100, Null, Null, Null, Null, Null] is builtin: Array",
"success": true
}, {
"actual": "|int| 6 is equal to |int| 6",
"context": "Of size 6",
"expected": "|int| 6 is equal to |int| 6",
"success": true
}, {
"actual": "|int| 100 is equal to |int| 100",
"context": "Where element 0 is 100",
"expected": "|int| 100 is equal to |int| 100",
"success": true
} ],
"context": "When yield(self.yield_value()) returns",
"fullname": "test_When_we_yield_we_get_the_return_value",
"passed": 3,
"success": true,
"time": 0.0,
"total": 3
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then yielder is unpaused",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "The timeout signal of the yielder is connected",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we call until_timeout (with 1.0)",
"fullname": "test_When_we_call_until_timeout",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then the yielder is unpaused",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then the timeout signal of the yielder is connected",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then our signal is connected to the yielder",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we call until signal",
"fullname": "test_When_we_call_until_signal",
"passed": 3,
"success": true,
"time": 0.0,
"total": 3
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then yielder is not active",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When asserting against a test",
"fullname": "test_Yielder_is_not_active_when_asserting",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then we set var e to true",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then we set var f to true",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we yield twice in execute",
"fullname": "test_When_we_yield_in_execute",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then the timeout signal is disconnected",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then the signal-signal is disconnected",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When it is finished",
"fullname": "test_When_yielder_is_finished_signals_are_disconnected",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then the yielder is paused",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When a signal being yielded on is emitted",
"fullname": "test_When_a_signal_being_yielded_on_is_emitted_the_yielder_is_stopped",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then the yielder is paused",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "The timeout signal of the yielder is not connected",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When the yielder times out on until_timeout(0.1)",
"fullname": "test_When_the_yielder_times_out",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then the yielder is paused",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then the timeout signal of the yielder is disconnected",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then our signal to the yielder is disconnected",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When the yielder heres our signal",
"fullname": "test_When_the_yielder_hears_our_signal",
"passed": 3,
"success": true,
"time": 0.0,
"total": 3
} ],
"passed": 11,
"path": "res://tests/unit/yield.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/yield.test.gd",
"tags": [  ],
"test": ExtResource( 18 ),
"yield_time": 1.9
},
"success": true,
"time_taken": 0.0,
"total": 11
}, {
"context": "Given a Boolean Assertion",
"methods": [ {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then it passes",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When calling asserts.is_true(true)",
"fullname": "test_when_calling_asserts_is_true",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| False == false",
"context": "Then it passes",
"expected": "|bool| False == false",
"success": true
} ],
"context": "When calling asserts.is_false(false)",
"fullname": "test_when_calling_asserts_is_false",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| True != false",
"context": "",
"expected": "|bool| True == false",
"success": false
} ],
"context": " intentional failure",
"fullname": "test_intentional_failure",
"passed": 0,
"success": false,
"time": 0.0,
"total": 1
} ],
"passed": 2,
"path": "res://tests/integration/boolean.test.gd",
"source": {
"containers": [ "res://tests/integration", "res://tests" ],
"method": "",
"path": "res://tests/integration/boolean.test.gd",
"tags": [  ],
"test": ExtResource( 20 ),
"yield_time": 0.0
},
"success": false,
"time_taken": 0.0,
"total": 3
}, {
"context": "Default Args",
"methods": [ {
"assertions": [ {
"actual": "|bool| True == true",
"context": "If this method can be reached then we have doubled a script with default argument(s) properly!",
"expected": "|bool| True == true",
"success": true
} ],
"context": " default arguments of interpolate property",
"fullname": "test_default_arguments_of_interpolate_property",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 1,
"path": "res://tests/integration/default_args.test.gd",
"source": {
"containers": [ "res://tests/integration", "res://tests" ],
"method": "",
"path": "res://tests/integration/default_args.test.gd",
"tags": [  ],
"test": ExtResource( 10 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 1
}, {
"context": "Given is_on_floor",
"methods": [ {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then it can be stubbed",
"expected": "|bool| True == true",
"success": true
} ],
"context": "From a user-defined script",
"fullname": "test_stubbing_is_on_floor_method_from_user_defined_class",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then it can be stubbed",
"expected": "|bool| True == true",
"success": true
} ],
"context": "From a child node of a scene without scripts",
"fullname": "test_stubbing_is_on_floor_as_child_node_with_no_script",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then it can be stubbed",
"expected": "|bool| True == true",
"success": true
} ],
"context": "From a built-in KinematicBody2D2",
"fullname": "test_stubbing_is_on_floor_method_from_builtin_class2",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 3,
"path": "res://tests/integration/on_floor.test.gd",
"source": {
"containers": [ "res://tests/integration", "res://tests" ],
"method": "",
"path": "res://tests/integration/on_floor.test.gd",
"tags": [  ],
"test": ExtResource( 5 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 3
}, {
"context": "Given a Scene Director",
"methods": [ {
"assertions": [ {
"actual": "|NodePath| A is equal to |NodePath| A",
"context": "We have the correct NodePath Set",
"expected": "|NodePath| A is equal to |NodePath| A",
"success": true
} ],
"context": "When we add it to the tree it runs",
"fullname": "test_When_we_add_it_to_the_tree_it_runs",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 9999 is equal to |int| 9999",
"context": "Then we get the stubbed return value",
"expected": "|int| 9999 is equal to |int| 9999",
"success": true
} ],
"context": "When we call a method from the root node that we stubbed",
"fullname": "test_When_we_call_a_method_from_the_root_node_that_we_stubbed",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 999 is equal to |int| 999",
"context": "Then we get the stubbed return value",
"expected": "|int| 999 is equal to |int| 999",
"success": true
} ],
"context": "When we call a method from a child node that we stubbed",
"fullname": "test_When_we_call_a_method_from_a_child_node_that_we_stubbed",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 99 is equal to |int| 99",
"context": "Then we get the stubbed return value",
"expected": "|int| 99 is equal to |int| 99",
"success": true
} ],
"context": "When we call a method from a grandchild node that we stubbed",
"fullname": "test_When_we_call_a_method_from_a_grandchild_node_that_we_stubbed",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|Dictionary| {.:[Reference:7320], A:[Reference:7321], A/B:[Reference:7323], C:[Reference:7322], C/D:[Reference:7324]} is not equal to |Dictionary| {.:[Reference:7334], A:[Reference:7335], A/B:[Reference:7337], C:[Reference:7336], C/D:[Reference:7338]}",
"context": "Then they do not share resources",
"expected": "|Dictionary| {.:[Reference:7320], A:[Reference:7321], A/B:[Reference:7323], C:[Reference:7322], C/D:[Reference:7324]} != |Dictionary| {.:[Reference:7334], A:[Reference:7335], A/B:[Reference:7337], C:[Reference:7336], C/D:[Reference:7338]}",
"success": true
} ],
"context": "When we create two of it for the same scene",
"fullname": "test_When_we_create_two_of_it_for_the_same_scene",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 5,
"path": "res://tests/integration/scene_director.test.gd",
"source": {
"containers": [ "res://tests/integration", "res://tests" ],
"method": "",
"path": "res://tests/integration/scene_director.test.gd",
"tags": [  ],
"test": ExtResource( 4 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 5
}, {
"context": "Given a Script Director",
"methods": [ {
"assertions": [ {
"actual": "|Dictionary| {_enter_tree:{arguments:, default_arguments:}, _exit_tree:{arguments:, default_arguments:}, _get:{arguments:a, default_arguments:a}, _get_configuration_warning:{arguments:, default_arguments:}, _get_editor_description:{arguments:, default_arguments:}, _get_import_path:{arguments:, default_arguments:}, _get_property_list:{arguments:, default_arguments:}, _init:{arguments:, default_arguments:}, _input:{arguments:a, default_arguments:a}, _notification:{arguments:a, default_arguments:a}, _physics_process:{arguments:a, default_arguments:a}, _process:{arguments:a, default_arguments:a}, _ready:{arguments:, default_arguments:}, _set:{arguments:a, b, default_arguments:a, b}, _set_editor_description:{arguments:a, default_arguments:a}, _set_import_path:{arguments:a, default_arguments:a}, _to_string:{arguments:, default_arguments:}, _unhandled_input:{arguments:a, default_arguments:a}, _unhandled_key_input:{arguments:a, default_arguments:a}, add:{arguments:a, b, default_arguments:a, b}, add_child:{arguments:a, b, default_arguments:a, b = False}, add_child_below_node:{arguments:a, b, c, default_arguments:a, b, c = False}, add_to_group:{arguments:a, b, default_arguments:a, b = False}, add_user_signal:{arguments:a, b, default_arguments:a, b = []}, call:{arguments:a, default_arguments:a}, call_deferred:{arguments:a, default_arguments:a}, callv:{arguments:a, b, default_arguments:a, b}, can_process:{arguments:, default_arguments:}, can_translate_messages:{arguments:, default_arguments:}, connect:{arguments:a, b, c, d, e, default_arguments:a, b, c, d = [], e = 0}, disconnect:{arguments:a, b, c, default_arguments:a, b, c}, divide:{arguments:a, b, default_arguments:a, b}, duplicate:{arguments:a, default_arguments:a = 15}, emit_signal:{arguments:a, default_arguments:a}, find_node:{arguments:a, b, c, default_arguments:a, b = True, c = True}, find_parent:{arguments:a, default_arguments:a}, free:{arguments:, default_arguments:}, get:{arguments:a, default_arguments:a}, get_child:{arguments:a, default_arguments:a}, get_child_count:{arguments:, default_arguments:}, get_children:{arguments:, default_arguments:}, get_class:{arguments:, default_arguments:}, get_custom_multiplayer:{arguments:, default_arguments:}, get_filename:{arguments:, default_arguments:}, get_groups:{arguments:, default_arguments:}, get_incoming_connections:{arguments:, default_arguments:}, get_index:{arguments:, default_arguments:}, get_indexed:{arguments:a, default_arguments:a}, get_instance_id:{arguments:, default_arguments:}, get_meta:{arguments:a, default_arguments:a}, get_meta_list:{arguments:, default_arguments:}, get_method_list:{arguments:, default_arguments:}, get_multiplayer:{arguments:, default_arguments:}, get_name:{arguments:, default_arguments:}, get_network_master:{arguments:, default_arguments:}, get_node:{arguments:a, default_arguments:a}, get_node_and_resource:{arguments:a, default_arguments:a}, get_node_or_null:{arguments:a, default_arguments:a}, get_owner:{arguments:, default_arguments:}, get_parent:{arguments:, default_arguments:}, get_path:{arguments:, default_arguments:}, get_path_to:{arguments:a, default_arguments:a}, get_pause_mode:{arguments:, default_arguments:}, get_physics_process_delta_time:{arguments:, default_arguments:}, get_position_in_parent:{arguments:, default_arguments:}, get_process_delta_time:{arguments:, default_arguments:}, get_process_priority:{arguments:, default_arguments:}, get_property_list:{arguments:, default_arguments:}, get_scene_instance_load_placeholder:{arguments:, default_arguments:}, get_script:{arguments:, default_arguments:}, get_signal_connection_list:{arguments:a, default_arguments:a}, get_signal_list:{arguments:, default_arguments:}, get_tree:{arguments:, default_arguments:}, get_viewport:{arguments:, default_arguments:}, has_meta:{arguments:a, default_arguments:a}, has_method:{arguments:a, default_arguments:a}, has_node:{arguments:a, default_arguments:a}, has_node_and_resource:{arguments:a, default_arguments:a}, has_signal:{arguments:a, default_arguments:a}, has_user_signal:{arguments:a, default_arguments:a}, is_a_parent_of:{arguments:a, default_arguments:a}, is_blocking_signals:{arguments:, default_arguments:}, is_class:{arguments:a, default_arguments:a}, is_connected:{arguments:a, b, c, default_arguments:a, b, c}, is_displayed_folded:{arguments:, default_arguments:}, is_greater_than:{arguments:a, default_arguments:a}, is_in_group:{arguments:a, default_arguments:a}, is_inside_tree:{arguments:, default_arguments:}, is_network_master:{arguments:, default_arguments:}, is_physics_processing:{arguments:, default_arguments:}, is_physics_processing_internal:{arguments:, default_arguments:}, is_processing:{arguments:, default_arguments:}, is_processing_input:{arguments:, default_arguments:}, is_processing_internal:{arguments:, default_arguments:}, is_processing_unhandled_input:{arguments:, default_arguments:}, is_processing_unhandled_key_input:{arguments:, default_arguments:}, is_queued_for_deletion:{arguments:, default_arguments:}, math_fight:{arguments:, default_arguments:}, move_child:{arguments:a, b, default_arguments:a, b}, multiply:{arguments:a, b, default_arguments:a, b}, notification:{arguments:a, b, default_arguments:a, b = False}, pi:{arguments:, default_arguments:}, print_stray_nodes:{arguments:, default_arguments:}, print_tree:{arguments:, default_arguments:}, print_tree_pretty:{arguments:, default_arguments:}, propagate_call:{arguments:a, b, c, default_arguments:a, b = [], c = False}, propagate_notification:{arguments:a, default_arguments:a}, property_list_changed_notify:{arguments:, default_arguments:}, queue_free:{arguments:, default_arguments:}, raise:{arguments:, default_arguments:}, remove_and_skip:{arguments:, default_arguments:}, remove_child:{arguments:a, default_arguments:a}, remove_from_group:{arguments:a, default_arguments:a}, remove_meta:{arguments:a, default_arguments:a}, replace_by:{arguments:a, b, default_arguments:a, b = False}, request_ready:{arguments:, default_arguments:}, rpc:{arguments:a, default_arguments:a}, rpc_config:{arguments:a, b, default_arguments:a, b}, rpc_id:{arguments:a, b, default_arguments:a, b}, rpc_unreliable:{arguments:a, default_arguments:a}, rpc_unreliable_id:{arguments:a, b, default_arguments:a, b}, rset:{arguments:a, b, default_arguments:a, b}, rset_config:{arguments:a, b, default_arguments:a, b}, rset_id:{arguments:a, b, c, default_arguments:a, b, c}, rset_unreliable:{arguments:a, b, default_arguments:a, b}, rset_unreliable_id:{arguments:a, b, c, default_arguments:a, b, c}, set:{arguments:a, b, default_arguments:a, b}, set_block_signals:{arguments:a, default_arguments:a}, set_custom_multiplayer:{arguments:a, default_arguments:a}, set_deferred:{arguments:a, b, default_arguments:a, b}, set_display_folded:{arguments:a, default_arguments:a}, set_filename:{arguments:a, default_arguments:a}, set_indexed:{arguments:a, b, default_arguments:a, b}, set_message_translation:{arguments:a, default_arguments:a}, set_meta:{arguments:a, b, default_arguments:a, b}, set_name:{arguments:a, default_arguments:a}, set_network_master:{arguments:a, b, default_arguments:a, b = True}, set_owner:{arguments:a, default_arguments:a}, set_pause_mode:{arguments:a, default_arguments:a}, set_physics_process:{arguments:a, default_arguments:a}, set_physics_process_internal:{arguments:a, default_arguments:a}, set_process:{arguments:a, default_arguments:a}, set_process_input:{arguments:a, default_arguments:a}, set_process_internal:{arguments:a, default_arguments:a}, set_process_priority:{arguments:a, default_arguments:a}, set_process_unhandled_input:{arguments:a, default_arguments:a}, set_process_unhandled_key_input:{arguments:a, default_arguments:a}, set_scene_instance_load_placeholder:{arguments:a, default_arguments:a}, set_script:{arguments:a, default_arguments:a}, subtract:{arguments:a, b, default_arguments:a, b}, sum:{arguments:a, default_arguments:a}, to_string:{arguments:, default_arguments:}, tr:{arguments:a, default_arguments:a}, update_configuration_warning:{arguments:, default_arguments:}} is not equal to |Dictionary| {_enter_tree:{arguments:, default_arguments:}, _exit_tree:{arguments:, default_arguments:}, _get:{arguments:a, default_arguments:a}, _get_configuration_warning:{arguments:, default_arguments:}, _get_editor_description:{arguments:, default_arguments:}, _get_import_path:{arguments:, default_arguments:}, _get_property_list:{arguments:, default_arguments:}, _init:{arguments:, default_arguments:}, _input:{arguments:a, default_arguments:a}, _notification:{arguments:a, default_arguments:a}, _physics_process:{arguments:a, default_arguments:a}, _process:{arguments:a, default_arguments:a}, _ready:{arguments:, default_arguments:}, _set:{arguments:a, b, default_arguments:a, b}, _set_editor_description:{arguments:a, default_arguments:a}, _set_import_path:{arguments:a, default_arguments:a}, _to_string:{arguments:, default_arguments:}, _unhandled_input:{arguments:a, default_arguments:a}, _unhandled_key_input:{arguments:a, default_arguments:a}, add:{arguments:a, b, default_arguments:a, b}, add_child:{arguments:a, b, default_arguments:a, b = False}, add_child_below_node:{arguments:a, b, c, default_arguments:a, b, c = False}, add_to_group:{arguments:a, b, default_arguments:a, b = False}, add_user_signal:{arguments:a, b, default_arguments:a, b = []}, call:{arguments:a, default_arguments:a}, call_deferred:{arguments:a, default_arguments:a}, callv:{arguments:a, b, default_arguments:a, b}, can_process:{arguments:, default_arguments:}, can_translate_messages:{arguments:, default_arguments:}, connect:{arguments:a, b, c, d, e, default_arguments:a, b, c, d = [], e = 0}, disconnect:{arguments:a, b, c, default_arguments:a, b, c}, divide:{arguments:a, b, default_arguments:a, b}, duplicate:{arguments:a, default_arguments:a = 15}, emit_signal:{arguments:a, default_arguments:a}, find_node:{arguments:a, b, c, default_arguments:a, b = True, c = True}, find_parent:{arguments:a, default_arguments:a}, free:{arguments:, default_arguments:}, get:{arguments:a, default_arguments:a}, get_child:{arguments:a, default_arguments:a}, get_child_count:{arguments:, default_arguments:}, get_children:{arguments:, default_arguments:}, get_class:{arguments:, default_arguments:}, get_custom_multiplayer:{arguments:, default_arguments:}, get_filename:{arguments:, default_arguments:}, get_groups:{arguments:, default_arguments:}, get_incoming_connections:{arguments:, default_arguments:}, get_index:{arguments:, default_arguments:}, get_indexed:{arguments:a, default_arguments:a}, get_instance_id:{arguments:, default_arguments:}, get_meta:{arguments:a, default_arguments:a}, get_meta_list:{arguments:, default_arguments:}, get_method_list:{arguments:, default_arguments:}, get_multiplayer:{arguments:, default_arguments:}, get_name:{arguments:, default_arguments:}, get_network_master:{arguments:, default_arguments:}, get_node:{arguments:a, default_arguments:a}, get_node_and_resource:{arguments:a, default_arguments:a}, get_node_or_null:{arguments:a, default_arguments:a}, get_owner:{arguments:, default_arguments:}, get_parent:{arguments:, default_arguments:}, get_path:{arguments:, default_arguments:}, get_path_to:{arguments:a, default_arguments:a}, get_pause_mode:{arguments:, default_arguments:}, get_physics_process_delta_time:{arguments:, default_arguments:}, get_position_in_parent:{arguments:, default_arguments:}, get_process_delta_time:{arguments:, default_arguments:}, get_process_priority:{arguments:, default_arguments:}, get_property_list:{arguments:, default_arguments:}, get_scene_instance_load_placeholder:{arguments:, default_arguments:}, get_script:{arguments:, default_arguments:}, get_signal_connection_list:{arguments:a, default_arguments:a}, get_signal_list:{arguments:, default_arguments:}, get_tree:{arguments:, default_arguments:}, get_viewport:{arguments:, default_arguments:}, has_meta:{arguments:a, default_arguments:a}, has_method:{arguments:a, default_arguments:a}, has_node:{arguments:a, default_arguments:a}, has_node_and_resource:{arguments:a, default_arguments:a}, has_signal:{arguments:a, default_arguments:a}, has_user_signal:{arguments:a, default_arguments:a}, is_a_parent_of:{arguments:a, default_arguments:a}, is_blocking_signals:{arguments:, default_arguments:}, is_class:{arguments:a, default_arguments:a}, is_connected:{arguments:a, b, c, default_arguments:a, b, c}, is_displayed_folded:{arguments:, default_arguments:}, is_greater_than:{arguments:a, default_arguments:a}, is_in_group:{arguments:a, default_arguments:a}, is_inside_tree:{arguments:, default_arguments:}, is_network_master:{arguments:, default_arguments:}, is_physics_processing:{arguments:, default_arguments:}, is_physics_processing_internal:{arguments:, default_arguments:}, is_processing:{arguments:, default_arguments:}, is_processing_input:{arguments:, default_arguments:}, is_processing_internal:{arguments:, default_arguments:}, is_processing_unhandled_input:{arguments:, default_arguments:}, is_processing_unhandled_key_input:{arguments:, default_arguments:}, is_queued_for_deletion:{arguments:, default_arguments:}, math_fight:{arguments:, default_arguments:}, move_child:{arguments:a, b, default_arguments:a, b}, multiply:{arguments:a, b, default_arguments:a, b}, notification:{arguments:a, b, default_arguments:a, b = False}, pi:{arguments:, default_arguments:}, print_stray_nodes:{arguments:, default_arguments:}, print_tree:{arguments:, default_arguments:}, print_tree_pretty:{arguments:, default_arguments:}, propagate_call:{arguments:a, b, c, default_arguments:a, b = [], c = False}, propagate_notification:{arguments:a, default_arguments:a}, property_list_changed_notify:{arguments:, default_arguments:}, queue_free:{arguments:, default_arguments:}, raise:{arguments:, default_arguments:}, remove_and_skip:{arguments:, default_arguments:}, remove_child:{arguments:a, default_arguments:a}, remove_from_group:{arguments:a, default_arguments:a}, remove_meta:{arguments:a, default_arguments:a}, replace_by:{arguments:a, b, default_arguments:a, b = False}, request_ready:{arguments:, default_arguments:}, rpc:{arguments:a, default_arguments:a}, rpc_config:{arguments:a, b, default_arguments:a, b}, rpc_id:{arguments:a, b, default_arguments:a, b}, rpc_unreliable:{arguments:a, default_arguments:a}, rpc_unreliable_id:{arguments:a, b, default_arguments:a, b}, rset:{arguments:a, b, default_arguments:a, b}, rset_config:{arguments:a, b, default_arguments:a, b}, rset_id:{arguments:a, b, c, default_arguments:a, b, c}, rset_unreliable:{arguments:a, b, default_arguments:a, b}, rset_unreliable_id:{arguments:a, b, c, default_arguments:a, b, c}, set:{arguments:a, b, default_arguments:a, b}, set_block_signals:{arguments:a, default_arguments:a}, set_custom_multiplayer:{arguments:a, default_arguments:a}, set_deferred:{arguments:a, b, default_arguments:a, b}, set_display_folded:{arguments:a, default_arguments:a}, set_filename:{arguments:a, default_arguments:a}, set_indexed:{arguments:a, b, default_arguments:a, b}, set_message_translation:{arguments:a, default_arguments:a}, set_meta:{arguments:a, b, default_arguments:a, b}, set_name:{arguments:a, default_arguments:a}, set_network_master:{arguments:a, b, default_arguments:a, b = True}, set_owner:{arguments:a, default_arguments:a}, set_pause_mode:{arguments:a, default_arguments:a}, set_physics_process:{arguments:a, default_arguments:a}, set_physics_process_internal:{arguments:a, default_arguments:a}, set_process:{arguments:a, default_arguments:a}, set_process_input:{arguments:a, default_arguments:a}, set_process_internal:{arguments:a, default_arguments:a}, set_process_priority:{arguments:a, default_arguments:a}, set_process_unhandled_input:{arguments:a, default_arguments:a}, set_process_unhandled_key_input:{arguments:a, default_arguments:a}, set_scene_instance_load_placeholder:{arguments:a, default_arguments:a}, set_script:{arguments:a, default_arguments:a}, subtract:{arguments:a, b, default_arguments:a, b}, sum:{arguments:a, default_arguments:a}, to_string:{arguments:, default_arguments:}, tr:{arguments:a, default_arguments:a}, update_configuration_warning:{arguments:, default_arguments:}}",
"context": "Then they do not share resources",
"expected": "|Dictionary| {_enter_tree:{arguments:, default_arguments:}, _exit_tree:{arguments:, default_arguments:}, _get:{arguments:a, default_arguments:a}, _get_configuration_warning:{arguments:, default_arguments:}, _get_editor_description:{arguments:, default_arguments:}, _get_import_path:{arguments:, default_arguments:}, _get_property_list:{arguments:, default_arguments:}, _init:{arguments:, default_arguments:}, _input:{arguments:a, default_arguments:a}, _notification:{arguments:a, default_arguments:a}, _physics_process:{arguments:a, default_arguments:a}, _process:{arguments:a, default_arguments:a}, _ready:{arguments:, default_arguments:}, _set:{arguments:a, b, default_arguments:a, b}, _set_editor_description:{arguments:a, default_arguments:a}, _set_import_path:{arguments:a, default_arguments:a}, _to_string:{arguments:, default_arguments:}, _unhandled_input:{arguments:a, default_arguments:a}, _unhandled_key_input:{arguments:a, default_arguments:a}, add:{arguments:a, b, default_arguments:a, b}, add_child:{arguments:a, b, default_arguments:a, b = False}, add_child_below_node:{arguments:a, b, c, default_arguments:a, b, c = False}, add_to_group:{arguments:a, b, default_arguments:a, b = False}, add_user_signal:{arguments:a, b, default_arguments:a, b = []}, call:{arguments:a, default_arguments:a}, call_deferred:{arguments:a, default_arguments:a}, callv:{arguments:a, b, default_arguments:a, b}, can_process:{arguments:, default_arguments:}, can_translate_messages:{arguments:, default_arguments:}, connect:{arguments:a, b, c, d, e, default_arguments:a, b, c, d = [], e = 0}, disconnect:{arguments:a, b, c, default_arguments:a, b, c}, divide:{arguments:a, b, default_arguments:a, b}, duplicate:{arguments:a, default_arguments:a = 15}, emit_signal:{arguments:a, default_arguments:a}, find_node:{arguments:a, b, c, default_arguments:a, b = True, c = True}, find_parent:{arguments:a, default_arguments:a}, free:{arguments:, default_arguments:}, get:{arguments:a, default_arguments:a}, get_child:{arguments:a, default_arguments:a}, get_child_count:{arguments:, default_arguments:}, get_children:{arguments:, default_arguments:}, get_class:{arguments:, default_arguments:}, get_custom_multiplayer:{arguments:, default_arguments:}, get_filename:{arguments:, default_arguments:}, get_groups:{arguments:, default_arguments:}, get_incoming_connections:{arguments:, default_arguments:}, get_index:{arguments:, default_arguments:}, get_indexed:{arguments:a, default_arguments:a}, get_instance_id:{arguments:, default_arguments:}, get_meta:{arguments:a, default_arguments:a}, get_meta_list:{arguments:, default_arguments:}, get_method_list:{arguments:, default_arguments:}, get_multiplayer:{arguments:, default_arguments:}, get_name:{arguments:, default_arguments:}, get_network_master:{arguments:, default_arguments:}, get_node:{arguments:a, default_arguments:a}, get_node_and_resource:{arguments:a, default_arguments:a}, get_node_or_null:{arguments:a, default_arguments:a}, get_owner:{arguments:, default_arguments:}, get_parent:{arguments:, default_arguments:}, get_path:{arguments:, default_arguments:}, get_path_to:{arguments:a, default_arguments:a}, get_pause_mode:{arguments:, default_arguments:}, get_physics_process_delta_time:{arguments:, default_arguments:}, get_position_in_parent:{arguments:, default_arguments:}, get_process_delta_time:{arguments:, default_arguments:}, get_process_priority:{arguments:, default_arguments:}, get_property_list:{arguments:, default_arguments:}, get_scene_instance_load_placeholder:{arguments:, default_arguments:}, get_script:{arguments:, default_arguments:}, get_signal_connection_list:{arguments:a, default_arguments:a}, get_signal_list:{arguments:, default_arguments:}, get_tree:{arguments:, default_arguments:}, get_viewport:{arguments:, default_arguments:}, has_meta:{arguments:a, default_arguments:a}, has_method:{arguments:a, default_arguments:a}, has_node:{arguments:a, default_arguments:a}, has_node_and_resource:{arguments:a, default_arguments:a}, has_signal:{arguments:a, default_arguments:a}, has_user_signal:{arguments:a, default_arguments:a}, is_a_parent_of:{arguments:a, default_arguments:a}, is_blocking_signals:{arguments:, default_arguments:}, is_class:{arguments:a, default_arguments:a}, is_connected:{arguments:a, b, c, default_arguments:a, b, c}, is_displayed_folded:{arguments:, default_arguments:}, is_greater_than:{arguments:a, default_arguments:a}, is_in_group:{arguments:a, default_arguments:a}, is_inside_tree:{arguments:, default_arguments:}, is_network_master:{arguments:, default_arguments:}, is_physics_processing:{arguments:, default_arguments:}, is_physics_processing_internal:{arguments:, default_arguments:}, is_processing:{arguments:, default_arguments:}, is_processing_input:{arguments:, default_arguments:}, is_processing_internal:{arguments:, default_arguments:}, is_processing_unhandled_input:{arguments:, default_arguments:}, is_processing_unhandled_key_input:{arguments:, default_arguments:}, is_queued_for_deletion:{arguments:, default_arguments:}, math_fight:{arguments:, default_arguments:}, move_child:{arguments:a, b, default_arguments:a, b}, multiply:{arguments:a, b, default_arguments:a, b}, notification:{arguments:a, b, default_arguments:a, b = False}, pi:{arguments:, default_arguments:}, print_stray_nodes:{arguments:, default_arguments:}, print_tree:{arguments:, default_arguments:}, print_tree_pretty:{arguments:, default_arguments:}, propagate_call:{arguments:a, b, c, default_arguments:a, b = [], c = False}, propagate_notification:{arguments:a, default_arguments:a}, property_list_changed_notify:{arguments:, default_arguments:}, queue_free:{arguments:, default_arguments:}, raise:{arguments:, default_arguments:}, remove_and_skip:{arguments:, default_arguments:}, remove_child:{arguments:a, default_arguments:a}, remove_from_group:{arguments:a, default_arguments:a}, remove_meta:{arguments:a, default_arguments:a}, replace_by:{arguments:a, b, default_arguments:a, b = False}, request_ready:{arguments:, default_arguments:}, rpc:{arguments:a, default_arguments:a}, rpc_config:{arguments:a, b, default_arguments:a, b}, rpc_id:{arguments:a, b, default_arguments:a, b}, rpc_unreliable:{arguments:a, default_arguments:a}, rpc_unreliable_id:{arguments:a, b, default_arguments:a, b}, rset:{arguments:a, b, default_arguments:a, b}, rset_config:{arguments:a, b, default_arguments:a, b}, rset_id:{arguments:a, b, c, default_arguments:a, b, c}, rset_unreliable:{arguments:a, b, default_arguments:a, b}, rset_unreliable_id:{arguments:a, b, c, default_arguments:a, b, c}, set:{arguments:a, b, default_arguments:a, b}, set_block_signals:{arguments:a, default_arguments:a}, set_custom_multiplayer:{arguments:a, default_arguments:a}, set_deferred:{arguments:a, b, default_arguments:a, b}, set_display_folded:{arguments:a, default_arguments:a}, set_filename:{arguments:a, default_arguments:a}, set_indexed:{arguments:a, b, default_arguments:a, b}, set_message_translation:{arguments:a, default_arguments:a}, set_meta:{arguments:a, b, default_arguments:a, b}, set_name:{arguments:a, default_arguments:a}, set_network_master:{arguments:a, b, default_arguments:a, b = True}, set_owner:{arguments:a, default_arguments:a}, set_pause_mode:{arguments:a, default_arguments:a}, set_physics_process:{arguments:a, default_arguments:a}, set_physics_process_internal:{arguments:a, default_arguments:a}, set_process:{arguments:a, default_arguments:a}, set_process_input:{arguments:a, default_arguments:a}, set_process_internal:{arguments:a, default_arguments:a}, set_process_priority:{arguments:a, default_arguments:a}, set_process_unhandled_input:{arguments:a, default_arguments:a}, set_process_unhandled_key_input:{arguments:a, default_arguments:a}, set_scene_instance_load_placeholder:{arguments:a, default_arguments:a}, set_script:{arguments:a, default_arguments:a}, subtract:{arguments:a, b, default_arguments:a, b}, sum:{arguments:a, default_arguments:a}, to_string:{arguments:, default_arguments:}, tr:{arguments:a, default_arguments:a}, update_configuration_warning:{arguments:, default_arguments:}} != |Dictionary| {_enter_tree:{arguments:, default_arguments:}, _exit_tree:{arguments:, default_arguments:}, _get:{arguments:a, default_arguments:a}, _get_configuration_warning:{arguments:, default_arguments:}, _get_editor_description:{arguments:, default_arguments:}, _get_import_path:{arguments:, default_arguments:}, _get_property_list:{arguments:, default_arguments:}, _init:{arguments:, default_arguments:}, _input:{arguments:a, default_arguments:a}, _notification:{arguments:a, default_arguments:a}, _physics_process:{arguments:a, default_arguments:a}, _process:{arguments:a, default_arguments:a}, _ready:{arguments:, default_arguments:}, _set:{arguments:a, b, default_arguments:a, b}, _set_editor_description:{arguments:a, default_arguments:a}, _set_import_path:{arguments:a, default_arguments:a}, _to_string:{arguments:, default_arguments:}, _unhandled_input:{arguments:a, default_arguments:a}, _unhandled_key_input:{arguments:a, default_arguments:a}, add:{arguments:a, b, default_arguments:a, b}, add_child:{arguments:a, b, default_arguments:a, b = False}, add_child_below_node:{arguments:a, b, c, default_arguments:a, b, c = False}, add_to_group:{arguments:a, b, default_arguments:a, b = False}, add_user_signal:{arguments:a, b, default_arguments:a, b = []}, call:{arguments:a, default_arguments:a}, call_deferred:{arguments:a, default_arguments:a}, callv:{arguments:a, b, default_arguments:a, b}, can_process:{arguments:, default_arguments:}, can_translate_messages:{arguments:, default_arguments:}, connect:{arguments:a, b, c, d, e, default_arguments:a, b, c, d = [], e = 0}, disconnect:{arguments:a, b, c, default_arguments:a, b, c}, divide:{arguments:a, b, default_arguments:a, b}, duplicate:{arguments:a, default_arguments:a = 15}, emit_signal:{arguments:a, default_arguments:a}, find_node:{arguments:a, b, c, default_arguments:a, b = True, c = True}, find_parent:{arguments:a, default_arguments:a}, free:{arguments:, default_arguments:}, get:{arguments:a, default_arguments:a}, get_child:{arguments:a, default_arguments:a}, get_child_count:{arguments:, default_arguments:}, get_children:{arguments:, default_arguments:}, get_class:{arguments:, default_arguments:}, get_custom_multiplayer:{arguments:, default_arguments:}, get_filename:{arguments:, default_arguments:}, get_groups:{arguments:, default_arguments:}, get_incoming_connections:{arguments:, default_arguments:}, get_index:{arguments:, default_arguments:}, get_indexed:{arguments:a, default_arguments:a}, get_instance_id:{arguments:, default_arguments:}, get_meta:{arguments:a, default_arguments:a}, get_meta_list:{arguments:, default_arguments:}, get_method_list:{arguments:, default_arguments:}, get_multiplayer:{arguments:, default_arguments:}, get_name:{arguments:, default_arguments:}, get_network_master:{arguments:, default_arguments:}, get_node:{arguments:a, default_arguments:a}, get_node_and_resource:{arguments:a, default_arguments:a}, get_node_or_null:{arguments:a, default_arguments:a}, get_owner:{arguments:, default_arguments:}, get_parent:{arguments:, default_arguments:}, get_path:{arguments:, default_arguments:}, get_path_to:{arguments:a, default_arguments:a}, get_pause_mode:{arguments:, default_arguments:}, get_physics_process_delta_time:{arguments:, default_arguments:}, get_position_in_parent:{arguments:, default_arguments:}, get_process_delta_time:{arguments:, default_arguments:}, get_process_priority:{arguments:, default_arguments:}, get_property_list:{arguments:, default_arguments:}, get_scene_instance_load_placeholder:{arguments:, default_arguments:}, get_script:{arguments:, default_arguments:}, get_signal_connection_list:{arguments:a, default_arguments:a}, get_signal_list:{arguments:, default_arguments:}, get_tree:{arguments:, default_arguments:}, get_viewport:{arguments:, default_arguments:}, has_meta:{arguments:a, default_arguments:a}, has_method:{arguments:a, default_arguments:a}, has_node:{arguments:a, default_arguments:a}, has_node_and_resource:{arguments:a, default_arguments:a}, has_signal:{arguments:a, default_arguments:a}, has_user_signal:{arguments:a, default_arguments:a}, is_a_parent_of:{arguments:a, default_arguments:a}, is_blocking_signals:{arguments:, default_arguments:}, is_class:{arguments:a, default_arguments:a}, is_connected:{arguments:a, b, c, default_arguments:a, b, c}, is_displayed_folded:{arguments:, default_arguments:}, is_greater_than:{arguments:a, default_arguments:a}, is_in_group:{arguments:a, default_arguments:a}, is_inside_tree:{arguments:, default_arguments:}, is_network_master:{arguments:, default_arguments:}, is_physics_processing:{arguments:, default_arguments:}, is_physics_processing_internal:{arguments:, default_arguments:}, is_processing:{arguments:, default_arguments:}, is_processing_input:{arguments:, default_arguments:}, is_processing_internal:{arguments:, default_arguments:}, is_processing_unhandled_input:{arguments:, default_arguments:}, is_processing_unhandled_key_input:{arguments:, default_arguments:}, is_queued_for_deletion:{arguments:, default_arguments:}, math_fight:{arguments:, default_arguments:}, move_child:{arguments:a, b, default_arguments:a, b}, multiply:{arguments:a, b, default_arguments:a, b}, notification:{arguments:a, b, default_arguments:a, b = False}, pi:{arguments:, default_arguments:}, print_stray_nodes:{arguments:, default_arguments:}, print_tree:{arguments:, default_arguments:}, print_tree_pretty:{arguments:, default_arguments:}, propagate_call:{arguments:a, b, c, default_arguments:a, b = [], c = False}, propagate_notification:{arguments:a, default_arguments:a}, property_list_changed_notify:{arguments:, default_arguments:}, queue_free:{arguments:, default_arguments:}, raise:{arguments:, default_arguments:}, remove_and_skip:{arguments:, default_arguments:}, remove_child:{arguments:a, default_arguments:a}, remove_from_group:{arguments:a, default_arguments:a}, remove_meta:{arguments:a, default_arguments:a}, replace_by:{arguments:a, b, default_arguments:a, b = False}, request_ready:{arguments:, default_arguments:}, rpc:{arguments:a, default_arguments:a}, rpc_config:{arguments:a, b, default_arguments:a, b}, rpc_id:{arguments:a, b, default_arguments:a, b}, rpc_unreliable:{arguments:a, default_arguments:a}, rpc_unreliable_id:{arguments:a, b, default_arguments:a, b}, rset:{arguments:a, b, default_arguments:a, b}, rset_config:{arguments:a, b, default_arguments:a, b}, rset_id:{arguments:a, b, c, default_arguments:a, b, c}, rset_unreliable:{arguments:a, b, default_arguments:a, b}, rset_unreliable_id:{arguments:a, b, c, default_arguments:a, b, c}, set:{arguments:a, b, default_arguments:a, b}, set_block_signals:{arguments:a, default_arguments:a}, set_custom_multiplayer:{arguments:a, default_arguments:a}, set_deferred:{arguments:a, b, default_arguments:a, b}, set_display_folded:{arguments:a, default_arguments:a}, set_filename:{arguments:a, default_arguments:a}, set_indexed:{arguments:a, b, default_arguments:a, b}, set_message_translation:{arguments:a, default_arguments:a}, set_meta:{arguments:a, b, default_arguments:a, b}, set_name:{arguments:a, default_arguments:a}, set_network_master:{arguments:a, b, default_arguments:a, b = True}, set_owner:{arguments:a, default_arguments:a}, set_pause_mode:{arguments:a, default_arguments:a}, set_physics_process:{arguments:a, default_arguments:a}, set_physics_process_internal:{arguments:a, default_arguments:a}, set_process:{arguments:a, default_arguments:a}, set_process_input:{arguments:a, default_arguments:a}, set_process_internal:{arguments:a, default_arguments:a}, set_process_priority:{arguments:a, default_arguments:a}, set_process_unhandled_input:{arguments:a, default_arguments:a}, set_process_unhandled_key_input:{arguments:a, default_arguments:a}, set_scene_instance_load_placeholder:{arguments:a, default_arguments:a}, set_script:{arguments:a, default_arguments:a}, subtract:{arguments:a, b, default_arguments:a, b}, sum:{arguments:a, default_arguments:a}, to_string:{arguments:, default_arguments:}, tr:{arguments:a, default_arguments:a}, update_configuration_warning:{arguments:, default_arguments:}}",
"success": true
} ],
"context": "When we create two of it for the same script",
"fullname": "test_When_we_create_two_of_it_for_the_same_script",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|Object| [Node:7350] is equal to |Object| [Node:7350]",
"context": "Then we get the same double back",
"expected": "|Object| [Node:7350] is equal to |Object| [Node:7350]",
"success": true
} ],
"context": "When we call the double the second time",
"fullname": "test_When_we_call_double_a_second_time_on",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Reference:7357] is instance of class: [GDScript:1564]",
"context": "Then we get that inner class back",
"expected": "[Reference:7357] is instance of class: [GDScript:1564]",
"success": true
} ],
"context": "When we double an inner class",
"fullname": "test_When_we_double_an_inner_class",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 3,
"path": "res://tests/integration/script_director.test.gd",
"source": {
"containers": [ "res://tests/integration", "res://tests" ],
"method": "",
"path": "res://tests/integration/script_director.test.gd",
"tags": [  ],
"test": ExtResource( 13 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 3
}, {
"context": "Given a Test Double",
"methods": [ {
"assertions": [ {
"actual": "|String| Jackie is equal to |String| Jackie",
"context": "Then we can double the object successfully",
"expected": "|String| Jackie is equal to |String| Jackie",
"success": true
} ],
"context": "When we pass in dependecies on double",
"fullname": "test_When_we_pass_in_deps_on_double",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "(1, 1) is builtin: Vector2",
"context": "Then we can call methods on it",
"expected": "(1, 1) is builtin: Vector2",
"success": true
} ],
"context": "When we double an inner class",
"fullname": "test_When_we_double_an_inner_class",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "method: add was called with arguments: [10, 10]",
"context": "Then we can see that it was called with those arguments",
"expected": "method: add was called with arguments: [10, 10]",
"success": true
} ],
"context": "When we pass arguments to a method call that we are spying on",
"fullname": "test_When_we_pass_arguments_to_a_method_call_that_we_are_spying_on",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|float| 6.283185 is equal to |float| 6.283185",
"context": "Then we can call the static methods of that inner double",
"expected": "|float| 6.283185 is equal to |float| 6.283185",
"success": true
} ],
"context": "When we add an doubled inner class to it",
"fullname": "test_When_we_add_a_doubled_inner_class_to_it",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 9999 is equal to |int| 9999",
"context": "Then it returns the corresponding value when the partial pattern matches",
"expected": "|int| 9999 is equal to |int| 9999",
"success": true
} ],
"context": "When we call a method that was stubbed with a partial (ie using any()) argument pattern",
"fullname": "test_When_we_call_a_method_that_was_stubbed_with_a_partial_argument_pattern",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "add was called",
"context": "Then we can see that it was called at least once",
"expected": "add was called",
"success": true
} ],
"context": "When we call a method that we are spying on",
"fullname": "test_When_we_call_a_method_that_we_are_spying_on",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 4 is equal to |int| 4",
"context": "Then we get the correct result",
"expected": "|int| 4 is equal to |int| 4",
"success": true
} ],
"context": "When we call an add(x, y) method that we haven't directed",
"fullname": "test_When_we_call_an_add_method_that_we_have_not_directed",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|null| Null == null",
"context": "Then we get the stubbed value back",
"expected": "|null| Null == null",
"success": true
} ],
"context": "When we stub a method of a doubled inner class",
"fullname": "test_When_we_stub_a_method_of_a_double_inner_class",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 99 is equal to |int| 99",
"context": "Then it affects the state of the double",
"expected": "|int| 99 is equal to |int| 99",
"success": true
} ],
"context": "When we pass a funcref as a subcall",
"fullname": "test_When_we_pass_a_funcref_as_a_subcall",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|Array| [10, 5] is equal to |Array| [10, 5]",
"context": "Then it returns a value",
"expected": "|Array| [10, 5] is equal to |Array| [10, 5]",
"success": true
} ],
"context": "When we pass an Object with a call_func function",
"fullname": "test_When_we_pass_an_object_with_callfunc_method_as_a_subcall",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 9999 is equal to |int| 9999",
"context": "Then it returns the corresponding value when the pattern matches",
"expected": "|int| 9999 is equal to |int| 9999",
"success": true
} ],
"context": "When we call a method that was stubbed with an argument pattern that includes a non-primitive object",
"fullname": "test_When_we_call_a_method_that_was_stubbed_with_an_argument_pattern_that_includes_a_non_primitive_object",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|null| Null == null",
"context": "Then we get null",
"expected": "|null| Null == null",
"success": true
} ],
"context": "When we call a method that we have dummied",
"fullname": "test_When_we_call_a_method_that_we_have_dummied",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 99 is equal to |int| 99",
"context": "Then it returns a value",
"expected": "|int| 99 is equal to |int| 99",
"success": true
} ],
"context": "When we pass a funcref as a subcall that returns",
"fullname": "test_When_we_pass_a_funcref_as_a_subcall_that_returns_a_value",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then it returns true",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we call a method that we have stubbed to return true",
"fullname": "test_When_we_call_a_method_that_we_have_stubbed_to_return_true",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|Object| [Node:7460] is equal to |Object| [Node:7460]",
"context": "Then it returns that same node",
"expected": "|Object| [Node:7460] is equal to |Object| [Node:7460]",
"success": true
} ],
"context": "When we call a method that we have stubbed to return a node",
"fullname": "test_When_we_call_a_method_that_we_have_stubbed_to_return_a_node",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|String| Jackie is equal to |String| Jackie",
"context": "Then we can double the object successfully",
"expected": "|String| Jackie is equal to |String| Jackie",
"success": true
} ],
"context": "When we pass in dependecies on direct",
"fullname": "test_When_we_pass_in_deps_on_direct",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 100 is equal to |int| 100",
"context": "Then it returns the default stubbed value when the arguments don't match any pattern",
"expected": "|int| 100 is equal to |int| 100",
"success": true
}, {
"actual": "|int| 1000 is equal to |int| 1000",
"context": "Then it returns the the corresponding value to the pattern the arguments matched",
"expected": "|int| 1000 is equal to |int| 1000",
"success": true
} ],
"context": "When we call a method that was stubbed to return different values based on argument patterns",
"fullname": "test_When_we_call_a_method_that_was_stubbed_to_return_different_values_based_on_argument_patterns",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|bool| True is equal to |bool| True",
"context": "Then we can call it",
"expected": "|bool| True is equal to |bool| True",
"success": true
} ],
"context": "When we stubbed a keyworded method by passing in the correct keyword",
"fullname": "test_When_we_stubbed_a_keyword_method_by_passing_in_the_correct_keyword",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 4 is equal to |int| 4",
"context": "Then it calls its super implementation by default",
"expected": "|int| 4 is equal to |int| 4",
"success": true
}, {
"actual": "|int| 9999 is equal to |int| 9999",
"context": "Then it does not call its super implementation when arguments patterns match a different return value",
"expected": "|int| 9999 is equal to |int| 9999",
"success": true
} ],
"context": "When we call a method that we stubbed to call its super implementation by default",
"fullname": "test_When_we_call_a_method_that_we_stubbed_to_call_its_super_implementation_by_default",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
} ],
"passed": 19,
"path": "res://tests/integration/test_double.test.gd",
"source": {
"containers": [ "res://tests/integration", "res://tests" ],
"method": "",
"path": "res://tests/integration/test_double.test.gd",
"tags": [  ],
"test": ExtResource( 14 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 19
}, {
"context": "Given a Boolean Assertion",
"methods": [ {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then it passes",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When calling asserts.is_true(true)",
"fullname": "test_when_calling_asserts_is_true",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| False == false",
"context": "Then it passes",
"expected": "|bool| False == false",
"success": true
} ],
"context": "When calling asserts.is_false(false)",
"fullname": "test_when_calling_asserts_is_false",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| True != false",
"context": "",
"expected": "|bool| True == false",
"success": false
} ],
"context": " intentional failure",
"fullname": "test_intentional_failure",
"passed": 0,
"success": false,
"time": 0.0,
"total": 1
} ],
"passed": 2,
"path": "res://tests/unit/boolean.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/boolean.test.gd",
"tags": [  ],
"test": ExtResource( 11 ),
"yield_time": 0.0
},
"success": false,
"time_taken": 0.0,
"total": 3
}, {
"context": "Given an Equality Assertion",
"methods": [ {
"assertions": [ {
"actual": "|int| 2 is equal or greater |int| 1",
"context": "Then it passes",
"expected": "|int| 2 is equal or greater |int| 1",
"success": true
} ],
"context": "When calling asserts.is_equal_or_greater_than(2, 1)",
"fullname": "test_when_calling_is_equal_or_greater_than",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 2 is greater than |int| 1",
"context": "Then it passes",
"expected": "|int| 2 is greater than |int| 1",
"success": true
} ],
"context": "When calling asserts.is_greater_than(2, 1)",
"fullname": "test_when_calling_is_greater_than",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 1 is equal to |int| 1",
"context": "Then it passes",
"expected": "|int| 1 is equal to |int| 1",
"success": true
} ],
"context": "When calling asserts.is_equal(1, 1)",
"fullname": "test_when_calling_is_equal",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 1 is less than |int| 2",
"context": "Then it passes",
"expected": "|int| 1 is less than |int| 2",
"success": true
} ],
"context": "When calling asserts.is_less_than(2, 1)",
"fullname": "test_when_calling_is_less_than",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 1 is equal or greater |int| 1",
"context": "Then it passes",
"expected": "|int| 1 is equal or greater |int| 1",
"success": true
} ],
"context": "When calling asserts.is_equal_or_greater_than(1, 1)",
"fullname": "test_when_calling_is_equal_or_greater_than_with_equal_values",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 5 is not equal to |int| 6",
"context": "Then it passes",
"expected": "|int| 5 != |int| 6",
"success": true
} ],
"context": "When callign asserts.is_not_equal(5, 6)",
"fullname": "test_when_calling_is_not_equal",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 1 is equal or less than |int| 1",
"context": "Then it passes!",
"expected": "|int| 1 is equal or less than |int| 1",
"success": true
} ],
"context": "When calling asserts.is_equal_or_less_than(1, 1)",
"fullname": "test_when_calling_is_equal_or_less_than_with_equal_values",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 7,
"path": "res://tests/unit/equality.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/equality.test.gd",
"tags": [  ],
"test": ExtResource( 8 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 7
}, {
"context": "Given A File Assertion",
"methods": [ {
"assertions": [ {
"actual": "res://somefile.gd does not exist",
"context": "Then it passes",
"expected": "res://somefile.gd does not exist",
"success": true
} ],
"context": "When calling asserts.file_does_not_exist when there is no file",
"fullname": "test_when_calling_file_does_not_exist_when_there_is_no_file",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": " does not exist",
"context": "Then it passes",
"expected": " does not exist",
"success": true
} ],
"context": "When calling asserts file does not exist when path is empty",
"fullname": "test_when_calling_file_does_not_exist_when_path_is_empty",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "res://tests/unit/file.test.gd exists",
"context": "Then it passes",
"expected": "res://tests/unit/file.test.gd exists",
"success": true
} ],
"context": "When calling asserts.file_exists when the file is this suite",
"fullname": "test_when_calling_file_exists_when_file_is_self",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 3,
"path": "res://tests/unit/file.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/file.test.gd",
"tags": [  ],
"test": ExtResource( 3 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 3
}, {
"context": "Given an Is Instance of class/type Assertion",
"methods": [ {
"assertions": [ {
"actual": "|AABB| 0, 0, 0 - 0, 0, 0 != null",
"context": "AABB is not null",
"expected": "|AABB| 0, 0, 0 - 0, 0, 0 != null",
"success": true
}, {
"actual": "0, 0, 0 - 0, 0, 0 is builtin: AABB",
"context": "Then it passes",
"expected": "0, 0, 0 - 0, 0, 0 is builtin: AABB",
"success": true
} ],
"context": "When calling asserts.is_AABB(aabb: AABB)",
"fullname": "test_when_calling_is_AABB",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|Array| [] != null",
"context": "array is not null",
"expected": "|Array| [] != null",
"success": true
}, {
"actual": "[] is builtin: Array",
"context": "Then it passes",
"expected": "[] is builtin: Array",
"success": true
} ],
"context": "When calling asserts.is_Array(array: Array)",
"fullname": "test_when_calling_is_Array",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|Transform2D| ((1, 0), (0, 1), (0, 0)) != null",
"context": "transform2D is not null",
"expected": "|Transform2D| ((1, 0), (0, 1), (0, 0)) != null",
"success": true
}, {
"actual": "((1, 0), (0, 1), (0, 0)) is builtin: Transform2D",
"context": "Then it passes",
"expected": "((1, 0), (0, 1), (0, 0)) is builtin: Transform2D",
"success": true
} ],
"context": "When calling asserts.is_Transform(transform2D: Transform2D)",
"fullname": "test_when_calling_is_Transform2D",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|Rect2| (0, 0, 0, 0) != null",
"context": "rect2 is not null",
"expected": "|Rect2| (0, 0, 0, 0) != null",
"success": true
}, {
"actual": "(0, 0, 0, 0) is builtin: Rect2",
"context": "Then it passes",
"expected": "(0, 0, 0, 0) is builtin: Rect2",
"success": true
} ],
"context": "When calling asserts.is_Rect2(rect2: Rect2)",
"fullname": "test_when_calling_is_Rect2",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|Vector3| (0, 0, 0) != null",
"context": "vec3 is not null",
"expected": "|Vector3| (0, 0, 0) != null",
"success": true
}, {
"actual": "(0, 0, 0) is builtin: Vector3",
"context": "Then it passes",
"expected": "(0, 0, 0) is builtin: Vector3",
"success": true
} ],
"context": "When calling asserts.is_Vector3(vec3: Vector3",
"fullname": "test_when_calling_is_Vector3",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|Quat| (0, 0, 0, 1) != null",
"context": "quat is not null",
"expected": "|Quat| (0, 0, 0, 1) != null",
"success": true
}, {
"actual": "(0, 0, 0, 1) is builtin: Quat",
"context": "Then it passes",
"expected": "(0, 0, 0, 1) is builtin: Quat",
"success": true
} ],
"context": "When calling asserts.is_Quat(quat: Quat)",
"fullname": "test_when_calling_is_Quat",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "{} is builtin: Dictionary",
"context": "Then it passes",
"expected": "{} is builtin: Dictionary",
"success": true
} ],
"context": "When calling asserts.is_Dictionary({})",
"fullname": "test_when_calling_is_Dictionary",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|PoolIntArray| [] != null",
"context": "ints is not null",
"expected": "|PoolIntArray| [] != null",
"success": true
}, {
"actual": "[] is builtin: PoolIntArray",
"context": "Then it passes",
"expected": "[] is builtin: PoolIntArray",
"success": true
} ],
"context": "When calling asserts.is_PoolIntArray(ints: PoolIntArray)",
"fullname": "test_when_calling_is_PoolIntArray",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|PoolByteArray| [PoolByteArray] != null",
"context": "bytes is not null",
"expected": "|PoolByteArray| [PoolByteArray] != null",
"success": true
}, {
"actual": "[PoolByteArray] is builtin: PoolByteArray",
"context": "Then it passes",
"expected": "[PoolByteArray] is builtin: PoolByteArray",
"success": true
} ],
"context": "When calling asserts.is_PoolByteArray(bytes: PoolByteArray)",
"fullname": "test_when_calling_is_PoolByteArray",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|RID| [RID] != null",
"context": "rid is not null",
"expected": "|RID| [RID] != null",
"success": true
}, {
"actual": "[RID] is builtin: RID",
"context": "Then it passes",
"expected": "[RID] is builtin: RID",
"success": true
} ],
"context": "When calling asserts.is_RID(rid: RID)",
"fullname": "test_when_calling_is_RID",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|PoolStringArray| [] != null",
"context": "strs is not null",
"expected": "|PoolStringArray| [] != null",
"success": true
}, {
"actual": "[] is builtin: PoolStringArray",
"context": "Then it passes",
"expected": "[] is builtin: PoolStringArray",
"success": true
} ],
"context": "When calling is asserts.is_PoolStringArray(strs: PoolStringArray)",
"fullname": "test_when_calling_is_PoolStringArray",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "1 is builtin: float",
"context": "Then it passes",
"expected": "1 is builtin: float",
"success": true
} ],
"context": "When calling asserts.is_float(1.0)",
"fullname": "test_when_calling_is_float",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|PoolColorArray| [PoolColorArray] != null",
"context": "colors is not null",
"expected": "|PoolColorArray| [PoolColorArray] != null",
"success": true
}, {
"actual": "[PoolColorArray] is builtin: PoolColorArray",
"context": "Then it passes",
"expected": "[PoolColorArray] is builtin: PoolColorArray",
"success": true
} ],
"context": "When calling asserts.is_PoolColorArray(colors: PoolColorArray)",
"fullname": "test_when_calling_is_PoolColorArray",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|NodePath| . != null",
"context": "@'Parent/Child' is not null",
"expected": "|NodePath| . != null",
"success": true
}, {
"actual": ". is builtin: NodePath",
"context": "Then it passes",
"expected": ". is builtin: NodePath",
"success": true
} ],
"context": "When calling asserts.is_NodePath(@'Parent/Child')",
"fullname": "test_when_calling_is_NodePath",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|PoolVector2Array| [] != null",
"context": "vec2s is not null",
"expected": "|PoolVector2Array| [] != null",
"success": true
}, {
"actual": "[] is builtin: PoolVector2Array",
"context": "Then it passes",
"expected": "[] is builtin: PoolVector2Array",
"success": true
} ],
"context": "When calling is asserts.is_PoolVector2Array(vec2s: PoolVector2Array)",
"fullname": "test_when_calling_is_PoolVector2Array",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|PoolVector3Array| [] != null",
"context": "vec3s is not null",
"expected": "|PoolVector3Array| [] != null",
"success": true
}, {
"actual": "[] is builtin: PoolVector3Array",
"context": "Then it passes",
"expected": "[] is builtin: PoolVector3Array",
"success": true
} ],
"context": "When calling is asserts.is_PoolVector3Array(vec3s: PoolVector3Array)",
"fullname": "test_when_calling_is_PoolVector3Array",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|Transform| 1, 0, 0, 0, 1, 0, 0, 0, 1 - 0, 0, 0 != null",
"context": "transform is not null",
"expected": "|Transform| 1, 0, 0, 0, 1, 0, 0, 0, 1 - 0, 0, 0 != null",
"success": true
}, {
"actual": "1, 0, 0, 0, 1, 0, 0, 0, 1 - 0, 0, 0 is builtin: Transform",
"context": "Then it passes",
"expected": "1, 0, 0, 0, 1, 0, 0, 0, 1 - 0, 0, 0 is builtin: Transform",
"success": true
} ],
"context": "When calling asserts.is_Transform(transform: Transform)",
"fullname": "test_when_calling_is_Transform",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|String|  != null",
"context": "strs is not null",
"expected": "|String|  != null",
"success": true
}, {
"actual": " is builtin: String",
"context": "Then it passes",
"expected": " is builtin: String",
"success": true
} ],
"context": "When calling asserts.is_string(strs: String)",
"fullname": "test_when_calling_is_string",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|Basis| ((1, 0, 0), (0, 1, 0), (0, 0, 1)) != null",
"context": "basis is not null",
"expected": "|Basis| ((1, 0, 0), (0, 1, 0), (0, 0, 1)) != null",
"success": true
}, {
"actual": "((1, 0, 0), (0, 1, 0), (0, 0, 1)) is builtin: Basis",
"context": "Then it passes",
"expected": "((1, 0, 0), (0, 1, 0), (0, 0, 1)) is builtin: Basis",
"success": true
} ],
"context": "When calling asserts.is_basis(basis: Basis",
"fullname": "test_when_calling_is_Basis",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|Plane| 0, 0, 0, 0 != null",
"context": "plane is not null",
"expected": "|Plane| 0, 0, 0, 0 != null",
"success": true
}, {
"actual": "0, 0, 0, 0 is builtin: Plane",
"context": "then it passes",
"expected": "0, 0, 0, 0 is builtin: Plane",
"success": true
} ],
"context": "When calling asserts.is_Plane(plane: Plane())",
"fullname": "test_when_calling_is_Plane",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|Vector2| (0, 0) != null",
"context": "vec2 is not null",
"expected": "|Vector2| (0, 0) != null",
"success": true
}, {
"actual": "(0, 0) is builtin: Vector2",
"context": "Then it passes",
"expected": "(0, 0) is builtin: Vector2",
"success": true
} ],
"context": "When calling asserts.is_Vector2(vec2)",
"fullname": "test_when_calling_is_Vector2",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|Object| [Node:7560] != null",
"context": "node is not null",
"expected": "|Object| [Node:7560] != null",
"success": true
}, {
"actual": "[Node:7560] is builtin: Object",
"context": "An instance of node is an Object",
"expected": "[Node:7560] is builtin: Object",
"success": true
} ],
"context": "When calling is asserts.object(node: Node)",
"fullname": "test_when_calling_is_object",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|PoolRealArray| [] != null",
"context": "reals is not null",
"expected": "|PoolRealArray| [] != null",
"success": true
}, {
"actual": "[] is builtin: PoolRealArray",
"context": "Then it passes",
"expected": "[] is builtin: PoolRealArray",
"success": true
} ],
"context": "When calling is asserts.is_PoolRealArray(reals: PoolRealArray)",
"fullname": "test_when_calling_is_PoolRealArray",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "True is builtin: bool",
"context": "Then it passes",
"expected": "True is builtin: bool",
"success": true
} ],
"context": "When calling asserts.is_bool(true)",
"fullname": "test_when_calling_is_bool",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "1 is builtin: int",
"context": "Then it passes",
"expected": "1 is builtin: int",
"success": true
} ],
"context": "When callign asserts.is_int(1)",
"fullname": "test_when_calling_is_int",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|Color| 0,0,0,1 != null",
"context": "color is not null",
"expected": "|Color| 0,0,0,1 != null",
"success": true
}, {
"actual": "0,0,0,1 is builtin: Color",
"context": "Then it passes",
"expected": "0,0,0,1 is builtin: Color",
"success": true
} ],
"context": "When calling asserts.is_color(color: Color)",
"fullname": "test_when_calling_is_Color",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
} ],
"passed": 26,
"path": "res://tests/unit/is_instance.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/is_instance.test.gd",
"tags": [  ],
"test": ExtResource( 6 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 26
}, {
"context": "Given an Is Not Instance of class/type Assertion",
"methods": [ {
"assertions": [ {
"actual": "Null is not builtin: Array",
"context": "Then it passes",
"expected": "Null is not builtin: Array",
"success": true
} ],
"context": "when calling asserts.is_not_Array(null)",
"fullname": "test_when_calling_is_not_Array",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Color",
"context": "Then it passes",
"expected": "Null is not builtin: Color",
"success": true
} ],
"context": "when calling asserts.is_not_Color(null)",
"fullname": "test_when_calling_is_not_Color",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: float",
"context": "Then it passes",
"expected": "Null is not builtin: float",
"success": true
} ],
"context": "when calling asserts.is_not_float(null)",
"fullname": "test_when_calling_is_not_float",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: AABB",
"context": "Then it passes",
"expected": "Null is not builtin: AABB",
"success": true
} ],
"context": "when calling asserts.is_not_AABB(null)",
"fullname": "test_when_calling_is_not_AABB",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Basis",
"context": "Then it passes",
"expected": "Null is not builtin: Basis",
"success": true
} ],
"context": "when calling asserts.is_not_Basis(null)",
"fullname": "test_when_calling_is_not_Basis",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: int",
"context": "Then it passes",
"expected": "Null is not builtin: int",
"success": true
} ],
"context": "when calling asserts.is_not_int(null)",
"fullname": "test_when_calling_is_not_int",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: bool",
"context": "Then it passes",
"expected": "Null is not builtin: bool",
"success": true
} ],
"context": "when calling asserts.is_not_bool(null)",
"fullname": "test_when_calling_is_not_bool",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Dictionary",
"context": "Then it passes",
"expected": "Null is not builtin: Dictionary",
"success": true
} ],
"context": "when calling asserts.is_not_Dictionary(null)",
"fullname": "test_when_calling_is_not_Dictionary",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: NodePath",
"context": "Then it passes",
"expected": "Null is not builtin: NodePath",
"success": true
} ],
"context": "when calling asserts.is_not_NodePath(null)",
"fullname": "test_when_calling_is_not_NodePath",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Object",
"context": "Then it passes",
"expected": "Null is not builtin: Object",
"success": true
} ],
"context": "when calling asserts.is_not_Object(null)",
"fullname": "test_when_calling_is_not_Object",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: PoolStringArray",
"context": "Then it passes",
"expected": "Null is not builtin: PoolStringArray",
"success": true
} ],
"context": "when calling asserts.is_not_PoolStringArray(null)",
"fullname": "test_when_calling_is_not_PoolStringArray",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Quat",
"context": "Then it passes",
"expected": "Null is not builtin: Quat",
"success": true
} ],
"context": "when calling asserts.is_not_Quat(null)",
"fullname": "test_when_calling_is_not_Quat",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: PoolRealArray",
"context": "Then it passes",
"expected": "Null is not builtin: PoolRealArray",
"success": true
} ],
"context": "when calling asserts.is_not_PoolRealArray(null)",
"fullname": "test_when_calling_is_not_PoolRealArray",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: RID",
"context": "Then it passes",
"expected": "Null is not builtin: RID",
"success": true
} ],
"context": "when calling asserts.is_not_RID(null)",
"fullname": "test_when_calling_is_not_RID",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: PoolIntArray",
"context": "Then it passes",
"expected": "Null is not builtin: PoolIntArray",
"success": true
} ],
"context": "when calling asserts.is_not_PoolIntArray(null)",
"fullname": "test_when_calling_is_not_PoolIntArray",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Vector2",
"context": "Then it passes",
"expected": "Null is not builtin: Vector2",
"success": true
} ],
"context": "when calling asserts.is_not_Vector2(null)",
"fullname": "test_when_calling_is_not_Vector2",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Transform",
"context": "Then it passes",
"expected": "Null is not builtin: Transform",
"success": true
} ],
"context": "when calling asserts.is_not_Transform(null)",
"fullname": "test_when_calling_is_not_Transform",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: String",
"context": "Then it passes",
"expected": "Null is not builtin: String",
"success": true
} ],
"context": "when calling asserts.is_not_String(null)",
"fullname": "test_when_calling_is_not_String",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: PoolVector2Array",
"context": "Then it passes",
"expected": "Null is not builtin: PoolVector2Array",
"success": true
} ],
"context": "when calling asserts.is_not_PoolVector2Array(null)",
"fullname": "test_when_calling_is_not_PoolVector2Array",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: PoolVector3Array",
"context": "Then it passes",
"expected": "Null is not builtin: PoolVector3Array",
"success": true
} ],
"context": "when calling asserts.is_not_PoolVector3Array(null)",
"fullname": "test_when_calling_is_not_PoolVector3Array",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Plane",
"context": "Then it passes",
"expected": "Null is not builtin: Plane",
"success": true
} ],
"context": "when calling asserts.is_not_Plane(null)",
"fullname": "test_when_calling_is_not_Plane",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Transform2D",
"context": "Then it passes",
"expected": "Null is not builtin: Transform2D",
"success": true
} ],
"context": "when calling asserts.is_not_Transform2D(null)",
"fullname": "test_when_calling_is_not_Transform2D",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: PoolColorArray",
"context": "Then it passes",
"expected": "Null is not builtin: PoolColorArray",
"success": true
} ],
"context": "when calling asserts.is_not_PoolColorArray(null)",
"fullname": "test_when_calling_is_not_PoolColorArray",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Vector3",
"context": "Then it passes",
"expected": "Null is not builtin: Vector3",
"success": true
} ],
"context": "when calling asserts.is_not_Vector3(null)",
"fullname": "test_when_calling_is_not_Vector3",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: PoolByteArray",
"context": "Then it passes",
"expected": "Null is not builtin: PoolByteArray",
"success": true
} ],
"context": "when calling asserts.is_not_PoolByteArray(null)",
"fullname": "test_when_calling_is_not_PoolByteArray",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Rect2",
"context": "Then it passes",
"expected": "Null is not builtin: Rect2",
"success": true
} ],
"context": "when calling asserts.is_not_Rect2(null)",
"fullname": "test_when_calling_is_not_Rect2",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 26,
"path": "res://tests/unit/is_not_instance.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/is_not_instance.test.gd",
"tags": [  ],
"test": ExtResource( 2 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 26
}, {
"context": "Given a Null Assertion",
"methods": [ {
"assertions": [ {
"actual": "|Object| [Node:7601] != null",
"context": "Then it passes",
"expected": "|Object| [Node:7601] != null",
"success": true
} ],
"context": "When calling Node is not null",
"fullname": "test_when_calling_node_is_not_null",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|null| Null == null",
"context": "Then it passes",
"expected": "|null| Null == null",
"success": true
} ],
"context": "When calling asserts.is_null(null)",
"fullname": "test_when_calling_null_is_null",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|Object| [Deleted Object] == null",
"context": "A Freed Node is null in Engine 3.2.2 or greater",
"expected": "|Object| [Deleted Object] == null",
"success": true
} ],
"context": "When calling freed object is null",
"fullname": "test_when_calling_freed_object_is_not_null",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 3,
"path": "res://tests/unit/null.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/null.test.gd",
"tags": [  ],
"test": ExtResource( 12 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 3
}, {
"context": "Given an Object Assertion",
"methods": [ {
"assertions": [ {
"actual": "[Node:7606] does not have meta: confusing",
"context": "Then it passes",
"expected": "[Node:7606] does not have meta: confusing",
"success": true
} ],
"context": "When calling asserts.object_has_meta with real key but null val",
"fullname": "test_when_calling_does_not_have_meta_real_key_null_value_pair",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:7606] has method: title",
"context": "Then it passes",
"expected": "[Node:7606] has method: title",
"success": true
} ],
"context": "When calling has_method('title')",
"fullname": "test_when_calling_has_method_title",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:7606] has user signal: dummy_signal",
"context": "Then it passes",
"expected": "[Node:7606] has user signal: dummy_signal",
"success": true
} ],
"context": "When calling obj_has_user_signal after adding a signal",
"fullname": "test_when_calling_has_user_signal_after_adding_a_signal",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:7606] does not have user signal: false_signal",
"context": "Then it passes",
"expected": "[Node:7606] does not have user signal: false_signal",
"success": true
} ],
"context": "When calling obj_does_not_have_user_signal with fake signal",
"fullname": "test_when_calling_does_not_have_user_signal",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is freed from memory",
"context": "Then it passes",
"expected": "Null is freed from memory",
"success": true
} ],
"context": "When calling asserts.is_freed(freed_object",
"fullname": "test_when_calling_freed_object_is_freed",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:7606] has meta: dummy",
"context": "Then it passes",
"expected": "[Node:7606] has meta: dummy",
"success": true
}, {
"actual": "[Node:7606] has meta: dummy",
"context": "Then it passes",
"expected": "[Node:7606] has meta: dummy",
"success": true
} ],
"context": "When calling asserts.object_has_meta() after adding metadata",
"fullname": "test_when_calling_has_meta_after_adding_metadata",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "[Node:7617] is not freed",
"context": "Then it passes",
"expected": "[Node:7617] is not freed",
"success": true
} ],
"context": "When calling asserts.is_not_freed(unfreed_object)",
"fullname": "test_when_calling_unfreed_object_is_not_freed",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:7606] does not have meta: bad_meta",
"context": "Then it passes",
"expected": "[Node:7606] does not have meta: bad_meta",
"success": true
} ],
"context": "When calling asserts.object_does_not_have_meta()",
"fullname": "test_when_calling_does_not_have_meta",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:7620] is queued for deletion",
"context": "Then it passes",
"expected": "[Node:7620] is queued for deletion",
"success": true
} ],
"context": "When calling asserts.object_is_queued for deletion after calling queue_free",
"fullname": "test_when_calling_obj_is_queued_for_deletion_after_calling_queue_free",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:7622] is blocking signals",
"context": "Then it passes",
"expected": "[Node:7622] is blocking signals",
"success": true
} ],
"context": "When calling is blocking signals while blocking signals",
"fullname": "test_is_blocking_signals",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:7624] is not blocking signals",
"context": "Then it passes",
"expected": "[Node:7624] is not blocking signals",
"success": true
} ],
"context": "When calling is not blocking signals while not blocking signals",
"fullname": "test_is_not_blocking_signals",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:7626] is not queued for deletion",
"context": "Then it passes",
"expected": "[Node:7626] is not queued for deletion",
"success": true
} ],
"context": "When calling asserts.object_is_not_for_queued_deletion after not calling queue free()",
"fullname": "test_when_calling_obj_is_not_for_queued_deletion_after_not_calling_queue_free",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:7606].builtin_dummy is connected to [Node:7606].title",
"context": "Then it passes",
"expected": "[Node:7606].builtin_dummy is connected to [Node:7606].title",
"success": true
} ],
"context": "When calling asserts object is connected with a valid connection",
"fullname": "test_when_calling_obj_is_connected_with_a_real_connection",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:7606].builtin_dummy is not connected to [Node:7606].title",
"context": "Then it passes",
"expected": "[Node:7606].builtin_dummy is not connected to [Node:7606].title",
"success": true
} ],
"context": "When calling asserts object is not connected with an invalid connection",
"fullname": "test_when_calling_obj_is_not_connected_with_an_invalid_connection",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:7606] does not have user signal: builtin_dummy",
"context": "Then it passes",
"expected": "[Node:7606] does not have user signal: builtin_dummy",
"success": true
} ],
"context": "When calling does not have user signal with class signal",
"fullname": "test_when_calling_does_not_have_user_signal_with_class_signal_constant",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 15,
"path": "res://tests/unit/object.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/object.test.gd",
"tags": [  ],
"test": ExtResource( 7 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 15
}, {
"context": "Given the Addition Operator",
"methods": [ {
"assertions": [ {
"actual": "|int| 4 is equal to |int| 4",
"context": "",
"expected": "|int| 4 is equal to |int| 4",
"success": true
} ],
"context": "When we add 2 to 2 we get 4",
"fullname": "test_add",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 8 is equal to |int| 8",
"context": "",
"expected": "|int| 8 is equal to |int| 8",
"success": true
} ],
"context": "When we add 5 to 3 we get 8",
"fullname": "test_add",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 13 is equal to |int| 13",
"context": "",
"expected": "|int| 13 is equal to |int| 13",
"success": true
} ],
"context": "When we add 7 to 6 we get 13",
"fullname": "test_add",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 0 is equal to |int| 0",
"context": "",
"expected": "|int| 0 is equal to |int| 0",
"success": true
} ],
"context": "When we subtract 2 from 2 we get 0",
"fullname": "test_subtract",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 2 is equal to |int| 2",
"context": "",
"expected": "|int| 2 is equal to |int| 2",
"success": true
} ],
"context": "When we subtract 5 from 3 we get 2",
"fullname": "test_subtract",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 1 is equal to |int| 1",
"context": "",
"expected": "|int| 1 is equal to |int| 1",
"success": true
} ],
"context": "When we subtract 7 from 6 we get 1",
"fullname": "test_subtract",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 6,
"path": "res://tests/unit/parameters.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/parameters.test.gd",
"tags": [  ],
"test": ExtResource( 16 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 6
}, {
"context": "Given A Range Assertion",
"methods": [ {
"assertions": [ {
"actual": "10 is not in range(0, 10)",
"context": "Then it passes",
"expected": "10 is not in range(0, 10)",
"success": true
} ],
"context": "When calling is (10) not in range (in range(0, 10)",
"fullname": "test_when_calling_is_not_in_range",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "0 is in range(0, 10)",
"context": "Then it passes",
"expected": "0 is in range(0, 10)",
"success": true
} ],
"context": "When calling is (0) in range(0, 10)",
"fullname": "test_when_calling_is_in_range",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 2,
"path": "res://tests/unit/range.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/range.test.gd",
"tags": [  ],
"test": ExtResource( 15 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 2
}, {
"context": "Given a String Assertion",
"methods": [ {
"assertions": [ {
"actual": "impsum does not begin with bleh lorem",
"context": "Then it passes",
"expected": "impsum does not begin with bleh lorem",
"success": true
} ],
"context": "When calling asserts.string_does_not_begin_with('lorem', 'impsum')",
"fullname": "test_when_calling_string_does_not_begin_with",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "lorem impsum begins with lorem",
"context": "Then it passes",
"expected": "lorem impsum begins with lorem",
"success": true
} ],
"context": "When calling asserts.string_begins_with('lorem', 'lorem impsum')",
"fullname": "test_when_calling_string_begins_with",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "lorem impsum ends with impsum",
"context": "Then it passes",
"expected": "lorem impsum ends with impsum",
"success": true
} ],
"context": "When calling asserts.string_ends_with('impsum', 'lorem impsum')",
"fullname": "test_when_calling_string_ends_with",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "impsum does not contain beem im",
"context": "Then it passes",
"expected": "impsum does not contain beem im",
"success": true
} ],
"context": "When calling asserts.string_does_not_contain('em im', 'impsum')",
"fullname": "test_when_calling_string_does_not_contain",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "lorem impsum contains em im",
"context": "Then it passes",
"expected": "lorem impsum contains em im",
"success": true
} ],
"context": "When calling asserts.string_contains('em im', 'lorem impsum')",
"fullname": "test_when_calling_string_contains",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "impsum does not end with lorem",
"context": "Then it passes",
"expected": "impsum does not end with lorem",
"success": true
} ],
"context": "When calling asserts.string_does_not_end_with('lorem', 'impsum')",
"fullname": "test_when_calling_string_does_not_end_with",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 6,
"path": "res://tests/unit/string.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/string.test.gd",
"tags": [  ],
"test": ExtResource( 9 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 6
}, {
"context": "Dummy Passing Test",
"methods": [ {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Passing!",
"expected": "|bool| True == true",
"success": true
} ],
"context": "This method passes",
"fullname": "test_this_method_passes",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 1,
"path": "res://tests/unit/suite.test.gd.DummyOne",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/suite.test.gd.DummyOne",
"tags": [  ],
"test": SubResource( 19 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 1
}, {
"context": "Dummy Test 2",
"methods": [ {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Passing!",
"expected": "|bool| True == true",
"success": true
} ],
"context": "This method passes",
"fullname": "test_this_method_passes",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 1,
"path": "res://tests/unit/suite.test.gd.DummyTwo",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/suite.test.gd.DummyTwo",
"tags": [  ],
"test": SubResource( 20 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 1
}, {
"context": "Given a Test Script",
"methods": [ {
"assertions": [ {
"actual": "|int| 10 is greater than |int| 1",
"context": "We get an array of multiple values back",
"expected": "|int| 10 is greater than |int| 1",
"success": true
}, {
"actual": "|int| 0 is not equal to |int| 9",
"context": "With different values",
"expected": "|int| 0 != |int| 9",
"success": true
}, {
"actual": "|int| 10 is greater than |int| 1",
"context": "And we can track multiple properties",
"expected": "|int| 10 is greater than |int| 1",
"success": true
} ],
"context": "When we record properties",
"fullname": "test_we_can_record_properties",
"passed": 3,
"success": true,
"time": 0.0,
"total": 3
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "if the test didn't break this works",
"expected": "|bool| True == true",
"success": true
} ],
"context": " we can omit describe",
"fullname": "test_we_can_omit_describe",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|int| 2 is equal to |int| 2",
"context": "",
"expected": "|int| 2 is equal to |int| 2",
"success": true
} ],
"context": " when we omit context we can see expected and got under method",
"fullname": "test_when_we_omit_context_we_can_see_expected_and_got_under_method",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
} ],
"passed": 3,
"path": "res://tests/unit/test.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/test.test.gd",
"tags": [  ],
"test": ExtResource( 19 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 3
}, {
"context": "Given a Signal Watcher",
"methods": [ {
"assertions": [ {
"actual": "signal: multiple was emitted from [Node:7673] 2",
"context": "Then we can track how many times we emitted it",
"expected": "signal: multiple was emitted from [Node:7673] 2",
"success": true
} ],
"context": "When we watch and signal and emit it multiple times",
"fullname": "test_When_we_watch_a_signal_and_emit_it_multiple_times",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Signal: example was not emitted from [Node:7673]",
"context": "Then it does not capture the non-emitted signal",
"expected": "Signal: example was not emitted from [Node:7673]",
"success": true
} ],
"context": "When we watch and do not emit a signal",
"fullname": "test_When_we_watch_and_do_not_emit_a_signal",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Signal: example was emitted from [Node:7673] with arguments: [1, 20, 5]",
"context": "Then it captures any arguments that where passed when the signal was emitted",
"expected": "Signal: example was emitted from [Node:7673] with arguments: [1, 20, 5]",
"success": true
} ],
"context": "When we watch a signal from an object with no bound variables",
"fullname": "test_When_we_watch_a_signal_from_an_object_with_no_bound_variables",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "signal: example was emitted from [Node:7673]",
"context": "Then it captures the emitted signal",
"expected": "signal: example was emitted from [Node:7673]",
"success": true
} ],
"context": "When we watch and emit a signal",
"fullname": "test_When_we_watch_and_emit_a_signal",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 4,
"path": "res://tests/unit/watcher.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/watcher.test.gd",
"tags": [  ],
"test": ExtResource( 17 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 4
}, {
"context": "Given a Yield",
"methods": [ {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then we set var a to true",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then we set var b to true",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we yield in start twice",
"fullname": "test_When_we_yield_in_start",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then we set var c to true",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then we set var d to true",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we yield in pre thrice",
"fullname": "test_When_we_yield_in_pre",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "[100, Null, Null, Null, Null, Null] is builtin: Array",
"context": "Then we get an array",
"expected": "[100, Null, Null, Null, Null, Null] is builtin: Array",
"success": true
}, {
"actual": "|int| 6 is equal to |int| 6",
"context": "Of size 6",
"expected": "|int| 6 is equal to |int| 6",
"success": true
}, {
"actual": "|int| 100 is equal to |int| 100",
"context": "Where element 0 is 100",
"expected": "|int| 100 is equal to |int| 100",
"success": true
} ],
"context": "When yield(self.yield_value()) returns",
"fullname": "test_When_we_yield_we_get_the_return_value",
"passed": 3,
"success": true,
"time": 0.0,
"total": 3
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then yielder is unpaused",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "The timeout signal of the yielder is connected",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we call until_timeout (with 1.0)",
"fullname": "test_When_we_call_until_timeout",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then the yielder is unpaused",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then the timeout signal of the yielder is connected",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then our signal is connected to the yielder",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we call until signal",
"fullname": "test_When_we_call_until_signal",
"passed": 3,
"success": true,
"time": 0.0,
"total": 3
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then yielder is not active",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When asserting against a test",
"fullname": "test_Yielder_is_not_active_when_asserting",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then we set var e to true",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then we set var f to true",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we yield twice in execute",
"fullname": "test_When_we_yield_in_execute",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then the timeout signal is disconnected",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then the signal-signal is disconnected",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When it is finished",
"fullname": "test_When_yielder_is_finished_signals_are_disconnected",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then the yielder is paused",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When a signal being yielded on is emitted",
"fullname": "test_When_a_signal_being_yielded_on_is_emitted_the_yielder_is_stopped",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then the yielder is paused",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "The timeout signal of the yielder is not connected",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When the yielder times out on until_timeout(0.1)",
"fullname": "test_When_the_yielder_times_out",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then the yielder is paused",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then the timeout signal of the yielder is disconnected",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then our signal to the yielder is disconnected",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When the yielder heres our signal",
"fullname": "test_When_the_yielder_hears_our_signal",
"passed": 3,
"success": true,
"time": 0.0,
"total": 3
} ],
"passed": 11,
"path": "res://tests/unit/yield.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/yield.test.gd",
"tags": [  ],
"test": ExtResource( 18 ),
"yield_time": 1.9
},
"success": true,
"time_taken": 0.0,
"total": 11
}, {
"context": "Given a Boolean Assertion",
"methods": [ {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then it passes",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When calling asserts.is_true(true)",
"fullname": "test_when_calling_asserts_is_true",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| False == false",
"context": "Then it passes",
"expected": "|bool| False == false",
"success": true
} ],
"context": "When calling asserts.is_false(false)",
"fullname": "test_when_calling_asserts_is_false",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| True != false",
"context": "",
"expected": "|bool| True == false",
"success": false
} ],
"context": " intentional failure",
"fullname": "test_intentional_failure",
"passed": 0,
"success": false,
"time": 0.0,
"total": 1
} ],
"passed": 2,
"path": "res://tests/integration/boolean.test.gd",
"source": {
"containers": [ "res://tests/integration", "res://tests" ],
"method": "",
"path": "res://tests/integration/boolean.test.gd",
"tags": [  ],
"test": ExtResource( 20 ),
"yield_time": 0.0
},
"success": false,
"time_taken": 0.0,
"total": 3
}, {
"context": "Default Args",
"methods": [ {
"assertions": [ {
"actual": "|bool| True == true",
"context": "If this method can be reached then we have doubled a script with default argument(s) properly!",
"expected": "|bool| True == true",
"success": true
} ],
"context": " default arguments of interpolate property",
"fullname": "test_default_arguments_of_interpolate_property",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 1,
"path": "res://tests/integration/default_args.test.gd",
"source": {
"containers": [ "res://tests/integration", "res://tests" ],
"method": "",
"path": "res://tests/integration/default_args.test.gd",
"tags": [  ],
"test": ExtResource( 10 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 1
}, {
"context": "Given is_on_floor",
"methods": [ {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then it can be stubbed",
"expected": "|bool| True == true",
"success": true
} ],
"context": "From a user-defined script",
"fullname": "test_stubbing_is_on_floor_method_from_user_defined_class",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then it can be stubbed",
"expected": "|bool| True == true",
"success": true
} ],
"context": "From a child node of a scene without scripts",
"fullname": "test_stubbing_is_on_floor_as_child_node_with_no_script",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then it can be stubbed",
"expected": "|bool| True == true",
"success": true
} ],
"context": "From a built-in KinematicBody2D2",
"fullname": "test_stubbing_is_on_floor_method_from_builtin_class2",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 3,
"path": "res://tests/integration/on_floor.test.gd",
"source": {
"containers": [ "res://tests/integration", "res://tests" ],
"method": "",
"path": "res://tests/integration/on_floor.test.gd",
"tags": [  ],
"test": ExtResource( 5 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 3
}, {
"context": "Given a Scene Director",
"methods": [ {
"assertions": [ {
"actual": "|NodePath| A is equal to |NodePath| A",
"context": "We have the correct NodePath Set",
"expected": "|NodePath| A is equal to |NodePath| A",
"success": true
} ],
"context": "When we add it to the tree it runs",
"fullname": "test_When_we_add_it_to_the_tree_it_runs",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 9999 is equal to |int| 9999",
"context": "Then we get the stubbed return value",
"expected": "|int| 9999 is equal to |int| 9999",
"success": true
} ],
"context": "When we call a method from the root node that we stubbed",
"fullname": "test_When_we_call_a_method_from_the_root_node_that_we_stubbed",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 999 is equal to |int| 999",
"context": "Then we get the stubbed return value",
"expected": "|int| 999 is equal to |int| 999",
"success": true
} ],
"context": "When we call a method from a child node that we stubbed",
"fullname": "test_When_we_call_a_method_from_a_child_node_that_we_stubbed",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 99 is equal to |int| 99",
"context": "Then we get the stubbed return value",
"expected": "|int| 99 is equal to |int| 99",
"success": true
} ],
"context": "When we call a method from a grandchild node that we stubbed",
"fullname": "test_When_we_call_a_method_from_a_grandchild_node_that_we_stubbed",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|Dictionary| {.:[Reference:7939], A:[Reference:7940], A/B:[Reference:7942], C:[Reference:7941], C/D:[Reference:7943]} is not equal to |Dictionary| {.:[Reference:7953], A:[Reference:7954], A/B:[Reference:7956], C:[Reference:7955], C/D:[Reference:7957]}",
"context": "Then they do not share resources",
"expected": "|Dictionary| {.:[Reference:7939], A:[Reference:7940], A/B:[Reference:7942], C:[Reference:7941], C/D:[Reference:7943]} != |Dictionary| {.:[Reference:7953], A:[Reference:7954], A/B:[Reference:7956], C:[Reference:7955], C/D:[Reference:7957]}",
"success": true
} ],
"context": "When we create two of it for the same scene",
"fullname": "test_When_we_create_two_of_it_for_the_same_scene",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 5,
"path": "res://tests/integration/scene_director.test.gd",
"source": {
"containers": [ "res://tests/integration", "res://tests" ],
"method": "",
"path": "res://tests/integration/scene_director.test.gd",
"tags": [  ],
"test": ExtResource( 4 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 5
}, {
"context": "Given a Script Director",
"methods": [ {
"assertions": [ {
"actual": "|Dictionary| {_enter_tree:{arguments:, default_arguments:}, _exit_tree:{arguments:, default_arguments:}, _get:{arguments:a, default_arguments:a}, _get_configuration_warning:{arguments:, default_arguments:}, _get_editor_description:{arguments:, default_arguments:}, _get_import_path:{arguments:, default_arguments:}, _get_property_list:{arguments:, default_arguments:}, _init:{arguments:, default_arguments:}, _input:{arguments:a, default_arguments:a}, _notification:{arguments:a, default_arguments:a}, _physics_process:{arguments:a, default_arguments:a}, _process:{arguments:a, default_arguments:a}, _ready:{arguments:, default_arguments:}, _set:{arguments:a, b, default_arguments:a, b}, _set_editor_description:{arguments:a, default_arguments:a}, _set_import_path:{arguments:a, default_arguments:a}, _to_string:{arguments:, default_arguments:}, _unhandled_input:{arguments:a, default_arguments:a}, _unhandled_key_input:{arguments:a, default_arguments:a}, add:{arguments:a, b, default_arguments:a, b}, add_child:{arguments:a, b, default_arguments:a, b = False}, add_child_below_node:{arguments:a, b, c, default_arguments:a, b, c = False}, add_to_group:{arguments:a, b, default_arguments:a, b = False}, add_user_signal:{arguments:a, b, default_arguments:a, b = []}, call:{arguments:a, default_arguments:a}, call_deferred:{arguments:a, default_arguments:a}, callv:{arguments:a, b, default_arguments:a, b}, can_process:{arguments:, default_arguments:}, can_translate_messages:{arguments:, default_arguments:}, connect:{arguments:a, b, c, d, e, default_arguments:a, b, c, d = [], e = 0}, disconnect:{arguments:a, b, c, default_arguments:a, b, c}, divide:{arguments:a, b, default_arguments:a, b}, duplicate:{arguments:a, default_arguments:a = 15}, emit_signal:{arguments:a, default_arguments:a}, find_node:{arguments:a, b, c, default_arguments:a, b = True, c = True}, find_parent:{arguments:a, default_arguments:a}, free:{arguments:, default_arguments:}, get:{arguments:a, default_arguments:a}, get_child:{arguments:a, default_arguments:a}, get_child_count:{arguments:, default_arguments:}, get_children:{arguments:, default_arguments:}, get_class:{arguments:, default_arguments:}, get_custom_multiplayer:{arguments:, default_arguments:}, get_filename:{arguments:, default_arguments:}, get_groups:{arguments:, default_arguments:}, get_incoming_connections:{arguments:, default_arguments:}, get_index:{arguments:, default_arguments:}, get_indexed:{arguments:a, default_arguments:a}, get_instance_id:{arguments:, default_arguments:}, get_meta:{arguments:a, default_arguments:a}, get_meta_list:{arguments:, default_arguments:}, get_method_list:{arguments:, default_arguments:}, get_multiplayer:{arguments:, default_arguments:}, get_name:{arguments:, default_arguments:}, get_network_master:{arguments:, default_arguments:}, get_node:{arguments:a, default_arguments:a}, get_node_and_resource:{arguments:a, default_arguments:a}, get_node_or_null:{arguments:a, default_arguments:a}, get_owner:{arguments:, default_arguments:}, get_parent:{arguments:, default_arguments:}, get_path:{arguments:, default_arguments:}, get_path_to:{arguments:a, default_arguments:a}, get_pause_mode:{arguments:, default_arguments:}, get_physics_process_delta_time:{arguments:, default_arguments:}, get_position_in_parent:{arguments:, default_arguments:}, get_process_delta_time:{arguments:, default_arguments:}, get_process_priority:{arguments:, default_arguments:}, get_property_list:{arguments:, default_arguments:}, get_scene_instance_load_placeholder:{arguments:, default_arguments:}, get_script:{arguments:, default_arguments:}, get_signal_connection_list:{arguments:a, default_arguments:a}, get_signal_list:{arguments:, default_arguments:}, get_tree:{arguments:, default_arguments:}, get_viewport:{arguments:, default_arguments:}, has_meta:{arguments:a, default_arguments:a}, has_method:{arguments:a, default_arguments:a}, has_node:{arguments:a, default_arguments:a}, has_node_and_resource:{arguments:a, default_arguments:a}, has_signal:{arguments:a, default_arguments:a}, has_user_signal:{arguments:a, default_arguments:a}, is_a_parent_of:{arguments:a, default_arguments:a}, is_blocking_signals:{arguments:, default_arguments:}, is_class:{arguments:a, default_arguments:a}, is_connected:{arguments:a, b, c, default_arguments:a, b, c}, is_displayed_folded:{arguments:, default_arguments:}, is_greater_than:{arguments:a, default_arguments:a}, is_in_group:{arguments:a, default_arguments:a}, is_inside_tree:{arguments:, default_arguments:}, is_network_master:{arguments:, default_arguments:}, is_physics_processing:{arguments:, default_arguments:}, is_physics_processing_internal:{arguments:, default_arguments:}, is_processing:{arguments:, default_arguments:}, is_processing_input:{arguments:, default_arguments:}, is_processing_internal:{arguments:, default_arguments:}, is_processing_unhandled_input:{arguments:, default_arguments:}, is_processing_unhandled_key_input:{arguments:, default_arguments:}, is_queued_for_deletion:{arguments:, default_arguments:}, math_fight:{arguments:, default_arguments:}, move_child:{arguments:a, b, default_arguments:a, b}, multiply:{arguments:a, b, default_arguments:a, b}, notification:{arguments:a, b, default_arguments:a, b = False}, pi:{arguments:, default_arguments:}, print_stray_nodes:{arguments:, default_arguments:}, print_tree:{arguments:, default_arguments:}, print_tree_pretty:{arguments:, default_arguments:}, propagate_call:{arguments:a, b, c, default_arguments:a, b = [], c = False}, propagate_notification:{arguments:a, default_arguments:a}, property_list_changed_notify:{arguments:, default_arguments:}, queue_free:{arguments:, default_arguments:}, raise:{arguments:, default_arguments:}, remove_and_skip:{arguments:, default_arguments:}, remove_child:{arguments:a, default_arguments:a}, remove_from_group:{arguments:a, default_arguments:a}, remove_meta:{arguments:a, default_arguments:a}, replace_by:{arguments:a, b, default_arguments:a, b = False}, request_ready:{arguments:, default_arguments:}, rpc:{arguments:a, default_arguments:a}, rpc_config:{arguments:a, b, default_arguments:a, b}, rpc_id:{arguments:a, b, default_arguments:a, b}, rpc_unreliable:{arguments:a, default_arguments:a}, rpc_unreliable_id:{arguments:a, b, default_arguments:a, b}, rset:{arguments:a, b, default_arguments:a, b}, rset_config:{arguments:a, b, default_arguments:a, b}, rset_id:{arguments:a, b, c, default_arguments:a, b, c}, rset_unreliable:{arguments:a, b, default_arguments:a, b}, rset_unreliable_id:{arguments:a, b, c, default_arguments:a, b, c}, set:{arguments:a, b, default_arguments:a, b}, set_block_signals:{arguments:a, default_arguments:a}, set_custom_multiplayer:{arguments:a, default_arguments:a}, set_deferred:{arguments:a, b, default_arguments:a, b}, set_display_folded:{arguments:a, default_arguments:a}, set_filename:{arguments:a, default_arguments:a}, set_indexed:{arguments:a, b, default_arguments:a, b}, set_message_translation:{arguments:a, default_arguments:a}, set_meta:{arguments:a, b, default_arguments:a, b}, set_name:{arguments:a, default_arguments:a}, set_network_master:{arguments:a, b, default_arguments:a, b = True}, set_owner:{arguments:a, default_arguments:a}, set_pause_mode:{arguments:a, default_arguments:a}, set_physics_process:{arguments:a, default_arguments:a}, set_physics_process_internal:{arguments:a, default_arguments:a}, set_process:{arguments:a, default_arguments:a}, set_process_input:{arguments:a, default_arguments:a}, set_process_internal:{arguments:a, default_arguments:a}, set_process_priority:{arguments:a, default_arguments:a}, set_process_unhandled_input:{arguments:a, default_arguments:a}, set_process_unhandled_key_input:{arguments:a, default_arguments:a}, set_scene_instance_load_placeholder:{arguments:a, default_arguments:a}, set_script:{arguments:a, default_arguments:a}, subtract:{arguments:a, b, default_arguments:a, b}, sum:{arguments:a, default_arguments:a}, to_string:{arguments:, default_arguments:}, tr:{arguments:a, default_arguments:a}, update_configuration_warning:{arguments:, default_arguments:}} is not equal to |Dictionary| {_enter_tree:{arguments:, default_arguments:}, _exit_tree:{arguments:, default_arguments:}, _get:{arguments:a, default_arguments:a}, _get_configuration_warning:{arguments:, default_arguments:}, _get_editor_description:{arguments:, default_arguments:}, _get_import_path:{arguments:, default_arguments:}, _get_property_list:{arguments:, default_arguments:}, _init:{arguments:, default_arguments:}, _input:{arguments:a, default_arguments:a}, _notification:{arguments:a, default_arguments:a}, _physics_process:{arguments:a, default_arguments:a}, _process:{arguments:a, default_arguments:a}, _ready:{arguments:, default_arguments:}, _set:{arguments:a, b, default_arguments:a, b}, _set_editor_description:{arguments:a, default_arguments:a}, _set_import_path:{arguments:a, default_arguments:a}, _to_string:{arguments:, default_arguments:}, _unhandled_input:{arguments:a, default_arguments:a}, _unhandled_key_input:{arguments:a, default_arguments:a}, add:{arguments:a, b, default_arguments:a, b}, add_child:{arguments:a, b, default_arguments:a, b = False}, add_child_below_node:{arguments:a, b, c, default_arguments:a, b, c = False}, add_to_group:{arguments:a, b, default_arguments:a, b = False}, add_user_signal:{arguments:a, b, default_arguments:a, b = []}, call:{arguments:a, default_arguments:a}, call_deferred:{arguments:a, default_arguments:a}, callv:{arguments:a, b, default_arguments:a, b}, can_process:{arguments:, default_arguments:}, can_translate_messages:{arguments:, default_arguments:}, connect:{arguments:a, b, c, d, e, default_arguments:a, b, c, d = [], e = 0}, disconnect:{arguments:a, b, c, default_arguments:a, b, c}, divide:{arguments:a, b, default_arguments:a, b}, duplicate:{arguments:a, default_arguments:a = 15}, emit_signal:{arguments:a, default_arguments:a}, find_node:{arguments:a, b, c, default_arguments:a, b = True, c = True}, find_parent:{arguments:a, default_arguments:a}, free:{arguments:, default_arguments:}, get:{arguments:a, default_arguments:a}, get_child:{arguments:a, default_arguments:a}, get_child_count:{arguments:, default_arguments:}, get_children:{arguments:, default_arguments:}, get_class:{arguments:, default_arguments:}, get_custom_multiplayer:{arguments:, default_arguments:}, get_filename:{arguments:, default_arguments:}, get_groups:{arguments:, default_arguments:}, get_incoming_connections:{arguments:, default_arguments:}, get_index:{arguments:, default_arguments:}, get_indexed:{arguments:a, default_arguments:a}, get_instance_id:{arguments:, default_arguments:}, get_meta:{arguments:a, default_arguments:a}, get_meta_list:{arguments:, default_arguments:}, get_method_list:{arguments:, default_arguments:}, get_multiplayer:{arguments:, default_arguments:}, get_name:{arguments:, default_arguments:}, get_network_master:{arguments:, default_arguments:}, get_node:{arguments:a, default_arguments:a}, get_node_and_resource:{arguments:a, default_arguments:a}, get_node_or_null:{arguments:a, default_arguments:a}, get_owner:{arguments:, default_arguments:}, get_parent:{arguments:, default_arguments:}, get_path:{arguments:, default_arguments:}, get_path_to:{arguments:a, default_arguments:a}, get_pause_mode:{arguments:, default_arguments:}, get_physics_process_delta_time:{arguments:, default_arguments:}, get_position_in_parent:{arguments:, default_arguments:}, get_process_delta_time:{arguments:, default_arguments:}, get_process_priority:{arguments:, default_arguments:}, get_property_list:{arguments:, default_arguments:}, get_scene_instance_load_placeholder:{arguments:, default_arguments:}, get_script:{arguments:, default_arguments:}, get_signal_connection_list:{arguments:a, default_arguments:a}, get_signal_list:{arguments:, default_arguments:}, get_tree:{arguments:, default_arguments:}, get_viewport:{arguments:, default_arguments:}, has_meta:{arguments:a, default_arguments:a}, has_method:{arguments:a, default_arguments:a}, has_node:{arguments:a, default_arguments:a}, has_node_and_resource:{arguments:a, default_arguments:a}, has_signal:{arguments:a, default_arguments:a}, has_user_signal:{arguments:a, default_arguments:a}, is_a_parent_of:{arguments:a, default_arguments:a}, is_blocking_signals:{arguments:, default_arguments:}, is_class:{arguments:a, default_arguments:a}, is_connected:{arguments:a, b, c, default_arguments:a, b, c}, is_displayed_folded:{arguments:, default_arguments:}, is_greater_than:{arguments:a, default_arguments:a}, is_in_group:{arguments:a, default_arguments:a}, is_inside_tree:{arguments:, default_arguments:}, is_network_master:{arguments:, default_arguments:}, is_physics_processing:{arguments:, default_arguments:}, is_physics_processing_internal:{arguments:, default_arguments:}, is_processing:{arguments:, default_arguments:}, is_processing_input:{arguments:, default_arguments:}, is_processing_internal:{arguments:, default_arguments:}, is_processing_unhandled_input:{arguments:, default_arguments:}, is_processing_unhandled_key_input:{arguments:, default_arguments:}, is_queued_for_deletion:{arguments:, default_arguments:}, math_fight:{arguments:, default_arguments:}, move_child:{arguments:a, b, default_arguments:a, b}, multiply:{arguments:a, b, default_arguments:a, b}, notification:{arguments:a, b, default_arguments:a, b = False}, pi:{arguments:, default_arguments:}, print_stray_nodes:{arguments:, default_arguments:}, print_tree:{arguments:, default_arguments:}, print_tree_pretty:{arguments:, default_arguments:}, propagate_call:{arguments:a, b, c, default_arguments:a, b = [], c = False}, propagate_notification:{arguments:a, default_arguments:a}, property_list_changed_notify:{arguments:, default_arguments:}, queue_free:{arguments:, default_arguments:}, raise:{arguments:, default_arguments:}, remove_and_skip:{arguments:, default_arguments:}, remove_child:{arguments:a, default_arguments:a}, remove_from_group:{arguments:a, default_arguments:a}, remove_meta:{arguments:a, default_arguments:a}, replace_by:{arguments:a, b, default_arguments:a, b = False}, request_ready:{arguments:, default_arguments:}, rpc:{arguments:a, default_arguments:a}, rpc_config:{arguments:a, b, default_arguments:a, b}, rpc_id:{arguments:a, b, default_arguments:a, b}, rpc_unreliable:{arguments:a, default_arguments:a}, rpc_unreliable_id:{arguments:a, b, default_arguments:a, b}, rset:{arguments:a, b, default_arguments:a, b}, rset_config:{arguments:a, b, default_arguments:a, b}, rset_id:{arguments:a, b, c, default_arguments:a, b, c}, rset_unreliable:{arguments:a, b, default_arguments:a, b}, rset_unreliable_id:{arguments:a, b, c, default_arguments:a, b, c}, set:{arguments:a, b, default_arguments:a, b}, set_block_signals:{arguments:a, default_arguments:a}, set_custom_multiplayer:{arguments:a, default_arguments:a}, set_deferred:{arguments:a, b, default_arguments:a, b}, set_display_folded:{arguments:a, default_arguments:a}, set_filename:{arguments:a, default_arguments:a}, set_indexed:{arguments:a, b, default_arguments:a, b}, set_message_translation:{arguments:a, default_arguments:a}, set_meta:{arguments:a, b, default_arguments:a, b}, set_name:{arguments:a, default_arguments:a}, set_network_master:{arguments:a, b, default_arguments:a, b = True}, set_owner:{arguments:a, default_arguments:a}, set_pause_mode:{arguments:a, default_arguments:a}, set_physics_process:{arguments:a, default_arguments:a}, set_physics_process_internal:{arguments:a, default_arguments:a}, set_process:{arguments:a, default_arguments:a}, set_process_input:{arguments:a, default_arguments:a}, set_process_internal:{arguments:a, default_arguments:a}, set_process_priority:{arguments:a, default_arguments:a}, set_process_unhandled_input:{arguments:a, default_arguments:a}, set_process_unhandled_key_input:{arguments:a, default_arguments:a}, set_scene_instance_load_placeholder:{arguments:a, default_arguments:a}, set_script:{arguments:a, default_arguments:a}, subtract:{arguments:a, b, default_arguments:a, b}, sum:{arguments:a, default_arguments:a}, to_string:{arguments:, default_arguments:}, tr:{arguments:a, default_arguments:a}, update_configuration_warning:{arguments:, default_arguments:}}",
"context": "Then they do not share resources",
"expected": "|Dictionary| {_enter_tree:{arguments:, default_arguments:}, _exit_tree:{arguments:, default_arguments:}, _get:{arguments:a, default_arguments:a}, _get_configuration_warning:{arguments:, default_arguments:}, _get_editor_description:{arguments:, default_arguments:}, _get_import_path:{arguments:, default_arguments:}, _get_property_list:{arguments:, default_arguments:}, _init:{arguments:, default_arguments:}, _input:{arguments:a, default_arguments:a}, _notification:{arguments:a, default_arguments:a}, _physics_process:{arguments:a, default_arguments:a}, _process:{arguments:a, default_arguments:a}, _ready:{arguments:, default_arguments:}, _set:{arguments:a, b, default_arguments:a, b}, _set_editor_description:{arguments:a, default_arguments:a}, _set_import_path:{arguments:a, default_arguments:a}, _to_string:{arguments:, default_arguments:}, _unhandled_input:{arguments:a, default_arguments:a}, _unhandled_key_input:{arguments:a, default_arguments:a}, add:{arguments:a, b, default_arguments:a, b}, add_child:{arguments:a, b, default_arguments:a, b = False}, add_child_below_node:{arguments:a, b, c, default_arguments:a, b, c = False}, add_to_group:{arguments:a, b, default_arguments:a, b = False}, add_user_signal:{arguments:a, b, default_arguments:a, b = []}, call:{arguments:a, default_arguments:a}, call_deferred:{arguments:a, default_arguments:a}, callv:{arguments:a, b, default_arguments:a, b}, can_process:{arguments:, default_arguments:}, can_translate_messages:{arguments:, default_arguments:}, connect:{arguments:a, b, c, d, e, default_arguments:a, b, c, d = [], e = 0}, disconnect:{arguments:a, b, c, default_arguments:a, b, c}, divide:{arguments:a, b, default_arguments:a, b}, duplicate:{arguments:a, default_arguments:a = 15}, emit_signal:{arguments:a, default_arguments:a}, find_node:{arguments:a, b, c, default_arguments:a, b = True, c = True}, find_parent:{arguments:a, default_arguments:a}, free:{arguments:, default_arguments:}, get:{arguments:a, default_arguments:a}, get_child:{arguments:a, default_arguments:a}, get_child_count:{arguments:, default_arguments:}, get_children:{arguments:, default_arguments:}, get_class:{arguments:, default_arguments:}, get_custom_multiplayer:{arguments:, default_arguments:}, get_filename:{arguments:, default_arguments:}, get_groups:{arguments:, default_arguments:}, get_incoming_connections:{arguments:, default_arguments:}, get_index:{arguments:, default_arguments:}, get_indexed:{arguments:a, default_arguments:a}, get_instance_id:{arguments:, default_arguments:}, get_meta:{arguments:a, default_arguments:a}, get_meta_list:{arguments:, default_arguments:}, get_method_list:{arguments:, default_arguments:}, get_multiplayer:{arguments:, default_arguments:}, get_name:{arguments:, default_arguments:}, get_network_master:{arguments:, default_arguments:}, get_node:{arguments:a, default_arguments:a}, get_node_and_resource:{arguments:a, default_arguments:a}, get_node_or_null:{arguments:a, default_arguments:a}, get_owner:{arguments:, default_arguments:}, get_parent:{arguments:, default_arguments:}, get_path:{arguments:, default_arguments:}, get_path_to:{arguments:a, default_arguments:a}, get_pause_mode:{arguments:, default_arguments:}, get_physics_process_delta_time:{arguments:, default_arguments:}, get_position_in_parent:{arguments:, default_arguments:}, get_process_delta_time:{arguments:, default_arguments:}, get_process_priority:{arguments:, default_arguments:}, get_property_list:{arguments:, default_arguments:}, get_scene_instance_load_placeholder:{arguments:, default_arguments:}, get_script:{arguments:, default_arguments:}, get_signal_connection_list:{arguments:a, default_arguments:a}, get_signal_list:{arguments:, default_arguments:}, get_tree:{arguments:, default_arguments:}, get_viewport:{arguments:, default_arguments:}, has_meta:{arguments:a, default_arguments:a}, has_method:{arguments:a, default_arguments:a}, has_node:{arguments:a, default_arguments:a}, has_node_and_resource:{arguments:a, default_arguments:a}, has_signal:{arguments:a, default_arguments:a}, has_user_signal:{arguments:a, default_arguments:a}, is_a_parent_of:{arguments:a, default_arguments:a}, is_blocking_signals:{arguments:, default_arguments:}, is_class:{arguments:a, default_arguments:a}, is_connected:{arguments:a, b, c, default_arguments:a, b, c}, is_displayed_folded:{arguments:, default_arguments:}, is_greater_than:{arguments:a, default_arguments:a}, is_in_group:{arguments:a, default_arguments:a}, is_inside_tree:{arguments:, default_arguments:}, is_network_master:{arguments:, default_arguments:}, is_physics_processing:{arguments:, default_arguments:}, is_physics_processing_internal:{arguments:, default_arguments:}, is_processing:{arguments:, default_arguments:}, is_processing_input:{arguments:, default_arguments:}, is_processing_internal:{arguments:, default_arguments:}, is_processing_unhandled_input:{arguments:, default_arguments:}, is_processing_unhandled_key_input:{arguments:, default_arguments:}, is_queued_for_deletion:{arguments:, default_arguments:}, math_fight:{arguments:, default_arguments:}, move_child:{arguments:a, b, default_arguments:a, b}, multiply:{arguments:a, b, default_arguments:a, b}, notification:{arguments:a, b, default_arguments:a, b = False}, pi:{arguments:, default_arguments:}, print_stray_nodes:{arguments:, default_arguments:}, print_tree:{arguments:, default_arguments:}, print_tree_pretty:{arguments:, default_arguments:}, propagate_call:{arguments:a, b, c, default_arguments:a, b = [], c = False}, propagate_notification:{arguments:a, default_arguments:a}, property_list_changed_notify:{arguments:, default_arguments:}, queue_free:{arguments:, default_arguments:}, raise:{arguments:, default_arguments:}, remove_and_skip:{arguments:, default_arguments:}, remove_child:{arguments:a, default_arguments:a}, remove_from_group:{arguments:a, default_arguments:a}, remove_meta:{arguments:a, default_arguments:a}, replace_by:{arguments:a, b, default_arguments:a, b = False}, request_ready:{arguments:, default_arguments:}, rpc:{arguments:a, default_arguments:a}, rpc_config:{arguments:a, b, default_arguments:a, b}, rpc_id:{arguments:a, b, default_arguments:a, b}, rpc_unreliable:{arguments:a, default_arguments:a}, rpc_unreliable_id:{arguments:a, b, default_arguments:a, b}, rset:{arguments:a, b, default_arguments:a, b}, rset_config:{arguments:a, b, default_arguments:a, b}, rset_id:{arguments:a, b, c, default_arguments:a, b, c}, rset_unreliable:{arguments:a, b, default_arguments:a, b}, rset_unreliable_id:{arguments:a, b, c, default_arguments:a, b, c}, set:{arguments:a, b, default_arguments:a, b}, set_block_signals:{arguments:a, default_arguments:a}, set_custom_multiplayer:{arguments:a, default_arguments:a}, set_deferred:{arguments:a, b, default_arguments:a, b}, set_display_folded:{arguments:a, default_arguments:a}, set_filename:{arguments:a, default_arguments:a}, set_indexed:{arguments:a, b, default_arguments:a, b}, set_message_translation:{arguments:a, default_arguments:a}, set_meta:{arguments:a, b, default_arguments:a, b}, set_name:{arguments:a, default_arguments:a}, set_network_master:{arguments:a, b, default_arguments:a, b = True}, set_owner:{arguments:a, default_arguments:a}, set_pause_mode:{arguments:a, default_arguments:a}, set_physics_process:{arguments:a, default_arguments:a}, set_physics_process_internal:{arguments:a, default_arguments:a}, set_process:{arguments:a, default_arguments:a}, set_process_input:{arguments:a, default_arguments:a}, set_process_internal:{arguments:a, default_arguments:a}, set_process_priority:{arguments:a, default_arguments:a}, set_process_unhandled_input:{arguments:a, default_arguments:a}, set_process_unhandled_key_input:{arguments:a, default_arguments:a}, set_scene_instance_load_placeholder:{arguments:a, default_arguments:a}, set_script:{arguments:a, default_arguments:a}, subtract:{arguments:a, b, default_arguments:a, b}, sum:{arguments:a, default_arguments:a}, to_string:{arguments:, default_arguments:}, tr:{arguments:a, default_arguments:a}, update_configuration_warning:{arguments:, default_arguments:}} != |Dictionary| {_enter_tree:{arguments:, default_arguments:}, _exit_tree:{arguments:, default_arguments:}, _get:{arguments:a, default_arguments:a}, _get_configuration_warning:{arguments:, default_arguments:}, _get_editor_description:{arguments:, default_arguments:}, _get_import_path:{arguments:, default_arguments:}, _get_property_list:{arguments:, default_arguments:}, _init:{arguments:, default_arguments:}, _input:{arguments:a, default_arguments:a}, _notification:{arguments:a, default_arguments:a}, _physics_process:{arguments:a, default_arguments:a}, _process:{arguments:a, default_arguments:a}, _ready:{arguments:, default_arguments:}, _set:{arguments:a, b, default_arguments:a, b}, _set_editor_description:{arguments:a, default_arguments:a}, _set_import_path:{arguments:a, default_arguments:a}, _to_string:{arguments:, default_arguments:}, _unhandled_input:{arguments:a, default_arguments:a}, _unhandled_key_input:{arguments:a, default_arguments:a}, add:{arguments:a, b, default_arguments:a, b}, add_child:{arguments:a, b, default_arguments:a, b = False}, add_child_below_node:{arguments:a, b, c, default_arguments:a, b, c = False}, add_to_group:{arguments:a, b, default_arguments:a, b = False}, add_user_signal:{arguments:a, b, default_arguments:a, b = []}, call:{arguments:a, default_arguments:a}, call_deferred:{arguments:a, default_arguments:a}, callv:{arguments:a, b, default_arguments:a, b}, can_process:{arguments:, default_arguments:}, can_translate_messages:{arguments:, default_arguments:}, connect:{arguments:a, b, c, d, e, default_arguments:a, b, c, d = [], e = 0}, disconnect:{arguments:a, b, c, default_arguments:a, b, c}, divide:{arguments:a, b, default_arguments:a, b}, duplicate:{arguments:a, default_arguments:a = 15}, emit_signal:{arguments:a, default_arguments:a}, find_node:{arguments:a, b, c, default_arguments:a, b = True, c = True}, find_parent:{arguments:a, default_arguments:a}, free:{arguments:, default_arguments:}, get:{arguments:a, default_arguments:a}, get_child:{arguments:a, default_arguments:a}, get_child_count:{arguments:, default_arguments:}, get_children:{arguments:, default_arguments:}, get_class:{arguments:, default_arguments:}, get_custom_multiplayer:{arguments:, default_arguments:}, get_filename:{arguments:, default_arguments:}, get_groups:{arguments:, default_arguments:}, get_incoming_connections:{arguments:, default_arguments:}, get_index:{arguments:, default_arguments:}, get_indexed:{arguments:a, default_arguments:a}, get_instance_id:{arguments:, default_arguments:}, get_meta:{arguments:a, default_arguments:a}, get_meta_list:{arguments:, default_arguments:}, get_method_list:{arguments:, default_arguments:}, get_multiplayer:{arguments:, default_arguments:}, get_name:{arguments:, default_arguments:}, get_network_master:{arguments:, default_arguments:}, get_node:{arguments:a, default_arguments:a}, get_node_and_resource:{arguments:a, default_arguments:a}, get_node_or_null:{arguments:a, default_arguments:a}, get_owner:{arguments:, default_arguments:}, get_parent:{arguments:, default_arguments:}, get_path:{arguments:, default_arguments:}, get_path_to:{arguments:a, default_arguments:a}, get_pause_mode:{arguments:, default_arguments:}, get_physics_process_delta_time:{arguments:, default_arguments:}, get_position_in_parent:{arguments:, default_arguments:}, get_process_delta_time:{arguments:, default_arguments:}, get_process_priority:{arguments:, default_arguments:}, get_property_list:{arguments:, default_arguments:}, get_scene_instance_load_placeholder:{arguments:, default_arguments:}, get_script:{arguments:, default_arguments:}, get_signal_connection_list:{arguments:a, default_arguments:a}, get_signal_list:{arguments:, default_arguments:}, get_tree:{arguments:, default_arguments:}, get_viewport:{arguments:, default_arguments:}, has_meta:{arguments:a, default_arguments:a}, has_method:{arguments:a, default_arguments:a}, has_node:{arguments:a, default_arguments:a}, has_node_and_resource:{arguments:a, default_arguments:a}, has_signal:{arguments:a, default_arguments:a}, has_user_signal:{arguments:a, default_arguments:a}, is_a_parent_of:{arguments:a, default_arguments:a}, is_blocking_signals:{arguments:, default_arguments:}, is_class:{arguments:a, default_arguments:a}, is_connected:{arguments:a, b, c, default_arguments:a, b, c}, is_displayed_folded:{arguments:, default_arguments:}, is_greater_than:{arguments:a, default_arguments:a}, is_in_group:{arguments:a, default_arguments:a}, is_inside_tree:{arguments:, default_arguments:}, is_network_master:{arguments:, default_arguments:}, is_physics_processing:{arguments:, default_arguments:}, is_physics_processing_internal:{arguments:, default_arguments:}, is_processing:{arguments:, default_arguments:}, is_processing_input:{arguments:, default_arguments:}, is_processing_internal:{arguments:, default_arguments:}, is_processing_unhandled_input:{arguments:, default_arguments:}, is_processing_unhandled_key_input:{arguments:, default_arguments:}, is_queued_for_deletion:{arguments:, default_arguments:}, math_fight:{arguments:, default_arguments:}, move_child:{arguments:a, b, default_arguments:a, b}, multiply:{arguments:a, b, default_arguments:a, b}, notification:{arguments:a, b, default_arguments:a, b = False}, pi:{arguments:, default_arguments:}, print_stray_nodes:{arguments:, default_arguments:}, print_tree:{arguments:, default_arguments:}, print_tree_pretty:{arguments:, default_arguments:}, propagate_call:{arguments:a, b, c, default_arguments:a, b = [], c = False}, propagate_notification:{arguments:a, default_arguments:a}, property_list_changed_notify:{arguments:, default_arguments:}, queue_free:{arguments:, default_arguments:}, raise:{arguments:, default_arguments:}, remove_and_skip:{arguments:, default_arguments:}, remove_child:{arguments:a, default_arguments:a}, remove_from_group:{arguments:a, default_arguments:a}, remove_meta:{arguments:a, default_arguments:a}, replace_by:{arguments:a, b, default_arguments:a, b = False}, request_ready:{arguments:, default_arguments:}, rpc:{arguments:a, default_arguments:a}, rpc_config:{arguments:a, b, default_arguments:a, b}, rpc_id:{arguments:a, b, default_arguments:a, b}, rpc_unreliable:{arguments:a, default_arguments:a}, rpc_unreliable_id:{arguments:a, b, default_arguments:a, b}, rset:{arguments:a, b, default_arguments:a, b}, rset_config:{arguments:a, b, default_arguments:a, b}, rset_id:{arguments:a, b, c, default_arguments:a, b, c}, rset_unreliable:{arguments:a, b, default_arguments:a, b}, rset_unreliable_id:{arguments:a, b, c, default_arguments:a, b, c}, set:{arguments:a, b, default_arguments:a, b}, set_block_signals:{arguments:a, default_arguments:a}, set_custom_multiplayer:{arguments:a, default_arguments:a}, set_deferred:{arguments:a, b, default_arguments:a, b}, set_display_folded:{arguments:a, default_arguments:a}, set_filename:{arguments:a, default_arguments:a}, set_indexed:{arguments:a, b, default_arguments:a, b}, set_message_translation:{arguments:a, default_arguments:a}, set_meta:{arguments:a, b, default_arguments:a, b}, set_name:{arguments:a, default_arguments:a}, set_network_master:{arguments:a, b, default_arguments:a, b = True}, set_owner:{arguments:a, default_arguments:a}, set_pause_mode:{arguments:a, default_arguments:a}, set_physics_process:{arguments:a, default_arguments:a}, set_physics_process_internal:{arguments:a, default_arguments:a}, set_process:{arguments:a, default_arguments:a}, set_process_input:{arguments:a, default_arguments:a}, set_process_internal:{arguments:a, default_arguments:a}, set_process_priority:{arguments:a, default_arguments:a}, set_process_unhandled_input:{arguments:a, default_arguments:a}, set_process_unhandled_key_input:{arguments:a, default_arguments:a}, set_scene_instance_load_placeholder:{arguments:a, default_arguments:a}, set_script:{arguments:a, default_arguments:a}, subtract:{arguments:a, b, default_arguments:a, b}, sum:{arguments:a, default_arguments:a}, to_string:{arguments:, default_arguments:}, tr:{arguments:a, default_arguments:a}, update_configuration_warning:{arguments:, default_arguments:}}",
"success": true
} ],
"context": "When we create two of it for the same script",
"fullname": "test_When_we_create_two_of_it_for_the_same_script",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|Object| [Node:7969] is equal to |Object| [Node:7969]",
"context": "Then we get the same double back",
"expected": "|Object| [Node:7969] is equal to |Object| [Node:7969]",
"success": true
} ],
"context": "When we call the double the second time",
"fullname": "test_When_we_call_double_a_second_time_on",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Reference:7976] is instance of class: [GDScript:1564]",
"context": "Then we get that inner class back",
"expected": "[Reference:7976] is instance of class: [GDScript:1564]",
"success": true
} ],
"context": "When we double an inner class",
"fullname": "test_When_we_double_an_inner_class",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 3,
"path": "res://tests/integration/script_director.test.gd",
"source": {
"containers": [ "res://tests/integration", "res://tests" ],
"method": "",
"path": "res://tests/integration/script_director.test.gd",
"tags": [  ],
"test": ExtResource( 13 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 3
}, {
"context": "Given a Test Double",
"methods": [ {
"assertions": [ {
"actual": "|String| Jackie is equal to |String| Jackie",
"context": "Then we can double the object successfully",
"expected": "|String| Jackie is equal to |String| Jackie",
"success": true
} ],
"context": "When we pass in dependecies on double",
"fullname": "test_When_we_pass_in_deps_on_double",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "(1, 1) is builtin: Vector2",
"context": "Then we can call methods on it",
"expected": "(1, 1) is builtin: Vector2",
"success": true
} ],
"context": "When we double an inner class",
"fullname": "test_When_we_double_an_inner_class",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "method: add was called with arguments: [10, 10]",
"context": "Then we can see that it was called with those arguments",
"expected": "method: add was called with arguments: [10, 10]",
"success": true
} ],
"context": "When we pass arguments to a method call that we are spying on",
"fullname": "test_When_we_pass_arguments_to_a_method_call_that_we_are_spying_on",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|float| 6.283185 is equal to |float| 6.283185",
"context": "Then we can call the static methods of that inner double",
"expected": "|float| 6.283185 is equal to |float| 6.283185",
"success": true
} ],
"context": "When we add an doubled inner class to it",
"fullname": "test_When_we_add_a_doubled_inner_class_to_it",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 9999 is equal to |int| 9999",
"context": "Then it returns the corresponding value when the partial pattern matches",
"expected": "|int| 9999 is equal to |int| 9999",
"success": true
} ],
"context": "When we call a method that was stubbed with a partial (ie using any()) argument pattern",
"fullname": "test_When_we_call_a_method_that_was_stubbed_with_a_partial_argument_pattern",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "add was called",
"context": "Then we can see that it was called at least once",
"expected": "add was called",
"success": true
} ],
"context": "When we call a method that we are spying on",
"fullname": "test_When_we_call_a_method_that_we_are_spying_on",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 4 is equal to |int| 4",
"context": "Then we get the correct result",
"expected": "|int| 4 is equal to |int| 4",
"success": true
} ],
"context": "When we call an add(x, y) method that we haven't directed",
"fullname": "test_When_we_call_an_add_method_that_we_have_not_directed",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|null| Null == null",
"context": "Then we get the stubbed value back",
"expected": "|null| Null == null",
"success": true
} ],
"context": "When we stub a method of a doubled inner class",
"fullname": "test_When_we_stub_a_method_of_a_double_inner_class",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 99 is equal to |int| 99",
"context": "Then it affects the state of the double",
"expected": "|int| 99 is equal to |int| 99",
"success": true
} ],
"context": "When we pass a funcref as a subcall",
"fullname": "test_When_we_pass_a_funcref_as_a_subcall",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|Array| [10, 5] is equal to |Array| [10, 5]",
"context": "Then it returns a value",
"expected": "|Array| [10, 5] is equal to |Array| [10, 5]",
"success": true
} ],
"context": "When we pass an Object with a call_func function",
"fullname": "test_When_we_pass_an_object_with_callfunc_method_as_a_subcall",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 9999 is equal to |int| 9999",
"context": "Then it returns the corresponding value when the pattern matches",
"expected": "|int| 9999 is equal to |int| 9999",
"success": true
} ],
"context": "When we call a method that was stubbed with an argument pattern that includes a non-primitive object",
"fullname": "test_When_we_call_a_method_that_was_stubbed_with_an_argument_pattern_that_includes_a_non_primitive_object",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|null| Null == null",
"context": "Then we get null",
"expected": "|null| Null == null",
"success": true
} ],
"context": "When we call a method that we have dummied",
"fullname": "test_When_we_call_a_method_that_we_have_dummied",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 99 is equal to |int| 99",
"context": "Then it returns a value",
"expected": "|int| 99 is equal to |int| 99",
"success": true
} ],
"context": "When we pass a funcref as a subcall that returns",
"fullname": "test_When_we_pass_a_funcref_as_a_subcall_that_returns_a_value",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then it returns true",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we call a method that we have stubbed to return true",
"fullname": "test_When_we_call_a_method_that_we_have_stubbed_to_return_true",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|Object| [Node:8079] is equal to |Object| [Node:8079]",
"context": "Then it returns that same node",
"expected": "|Object| [Node:8079] is equal to |Object| [Node:8079]",
"success": true
} ],
"context": "When we call a method that we have stubbed to return a node",
"fullname": "test_When_we_call_a_method_that_we_have_stubbed_to_return_a_node",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|String| Jackie is equal to |String| Jackie",
"context": "Then we can double the object successfully",
"expected": "|String| Jackie is equal to |String| Jackie",
"success": true
} ],
"context": "When we pass in dependecies on direct",
"fullname": "test_When_we_pass_in_deps_on_direct",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 100 is equal to |int| 100",
"context": "Then it returns the default stubbed value when the arguments don't match any pattern",
"expected": "|int| 100 is equal to |int| 100",
"success": true
}, {
"actual": "|int| 1000 is equal to |int| 1000",
"context": "Then it returns the the corresponding value to the pattern the arguments matched",
"expected": "|int| 1000 is equal to |int| 1000",
"success": true
} ],
"context": "When we call a method that was stubbed to return different values based on argument patterns",
"fullname": "test_When_we_call_a_method_that_was_stubbed_to_return_different_values_based_on_argument_patterns",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|bool| True is equal to |bool| True",
"context": "Then we can call it",
"expected": "|bool| True is equal to |bool| True",
"success": true
} ],
"context": "When we stubbed a keyworded method by passing in the correct keyword",
"fullname": "test_When_we_stubbed_a_keyword_method_by_passing_in_the_correct_keyword",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 4 is equal to |int| 4",
"context": "Then it calls its super implementation by default",
"expected": "|int| 4 is equal to |int| 4",
"success": true
}, {
"actual": "|int| 9999 is equal to |int| 9999",
"context": "Then it does not call its super implementation when arguments patterns match a different return value",
"expected": "|int| 9999 is equal to |int| 9999",
"success": true
} ],
"context": "When we call a method that we stubbed to call its super implementation by default",
"fullname": "test_When_we_call_a_method_that_we_stubbed_to_call_its_super_implementation_by_default",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
} ],
"passed": 19,
"path": "res://tests/integration/test_double.test.gd",
"source": {
"containers": [ "res://tests/integration", "res://tests" ],
"method": "",
"path": "res://tests/integration/test_double.test.gd",
"tags": [  ],
"test": ExtResource( 14 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 19
}, {
"context": "Given a Boolean Assertion",
"methods": [ {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then it passes",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When calling asserts.is_true(true)",
"fullname": "test_when_calling_asserts_is_true",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| False == false",
"context": "Then it passes",
"expected": "|bool| False == false",
"success": true
} ],
"context": "When calling asserts.is_false(false)",
"fullname": "test_when_calling_asserts_is_false",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| True != false",
"context": "",
"expected": "|bool| True == false",
"success": false
} ],
"context": " intentional failure",
"fullname": "test_intentional_failure",
"passed": 0,
"success": false,
"time": 0.0,
"total": 1
} ],
"passed": 2,
"path": "res://tests/unit/boolean.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/boolean.test.gd",
"tags": [  ],
"test": ExtResource( 11 ),
"yield_time": 0.0
},
"success": false,
"time_taken": 0.0,
"total": 3
}, {
"context": "Given an Equality Assertion",
"methods": [ {
"assertions": [ {
"actual": "|int| 2 is equal or greater |int| 1",
"context": "Then it passes",
"expected": "|int| 2 is equal or greater |int| 1",
"success": true
} ],
"context": "When calling asserts.is_equal_or_greater_than(2, 1)",
"fullname": "test_when_calling_is_equal_or_greater_than",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 2 is greater than |int| 1",
"context": "Then it passes",
"expected": "|int| 2 is greater than |int| 1",
"success": true
} ],
"context": "When calling asserts.is_greater_than(2, 1)",
"fullname": "test_when_calling_is_greater_than",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 1 is equal to |int| 1",
"context": "Then it passes",
"expected": "|int| 1 is equal to |int| 1",
"success": true
} ],
"context": "When calling asserts.is_equal(1, 1)",
"fullname": "test_when_calling_is_equal",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 1 is less than |int| 2",
"context": "Then it passes",
"expected": "|int| 1 is less than |int| 2",
"success": true
} ],
"context": "When calling asserts.is_less_than(2, 1)",
"fullname": "test_when_calling_is_less_than",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 1 is equal or greater |int| 1",
"context": "Then it passes",
"expected": "|int| 1 is equal or greater |int| 1",
"success": true
} ],
"context": "When calling asserts.is_equal_or_greater_than(1, 1)",
"fullname": "test_when_calling_is_equal_or_greater_than_with_equal_values",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 5 is not equal to |int| 6",
"context": "Then it passes",
"expected": "|int| 5 != |int| 6",
"success": true
} ],
"context": "When callign asserts.is_not_equal(5, 6)",
"fullname": "test_when_calling_is_not_equal",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 1 is equal or less than |int| 1",
"context": "Then it passes!",
"expected": "|int| 1 is equal or less than |int| 1",
"success": true
} ],
"context": "When calling asserts.is_equal_or_less_than(1, 1)",
"fullname": "test_when_calling_is_equal_or_less_than_with_equal_values",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 7,
"path": "res://tests/unit/equality.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/equality.test.gd",
"tags": [  ],
"test": ExtResource( 8 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 7
}, {
"context": "Given A File Assertion",
"methods": [ {
"assertions": [ {
"actual": "res://somefile.gd does not exist",
"context": "Then it passes",
"expected": "res://somefile.gd does not exist",
"success": true
} ],
"context": "When calling asserts.file_does_not_exist when there is no file",
"fullname": "test_when_calling_file_does_not_exist_when_there_is_no_file",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": " does not exist",
"context": "Then it passes",
"expected": " does not exist",
"success": true
} ],
"context": "When calling asserts file does not exist when path is empty",
"fullname": "test_when_calling_file_does_not_exist_when_path_is_empty",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "res://tests/unit/file.test.gd exists",
"context": "Then it passes",
"expected": "res://tests/unit/file.test.gd exists",
"success": true
} ],
"context": "When calling asserts.file_exists when the file is this suite",
"fullname": "test_when_calling_file_exists_when_file_is_self",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 3,
"path": "res://tests/unit/file.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/file.test.gd",
"tags": [  ],
"test": ExtResource( 3 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 3
}, {
"context": "Given an Is Instance of class/type Assertion",
"methods": [ {
"assertions": [ {
"actual": "|AABB| 0, 0, 0 - 0, 0, 0 != null",
"context": "AABB is not null",
"expected": "|AABB| 0, 0, 0 - 0, 0, 0 != null",
"success": true
}, {
"actual": "0, 0, 0 - 0, 0, 0 is builtin: AABB",
"context": "Then it passes",
"expected": "0, 0, 0 - 0, 0, 0 is builtin: AABB",
"success": true
} ],
"context": "When calling asserts.is_AABB(aabb: AABB)",
"fullname": "test_when_calling_is_AABB",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|Array| [] != null",
"context": "array is not null",
"expected": "|Array| [] != null",
"success": true
}, {
"actual": "[] is builtin: Array",
"context": "Then it passes",
"expected": "[] is builtin: Array",
"success": true
} ],
"context": "When calling asserts.is_Array(array: Array)",
"fullname": "test_when_calling_is_Array",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|Transform2D| ((1, 0), (0, 1), (0, 0)) != null",
"context": "transform2D is not null",
"expected": "|Transform2D| ((1, 0), (0, 1), (0, 0)) != null",
"success": true
}, {
"actual": "((1, 0), (0, 1), (0, 0)) is builtin: Transform2D",
"context": "Then it passes",
"expected": "((1, 0), (0, 1), (0, 0)) is builtin: Transform2D",
"success": true
} ],
"context": "When calling asserts.is_Transform(transform2D: Transform2D)",
"fullname": "test_when_calling_is_Transform2D",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|Rect2| (0, 0, 0, 0) != null",
"context": "rect2 is not null",
"expected": "|Rect2| (0, 0, 0, 0) != null",
"success": true
}, {
"actual": "(0, 0, 0, 0) is builtin: Rect2",
"context": "Then it passes",
"expected": "(0, 0, 0, 0) is builtin: Rect2",
"success": true
} ],
"context": "When calling asserts.is_Rect2(rect2: Rect2)",
"fullname": "test_when_calling_is_Rect2",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|Vector3| (0, 0, 0) != null",
"context": "vec3 is not null",
"expected": "|Vector3| (0, 0, 0) != null",
"success": true
}, {
"actual": "(0, 0, 0) is builtin: Vector3",
"context": "Then it passes",
"expected": "(0, 0, 0) is builtin: Vector3",
"success": true
} ],
"context": "When calling asserts.is_Vector3(vec3: Vector3",
"fullname": "test_when_calling_is_Vector3",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|Quat| (0, 0, 0, 1) != null",
"context": "quat is not null",
"expected": "|Quat| (0, 0, 0, 1) != null",
"success": true
}, {
"actual": "(0, 0, 0, 1) is builtin: Quat",
"context": "Then it passes",
"expected": "(0, 0, 0, 1) is builtin: Quat",
"success": true
} ],
"context": "When calling asserts.is_Quat(quat: Quat)",
"fullname": "test_when_calling_is_Quat",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "{} is builtin: Dictionary",
"context": "Then it passes",
"expected": "{} is builtin: Dictionary",
"success": true
} ],
"context": "When calling asserts.is_Dictionary({})",
"fullname": "test_when_calling_is_Dictionary",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|PoolIntArray| [] != null",
"context": "ints is not null",
"expected": "|PoolIntArray| [] != null",
"success": true
}, {
"actual": "[] is builtin: PoolIntArray",
"context": "Then it passes",
"expected": "[] is builtin: PoolIntArray",
"success": true
} ],
"context": "When calling asserts.is_PoolIntArray(ints: PoolIntArray)",
"fullname": "test_when_calling_is_PoolIntArray",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|PoolByteArray| [PoolByteArray] != null",
"context": "bytes is not null",
"expected": "|PoolByteArray| [PoolByteArray] != null",
"success": true
}, {
"actual": "[PoolByteArray] is builtin: PoolByteArray",
"context": "Then it passes",
"expected": "[PoolByteArray] is builtin: PoolByteArray",
"success": true
} ],
"context": "When calling asserts.is_PoolByteArray(bytes: PoolByteArray)",
"fullname": "test_when_calling_is_PoolByteArray",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|RID| [RID] != null",
"context": "rid is not null",
"expected": "|RID| [RID] != null",
"success": true
}, {
"actual": "[RID] is builtin: RID",
"context": "Then it passes",
"expected": "[RID] is builtin: RID",
"success": true
} ],
"context": "When calling asserts.is_RID(rid: RID)",
"fullname": "test_when_calling_is_RID",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|PoolStringArray| [] != null",
"context": "strs is not null",
"expected": "|PoolStringArray| [] != null",
"success": true
}, {
"actual": "[] is builtin: PoolStringArray",
"context": "Then it passes",
"expected": "[] is builtin: PoolStringArray",
"success": true
} ],
"context": "When calling is asserts.is_PoolStringArray(strs: PoolStringArray)",
"fullname": "test_when_calling_is_PoolStringArray",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "1 is builtin: float",
"context": "Then it passes",
"expected": "1 is builtin: float",
"success": true
} ],
"context": "When calling asserts.is_float(1.0)",
"fullname": "test_when_calling_is_float",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|PoolColorArray| [PoolColorArray] != null",
"context": "colors is not null",
"expected": "|PoolColorArray| [PoolColorArray] != null",
"success": true
}, {
"actual": "[PoolColorArray] is builtin: PoolColorArray",
"context": "Then it passes",
"expected": "[PoolColorArray] is builtin: PoolColorArray",
"success": true
} ],
"context": "When calling asserts.is_PoolColorArray(colors: PoolColorArray)",
"fullname": "test_when_calling_is_PoolColorArray",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|NodePath| . != null",
"context": "@'Parent/Child' is not null",
"expected": "|NodePath| . != null",
"success": true
}, {
"actual": ". is builtin: NodePath",
"context": "Then it passes",
"expected": ". is builtin: NodePath",
"success": true
} ],
"context": "When calling asserts.is_NodePath(@'Parent/Child')",
"fullname": "test_when_calling_is_NodePath",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|PoolVector2Array| [] != null",
"context": "vec2s is not null",
"expected": "|PoolVector2Array| [] != null",
"success": true
}, {
"actual": "[] is builtin: PoolVector2Array",
"context": "Then it passes",
"expected": "[] is builtin: PoolVector2Array",
"success": true
} ],
"context": "When calling is asserts.is_PoolVector2Array(vec2s: PoolVector2Array)",
"fullname": "test_when_calling_is_PoolVector2Array",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|PoolVector3Array| [] != null",
"context": "vec3s is not null",
"expected": "|PoolVector3Array| [] != null",
"success": true
}, {
"actual": "[] is builtin: PoolVector3Array",
"context": "Then it passes",
"expected": "[] is builtin: PoolVector3Array",
"success": true
} ],
"context": "When calling is asserts.is_PoolVector3Array(vec3s: PoolVector3Array)",
"fullname": "test_when_calling_is_PoolVector3Array",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|Transform| 1, 0, 0, 0, 1, 0, 0, 0, 1 - 0, 0, 0 != null",
"context": "transform is not null",
"expected": "|Transform| 1, 0, 0, 0, 1, 0, 0, 0, 1 - 0, 0, 0 != null",
"success": true
}, {
"actual": "1, 0, 0, 0, 1, 0, 0, 0, 1 - 0, 0, 0 is builtin: Transform",
"context": "Then it passes",
"expected": "1, 0, 0, 0, 1, 0, 0, 0, 1 - 0, 0, 0 is builtin: Transform",
"success": true
} ],
"context": "When calling asserts.is_Transform(transform: Transform)",
"fullname": "test_when_calling_is_Transform",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|String|  != null",
"context": "strs is not null",
"expected": "|String|  != null",
"success": true
}, {
"actual": " is builtin: String",
"context": "Then it passes",
"expected": " is builtin: String",
"success": true
} ],
"context": "When calling asserts.is_string(strs: String)",
"fullname": "test_when_calling_is_string",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|Basis| ((1, 0, 0), (0, 1, 0), (0, 0, 1)) != null",
"context": "basis is not null",
"expected": "|Basis| ((1, 0, 0), (0, 1, 0), (0, 0, 1)) != null",
"success": true
}, {
"actual": "((1, 0, 0), (0, 1, 0), (0, 0, 1)) is builtin: Basis",
"context": "Then it passes",
"expected": "((1, 0, 0), (0, 1, 0), (0, 0, 1)) is builtin: Basis",
"success": true
} ],
"context": "When calling asserts.is_basis(basis: Basis",
"fullname": "test_when_calling_is_Basis",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|Plane| 0, 0, 0, 0 != null",
"context": "plane is not null",
"expected": "|Plane| 0, 0, 0, 0 != null",
"success": true
}, {
"actual": "0, 0, 0, 0 is builtin: Plane",
"context": "then it passes",
"expected": "0, 0, 0, 0 is builtin: Plane",
"success": true
} ],
"context": "When calling asserts.is_Plane(plane: Plane())",
"fullname": "test_when_calling_is_Plane",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|Vector2| (0, 0) != null",
"context": "vec2 is not null",
"expected": "|Vector2| (0, 0) != null",
"success": true
}, {
"actual": "(0, 0) is builtin: Vector2",
"context": "Then it passes",
"expected": "(0, 0) is builtin: Vector2",
"success": true
} ],
"context": "When calling asserts.is_Vector2(vec2)",
"fullname": "test_when_calling_is_Vector2",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|Object| [Node:8179] != null",
"context": "node is not null",
"expected": "|Object| [Node:8179] != null",
"success": true
}, {
"actual": "[Node:8179] is builtin: Object",
"context": "An instance of node is an Object",
"expected": "[Node:8179] is builtin: Object",
"success": true
} ],
"context": "When calling is asserts.object(node: Node)",
"fullname": "test_when_calling_is_object",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|PoolRealArray| [] != null",
"context": "reals is not null",
"expected": "|PoolRealArray| [] != null",
"success": true
}, {
"actual": "[] is builtin: PoolRealArray",
"context": "Then it passes",
"expected": "[] is builtin: PoolRealArray",
"success": true
} ],
"context": "When calling is asserts.is_PoolRealArray(reals: PoolRealArray)",
"fullname": "test_when_calling_is_PoolRealArray",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "True is builtin: bool",
"context": "Then it passes",
"expected": "True is builtin: bool",
"success": true
} ],
"context": "When calling asserts.is_bool(true)",
"fullname": "test_when_calling_is_bool",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "1 is builtin: int",
"context": "Then it passes",
"expected": "1 is builtin: int",
"success": true
} ],
"context": "When callign asserts.is_int(1)",
"fullname": "test_when_calling_is_int",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|Color| 0,0,0,1 != null",
"context": "color is not null",
"expected": "|Color| 0,0,0,1 != null",
"success": true
}, {
"actual": "0,0,0,1 is builtin: Color",
"context": "Then it passes",
"expected": "0,0,0,1 is builtin: Color",
"success": true
} ],
"context": "When calling asserts.is_color(color: Color)",
"fullname": "test_when_calling_is_Color",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
} ],
"passed": 26,
"path": "res://tests/unit/is_instance.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/is_instance.test.gd",
"tags": [  ],
"test": ExtResource( 6 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 26
}, {
"context": "Given an Is Not Instance of class/type Assertion",
"methods": [ {
"assertions": [ {
"actual": "Null is not builtin: Array",
"context": "Then it passes",
"expected": "Null is not builtin: Array",
"success": true
} ],
"context": "when calling asserts.is_not_Array(null)",
"fullname": "test_when_calling_is_not_Array",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Color",
"context": "Then it passes",
"expected": "Null is not builtin: Color",
"success": true
} ],
"context": "when calling asserts.is_not_Color(null)",
"fullname": "test_when_calling_is_not_Color",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: float",
"context": "Then it passes",
"expected": "Null is not builtin: float",
"success": true
} ],
"context": "when calling asserts.is_not_float(null)",
"fullname": "test_when_calling_is_not_float",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: AABB",
"context": "Then it passes",
"expected": "Null is not builtin: AABB",
"success": true
} ],
"context": "when calling asserts.is_not_AABB(null)",
"fullname": "test_when_calling_is_not_AABB",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Basis",
"context": "Then it passes",
"expected": "Null is not builtin: Basis",
"success": true
} ],
"context": "when calling asserts.is_not_Basis(null)",
"fullname": "test_when_calling_is_not_Basis",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: int",
"context": "Then it passes",
"expected": "Null is not builtin: int",
"success": true
} ],
"context": "when calling asserts.is_not_int(null)",
"fullname": "test_when_calling_is_not_int",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: bool",
"context": "Then it passes",
"expected": "Null is not builtin: bool",
"success": true
} ],
"context": "when calling asserts.is_not_bool(null)",
"fullname": "test_when_calling_is_not_bool",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Dictionary",
"context": "Then it passes",
"expected": "Null is not builtin: Dictionary",
"success": true
} ],
"context": "when calling asserts.is_not_Dictionary(null)",
"fullname": "test_when_calling_is_not_Dictionary",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: NodePath",
"context": "Then it passes",
"expected": "Null is not builtin: NodePath",
"success": true
} ],
"context": "when calling asserts.is_not_NodePath(null)",
"fullname": "test_when_calling_is_not_NodePath",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Object",
"context": "Then it passes",
"expected": "Null is not builtin: Object",
"success": true
} ],
"context": "when calling asserts.is_not_Object(null)",
"fullname": "test_when_calling_is_not_Object",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: PoolStringArray",
"context": "Then it passes",
"expected": "Null is not builtin: PoolStringArray",
"success": true
} ],
"context": "when calling asserts.is_not_PoolStringArray(null)",
"fullname": "test_when_calling_is_not_PoolStringArray",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Quat",
"context": "Then it passes",
"expected": "Null is not builtin: Quat",
"success": true
} ],
"context": "when calling asserts.is_not_Quat(null)",
"fullname": "test_when_calling_is_not_Quat",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: PoolRealArray",
"context": "Then it passes",
"expected": "Null is not builtin: PoolRealArray",
"success": true
} ],
"context": "when calling asserts.is_not_PoolRealArray(null)",
"fullname": "test_when_calling_is_not_PoolRealArray",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: RID",
"context": "Then it passes",
"expected": "Null is not builtin: RID",
"success": true
} ],
"context": "when calling asserts.is_not_RID(null)",
"fullname": "test_when_calling_is_not_RID",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: PoolIntArray",
"context": "Then it passes",
"expected": "Null is not builtin: PoolIntArray",
"success": true
} ],
"context": "when calling asserts.is_not_PoolIntArray(null)",
"fullname": "test_when_calling_is_not_PoolIntArray",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Vector2",
"context": "Then it passes",
"expected": "Null is not builtin: Vector2",
"success": true
} ],
"context": "when calling asserts.is_not_Vector2(null)",
"fullname": "test_when_calling_is_not_Vector2",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Transform",
"context": "Then it passes",
"expected": "Null is not builtin: Transform",
"success": true
} ],
"context": "when calling asserts.is_not_Transform(null)",
"fullname": "test_when_calling_is_not_Transform",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: String",
"context": "Then it passes",
"expected": "Null is not builtin: String",
"success": true
} ],
"context": "when calling asserts.is_not_String(null)",
"fullname": "test_when_calling_is_not_String",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: PoolVector2Array",
"context": "Then it passes",
"expected": "Null is not builtin: PoolVector2Array",
"success": true
} ],
"context": "when calling asserts.is_not_PoolVector2Array(null)",
"fullname": "test_when_calling_is_not_PoolVector2Array",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: PoolVector3Array",
"context": "Then it passes",
"expected": "Null is not builtin: PoolVector3Array",
"success": true
} ],
"context": "when calling asserts.is_not_PoolVector3Array(null)",
"fullname": "test_when_calling_is_not_PoolVector3Array",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Plane",
"context": "Then it passes",
"expected": "Null is not builtin: Plane",
"success": true
} ],
"context": "when calling asserts.is_not_Plane(null)",
"fullname": "test_when_calling_is_not_Plane",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Transform2D",
"context": "Then it passes",
"expected": "Null is not builtin: Transform2D",
"success": true
} ],
"context": "when calling asserts.is_not_Transform2D(null)",
"fullname": "test_when_calling_is_not_Transform2D",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: PoolColorArray",
"context": "Then it passes",
"expected": "Null is not builtin: PoolColorArray",
"success": true
} ],
"context": "when calling asserts.is_not_PoolColorArray(null)",
"fullname": "test_when_calling_is_not_PoolColorArray",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Vector3",
"context": "Then it passes",
"expected": "Null is not builtin: Vector3",
"success": true
} ],
"context": "when calling asserts.is_not_Vector3(null)",
"fullname": "test_when_calling_is_not_Vector3",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: PoolByteArray",
"context": "Then it passes",
"expected": "Null is not builtin: PoolByteArray",
"success": true
} ],
"context": "when calling asserts.is_not_PoolByteArray(null)",
"fullname": "test_when_calling_is_not_PoolByteArray",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Rect2",
"context": "Then it passes",
"expected": "Null is not builtin: Rect2",
"success": true
} ],
"context": "when calling asserts.is_not_Rect2(null)",
"fullname": "test_when_calling_is_not_Rect2",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 26,
"path": "res://tests/unit/is_not_instance.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/is_not_instance.test.gd",
"tags": [  ],
"test": ExtResource( 2 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 26
}, {
"context": "Given a Null Assertion",
"methods": [ {
"assertions": [ {
"actual": "|Object| [Node:8220] != null",
"context": "Then it passes",
"expected": "|Object| [Node:8220] != null",
"success": true
} ],
"context": "When calling Node is not null",
"fullname": "test_when_calling_node_is_not_null",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|null| Null == null",
"context": "Then it passes",
"expected": "|null| Null == null",
"success": true
} ],
"context": "When calling asserts.is_null(null)",
"fullname": "test_when_calling_null_is_null",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|Object| [Deleted Object] == null",
"context": "A Freed Node is null in Engine 3.2.2 or greater",
"expected": "|Object| [Deleted Object] == null",
"success": true
} ],
"context": "When calling freed object is null",
"fullname": "test_when_calling_freed_object_is_not_null",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 3,
"path": "res://tests/unit/null.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/null.test.gd",
"tags": [  ],
"test": ExtResource( 12 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 3
}, {
"context": "Given an Object Assertion",
"methods": [ {
"assertions": [ {
"actual": "[Node:8225] does not have meta: confusing",
"context": "Then it passes",
"expected": "[Node:8225] does not have meta: confusing",
"success": true
} ],
"context": "When calling asserts.object_has_meta with real key but null val",
"fullname": "test_when_calling_does_not_have_meta_real_key_null_value_pair",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:8225] has method: title",
"context": "Then it passes",
"expected": "[Node:8225] has method: title",
"success": true
} ],
"context": "When calling has_method('title')",
"fullname": "test_when_calling_has_method_title",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:8225] has user signal: dummy_signal",
"context": "Then it passes",
"expected": "[Node:8225] has user signal: dummy_signal",
"success": true
} ],
"context": "When calling obj_has_user_signal after adding a signal",
"fullname": "test_when_calling_has_user_signal_after_adding_a_signal",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:8225] does not have user signal: false_signal",
"context": "Then it passes",
"expected": "[Node:8225] does not have user signal: false_signal",
"success": true
} ],
"context": "When calling obj_does_not_have_user_signal with fake signal",
"fullname": "test_when_calling_does_not_have_user_signal",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is freed from memory",
"context": "Then it passes",
"expected": "Null is freed from memory",
"success": true
} ],
"context": "When calling asserts.is_freed(freed_object",
"fullname": "test_when_calling_freed_object_is_freed",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:8225] has meta: dummy",
"context": "Then it passes",
"expected": "[Node:8225] has meta: dummy",
"success": true
}, {
"actual": "[Node:8225] has meta: dummy",
"context": "Then it passes",
"expected": "[Node:8225] has meta: dummy",
"success": true
} ],
"context": "When calling asserts.object_has_meta() after adding metadata",
"fullname": "test_when_calling_has_meta_after_adding_metadata",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "[Node:8236] is not freed",
"context": "Then it passes",
"expected": "[Node:8236] is not freed",
"success": true
} ],
"context": "When calling asserts.is_not_freed(unfreed_object)",
"fullname": "test_when_calling_unfreed_object_is_not_freed",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:8225] does not have meta: bad_meta",
"context": "Then it passes",
"expected": "[Node:8225] does not have meta: bad_meta",
"success": true
} ],
"context": "When calling asserts.object_does_not_have_meta()",
"fullname": "test_when_calling_does_not_have_meta",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:8239] is queued for deletion",
"context": "Then it passes",
"expected": "[Node:8239] is queued for deletion",
"success": true
} ],
"context": "When calling asserts.object_is_queued for deletion after calling queue_free",
"fullname": "test_when_calling_obj_is_queued_for_deletion_after_calling_queue_free",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:8241] is blocking signals",
"context": "Then it passes",
"expected": "[Node:8241] is blocking signals",
"success": true
} ],
"context": "When calling is blocking signals while blocking signals",
"fullname": "test_is_blocking_signals",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:8243] is not blocking signals",
"context": "Then it passes",
"expected": "[Node:8243] is not blocking signals",
"success": true
} ],
"context": "When calling is not blocking signals while not blocking signals",
"fullname": "test_is_not_blocking_signals",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:8245] is not queued for deletion",
"context": "Then it passes",
"expected": "[Node:8245] is not queued for deletion",
"success": true
} ],
"context": "When calling asserts.object_is_not_for_queued_deletion after not calling queue free()",
"fullname": "test_when_calling_obj_is_not_for_queued_deletion_after_not_calling_queue_free",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:8225].builtin_dummy is connected to [Node:8225].title",
"context": "Then it passes",
"expected": "[Node:8225].builtin_dummy is connected to [Node:8225].title",
"success": true
} ],
"context": "When calling asserts object is connected with a valid connection",
"fullname": "test_when_calling_obj_is_connected_with_a_real_connection",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:8225].builtin_dummy is not connected to [Node:8225].title",
"context": "Then it passes",
"expected": "[Node:8225].builtin_dummy is not connected to [Node:8225].title",
"success": true
} ],
"context": "When calling asserts object is not connected with an invalid connection",
"fullname": "test_when_calling_obj_is_not_connected_with_an_invalid_connection",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:8225] does not have user signal: builtin_dummy",
"context": "Then it passes",
"expected": "[Node:8225] does not have user signal: builtin_dummy",
"success": true
} ],
"context": "When calling does not have user signal with class signal",
"fullname": "test_when_calling_does_not_have_user_signal_with_class_signal_constant",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 15,
"path": "res://tests/unit/object.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/object.test.gd",
"tags": [  ],
"test": ExtResource( 7 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 15
}, {
"context": "Given the Addition Operator",
"methods": [ {
"assertions": [ {
"actual": "|int| 4 is equal to |int| 4",
"context": "",
"expected": "|int| 4 is equal to |int| 4",
"success": true
} ],
"context": "When we add 2 to 2 we get 4",
"fullname": "test_add",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 8 is equal to |int| 8",
"context": "",
"expected": "|int| 8 is equal to |int| 8",
"success": true
} ],
"context": "When we add 5 to 3 we get 8",
"fullname": "test_add",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 13 is equal to |int| 13",
"context": "",
"expected": "|int| 13 is equal to |int| 13",
"success": true
} ],
"context": "When we add 7 to 6 we get 13",
"fullname": "test_add",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 0 is equal to |int| 0",
"context": "",
"expected": "|int| 0 is equal to |int| 0",
"success": true
} ],
"context": "When we subtract 2 from 2 we get 0",
"fullname": "test_subtract",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 2 is equal to |int| 2",
"context": "",
"expected": "|int| 2 is equal to |int| 2",
"success": true
} ],
"context": "When we subtract 5 from 3 we get 2",
"fullname": "test_subtract",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 1 is equal to |int| 1",
"context": "",
"expected": "|int| 1 is equal to |int| 1",
"success": true
} ],
"context": "When we subtract 7 from 6 we get 1",
"fullname": "test_subtract",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 6,
"path": "res://tests/unit/parameters.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/parameters.test.gd",
"tags": [  ],
"test": ExtResource( 16 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 6
}, {
"context": "Given A Range Assertion",
"methods": [ {
"assertions": [ {
"actual": "10 is not in range(0, 10)",
"context": "Then it passes",
"expected": "10 is not in range(0, 10)",
"success": true
} ],
"context": "When calling is (10) not in range (in range(0, 10)",
"fullname": "test_when_calling_is_not_in_range",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "0 is in range(0, 10)",
"context": "Then it passes",
"expected": "0 is in range(0, 10)",
"success": true
} ],
"context": "When calling is (0) in range(0, 10)",
"fullname": "test_when_calling_is_in_range",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 2,
"path": "res://tests/unit/range.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/range.test.gd",
"tags": [  ],
"test": ExtResource( 15 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 2
}, {
"context": "Given a String Assertion",
"methods": [ {
"assertions": [ {
"actual": "impsum does not begin with bleh lorem",
"context": "Then it passes",
"expected": "impsum does not begin with bleh lorem",
"success": true
} ],
"context": "When calling asserts.string_does_not_begin_with('lorem', 'impsum')",
"fullname": "test_when_calling_string_does_not_begin_with",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "lorem impsum begins with lorem",
"context": "Then it passes",
"expected": "lorem impsum begins with lorem",
"success": true
} ],
"context": "When calling asserts.string_begins_with('lorem', 'lorem impsum')",
"fullname": "test_when_calling_string_begins_with",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "lorem impsum ends with impsum",
"context": "Then it passes",
"expected": "lorem impsum ends with impsum",
"success": true
} ],
"context": "When calling asserts.string_ends_with('impsum', 'lorem impsum')",
"fullname": "test_when_calling_string_ends_with",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "impsum does not contain beem im",
"context": "Then it passes",
"expected": "impsum does not contain beem im",
"success": true
} ],
"context": "When calling asserts.string_does_not_contain('em im', 'impsum')",
"fullname": "test_when_calling_string_does_not_contain",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "lorem impsum contains em im",
"context": "Then it passes",
"expected": "lorem impsum contains em im",
"success": true
} ],
"context": "When calling asserts.string_contains('em im', 'lorem impsum')",
"fullname": "test_when_calling_string_contains",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "impsum does not end with lorem",
"context": "Then it passes",
"expected": "impsum does not end with lorem",
"success": true
} ],
"context": "When calling asserts.string_does_not_end_with('lorem', 'impsum')",
"fullname": "test_when_calling_string_does_not_end_with",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 6,
"path": "res://tests/unit/string.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/string.test.gd",
"tags": [  ],
"test": ExtResource( 9 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 6
}, {
"context": "Dummy Passing Test",
"methods": [ {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Passing!",
"expected": "|bool| True == true",
"success": true
} ],
"context": "This method passes",
"fullname": "test_this_method_passes",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 1,
"path": "res://tests/unit/suite.test.gd.DummyOne",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/suite.test.gd.DummyOne",
"tags": [  ],
"test": SubResource( 19 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 1
}, {
"context": "Dummy Test 2",
"methods": [ {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Passing!",
"expected": "|bool| True == true",
"success": true
} ],
"context": "This method passes",
"fullname": "test_this_method_passes",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 1,
"path": "res://tests/unit/suite.test.gd.DummyTwo",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/suite.test.gd.DummyTwo",
"tags": [  ],
"test": SubResource( 20 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 1
}, {
"context": "Given a Test Script",
"methods": [ {
"assertions": [ {
"actual": "|int| 10 is greater than |int| 1",
"context": "We get an array of multiple values back",
"expected": "|int| 10 is greater than |int| 1",
"success": true
}, {
"actual": "|int| 0 is not equal to |int| 9",
"context": "With different values",
"expected": "|int| 0 != |int| 9",
"success": true
}, {
"actual": "|int| 10 is greater than |int| 1",
"context": "And we can track multiple properties",
"expected": "|int| 10 is greater than |int| 1",
"success": true
} ],
"context": "When we record properties",
"fullname": "test_we_can_record_properties",
"passed": 3,
"success": true,
"time": 0.0,
"total": 3
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "if the test didn't break this works",
"expected": "|bool| True == true",
"success": true
} ],
"context": " we can omit describe",
"fullname": "test_we_can_omit_describe",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|int| 2 is equal to |int| 2",
"context": "",
"expected": "|int| 2 is equal to |int| 2",
"success": true
} ],
"context": " when we omit context we can see expected and got under method",
"fullname": "test_when_we_omit_context_we_can_see_expected_and_got_under_method",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
} ],
"passed": 3,
"path": "res://tests/unit/test.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/test.test.gd",
"tags": [  ],
"test": ExtResource( 19 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 3
}, {
"context": "Given a Signal Watcher",
"methods": [ {
"assertions": [ {
"actual": "signal: multiple was emitted from [Node:8292] 2",
"context": "Then we can track how many times we emitted it",
"expected": "signal: multiple was emitted from [Node:8292] 2",
"success": true
} ],
"context": "When we watch and signal and emit it multiple times",
"fullname": "test_When_we_watch_a_signal_and_emit_it_multiple_times",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Signal: example was not emitted from [Node:8292]",
"context": "Then it does not capture the non-emitted signal",
"expected": "Signal: example was not emitted from [Node:8292]",
"success": true
} ],
"context": "When we watch and do not emit a signal",
"fullname": "test_When_we_watch_and_do_not_emit_a_signal",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Signal: example was emitted from [Node:8292] with arguments: [1, 20, 5]",
"context": "Then it captures any arguments that where passed when the signal was emitted",
"expected": "Signal: example was emitted from [Node:8292] with arguments: [1, 20, 5]",
"success": true
} ],
"context": "When we watch a signal from an object with no bound variables",
"fullname": "test_When_we_watch_a_signal_from_an_object_with_no_bound_variables",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "signal: example was emitted from [Node:8292]",
"context": "Then it captures the emitted signal",
"expected": "signal: example was emitted from [Node:8292]",
"success": true
} ],
"context": "When we watch and emit a signal",
"fullname": "test_When_we_watch_and_emit_a_signal",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 4,
"path": "res://tests/unit/watcher.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/watcher.test.gd",
"tags": [  ],
"test": ExtResource( 17 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 4
}, {
"context": "Given a Yield",
"methods": [ {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then we set var a to true",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then we set var b to true",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we yield in start twice",
"fullname": "test_When_we_yield_in_start",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then we set var c to true",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then we set var d to true",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we yield in pre thrice",
"fullname": "test_When_we_yield_in_pre",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "[100, Null, Null, Null, Null, Null] is builtin: Array",
"context": "Then we get an array",
"expected": "[100, Null, Null, Null, Null, Null] is builtin: Array",
"success": true
}, {
"actual": "|int| 6 is equal to |int| 6",
"context": "Of size 6",
"expected": "|int| 6 is equal to |int| 6",
"success": true
}, {
"actual": "|int| 100 is equal to |int| 100",
"context": "Where element 0 is 100",
"expected": "|int| 100 is equal to |int| 100",
"success": true
} ],
"context": "When yield(self.yield_value()) returns",
"fullname": "test_When_we_yield_we_get_the_return_value",
"passed": 3,
"success": true,
"time": 0.0,
"total": 3
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then yielder is unpaused",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "The timeout signal of the yielder is connected",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we call until_timeout (with 1.0)",
"fullname": "test_When_we_call_until_timeout",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then the yielder is unpaused",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then the timeout signal of the yielder is connected",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then our signal is connected to the yielder",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we call until signal",
"fullname": "test_When_we_call_until_signal",
"passed": 3,
"success": true,
"time": 0.0,
"total": 3
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then yielder is not active",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When asserting against a test",
"fullname": "test_Yielder_is_not_active_when_asserting",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then we set var e to true",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then we set var f to true",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we yield twice in execute",
"fullname": "test_When_we_yield_in_execute",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then the timeout signal is disconnected",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then the signal-signal is disconnected",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When it is finished",
"fullname": "test_When_yielder_is_finished_signals_are_disconnected",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then the yielder is paused",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When a signal being yielded on is emitted",
"fullname": "test_When_a_signal_being_yielded_on_is_emitted_the_yielder_is_stopped",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then the yielder is paused",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "The timeout signal of the yielder is not connected",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When the yielder times out on until_timeout(0.1)",
"fullname": "test_When_the_yielder_times_out",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then the yielder is paused",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then the timeout signal of the yielder is disconnected",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then our signal to the yielder is disconnected",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When the yielder heres our signal",
"fullname": "test_When_the_yielder_hears_our_signal",
"passed": 3,
"success": true,
"time": 0.0,
"total": 3
} ],
"passed": 11,
"path": "res://tests/unit/yield.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/yield.test.gd",
"tags": [  ],
"test": ExtResource( 18 ),
"yield_time": 1.9
},
"success": true,
"time_taken": 0.0,
"total": 11
} ],
1611514702: [ {
"context": "Default Args",
"methods": [ {
"assertions": [ {
"actual": "|bool| True == true",
"context": "If this method can be reached then we have doubled a script with default argument(s) properly!",
"expected": "|bool| True == true",
"success": true
} ],
"context": " default arguments of interpolate property",
"fullname": "test_default_arguments_of_interpolate_property",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 1,
"path": "res://tests/integration/default_args.test.gd",
"source": {
"containers": [ "res://tests/integration", "res://tests" ],
"method": "",
"path": "res://tests/integration/default_args.test.gd",
"tags": [  ],
"test": ExtResource( 10 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 1
}, {
"context": "Given a Boolean Assertion",
"methods": [ {
"assertions": [ {
"actual": "|bool| True != false",
"context": "",
"expected": "|bool| True == false",
"success": false
} ],
"context": " intentional failure",
"fullname": "test_intentional_failure",
"passed": 0,
"success": false,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then it passes",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When calling asserts.is_true(true)",
"fullname": "test_when_calling_asserts_is_true",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| False == false",
"context": "Then it passes",
"expected": "|bool| False == false",
"success": true
} ],
"context": "When calling asserts.is_false(false)",
"fullname": "test_when_calling_asserts_is_false",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 2,
"path": "res://tests/integration/boolean.test.gd",
"source": {
"containers": [ "res://tests/integration", "res://tests" ],
"method": "",
"path": "res://tests/integration/boolean.test.gd",
"tags": [  ],
"test": ExtResource( 20 ),
"yield_time": 0.0
},
"success": false,
"time_taken": 0.0,
"total": 3
}, {
"context": "Given is_on_floor",
"methods": [ {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then it can be stubbed",
"expected": "|bool| True == true",
"success": true
} ],
"context": "From a built-in KinematicBody2D2",
"fullname": "test_stubbing_is_on_floor_method_from_builtin_class2",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then it can be stubbed",
"expected": "|bool| True == true",
"success": true
} ],
"context": "From a child node of a scene without scripts",
"fullname": "test_stubbing_is_on_floor_as_child_node_with_no_script",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then it can be stubbed",
"expected": "|bool| True == true",
"success": true
} ],
"context": "From a user-defined script",
"fullname": "test_stubbing_is_on_floor_method_from_user_defined_class",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 3,
"path": "res://tests/integration/on_floor.test.gd",
"source": {
"containers": [ "res://tests/integration", "res://tests" ],
"method": "",
"path": "res://tests/integration/on_floor.test.gd",
"tags": [  ],
"test": ExtResource( 5 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 3
}, {
"context": "Given a Script Director",
"methods": [ {
"assertions": [ {
"actual": "[Reference:1460] is instance of class: [GDScript:1453]",
"context": "Then we get that inner class back",
"expected": "[Reference:1460] is instance of class: [GDScript:1453]",
"success": true
} ],
"context": "When we double an inner class",
"fullname": "test_When_we_double_an_inner_class",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|Dictionary| {_enter_tree:{arguments:, default_arguments:}, _exit_tree:{arguments:, default_arguments:}, _get:{arguments:a, default_arguments:a}, _get_configuration_warning:{arguments:, default_arguments:}, _get_editor_description:{arguments:, default_arguments:}, _get_import_path:{arguments:, default_arguments:}, _get_property_list:{arguments:, default_arguments:}, _init:{arguments:, default_arguments:}, _input:{arguments:a, default_arguments:a}, _notification:{arguments:a, default_arguments:a}, _physics_process:{arguments:a, default_arguments:a}, _process:{arguments:a, default_arguments:a}, _ready:{arguments:, default_arguments:}, _set:{arguments:a, b, default_arguments:a, b}, _set_editor_description:{arguments:a, default_arguments:a}, _set_import_path:{arguments:a, default_arguments:a}, _to_string:{arguments:, default_arguments:}, _unhandled_input:{arguments:a, default_arguments:a}, _unhandled_key_input:{arguments:a, default_arguments:a}, add:{arguments:a, b, default_arguments:a, b}, add_child:{arguments:a, b, default_arguments:a, b = False}, add_child_below_node:{arguments:a, b, c, default_arguments:a, b, c = False}, add_to_group:{arguments:a, b, default_arguments:a, b = False}, add_user_signal:{arguments:a, b, default_arguments:a, b = []}, call:{arguments:a, default_arguments:a}, call_deferred:{arguments:a, default_arguments:a}, callv:{arguments:a, b, default_arguments:a, b}, can_process:{arguments:, default_arguments:}, can_translate_messages:{arguments:, default_arguments:}, connect:{arguments:a, b, c, d, e, default_arguments:a, b, c, d = [], e = 0}, disconnect:{arguments:a, b, c, default_arguments:a, b, c}, divide:{arguments:a, b, default_arguments:a, b}, duplicate:{arguments:a, default_arguments:a = 15}, emit_signal:{arguments:a, default_arguments:a}, find_node:{arguments:a, b, c, default_arguments:a, b = True, c = True}, find_parent:{arguments:a, default_arguments:a}, free:{arguments:, default_arguments:}, get:{arguments:a, default_arguments:a}, get_child:{arguments:a, default_arguments:a}, get_child_count:{arguments:, default_arguments:}, get_children:{arguments:, default_arguments:}, get_class:{arguments:, default_arguments:}, get_custom_multiplayer:{arguments:, default_arguments:}, get_filename:{arguments:, default_arguments:}, get_groups:{arguments:, default_arguments:}, get_incoming_connections:{arguments:, default_arguments:}, get_index:{arguments:, default_arguments:}, get_indexed:{arguments:a, default_arguments:a}, get_instance_id:{arguments:, default_arguments:}, get_meta:{arguments:a, default_arguments:a}, get_meta_list:{arguments:, default_arguments:}, get_method_list:{arguments:, default_arguments:}, get_multiplayer:{arguments:, default_arguments:}, get_name:{arguments:, default_arguments:}, get_network_master:{arguments:, default_arguments:}, get_node:{arguments:a, default_arguments:a}, get_node_and_resource:{arguments:a, default_arguments:a}, get_node_or_null:{arguments:a, default_arguments:a}, get_owner:{arguments:, default_arguments:}, get_parent:{arguments:, default_arguments:}, get_path:{arguments:, default_arguments:}, get_path_to:{arguments:a, default_arguments:a}, get_pause_mode:{arguments:, default_arguments:}, get_physics_process_delta_time:{arguments:, default_arguments:}, get_position_in_parent:{arguments:, default_arguments:}, get_process_delta_time:{arguments:, default_arguments:}, get_process_priority:{arguments:, default_arguments:}, get_property_list:{arguments:, default_arguments:}, get_scene_instance_load_placeholder:{arguments:, default_arguments:}, get_script:{arguments:, default_arguments:}, get_signal_connection_list:{arguments:a, default_arguments:a}, get_signal_list:{arguments:, default_arguments:}, get_tree:{arguments:, default_arguments:}, get_viewport:{arguments:, default_arguments:}, has_meta:{arguments:a, default_arguments:a}, has_method:{arguments:a, default_arguments:a}, has_node:{arguments:a, default_arguments:a}, has_node_and_resource:{arguments:a, default_arguments:a}, has_signal:{arguments:a, default_arguments:a}, has_user_signal:{arguments:a, default_arguments:a}, is_a_parent_of:{arguments:a, default_arguments:a}, is_blocking_signals:{arguments:, default_arguments:}, is_class:{arguments:a, default_arguments:a}, is_connected:{arguments:a, b, c, default_arguments:a, b, c}, is_displayed_folded:{arguments:, default_arguments:}, is_greater_than:{arguments:a, default_arguments:a}, is_in_group:{arguments:a, default_arguments:a}, is_inside_tree:{arguments:, default_arguments:}, is_network_master:{arguments:, default_arguments:}, is_physics_processing:{arguments:, default_arguments:}, is_physics_processing_internal:{arguments:, default_arguments:}, is_processing:{arguments:, default_arguments:}, is_processing_input:{arguments:, default_arguments:}, is_processing_internal:{arguments:, default_arguments:}, is_processing_unhandled_input:{arguments:, default_arguments:}, is_processing_unhandled_key_input:{arguments:, default_arguments:}, is_queued_for_deletion:{arguments:, default_arguments:}, math_fight:{arguments:, default_arguments:}, move_child:{arguments:a, b, default_arguments:a, b}, multiply:{arguments:a, b, default_arguments:a, b}, notification:{arguments:a, b, default_arguments:a, b = False}, pi:{arguments:, default_arguments:}, print_stray_nodes:{arguments:, default_arguments:}, print_tree:{arguments:, default_arguments:}, print_tree_pretty:{arguments:, default_arguments:}, propagate_call:{arguments:a, b, c, default_arguments:a, b = [], c = False}, propagate_notification:{arguments:a, default_arguments:a}, property_list_changed_notify:{arguments:, default_arguments:}, queue_free:{arguments:, default_arguments:}, raise:{arguments:, default_arguments:}, remove_and_skip:{arguments:, default_arguments:}, remove_child:{arguments:a, default_arguments:a}, remove_from_group:{arguments:a, default_arguments:a}, remove_meta:{arguments:a, default_arguments:a}, replace_by:{arguments:a, b, default_arguments:a, b = False}, request_ready:{arguments:, default_arguments:}, rpc:{arguments:a, default_arguments:a}, rpc_config:{arguments:a, b, default_arguments:a, b}, rpc_id:{arguments:a, b, default_arguments:a, b}, rpc_unreliable:{arguments:a, default_arguments:a}, rpc_unreliable_id:{arguments:a, b, default_arguments:a, b}, rset:{arguments:a, b, default_arguments:a, b}, rset_config:{arguments:a, b, default_arguments:a, b}, rset_id:{arguments:a, b, c, default_arguments:a, b, c}, rset_unreliable:{arguments:a, b, default_arguments:a, b}, rset_unreliable_id:{arguments:a, b, c, default_arguments:a, b, c}, set:{arguments:a, b, default_arguments:a, b}, set_block_signals:{arguments:a, default_arguments:a}, set_custom_multiplayer:{arguments:a, default_arguments:a}, set_deferred:{arguments:a, b, default_arguments:a, b}, set_display_folded:{arguments:a, default_arguments:a}, set_filename:{arguments:a, default_arguments:a}, set_indexed:{arguments:a, b, default_arguments:a, b}, set_message_translation:{arguments:a, default_arguments:a}, set_meta:{arguments:a, b, default_arguments:a, b}, set_name:{arguments:a, default_arguments:a}, set_network_master:{arguments:a, b, default_arguments:a, b = True}, set_owner:{arguments:a, default_arguments:a}, set_pause_mode:{arguments:a, default_arguments:a}, set_physics_process:{arguments:a, default_arguments:a}, set_physics_process_internal:{arguments:a, default_arguments:a}, set_process:{arguments:a, default_arguments:a}, set_process_input:{arguments:a, default_arguments:a}, set_process_internal:{arguments:a, default_arguments:a}, set_process_priority:{arguments:a, default_arguments:a}, set_process_unhandled_input:{arguments:a, default_arguments:a}, set_process_unhandled_key_input:{arguments:a, default_arguments:a}, set_scene_instance_load_placeholder:{arguments:a, default_arguments:a}, set_script:{arguments:a, default_arguments:a}, subtract:{arguments:a, b, default_arguments:a, b}, sum:{arguments:a, default_arguments:a}, to_string:{arguments:, default_arguments:}, tr:{arguments:a, default_arguments:a}, update_configuration_warning:{arguments:, default_arguments:}} is not equal to |Dictionary| {_enter_tree:{arguments:, default_arguments:}, _exit_tree:{arguments:, default_arguments:}, _get:{arguments:a, default_arguments:a}, _get_configuration_warning:{arguments:, default_arguments:}, _get_editor_description:{arguments:, default_arguments:}, _get_import_path:{arguments:, default_arguments:}, _get_property_list:{arguments:, default_arguments:}, _init:{arguments:, default_arguments:}, _input:{arguments:a, default_arguments:a}, _notification:{arguments:a, default_arguments:a}, _physics_process:{arguments:a, default_arguments:a}, _process:{arguments:a, default_arguments:a}, _ready:{arguments:, default_arguments:}, _set:{arguments:a, b, default_arguments:a, b}, _set_editor_description:{arguments:a, default_arguments:a}, _set_import_path:{arguments:a, default_arguments:a}, _to_string:{arguments:, default_arguments:}, _unhandled_input:{arguments:a, default_arguments:a}, _unhandled_key_input:{arguments:a, default_arguments:a}, add:{arguments:a, b, default_arguments:a, b}, add_child:{arguments:a, b, default_arguments:a, b = False}, add_child_below_node:{arguments:a, b, c, default_arguments:a, b, c = False}, add_to_group:{arguments:a, b, default_arguments:a, b = False}, add_user_signal:{arguments:a, b, default_arguments:a, b = []}, call:{arguments:a, default_arguments:a}, call_deferred:{arguments:a, default_arguments:a}, callv:{arguments:a, b, default_arguments:a, b}, can_process:{arguments:, default_arguments:}, can_translate_messages:{arguments:, default_arguments:}, connect:{arguments:a, b, c, d, e, default_arguments:a, b, c, d = [], e = 0}, disconnect:{arguments:a, b, c, default_arguments:a, b, c}, divide:{arguments:a, b, default_arguments:a, b}, duplicate:{arguments:a, default_arguments:a = 15}, emit_signal:{arguments:a, default_arguments:a}, find_node:{arguments:a, b, c, default_arguments:a, b = True, c = True}, find_parent:{arguments:a, default_arguments:a}, free:{arguments:, default_arguments:}, get:{arguments:a, default_arguments:a}, get_child:{arguments:a, default_arguments:a}, get_child_count:{arguments:, default_arguments:}, get_children:{arguments:, default_arguments:}, get_class:{arguments:, default_arguments:}, get_custom_multiplayer:{arguments:, default_arguments:}, get_filename:{arguments:, default_arguments:}, get_groups:{arguments:, default_arguments:}, get_incoming_connections:{arguments:, default_arguments:}, get_index:{arguments:, default_arguments:}, get_indexed:{arguments:a, default_arguments:a}, get_instance_id:{arguments:, default_arguments:}, get_meta:{arguments:a, default_arguments:a}, get_meta_list:{arguments:, default_arguments:}, get_method_list:{arguments:, default_arguments:}, get_multiplayer:{arguments:, default_arguments:}, get_name:{arguments:, default_arguments:}, get_network_master:{arguments:, default_arguments:}, get_node:{arguments:a, default_arguments:a}, get_node_and_resource:{arguments:a, default_arguments:a}, get_node_or_null:{arguments:a, default_arguments:a}, get_owner:{arguments:, default_arguments:}, get_parent:{arguments:, default_arguments:}, get_path:{arguments:, default_arguments:}, get_path_to:{arguments:a, default_arguments:a}, get_pause_mode:{arguments:, default_arguments:}, get_physics_process_delta_time:{arguments:, default_arguments:}, get_position_in_parent:{arguments:, default_arguments:}, get_process_delta_time:{arguments:, default_arguments:}, get_process_priority:{arguments:, default_arguments:}, get_property_list:{arguments:, default_arguments:}, get_scene_instance_load_placeholder:{arguments:, default_arguments:}, get_script:{arguments:, default_arguments:}, get_signal_connection_list:{arguments:a, default_arguments:a}, get_signal_list:{arguments:, default_arguments:}, get_tree:{arguments:, default_arguments:}, get_viewport:{arguments:, default_arguments:}, has_meta:{arguments:a, default_arguments:a}, has_method:{arguments:a, default_arguments:a}, has_node:{arguments:a, default_arguments:a}, has_node_and_resource:{arguments:a, default_arguments:a}, has_signal:{arguments:a, default_arguments:a}, has_user_signal:{arguments:a, default_arguments:a}, is_a_parent_of:{arguments:a, default_arguments:a}, is_blocking_signals:{arguments:, default_arguments:}, is_class:{arguments:a, default_arguments:a}, is_connected:{arguments:a, b, c, default_arguments:a, b, c}, is_displayed_folded:{arguments:, default_arguments:}, is_greater_than:{arguments:a, default_arguments:a}, is_in_group:{arguments:a, default_arguments:a}, is_inside_tree:{arguments:, default_arguments:}, is_network_master:{arguments:, default_arguments:}, is_physics_processing:{arguments:, default_arguments:}, is_physics_processing_internal:{arguments:, default_arguments:}, is_processing:{arguments:, default_arguments:}, is_processing_input:{arguments:, default_arguments:}, is_processing_internal:{arguments:, default_arguments:}, is_processing_unhandled_input:{arguments:, default_arguments:}, is_processing_unhandled_key_input:{arguments:, default_arguments:}, is_queued_for_deletion:{arguments:, default_arguments:}, math_fight:{arguments:, default_arguments:}, move_child:{arguments:a, b, default_arguments:a, b}, multiply:{arguments:a, b, default_arguments:a, b}, notification:{arguments:a, b, default_arguments:a, b = False}, pi:{arguments:, default_arguments:}, print_stray_nodes:{arguments:, default_arguments:}, print_tree:{arguments:, default_arguments:}, print_tree_pretty:{arguments:, default_arguments:}, propagate_call:{arguments:a, b, c, default_arguments:a, b = [], c = False}, propagate_notification:{arguments:a, default_arguments:a}, property_list_changed_notify:{arguments:, default_arguments:}, queue_free:{arguments:, default_arguments:}, raise:{arguments:, default_arguments:}, remove_and_skip:{arguments:, default_arguments:}, remove_child:{arguments:a, default_arguments:a}, remove_from_group:{arguments:a, default_arguments:a}, remove_meta:{arguments:a, default_arguments:a}, replace_by:{arguments:a, b, default_arguments:a, b = False}, request_ready:{arguments:, default_arguments:}, rpc:{arguments:a, default_arguments:a}, rpc_config:{arguments:a, b, default_arguments:a, b}, rpc_id:{arguments:a, b, default_arguments:a, b}, rpc_unreliable:{arguments:a, default_arguments:a}, rpc_unreliable_id:{arguments:a, b, default_arguments:a, b}, rset:{arguments:a, b, default_arguments:a, b}, rset_config:{arguments:a, b, default_arguments:a, b}, rset_id:{arguments:a, b, c, default_arguments:a, b, c}, rset_unreliable:{arguments:a, b, default_arguments:a, b}, rset_unreliable_id:{arguments:a, b, c, default_arguments:a, b, c}, set:{arguments:a, b, default_arguments:a, b}, set_block_signals:{arguments:a, default_arguments:a}, set_custom_multiplayer:{arguments:a, default_arguments:a}, set_deferred:{arguments:a, b, default_arguments:a, b}, set_display_folded:{arguments:a, default_arguments:a}, set_filename:{arguments:a, default_arguments:a}, set_indexed:{arguments:a, b, default_arguments:a, b}, set_message_translation:{arguments:a, default_arguments:a}, set_meta:{arguments:a, b, default_arguments:a, b}, set_name:{arguments:a, default_arguments:a}, set_network_master:{arguments:a, b, default_arguments:a, b = True}, set_owner:{arguments:a, default_arguments:a}, set_pause_mode:{arguments:a, default_arguments:a}, set_physics_process:{arguments:a, default_arguments:a}, set_physics_process_internal:{arguments:a, default_arguments:a}, set_process:{arguments:a, default_arguments:a}, set_process_input:{arguments:a, default_arguments:a}, set_process_internal:{arguments:a, default_arguments:a}, set_process_priority:{arguments:a, default_arguments:a}, set_process_unhandled_input:{arguments:a, default_arguments:a}, set_process_unhandled_key_input:{arguments:a, default_arguments:a}, set_scene_instance_load_placeholder:{arguments:a, default_arguments:a}, set_script:{arguments:a, default_arguments:a}, subtract:{arguments:a, b, default_arguments:a, b}, sum:{arguments:a, default_arguments:a}, to_string:{arguments:, default_arguments:}, tr:{arguments:a, default_arguments:a}, update_configuration_warning:{arguments:, default_arguments:}}",
"context": "Then they do not share resources",
"expected": "|Dictionary| {_enter_tree:{arguments:, default_arguments:}, _exit_tree:{arguments:, default_arguments:}, _get:{arguments:a, default_arguments:a}, _get_configuration_warning:{arguments:, default_arguments:}, _get_editor_description:{arguments:, default_arguments:}, _get_import_path:{arguments:, default_arguments:}, _get_property_list:{arguments:, default_arguments:}, _init:{arguments:, default_arguments:}, _input:{arguments:a, default_arguments:a}, _notification:{arguments:a, default_arguments:a}, _physics_process:{arguments:a, default_arguments:a}, _process:{arguments:a, default_arguments:a}, _ready:{arguments:, default_arguments:}, _set:{arguments:a, b, default_arguments:a, b}, _set_editor_description:{arguments:a, default_arguments:a}, _set_import_path:{arguments:a, default_arguments:a}, _to_string:{arguments:, default_arguments:}, _unhandled_input:{arguments:a, default_arguments:a}, _unhandled_key_input:{arguments:a, default_arguments:a}, add:{arguments:a, b, default_arguments:a, b}, add_child:{arguments:a, b, default_arguments:a, b = False}, add_child_below_node:{arguments:a, b, c, default_arguments:a, b, c = False}, add_to_group:{arguments:a, b, default_arguments:a, b = False}, add_user_signal:{arguments:a, b, default_arguments:a, b = []}, call:{arguments:a, default_arguments:a}, call_deferred:{arguments:a, default_arguments:a}, callv:{arguments:a, b, default_arguments:a, b}, can_process:{arguments:, default_arguments:}, can_translate_messages:{arguments:, default_arguments:}, connect:{arguments:a, b, c, d, e, default_arguments:a, b, c, d = [], e = 0}, disconnect:{arguments:a, b, c, default_arguments:a, b, c}, divide:{arguments:a, b, default_arguments:a, b}, duplicate:{arguments:a, default_arguments:a = 15}, emit_signal:{arguments:a, default_arguments:a}, find_node:{arguments:a, b, c, default_arguments:a, b = True, c = True}, find_parent:{arguments:a, default_arguments:a}, free:{arguments:, default_arguments:}, get:{arguments:a, default_arguments:a}, get_child:{arguments:a, default_arguments:a}, get_child_count:{arguments:, default_arguments:}, get_children:{arguments:, default_arguments:}, get_class:{arguments:, default_arguments:}, get_custom_multiplayer:{arguments:, default_arguments:}, get_filename:{arguments:, default_arguments:}, get_groups:{arguments:, default_arguments:}, get_incoming_connections:{arguments:, default_arguments:}, get_index:{arguments:, default_arguments:}, get_indexed:{arguments:a, default_arguments:a}, get_instance_id:{arguments:, default_arguments:}, get_meta:{arguments:a, default_arguments:a}, get_meta_list:{arguments:, default_arguments:}, get_method_list:{arguments:, default_arguments:}, get_multiplayer:{arguments:, default_arguments:}, get_name:{arguments:, default_arguments:}, get_network_master:{arguments:, default_arguments:}, get_node:{arguments:a, default_arguments:a}, get_node_and_resource:{arguments:a, default_arguments:a}, get_node_or_null:{arguments:a, default_arguments:a}, get_owner:{arguments:, default_arguments:}, get_parent:{arguments:, default_arguments:}, get_path:{arguments:, default_arguments:}, get_path_to:{arguments:a, default_arguments:a}, get_pause_mode:{arguments:, default_arguments:}, get_physics_process_delta_time:{arguments:, default_arguments:}, get_position_in_parent:{arguments:, default_arguments:}, get_process_delta_time:{arguments:, default_arguments:}, get_process_priority:{arguments:, default_arguments:}, get_property_list:{arguments:, default_arguments:}, get_scene_instance_load_placeholder:{arguments:, default_arguments:}, get_script:{arguments:, default_arguments:}, get_signal_connection_list:{arguments:a, default_arguments:a}, get_signal_list:{arguments:, default_arguments:}, get_tree:{arguments:, default_arguments:}, get_viewport:{arguments:, default_arguments:}, has_meta:{arguments:a, default_arguments:a}, has_method:{arguments:a, default_arguments:a}, has_node:{arguments:a, default_arguments:a}, has_node_and_resource:{arguments:a, default_arguments:a}, has_signal:{arguments:a, default_arguments:a}, has_user_signal:{arguments:a, default_arguments:a}, is_a_parent_of:{arguments:a, default_arguments:a}, is_blocking_signals:{arguments:, default_arguments:}, is_class:{arguments:a, default_arguments:a}, is_connected:{arguments:a, b, c, default_arguments:a, b, c}, is_displayed_folded:{arguments:, default_arguments:}, is_greater_than:{arguments:a, default_arguments:a}, is_in_group:{arguments:a, default_arguments:a}, is_inside_tree:{arguments:, default_arguments:}, is_network_master:{arguments:, default_arguments:}, is_physics_processing:{arguments:, default_arguments:}, is_physics_processing_internal:{arguments:, default_arguments:}, is_processing:{arguments:, default_arguments:}, is_processing_input:{arguments:, default_arguments:}, is_processing_internal:{arguments:, default_arguments:}, is_processing_unhandled_input:{arguments:, default_arguments:}, is_processing_unhandled_key_input:{arguments:, default_arguments:}, is_queued_for_deletion:{arguments:, default_arguments:}, math_fight:{arguments:, default_arguments:}, move_child:{arguments:a, b, default_arguments:a, b}, multiply:{arguments:a, b, default_arguments:a, b}, notification:{arguments:a, b, default_arguments:a, b = False}, pi:{arguments:, default_arguments:}, print_stray_nodes:{arguments:, default_arguments:}, print_tree:{arguments:, default_arguments:}, print_tree_pretty:{arguments:, default_arguments:}, propagate_call:{arguments:a, b, c, default_arguments:a, b = [], c = False}, propagate_notification:{arguments:a, default_arguments:a}, property_list_changed_notify:{arguments:, default_arguments:}, queue_free:{arguments:, default_arguments:}, raise:{arguments:, default_arguments:}, remove_and_skip:{arguments:, default_arguments:}, remove_child:{arguments:a, default_arguments:a}, remove_from_group:{arguments:a, default_arguments:a}, remove_meta:{arguments:a, default_arguments:a}, replace_by:{arguments:a, b, default_arguments:a, b = False}, request_ready:{arguments:, default_arguments:}, rpc:{arguments:a, default_arguments:a}, rpc_config:{arguments:a, b, default_arguments:a, b}, rpc_id:{arguments:a, b, default_arguments:a, b}, rpc_unreliable:{arguments:a, default_arguments:a}, rpc_unreliable_id:{arguments:a, b, default_arguments:a, b}, rset:{arguments:a, b, default_arguments:a, b}, rset_config:{arguments:a, b, default_arguments:a, b}, rset_id:{arguments:a, b, c, default_arguments:a, b, c}, rset_unreliable:{arguments:a, b, default_arguments:a, b}, rset_unreliable_id:{arguments:a, b, c, default_arguments:a, b, c}, set:{arguments:a, b, default_arguments:a, b}, set_block_signals:{arguments:a, default_arguments:a}, set_custom_multiplayer:{arguments:a, default_arguments:a}, set_deferred:{arguments:a, b, default_arguments:a, b}, set_display_folded:{arguments:a, default_arguments:a}, set_filename:{arguments:a, default_arguments:a}, set_indexed:{arguments:a, b, default_arguments:a, b}, set_message_translation:{arguments:a, default_arguments:a}, set_meta:{arguments:a, b, default_arguments:a, b}, set_name:{arguments:a, default_arguments:a}, set_network_master:{arguments:a, b, default_arguments:a, b = True}, set_owner:{arguments:a, default_arguments:a}, set_pause_mode:{arguments:a, default_arguments:a}, set_physics_process:{arguments:a, default_arguments:a}, set_physics_process_internal:{arguments:a, default_arguments:a}, set_process:{arguments:a, default_arguments:a}, set_process_input:{arguments:a, default_arguments:a}, set_process_internal:{arguments:a, default_arguments:a}, set_process_priority:{arguments:a, default_arguments:a}, set_process_unhandled_input:{arguments:a, default_arguments:a}, set_process_unhandled_key_input:{arguments:a, default_arguments:a}, set_scene_instance_load_placeholder:{arguments:a, default_arguments:a}, set_script:{arguments:a, default_arguments:a}, subtract:{arguments:a, b, default_arguments:a, b}, sum:{arguments:a, default_arguments:a}, to_string:{arguments:, default_arguments:}, tr:{arguments:a, default_arguments:a}, update_configuration_warning:{arguments:, default_arguments:}} != |Dictionary| {_enter_tree:{arguments:, default_arguments:}, _exit_tree:{arguments:, default_arguments:}, _get:{arguments:a, default_arguments:a}, _get_configuration_warning:{arguments:, default_arguments:}, _get_editor_description:{arguments:, default_arguments:}, _get_import_path:{arguments:, default_arguments:}, _get_property_list:{arguments:, default_arguments:}, _init:{arguments:, default_arguments:}, _input:{arguments:a, default_arguments:a}, _notification:{arguments:a, default_arguments:a}, _physics_process:{arguments:a, default_arguments:a}, _process:{arguments:a, default_arguments:a}, _ready:{arguments:, default_arguments:}, _set:{arguments:a, b, default_arguments:a, b}, _set_editor_description:{arguments:a, default_arguments:a}, _set_import_path:{arguments:a, default_arguments:a}, _to_string:{arguments:, default_arguments:}, _unhandled_input:{arguments:a, default_arguments:a}, _unhandled_key_input:{arguments:a, default_arguments:a}, add:{arguments:a, b, default_arguments:a, b}, add_child:{arguments:a, b, default_arguments:a, b = False}, add_child_below_node:{arguments:a, b, c, default_arguments:a, b, c = False}, add_to_group:{arguments:a, b, default_arguments:a, b = False}, add_user_signal:{arguments:a, b, default_arguments:a, b = []}, call:{arguments:a, default_arguments:a}, call_deferred:{arguments:a, default_arguments:a}, callv:{arguments:a, b, default_arguments:a, b}, can_process:{arguments:, default_arguments:}, can_translate_messages:{arguments:, default_arguments:}, connect:{arguments:a, b, c, d, e, default_arguments:a, b, c, d = [], e = 0}, disconnect:{arguments:a, b, c, default_arguments:a, b, c}, divide:{arguments:a, b, default_arguments:a, b}, duplicate:{arguments:a, default_arguments:a = 15}, emit_signal:{arguments:a, default_arguments:a}, find_node:{arguments:a, b, c, default_arguments:a, b = True, c = True}, find_parent:{arguments:a, default_arguments:a}, free:{arguments:, default_arguments:}, get:{arguments:a, default_arguments:a}, get_child:{arguments:a, default_arguments:a}, get_child_count:{arguments:, default_arguments:}, get_children:{arguments:, default_arguments:}, get_class:{arguments:, default_arguments:}, get_custom_multiplayer:{arguments:, default_arguments:}, get_filename:{arguments:, default_arguments:}, get_groups:{arguments:, default_arguments:}, get_incoming_connections:{arguments:, default_arguments:}, get_index:{arguments:, default_arguments:}, get_indexed:{arguments:a, default_arguments:a}, get_instance_id:{arguments:, default_arguments:}, get_meta:{arguments:a, default_arguments:a}, get_meta_list:{arguments:, default_arguments:}, get_method_list:{arguments:, default_arguments:}, get_multiplayer:{arguments:, default_arguments:}, get_name:{arguments:, default_arguments:}, get_network_master:{arguments:, default_arguments:}, get_node:{arguments:a, default_arguments:a}, get_node_and_resource:{arguments:a, default_arguments:a}, get_node_or_null:{arguments:a, default_arguments:a}, get_owner:{arguments:, default_arguments:}, get_parent:{arguments:, default_arguments:}, get_path:{arguments:, default_arguments:}, get_path_to:{arguments:a, default_arguments:a}, get_pause_mode:{arguments:, default_arguments:}, get_physics_process_delta_time:{arguments:, default_arguments:}, get_position_in_parent:{arguments:, default_arguments:}, get_process_delta_time:{arguments:, default_arguments:}, get_process_priority:{arguments:, default_arguments:}, get_property_list:{arguments:, default_arguments:}, get_scene_instance_load_placeholder:{arguments:, default_arguments:}, get_script:{arguments:, default_arguments:}, get_signal_connection_list:{arguments:a, default_arguments:a}, get_signal_list:{arguments:, default_arguments:}, get_tree:{arguments:, default_arguments:}, get_viewport:{arguments:, default_arguments:}, has_meta:{arguments:a, default_arguments:a}, has_method:{arguments:a, default_arguments:a}, has_node:{arguments:a, default_arguments:a}, has_node_and_resource:{arguments:a, default_arguments:a}, has_signal:{arguments:a, default_arguments:a}, has_user_signal:{arguments:a, default_arguments:a}, is_a_parent_of:{arguments:a, default_arguments:a}, is_blocking_signals:{arguments:, default_arguments:}, is_class:{arguments:a, default_arguments:a}, is_connected:{arguments:a, b, c, default_arguments:a, b, c}, is_displayed_folded:{arguments:, default_arguments:}, is_greater_than:{arguments:a, default_arguments:a}, is_in_group:{arguments:a, default_arguments:a}, is_inside_tree:{arguments:, default_arguments:}, is_network_master:{arguments:, default_arguments:}, is_physics_processing:{arguments:, default_arguments:}, is_physics_processing_internal:{arguments:, default_arguments:}, is_processing:{arguments:, default_arguments:}, is_processing_input:{arguments:, default_arguments:}, is_processing_internal:{arguments:, default_arguments:}, is_processing_unhandled_input:{arguments:, default_arguments:}, is_processing_unhandled_key_input:{arguments:, default_arguments:}, is_queued_for_deletion:{arguments:, default_arguments:}, math_fight:{arguments:, default_arguments:}, move_child:{arguments:a, b, default_arguments:a, b}, multiply:{arguments:a, b, default_arguments:a, b}, notification:{arguments:a, b, default_arguments:a, b = False}, pi:{arguments:, default_arguments:}, print_stray_nodes:{arguments:, default_arguments:}, print_tree:{arguments:, default_arguments:}, print_tree_pretty:{arguments:, default_arguments:}, propagate_call:{arguments:a, b, c, default_arguments:a, b = [], c = False}, propagate_notification:{arguments:a, default_arguments:a}, property_list_changed_notify:{arguments:, default_arguments:}, queue_free:{arguments:, default_arguments:}, raise:{arguments:, default_arguments:}, remove_and_skip:{arguments:, default_arguments:}, remove_child:{arguments:a, default_arguments:a}, remove_from_group:{arguments:a, default_arguments:a}, remove_meta:{arguments:a, default_arguments:a}, replace_by:{arguments:a, b, default_arguments:a, b = False}, request_ready:{arguments:, default_arguments:}, rpc:{arguments:a, default_arguments:a}, rpc_config:{arguments:a, b, default_arguments:a, b}, rpc_id:{arguments:a, b, default_arguments:a, b}, rpc_unreliable:{arguments:a, default_arguments:a}, rpc_unreliable_id:{arguments:a, b, default_arguments:a, b}, rset:{arguments:a, b, default_arguments:a, b}, rset_config:{arguments:a, b, default_arguments:a, b}, rset_id:{arguments:a, b, c, default_arguments:a, b, c}, rset_unreliable:{arguments:a, b, default_arguments:a, b}, rset_unreliable_id:{arguments:a, b, c, default_arguments:a, b, c}, set:{arguments:a, b, default_arguments:a, b}, set_block_signals:{arguments:a, default_arguments:a}, set_custom_multiplayer:{arguments:a, default_arguments:a}, set_deferred:{arguments:a, b, default_arguments:a, b}, set_display_folded:{arguments:a, default_arguments:a}, set_filename:{arguments:a, default_arguments:a}, set_indexed:{arguments:a, b, default_arguments:a, b}, set_message_translation:{arguments:a, default_arguments:a}, set_meta:{arguments:a, b, default_arguments:a, b}, set_name:{arguments:a, default_arguments:a}, set_network_master:{arguments:a, b, default_arguments:a, b = True}, set_owner:{arguments:a, default_arguments:a}, set_pause_mode:{arguments:a, default_arguments:a}, set_physics_process:{arguments:a, default_arguments:a}, set_physics_process_internal:{arguments:a, default_arguments:a}, set_process:{arguments:a, default_arguments:a}, set_process_input:{arguments:a, default_arguments:a}, set_process_internal:{arguments:a, default_arguments:a}, set_process_priority:{arguments:a, default_arguments:a}, set_process_unhandled_input:{arguments:a, default_arguments:a}, set_process_unhandled_key_input:{arguments:a, default_arguments:a}, set_scene_instance_load_placeholder:{arguments:a, default_arguments:a}, set_script:{arguments:a, default_arguments:a}, subtract:{arguments:a, b, default_arguments:a, b}, sum:{arguments:a, default_arguments:a}, to_string:{arguments:, default_arguments:}, tr:{arguments:a, default_arguments:a}, update_configuration_warning:{arguments:, default_arguments:}}",
"success": true
} ],
"context": "When we create two of it for the same script",
"fullname": "test_When_we_create_two_of_it_for_the_same_script",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|Object| [Node:1588] is equal to |Object| [Node:1588]",
"context": "Then we get the same double back",
"expected": "|Object| [Node:1588] is equal to |Object| [Node:1588]",
"success": true
} ],
"context": "When we call the double the second time",
"fullname": "test_When_we_call_double_a_second_time_on",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 3,
"path": "res://tests/integration/script_director.test.gd",
"source": {
"containers": [ "res://tests/integration", "res://tests" ],
"method": "",
"path": "res://tests/integration/script_director.test.gd",
"tags": [  ],
"test": ExtResource( 13 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 3
}, {
"context": "Given a Boolean Assertion",
"methods": [ {
"assertions": [ {
"actual": "|bool| True != false",
"context": "",
"expected": "|bool| True == false",
"success": false
} ],
"context": " intentional failure",
"fullname": "test_intentional_failure",
"passed": 0,
"success": false,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then it passes",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When calling asserts.is_true(true)",
"fullname": "test_when_calling_asserts_is_true",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| False == false",
"context": "Then it passes",
"expected": "|bool| False == false",
"success": true
} ],
"context": "When calling asserts.is_false(false)",
"fullname": "test_when_calling_asserts_is_false",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 2,
"path": "res://tests/unit/boolean.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/boolean.test.gd",
"tags": [  ],
"test": ExtResource( 11 ),
"yield_time": 0.0
},
"success": false,
"time_taken": 0.0,
"total": 3
}, {
"context": "Given a Scene Director",
"methods": [ {
"assertions": [ {
"actual": "|Dictionary| {.:[Reference:1418], A:[Reference:1419], A/B:[Reference:1421], C:[Reference:1420], C/D:[Reference:1422]} is not equal to |Dictionary| {.:[Reference:1445], A:[Reference:1446], A/B:[Reference:1448], C:[Reference:1447], C/D:[Reference:1449]}",
"context": "Then they do not share resources",
"expected": "|Dictionary| {.:[Reference:1418], A:[Reference:1419], A/B:[Reference:1421], C:[Reference:1420], C/D:[Reference:1422]} != |Dictionary| {.:[Reference:1445], A:[Reference:1446], A/B:[Reference:1448], C:[Reference:1447], C/D:[Reference:1449]}",
"success": true
} ],
"context": "When we create two of it for the same scene",
"fullname": "test_When_we_create_two_of_it_for_the_same_scene",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 999 is equal to |int| 999",
"context": "Then we get the stubbed return value",
"expected": "|int| 999 is equal to |int| 999",
"success": true
} ],
"context": "When we call a method from a child node that we stubbed",
"fullname": "test_When_we_call_a_method_from_a_child_node_that_we_stubbed",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 9999 is equal to |int| 9999",
"context": "Then we get the stubbed return value",
"expected": "|int| 9999 is equal to |int| 9999",
"success": true
} ],
"context": "When we call a method from the root node that we stubbed",
"fullname": "test_When_we_call_a_method_from_the_root_node_that_we_stubbed",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 99 is equal to |int| 99",
"context": "Then we get the stubbed return value",
"expected": "|int| 99 is equal to |int| 99",
"success": true
} ],
"context": "When we call a method from a grandchild node that we stubbed",
"fullname": "test_When_we_call_a_method_from_a_grandchild_node_that_we_stubbed",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|NodePath| A is equal to |NodePath| A",
"context": "We have the correct NodePath Set",
"expected": "|NodePath| A is equal to |NodePath| A",
"success": true
} ],
"context": "When we add it to the tree it runs",
"fullname": "test_When_we_add_it_to_the_tree_it_runs",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 5,
"path": "res://tests/integration/scene_director.test.gd",
"source": {
"containers": [ "res://tests/integration", "res://tests" ],
"method": "",
"path": "res://tests/integration/scene_director.test.gd",
"tags": [  ],
"test": ExtResource( 4 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 5
}, {
"context": "Given A File Assertion",
"methods": [ {
"assertions": [ {
"actual": "res://somefile.gd does not exist",
"context": "Then it passes",
"expected": "res://somefile.gd does not exist",
"success": true
} ],
"context": "When calling asserts.file_does_not_exist when there is no file",
"fullname": "test_when_calling_file_does_not_exist_when_there_is_no_file",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "res://tests/unit/file.test.gd exists",
"context": "Then it passes",
"expected": "res://tests/unit/file.test.gd exists",
"success": true
} ],
"context": "When calling asserts.file_exists when the file is this suite",
"fullname": "test_when_calling_file_exists_when_file_is_self",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": " does not exist",
"context": "Then it passes",
"expected": " does not exist",
"success": true
} ],
"context": "When calling asserts file does not exist when path is empty",
"fullname": "test_when_calling_file_does_not_exist_when_path_is_empty",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 3,
"path": "res://tests/unit/file.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/file.test.gd",
"tags": [  ],
"test": ExtResource( 3 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 3
}, {
"context": "Given a Null Assertion",
"methods": [ {
"assertions": [ {
"actual": "|null| Null == null",
"context": "Then it passes",
"expected": "|null| Null == null",
"success": true
} ],
"context": "When calling asserts.is_null(null)",
"fullname": "test_when_calling_null_is_null",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|Object| [Node:1694] != null",
"context": "Then it passes",
"expected": "|Object| [Node:1694] != null",
"success": true
} ],
"context": "When calling Node is not null",
"fullname": "test_when_calling_node_is_not_null",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|Object| [Deleted Object] == null",
"context": "A Freed Node is null in Engine 3.2.2 or greater",
"expected": "|Object| [Deleted Object] == null",
"success": true
} ],
"context": "When calling freed object is null",
"fullname": "test_when_calling_freed_object_is_not_null",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 3,
"path": "res://tests/unit/null.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/null.test.gd",
"tags": [  ],
"test": ExtResource( 12 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 3
}, {
"context": "Given an Equality Assertion",
"methods": [ {
"assertions": [ {
"actual": "|int| 1 is equal to |int| 1",
"context": "Then it passes",
"expected": "|int| 1 is equal to |int| 1",
"success": true
} ],
"context": "When calling asserts.is_equal(1, 1)",
"fullname": "test_when_calling_is_equal",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 2 is equal or greater |int| 1",
"context": "Then it passes",
"expected": "|int| 2 is equal or greater |int| 1",
"success": true
} ],
"context": "When calling asserts.is_equal_or_greater_than(2, 1)",
"fullname": "test_when_calling_is_equal_or_greater_than",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 2 is greater than |int| 1",
"context": "Then it passes",
"expected": "|int| 2 is greater than |int| 1",
"success": true
} ],
"context": "When calling asserts.is_greater_than(2, 1)",
"fullname": "test_when_calling_is_greater_than",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 1 is less than |int| 2",
"context": "Then it passes",
"expected": "|int| 1 is less than |int| 2",
"success": true
} ],
"context": "When calling asserts.is_less_than(2, 1)",
"fullname": "test_when_calling_is_less_than",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 5 is not equal to |int| 6",
"context": "Then it passes",
"expected": "|int| 5 != |int| 6",
"success": true
} ],
"context": "When callign asserts.is_not_equal(5, 6)",
"fullname": "test_when_calling_is_not_equal",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 1 is equal or less than |int| 1",
"context": "Then it passes!",
"expected": "|int| 1 is equal or less than |int| 1",
"success": true
} ],
"context": "When calling asserts.is_equal_or_less_than(1, 1)",
"fullname": "test_when_calling_is_equal_or_less_than_with_equal_values",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 1 is equal or greater |int| 1",
"context": "Then it passes",
"expected": "|int| 1 is equal or greater |int| 1",
"success": true
} ],
"context": "When calling asserts.is_equal_or_greater_than(1, 1)",
"fullname": "test_when_calling_is_equal_or_greater_than_with_equal_values",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 7,
"path": "res://tests/unit/equality.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/equality.test.gd",
"tags": [  ],
"test": ExtResource( 8 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 7
}, {
"context": "Given A Range Assertion",
"methods": [ {
"assertions": [ {
"actual": "10 is not in range(0, 10)",
"context": "Then it passes",
"expected": "10 is not in range(0, 10)",
"success": true
} ],
"context": "When calling is (10) not in range (in range(0, 10)",
"fullname": "test_when_calling_is_not_in_range",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "0 is in range(0, 10)",
"context": "Then it passes",
"expected": "0 is in range(0, 10)",
"success": true
} ],
"context": "When calling is (0) in range(0, 10)",
"fullname": "test_when_calling_is_in_range",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 2,
"path": "res://tests/unit/range.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/range.test.gd",
"tags": [  ],
"test": ExtResource( 15 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 2
}, {
"context": "Dummy Passing Test",
"methods": [ {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Passing!",
"expected": "|bool| True == true",
"success": true
} ],
"context": "This method passes",
"fullname": "test_this_method_passes",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 1,
"path": "res://tests/unit/suite.test.gd.DummyOne",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/suite.test.gd.DummyOne",
"tags": [  ],
"test": SubResource( 21 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 1
}, {
"context": "Dummy Test 2",
"methods": [ {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Passing!",
"expected": "|bool| True == true",
"success": true
} ],
"context": "This method passes",
"fullname": "test_this_method_passes",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 1,
"path": "res://tests/unit/suite.test.gd.DummyTwo",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/suite.test.gd.DummyTwo",
"tags": [  ],
"test": SubResource( 22 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 1
}, {
"context": "Given the Addition Operator",
"methods": [ {
"assertions": [ {
"actual": "|int| 4 is equal to |int| 4",
"context": "",
"expected": "|int| 4 is equal to |int| 4",
"success": true
} ],
"context": "When we add 2 to 2 we get 4",
"fullname": "test_add",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 8 is equal to |int| 8",
"context": "",
"expected": "|int| 8 is equal to |int| 8",
"success": true
} ],
"context": "When we add 5 to 3 we get 8",
"fullname": "test_add",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 13 is equal to |int| 13",
"context": "",
"expected": "|int| 13 is equal to |int| 13",
"success": true
} ],
"context": "When we add 7 to 6 we get 13",
"fullname": "test_add",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 0 is equal to |int| 0",
"context": "",
"expected": "|int| 0 is equal to |int| 0",
"success": true
} ],
"context": "When we subtract 2 from 2 we get 0",
"fullname": "test_subtract",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 2 is equal to |int| 2",
"context": "",
"expected": "|int| 2 is equal to |int| 2",
"success": true
} ],
"context": "When we subtract 5 from 3 we get 2",
"fullname": "test_subtract",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 1 is equal to |int| 1",
"context": "",
"expected": "|int| 1 is equal to |int| 1",
"success": true
} ],
"context": "When we subtract 7 from 6 we get 1",
"fullname": "test_subtract",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 6,
"path": "res://tests/unit/parameters.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/parameters.test.gd",
"tags": [  ],
"test": ExtResource( 16 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 6
}, {
"context": "Given a String Assertion",
"methods": [ {
"assertions": [ {
"actual": "lorem impsum ends with impsum",
"context": "Then it passes",
"expected": "lorem impsum ends with impsum",
"success": true
} ],
"context": "When calling asserts.string_ends_with('impsum', 'lorem impsum')",
"fullname": "test_when_calling_string_ends_with",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "impsum does not end with lorem",
"context": "Then it passes",
"expected": "impsum does not end with lorem",
"success": true
} ],
"context": "When calling asserts.string_does_not_end_with('lorem', 'impsum')",
"fullname": "test_when_calling_string_does_not_end_with",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "lorem impsum begins with lorem",
"context": "Then it passes",
"expected": "lorem impsum begins with lorem",
"success": true
} ],
"context": "When calling asserts.string_begins_with('lorem', 'lorem impsum')",
"fullname": "test_when_calling_string_begins_with",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "impsum does not contain beem im",
"context": "Then it passes",
"expected": "impsum does not contain beem im",
"success": true
} ],
"context": "When calling asserts.string_does_not_contain('em im', 'impsum')",
"fullname": "test_when_calling_string_does_not_contain",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "impsum does not begin with bleh lorem",
"context": "Then it passes",
"expected": "impsum does not begin with bleh lorem",
"success": true
} ],
"context": "When calling asserts.string_does_not_begin_with('lorem', 'impsum')",
"fullname": "test_when_calling_string_does_not_begin_with",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "lorem impsum contains em im",
"context": "Then it passes",
"expected": "lorem impsum contains em im",
"success": true
} ],
"context": "When calling asserts.string_contains('em im', 'lorem impsum')",
"fullname": "test_when_calling_string_contains",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 6,
"path": "res://tests/unit/string.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/string.test.gd",
"tags": [  ],
"test": ExtResource( 9 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 6
}, {
"context": "Given a Test Script",
"methods": [ {
"assertions": [ {
"actual": "|bool| True == true",
"context": "if the test didn't break this works",
"expected": "|bool| True == true",
"success": true
} ],
"context": " we can omit describe",
"fullname": "test_we_can_omit_describe",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 10 is greater than |int| 1",
"context": "We get an array of multiple values back",
"expected": "|int| 10 is greater than |int| 1",
"success": true
}, {
"actual": "|int| 0 is not equal to |int| 9",
"context": "With different values",
"expected": "|int| 0 != |int| 9",
"success": true
}, {
"actual": "|int| 10 is greater than |int| 1",
"context": "And we can track multiple properties",
"expected": "|int| 10 is greater than |int| 1",
"success": true
} ],
"context": "When we record properties",
"fullname": "test_we_can_record_properties",
"passed": 3,
"success": true,
"time": 0.0,
"total": 3
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|int| 2 is equal to |int| 2",
"context": "",
"expected": "|int| 2 is equal to |int| 2",
"success": true
} ],
"context": " when we omit context we can see expected and got under method",
"fullname": "test_when_we_omit_context_we_can_see_expected_and_got_under_method",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
} ],
"passed": 3,
"path": "res://tests/unit/test.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/test.test.gd",
"tags": [  ],
"test": ExtResource( 19 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 3
}, {
"context": "Given a Signal Watcher",
"methods": [ {
"assertions": [ {
"actual": "signal: example was emitted from [Node:1816]",
"context": "Then it captures the emitted signal",
"expected": "signal: example was emitted from [Node:1816]",
"success": true
} ],
"context": "When we watch and emit a signal",
"fullname": "test_When_we_watch_and_emit_a_signal",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Signal: example was emitted from [Node:1816] with arguments: [1, 20, 5]",
"context": "Then it captures any arguments that where passed when the signal was emitted",
"expected": "Signal: example was emitted from [Node:1816] with arguments: [1, 20, 5]",
"success": true
} ],
"context": "When we watch a signal from an object with no bound variables",
"fullname": "test_When_we_watch_a_signal_from_an_object_with_no_bound_variables",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Signal: example was not emitted from [Node:1816]",
"context": "Then it does not capture the non-emitted signal",
"expected": "Signal: example was not emitted from [Node:1816]",
"success": true
} ],
"context": "When we watch and do not emit a signal",
"fullname": "test_When_we_watch_and_do_not_emit_a_signal",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "signal: multiple was emitted from [Node:1816] 2",
"context": "Then we can track how many times we emitted it",
"expected": "signal: multiple was emitted from [Node:1816] 2",
"success": true
} ],
"context": "When we watch and signal and emit it multiple times",
"fullname": "test_When_we_watch_a_signal_and_emit_it_multiple_times",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 4,
"path": "res://tests/unit/watcher.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/watcher.test.gd",
"tags": [  ],
"test": ExtResource( 17 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 4
}, {
"context": "Given a Test Double",
"methods": [ {
"assertions": [ {
"actual": "|int| 9999 is equal to |int| 9999",
"context": "Then it returns the corresponding value when the pattern matches",
"expected": "|int| 9999 is equal to |int| 9999",
"success": true
} ],
"context": "When we call a method that was stubbed with an argument pattern that includes a non-primitive object",
"fullname": "test_When_we_call_a_method_that_was_stubbed_with_an_argument_pattern_that_includes_a_non_primitive_object",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 9999 is equal to |int| 9999",
"context": "Then it returns the corresponding value when the partial pattern matches",
"expected": "|int| 9999 is equal to |int| 9999",
"success": true
} ],
"context": "When we call a method that was stubbed with a partial (ie using any()) argument pattern",
"fullname": "test_When_we_call_a_method_that_was_stubbed_with_a_partial_argument_pattern",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|null| Null == null",
"context": "Then we get the stubbed value back",
"expected": "|null| Null == null",
"success": true
} ],
"context": "When we stub a method of a doubled inner class",
"fullname": "test_When_we_stub_a_method_of_a_double_inner_class",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|String| Jackie is equal to |String| Jackie",
"context": "Then we can double the object successfully",
"expected": "|String| Jackie is equal to |String| Jackie",
"success": true
} ],
"context": "When we pass in dependecies on direct",
"fullname": "test_When_we_pass_in_deps_on_direct",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 99 is equal to |int| 99",
"context": "Then it returns a value",
"expected": "|int| 99 is equal to |int| 99",
"success": true
} ],
"context": "When we pass a funcref as a subcall that returns",
"fullname": "test_When_we_pass_a_funcref_as_a_subcall_that_returns_a_value",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 99 is equal to |int| 99",
"context": "Then it affects the state of the double",
"expected": "|int| 99 is equal to |int| 99",
"success": true
} ],
"context": "When we pass a funcref as a subcall",
"fullname": "test_When_we_pass_a_funcref_as_a_subcall",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|Array| [10, 5] is equal to |Array| [10, 5]",
"context": "Then it returns a value",
"expected": "|Array| [10, 5] is equal to |Array| [10, 5]",
"success": true
} ],
"context": "When we pass an Object with a call_func function",
"fullname": "test_When_we_pass_an_object_with_callfunc_method_as_a_subcall",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 4 is equal to |int| 4",
"context": "Then it calls its super implementation by default",
"expected": "|int| 4 is equal to |int| 4",
"success": true
}, {
"actual": "|int| 9999 is equal to |int| 9999",
"context": "Then it does not call its super implementation when arguments patterns match a different return value",
"expected": "|int| 9999 is equal to |int| 9999",
"success": true
} ],
"context": "When we call a method that we stubbed to call its super implementation by default",
"fullname": "test_When_we_call_a_method_that_we_stubbed_to_call_its_super_implementation_by_default",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|int| 4 is equal to |int| 4",
"context": "Then we get the correct result",
"expected": "|int| 4 is equal to |int| 4",
"success": true
} ],
"context": "When we call an add(x, y) method that we haven't directed",
"fullname": "test_When_we_call_an_add_method_that_we_have_not_directed",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then it returns true",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we call a method that we have stubbed to return true",
"fullname": "test_When_we_call_a_method_that_we_have_stubbed_to_return_true",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|Object| [Node:1782] is equal to |Object| [Node:1782]",
"context": "Then it returns that same node",
"expected": "|Object| [Node:1782] is equal to |Object| [Node:1782]",
"success": true
} ],
"context": "When we call a method that we have stubbed to return a node",
"fullname": "test_When_we_call_a_method_that_we_have_stubbed_to_return_a_node",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|float| 6.283185 is equal to |float| 6.283185",
"context": "Then we can call the static methods of that inner double",
"expected": "|float| 6.283185 is equal to |float| 6.283185",
"success": true
} ],
"context": "When we add an doubled inner class to it",
"fullname": "test_When_we_add_a_doubled_inner_class_to_it",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "(1, 1) is builtin: Vector2",
"context": "Then we can call methods on it",
"expected": "(1, 1) is builtin: Vector2",
"success": true
} ],
"context": "When we double an inner class",
"fullname": "test_When_we_double_an_inner_class",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 100 is equal to |int| 100",
"context": "Then it returns the default stubbed value when the arguments don't match any pattern",
"expected": "|int| 100 is equal to |int| 100",
"success": true
}, {
"actual": "|int| 1000 is equal to |int| 1000",
"context": "Then it returns the the corresponding value to the pattern the arguments matched",
"expected": "|int| 1000 is equal to |int| 1000",
"success": true
} ],
"context": "When we call a method that was stubbed to return different values based on argument patterns",
"fullname": "test_When_we_call_a_method_that_was_stubbed_to_return_different_values_based_on_argument_patterns",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "add was called",
"context": "Then we can see that it was called at least once",
"expected": "add was called",
"success": true
} ],
"context": "When we call a method that we are spying on",
"fullname": "test_When_we_call_a_method_that_we_are_spying_on",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "method: add was called with arguments: [10, 10]",
"context": "Then we can see that it was called with those arguments",
"expected": "method: add was called with arguments: [10, 10]",
"success": true
} ],
"context": "When we pass arguments to a method call that we are spying on",
"fullname": "test_When_we_pass_arguments_to_a_method_call_that_we_are_spying_on",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| True is equal to |bool| True",
"context": "Then we can call it",
"expected": "|bool| True is equal to |bool| True",
"success": true
} ],
"context": "When we stubbed a keyworded method by passing in the correct keyword",
"fullname": "test_When_we_stubbed_a_keyword_method_by_passing_in_the_correct_keyword",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|String| Jackie is equal to |String| Jackie",
"context": "Then we can double the object successfully",
"expected": "|String| Jackie is equal to |String| Jackie",
"success": true
} ],
"context": "When we pass in dependecies on double",
"fullname": "test_When_we_pass_in_deps_on_double",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|null| Null == null",
"context": "Then we get null",
"expected": "|null| Null == null",
"success": true
} ],
"context": "When we call a method that we have dummied",
"fullname": "test_When_we_call_a_method_that_we_have_dummied",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 19,
"path": "res://tests/integration/test_double.test.gd",
"source": {
"containers": [ "res://tests/integration", "res://tests" ],
"method": "",
"path": "res://tests/integration/test_double.test.gd",
"tags": [  ],
"test": ExtResource( 14 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 19
}, {
"context": "Default Args",
"methods": [ {
"assertions": [ {
"actual": "|bool| True == true",
"context": "If this method can be reached then we have doubled a script with default argument(s) properly!",
"expected": "|bool| True == true",
"success": true
} ],
"context": " default arguments of interpolate property",
"fullname": "test_default_arguments_of_interpolate_property",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 1,
"path": "res://tests/integration/default_args.test.gd",
"source": {
"containers": [ "res://tests/integration", "res://tests" ],
"method": "",
"path": "res://tests/integration/default_args.test.gd",
"tags": [  ],
"test": ExtResource( 10 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 1
}, {
"context": "Given an Object Assertion",
"methods": [ {
"assertions": [ {
"actual": "[Node:1715] is not freed",
"context": "Then it passes",
"expected": "[Node:1715] is not freed",
"success": true
} ],
"context": "When calling asserts.is_not_freed(unfreed_object)",
"fullname": "test_when_calling_unfreed_object_is_not_freed",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is freed from memory",
"context": "Then it passes",
"expected": "Null is freed from memory",
"success": true
} ],
"context": "When calling asserts.is_freed(freed_object",
"fullname": "test_when_calling_freed_object_is_freed",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:1700] does not have meta: bad_meta",
"context": "Then it passes",
"expected": "[Node:1700] does not have meta: bad_meta",
"success": true
} ],
"context": "When calling asserts.object_does_not_have_meta()",
"fullname": "test_when_calling_does_not_have_meta",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:1700] has meta: dummy",
"context": "Then it passes",
"expected": "[Node:1700] has meta: dummy",
"success": true
}, {
"actual": "[Node:1700] has meta: dummy",
"context": "Then it passes",
"expected": "[Node:1700] has meta: dummy",
"success": true
} ],
"context": "When calling asserts.object_has_meta() after adding metadata",
"fullname": "test_when_calling_has_meta_after_adding_metadata",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "[Node:1776] is queued for deletion",
"context": "Then it passes",
"expected": "[Node:1776] is queued for deletion",
"success": true
} ],
"context": "When calling asserts.object_is_queued for deletion after calling queue_free",
"fullname": "test_when_calling_obj_is_queued_for_deletion_after_calling_queue_free",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:1700].builtin_dummy is connected to [Node:1700].title",
"context": "Then it passes",
"expected": "[Node:1700].builtin_dummy is connected to [Node:1700].title",
"success": true
} ],
"context": "When calling asserts object is connected with a valid connection",
"fullname": "test_when_calling_obj_is_connected_with_a_real_connection",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:1700].builtin_dummy is not connected to [Node:1700].title",
"context": "Then it passes",
"expected": "[Node:1700].builtin_dummy is not connected to [Node:1700].title",
"success": true
} ],
"context": "When calling asserts object is not connected with an invalid connection",
"fullname": "test_when_calling_obj_is_not_connected_with_an_invalid_connection",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:1824] is blocking signals",
"context": "Then it passes",
"expected": "[Node:1824] is blocking signals",
"success": true
} ],
"context": "When calling is blocking signals while blocking signals",
"fullname": "test_is_blocking_signals",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:1839] is not blocking signals",
"context": "Then it passes",
"expected": "[Node:1839] is not blocking signals",
"success": true
} ],
"context": "When calling is not blocking signals while not blocking signals",
"fullname": "test_is_not_blocking_signals",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:1700] does not have meta: confusing",
"context": "Then it passes",
"expected": "[Node:1700] does not have meta: confusing",
"success": true
} ],
"context": "When calling asserts.object_has_meta with real key but null val",
"fullname": "test_when_calling_does_not_have_meta_real_key_null_value_pair",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:1700] has user signal: dummy_signal",
"context": "Then it passes",
"expected": "[Node:1700] has user signal: dummy_signal",
"success": true
} ],
"context": "When calling obj_has_user_signal after adding a signal",
"fullname": "test_when_calling_has_user_signal_after_adding_a_signal",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:1700] does not have user signal: false_signal",
"context": "Then it passes",
"expected": "[Node:1700] does not have user signal: false_signal",
"success": true
} ],
"context": "When calling obj_does_not_have_user_signal with fake signal",
"fullname": "test_when_calling_does_not_have_user_signal",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:1700] does not have user signal: builtin_dummy",
"context": "Then it passes",
"expected": "[Node:1700] does not have user signal: builtin_dummy",
"success": true
} ],
"context": "When calling does not have user signal with class signal",
"fullname": "test_when_calling_does_not_have_user_signal_with_class_signal_constant",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:1700] has method: title",
"context": "Then it passes",
"expected": "[Node:1700] has method: title",
"success": true
} ],
"context": "When calling has_method('title')",
"fullname": "test_when_calling_has_method_title",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:1925] is not queued for deletion",
"context": "Then it passes",
"expected": "[Node:1925] is not queued for deletion",
"success": true
} ],
"context": "When calling asserts.object_is_not_for_queued_deletion after not calling queue free()",
"fullname": "test_when_calling_obj_is_not_for_queued_deletion_after_not_calling_queue_free",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 15,
"path": "res://tests/unit/object.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/object.test.gd",
"tags": [  ],
"test": ExtResource( 7 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 15
}, {
"context": "Given a Boolean Assertion",
"methods": [ {
"assertions": [ {
"actual": "|bool| True != false",
"context": "",
"expected": "|bool| True == false",
"success": false
} ],
"context": " intentional failure",
"fullname": "test_intentional_failure",
"passed": 0,
"success": false,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then it passes",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When calling asserts.is_true(true)",
"fullname": "test_when_calling_asserts_is_true",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| False == false",
"context": "Then it passes",
"expected": "|bool| False == false",
"success": true
} ],
"context": "When calling asserts.is_false(false)",
"fullname": "test_when_calling_asserts_is_false",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 2,
"path": "res://tests/integration/boolean.test.gd",
"source": {
"containers": [ "res://tests/integration", "res://tests" ],
"method": "",
"path": "res://tests/integration/boolean.test.gd",
"tags": [  ],
"test": ExtResource( 20 ),
"yield_time": 0.0
},
"success": false,
"time_taken": 0.0,
"total": 3
}, {
"context": "Given an Is Not Instance of class/type Assertion",
"methods": [ {
"assertions": [ {
"actual": "Null is not builtin: AABB",
"context": "Then it passes",
"expected": "Null is not builtin: AABB",
"success": true
} ],
"context": "when calling asserts.is_not_AABB(null)",
"fullname": "test_when_calling_is_not_AABB",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Basis",
"context": "Then it passes",
"expected": "Null is not builtin: Basis",
"success": true
} ],
"context": "when calling asserts.is_not_Basis(null)",
"fullname": "test_when_calling_is_not_Basis",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Array",
"context": "Then it passes",
"expected": "Null is not builtin: Array",
"success": true
} ],
"context": "when calling asserts.is_not_Array(null)",
"fullname": "test_when_calling_is_not_Array",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: RID",
"context": "Then it passes",
"expected": "Null is not builtin: RID",
"success": true
} ],
"context": "when calling asserts.is_not_RID(null)",
"fullname": "test_when_calling_is_not_RID",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Vector2",
"context": "Then it passes",
"expected": "Null is not builtin: Vector2",
"success": true
} ],
"context": "when calling asserts.is_not_Vector2(null)",
"fullname": "test_when_calling_is_not_Vector2",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Color",
"context": "Then it passes",
"expected": "Null is not builtin: Color",
"success": true
} ],
"context": "when calling asserts.is_not_Color(null)",
"fullname": "test_when_calling_is_not_Color",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Object",
"context": "Then it passes",
"expected": "Null is not builtin: Object",
"success": true
} ],
"context": "when calling asserts.is_not_Object(null)",
"fullname": "test_when_calling_is_not_Object",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Rect2",
"context": "Then it passes",
"expected": "Null is not builtin: Rect2",
"success": true
} ],
"context": "when calling asserts.is_not_Rect2(null)",
"fullname": "test_when_calling_is_not_Rect2",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: PoolVector2Array",
"context": "Then it passes",
"expected": "Null is not builtin: PoolVector2Array",
"success": true
} ],
"context": "when calling asserts.is_not_PoolVector2Array(null)",
"fullname": "test_when_calling_is_not_PoolVector2Array",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: int",
"context": "Then it passes",
"expected": "Null is not builtin: int",
"success": true
} ],
"context": "when calling asserts.is_not_int(null)",
"fullname": "test_when_calling_is_not_int",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: PoolIntArray",
"context": "Then it passes",
"expected": "Null is not builtin: PoolIntArray",
"success": true
} ],
"context": "when calling asserts.is_not_PoolIntArray(null)",
"fullname": "test_when_calling_is_not_PoolIntArray",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: NodePath",
"context": "Then it passes",
"expected": "Null is not builtin: NodePath",
"success": true
} ],
"context": "when calling asserts.is_not_NodePath(null)",
"fullname": "test_when_calling_is_not_NodePath",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Plane",
"context": "Then it passes",
"expected": "Null is not builtin: Plane",
"success": true
} ],
"context": "when calling asserts.is_not_Plane(null)",
"fullname": "test_when_calling_is_not_Plane",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: PoolVector3Array",
"context": "Then it passes",
"expected": "Null is not builtin: PoolVector3Array",
"success": true
} ],
"context": "when calling asserts.is_not_PoolVector3Array(null)",
"fullname": "test_when_calling_is_not_PoolVector3Array",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Transform",
"context": "Then it passes",
"expected": "Null is not builtin: Transform",
"success": true
} ],
"context": "when calling asserts.is_not_Transform(null)",
"fullname": "test_when_calling_is_not_Transform",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Transform2D",
"context": "Then it passes",
"expected": "Null is not builtin: Transform2D",
"success": true
} ],
"context": "when calling asserts.is_not_Transform2D(null)",
"fullname": "test_when_calling_is_not_Transform2D",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: bool",
"context": "Then it passes",
"expected": "Null is not builtin: bool",
"success": true
} ],
"context": "when calling asserts.is_not_bool(null)",
"fullname": "test_when_calling_is_not_bool",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: PoolColorArray",
"context": "Then it passes",
"expected": "Null is not builtin: PoolColorArray",
"success": true
} ],
"context": "when calling asserts.is_not_PoolColorArray(null)",
"fullname": "test_when_calling_is_not_PoolColorArray",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: PoolRealArray",
"context": "Then it passes",
"expected": "Null is not builtin: PoolRealArray",
"success": true
} ],
"context": "when calling asserts.is_not_PoolRealArray(null)",
"fullname": "test_when_calling_is_not_PoolRealArray",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: PoolStringArray",
"context": "Then it passes",
"expected": "Null is not builtin: PoolStringArray",
"success": true
} ],
"context": "when calling asserts.is_not_PoolStringArray(null)",
"fullname": "test_when_calling_is_not_PoolStringArray",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Quat",
"context": "Then it passes",
"expected": "Null is not builtin: Quat",
"success": true
} ],
"context": "when calling asserts.is_not_Quat(null)",
"fullname": "test_when_calling_is_not_Quat",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Dictionary",
"context": "Then it passes",
"expected": "Null is not builtin: Dictionary",
"success": true
} ],
"context": "when calling asserts.is_not_Dictionary(null)",
"fullname": "test_when_calling_is_not_Dictionary",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Vector3",
"context": "Then it passes",
"expected": "Null is not builtin: Vector3",
"success": true
} ],
"context": "when calling asserts.is_not_Vector3(null)",
"fullname": "test_when_calling_is_not_Vector3",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: PoolByteArray",
"context": "Then it passes",
"expected": "Null is not builtin: PoolByteArray",
"success": true
} ],
"context": "when calling asserts.is_not_PoolByteArray(null)",
"fullname": "test_when_calling_is_not_PoolByteArray",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: float",
"context": "Then it passes",
"expected": "Null is not builtin: float",
"success": true
} ],
"context": "when calling asserts.is_not_float(null)",
"fullname": "test_when_calling_is_not_float",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: String",
"context": "Then it passes",
"expected": "Null is not builtin: String",
"success": true
} ],
"context": "when calling asserts.is_not_String(null)",
"fullname": "test_when_calling_is_not_String",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 26,
"path": "res://tests/unit/is_not_instance.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/is_not_instance.test.gd",
"tags": [  ],
"test": ExtResource( 2 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 26
}, {
"context": "Given an Is Instance of class/type Assertion",
"methods": [ {
"assertions": [ {
"actual": "|Plane| 0, 0, 0, 0 != null",
"context": "plane is not null",
"expected": "|Plane| 0, 0, 0, 0 != null",
"success": true
}, {
"actual": "0, 0, 0, 0 is builtin: Plane",
"context": "then it passes",
"expected": "0, 0, 0, 0 is builtin: Plane",
"success": true
} ],
"context": "When calling asserts.is_Plane(plane: Plane())",
"fullname": "test_when_calling_is_Plane",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|AABB| 0, 0, 0 - 0, 0, 0 != null",
"context": "AABB is not null",
"expected": "|AABB| 0, 0, 0 - 0, 0, 0 != null",
"success": true
}, {
"actual": "0, 0, 0 - 0, 0, 0 is builtin: AABB",
"context": "Then it passes",
"expected": "0, 0, 0 - 0, 0, 0 is builtin: AABB",
"success": true
} ],
"context": "When calling asserts.is_AABB(aabb: AABB)",
"fullname": "test_when_calling_is_AABB",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "{} is builtin: Dictionary",
"context": "Then it passes",
"expected": "{} is builtin: Dictionary",
"success": true
} ],
"context": "When calling asserts.is_Dictionary({})",
"fullname": "test_when_calling_is_Dictionary",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|PoolVector2Array| [] != null",
"context": "vec2s is not null",
"expected": "|PoolVector2Array| [] != null",
"success": true
}, {
"actual": "[] is builtin: PoolVector2Array",
"context": "Then it passes",
"expected": "[] is builtin: PoolVector2Array",
"success": true
} ],
"context": "When calling is asserts.is_PoolVector2Array(vec2s: PoolVector2Array)",
"fullname": "test_when_calling_is_PoolVector2Array",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|Rect2| (0, 0, 0, 0) != null",
"context": "rect2 is not null",
"expected": "|Rect2| (0, 0, 0, 0) != null",
"success": true
}, {
"actual": "(0, 0, 0, 0) is builtin: Rect2",
"context": "Then it passes",
"expected": "(0, 0, 0, 0) is builtin: Rect2",
"success": true
} ],
"context": "When calling asserts.is_Rect2(rect2: Rect2)",
"fullname": "test_when_calling_is_Rect2",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|PoolVector3Array| [] != null",
"context": "vec3s is not null",
"expected": "|PoolVector3Array| [] != null",
"success": true
}, {
"actual": "[] is builtin: PoolVector3Array",
"context": "Then it passes",
"expected": "[] is builtin: PoolVector3Array",
"success": true
} ],
"context": "When calling is asserts.is_PoolVector3Array(vec3s: PoolVector3Array)",
"fullname": "test_when_calling_is_PoolVector3Array",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|PoolRealArray| [] != null",
"context": "reals is not null",
"expected": "|PoolRealArray| [] != null",
"success": true
}, {
"actual": "[] is builtin: PoolRealArray",
"context": "Then it passes",
"expected": "[] is builtin: PoolRealArray",
"success": true
} ],
"context": "When calling is asserts.is_PoolRealArray(reals: PoolRealArray)",
"fullname": "test_when_calling_is_PoolRealArray",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|Quat| (0, 0, 0, 1) != null",
"context": "quat is not null",
"expected": "|Quat| (0, 0, 0, 1) != null",
"success": true
}, {
"actual": "(0, 0, 0, 1) is builtin: Quat",
"context": "Then it passes",
"expected": "(0, 0, 0, 1) is builtin: Quat",
"success": true
} ],
"context": "When calling asserts.is_Quat(quat: Quat)",
"fullname": "test_when_calling_is_Quat",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|RID| [RID] != null",
"context": "rid is not null",
"expected": "|RID| [RID] != null",
"success": true
}, {
"actual": "[RID] is builtin: RID",
"context": "Then it passes",
"expected": "[RID] is builtin: RID",
"success": true
} ],
"context": "When calling asserts.is_RID(rid: RID)",
"fullname": "test_when_calling_is_RID",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|Color| 0,0,0,1 != null",
"context": "color is not null",
"expected": "|Color| 0,0,0,1 != null",
"success": true
}, {
"actual": "0,0,0,1 is builtin: Color",
"context": "Then it passes",
"expected": "0,0,0,1 is builtin: Color",
"success": true
} ],
"context": "When calling asserts.is_color(color: Color)",
"fullname": "test_when_calling_is_Color",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|String|  != null",
"context": "strs is not null",
"expected": "|String|  != null",
"success": true
}, {
"actual": " is builtin: String",
"context": "Then it passes",
"expected": " is builtin: String",
"success": true
} ],
"context": "When calling asserts.is_string(strs: String)",
"fullname": "test_when_calling_is_string",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|Transform| 1, 0, 0, 0, 1, 0, 0, 0, 1 - 0, 0, 0 != null",
"context": "transform is not null",
"expected": "|Transform| 1, 0, 0, 0, 1, 0, 0, 0, 1 - 0, 0, 0 != null",
"success": true
}, {
"actual": "1, 0, 0, 0, 1, 0, 0, 0, 1 - 0, 0, 0 is builtin: Transform",
"context": "Then it passes",
"expected": "1, 0, 0, 0, 1, 0, 0, 0, 1 - 0, 0, 0 is builtin: Transform",
"success": true
} ],
"context": "When calling asserts.is_Transform(transform: Transform)",
"fullname": "test_when_calling_is_Transform",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|Transform2D| ((1, 0), (0, 1), (0, 0)) != null",
"context": "transform2D is not null",
"expected": "|Transform2D| ((1, 0), (0, 1), (0, 0)) != null",
"success": true
}, {
"actual": "((1, 0), (0, 1), (0, 0)) is builtin: Transform2D",
"context": "Then it passes",
"expected": "((1, 0), (0, 1), (0, 0)) is builtin: Transform2D",
"success": true
} ],
"context": "When calling asserts.is_Transform(transform2D: Transform2D)",
"fullname": "test_when_calling_is_Transform2D",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|Array| [] != null",
"context": "array is not null",
"expected": "|Array| [] != null",
"success": true
}, {
"actual": "[] is builtin: Array",
"context": "Then it passes",
"expected": "[] is builtin: Array",
"success": true
} ],
"context": "When calling asserts.is_Array(array: Array)",
"fullname": "test_when_calling_is_Array",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|Vector2| (0, 0) != null",
"context": "vec2 is not null",
"expected": "|Vector2| (0, 0) != null",
"success": true
}, {
"actual": "(0, 0) is builtin: Vector2",
"context": "Then it passes",
"expected": "(0, 0) is builtin: Vector2",
"success": true
} ],
"context": "When calling asserts.is_Vector2(vec2)",
"fullname": "test_when_calling_is_Vector2",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|PoolStringArray| [] != null",
"context": "strs is not null",
"expected": "|PoolStringArray| [] != null",
"success": true
}, {
"actual": "[] is builtin: PoolStringArray",
"context": "Then it passes",
"expected": "[] is builtin: PoolStringArray",
"success": true
} ],
"context": "When calling is asserts.is_PoolStringArray(strs: PoolStringArray)",
"fullname": "test_when_calling_is_PoolStringArray",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|NodePath| . != null",
"context": "@'Parent/Child' is not null",
"expected": "|NodePath| . != null",
"success": true
}, {
"actual": ". is builtin: NodePath",
"context": "Then it passes",
"expected": ". is builtin: NodePath",
"success": true
} ],
"context": "When calling asserts.is_NodePath(@'Parent/Child')",
"fullname": "test_when_calling_is_NodePath",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|Object| [Node:1931] != null",
"context": "node is not null",
"expected": "|Object| [Node:1931] != null",
"success": true
}, {
"actual": "[Node:1931] is builtin: Object",
"context": "An instance of node is an Object",
"expected": "[Node:1931] is builtin: Object",
"success": true
} ],
"context": "When calling is asserts.object(node: Node)",
"fullname": "test_when_calling_is_object",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|PoolByteArray| [PoolByteArray] != null",
"context": "bytes is not null",
"expected": "|PoolByteArray| [PoolByteArray] != null",
"success": true
}, {
"actual": "[PoolByteArray] is builtin: PoolByteArray",
"context": "Then it passes",
"expected": "[PoolByteArray] is builtin: PoolByteArray",
"success": true
} ],
"context": "When calling asserts.is_PoolByteArray(bytes: PoolByteArray)",
"fullname": "test_when_calling_is_PoolByteArray",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|PoolIntArray| [] != null",
"context": "ints is not null",
"expected": "|PoolIntArray| [] != null",
"success": true
}, {
"actual": "[] is builtin: PoolIntArray",
"context": "Then it passes",
"expected": "[] is builtin: PoolIntArray",
"success": true
} ],
"context": "When calling asserts.is_PoolIntArray(ints: PoolIntArray)",
"fullname": "test_when_calling_is_PoolIntArray",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "1 is builtin: int",
"context": "Then it passes",
"expected": "1 is builtin: int",
"success": true
} ],
"context": "When callign asserts.is_int(1)",
"fullname": "test_when_calling_is_int",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|Vector3| (0, 0, 0) != null",
"context": "vec3 is not null",
"expected": "|Vector3| (0, 0, 0) != null",
"success": true
}, {
"actual": "(0, 0, 0) is builtin: Vector3",
"context": "Then it passes",
"expected": "(0, 0, 0) is builtin: Vector3",
"success": true
} ],
"context": "When calling asserts.is_Vector3(vec3: Vector3",
"fullname": "test_when_calling_is_Vector3",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "1 is builtin: float",
"context": "Then it passes",
"expected": "1 is builtin: float",
"success": true
} ],
"context": "When calling asserts.is_float(1.0)",
"fullname": "test_when_calling_is_float",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|PoolColorArray| [PoolColorArray] != null",
"context": "colors is not null",
"expected": "|PoolColorArray| [PoolColorArray] != null",
"success": true
}, {
"actual": "[PoolColorArray] is builtin: PoolColorArray",
"context": "Then it passes",
"expected": "[PoolColorArray] is builtin: PoolColorArray",
"success": true
} ],
"context": "When calling asserts.is_PoolColorArray(colors: PoolColorArray)",
"fullname": "test_when_calling_is_PoolColorArray",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "True is builtin: bool",
"context": "Then it passes",
"expected": "True is builtin: bool",
"success": true
} ],
"context": "When calling asserts.is_bool(true)",
"fullname": "test_when_calling_is_bool",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|Basis| ((1, 0, 0), (0, 1, 0), (0, 0, 1)) != null",
"context": "basis is not null",
"expected": "|Basis| ((1, 0, 0), (0, 1, 0), (0, 0, 1)) != null",
"success": true
}, {
"actual": "((1, 0, 0), (0, 1, 0), (0, 0, 1)) is builtin: Basis",
"context": "Then it passes",
"expected": "((1, 0, 0), (0, 1, 0), (0, 0, 1)) is builtin: Basis",
"success": true
} ],
"context": "When calling asserts.is_basis(basis: Basis",
"fullname": "test_when_calling_is_Basis",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
} ],
"passed": 26,
"path": "res://tests/unit/is_instance.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/is_instance.test.gd",
"tags": [  ],
"test": ExtResource( 6 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 26
}, {
"context": "Given is_on_floor",
"methods": [ {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then it can be stubbed",
"expected": "|bool| True == true",
"success": true
} ],
"context": "From a built-in KinematicBody2D2",
"fullname": "test_stubbing_is_on_floor_method_from_builtin_class2",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then it can be stubbed",
"expected": "|bool| True == true",
"success": true
} ],
"context": "From a child node of a scene without scripts",
"fullname": "test_stubbing_is_on_floor_as_child_node_with_no_script",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then it can be stubbed",
"expected": "|bool| True == true",
"success": true
} ],
"context": "From a user-defined script",
"fullname": "test_stubbing_is_on_floor_method_from_user_defined_class",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 3,
"path": "res://tests/integration/on_floor.test.gd",
"source": {
"containers": [ "res://tests/integration", "res://tests" ],
"method": "",
"path": "res://tests/integration/on_floor.test.gd",
"tags": [  ],
"test": ExtResource( 5 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 3
}, {
"context": "Given a Script Director",
"methods": [ {
"assertions": [ {
"actual": "[Reference:2016] is instance of class: [GDScript:1453]",
"context": "Then we get that inner class back",
"expected": "[Reference:2016] is instance of class: [GDScript:1453]",
"success": true
} ],
"context": "When we double an inner class",
"fullname": "test_When_we_double_an_inner_class",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|Dictionary| {_enter_tree:{arguments:, default_arguments:}, _exit_tree:{arguments:, default_arguments:}, _get:{arguments:a, default_arguments:a}, _get_configuration_warning:{arguments:, default_arguments:}, _get_editor_description:{arguments:, default_arguments:}, _get_import_path:{arguments:, default_arguments:}, _get_property_list:{arguments:, default_arguments:}, _init:{arguments:, default_arguments:}, _input:{arguments:a, default_arguments:a}, _notification:{arguments:a, default_arguments:a}, _physics_process:{arguments:a, default_arguments:a}, _process:{arguments:a, default_arguments:a}, _ready:{arguments:, default_arguments:}, _set:{arguments:a, b, default_arguments:a, b}, _set_editor_description:{arguments:a, default_arguments:a}, _set_import_path:{arguments:a, default_arguments:a}, _to_string:{arguments:, default_arguments:}, _unhandled_input:{arguments:a, default_arguments:a}, _unhandled_key_input:{arguments:a, default_arguments:a}, add:{arguments:a, b, default_arguments:a, b}, add_child:{arguments:a, b, default_arguments:a, b = False}, add_child_below_node:{arguments:a, b, c, default_arguments:a, b, c = False}, add_to_group:{arguments:a, b, default_arguments:a, b = False}, add_user_signal:{arguments:a, b, default_arguments:a, b = []}, call:{arguments:a, default_arguments:a}, call_deferred:{arguments:a, default_arguments:a}, callv:{arguments:a, b, default_arguments:a, b}, can_process:{arguments:, default_arguments:}, can_translate_messages:{arguments:, default_arguments:}, connect:{arguments:a, b, c, d, e, default_arguments:a, b, c, d = [], e = 0}, disconnect:{arguments:a, b, c, default_arguments:a, b, c}, divide:{arguments:a, b, default_arguments:a, b}, duplicate:{arguments:a, default_arguments:a = 15}, emit_signal:{arguments:a, default_arguments:a}, find_node:{arguments:a, b, c, default_arguments:a, b = True, c = True}, find_parent:{arguments:a, default_arguments:a}, free:{arguments:, default_arguments:}, get:{arguments:a, default_arguments:a}, get_child:{arguments:a, default_arguments:a}, get_child_count:{arguments:, default_arguments:}, get_children:{arguments:, default_arguments:}, get_class:{arguments:, default_arguments:}, get_custom_multiplayer:{arguments:, default_arguments:}, get_filename:{arguments:, default_arguments:}, get_groups:{arguments:, default_arguments:}, get_incoming_connections:{arguments:, default_arguments:}, get_index:{arguments:, default_arguments:}, get_indexed:{arguments:a, default_arguments:a}, get_instance_id:{arguments:, default_arguments:}, get_meta:{arguments:a, default_arguments:a}, get_meta_list:{arguments:, default_arguments:}, get_method_list:{arguments:, default_arguments:}, get_multiplayer:{arguments:, default_arguments:}, get_name:{arguments:, default_arguments:}, get_network_master:{arguments:, default_arguments:}, get_node:{arguments:a, default_arguments:a}, get_node_and_resource:{arguments:a, default_arguments:a}, get_node_or_null:{arguments:a, default_arguments:a}, get_owner:{arguments:, default_arguments:}, get_parent:{arguments:, default_arguments:}, get_path:{arguments:, default_arguments:}, get_path_to:{arguments:a, default_arguments:a}, get_pause_mode:{arguments:, default_arguments:}, get_physics_process_delta_time:{arguments:, default_arguments:}, get_position_in_parent:{arguments:, default_arguments:}, get_process_delta_time:{arguments:, default_arguments:}, get_process_priority:{arguments:, default_arguments:}, get_property_list:{arguments:, default_arguments:}, get_scene_instance_load_placeholder:{arguments:, default_arguments:}, get_script:{arguments:, default_arguments:}, get_signal_connection_list:{arguments:a, default_arguments:a}, get_signal_list:{arguments:, default_arguments:}, get_tree:{arguments:, default_arguments:}, get_viewport:{arguments:, default_arguments:}, has_meta:{arguments:a, default_arguments:a}, has_method:{arguments:a, default_arguments:a}, has_node:{arguments:a, default_arguments:a}, has_node_and_resource:{arguments:a, default_arguments:a}, has_signal:{arguments:a, default_arguments:a}, has_user_signal:{arguments:a, default_arguments:a}, is_a_parent_of:{arguments:a, default_arguments:a}, is_blocking_signals:{arguments:, default_arguments:}, is_class:{arguments:a, default_arguments:a}, is_connected:{arguments:a, b, c, default_arguments:a, b, c}, is_displayed_folded:{arguments:, default_arguments:}, is_greater_than:{arguments:a, default_arguments:a}, is_in_group:{arguments:a, default_arguments:a}, is_inside_tree:{arguments:, default_arguments:}, is_network_master:{arguments:, default_arguments:}, is_physics_processing:{arguments:, default_arguments:}, is_physics_processing_internal:{arguments:, default_arguments:}, is_processing:{arguments:, default_arguments:}, is_processing_input:{arguments:, default_arguments:}, is_processing_internal:{arguments:, default_arguments:}, is_processing_unhandled_input:{arguments:, default_arguments:}, is_processing_unhandled_key_input:{arguments:, default_arguments:}, is_queued_for_deletion:{arguments:, default_arguments:}, math_fight:{arguments:, default_arguments:}, move_child:{arguments:a, b, default_arguments:a, b}, multiply:{arguments:a, b, default_arguments:a, b}, notification:{arguments:a, b, default_arguments:a, b = False}, pi:{arguments:, default_arguments:}, print_stray_nodes:{arguments:, default_arguments:}, print_tree:{arguments:, default_arguments:}, print_tree_pretty:{arguments:, default_arguments:}, propagate_call:{arguments:a, b, c, default_arguments:a, b = [], c = False}, propagate_notification:{arguments:a, default_arguments:a}, property_list_changed_notify:{arguments:, default_arguments:}, queue_free:{arguments:, default_arguments:}, raise:{arguments:, default_arguments:}, remove_and_skip:{arguments:, default_arguments:}, remove_child:{arguments:a, default_arguments:a}, remove_from_group:{arguments:a, default_arguments:a}, remove_meta:{arguments:a, default_arguments:a}, replace_by:{arguments:a, b, default_arguments:a, b = False}, request_ready:{arguments:, default_arguments:}, rpc:{arguments:a, default_arguments:a}, rpc_config:{arguments:a, b, default_arguments:a, b}, rpc_id:{arguments:a, b, default_arguments:a, b}, rpc_unreliable:{arguments:a, default_arguments:a}, rpc_unreliable_id:{arguments:a, b, default_arguments:a, b}, rset:{arguments:a, b, default_arguments:a, b}, rset_config:{arguments:a, b, default_arguments:a, b}, rset_id:{arguments:a, b, c, default_arguments:a, b, c}, rset_unreliable:{arguments:a, b, default_arguments:a, b}, rset_unreliable_id:{arguments:a, b, c, default_arguments:a, b, c}, set:{arguments:a, b, default_arguments:a, b}, set_block_signals:{arguments:a, default_arguments:a}, set_custom_multiplayer:{arguments:a, default_arguments:a}, set_deferred:{arguments:a, b, default_arguments:a, b}, set_display_folded:{arguments:a, default_arguments:a}, set_filename:{arguments:a, default_arguments:a}, set_indexed:{arguments:a, b, default_arguments:a, b}, set_message_translation:{arguments:a, default_arguments:a}, set_meta:{arguments:a, b, default_arguments:a, b}, set_name:{arguments:a, default_arguments:a}, set_network_master:{arguments:a, b, default_arguments:a, b = True}, set_owner:{arguments:a, default_arguments:a}, set_pause_mode:{arguments:a, default_arguments:a}, set_physics_process:{arguments:a, default_arguments:a}, set_physics_process_internal:{arguments:a, default_arguments:a}, set_process:{arguments:a, default_arguments:a}, set_process_input:{arguments:a, default_arguments:a}, set_process_internal:{arguments:a, default_arguments:a}, set_process_priority:{arguments:a, default_arguments:a}, set_process_unhandled_input:{arguments:a, default_arguments:a}, set_process_unhandled_key_input:{arguments:a, default_arguments:a}, set_scene_instance_load_placeholder:{arguments:a, default_arguments:a}, set_script:{arguments:a, default_arguments:a}, subtract:{arguments:a, b, default_arguments:a, b}, sum:{arguments:a, default_arguments:a}, to_string:{arguments:, default_arguments:}, tr:{arguments:a, default_arguments:a}, update_configuration_warning:{arguments:, default_arguments:}} is not equal to |Dictionary| {_enter_tree:{arguments:, default_arguments:}, _exit_tree:{arguments:, default_arguments:}, _get:{arguments:a, default_arguments:a}, _get_configuration_warning:{arguments:, default_arguments:}, _get_editor_description:{arguments:, default_arguments:}, _get_import_path:{arguments:, default_arguments:}, _get_property_list:{arguments:, default_arguments:}, _init:{arguments:, default_arguments:}, _input:{arguments:a, default_arguments:a}, _notification:{arguments:a, default_arguments:a}, _physics_process:{arguments:a, default_arguments:a}, _process:{arguments:a, default_arguments:a}, _ready:{arguments:, default_arguments:}, _set:{arguments:a, b, default_arguments:a, b}, _set_editor_description:{arguments:a, default_arguments:a}, _set_import_path:{arguments:a, default_arguments:a}, _to_string:{arguments:, default_arguments:}, _unhandled_input:{arguments:a, default_arguments:a}, _unhandled_key_input:{arguments:a, default_arguments:a}, add:{arguments:a, b, default_arguments:a, b}, add_child:{arguments:a, b, default_arguments:a, b = False}, add_child_below_node:{arguments:a, b, c, default_arguments:a, b, c = False}, add_to_group:{arguments:a, b, default_arguments:a, b = False}, add_user_signal:{arguments:a, b, default_arguments:a, b = []}, call:{arguments:a, default_arguments:a}, call_deferred:{arguments:a, default_arguments:a}, callv:{arguments:a, b, default_arguments:a, b}, can_process:{arguments:, default_arguments:}, can_translate_messages:{arguments:, default_arguments:}, connect:{arguments:a, b, c, d, e, default_arguments:a, b, c, d = [], e = 0}, disconnect:{arguments:a, b, c, default_arguments:a, b, c}, divide:{arguments:a, b, default_arguments:a, b}, duplicate:{arguments:a, default_arguments:a = 15}, emit_signal:{arguments:a, default_arguments:a}, find_node:{arguments:a, b, c, default_arguments:a, b = True, c = True}, find_parent:{arguments:a, default_arguments:a}, free:{arguments:, default_arguments:}, get:{arguments:a, default_arguments:a}, get_child:{arguments:a, default_arguments:a}, get_child_count:{arguments:, default_arguments:}, get_children:{arguments:, default_arguments:}, get_class:{arguments:, default_arguments:}, get_custom_multiplayer:{arguments:, default_arguments:}, get_filename:{arguments:, default_arguments:}, get_groups:{arguments:, default_arguments:}, get_incoming_connections:{arguments:, default_arguments:}, get_index:{arguments:, default_arguments:}, get_indexed:{arguments:a, default_arguments:a}, get_instance_id:{arguments:, default_arguments:}, get_meta:{arguments:a, default_arguments:a}, get_meta_list:{arguments:, default_arguments:}, get_method_list:{arguments:, default_arguments:}, get_multiplayer:{arguments:, default_arguments:}, get_name:{arguments:, default_arguments:}, get_network_master:{arguments:, default_arguments:}, get_node:{arguments:a, default_arguments:a}, get_node_and_resource:{arguments:a, default_arguments:a}, get_node_or_null:{arguments:a, default_arguments:a}, get_owner:{arguments:, default_arguments:}, get_parent:{arguments:, default_arguments:}, get_path:{arguments:, default_arguments:}, get_path_to:{arguments:a, default_arguments:a}, get_pause_mode:{arguments:, default_arguments:}, get_physics_process_delta_time:{arguments:, default_arguments:}, get_position_in_parent:{arguments:, default_arguments:}, get_process_delta_time:{arguments:, default_arguments:}, get_process_priority:{arguments:, default_arguments:}, get_property_list:{arguments:, default_arguments:}, get_scene_instance_load_placeholder:{arguments:, default_arguments:}, get_script:{arguments:, default_arguments:}, get_signal_connection_list:{arguments:a, default_arguments:a}, get_signal_list:{arguments:, default_arguments:}, get_tree:{arguments:, default_arguments:}, get_viewport:{arguments:, default_arguments:}, has_meta:{arguments:a, default_arguments:a}, has_method:{arguments:a, default_arguments:a}, has_node:{arguments:a, default_arguments:a}, has_node_and_resource:{arguments:a, default_arguments:a}, has_signal:{arguments:a, default_arguments:a}, has_user_signal:{arguments:a, default_arguments:a}, is_a_parent_of:{arguments:a, default_arguments:a}, is_blocking_signals:{arguments:, default_arguments:}, is_class:{arguments:a, default_arguments:a}, is_connected:{arguments:a, b, c, default_arguments:a, b, c}, is_displayed_folded:{arguments:, default_arguments:}, is_greater_than:{arguments:a, default_arguments:a}, is_in_group:{arguments:a, default_arguments:a}, is_inside_tree:{arguments:, default_arguments:}, is_network_master:{arguments:, default_arguments:}, is_physics_processing:{arguments:, default_arguments:}, is_physics_processing_internal:{arguments:, default_arguments:}, is_processing:{arguments:, default_arguments:}, is_processing_input:{arguments:, default_arguments:}, is_processing_internal:{arguments:, default_arguments:}, is_processing_unhandled_input:{arguments:, default_arguments:}, is_processing_unhandled_key_input:{arguments:, default_arguments:}, is_queued_for_deletion:{arguments:, default_arguments:}, math_fight:{arguments:, default_arguments:}, move_child:{arguments:a, b, default_arguments:a, b}, multiply:{arguments:a, b, default_arguments:a, b}, notification:{arguments:a, b, default_arguments:a, b = False}, pi:{arguments:, default_arguments:}, print_stray_nodes:{arguments:, default_arguments:}, print_tree:{arguments:, default_arguments:}, print_tree_pretty:{arguments:, default_arguments:}, propagate_call:{arguments:a, b, c, default_arguments:a, b = [], c = False}, propagate_notification:{arguments:a, default_arguments:a}, property_list_changed_notify:{arguments:, default_arguments:}, queue_free:{arguments:, default_arguments:}, raise:{arguments:, default_arguments:}, remove_and_skip:{arguments:, default_arguments:}, remove_child:{arguments:a, default_arguments:a}, remove_from_group:{arguments:a, default_arguments:a}, remove_meta:{arguments:a, default_arguments:a}, replace_by:{arguments:a, b, default_arguments:a, b = False}, request_ready:{arguments:, default_arguments:}, rpc:{arguments:a, default_arguments:a}, rpc_config:{arguments:a, b, default_arguments:a, b}, rpc_id:{arguments:a, b, default_arguments:a, b}, rpc_unreliable:{arguments:a, default_arguments:a}, rpc_unreliable_id:{arguments:a, b, default_arguments:a, b}, rset:{arguments:a, b, default_arguments:a, b}, rset_config:{arguments:a, b, default_arguments:a, b}, rset_id:{arguments:a, b, c, default_arguments:a, b, c}, rset_unreliable:{arguments:a, b, default_arguments:a, b}, rset_unreliable_id:{arguments:a, b, c, default_arguments:a, b, c}, set:{arguments:a, b, default_arguments:a, b}, set_block_signals:{arguments:a, default_arguments:a}, set_custom_multiplayer:{arguments:a, default_arguments:a}, set_deferred:{arguments:a, b, default_arguments:a, b}, set_display_folded:{arguments:a, default_arguments:a}, set_filename:{arguments:a, default_arguments:a}, set_indexed:{arguments:a, b, default_arguments:a, b}, set_message_translation:{arguments:a, default_arguments:a}, set_meta:{arguments:a, b, default_arguments:a, b}, set_name:{arguments:a, default_arguments:a}, set_network_master:{arguments:a, b, default_arguments:a, b = True}, set_owner:{arguments:a, default_arguments:a}, set_pause_mode:{arguments:a, default_arguments:a}, set_physics_process:{arguments:a, default_arguments:a}, set_physics_process_internal:{arguments:a, default_arguments:a}, set_process:{arguments:a, default_arguments:a}, set_process_input:{arguments:a, default_arguments:a}, set_process_internal:{arguments:a, default_arguments:a}, set_process_priority:{arguments:a, default_arguments:a}, set_process_unhandled_input:{arguments:a, default_arguments:a}, set_process_unhandled_key_input:{arguments:a, default_arguments:a}, set_scene_instance_load_placeholder:{arguments:a, default_arguments:a}, set_script:{arguments:a, default_arguments:a}, subtract:{arguments:a, b, default_arguments:a, b}, sum:{arguments:a, default_arguments:a}, to_string:{arguments:, default_arguments:}, tr:{arguments:a, default_arguments:a}, update_configuration_warning:{arguments:, default_arguments:}}",
"context": "Then they do not share resources",
"expected": "|Dictionary| {_enter_tree:{arguments:, default_arguments:}, _exit_tree:{arguments:, default_arguments:}, _get:{arguments:a, default_arguments:a}, _get_configuration_warning:{arguments:, default_arguments:}, _get_editor_description:{arguments:, default_arguments:}, _get_import_path:{arguments:, default_arguments:}, _get_property_list:{arguments:, default_arguments:}, _init:{arguments:, default_arguments:}, _input:{arguments:a, default_arguments:a}, _notification:{arguments:a, default_arguments:a}, _physics_process:{arguments:a, default_arguments:a}, _process:{arguments:a, default_arguments:a}, _ready:{arguments:, default_arguments:}, _set:{arguments:a, b, default_arguments:a, b}, _set_editor_description:{arguments:a, default_arguments:a}, _set_import_path:{arguments:a, default_arguments:a}, _to_string:{arguments:, default_arguments:}, _unhandled_input:{arguments:a, default_arguments:a}, _unhandled_key_input:{arguments:a, default_arguments:a}, add:{arguments:a, b, default_arguments:a, b}, add_child:{arguments:a, b, default_arguments:a, b = False}, add_child_below_node:{arguments:a, b, c, default_arguments:a, b, c = False}, add_to_group:{arguments:a, b, default_arguments:a, b = False}, add_user_signal:{arguments:a, b, default_arguments:a, b = []}, call:{arguments:a, default_arguments:a}, call_deferred:{arguments:a, default_arguments:a}, callv:{arguments:a, b, default_arguments:a, b}, can_process:{arguments:, default_arguments:}, can_translate_messages:{arguments:, default_arguments:}, connect:{arguments:a, b, c, d, e, default_arguments:a, b, c, d = [], e = 0}, disconnect:{arguments:a, b, c, default_arguments:a, b, c}, divide:{arguments:a, b, default_arguments:a, b}, duplicate:{arguments:a, default_arguments:a = 15}, emit_signal:{arguments:a, default_arguments:a}, find_node:{arguments:a, b, c, default_arguments:a, b = True, c = True}, find_parent:{arguments:a, default_arguments:a}, free:{arguments:, default_arguments:}, get:{arguments:a, default_arguments:a}, get_child:{arguments:a, default_arguments:a}, get_child_count:{arguments:, default_arguments:}, get_children:{arguments:, default_arguments:}, get_class:{arguments:, default_arguments:}, get_custom_multiplayer:{arguments:, default_arguments:}, get_filename:{arguments:, default_arguments:}, get_groups:{arguments:, default_arguments:}, get_incoming_connections:{arguments:, default_arguments:}, get_index:{arguments:, default_arguments:}, get_indexed:{arguments:a, default_arguments:a}, get_instance_id:{arguments:, default_arguments:}, get_meta:{arguments:a, default_arguments:a}, get_meta_list:{arguments:, default_arguments:}, get_method_list:{arguments:, default_arguments:}, get_multiplayer:{arguments:, default_arguments:}, get_name:{arguments:, default_arguments:}, get_network_master:{arguments:, default_arguments:}, get_node:{arguments:a, default_arguments:a}, get_node_and_resource:{arguments:a, default_arguments:a}, get_node_or_null:{arguments:a, default_arguments:a}, get_owner:{arguments:, default_arguments:}, get_parent:{arguments:, default_arguments:}, get_path:{arguments:, default_arguments:}, get_path_to:{arguments:a, default_arguments:a}, get_pause_mode:{arguments:, default_arguments:}, get_physics_process_delta_time:{arguments:, default_arguments:}, get_position_in_parent:{arguments:, default_arguments:}, get_process_delta_time:{arguments:, default_arguments:}, get_process_priority:{arguments:, default_arguments:}, get_property_list:{arguments:, default_arguments:}, get_scene_instance_load_placeholder:{arguments:, default_arguments:}, get_script:{arguments:, default_arguments:}, get_signal_connection_list:{arguments:a, default_arguments:a}, get_signal_list:{arguments:, default_arguments:}, get_tree:{arguments:, default_arguments:}, get_viewport:{arguments:, default_arguments:}, has_meta:{arguments:a, default_arguments:a}, has_method:{arguments:a, default_arguments:a}, has_node:{arguments:a, default_arguments:a}, has_node_and_resource:{arguments:a, default_arguments:a}, has_signal:{arguments:a, default_arguments:a}, has_user_signal:{arguments:a, default_arguments:a}, is_a_parent_of:{arguments:a, default_arguments:a}, is_blocking_signals:{arguments:, default_arguments:}, is_class:{arguments:a, default_arguments:a}, is_connected:{arguments:a, b, c, default_arguments:a, b, c}, is_displayed_folded:{arguments:, default_arguments:}, is_greater_than:{arguments:a, default_arguments:a}, is_in_group:{arguments:a, default_arguments:a}, is_inside_tree:{arguments:, default_arguments:}, is_network_master:{arguments:, default_arguments:}, is_physics_processing:{arguments:, default_arguments:}, is_physics_processing_internal:{arguments:, default_arguments:}, is_processing:{arguments:, default_arguments:}, is_processing_input:{arguments:, default_arguments:}, is_processing_internal:{arguments:, default_arguments:}, is_processing_unhandled_input:{arguments:, default_arguments:}, is_processing_unhandled_key_input:{arguments:, default_arguments:}, is_queued_for_deletion:{arguments:, default_arguments:}, math_fight:{arguments:, default_arguments:}, move_child:{arguments:a, b, default_arguments:a, b}, multiply:{arguments:a, b, default_arguments:a, b}, notification:{arguments:a, b, default_arguments:a, b = False}, pi:{arguments:, default_arguments:}, print_stray_nodes:{arguments:, default_arguments:}, print_tree:{arguments:, default_arguments:}, print_tree_pretty:{arguments:, default_arguments:}, propagate_call:{arguments:a, b, c, default_arguments:a, b = [], c = False}, propagate_notification:{arguments:a, default_arguments:a}, property_list_changed_notify:{arguments:, default_arguments:}, queue_free:{arguments:, default_arguments:}, raise:{arguments:, default_arguments:}, remove_and_skip:{arguments:, default_arguments:}, remove_child:{arguments:a, default_arguments:a}, remove_from_group:{arguments:a, default_arguments:a}, remove_meta:{arguments:a, default_arguments:a}, replace_by:{arguments:a, b, default_arguments:a, b = False}, request_ready:{arguments:, default_arguments:}, rpc:{arguments:a, default_arguments:a}, rpc_config:{arguments:a, b, default_arguments:a, b}, rpc_id:{arguments:a, b, default_arguments:a, b}, rpc_unreliable:{arguments:a, default_arguments:a}, rpc_unreliable_id:{arguments:a, b, default_arguments:a, b}, rset:{arguments:a, b, default_arguments:a, b}, rset_config:{arguments:a, b, default_arguments:a, b}, rset_id:{arguments:a, b, c, default_arguments:a, b, c}, rset_unreliable:{arguments:a, b, default_arguments:a, b}, rset_unreliable_id:{arguments:a, b, c, default_arguments:a, b, c}, set:{arguments:a, b, default_arguments:a, b}, set_block_signals:{arguments:a, default_arguments:a}, set_custom_multiplayer:{arguments:a, default_arguments:a}, set_deferred:{arguments:a, b, default_arguments:a, b}, set_display_folded:{arguments:a, default_arguments:a}, set_filename:{arguments:a, default_arguments:a}, set_indexed:{arguments:a, b, default_arguments:a, b}, set_message_translation:{arguments:a, default_arguments:a}, set_meta:{arguments:a, b, default_arguments:a, b}, set_name:{arguments:a, default_arguments:a}, set_network_master:{arguments:a, b, default_arguments:a, b = True}, set_owner:{arguments:a, default_arguments:a}, set_pause_mode:{arguments:a, default_arguments:a}, set_physics_process:{arguments:a, default_arguments:a}, set_physics_process_internal:{arguments:a, default_arguments:a}, set_process:{arguments:a, default_arguments:a}, set_process_input:{arguments:a, default_arguments:a}, set_process_internal:{arguments:a, default_arguments:a}, set_process_priority:{arguments:a, default_arguments:a}, set_process_unhandled_input:{arguments:a, default_arguments:a}, set_process_unhandled_key_input:{arguments:a, default_arguments:a}, set_scene_instance_load_placeholder:{arguments:a, default_arguments:a}, set_script:{arguments:a, default_arguments:a}, subtract:{arguments:a, b, default_arguments:a, b}, sum:{arguments:a, default_arguments:a}, to_string:{arguments:, default_arguments:}, tr:{arguments:a, default_arguments:a}, update_configuration_warning:{arguments:, default_arguments:}} != |Dictionary| {_enter_tree:{arguments:, default_arguments:}, _exit_tree:{arguments:, default_arguments:}, _get:{arguments:a, default_arguments:a}, _get_configuration_warning:{arguments:, default_arguments:}, _get_editor_description:{arguments:, default_arguments:}, _get_import_path:{arguments:, default_arguments:}, _get_property_list:{arguments:, default_arguments:}, _init:{arguments:, default_arguments:}, _input:{arguments:a, default_arguments:a}, _notification:{arguments:a, default_arguments:a}, _physics_process:{arguments:a, default_arguments:a}, _process:{arguments:a, default_arguments:a}, _ready:{arguments:, default_arguments:}, _set:{arguments:a, b, default_arguments:a, b}, _set_editor_description:{arguments:a, default_arguments:a}, _set_import_path:{arguments:a, default_arguments:a}, _to_string:{arguments:, default_arguments:}, _unhandled_input:{arguments:a, default_arguments:a}, _unhandled_key_input:{arguments:a, default_arguments:a}, add:{arguments:a, b, default_arguments:a, b}, add_child:{arguments:a, b, default_arguments:a, b = False}, add_child_below_node:{arguments:a, b, c, default_arguments:a, b, c = False}, add_to_group:{arguments:a, b, default_arguments:a, b = False}, add_user_signal:{arguments:a, b, default_arguments:a, b = []}, call:{arguments:a, default_arguments:a}, call_deferred:{arguments:a, default_arguments:a}, callv:{arguments:a, b, default_arguments:a, b}, can_process:{arguments:, default_arguments:}, can_translate_messages:{arguments:, default_arguments:}, connect:{arguments:a, b, c, d, e, default_arguments:a, b, c, d = [], e = 0}, disconnect:{arguments:a, b, c, default_arguments:a, b, c}, divide:{arguments:a, b, default_arguments:a, b}, duplicate:{arguments:a, default_arguments:a = 15}, emit_signal:{arguments:a, default_arguments:a}, find_node:{arguments:a, b, c, default_arguments:a, b = True, c = True}, find_parent:{arguments:a, default_arguments:a}, free:{arguments:, default_arguments:}, get:{arguments:a, default_arguments:a}, get_child:{arguments:a, default_arguments:a}, get_child_count:{arguments:, default_arguments:}, get_children:{arguments:, default_arguments:}, get_class:{arguments:, default_arguments:}, get_custom_multiplayer:{arguments:, default_arguments:}, get_filename:{arguments:, default_arguments:}, get_groups:{arguments:, default_arguments:}, get_incoming_connections:{arguments:, default_arguments:}, get_index:{arguments:, default_arguments:}, get_indexed:{arguments:a, default_arguments:a}, get_instance_id:{arguments:, default_arguments:}, get_meta:{arguments:a, default_arguments:a}, get_meta_list:{arguments:, default_arguments:}, get_method_list:{arguments:, default_arguments:}, get_multiplayer:{arguments:, default_arguments:}, get_name:{arguments:, default_arguments:}, get_network_master:{arguments:, default_arguments:}, get_node:{arguments:a, default_arguments:a}, get_node_and_resource:{arguments:a, default_arguments:a}, get_node_or_null:{arguments:a, default_arguments:a}, get_owner:{arguments:, default_arguments:}, get_parent:{arguments:, default_arguments:}, get_path:{arguments:, default_arguments:}, get_path_to:{arguments:a, default_arguments:a}, get_pause_mode:{arguments:, default_arguments:}, get_physics_process_delta_time:{arguments:, default_arguments:}, get_position_in_parent:{arguments:, default_arguments:}, get_process_delta_time:{arguments:, default_arguments:}, get_process_priority:{arguments:, default_arguments:}, get_property_list:{arguments:, default_arguments:}, get_scene_instance_load_placeholder:{arguments:, default_arguments:}, get_script:{arguments:, default_arguments:}, get_signal_connection_list:{arguments:a, default_arguments:a}, get_signal_list:{arguments:, default_arguments:}, get_tree:{arguments:, default_arguments:}, get_viewport:{arguments:, default_arguments:}, has_meta:{arguments:a, default_arguments:a}, has_method:{arguments:a, default_arguments:a}, has_node:{arguments:a, default_arguments:a}, has_node_and_resource:{arguments:a, default_arguments:a}, has_signal:{arguments:a, default_arguments:a}, has_user_signal:{arguments:a, default_arguments:a}, is_a_parent_of:{arguments:a, default_arguments:a}, is_blocking_signals:{arguments:, default_arguments:}, is_class:{arguments:a, default_arguments:a}, is_connected:{arguments:a, b, c, default_arguments:a, b, c}, is_displayed_folded:{arguments:, default_arguments:}, is_greater_than:{arguments:a, default_arguments:a}, is_in_group:{arguments:a, default_arguments:a}, is_inside_tree:{arguments:, default_arguments:}, is_network_master:{arguments:, default_arguments:}, is_physics_processing:{arguments:, default_arguments:}, is_physics_processing_internal:{arguments:, default_arguments:}, is_processing:{arguments:, default_arguments:}, is_processing_input:{arguments:, default_arguments:}, is_processing_internal:{arguments:, default_arguments:}, is_processing_unhandled_input:{arguments:, default_arguments:}, is_processing_unhandled_key_input:{arguments:, default_arguments:}, is_queued_for_deletion:{arguments:, default_arguments:}, math_fight:{arguments:, default_arguments:}, move_child:{arguments:a, b, default_arguments:a, b}, multiply:{arguments:a, b, default_arguments:a, b}, notification:{arguments:a, b, default_arguments:a, b = False}, pi:{arguments:, default_arguments:}, print_stray_nodes:{arguments:, default_arguments:}, print_tree:{arguments:, default_arguments:}, print_tree_pretty:{arguments:, default_arguments:}, propagate_call:{arguments:a, b, c, default_arguments:a, b = [], c = False}, propagate_notification:{arguments:a, default_arguments:a}, property_list_changed_notify:{arguments:, default_arguments:}, queue_free:{arguments:, default_arguments:}, raise:{arguments:, default_arguments:}, remove_and_skip:{arguments:, default_arguments:}, remove_child:{arguments:a, default_arguments:a}, remove_from_group:{arguments:a, default_arguments:a}, remove_meta:{arguments:a, default_arguments:a}, replace_by:{arguments:a, b, default_arguments:a, b = False}, request_ready:{arguments:, default_arguments:}, rpc:{arguments:a, default_arguments:a}, rpc_config:{arguments:a, b, default_arguments:a, b}, rpc_id:{arguments:a, b, default_arguments:a, b}, rpc_unreliable:{arguments:a, default_arguments:a}, rpc_unreliable_id:{arguments:a, b, default_arguments:a, b}, rset:{arguments:a, b, default_arguments:a, b}, rset_config:{arguments:a, b, default_arguments:a, b}, rset_id:{arguments:a, b, c, default_arguments:a, b, c}, rset_unreliable:{arguments:a, b, default_arguments:a, b}, rset_unreliable_id:{arguments:a, b, c, default_arguments:a, b, c}, set:{arguments:a, b, default_arguments:a, b}, set_block_signals:{arguments:a, default_arguments:a}, set_custom_multiplayer:{arguments:a, default_arguments:a}, set_deferred:{arguments:a, b, default_arguments:a, b}, set_display_folded:{arguments:a, default_arguments:a}, set_filename:{arguments:a, default_arguments:a}, set_indexed:{arguments:a, b, default_arguments:a, b}, set_message_translation:{arguments:a, default_arguments:a}, set_meta:{arguments:a, b, default_arguments:a, b}, set_name:{arguments:a, default_arguments:a}, set_network_master:{arguments:a, b, default_arguments:a, b = True}, set_owner:{arguments:a, default_arguments:a}, set_pause_mode:{arguments:a, default_arguments:a}, set_physics_process:{arguments:a, default_arguments:a}, set_physics_process_internal:{arguments:a, default_arguments:a}, set_process:{arguments:a, default_arguments:a}, set_process_input:{arguments:a, default_arguments:a}, set_process_internal:{arguments:a, default_arguments:a}, set_process_priority:{arguments:a, default_arguments:a}, set_process_unhandled_input:{arguments:a, default_arguments:a}, set_process_unhandled_key_input:{arguments:a, default_arguments:a}, set_scene_instance_load_placeholder:{arguments:a, default_arguments:a}, set_script:{arguments:a, default_arguments:a}, subtract:{arguments:a, b, default_arguments:a, b}, sum:{arguments:a, default_arguments:a}, to_string:{arguments:, default_arguments:}, tr:{arguments:a, default_arguments:a}, update_configuration_warning:{arguments:, default_arguments:}}",
"success": true
} ],
"context": "When we create two of it for the same script",
"fullname": "test_When_we_create_two_of_it_for_the_same_script",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|Object| [Node:2132] is equal to |Object| [Node:2132]",
"context": "Then we get the same double back",
"expected": "|Object| [Node:2132] is equal to |Object| [Node:2132]",
"success": true
} ],
"context": "When we call the double the second time",
"fullname": "test_When_we_call_double_a_second_time_on",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 3,
"path": "res://tests/integration/script_director.test.gd",
"source": {
"containers": [ "res://tests/integration", "res://tests" ],
"method": "",
"path": "res://tests/integration/script_director.test.gd",
"tags": [  ],
"test": ExtResource( 13 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 3
}, {
"context": "Given a Boolean Assertion",
"methods": [ {
"assertions": [ {
"actual": "|bool| True != false",
"context": "",
"expected": "|bool| True == false",
"success": false
} ],
"context": " intentional failure",
"fullname": "test_intentional_failure",
"passed": 0,
"success": false,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then it passes",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When calling asserts.is_true(true)",
"fullname": "test_when_calling_asserts_is_true",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| False == false",
"context": "Then it passes",
"expected": "|bool| False == false",
"success": true
} ],
"context": "When calling asserts.is_false(false)",
"fullname": "test_when_calling_asserts_is_false",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 2,
"path": "res://tests/unit/boolean.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/boolean.test.gd",
"tags": [  ],
"test": ExtResource( 11 ),
"yield_time": 0.0
},
"success": false,
"time_taken": 0.0,
"total": 3
}, {
"context": "Given a Scene Director",
"methods": [ {
"assertions": [ {
"actual": "|Dictionary| {.:[Reference:1983], A:[Reference:1984], A/B:[Reference:1986], C:[Reference:1985], C/D:[Reference:1987]} is not equal to |Dictionary| {.:[Reference:1999], A:[Reference:2000], A/B:[Reference:2002], C:[Reference:2001], C/D:[Reference:2003]}",
"context": "Then they do not share resources",
"expected": "|Dictionary| {.:[Reference:1983], A:[Reference:1984], A/B:[Reference:1986], C:[Reference:1985], C/D:[Reference:1987]} != |Dictionary| {.:[Reference:1999], A:[Reference:2000], A/B:[Reference:2002], C:[Reference:2001], C/D:[Reference:2003]}",
"success": true
} ],
"context": "When we create two of it for the same scene",
"fullname": "test_When_we_create_two_of_it_for_the_same_scene",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 999 is equal to |int| 999",
"context": "Then we get the stubbed return value",
"expected": "|int| 999 is equal to |int| 999",
"success": true
} ],
"context": "When we call a method from a child node that we stubbed",
"fullname": "test_When_we_call_a_method_from_a_child_node_that_we_stubbed",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 9999 is equal to |int| 9999",
"context": "Then we get the stubbed return value",
"expected": "|int| 9999 is equal to |int| 9999",
"success": true
} ],
"context": "When we call a method from the root node that we stubbed",
"fullname": "test_When_we_call_a_method_from_the_root_node_that_we_stubbed",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 99 is equal to |int| 99",
"context": "Then we get the stubbed return value",
"expected": "|int| 99 is equal to |int| 99",
"success": true
} ],
"context": "When we call a method from a grandchild node that we stubbed",
"fullname": "test_When_we_call_a_method_from_a_grandchild_node_that_we_stubbed",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|NodePath| A is equal to |NodePath| A",
"context": "We have the correct NodePath Set",
"expected": "|NodePath| A is equal to |NodePath| A",
"success": true
} ],
"context": "When we add it to the tree it runs",
"fullname": "test_When_we_add_it_to_the_tree_it_runs",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 5,
"path": "res://tests/integration/scene_director.test.gd",
"source": {
"containers": [ "res://tests/integration", "res://tests" ],
"method": "",
"path": "res://tests/integration/scene_director.test.gd",
"tags": [  ],
"test": ExtResource( 4 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 5
}, {
"context": "Given A File Assertion",
"methods": [ {
"assertions": [ {
"actual": "res://somefile.gd does not exist",
"context": "Then it passes",
"expected": "res://somefile.gd does not exist",
"success": true
} ],
"context": "When calling asserts.file_does_not_exist when there is no file",
"fullname": "test_when_calling_file_does_not_exist_when_there_is_no_file",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "res://tests/unit/file.test.gd exists",
"context": "Then it passes",
"expected": "res://tests/unit/file.test.gd exists",
"success": true
} ],
"context": "When calling asserts.file_exists when the file is this suite",
"fullname": "test_when_calling_file_exists_when_file_is_self",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": " does not exist",
"context": "Then it passes",
"expected": " does not exist",
"success": true
} ],
"context": "When calling asserts file does not exist when path is empty",
"fullname": "test_when_calling_file_does_not_exist_when_path_is_empty",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 3,
"path": "res://tests/unit/file.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/file.test.gd",
"tags": [  ],
"test": ExtResource( 3 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 3
}, {
"context": "Given an Equality Assertion",
"methods": [ {
"assertions": [ {
"actual": "|int| 1 is equal to |int| 1",
"context": "Then it passes",
"expected": "|int| 1 is equal to |int| 1",
"success": true
} ],
"context": "When calling asserts.is_equal(1, 1)",
"fullname": "test_when_calling_is_equal",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 2 is equal or greater |int| 1",
"context": "Then it passes",
"expected": "|int| 2 is equal or greater |int| 1",
"success": true
} ],
"context": "When calling asserts.is_equal_or_greater_than(2, 1)",
"fullname": "test_when_calling_is_equal_or_greater_than",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 2 is greater than |int| 1",
"context": "Then it passes",
"expected": "|int| 2 is greater than |int| 1",
"success": true
} ],
"context": "When calling asserts.is_greater_than(2, 1)",
"fullname": "test_when_calling_is_greater_than",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 1 is less than |int| 2",
"context": "Then it passes",
"expected": "|int| 1 is less than |int| 2",
"success": true
} ],
"context": "When calling asserts.is_less_than(2, 1)",
"fullname": "test_when_calling_is_less_than",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 5 is not equal to |int| 6",
"context": "Then it passes",
"expected": "|int| 5 != |int| 6",
"success": true
} ],
"context": "When callign asserts.is_not_equal(5, 6)",
"fullname": "test_when_calling_is_not_equal",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 1 is equal or less than |int| 1",
"context": "Then it passes!",
"expected": "|int| 1 is equal or less than |int| 1",
"success": true
} ],
"context": "When calling asserts.is_equal_or_less_than(1, 1)",
"fullname": "test_when_calling_is_equal_or_less_than_with_equal_values",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 1 is equal or greater |int| 1",
"context": "Then it passes",
"expected": "|int| 1 is equal or greater |int| 1",
"success": true
} ],
"context": "When calling asserts.is_equal_or_greater_than(1, 1)",
"fullname": "test_when_calling_is_equal_or_greater_than_with_equal_values",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 7,
"path": "res://tests/unit/equality.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/equality.test.gd",
"tags": [  ],
"test": ExtResource( 8 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 7
}, {
"context": "Given a Null Assertion",
"methods": [ {
"assertions": [ {
"actual": "|null| Null == null",
"context": "Then it passes",
"expected": "|null| Null == null",
"success": true
} ],
"context": "When calling asserts.is_null(null)",
"fullname": "test_when_calling_null_is_null",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|Object| [Node:2265] != null",
"context": "Then it passes",
"expected": "|Object| [Node:2265] != null",
"success": true
} ],
"context": "When calling Node is not null",
"fullname": "test_when_calling_node_is_not_null",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|Object| [Deleted Object] == null",
"context": "A Freed Node is null in Engine 3.2.2 or greater",
"expected": "|Object| [Deleted Object] == null",
"success": true
} ],
"context": "When calling freed object is null",
"fullname": "test_when_calling_freed_object_is_not_null",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 3,
"path": "res://tests/unit/null.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/null.test.gd",
"tags": [  ],
"test": ExtResource( 12 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 3
}, {
"context": "Given A Range Assertion",
"methods": [ {
"assertions": [ {
"actual": "10 is not in range(0, 10)",
"context": "Then it passes",
"expected": "10 is not in range(0, 10)",
"success": true
} ],
"context": "When calling is (10) not in range (in range(0, 10)",
"fullname": "test_when_calling_is_not_in_range",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "0 is in range(0, 10)",
"context": "Then it passes",
"expected": "0 is in range(0, 10)",
"success": true
} ],
"context": "When calling is (0) in range(0, 10)",
"fullname": "test_when_calling_is_in_range",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 2,
"path": "res://tests/unit/range.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/range.test.gd",
"tags": [  ],
"test": ExtResource( 15 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 2
}, {
"context": "Given the Addition Operator",
"methods": [ {
"assertions": [ {
"actual": "|int| 4 is equal to |int| 4",
"context": "",
"expected": "|int| 4 is equal to |int| 4",
"success": true
} ],
"context": "When we add 2 to 2 we get 4",
"fullname": "test_add",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 8 is equal to |int| 8",
"context": "",
"expected": "|int| 8 is equal to |int| 8",
"success": true
} ],
"context": "When we add 5 to 3 we get 8",
"fullname": "test_add",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 13 is equal to |int| 13",
"context": "",
"expected": "|int| 13 is equal to |int| 13",
"success": true
} ],
"context": "When we add 7 to 6 we get 13",
"fullname": "test_add",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 0 is equal to |int| 0",
"context": "",
"expected": "|int| 0 is equal to |int| 0",
"success": true
} ],
"context": "When we subtract 2 from 2 we get 0",
"fullname": "test_subtract",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 2 is equal to |int| 2",
"context": "",
"expected": "|int| 2 is equal to |int| 2",
"success": true
} ],
"context": "When we subtract 5 from 3 we get 2",
"fullname": "test_subtract",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 1 is equal to |int| 1",
"context": "",
"expected": "|int| 1 is equal to |int| 1",
"success": true
} ],
"context": "When we subtract 7 from 6 we get 1",
"fullname": "test_subtract",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 6,
"path": "res://tests/unit/parameters.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/parameters.test.gd",
"tags": [  ],
"test": ExtResource( 16 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 6
}, {
"context": "Dummy Passing Test",
"methods": [ {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Passing!",
"expected": "|bool| True == true",
"success": true
} ],
"context": "This method passes",
"fullname": "test_this_method_passes",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 1,
"path": "res://tests/unit/suite.test.gd.DummyOne",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/suite.test.gd.DummyOne",
"tags": [  ],
"test": SubResource( 21 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 1
}, {
"context": "Dummy Test 2",
"methods": [ {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Passing!",
"expected": "|bool| True == true",
"success": true
} ],
"context": "This method passes",
"fullname": "test_this_method_passes",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 1,
"path": "res://tests/unit/suite.test.gd.DummyTwo",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/suite.test.gd.DummyTwo",
"tags": [  ],
"test": SubResource( 22 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 1
}, {
"context": "Given a String Assertion",
"methods": [ {
"assertions": [ {
"actual": "lorem impsum ends with impsum",
"context": "Then it passes",
"expected": "lorem impsum ends with impsum",
"success": true
} ],
"context": "When calling asserts.string_ends_with('impsum', 'lorem impsum')",
"fullname": "test_when_calling_string_ends_with",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "impsum does not end with lorem",
"context": "Then it passes",
"expected": "impsum does not end with lorem",
"success": true
} ],
"context": "When calling asserts.string_does_not_end_with('lorem', 'impsum')",
"fullname": "test_when_calling_string_does_not_end_with",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "lorem impsum begins with lorem",
"context": "Then it passes",
"expected": "lorem impsum begins with lorem",
"success": true
} ],
"context": "When calling asserts.string_begins_with('lorem', 'lorem impsum')",
"fullname": "test_when_calling_string_begins_with",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "impsum does not contain beem im",
"context": "Then it passes",
"expected": "impsum does not contain beem im",
"success": true
} ],
"context": "When calling asserts.string_does_not_contain('em im', 'impsum')",
"fullname": "test_when_calling_string_does_not_contain",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "impsum does not begin with bleh lorem",
"context": "Then it passes",
"expected": "impsum does not begin with bleh lorem",
"success": true
} ],
"context": "When calling asserts.string_does_not_begin_with('lorem', 'impsum')",
"fullname": "test_when_calling_string_does_not_begin_with",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "lorem impsum contains em im",
"context": "Then it passes",
"expected": "lorem impsum contains em im",
"success": true
} ],
"context": "When calling asserts.string_contains('em im', 'lorem impsum')",
"fullname": "test_when_calling_string_contains",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 6,
"path": "res://tests/unit/string.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/string.test.gd",
"tags": [  ],
"test": ExtResource( 9 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 6
}, {
"context": "Given a Test Double",
"methods": [ {
"assertions": [ {
"actual": "|int| 9999 is equal to |int| 9999",
"context": "Then it returns the corresponding value when the pattern matches",
"expected": "|int| 9999 is equal to |int| 9999",
"success": true
} ],
"context": "When we call a method that was stubbed with an argument pattern that includes a non-primitive object",
"fullname": "test_When_we_call_a_method_that_was_stubbed_with_an_argument_pattern_that_includes_a_non_primitive_object",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 9999 is equal to |int| 9999",
"context": "Then it returns the corresponding value when the partial pattern matches",
"expected": "|int| 9999 is equal to |int| 9999",
"success": true
} ],
"context": "When we call a method that was stubbed with a partial (ie using any()) argument pattern",
"fullname": "test_When_we_call_a_method_that_was_stubbed_with_a_partial_argument_pattern",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|null| Null == null",
"context": "Then we get the stubbed value back",
"expected": "|null| Null == null",
"success": true
} ],
"context": "When we stub a method of a doubled inner class",
"fullname": "test_When_we_stub_a_method_of_a_double_inner_class",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|String| Jackie is equal to |String| Jackie",
"context": "Then we can double the object successfully",
"expected": "|String| Jackie is equal to |String| Jackie",
"success": true
} ],
"context": "When we pass in dependecies on direct",
"fullname": "test_When_we_pass_in_deps_on_direct",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 99 is equal to |int| 99",
"context": "Then it returns a value",
"expected": "|int| 99 is equal to |int| 99",
"success": true
} ],
"context": "When we pass a funcref as a subcall that returns",
"fullname": "test_When_we_pass_a_funcref_as_a_subcall_that_returns_a_value",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 99 is equal to |int| 99",
"context": "Then it affects the state of the double",
"expected": "|int| 99 is equal to |int| 99",
"success": true
} ],
"context": "When we pass a funcref as a subcall",
"fullname": "test_When_we_pass_a_funcref_as_a_subcall",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|Array| [10, 5] is equal to |Array| [10, 5]",
"context": "Then it returns a value",
"expected": "|Array| [10, 5] is equal to |Array| [10, 5]",
"success": true
} ],
"context": "When we pass an Object with a call_func function",
"fullname": "test_When_we_pass_an_object_with_callfunc_method_as_a_subcall",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 4 is equal to |int| 4",
"context": "Then it calls its super implementation by default",
"expected": "|int| 4 is equal to |int| 4",
"success": true
}, {
"actual": "|int| 9999 is equal to |int| 9999",
"context": "Then it does not call its super implementation when arguments patterns match a different return value",
"expected": "|int| 9999 is equal to |int| 9999",
"success": true
} ],
"context": "When we call a method that we stubbed to call its super implementation by default",
"fullname": "test_When_we_call_a_method_that_we_stubbed_to_call_its_super_implementation_by_default",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|int| 4 is equal to |int| 4",
"context": "Then we get the correct result",
"expected": "|int| 4 is equal to |int| 4",
"success": true
} ],
"context": "When we call an add(x, y) method that we haven't directed",
"fullname": "test_When_we_call_an_add_method_that_we_have_not_directed",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then it returns true",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we call a method that we have stubbed to return true",
"fullname": "test_When_we_call_a_method_that_we_have_stubbed_to_return_true",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|Object| [Node:2310] is equal to |Object| [Node:2310]",
"context": "Then it returns that same node",
"expected": "|Object| [Node:2310] is equal to |Object| [Node:2310]",
"success": true
} ],
"context": "When we call a method that we have stubbed to return a node",
"fullname": "test_When_we_call_a_method_that_we_have_stubbed_to_return_a_node",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|float| 6.283185 is equal to |float| 6.283185",
"context": "Then we can call the static methods of that inner double",
"expected": "|float| 6.283185 is equal to |float| 6.283185",
"success": true
} ],
"context": "When we add an doubled inner class to it",
"fullname": "test_When_we_add_a_doubled_inner_class_to_it",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "(1, 1) is builtin: Vector2",
"context": "Then we can call methods on it",
"expected": "(1, 1) is builtin: Vector2",
"success": true
} ],
"context": "When we double an inner class",
"fullname": "test_When_we_double_an_inner_class",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 100 is equal to |int| 100",
"context": "Then it returns the default stubbed value when the arguments don't match any pattern",
"expected": "|int| 100 is equal to |int| 100",
"success": true
}, {
"actual": "|int| 1000 is equal to |int| 1000",
"context": "Then it returns the the corresponding value to the pattern the arguments matched",
"expected": "|int| 1000 is equal to |int| 1000",
"success": true
} ],
"context": "When we call a method that was stubbed to return different values based on argument patterns",
"fullname": "test_When_we_call_a_method_that_was_stubbed_to_return_different_values_based_on_argument_patterns",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "add was called",
"context": "Then we can see that it was called at least once",
"expected": "add was called",
"success": true
} ],
"context": "When we call a method that we are spying on",
"fullname": "test_When_we_call_a_method_that_we_are_spying_on",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "method: add was called with arguments: [10, 10]",
"context": "Then we can see that it was called with those arguments",
"expected": "method: add was called with arguments: [10, 10]",
"success": true
} ],
"context": "When we pass arguments to a method call that we are spying on",
"fullname": "test_When_we_pass_arguments_to_a_method_call_that_we_are_spying_on",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| True is equal to |bool| True",
"context": "Then we can call it",
"expected": "|bool| True is equal to |bool| True",
"success": true
} ],
"context": "When we stubbed a keyworded method by passing in the correct keyword",
"fullname": "test_When_we_stubbed_a_keyword_method_by_passing_in_the_correct_keyword",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|String| Jackie is equal to |String| Jackie",
"context": "Then we can double the object successfully",
"expected": "|String| Jackie is equal to |String| Jackie",
"success": true
} ],
"context": "When we pass in dependecies on double",
"fullname": "test_When_we_pass_in_deps_on_double",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|null| Null == null",
"context": "Then we get null",
"expected": "|null| Null == null",
"success": true
} ],
"context": "When we call a method that we have dummied",
"fullname": "test_When_we_call_a_method_that_we_have_dummied",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 19,
"path": "res://tests/integration/test_double.test.gd",
"source": {
"containers": [ "res://tests/integration", "res://tests" ],
"method": "",
"path": "res://tests/integration/test_double.test.gd",
"tags": [  ],
"test": ExtResource( 14 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 19
}, {
"context": "Given a Test Script",
"methods": [ {
"assertions": [ {
"actual": "|bool| True == true",
"context": "if the test didn't break this works",
"expected": "|bool| True == true",
"success": true
} ],
"context": " we can omit describe",
"fullname": "test_we_can_omit_describe",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 10 is greater than |int| 1",
"context": "We get an array of multiple values back",
"expected": "|int| 10 is greater than |int| 1",
"success": true
}, {
"actual": "|int| 0 is not equal to |int| 9",
"context": "With different values",
"expected": "|int| 0 != |int| 9",
"success": true
}, {
"actual": "|int| 10 is greater than |int| 1",
"context": "And we can track multiple properties",
"expected": "|int| 10 is greater than |int| 1",
"success": true
} ],
"context": "When we record properties",
"fullname": "test_we_can_record_properties",
"passed": 3,
"success": true,
"time": 0.0,
"total": 3
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|int| 2 is equal to |int| 2",
"context": "",
"expected": "|int| 2 is equal to |int| 2",
"success": true
} ],
"context": " when we omit context we can see expected and got under method",
"fullname": "test_when_we_omit_context_we_can_see_expected_and_got_under_method",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
} ],
"passed": 3,
"path": "res://tests/unit/test.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/test.test.gd",
"tags": [  ],
"test": ExtResource( 19 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 3
}, {
"context": "Given an Object Assertion",
"methods": [ {
"assertions": [ {
"actual": "[Node:2277] is not freed",
"context": "Then it passes",
"expected": "[Node:2277] is not freed",
"success": true
} ],
"context": "When calling asserts.is_not_freed(unfreed_object)",
"fullname": "test_when_calling_unfreed_object_is_not_freed",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is freed from memory",
"context": "Then it passes",
"expected": "Null is freed from memory",
"success": true
} ],
"context": "When calling asserts.is_freed(freed_object",
"fullname": "test_when_calling_freed_object_is_freed",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:2262] does not have meta: bad_meta",
"context": "Then it passes",
"expected": "[Node:2262] does not have meta: bad_meta",
"success": true
} ],
"context": "When calling asserts.object_does_not_have_meta()",
"fullname": "test_when_calling_does_not_have_meta",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:2262] has meta: dummy",
"context": "Then it passes",
"expected": "[Node:2262] has meta: dummy",
"success": true
}, {
"actual": "[Node:2262] has meta: dummy",
"context": "Then it passes",
"expected": "[Node:2262] has meta: dummy",
"success": true
} ],
"context": "When calling asserts.object_has_meta() after adding metadata",
"fullname": "test_when_calling_has_meta_after_adding_metadata",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "[Node:2335] is queued for deletion",
"context": "Then it passes",
"expected": "[Node:2335] is queued for deletion",
"success": true
} ],
"context": "When calling asserts.object_is_queued for deletion after calling queue_free",
"fullname": "test_when_calling_obj_is_queued_for_deletion_after_calling_queue_free",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:2262].builtin_dummy is connected to [Node:2262].title",
"context": "Then it passes",
"expected": "[Node:2262].builtin_dummy is connected to [Node:2262].title",
"success": true
} ],
"context": "When calling asserts object is connected with a valid connection",
"fullname": "test_when_calling_obj_is_connected_with_a_real_connection",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:2262].builtin_dummy is not connected to [Node:2262].title",
"context": "Then it passes",
"expected": "[Node:2262].builtin_dummy is not connected to [Node:2262].title",
"success": true
} ],
"context": "When calling asserts object is not connected with an invalid connection",
"fullname": "test_when_calling_obj_is_not_connected_with_an_invalid_connection",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:2376] is blocking signals",
"context": "Then it passes",
"expected": "[Node:2376] is blocking signals",
"success": true
} ],
"context": "When calling is blocking signals while blocking signals",
"fullname": "test_is_blocking_signals",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:2389] is not blocking signals",
"context": "Then it passes",
"expected": "[Node:2389] is not blocking signals",
"success": true
} ],
"context": "When calling is not blocking signals while not blocking signals",
"fullname": "test_is_not_blocking_signals",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:2262] does not have meta: confusing",
"context": "Then it passes",
"expected": "[Node:2262] does not have meta: confusing",
"success": true
} ],
"context": "When calling asserts.object_has_meta with real key but null val",
"fullname": "test_when_calling_does_not_have_meta_real_key_null_value_pair",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:2262] has user signal: dummy_signal",
"context": "Then it passes",
"expected": "[Node:2262] has user signal: dummy_signal",
"success": true
} ],
"context": "When calling obj_has_user_signal after adding a signal",
"fullname": "test_when_calling_has_user_signal_after_adding_a_signal",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:2262] does not have user signal: false_signal",
"context": "Then it passes",
"expected": "[Node:2262] does not have user signal: false_signal",
"success": true
} ],
"context": "When calling obj_does_not_have_user_signal with fake signal",
"fullname": "test_when_calling_does_not_have_user_signal",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:2262] does not have user signal: builtin_dummy",
"context": "Then it passes",
"expected": "[Node:2262] does not have user signal: builtin_dummy",
"success": true
} ],
"context": "When calling does not have user signal with class signal",
"fullname": "test_when_calling_does_not_have_user_signal_with_class_signal_constant",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:2262] has method: title",
"context": "Then it passes",
"expected": "[Node:2262] has method: title",
"success": true
} ],
"context": "When calling has_method('title')",
"fullname": "test_when_calling_has_method_title",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:2455] is not queued for deletion",
"context": "Then it passes",
"expected": "[Node:2455] is not queued for deletion",
"success": true
} ],
"context": "When calling asserts.object_is_not_for_queued_deletion after not calling queue free()",
"fullname": "test_when_calling_obj_is_not_for_queued_deletion_after_not_calling_queue_free",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 15,
"path": "res://tests/unit/object.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/object.test.gd",
"tags": [  ],
"test": ExtResource( 7 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 15
}, {
"context": "Given a Signal Watcher",
"methods": [ {
"assertions": [ {
"actual": "signal: example was emitted from [Node:2411]",
"context": "Then it captures the emitted signal",
"expected": "signal: example was emitted from [Node:2411]",
"success": true
} ],
"context": "When we watch and emit a signal",
"fullname": "test_When_we_watch_and_emit_a_signal",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Signal: example was emitted from [Node:2411] with arguments: [1, 20, 5]",
"context": "Then it captures any arguments that where passed when the signal was emitted",
"expected": "Signal: example was emitted from [Node:2411] with arguments: [1, 20, 5]",
"success": true
} ],
"context": "When we watch a signal from an object with no bound variables",
"fullname": "test_When_we_watch_a_signal_from_an_object_with_no_bound_variables",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Signal: example was not emitted from [Node:2411]",
"context": "Then it does not capture the non-emitted signal",
"expected": "Signal: example was not emitted from [Node:2411]",
"success": true
} ],
"context": "When we watch and do not emit a signal",
"fullname": "test_When_we_watch_and_do_not_emit_a_signal",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "signal: multiple was emitted from [Node:2411] 2",
"context": "Then we can track how many times we emitted it",
"expected": "signal: multiple was emitted from [Node:2411] 2",
"success": true
} ],
"context": "When we watch and signal and emit it multiple times",
"fullname": "test_When_we_watch_a_signal_and_emit_it_multiple_times",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 4,
"path": "res://tests/unit/watcher.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/watcher.test.gd",
"tags": [  ],
"test": ExtResource( 17 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 4
}, {
"context": "Given an Is Not Instance of class/type Assertion",
"methods": [ {
"assertions": [ {
"actual": "Null is not builtin: AABB",
"context": "Then it passes",
"expected": "Null is not builtin: AABB",
"success": true
} ],
"context": "when calling asserts.is_not_AABB(null)",
"fullname": "test_when_calling_is_not_AABB",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Basis",
"context": "Then it passes",
"expected": "Null is not builtin: Basis",
"success": true
} ],
"context": "when calling asserts.is_not_Basis(null)",
"fullname": "test_when_calling_is_not_Basis",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Array",
"context": "Then it passes",
"expected": "Null is not builtin: Array",
"success": true
} ],
"context": "when calling asserts.is_not_Array(null)",
"fullname": "test_when_calling_is_not_Array",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: RID",
"context": "Then it passes",
"expected": "Null is not builtin: RID",
"success": true
} ],
"context": "when calling asserts.is_not_RID(null)",
"fullname": "test_when_calling_is_not_RID",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Vector2",
"context": "Then it passes",
"expected": "Null is not builtin: Vector2",
"success": true
} ],
"context": "when calling asserts.is_not_Vector2(null)",
"fullname": "test_when_calling_is_not_Vector2",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Color",
"context": "Then it passes",
"expected": "Null is not builtin: Color",
"success": true
} ],
"context": "when calling asserts.is_not_Color(null)",
"fullname": "test_when_calling_is_not_Color",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Object",
"context": "Then it passes",
"expected": "Null is not builtin: Object",
"success": true
} ],
"context": "when calling asserts.is_not_Object(null)",
"fullname": "test_when_calling_is_not_Object",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Rect2",
"context": "Then it passes",
"expected": "Null is not builtin: Rect2",
"success": true
} ],
"context": "when calling asserts.is_not_Rect2(null)",
"fullname": "test_when_calling_is_not_Rect2",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: PoolVector2Array",
"context": "Then it passes",
"expected": "Null is not builtin: PoolVector2Array",
"success": true
} ],
"context": "when calling asserts.is_not_PoolVector2Array(null)",
"fullname": "test_when_calling_is_not_PoolVector2Array",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: int",
"context": "Then it passes",
"expected": "Null is not builtin: int",
"success": true
} ],
"context": "when calling asserts.is_not_int(null)",
"fullname": "test_when_calling_is_not_int",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: PoolIntArray",
"context": "Then it passes",
"expected": "Null is not builtin: PoolIntArray",
"success": true
} ],
"context": "when calling asserts.is_not_PoolIntArray(null)",
"fullname": "test_when_calling_is_not_PoolIntArray",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: NodePath",
"context": "Then it passes",
"expected": "Null is not builtin: NodePath",
"success": true
} ],
"context": "when calling asserts.is_not_NodePath(null)",
"fullname": "test_when_calling_is_not_NodePath",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Plane",
"context": "Then it passes",
"expected": "Null is not builtin: Plane",
"success": true
} ],
"context": "when calling asserts.is_not_Plane(null)",
"fullname": "test_when_calling_is_not_Plane",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: PoolVector3Array",
"context": "Then it passes",
"expected": "Null is not builtin: PoolVector3Array",
"success": true
} ],
"context": "when calling asserts.is_not_PoolVector3Array(null)",
"fullname": "test_when_calling_is_not_PoolVector3Array",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Transform",
"context": "Then it passes",
"expected": "Null is not builtin: Transform",
"success": true
} ],
"context": "when calling asserts.is_not_Transform(null)",
"fullname": "test_when_calling_is_not_Transform",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Transform2D",
"context": "Then it passes",
"expected": "Null is not builtin: Transform2D",
"success": true
} ],
"context": "when calling asserts.is_not_Transform2D(null)",
"fullname": "test_when_calling_is_not_Transform2D",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: bool",
"context": "Then it passes",
"expected": "Null is not builtin: bool",
"success": true
} ],
"context": "when calling asserts.is_not_bool(null)",
"fullname": "test_when_calling_is_not_bool",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: PoolColorArray",
"context": "Then it passes",
"expected": "Null is not builtin: PoolColorArray",
"success": true
} ],
"context": "when calling asserts.is_not_PoolColorArray(null)",
"fullname": "test_when_calling_is_not_PoolColorArray",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: PoolRealArray",
"context": "Then it passes",
"expected": "Null is not builtin: PoolRealArray",
"success": true
} ],
"context": "when calling asserts.is_not_PoolRealArray(null)",
"fullname": "test_when_calling_is_not_PoolRealArray",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: PoolStringArray",
"context": "Then it passes",
"expected": "Null is not builtin: PoolStringArray",
"success": true
} ],
"context": "when calling asserts.is_not_PoolStringArray(null)",
"fullname": "test_when_calling_is_not_PoolStringArray",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Quat",
"context": "Then it passes",
"expected": "Null is not builtin: Quat",
"success": true
} ],
"context": "when calling asserts.is_not_Quat(null)",
"fullname": "test_when_calling_is_not_Quat",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Dictionary",
"context": "Then it passes",
"expected": "Null is not builtin: Dictionary",
"success": true
} ],
"context": "when calling asserts.is_not_Dictionary(null)",
"fullname": "test_when_calling_is_not_Dictionary",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Vector3",
"context": "Then it passes",
"expected": "Null is not builtin: Vector3",
"success": true
} ],
"context": "when calling asserts.is_not_Vector3(null)",
"fullname": "test_when_calling_is_not_Vector3",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: PoolByteArray",
"context": "Then it passes",
"expected": "Null is not builtin: PoolByteArray",
"success": true
} ],
"context": "when calling asserts.is_not_PoolByteArray(null)",
"fullname": "test_when_calling_is_not_PoolByteArray",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: float",
"context": "Then it passes",
"expected": "Null is not builtin: float",
"success": true
} ],
"context": "when calling asserts.is_not_float(null)",
"fullname": "test_when_calling_is_not_float",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: String",
"context": "Then it passes",
"expected": "Null is not builtin: String",
"success": true
} ],
"context": "when calling asserts.is_not_String(null)",
"fullname": "test_when_calling_is_not_String",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 26,
"path": "res://tests/unit/is_not_instance.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/is_not_instance.test.gd",
"tags": [  ],
"test": ExtResource( 2 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 26
}, {
"context": "Given an Is Instance of class/type Assertion",
"methods": [ {
"assertions": [ {
"actual": "|Plane| 0, 0, 0, 0 != null",
"context": "plane is not null",
"expected": "|Plane| 0, 0, 0, 0 != null",
"success": true
}, {
"actual": "0, 0, 0, 0 is builtin: Plane",
"context": "then it passes",
"expected": "0, 0, 0, 0 is builtin: Plane",
"success": true
} ],
"context": "When calling asserts.is_Plane(plane: Plane())",
"fullname": "test_when_calling_is_Plane",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|AABB| 0, 0, 0 - 0, 0, 0 != null",
"context": "AABB is not null",
"expected": "|AABB| 0, 0, 0 - 0, 0, 0 != null",
"success": true
}, {
"actual": "0, 0, 0 - 0, 0, 0 is builtin: AABB",
"context": "Then it passes",
"expected": "0, 0, 0 - 0, 0, 0 is builtin: AABB",
"success": true
} ],
"context": "When calling asserts.is_AABB(aabb: AABB)",
"fullname": "test_when_calling_is_AABB",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "{} is builtin: Dictionary",
"context": "Then it passes",
"expected": "{} is builtin: Dictionary",
"success": true
} ],
"context": "When calling asserts.is_Dictionary({})",
"fullname": "test_when_calling_is_Dictionary",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|PoolVector2Array| [] != null",
"context": "vec2s is not null",
"expected": "|PoolVector2Array| [] != null",
"success": true
}, {
"actual": "[] is builtin: PoolVector2Array",
"context": "Then it passes",
"expected": "[] is builtin: PoolVector2Array",
"success": true
} ],
"context": "When calling is asserts.is_PoolVector2Array(vec2s: PoolVector2Array)",
"fullname": "test_when_calling_is_PoolVector2Array",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|Rect2| (0, 0, 0, 0) != null",
"context": "rect2 is not null",
"expected": "|Rect2| (0, 0, 0, 0) != null",
"success": true
}, {
"actual": "(0, 0, 0, 0) is builtin: Rect2",
"context": "Then it passes",
"expected": "(0, 0, 0, 0) is builtin: Rect2",
"success": true
} ],
"context": "When calling asserts.is_Rect2(rect2: Rect2)",
"fullname": "test_when_calling_is_Rect2",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|PoolVector3Array| [] != null",
"context": "vec3s is not null",
"expected": "|PoolVector3Array| [] != null",
"success": true
}, {
"actual": "[] is builtin: PoolVector3Array",
"context": "Then it passes",
"expected": "[] is builtin: PoolVector3Array",
"success": true
} ],
"context": "When calling is asserts.is_PoolVector3Array(vec3s: PoolVector3Array)",
"fullname": "test_when_calling_is_PoolVector3Array",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|PoolRealArray| [] != null",
"context": "reals is not null",
"expected": "|PoolRealArray| [] != null",
"success": true
}, {
"actual": "[] is builtin: PoolRealArray",
"context": "Then it passes",
"expected": "[] is builtin: PoolRealArray",
"success": true
} ],
"context": "When calling is asserts.is_PoolRealArray(reals: PoolRealArray)",
"fullname": "test_when_calling_is_PoolRealArray",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|Quat| (0, 0, 0, 1) != null",
"context": "quat is not null",
"expected": "|Quat| (0, 0, 0, 1) != null",
"success": true
}, {
"actual": "(0, 0, 0, 1) is builtin: Quat",
"context": "Then it passes",
"expected": "(0, 0, 0, 1) is builtin: Quat",
"success": true
} ],
"context": "When calling asserts.is_Quat(quat: Quat)",
"fullname": "test_when_calling_is_Quat",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|RID| [RID] != null",
"context": "rid is not null",
"expected": "|RID| [RID] != null",
"success": true
}, {
"actual": "[RID] is builtin: RID",
"context": "Then it passes",
"expected": "[RID] is builtin: RID",
"success": true
} ],
"context": "When calling asserts.is_RID(rid: RID)",
"fullname": "test_when_calling_is_RID",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|Color| 0,0,0,1 != null",
"context": "color is not null",
"expected": "|Color| 0,0,0,1 != null",
"success": true
}, {
"actual": "0,0,0,1 is builtin: Color",
"context": "Then it passes",
"expected": "0,0,0,1 is builtin: Color",
"success": true
} ],
"context": "When calling asserts.is_color(color: Color)",
"fullname": "test_when_calling_is_Color",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|String|  != null",
"context": "strs is not null",
"expected": "|String|  != null",
"success": true
}, {
"actual": " is builtin: String",
"context": "Then it passes",
"expected": " is builtin: String",
"success": true
} ],
"context": "When calling asserts.is_string(strs: String)",
"fullname": "test_when_calling_is_string",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|Transform| 1, 0, 0, 0, 1, 0, 0, 0, 1 - 0, 0, 0 != null",
"context": "transform is not null",
"expected": "|Transform| 1, 0, 0, 0, 1, 0, 0, 0, 1 - 0, 0, 0 != null",
"success": true
}, {
"actual": "1, 0, 0, 0, 1, 0, 0, 0, 1 - 0, 0, 0 is builtin: Transform",
"context": "Then it passes",
"expected": "1, 0, 0, 0, 1, 0, 0, 0, 1 - 0, 0, 0 is builtin: Transform",
"success": true
} ],
"context": "When calling asserts.is_Transform(transform: Transform)",
"fullname": "test_when_calling_is_Transform",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|Transform2D| ((1, 0), (0, 1), (0, 0)) != null",
"context": "transform2D is not null",
"expected": "|Transform2D| ((1, 0), (0, 1), (0, 0)) != null",
"success": true
}, {
"actual": "((1, 0), (0, 1), (0, 0)) is builtin: Transform2D",
"context": "Then it passes",
"expected": "((1, 0), (0, 1), (0, 0)) is builtin: Transform2D",
"success": true
} ],
"context": "When calling asserts.is_Transform(transform2D: Transform2D)",
"fullname": "test_when_calling_is_Transform2D",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|Array| [] != null",
"context": "array is not null",
"expected": "|Array| [] != null",
"success": true
}, {
"actual": "[] is builtin: Array",
"context": "Then it passes",
"expected": "[] is builtin: Array",
"success": true
} ],
"context": "When calling asserts.is_Array(array: Array)",
"fullname": "test_when_calling_is_Array",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|Vector2| (0, 0) != null",
"context": "vec2 is not null",
"expected": "|Vector2| (0, 0) != null",
"success": true
}, {
"actual": "(0, 0) is builtin: Vector2",
"context": "Then it passes",
"expected": "(0, 0) is builtin: Vector2",
"success": true
} ],
"context": "When calling asserts.is_Vector2(vec2)",
"fullname": "test_when_calling_is_Vector2",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|PoolStringArray| [] != null",
"context": "strs is not null",
"expected": "|PoolStringArray| [] != null",
"success": true
}, {
"actual": "[] is builtin: PoolStringArray",
"context": "Then it passes",
"expected": "[] is builtin: PoolStringArray",
"success": true
} ],
"context": "When calling is asserts.is_PoolStringArray(strs: PoolStringArray)",
"fullname": "test_when_calling_is_PoolStringArray",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|NodePath| . != null",
"context": "@'Parent/Child' is not null",
"expected": "|NodePath| . != null",
"success": true
}, {
"actual": ". is builtin: NodePath",
"context": "Then it passes",
"expected": ". is builtin: NodePath",
"success": true
} ],
"context": "When calling asserts.is_NodePath(@'Parent/Child')",
"fullname": "test_when_calling_is_NodePath",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|Object| [Node:2450] != null",
"context": "node is not null",
"expected": "|Object| [Node:2450] != null",
"success": true
}, {
"actual": "[Node:2450] is builtin: Object",
"context": "An instance of node is an Object",
"expected": "[Node:2450] is builtin: Object",
"success": true
} ],
"context": "When calling is asserts.object(node: Node)",
"fullname": "test_when_calling_is_object",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|PoolByteArray| [PoolByteArray] != null",
"context": "bytes is not null",
"expected": "|PoolByteArray| [PoolByteArray] != null",
"success": true
}, {
"actual": "[PoolByteArray] is builtin: PoolByteArray",
"context": "Then it passes",
"expected": "[PoolByteArray] is builtin: PoolByteArray",
"success": true
} ],
"context": "When calling asserts.is_PoolByteArray(bytes: PoolByteArray)",
"fullname": "test_when_calling_is_PoolByteArray",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|PoolIntArray| [] != null",
"context": "ints is not null",
"expected": "|PoolIntArray| [] != null",
"success": true
}, {
"actual": "[] is builtin: PoolIntArray",
"context": "Then it passes",
"expected": "[] is builtin: PoolIntArray",
"success": true
} ],
"context": "When calling asserts.is_PoolIntArray(ints: PoolIntArray)",
"fullname": "test_when_calling_is_PoolIntArray",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "1 is builtin: int",
"context": "Then it passes",
"expected": "1 is builtin: int",
"success": true
} ],
"context": "When callign asserts.is_int(1)",
"fullname": "test_when_calling_is_int",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|Vector3| (0, 0, 0) != null",
"context": "vec3 is not null",
"expected": "|Vector3| (0, 0, 0) != null",
"success": true
}, {
"actual": "(0, 0, 0) is builtin: Vector3",
"context": "Then it passes",
"expected": "(0, 0, 0) is builtin: Vector3",
"success": true
} ],
"context": "When calling asserts.is_Vector3(vec3: Vector3",
"fullname": "test_when_calling_is_Vector3",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "1 is builtin: float",
"context": "Then it passes",
"expected": "1 is builtin: float",
"success": true
} ],
"context": "When calling asserts.is_float(1.0)",
"fullname": "test_when_calling_is_float",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|PoolColorArray| [PoolColorArray] != null",
"context": "colors is not null",
"expected": "|PoolColorArray| [PoolColorArray] != null",
"success": true
}, {
"actual": "[PoolColorArray] is builtin: PoolColorArray",
"context": "Then it passes",
"expected": "[PoolColorArray] is builtin: PoolColorArray",
"success": true
} ],
"context": "When calling asserts.is_PoolColorArray(colors: PoolColorArray)",
"fullname": "test_when_calling_is_PoolColorArray",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "True is builtin: bool",
"context": "Then it passes",
"expected": "True is builtin: bool",
"success": true
} ],
"context": "When calling asserts.is_bool(true)",
"fullname": "test_when_calling_is_bool",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|Basis| ((1, 0, 0), (0, 1, 0), (0, 0, 1)) != null",
"context": "basis is not null",
"expected": "|Basis| ((1, 0, 0), (0, 1, 0), (0, 0, 1)) != null",
"success": true
}, {
"actual": "((1, 0, 0), (0, 1, 0), (0, 0, 1)) is builtin: Basis",
"context": "Then it passes",
"expected": "((1, 0, 0), (0, 1, 0), (0, 0, 1)) is builtin: Basis",
"success": true
} ],
"context": "When calling asserts.is_basis(basis: Basis",
"fullname": "test_when_calling_is_Basis",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
} ],
"passed": 26,
"path": "res://tests/unit/is_instance.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/is_instance.test.gd",
"tags": [  ],
"test": ExtResource( 6 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 26
}, {
"context": "Default Args",
"methods": [ {
"assertions": [ {
"actual": "|bool| True == true",
"context": "If this method can be reached then we have doubled a script with default argument(s) properly!",
"expected": "|bool| True == true",
"success": true
} ],
"context": " default arguments of interpolate property",
"fullname": "test_default_arguments_of_interpolate_property",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 1,
"path": "res://tests/integration/default_args.test.gd",
"source": {
"containers": [ "res://tests/integration", "res://tests" ],
"method": "",
"path": "res://tests/integration/default_args.test.gd",
"tags": [  ],
"test": ExtResource( 10 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 1
}, {
"context": "Given is_on_floor",
"methods": [ {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then it can be stubbed",
"expected": "|bool| True == true",
"success": true
} ],
"context": "From a built-in KinematicBody2D2",
"fullname": "test_stubbing_is_on_floor_method_from_builtin_class2",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then it can be stubbed",
"expected": "|bool| True == true",
"success": true
} ],
"context": "From a child node of a scene without scripts",
"fullname": "test_stubbing_is_on_floor_as_child_node_with_no_script",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then it can be stubbed",
"expected": "|bool| True == true",
"success": true
} ],
"context": "From a user-defined script",
"fullname": "test_stubbing_is_on_floor_method_from_user_defined_class",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 3,
"path": "res://tests/integration/on_floor.test.gd",
"source": {
"containers": [ "res://tests/integration", "res://tests" ],
"method": "",
"path": "res://tests/integration/on_floor.test.gd",
"tags": [  ],
"test": ExtResource( 5 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 3
}, {
"context": "Given a Boolean Assertion",
"methods": [ {
"assertions": [ {
"actual": "|bool| True != false",
"context": "",
"expected": "|bool| True == false",
"success": false
} ],
"context": " intentional failure",
"fullname": "test_intentional_failure",
"passed": 0,
"success": false,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then it passes",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When calling asserts.is_true(true)",
"fullname": "test_when_calling_asserts_is_true",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| False == false",
"context": "Then it passes",
"expected": "|bool| False == false",
"success": true
} ],
"context": "When calling asserts.is_false(false)",
"fullname": "test_when_calling_asserts_is_false",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 2,
"path": "res://tests/integration/boolean.test.gd",
"source": {
"containers": [ "res://tests/integration", "res://tests" ],
"method": "",
"path": "res://tests/integration/boolean.test.gd",
"tags": [  ],
"test": ExtResource( 20 ),
"yield_time": 0.0
},
"success": false,
"time_taken": 0.0,
"total": 3
}, {
"context": "Given a Script Director",
"methods": [ {
"assertions": [ {
"actual": "[Reference:2533] is instance of class: [GDScript:1453]",
"context": "Then we get that inner class back",
"expected": "[Reference:2533] is instance of class: [GDScript:1453]",
"success": true
} ],
"context": "When we double an inner class",
"fullname": "test_When_we_double_an_inner_class",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|Dictionary| {_enter_tree:{arguments:, default_arguments:}, _exit_tree:{arguments:, default_arguments:}, _get:{arguments:a, default_arguments:a}, _get_configuration_warning:{arguments:, default_arguments:}, _get_editor_description:{arguments:, default_arguments:}, _get_import_path:{arguments:, default_arguments:}, _get_property_list:{arguments:, default_arguments:}, _init:{arguments:, default_arguments:}, _input:{arguments:a, default_arguments:a}, _notification:{arguments:a, default_arguments:a}, _physics_process:{arguments:a, default_arguments:a}, _process:{arguments:a, default_arguments:a}, _ready:{arguments:, default_arguments:}, _set:{arguments:a, b, default_arguments:a, b}, _set_editor_description:{arguments:a, default_arguments:a}, _set_import_path:{arguments:a, default_arguments:a}, _to_string:{arguments:, default_arguments:}, _unhandled_input:{arguments:a, default_arguments:a}, _unhandled_key_input:{arguments:a, default_arguments:a}, add:{arguments:a, b, default_arguments:a, b}, add_child:{arguments:a, b, default_arguments:a, b = False}, add_child_below_node:{arguments:a, b, c, default_arguments:a, b, c = False}, add_to_group:{arguments:a, b, default_arguments:a, b = False}, add_user_signal:{arguments:a, b, default_arguments:a, b = []}, call:{arguments:a, default_arguments:a}, call_deferred:{arguments:a, default_arguments:a}, callv:{arguments:a, b, default_arguments:a, b}, can_process:{arguments:, default_arguments:}, can_translate_messages:{arguments:, default_arguments:}, connect:{arguments:a, b, c, d, e, default_arguments:a, b, c, d = [], e = 0}, disconnect:{arguments:a, b, c, default_arguments:a, b, c}, divide:{arguments:a, b, default_arguments:a, b}, duplicate:{arguments:a, default_arguments:a = 15}, emit_signal:{arguments:a, default_arguments:a}, find_node:{arguments:a, b, c, default_arguments:a, b = True, c = True}, find_parent:{arguments:a, default_arguments:a}, free:{arguments:, default_arguments:}, get:{arguments:a, default_arguments:a}, get_child:{arguments:a, default_arguments:a}, get_child_count:{arguments:, default_arguments:}, get_children:{arguments:, default_arguments:}, get_class:{arguments:, default_arguments:}, get_custom_multiplayer:{arguments:, default_arguments:}, get_filename:{arguments:, default_arguments:}, get_groups:{arguments:, default_arguments:}, get_incoming_connections:{arguments:, default_arguments:}, get_index:{arguments:, default_arguments:}, get_indexed:{arguments:a, default_arguments:a}, get_instance_id:{arguments:, default_arguments:}, get_meta:{arguments:a, default_arguments:a}, get_meta_list:{arguments:, default_arguments:}, get_method_list:{arguments:, default_arguments:}, get_multiplayer:{arguments:, default_arguments:}, get_name:{arguments:, default_arguments:}, get_network_master:{arguments:, default_arguments:}, get_node:{arguments:a, default_arguments:a}, get_node_and_resource:{arguments:a, default_arguments:a}, get_node_or_null:{arguments:a, default_arguments:a}, get_owner:{arguments:, default_arguments:}, get_parent:{arguments:, default_arguments:}, get_path:{arguments:, default_arguments:}, get_path_to:{arguments:a, default_arguments:a}, get_pause_mode:{arguments:, default_arguments:}, get_physics_process_delta_time:{arguments:, default_arguments:}, get_position_in_parent:{arguments:, default_arguments:}, get_process_delta_time:{arguments:, default_arguments:}, get_process_priority:{arguments:, default_arguments:}, get_property_list:{arguments:, default_arguments:}, get_scene_instance_load_placeholder:{arguments:, default_arguments:}, get_script:{arguments:, default_arguments:}, get_signal_connection_list:{arguments:a, default_arguments:a}, get_signal_list:{arguments:, default_arguments:}, get_tree:{arguments:, default_arguments:}, get_viewport:{arguments:, default_arguments:}, has_meta:{arguments:a, default_arguments:a}, has_method:{arguments:a, default_arguments:a}, has_node:{arguments:a, default_arguments:a}, has_node_and_resource:{arguments:a, default_arguments:a}, has_signal:{arguments:a, default_arguments:a}, has_user_signal:{arguments:a, default_arguments:a}, is_a_parent_of:{arguments:a, default_arguments:a}, is_blocking_signals:{arguments:, default_arguments:}, is_class:{arguments:a, default_arguments:a}, is_connected:{arguments:a, b, c, default_arguments:a, b, c}, is_displayed_folded:{arguments:, default_arguments:}, is_greater_than:{arguments:a, default_arguments:a}, is_in_group:{arguments:a, default_arguments:a}, is_inside_tree:{arguments:, default_arguments:}, is_network_master:{arguments:, default_arguments:}, is_physics_processing:{arguments:, default_arguments:}, is_physics_processing_internal:{arguments:, default_arguments:}, is_processing:{arguments:, default_arguments:}, is_processing_input:{arguments:, default_arguments:}, is_processing_internal:{arguments:, default_arguments:}, is_processing_unhandled_input:{arguments:, default_arguments:}, is_processing_unhandled_key_input:{arguments:, default_arguments:}, is_queued_for_deletion:{arguments:, default_arguments:}, math_fight:{arguments:, default_arguments:}, move_child:{arguments:a, b, default_arguments:a, b}, multiply:{arguments:a, b, default_arguments:a, b}, notification:{arguments:a, b, default_arguments:a, b = False}, pi:{arguments:, default_arguments:}, print_stray_nodes:{arguments:, default_arguments:}, print_tree:{arguments:, default_arguments:}, print_tree_pretty:{arguments:, default_arguments:}, propagate_call:{arguments:a, b, c, default_arguments:a, b = [], c = False}, propagate_notification:{arguments:a, default_arguments:a}, property_list_changed_notify:{arguments:, default_arguments:}, queue_free:{arguments:, default_arguments:}, raise:{arguments:, default_arguments:}, remove_and_skip:{arguments:, default_arguments:}, remove_child:{arguments:a, default_arguments:a}, remove_from_group:{arguments:a, default_arguments:a}, remove_meta:{arguments:a, default_arguments:a}, replace_by:{arguments:a, b, default_arguments:a, b = False}, request_ready:{arguments:, default_arguments:}, rpc:{arguments:a, default_arguments:a}, rpc_config:{arguments:a, b, default_arguments:a, b}, rpc_id:{arguments:a, b, default_arguments:a, b}, rpc_unreliable:{arguments:a, default_arguments:a}, rpc_unreliable_id:{arguments:a, b, default_arguments:a, b}, rset:{arguments:a, b, default_arguments:a, b}, rset_config:{arguments:a, b, default_arguments:a, b}, rset_id:{arguments:a, b, c, default_arguments:a, b, c}, rset_unreliable:{arguments:a, b, default_arguments:a, b}, rset_unreliable_id:{arguments:a, b, c, default_arguments:a, b, c}, set:{arguments:a, b, default_arguments:a, b}, set_block_signals:{arguments:a, default_arguments:a}, set_custom_multiplayer:{arguments:a, default_arguments:a}, set_deferred:{arguments:a, b, default_arguments:a, b}, set_display_folded:{arguments:a, default_arguments:a}, set_filename:{arguments:a, default_arguments:a}, set_indexed:{arguments:a, b, default_arguments:a, b}, set_message_translation:{arguments:a, default_arguments:a}, set_meta:{arguments:a, b, default_arguments:a, b}, set_name:{arguments:a, default_arguments:a}, set_network_master:{arguments:a, b, default_arguments:a, b = True}, set_owner:{arguments:a, default_arguments:a}, set_pause_mode:{arguments:a, default_arguments:a}, set_physics_process:{arguments:a, default_arguments:a}, set_physics_process_internal:{arguments:a, default_arguments:a}, set_process:{arguments:a, default_arguments:a}, set_process_input:{arguments:a, default_arguments:a}, set_process_internal:{arguments:a, default_arguments:a}, set_process_priority:{arguments:a, default_arguments:a}, set_process_unhandled_input:{arguments:a, default_arguments:a}, set_process_unhandled_key_input:{arguments:a, default_arguments:a}, set_scene_instance_load_placeholder:{arguments:a, default_arguments:a}, set_script:{arguments:a, default_arguments:a}, subtract:{arguments:a, b, default_arguments:a, b}, sum:{arguments:a, default_arguments:a}, to_string:{arguments:, default_arguments:}, tr:{arguments:a, default_arguments:a}, update_configuration_warning:{arguments:, default_arguments:}} is not equal to |Dictionary| {_enter_tree:{arguments:, default_arguments:}, _exit_tree:{arguments:, default_arguments:}, _get:{arguments:a, default_arguments:a}, _get_configuration_warning:{arguments:, default_arguments:}, _get_editor_description:{arguments:, default_arguments:}, _get_import_path:{arguments:, default_arguments:}, _get_property_list:{arguments:, default_arguments:}, _init:{arguments:, default_arguments:}, _input:{arguments:a, default_arguments:a}, _notification:{arguments:a, default_arguments:a}, _physics_process:{arguments:a, default_arguments:a}, _process:{arguments:a, default_arguments:a}, _ready:{arguments:, default_arguments:}, _set:{arguments:a, b, default_arguments:a, b}, _set_editor_description:{arguments:a, default_arguments:a}, _set_import_path:{arguments:a, default_arguments:a}, _to_string:{arguments:, default_arguments:}, _unhandled_input:{arguments:a, default_arguments:a}, _unhandled_key_input:{arguments:a, default_arguments:a}, add:{arguments:a, b, default_arguments:a, b}, add_child:{arguments:a, b, default_arguments:a, b = False}, add_child_below_node:{arguments:a, b, c, default_arguments:a, b, c = False}, add_to_group:{arguments:a, b, default_arguments:a, b = False}, add_user_signal:{arguments:a, b, default_arguments:a, b = []}, call:{arguments:a, default_arguments:a}, call_deferred:{arguments:a, default_arguments:a}, callv:{arguments:a, b, default_arguments:a, b}, can_process:{arguments:, default_arguments:}, can_translate_messages:{arguments:, default_arguments:}, connect:{arguments:a, b, c, d, e, default_arguments:a, b, c, d = [], e = 0}, disconnect:{arguments:a, b, c, default_arguments:a, b, c}, divide:{arguments:a, b, default_arguments:a, b}, duplicate:{arguments:a, default_arguments:a = 15}, emit_signal:{arguments:a, default_arguments:a}, find_node:{arguments:a, b, c, default_arguments:a, b = True, c = True}, find_parent:{arguments:a, default_arguments:a}, free:{arguments:, default_arguments:}, get:{arguments:a, default_arguments:a}, get_child:{arguments:a, default_arguments:a}, get_child_count:{arguments:, default_arguments:}, get_children:{arguments:, default_arguments:}, get_class:{arguments:, default_arguments:}, get_custom_multiplayer:{arguments:, default_arguments:}, get_filename:{arguments:, default_arguments:}, get_groups:{arguments:, default_arguments:}, get_incoming_connections:{arguments:, default_arguments:}, get_index:{arguments:, default_arguments:}, get_indexed:{arguments:a, default_arguments:a}, get_instance_id:{arguments:, default_arguments:}, get_meta:{arguments:a, default_arguments:a}, get_meta_list:{arguments:, default_arguments:}, get_method_list:{arguments:, default_arguments:}, get_multiplayer:{arguments:, default_arguments:}, get_name:{arguments:, default_arguments:}, get_network_master:{arguments:, default_arguments:}, get_node:{arguments:a, default_arguments:a}, get_node_and_resource:{arguments:a, default_arguments:a}, get_node_or_null:{arguments:a, default_arguments:a}, get_owner:{arguments:, default_arguments:}, get_parent:{arguments:, default_arguments:}, get_path:{arguments:, default_arguments:}, get_path_to:{arguments:a, default_arguments:a}, get_pause_mode:{arguments:, default_arguments:}, get_physics_process_delta_time:{arguments:, default_arguments:}, get_position_in_parent:{arguments:, default_arguments:}, get_process_delta_time:{arguments:, default_arguments:}, get_process_priority:{arguments:, default_arguments:}, get_property_list:{arguments:, default_arguments:}, get_scene_instance_load_placeholder:{arguments:, default_arguments:}, get_script:{arguments:, default_arguments:}, get_signal_connection_list:{arguments:a, default_arguments:a}, get_signal_list:{arguments:, default_arguments:}, get_tree:{arguments:, default_arguments:}, get_viewport:{arguments:, default_arguments:}, has_meta:{arguments:a, default_arguments:a}, has_method:{arguments:a, default_arguments:a}, has_node:{arguments:a, default_arguments:a}, has_node_and_resource:{arguments:a, default_arguments:a}, has_signal:{arguments:a, default_arguments:a}, has_user_signal:{arguments:a, default_arguments:a}, is_a_parent_of:{arguments:a, default_arguments:a}, is_blocking_signals:{arguments:, default_arguments:}, is_class:{arguments:a, default_arguments:a}, is_connected:{arguments:a, b, c, default_arguments:a, b, c}, is_displayed_folded:{arguments:, default_arguments:}, is_greater_than:{arguments:a, default_arguments:a}, is_in_group:{arguments:a, default_arguments:a}, is_inside_tree:{arguments:, default_arguments:}, is_network_master:{arguments:, default_arguments:}, is_physics_processing:{arguments:, default_arguments:}, is_physics_processing_internal:{arguments:, default_arguments:}, is_processing:{arguments:, default_arguments:}, is_processing_input:{arguments:, default_arguments:}, is_processing_internal:{arguments:, default_arguments:}, is_processing_unhandled_input:{arguments:, default_arguments:}, is_processing_unhandled_key_input:{arguments:, default_arguments:}, is_queued_for_deletion:{arguments:, default_arguments:}, math_fight:{arguments:, default_arguments:}, move_child:{arguments:a, b, default_arguments:a, b}, multiply:{arguments:a, b, default_arguments:a, b}, notification:{arguments:a, b, default_arguments:a, b = False}, pi:{arguments:, default_arguments:}, print_stray_nodes:{arguments:, default_arguments:}, print_tree:{arguments:, default_arguments:}, print_tree_pretty:{arguments:, default_arguments:}, propagate_call:{arguments:a, b, c, default_arguments:a, b = [], c = False}, propagate_notification:{arguments:a, default_arguments:a}, property_list_changed_notify:{arguments:, default_arguments:}, queue_free:{arguments:, default_arguments:}, raise:{arguments:, default_arguments:}, remove_and_skip:{arguments:, default_arguments:}, remove_child:{arguments:a, default_arguments:a}, remove_from_group:{arguments:a, default_arguments:a}, remove_meta:{arguments:a, default_arguments:a}, replace_by:{arguments:a, b, default_arguments:a, b = False}, request_ready:{arguments:, default_arguments:}, rpc:{arguments:a, default_arguments:a}, rpc_config:{arguments:a, b, default_arguments:a, b}, rpc_id:{arguments:a, b, default_arguments:a, b}, rpc_unreliable:{arguments:a, default_arguments:a}, rpc_unreliable_id:{arguments:a, b, default_arguments:a, b}, rset:{arguments:a, b, default_arguments:a, b}, rset_config:{arguments:a, b, default_arguments:a, b}, rset_id:{arguments:a, b, c, default_arguments:a, b, c}, rset_unreliable:{arguments:a, b, default_arguments:a, b}, rset_unreliable_id:{arguments:a, b, c, default_arguments:a, b, c}, set:{arguments:a, b, default_arguments:a, b}, set_block_signals:{arguments:a, default_arguments:a}, set_custom_multiplayer:{arguments:a, default_arguments:a}, set_deferred:{arguments:a, b, default_arguments:a, b}, set_display_folded:{arguments:a, default_arguments:a}, set_filename:{arguments:a, default_arguments:a}, set_indexed:{arguments:a, b, default_arguments:a, b}, set_message_translation:{arguments:a, default_arguments:a}, set_meta:{arguments:a, b, default_arguments:a, b}, set_name:{arguments:a, default_arguments:a}, set_network_master:{arguments:a, b, default_arguments:a, b = True}, set_owner:{arguments:a, default_arguments:a}, set_pause_mode:{arguments:a, default_arguments:a}, set_physics_process:{arguments:a, default_arguments:a}, set_physics_process_internal:{arguments:a, default_arguments:a}, set_process:{arguments:a, default_arguments:a}, set_process_input:{arguments:a, default_arguments:a}, set_process_internal:{arguments:a, default_arguments:a}, set_process_priority:{arguments:a, default_arguments:a}, set_process_unhandled_input:{arguments:a, default_arguments:a}, set_process_unhandled_key_input:{arguments:a, default_arguments:a}, set_scene_instance_load_placeholder:{arguments:a, default_arguments:a}, set_script:{arguments:a, default_arguments:a}, subtract:{arguments:a, b, default_arguments:a, b}, sum:{arguments:a, default_arguments:a}, to_string:{arguments:, default_arguments:}, tr:{arguments:a, default_arguments:a}, update_configuration_warning:{arguments:, default_arguments:}}",
"context": "Then they do not share resources",
"expected": "|Dictionary| {_enter_tree:{arguments:, default_arguments:}, _exit_tree:{arguments:, default_arguments:}, _get:{arguments:a, default_arguments:a}, _get_configuration_warning:{arguments:, default_arguments:}, _get_editor_description:{arguments:, default_arguments:}, _get_import_path:{arguments:, default_arguments:}, _get_property_list:{arguments:, default_arguments:}, _init:{arguments:, default_arguments:}, _input:{arguments:a, default_arguments:a}, _notification:{arguments:a, default_arguments:a}, _physics_process:{arguments:a, default_arguments:a}, _process:{arguments:a, default_arguments:a}, _ready:{arguments:, default_arguments:}, _set:{arguments:a, b, default_arguments:a, b}, _set_editor_description:{arguments:a, default_arguments:a}, _set_import_path:{arguments:a, default_arguments:a}, _to_string:{arguments:, default_arguments:}, _unhandled_input:{arguments:a, default_arguments:a}, _unhandled_key_input:{arguments:a, default_arguments:a}, add:{arguments:a, b, default_arguments:a, b}, add_child:{arguments:a, b, default_arguments:a, b = False}, add_child_below_node:{arguments:a, b, c, default_arguments:a, b, c = False}, add_to_group:{arguments:a, b, default_arguments:a, b = False}, add_user_signal:{arguments:a, b, default_arguments:a, b = []}, call:{arguments:a, default_arguments:a}, call_deferred:{arguments:a, default_arguments:a}, callv:{arguments:a, b, default_arguments:a, b}, can_process:{arguments:, default_arguments:}, can_translate_messages:{arguments:, default_arguments:}, connect:{arguments:a, b, c, d, e, default_arguments:a, b, c, d = [], e = 0}, disconnect:{arguments:a, b, c, default_arguments:a, b, c}, divide:{arguments:a, b, default_arguments:a, b}, duplicate:{arguments:a, default_arguments:a = 15}, emit_signal:{arguments:a, default_arguments:a}, find_node:{arguments:a, b, c, default_arguments:a, b = True, c = True}, find_parent:{arguments:a, default_arguments:a}, free:{arguments:, default_arguments:}, get:{arguments:a, default_arguments:a}, get_child:{arguments:a, default_arguments:a}, get_child_count:{arguments:, default_arguments:}, get_children:{arguments:, default_arguments:}, get_class:{arguments:, default_arguments:}, get_custom_multiplayer:{arguments:, default_arguments:}, get_filename:{arguments:, default_arguments:}, get_groups:{arguments:, default_arguments:}, get_incoming_connections:{arguments:, default_arguments:}, get_index:{arguments:, default_arguments:}, get_indexed:{arguments:a, default_arguments:a}, get_instance_id:{arguments:, default_arguments:}, get_meta:{arguments:a, default_arguments:a}, get_meta_list:{arguments:, default_arguments:}, get_method_list:{arguments:, default_arguments:}, get_multiplayer:{arguments:, default_arguments:}, get_name:{arguments:, default_arguments:}, get_network_master:{arguments:, default_arguments:}, get_node:{arguments:a, default_arguments:a}, get_node_and_resource:{arguments:a, default_arguments:a}, get_node_or_null:{arguments:a, default_arguments:a}, get_owner:{arguments:, default_arguments:}, get_parent:{arguments:, default_arguments:}, get_path:{arguments:, default_arguments:}, get_path_to:{arguments:a, default_arguments:a}, get_pause_mode:{arguments:, default_arguments:}, get_physics_process_delta_time:{arguments:, default_arguments:}, get_position_in_parent:{arguments:, default_arguments:}, get_process_delta_time:{arguments:, default_arguments:}, get_process_priority:{arguments:, default_arguments:}, get_property_list:{arguments:, default_arguments:}, get_scene_instance_load_placeholder:{arguments:, default_arguments:}, get_script:{arguments:, default_arguments:}, get_signal_connection_list:{arguments:a, default_arguments:a}, get_signal_list:{arguments:, default_arguments:}, get_tree:{arguments:, default_arguments:}, get_viewport:{arguments:, default_arguments:}, has_meta:{arguments:a, default_arguments:a}, has_method:{arguments:a, default_arguments:a}, has_node:{arguments:a, default_arguments:a}, has_node_and_resource:{arguments:a, default_arguments:a}, has_signal:{arguments:a, default_arguments:a}, has_user_signal:{arguments:a, default_arguments:a}, is_a_parent_of:{arguments:a, default_arguments:a}, is_blocking_signals:{arguments:, default_arguments:}, is_class:{arguments:a, default_arguments:a}, is_connected:{arguments:a, b, c, default_arguments:a, b, c}, is_displayed_folded:{arguments:, default_arguments:}, is_greater_than:{arguments:a, default_arguments:a}, is_in_group:{arguments:a, default_arguments:a}, is_inside_tree:{arguments:, default_arguments:}, is_network_master:{arguments:, default_arguments:}, is_physics_processing:{arguments:, default_arguments:}, is_physics_processing_internal:{arguments:, default_arguments:}, is_processing:{arguments:, default_arguments:}, is_processing_input:{arguments:, default_arguments:}, is_processing_internal:{arguments:, default_arguments:}, is_processing_unhandled_input:{arguments:, default_arguments:}, is_processing_unhandled_key_input:{arguments:, default_arguments:}, is_queued_for_deletion:{arguments:, default_arguments:}, math_fight:{arguments:, default_arguments:}, move_child:{arguments:a, b, default_arguments:a, b}, multiply:{arguments:a, b, default_arguments:a, b}, notification:{arguments:a, b, default_arguments:a, b = False}, pi:{arguments:, default_arguments:}, print_stray_nodes:{arguments:, default_arguments:}, print_tree:{arguments:, default_arguments:}, print_tree_pretty:{arguments:, default_arguments:}, propagate_call:{arguments:a, b, c, default_arguments:a, b = [], c = False}, propagate_notification:{arguments:a, default_arguments:a}, property_list_changed_notify:{arguments:, default_arguments:}, queue_free:{arguments:, default_arguments:}, raise:{arguments:, default_arguments:}, remove_and_skip:{arguments:, default_arguments:}, remove_child:{arguments:a, default_arguments:a}, remove_from_group:{arguments:a, default_arguments:a}, remove_meta:{arguments:a, default_arguments:a}, replace_by:{arguments:a, b, default_arguments:a, b = False}, request_ready:{arguments:, default_arguments:}, rpc:{arguments:a, default_arguments:a}, rpc_config:{arguments:a, b, default_arguments:a, b}, rpc_id:{arguments:a, b, default_arguments:a, b}, rpc_unreliable:{arguments:a, default_arguments:a}, rpc_unreliable_id:{arguments:a, b, default_arguments:a, b}, rset:{arguments:a, b, default_arguments:a, b}, rset_config:{arguments:a, b, default_arguments:a, b}, rset_id:{arguments:a, b, c, default_arguments:a, b, c}, rset_unreliable:{arguments:a, b, default_arguments:a, b}, rset_unreliable_id:{arguments:a, b, c, default_arguments:a, b, c}, set:{arguments:a, b, default_arguments:a, b}, set_block_signals:{arguments:a, default_arguments:a}, set_custom_multiplayer:{arguments:a, default_arguments:a}, set_deferred:{arguments:a, b, default_arguments:a, b}, set_display_folded:{arguments:a, default_arguments:a}, set_filename:{arguments:a, default_arguments:a}, set_indexed:{arguments:a, b, default_arguments:a, b}, set_message_translation:{arguments:a, default_arguments:a}, set_meta:{arguments:a, b, default_arguments:a, b}, set_name:{arguments:a, default_arguments:a}, set_network_master:{arguments:a, b, default_arguments:a, b = True}, set_owner:{arguments:a, default_arguments:a}, set_pause_mode:{arguments:a, default_arguments:a}, set_physics_process:{arguments:a, default_arguments:a}, set_physics_process_internal:{arguments:a, default_arguments:a}, set_process:{arguments:a, default_arguments:a}, set_process_input:{arguments:a, default_arguments:a}, set_process_internal:{arguments:a, default_arguments:a}, set_process_priority:{arguments:a, default_arguments:a}, set_process_unhandled_input:{arguments:a, default_arguments:a}, set_process_unhandled_key_input:{arguments:a, default_arguments:a}, set_scene_instance_load_placeholder:{arguments:a, default_arguments:a}, set_script:{arguments:a, default_arguments:a}, subtract:{arguments:a, b, default_arguments:a, b}, sum:{arguments:a, default_arguments:a}, to_string:{arguments:, default_arguments:}, tr:{arguments:a, default_arguments:a}, update_configuration_warning:{arguments:, default_arguments:}} != |Dictionary| {_enter_tree:{arguments:, default_arguments:}, _exit_tree:{arguments:, default_arguments:}, _get:{arguments:a, default_arguments:a}, _get_configuration_warning:{arguments:, default_arguments:}, _get_editor_description:{arguments:, default_arguments:}, _get_import_path:{arguments:, default_arguments:}, _get_property_list:{arguments:, default_arguments:}, _init:{arguments:, default_arguments:}, _input:{arguments:a, default_arguments:a}, _notification:{arguments:a, default_arguments:a}, _physics_process:{arguments:a, default_arguments:a}, _process:{arguments:a, default_arguments:a}, _ready:{arguments:, default_arguments:}, _set:{arguments:a, b, default_arguments:a, b}, _set_editor_description:{arguments:a, default_arguments:a}, _set_import_path:{arguments:a, default_arguments:a}, _to_string:{arguments:, default_arguments:}, _unhandled_input:{arguments:a, default_arguments:a}, _unhandled_key_input:{arguments:a, default_arguments:a}, add:{arguments:a, b, default_arguments:a, b}, add_child:{arguments:a, b, default_arguments:a, b = False}, add_child_below_node:{arguments:a, b, c, default_arguments:a, b, c = False}, add_to_group:{arguments:a, b, default_arguments:a, b = False}, add_user_signal:{arguments:a, b, default_arguments:a, b = []}, call:{arguments:a, default_arguments:a}, call_deferred:{arguments:a, default_arguments:a}, callv:{arguments:a, b, default_arguments:a, b}, can_process:{arguments:, default_arguments:}, can_translate_messages:{arguments:, default_arguments:}, connect:{arguments:a, b, c, d, e, default_arguments:a, b, c, d = [], e = 0}, disconnect:{arguments:a, b, c, default_arguments:a, b, c}, divide:{arguments:a, b, default_arguments:a, b}, duplicate:{arguments:a, default_arguments:a = 15}, emit_signal:{arguments:a, default_arguments:a}, find_node:{arguments:a, b, c, default_arguments:a, b = True, c = True}, find_parent:{arguments:a, default_arguments:a}, free:{arguments:, default_arguments:}, get:{arguments:a, default_arguments:a}, get_child:{arguments:a, default_arguments:a}, get_child_count:{arguments:, default_arguments:}, get_children:{arguments:, default_arguments:}, get_class:{arguments:, default_arguments:}, get_custom_multiplayer:{arguments:, default_arguments:}, get_filename:{arguments:, default_arguments:}, get_groups:{arguments:, default_arguments:}, get_incoming_connections:{arguments:, default_arguments:}, get_index:{arguments:, default_arguments:}, get_indexed:{arguments:a, default_arguments:a}, get_instance_id:{arguments:, default_arguments:}, get_meta:{arguments:a, default_arguments:a}, get_meta_list:{arguments:, default_arguments:}, get_method_list:{arguments:, default_arguments:}, get_multiplayer:{arguments:, default_arguments:}, get_name:{arguments:, default_arguments:}, get_network_master:{arguments:, default_arguments:}, get_node:{arguments:a, default_arguments:a}, get_node_and_resource:{arguments:a, default_arguments:a}, get_node_or_null:{arguments:a, default_arguments:a}, get_owner:{arguments:, default_arguments:}, get_parent:{arguments:, default_arguments:}, get_path:{arguments:, default_arguments:}, get_path_to:{arguments:a, default_arguments:a}, get_pause_mode:{arguments:, default_arguments:}, get_physics_process_delta_time:{arguments:, default_arguments:}, get_position_in_parent:{arguments:, default_arguments:}, get_process_delta_time:{arguments:, default_arguments:}, get_process_priority:{arguments:, default_arguments:}, get_property_list:{arguments:, default_arguments:}, get_scene_instance_load_placeholder:{arguments:, default_arguments:}, get_script:{arguments:, default_arguments:}, get_signal_connection_list:{arguments:a, default_arguments:a}, get_signal_list:{arguments:, default_arguments:}, get_tree:{arguments:, default_arguments:}, get_viewport:{arguments:, default_arguments:}, has_meta:{arguments:a, default_arguments:a}, has_method:{arguments:a, default_arguments:a}, has_node:{arguments:a, default_arguments:a}, has_node_and_resource:{arguments:a, default_arguments:a}, has_signal:{arguments:a, default_arguments:a}, has_user_signal:{arguments:a, default_arguments:a}, is_a_parent_of:{arguments:a, default_arguments:a}, is_blocking_signals:{arguments:, default_arguments:}, is_class:{arguments:a, default_arguments:a}, is_connected:{arguments:a, b, c, default_arguments:a, b, c}, is_displayed_folded:{arguments:, default_arguments:}, is_greater_than:{arguments:a, default_arguments:a}, is_in_group:{arguments:a, default_arguments:a}, is_inside_tree:{arguments:, default_arguments:}, is_network_master:{arguments:, default_arguments:}, is_physics_processing:{arguments:, default_arguments:}, is_physics_processing_internal:{arguments:, default_arguments:}, is_processing:{arguments:, default_arguments:}, is_processing_input:{arguments:, default_arguments:}, is_processing_internal:{arguments:, default_arguments:}, is_processing_unhandled_input:{arguments:, default_arguments:}, is_processing_unhandled_key_input:{arguments:, default_arguments:}, is_queued_for_deletion:{arguments:, default_arguments:}, math_fight:{arguments:, default_arguments:}, move_child:{arguments:a, b, default_arguments:a, b}, multiply:{arguments:a, b, default_arguments:a, b}, notification:{arguments:a, b, default_arguments:a, b = False}, pi:{arguments:, default_arguments:}, print_stray_nodes:{arguments:, default_arguments:}, print_tree:{arguments:, default_arguments:}, print_tree_pretty:{arguments:, default_arguments:}, propagate_call:{arguments:a, b, c, default_arguments:a, b = [], c = False}, propagate_notification:{arguments:a, default_arguments:a}, property_list_changed_notify:{arguments:, default_arguments:}, queue_free:{arguments:, default_arguments:}, raise:{arguments:, default_arguments:}, remove_and_skip:{arguments:, default_arguments:}, remove_child:{arguments:a, default_arguments:a}, remove_from_group:{arguments:a, default_arguments:a}, remove_meta:{arguments:a, default_arguments:a}, replace_by:{arguments:a, b, default_arguments:a, b = False}, request_ready:{arguments:, default_arguments:}, rpc:{arguments:a, default_arguments:a}, rpc_config:{arguments:a, b, default_arguments:a, b}, rpc_id:{arguments:a, b, default_arguments:a, b}, rpc_unreliable:{arguments:a, default_arguments:a}, rpc_unreliable_id:{arguments:a, b, default_arguments:a, b}, rset:{arguments:a, b, default_arguments:a, b}, rset_config:{arguments:a, b, default_arguments:a, b}, rset_id:{arguments:a, b, c, default_arguments:a, b, c}, rset_unreliable:{arguments:a, b, default_arguments:a, b}, rset_unreliable_id:{arguments:a, b, c, default_arguments:a, b, c}, set:{arguments:a, b, default_arguments:a, b}, set_block_signals:{arguments:a, default_arguments:a}, set_custom_multiplayer:{arguments:a, default_arguments:a}, set_deferred:{arguments:a, b, default_arguments:a, b}, set_display_folded:{arguments:a, default_arguments:a}, set_filename:{arguments:a, default_arguments:a}, set_indexed:{arguments:a, b, default_arguments:a, b}, set_message_translation:{arguments:a, default_arguments:a}, set_meta:{arguments:a, b, default_arguments:a, b}, set_name:{arguments:a, default_arguments:a}, set_network_master:{arguments:a, b, default_arguments:a, b = True}, set_owner:{arguments:a, default_arguments:a}, set_pause_mode:{arguments:a, default_arguments:a}, set_physics_process:{arguments:a, default_arguments:a}, set_physics_process_internal:{arguments:a, default_arguments:a}, set_process:{arguments:a, default_arguments:a}, set_process_input:{arguments:a, default_arguments:a}, set_process_internal:{arguments:a, default_arguments:a}, set_process_priority:{arguments:a, default_arguments:a}, set_process_unhandled_input:{arguments:a, default_arguments:a}, set_process_unhandled_key_input:{arguments:a, default_arguments:a}, set_scene_instance_load_placeholder:{arguments:a, default_arguments:a}, set_script:{arguments:a, default_arguments:a}, subtract:{arguments:a, b, default_arguments:a, b}, sum:{arguments:a, default_arguments:a}, to_string:{arguments:, default_arguments:}, tr:{arguments:a, default_arguments:a}, update_configuration_warning:{arguments:, default_arguments:}}",
"success": true
} ],
"context": "When we create two of it for the same script",
"fullname": "test_When_we_create_two_of_it_for_the_same_script",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|Object| [Node:2640] is equal to |Object| [Node:2640]",
"context": "Then we get the same double back",
"expected": "|Object| [Node:2640] is equal to |Object| [Node:2640]",
"success": true
} ],
"context": "When we call the double the second time",
"fullname": "test_When_we_call_double_a_second_time_on",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 3,
"path": "res://tests/integration/script_director.test.gd",
"source": {
"containers": [ "res://tests/integration", "res://tests" ],
"method": "",
"path": "res://tests/integration/script_director.test.gd",
"tags": [  ],
"test": ExtResource( 13 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 3
}, {
"context": "Given a Scene Director",
"methods": [ {
"assertions": [ {
"actual": "|Dictionary| {.:[Reference:2510], A:[Reference:2511], A/B:[Reference:2513], C:[Reference:2512], C/D:[Reference:2514]} is not equal to |Dictionary| {.:[Reference:2543], A:[Reference:2544], A/B:[Reference:2546], C:[Reference:2545], C/D:[Reference:2547]}",
"context": "Then they do not share resources",
"expected": "|Dictionary| {.:[Reference:2510], A:[Reference:2511], A/B:[Reference:2513], C:[Reference:2512], C/D:[Reference:2514]} != |Dictionary| {.:[Reference:2543], A:[Reference:2544], A/B:[Reference:2546], C:[Reference:2545], C/D:[Reference:2547]}",
"success": true
} ],
"context": "When we create two of it for the same scene",
"fullname": "test_When_we_create_two_of_it_for_the_same_scene",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 999 is equal to |int| 999",
"context": "Then we get the stubbed return value",
"expected": "|int| 999 is equal to |int| 999",
"success": true
} ],
"context": "When we call a method from a child node that we stubbed",
"fullname": "test_When_we_call_a_method_from_a_child_node_that_we_stubbed",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 9999 is equal to |int| 9999",
"context": "Then we get the stubbed return value",
"expected": "|int| 9999 is equal to |int| 9999",
"success": true
} ],
"context": "When we call a method from the root node that we stubbed",
"fullname": "test_When_we_call_a_method_from_the_root_node_that_we_stubbed",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 99 is equal to |int| 99",
"context": "Then we get the stubbed return value",
"expected": "|int| 99 is equal to |int| 99",
"success": true
} ],
"context": "When we call a method from a grandchild node that we stubbed",
"fullname": "test_When_we_call_a_method_from_a_grandchild_node_that_we_stubbed",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|NodePath| A is equal to |NodePath| A",
"context": "We have the correct NodePath Set",
"expected": "|NodePath| A is equal to |NodePath| A",
"success": true
} ],
"context": "When we add it to the tree it runs",
"fullname": "test_When_we_add_it_to_the_tree_it_runs",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 5,
"path": "res://tests/integration/scene_director.test.gd",
"source": {
"containers": [ "res://tests/integration", "res://tests" ],
"method": "",
"path": "res://tests/integration/scene_director.test.gd",
"tags": [  ],
"test": ExtResource( 4 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 5
}, {
"context": "Given A File Assertion",
"methods": [ {
"assertions": [ {
"actual": "res://somefile.gd does not exist",
"context": "Then it passes",
"expected": "res://somefile.gd does not exist",
"success": true
} ],
"context": "When calling asserts.file_does_not_exist when there is no file",
"fullname": "test_when_calling_file_does_not_exist_when_there_is_no_file",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "res://tests/unit/file.test.gd exists",
"context": "Then it passes",
"expected": "res://tests/unit/file.test.gd exists",
"success": true
} ],
"context": "When calling asserts.file_exists when the file is this suite",
"fullname": "test_when_calling_file_exists_when_file_is_self",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": " does not exist",
"context": "Then it passes",
"expected": " does not exist",
"success": true
} ],
"context": "When calling asserts file does not exist when path is empty",
"fullname": "test_when_calling_file_does_not_exist_when_path_is_empty",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 3,
"path": "res://tests/unit/file.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/file.test.gd",
"tags": [  ],
"test": ExtResource( 3 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 3
}, {
"context": "Given a Boolean Assertion",
"methods": [ {
"assertions": [ {
"actual": "|bool| True != false",
"context": "",
"expected": "|bool| True == false",
"success": false
} ],
"context": " intentional failure",
"fullname": "test_intentional_failure",
"passed": 0,
"success": false,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then it passes",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When calling asserts.is_true(true)",
"fullname": "test_when_calling_asserts_is_true",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| False == false",
"context": "Then it passes",
"expected": "|bool| False == false",
"success": true
} ],
"context": "When calling asserts.is_false(false)",
"fullname": "test_when_calling_asserts_is_false",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 2,
"path": "res://tests/unit/boolean.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/boolean.test.gd",
"tags": [  ],
"test": ExtResource( 11 ),
"yield_time": 0.0
},
"success": false,
"time_taken": 0.0,
"total": 3
}, {
"context": "Given a Null Assertion",
"methods": [ {
"assertions": [ {
"actual": "|null| Null == null",
"context": "Then it passes",
"expected": "|null| Null == null",
"success": true
} ],
"context": "When calling asserts.is_null(null)",
"fullname": "test_when_calling_null_is_null",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|Object| [Node:2798] != null",
"context": "Then it passes",
"expected": "|Object| [Node:2798] != null",
"success": true
} ],
"context": "When calling Node is not null",
"fullname": "test_when_calling_node_is_not_null",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|Object| [Deleted Object] == null",
"context": "A Freed Node is null in Engine 3.2.2 or greater",
"expected": "|Object| [Deleted Object] == null",
"success": true
} ],
"context": "When calling freed object is null",
"fullname": "test_when_calling_freed_object_is_not_null",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 3,
"path": "res://tests/unit/null.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/null.test.gd",
"tags": [  ],
"test": ExtResource( 12 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 3
}, {
"context": "Given an Equality Assertion",
"methods": [ {
"assertions": [ {
"actual": "|int| 1 is equal to |int| 1",
"context": "Then it passes",
"expected": "|int| 1 is equal to |int| 1",
"success": true
} ],
"context": "When calling asserts.is_equal(1, 1)",
"fullname": "test_when_calling_is_equal",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 2 is equal or greater |int| 1",
"context": "Then it passes",
"expected": "|int| 2 is equal or greater |int| 1",
"success": true
} ],
"context": "When calling asserts.is_equal_or_greater_than(2, 1)",
"fullname": "test_when_calling_is_equal_or_greater_than",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 2 is greater than |int| 1",
"context": "Then it passes",
"expected": "|int| 2 is greater than |int| 1",
"success": true
} ],
"context": "When calling asserts.is_greater_than(2, 1)",
"fullname": "test_when_calling_is_greater_than",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 1 is less than |int| 2",
"context": "Then it passes",
"expected": "|int| 1 is less than |int| 2",
"success": true
} ],
"context": "When calling asserts.is_less_than(2, 1)",
"fullname": "test_when_calling_is_less_than",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 5 is not equal to |int| 6",
"context": "Then it passes",
"expected": "|int| 5 != |int| 6",
"success": true
} ],
"context": "When callign asserts.is_not_equal(5, 6)",
"fullname": "test_when_calling_is_not_equal",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 1 is equal or less than |int| 1",
"context": "Then it passes!",
"expected": "|int| 1 is equal or less than |int| 1",
"success": true
} ],
"context": "When calling asserts.is_equal_or_less_than(1, 1)",
"fullname": "test_when_calling_is_equal_or_less_than_with_equal_values",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 1 is equal or greater |int| 1",
"context": "Then it passes",
"expected": "|int| 1 is equal or greater |int| 1",
"success": true
} ],
"context": "When calling asserts.is_equal_or_greater_than(1, 1)",
"fullname": "test_when_calling_is_equal_or_greater_than_with_equal_values",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 7,
"path": "res://tests/unit/equality.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/equality.test.gd",
"tags": [  ],
"test": ExtResource( 8 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 7
}, {
"context": "Given the Addition Operator",
"methods": [ {
"assertions": [ {
"actual": "|int| 4 is equal to |int| 4",
"context": "",
"expected": "|int| 4 is equal to |int| 4",
"success": true
} ],
"context": "When we add 2 to 2 we get 4",
"fullname": "test_add",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 8 is equal to |int| 8",
"context": "",
"expected": "|int| 8 is equal to |int| 8",
"success": true
} ],
"context": "When we add 5 to 3 we get 8",
"fullname": "test_add",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 13 is equal to |int| 13",
"context": "",
"expected": "|int| 13 is equal to |int| 13",
"success": true
} ],
"context": "When we add 7 to 6 we get 13",
"fullname": "test_add",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 0 is equal to |int| 0",
"context": "",
"expected": "|int| 0 is equal to |int| 0",
"success": true
} ],
"context": "When we subtract 2 from 2 we get 0",
"fullname": "test_subtract",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 2 is equal to |int| 2",
"context": "",
"expected": "|int| 2 is equal to |int| 2",
"success": true
} ],
"context": "When we subtract 5 from 3 we get 2",
"fullname": "test_subtract",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 1 is equal to |int| 1",
"context": "",
"expected": "|int| 1 is equal to |int| 1",
"success": true
} ],
"context": "When we subtract 7 from 6 we get 1",
"fullname": "test_subtract",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 6,
"path": "res://tests/unit/parameters.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/parameters.test.gd",
"tags": [  ],
"test": ExtResource( 16 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 6
}, {
"context": "Given a Test Double",
"methods": [ {
"assertions": [ {
"actual": "|int| 9999 is equal to |int| 9999",
"context": "Then it returns the corresponding value when the pattern matches",
"expected": "|int| 9999 is equal to |int| 9999",
"success": true
} ],
"context": "When we call a method that was stubbed with an argument pattern that includes a non-primitive object",
"fullname": "test_When_we_call_a_method_that_was_stubbed_with_an_argument_pattern_that_includes_a_non_primitive_object",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 9999 is equal to |int| 9999",
"context": "Then it returns the corresponding value when the partial pattern matches",
"expected": "|int| 9999 is equal to |int| 9999",
"success": true
} ],
"context": "When we call a method that was stubbed with a partial (ie using any()) argument pattern",
"fullname": "test_When_we_call_a_method_that_was_stubbed_with_a_partial_argument_pattern",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|null| Null == null",
"context": "Then we get the stubbed value back",
"expected": "|null| Null == null",
"success": true
} ],
"context": "When we stub a method of a doubled inner class",
"fullname": "test_When_we_stub_a_method_of_a_double_inner_class",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|String| Jackie is equal to |String| Jackie",
"context": "Then we can double the object successfully",
"expected": "|String| Jackie is equal to |String| Jackie",
"success": true
} ],
"context": "When we pass in dependecies on direct",
"fullname": "test_When_we_pass_in_deps_on_direct",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 99 is equal to |int| 99",
"context": "Then it returns a value",
"expected": "|int| 99 is equal to |int| 99",
"success": true
} ],
"context": "When we pass a funcref as a subcall that returns",
"fullname": "test_When_we_pass_a_funcref_as_a_subcall_that_returns_a_value",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 99 is equal to |int| 99",
"context": "Then it affects the state of the double",
"expected": "|int| 99 is equal to |int| 99",
"success": true
} ],
"context": "When we pass a funcref as a subcall",
"fullname": "test_When_we_pass_a_funcref_as_a_subcall",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|Array| [10, 5] is equal to |Array| [10, 5]",
"context": "Then it returns a value",
"expected": "|Array| [10, 5] is equal to |Array| [10, 5]",
"success": true
} ],
"context": "When we pass an Object with a call_func function",
"fullname": "test_When_we_pass_an_object_with_callfunc_method_as_a_subcall",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 4 is equal to |int| 4",
"context": "Then it calls its super implementation by default",
"expected": "|int| 4 is equal to |int| 4",
"success": true
}, {
"actual": "|int| 9999 is equal to |int| 9999",
"context": "Then it does not call its super implementation when arguments patterns match a different return value",
"expected": "|int| 9999 is equal to |int| 9999",
"success": true
} ],
"context": "When we call a method that we stubbed to call its super implementation by default",
"fullname": "test_When_we_call_a_method_that_we_stubbed_to_call_its_super_implementation_by_default",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|int| 4 is equal to |int| 4",
"context": "Then we get the correct result",
"expected": "|int| 4 is equal to |int| 4",
"success": true
} ],
"context": "When we call an add(x, y) method that we haven't directed",
"fullname": "test_When_we_call_an_add_method_that_we_have_not_directed",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then it returns true",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we call a method that we have stubbed to return true",
"fullname": "test_When_we_call_a_method_that_we_have_stubbed_to_return_true",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|Object| [Node:2839] is equal to |Object| [Node:2839]",
"context": "Then it returns that same node",
"expected": "|Object| [Node:2839] is equal to |Object| [Node:2839]",
"success": true
} ],
"context": "When we call a method that we have stubbed to return a node",
"fullname": "test_When_we_call_a_method_that_we_have_stubbed_to_return_a_node",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|float| 6.283185 is equal to |float| 6.283185",
"context": "Then we can call the static methods of that inner double",
"expected": "|float| 6.283185 is equal to |float| 6.283185",
"success": true
} ],
"context": "When we add an doubled inner class to it",
"fullname": "test_When_we_add_a_doubled_inner_class_to_it",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "(1, 1) is builtin: Vector2",
"context": "Then we can call methods on it",
"expected": "(1, 1) is builtin: Vector2",
"success": true
} ],
"context": "When we double an inner class",
"fullname": "test_When_we_double_an_inner_class",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 100 is equal to |int| 100",
"context": "Then it returns the default stubbed value when the arguments don't match any pattern",
"expected": "|int| 100 is equal to |int| 100",
"success": true
}, {
"actual": "|int| 1000 is equal to |int| 1000",
"context": "Then it returns the the corresponding value to the pattern the arguments matched",
"expected": "|int| 1000 is equal to |int| 1000",
"success": true
} ],
"context": "When we call a method that was stubbed to return different values based on argument patterns",
"fullname": "test_When_we_call_a_method_that_was_stubbed_to_return_different_values_based_on_argument_patterns",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "add was called",
"context": "Then we can see that it was called at least once",
"expected": "add was called",
"success": true
} ],
"context": "When we call a method that we are spying on",
"fullname": "test_When_we_call_a_method_that_we_are_spying_on",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "method: add was called with arguments: [10, 10]",
"context": "Then we can see that it was called with those arguments",
"expected": "method: add was called with arguments: [10, 10]",
"success": true
} ],
"context": "When we pass arguments to a method call that we are spying on",
"fullname": "test_When_we_pass_arguments_to_a_method_call_that_we_are_spying_on",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| True is equal to |bool| True",
"context": "Then we can call it",
"expected": "|bool| True is equal to |bool| True",
"success": true
} ],
"context": "When we stubbed a keyworded method by passing in the correct keyword",
"fullname": "test_When_we_stubbed_a_keyword_method_by_passing_in_the_correct_keyword",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|String| Jackie is equal to |String| Jackie",
"context": "Then we can double the object successfully",
"expected": "|String| Jackie is equal to |String| Jackie",
"success": true
} ],
"context": "When we pass in dependecies on double",
"fullname": "test_When_we_pass_in_deps_on_double",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|null| Null == null",
"context": "Then we get null",
"expected": "|null| Null == null",
"success": true
} ],
"context": "When we call a method that we have dummied",
"fullname": "test_When_we_call_a_method_that_we_have_dummied",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 19,
"path": "res://tests/integration/test_double.test.gd",
"source": {
"containers": [ "res://tests/integration", "res://tests" ],
"method": "",
"path": "res://tests/integration/test_double.test.gd",
"tags": [  ],
"test": ExtResource( 14 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 19
}, {
"context": "Given A Range Assertion",
"methods": [ {
"assertions": [ {
"actual": "10 is not in range(0, 10)",
"context": "Then it passes",
"expected": "10 is not in range(0, 10)",
"success": true
} ],
"context": "When calling is (10) not in range (in range(0, 10)",
"fullname": "test_when_calling_is_not_in_range",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "0 is in range(0, 10)",
"context": "Then it passes",
"expected": "0 is in range(0, 10)",
"success": true
} ],
"context": "When calling is (0) in range(0, 10)",
"fullname": "test_when_calling_is_in_range",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 2,
"path": "res://tests/unit/range.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/range.test.gd",
"tags": [  ],
"test": ExtResource( 15 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 2
}, {
"context": "Given an Object Assertion",
"methods": [ {
"assertions": [ {
"actual": "[Node:2834] is not freed",
"context": "Then it passes",
"expected": "[Node:2834] is not freed",
"success": true
} ],
"context": "When calling asserts.is_not_freed(unfreed_object)",
"fullname": "test_when_calling_unfreed_object_is_not_freed",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is freed from memory",
"context": "Then it passes",
"expected": "Null is freed from memory",
"success": true
} ],
"context": "When calling asserts.is_freed(freed_object",
"fullname": "test_when_calling_freed_object_is_freed",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:2822] does not have meta: bad_meta",
"context": "Then it passes",
"expected": "[Node:2822] does not have meta: bad_meta",
"success": true
} ],
"context": "When calling asserts.object_does_not_have_meta()",
"fullname": "test_when_calling_does_not_have_meta",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:2822] has meta: dummy",
"context": "Then it passes",
"expected": "[Node:2822] has meta: dummy",
"success": true
}, {
"actual": "[Node:2822] has meta: dummy",
"context": "Then it passes",
"expected": "[Node:2822] has meta: dummy",
"success": true
} ],
"context": "When calling asserts.object_has_meta() after adding metadata",
"fullname": "test_when_calling_has_meta_after_adding_metadata",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "[Node:2887] is queued for deletion",
"context": "Then it passes",
"expected": "[Node:2887] is queued for deletion",
"success": true
} ],
"context": "When calling asserts.object_is_queued for deletion after calling queue_free",
"fullname": "test_when_calling_obj_is_queued_for_deletion_after_calling_queue_free",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:2822].builtin_dummy is connected to [Node:2822].title",
"context": "Then it passes",
"expected": "[Node:2822].builtin_dummy is connected to [Node:2822].title",
"success": true
} ],
"context": "When calling asserts object is connected with a valid connection",
"fullname": "test_when_calling_obj_is_connected_with_a_real_connection",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:2822].builtin_dummy is not connected to [Node:2822].title",
"context": "Then it passes",
"expected": "[Node:2822].builtin_dummy is not connected to [Node:2822].title",
"success": true
} ],
"context": "When calling asserts object is not connected with an invalid connection",
"fullname": "test_when_calling_obj_is_not_connected_with_an_invalid_connection",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:2922] is blocking signals",
"context": "Then it passes",
"expected": "[Node:2922] is blocking signals",
"success": true
} ],
"context": "When calling is blocking signals while blocking signals",
"fullname": "test_is_blocking_signals",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:2934] is not blocking signals",
"context": "Then it passes",
"expected": "[Node:2934] is not blocking signals",
"success": true
} ],
"context": "When calling is not blocking signals while not blocking signals",
"fullname": "test_is_not_blocking_signals",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:2822] does not have meta: confusing",
"context": "Then it passes",
"expected": "[Node:2822] does not have meta: confusing",
"success": true
} ],
"context": "When calling asserts.object_has_meta with real key but null val",
"fullname": "test_when_calling_does_not_have_meta_real_key_null_value_pair",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:2822] has user signal: dummy_signal",
"context": "Then it passes",
"expected": "[Node:2822] has user signal: dummy_signal",
"success": true
} ],
"context": "When calling obj_has_user_signal after adding a signal",
"fullname": "test_when_calling_has_user_signal_after_adding_a_signal",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:2822] does not have user signal: false_signal",
"context": "Then it passes",
"expected": "[Node:2822] does not have user signal: false_signal",
"success": true
} ],
"context": "When calling obj_does_not_have_user_signal with fake signal",
"fullname": "test_when_calling_does_not_have_user_signal",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:2822] does not have user signal: builtin_dummy",
"context": "Then it passes",
"expected": "[Node:2822] does not have user signal: builtin_dummy",
"success": true
} ],
"context": "When calling does not have user signal with class signal",
"fullname": "test_when_calling_does_not_have_user_signal_with_class_signal_constant",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:2822] has method: title",
"context": "Then it passes",
"expected": "[Node:2822] has method: title",
"success": true
} ],
"context": "When calling has_method('title')",
"fullname": "test_when_calling_has_method_title",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:2970] is not queued for deletion",
"context": "Then it passes",
"expected": "[Node:2970] is not queued for deletion",
"success": true
} ],
"context": "When calling asserts.object_is_not_for_queued_deletion after not calling queue free()",
"fullname": "test_when_calling_obj_is_not_for_queued_deletion_after_not_calling_queue_free",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 15,
"path": "res://tests/unit/object.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/object.test.gd",
"tags": [  ],
"test": ExtResource( 7 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 15
}, {
"context": "Given an Is Instance of class/type Assertion",
"methods": [ {
"assertions": [ {
"actual": "|Plane| 0, 0, 0, 0 != null",
"context": "plane is not null",
"expected": "|Plane| 0, 0, 0, 0 != null",
"success": true
}, {
"actual": "0, 0, 0, 0 is builtin: Plane",
"context": "then it passes",
"expected": "0, 0, 0, 0 is builtin: Plane",
"success": true
} ],
"context": "When calling asserts.is_Plane(plane: Plane())",
"fullname": "test_when_calling_is_Plane",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|AABB| 0, 0, 0 - 0, 0, 0 != null",
"context": "AABB is not null",
"expected": "|AABB| 0, 0, 0 - 0, 0, 0 != null",
"success": true
}, {
"actual": "0, 0, 0 - 0, 0, 0 is builtin: AABB",
"context": "Then it passes",
"expected": "0, 0, 0 - 0, 0, 0 is builtin: AABB",
"success": true
} ],
"context": "When calling asserts.is_AABB(aabb: AABB)",
"fullname": "test_when_calling_is_AABB",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "{} is builtin: Dictionary",
"context": "Then it passes",
"expected": "{} is builtin: Dictionary",
"success": true
} ],
"context": "When calling asserts.is_Dictionary({})",
"fullname": "test_when_calling_is_Dictionary",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|PoolVector2Array| [] != null",
"context": "vec2s is not null",
"expected": "|PoolVector2Array| [] != null",
"success": true
}, {
"actual": "[] is builtin: PoolVector2Array",
"context": "Then it passes",
"expected": "[] is builtin: PoolVector2Array",
"success": true
} ],
"context": "When calling is asserts.is_PoolVector2Array(vec2s: PoolVector2Array)",
"fullname": "test_when_calling_is_PoolVector2Array",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|Rect2| (0, 0, 0, 0) != null",
"context": "rect2 is not null",
"expected": "|Rect2| (0, 0, 0, 0) != null",
"success": true
}, {
"actual": "(0, 0, 0, 0) is builtin: Rect2",
"context": "Then it passes",
"expected": "(0, 0, 0, 0) is builtin: Rect2",
"success": true
} ],
"context": "When calling asserts.is_Rect2(rect2: Rect2)",
"fullname": "test_when_calling_is_Rect2",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|PoolVector3Array| [] != null",
"context": "vec3s is not null",
"expected": "|PoolVector3Array| [] != null",
"success": true
}, {
"actual": "[] is builtin: PoolVector3Array",
"context": "Then it passes",
"expected": "[] is builtin: PoolVector3Array",
"success": true
} ],
"context": "When calling is asserts.is_PoolVector3Array(vec3s: PoolVector3Array)",
"fullname": "test_when_calling_is_PoolVector3Array",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|PoolRealArray| [] != null",
"context": "reals is not null",
"expected": "|PoolRealArray| [] != null",
"success": true
}, {
"actual": "[] is builtin: PoolRealArray",
"context": "Then it passes",
"expected": "[] is builtin: PoolRealArray",
"success": true
} ],
"context": "When calling is asserts.is_PoolRealArray(reals: PoolRealArray)",
"fullname": "test_when_calling_is_PoolRealArray",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|Quat| (0, 0, 0, 1) != null",
"context": "quat is not null",
"expected": "|Quat| (0, 0, 0, 1) != null",
"success": true
}, {
"actual": "(0, 0, 0, 1) is builtin: Quat",
"context": "Then it passes",
"expected": "(0, 0, 0, 1) is builtin: Quat",
"success": true
} ],
"context": "When calling asserts.is_Quat(quat: Quat)",
"fullname": "test_when_calling_is_Quat",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|RID| [RID] != null",
"context": "rid is not null",
"expected": "|RID| [RID] != null",
"success": true
}, {
"actual": "[RID] is builtin: RID",
"context": "Then it passes",
"expected": "[RID] is builtin: RID",
"success": true
} ],
"context": "When calling asserts.is_RID(rid: RID)",
"fullname": "test_when_calling_is_RID",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|Color| 0,0,0,1 != null",
"context": "color is not null",
"expected": "|Color| 0,0,0,1 != null",
"success": true
}, {
"actual": "0,0,0,1 is builtin: Color",
"context": "Then it passes",
"expected": "0,0,0,1 is builtin: Color",
"success": true
} ],
"context": "When calling asserts.is_color(color: Color)",
"fullname": "test_when_calling_is_Color",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|String|  != null",
"context": "strs is not null",
"expected": "|String|  != null",
"success": true
}, {
"actual": " is builtin: String",
"context": "Then it passes",
"expected": " is builtin: String",
"success": true
} ],
"context": "When calling asserts.is_string(strs: String)",
"fullname": "test_when_calling_is_string",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|Transform| 1, 0, 0, 0, 1, 0, 0, 0, 1 - 0, 0, 0 != null",
"context": "transform is not null",
"expected": "|Transform| 1, 0, 0, 0, 1, 0, 0, 0, 1 - 0, 0, 0 != null",
"success": true
}, {
"actual": "1, 0, 0, 0, 1, 0, 0, 0, 1 - 0, 0, 0 is builtin: Transform",
"context": "Then it passes",
"expected": "1, 0, 0, 0, 1, 0, 0, 0, 1 - 0, 0, 0 is builtin: Transform",
"success": true
} ],
"context": "When calling asserts.is_Transform(transform: Transform)",
"fullname": "test_when_calling_is_Transform",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|Transform2D| ((1, 0), (0, 1), (0, 0)) != null",
"context": "transform2D is not null",
"expected": "|Transform2D| ((1, 0), (0, 1), (0, 0)) != null",
"success": true
}, {
"actual": "((1, 0), (0, 1), (0, 0)) is builtin: Transform2D",
"context": "Then it passes",
"expected": "((1, 0), (0, 1), (0, 0)) is builtin: Transform2D",
"success": true
} ],
"context": "When calling asserts.is_Transform(transform2D: Transform2D)",
"fullname": "test_when_calling_is_Transform2D",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|Array| [] != null",
"context": "array is not null",
"expected": "|Array| [] != null",
"success": true
}, {
"actual": "[] is builtin: Array",
"context": "Then it passes",
"expected": "[] is builtin: Array",
"success": true
} ],
"context": "When calling asserts.is_Array(array: Array)",
"fullname": "test_when_calling_is_Array",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|Vector2| (0, 0) != null",
"context": "vec2 is not null",
"expected": "|Vector2| (0, 0) != null",
"success": true
}, {
"actual": "(0, 0) is builtin: Vector2",
"context": "Then it passes",
"expected": "(0, 0) is builtin: Vector2",
"success": true
} ],
"context": "When calling asserts.is_Vector2(vec2)",
"fullname": "test_when_calling_is_Vector2",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|PoolStringArray| [] != null",
"context": "strs is not null",
"expected": "|PoolStringArray| [] != null",
"success": true
}, {
"actual": "[] is builtin: PoolStringArray",
"context": "Then it passes",
"expected": "[] is builtin: PoolStringArray",
"success": true
} ],
"context": "When calling is asserts.is_PoolStringArray(strs: PoolStringArray)",
"fullname": "test_when_calling_is_PoolStringArray",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|NodePath| . != null",
"context": "@'Parent/Child' is not null",
"expected": "|NodePath| . != null",
"success": true
}, {
"actual": ". is builtin: NodePath",
"context": "Then it passes",
"expected": ". is builtin: NodePath",
"success": true
} ],
"context": "When calling asserts.is_NodePath(@'Parent/Child')",
"fullname": "test_when_calling_is_NodePath",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|Object| [Node:2959] != null",
"context": "node is not null",
"expected": "|Object| [Node:2959] != null",
"success": true
}, {
"actual": "[Node:2959] is builtin: Object",
"context": "An instance of node is an Object",
"expected": "[Node:2959] is builtin: Object",
"success": true
} ],
"context": "When calling is asserts.object(node: Node)",
"fullname": "test_when_calling_is_object",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|PoolByteArray| [PoolByteArray] != null",
"context": "bytes is not null",
"expected": "|PoolByteArray| [PoolByteArray] != null",
"success": true
}, {
"actual": "[PoolByteArray] is builtin: PoolByteArray",
"context": "Then it passes",
"expected": "[PoolByteArray] is builtin: PoolByteArray",
"success": true
} ],
"context": "When calling asserts.is_PoolByteArray(bytes: PoolByteArray)",
"fullname": "test_when_calling_is_PoolByteArray",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|PoolIntArray| [] != null",
"context": "ints is not null",
"expected": "|PoolIntArray| [] != null",
"success": true
}, {
"actual": "[] is builtin: PoolIntArray",
"context": "Then it passes",
"expected": "[] is builtin: PoolIntArray",
"success": true
} ],
"context": "When calling asserts.is_PoolIntArray(ints: PoolIntArray)",
"fullname": "test_when_calling_is_PoolIntArray",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "1 is builtin: int",
"context": "Then it passes",
"expected": "1 is builtin: int",
"success": true
} ],
"context": "When callign asserts.is_int(1)",
"fullname": "test_when_calling_is_int",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|Vector3| (0, 0, 0) != null",
"context": "vec3 is not null",
"expected": "|Vector3| (0, 0, 0) != null",
"success": true
}, {
"actual": "(0, 0, 0) is builtin: Vector3",
"context": "Then it passes",
"expected": "(0, 0, 0) is builtin: Vector3",
"success": true
} ],
"context": "When calling asserts.is_Vector3(vec3: Vector3",
"fullname": "test_when_calling_is_Vector3",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "1 is builtin: float",
"context": "Then it passes",
"expected": "1 is builtin: float",
"success": true
} ],
"context": "When calling asserts.is_float(1.0)",
"fullname": "test_when_calling_is_float",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|PoolColorArray| [PoolColorArray] != null",
"context": "colors is not null",
"expected": "|PoolColorArray| [PoolColorArray] != null",
"success": true
}, {
"actual": "[PoolColorArray] is builtin: PoolColorArray",
"context": "Then it passes",
"expected": "[PoolColorArray] is builtin: PoolColorArray",
"success": true
} ],
"context": "When calling asserts.is_PoolColorArray(colors: PoolColorArray)",
"fullname": "test_when_calling_is_PoolColorArray",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "True is builtin: bool",
"context": "Then it passes",
"expected": "True is builtin: bool",
"success": true
} ],
"context": "When calling asserts.is_bool(true)",
"fullname": "test_when_calling_is_bool",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|Basis| ((1, 0, 0), (0, 1, 0), (0, 0, 1)) != null",
"context": "basis is not null",
"expected": "|Basis| ((1, 0, 0), (0, 1, 0), (0, 0, 1)) != null",
"success": true
}, {
"actual": "((1, 0, 0), (0, 1, 0), (0, 0, 1)) is builtin: Basis",
"context": "Then it passes",
"expected": "((1, 0, 0), (0, 1, 0), (0, 0, 1)) is builtin: Basis",
"success": true
} ],
"context": "When calling asserts.is_basis(basis: Basis",
"fullname": "test_when_calling_is_Basis",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
} ],
"passed": 26,
"path": "res://tests/unit/is_instance.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/is_instance.test.gd",
"tags": [  ],
"test": ExtResource( 6 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 26
}, {
"context": "Given an Is Not Instance of class/type Assertion",
"methods": [ {
"assertions": [ {
"actual": "Null is not builtin: AABB",
"context": "Then it passes",
"expected": "Null is not builtin: AABB",
"success": true
} ],
"context": "when calling asserts.is_not_AABB(null)",
"fullname": "test_when_calling_is_not_AABB",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Basis",
"context": "Then it passes",
"expected": "Null is not builtin: Basis",
"success": true
} ],
"context": "when calling asserts.is_not_Basis(null)",
"fullname": "test_when_calling_is_not_Basis",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Array",
"context": "Then it passes",
"expected": "Null is not builtin: Array",
"success": true
} ],
"context": "when calling asserts.is_not_Array(null)",
"fullname": "test_when_calling_is_not_Array",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: RID",
"context": "Then it passes",
"expected": "Null is not builtin: RID",
"success": true
} ],
"context": "when calling asserts.is_not_RID(null)",
"fullname": "test_when_calling_is_not_RID",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Vector2",
"context": "Then it passes",
"expected": "Null is not builtin: Vector2",
"success": true
} ],
"context": "when calling asserts.is_not_Vector2(null)",
"fullname": "test_when_calling_is_not_Vector2",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Color",
"context": "Then it passes",
"expected": "Null is not builtin: Color",
"success": true
} ],
"context": "when calling asserts.is_not_Color(null)",
"fullname": "test_when_calling_is_not_Color",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Object",
"context": "Then it passes",
"expected": "Null is not builtin: Object",
"success": true
} ],
"context": "when calling asserts.is_not_Object(null)",
"fullname": "test_when_calling_is_not_Object",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Rect2",
"context": "Then it passes",
"expected": "Null is not builtin: Rect2",
"success": true
} ],
"context": "when calling asserts.is_not_Rect2(null)",
"fullname": "test_when_calling_is_not_Rect2",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: PoolVector2Array",
"context": "Then it passes",
"expected": "Null is not builtin: PoolVector2Array",
"success": true
} ],
"context": "when calling asserts.is_not_PoolVector2Array(null)",
"fullname": "test_when_calling_is_not_PoolVector2Array",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: int",
"context": "Then it passes",
"expected": "Null is not builtin: int",
"success": true
} ],
"context": "when calling asserts.is_not_int(null)",
"fullname": "test_when_calling_is_not_int",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: PoolIntArray",
"context": "Then it passes",
"expected": "Null is not builtin: PoolIntArray",
"success": true
} ],
"context": "when calling asserts.is_not_PoolIntArray(null)",
"fullname": "test_when_calling_is_not_PoolIntArray",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: NodePath",
"context": "Then it passes",
"expected": "Null is not builtin: NodePath",
"success": true
} ],
"context": "when calling asserts.is_not_NodePath(null)",
"fullname": "test_when_calling_is_not_NodePath",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Plane",
"context": "Then it passes",
"expected": "Null is not builtin: Plane",
"success": true
} ],
"context": "when calling asserts.is_not_Plane(null)",
"fullname": "test_when_calling_is_not_Plane",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: PoolVector3Array",
"context": "Then it passes",
"expected": "Null is not builtin: PoolVector3Array",
"success": true
} ],
"context": "when calling asserts.is_not_PoolVector3Array(null)",
"fullname": "test_when_calling_is_not_PoolVector3Array",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Transform",
"context": "Then it passes",
"expected": "Null is not builtin: Transform",
"success": true
} ],
"context": "when calling asserts.is_not_Transform(null)",
"fullname": "test_when_calling_is_not_Transform",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Transform2D",
"context": "Then it passes",
"expected": "Null is not builtin: Transform2D",
"success": true
} ],
"context": "when calling asserts.is_not_Transform2D(null)",
"fullname": "test_when_calling_is_not_Transform2D",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: bool",
"context": "Then it passes",
"expected": "Null is not builtin: bool",
"success": true
} ],
"context": "when calling asserts.is_not_bool(null)",
"fullname": "test_when_calling_is_not_bool",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: PoolColorArray",
"context": "Then it passes",
"expected": "Null is not builtin: PoolColorArray",
"success": true
} ],
"context": "when calling asserts.is_not_PoolColorArray(null)",
"fullname": "test_when_calling_is_not_PoolColorArray",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: PoolRealArray",
"context": "Then it passes",
"expected": "Null is not builtin: PoolRealArray",
"success": true
} ],
"context": "when calling asserts.is_not_PoolRealArray(null)",
"fullname": "test_when_calling_is_not_PoolRealArray",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: PoolStringArray",
"context": "Then it passes",
"expected": "Null is not builtin: PoolStringArray",
"success": true
} ],
"context": "when calling asserts.is_not_PoolStringArray(null)",
"fullname": "test_when_calling_is_not_PoolStringArray",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Quat",
"context": "Then it passes",
"expected": "Null is not builtin: Quat",
"success": true
} ],
"context": "when calling asserts.is_not_Quat(null)",
"fullname": "test_when_calling_is_not_Quat",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Dictionary",
"context": "Then it passes",
"expected": "Null is not builtin: Dictionary",
"success": true
} ],
"context": "when calling asserts.is_not_Dictionary(null)",
"fullname": "test_when_calling_is_not_Dictionary",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Vector3",
"context": "Then it passes",
"expected": "Null is not builtin: Vector3",
"success": true
} ],
"context": "when calling asserts.is_not_Vector3(null)",
"fullname": "test_when_calling_is_not_Vector3",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: PoolByteArray",
"context": "Then it passes",
"expected": "Null is not builtin: PoolByteArray",
"success": true
} ],
"context": "when calling asserts.is_not_PoolByteArray(null)",
"fullname": "test_when_calling_is_not_PoolByteArray",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: float",
"context": "Then it passes",
"expected": "Null is not builtin: float",
"success": true
} ],
"context": "when calling asserts.is_not_float(null)",
"fullname": "test_when_calling_is_not_float",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: String",
"context": "Then it passes",
"expected": "Null is not builtin: String",
"success": true
} ],
"context": "when calling asserts.is_not_String(null)",
"fullname": "test_when_calling_is_not_String",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 26,
"path": "res://tests/unit/is_not_instance.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/is_not_instance.test.gd",
"tags": [  ],
"test": ExtResource( 2 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 26
}, {
"context": "Dummy Passing Test",
"methods": [ {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Passing!",
"expected": "|bool| True == true",
"success": true
} ],
"context": "This method passes",
"fullname": "test_this_method_passes",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 1,
"path": "res://tests/unit/suite.test.gd.DummyOne",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/suite.test.gd.DummyOne",
"tags": [  ],
"test": SubResource( 21 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 1
}, {
"context": "Dummy Test 2",
"methods": [ {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Passing!",
"expected": "|bool| True == true",
"success": true
} ],
"context": "This method passes",
"fullname": "test_this_method_passes",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 1,
"path": "res://tests/unit/suite.test.gd.DummyTwo",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/suite.test.gd.DummyTwo",
"tags": [  ],
"test": SubResource( 22 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 1
}, {
"context": "Given a Test Script",
"methods": [ {
"assertions": [ {
"actual": "|bool| True == true",
"context": "if the test didn't break this works",
"expected": "|bool| True == true",
"success": true
} ],
"context": " we can omit describe",
"fullname": "test_we_can_omit_describe",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 10 is greater than |int| 1",
"context": "We get an array of multiple values back",
"expected": "|int| 10 is greater than |int| 1",
"success": true
}, {
"actual": "|int| 0 is not equal to |int| 9",
"context": "With different values",
"expected": "|int| 0 != |int| 9",
"success": true
}, {
"actual": "|int| 10 is greater than |int| 1",
"context": "And we can track multiple properties",
"expected": "|int| 10 is greater than |int| 1",
"success": true
} ],
"context": "When we record properties",
"fullname": "test_we_can_record_properties",
"passed": 3,
"success": true,
"time": 0.0,
"total": 3
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|int| 2 is equal to |int| 2",
"context": "",
"expected": "|int| 2 is equal to |int| 2",
"success": true
} ],
"context": " when we omit context we can see expected and got under method",
"fullname": "test_when_we_omit_context_we_can_see_expected_and_got_under_method",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
} ],
"passed": 3,
"path": "res://tests/unit/test.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/test.test.gd",
"tags": [  ],
"test": ExtResource( 19 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 3
}, {
"context": "Given a Signal Watcher",
"methods": [ {
"assertions": [ {
"actual": "signal: example was emitted from [Node:2991]",
"context": "Then it captures the emitted signal",
"expected": "signal: example was emitted from [Node:2991]",
"success": true
} ],
"context": "When we watch and emit a signal",
"fullname": "test_When_we_watch_and_emit_a_signal",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Signal: example was emitted from [Node:2991] with arguments: [1, 20, 5]",
"context": "Then it captures any arguments that where passed when the signal was emitted",
"expected": "Signal: example was emitted from [Node:2991] with arguments: [1, 20, 5]",
"success": true
} ],
"context": "When we watch a signal from an object with no bound variables",
"fullname": "test_When_we_watch_a_signal_from_an_object_with_no_bound_variables",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Signal: example was not emitted from [Node:2991]",
"context": "Then it does not capture the non-emitted signal",
"expected": "Signal: example was not emitted from [Node:2991]",
"success": true
} ],
"context": "When we watch and do not emit a signal",
"fullname": "test_When_we_watch_and_do_not_emit_a_signal",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "signal: multiple was emitted from [Node:2991] 2",
"context": "Then we can track how many times we emitted it",
"expected": "signal: multiple was emitted from [Node:2991] 2",
"success": true
} ],
"context": "When we watch and signal and emit it multiple times",
"fullname": "test_When_we_watch_a_signal_and_emit_it_multiple_times",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 4,
"path": "res://tests/unit/watcher.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/watcher.test.gd",
"tags": [  ],
"test": ExtResource( 17 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 4
}, {
"context": "Given a String Assertion",
"methods": [ {
"assertions": [ {
"actual": "lorem impsum ends with impsum",
"context": "Then it passes",
"expected": "lorem impsum ends with impsum",
"success": true
} ],
"context": "When calling asserts.string_ends_with('impsum', 'lorem impsum')",
"fullname": "test_when_calling_string_ends_with",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "impsum does not end with lorem",
"context": "Then it passes",
"expected": "impsum does not end with lorem",
"success": true
} ],
"context": "When calling asserts.string_does_not_end_with('lorem', 'impsum')",
"fullname": "test_when_calling_string_does_not_end_with",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "lorem impsum begins with lorem",
"context": "Then it passes",
"expected": "lorem impsum begins with lorem",
"success": true
} ],
"context": "When calling asserts.string_begins_with('lorem', 'lorem impsum')",
"fullname": "test_when_calling_string_begins_with",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "impsum does not contain beem im",
"context": "Then it passes",
"expected": "impsum does not contain beem im",
"success": true
} ],
"context": "When calling asserts.string_does_not_contain('em im', 'impsum')",
"fullname": "test_when_calling_string_does_not_contain",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "impsum does not begin with bleh lorem",
"context": "Then it passes",
"expected": "impsum does not begin with bleh lorem",
"success": true
} ],
"context": "When calling asserts.string_does_not_begin_with('lorem', 'impsum')",
"fullname": "test_when_calling_string_does_not_begin_with",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "lorem impsum contains em im",
"context": "Then it passes",
"expected": "lorem impsum contains em im",
"success": true
} ],
"context": "When calling asserts.string_contains('em im', 'lorem impsum')",
"fullname": "test_when_calling_string_contains",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 6,
"path": "res://tests/unit/string.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/string.test.gd",
"tags": [  ],
"test": ExtResource( 9 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 6
}, {
"context": "Default Args",
"methods": [ {
"assertions": [ {
"actual": "|bool| True == true",
"context": "If this method can be reached then we have doubled a script with default argument(s) properly!",
"expected": "|bool| True == true",
"success": true
} ],
"context": " default arguments of interpolate property",
"fullname": "test_default_arguments_of_interpolate_property",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 1,
"path": "res://tests/integration/default_args.test.gd",
"source": {
"containers": [ "res://tests/integration", "res://tests" ],
"method": "",
"path": "res://tests/integration/default_args.test.gd",
"tags": [  ],
"test": ExtResource( 10 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 1
}, {
"context": "Given a Boolean Assertion",
"methods": [ {
"assertions": [ {
"actual": "|bool| True != false",
"context": "",
"expected": "|bool| True == false",
"success": false
} ],
"context": " intentional failure",
"fullname": "test_intentional_failure",
"passed": 0,
"success": false,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then it passes",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When calling asserts.is_true(true)",
"fullname": "test_when_calling_asserts_is_true",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| False == false",
"context": "Then it passes",
"expected": "|bool| False == false",
"success": true
} ],
"context": "When calling asserts.is_false(false)",
"fullname": "test_when_calling_asserts_is_false",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 2,
"path": "res://tests/integration/boolean.test.gd",
"source": {
"containers": [ "res://tests/integration", "res://tests" ],
"method": "",
"path": "res://tests/integration/boolean.test.gd",
"tags": [  ],
"test": ExtResource( 20 ),
"yield_time": 0.0
},
"success": false,
"time_taken": 0.0,
"total": 3
}, {
"context": "Given is_on_floor",
"methods": [ {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then it can be stubbed",
"expected": "|bool| True == true",
"success": true
} ],
"context": "From a built-in KinematicBody2D2",
"fullname": "test_stubbing_is_on_floor_method_from_builtin_class2",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then it can be stubbed",
"expected": "|bool| True == true",
"success": true
} ],
"context": "From a child node of a scene without scripts",
"fullname": "test_stubbing_is_on_floor_as_child_node_with_no_script",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then it can be stubbed",
"expected": "|bool| True == true",
"success": true
} ],
"context": "From a user-defined script",
"fullname": "test_stubbing_is_on_floor_method_from_user_defined_class",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 3,
"path": "res://tests/integration/on_floor.test.gd",
"source": {
"containers": [ "res://tests/integration", "res://tests" ],
"method": "",
"path": "res://tests/integration/on_floor.test.gd",
"tags": [  ],
"test": ExtResource( 5 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 3
}, {
"context": "Given a Script Director",
"methods": [ {
"assertions": [ {
"actual": "[Reference:3144] is instance of class: [GDScript:1453]",
"context": "Then we get that inner class back",
"expected": "[Reference:3144] is instance of class: [GDScript:1453]",
"success": true
} ],
"context": "When we double an inner class",
"fullname": "test_When_we_double_an_inner_class",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|Dictionary| {_enter_tree:{arguments:, default_arguments:}, _exit_tree:{arguments:, default_arguments:}, _get:{arguments:a, default_arguments:a}, _get_configuration_warning:{arguments:, default_arguments:}, _get_editor_description:{arguments:, default_arguments:}, _get_import_path:{arguments:, default_arguments:}, _get_property_list:{arguments:, default_arguments:}, _init:{arguments:, default_arguments:}, _input:{arguments:a, default_arguments:a}, _notification:{arguments:a, default_arguments:a}, _physics_process:{arguments:a, default_arguments:a}, _process:{arguments:a, default_arguments:a}, _ready:{arguments:, default_arguments:}, _set:{arguments:a, b, default_arguments:a, b}, _set_editor_description:{arguments:a, default_arguments:a}, _set_import_path:{arguments:a, default_arguments:a}, _to_string:{arguments:, default_arguments:}, _unhandled_input:{arguments:a, default_arguments:a}, _unhandled_key_input:{arguments:a, default_arguments:a}, add:{arguments:a, b, default_arguments:a, b}, add_child:{arguments:a, b, default_arguments:a, b = False}, add_child_below_node:{arguments:a, b, c, default_arguments:a, b, c = False}, add_to_group:{arguments:a, b, default_arguments:a, b = False}, add_user_signal:{arguments:a, b, default_arguments:a, b = []}, call:{arguments:a, default_arguments:a}, call_deferred:{arguments:a, default_arguments:a}, callv:{arguments:a, b, default_arguments:a, b}, can_process:{arguments:, default_arguments:}, can_translate_messages:{arguments:, default_arguments:}, connect:{arguments:a, b, c, d, e, default_arguments:a, b, c, d = [], e = 0}, disconnect:{arguments:a, b, c, default_arguments:a, b, c}, divide:{arguments:a, b, default_arguments:a, b}, duplicate:{arguments:a, default_arguments:a = 15}, emit_signal:{arguments:a, default_arguments:a}, find_node:{arguments:a, b, c, default_arguments:a, b = True, c = True}, find_parent:{arguments:a, default_arguments:a}, free:{arguments:, default_arguments:}, get:{arguments:a, default_arguments:a}, get_child:{arguments:a, default_arguments:a}, get_child_count:{arguments:, default_arguments:}, get_children:{arguments:, default_arguments:}, get_class:{arguments:, default_arguments:}, get_custom_multiplayer:{arguments:, default_arguments:}, get_filename:{arguments:, default_arguments:}, get_groups:{arguments:, default_arguments:}, get_incoming_connections:{arguments:, default_arguments:}, get_index:{arguments:, default_arguments:}, get_indexed:{arguments:a, default_arguments:a}, get_instance_id:{arguments:, default_arguments:}, get_meta:{arguments:a, default_arguments:a}, get_meta_list:{arguments:, default_arguments:}, get_method_list:{arguments:, default_arguments:}, get_multiplayer:{arguments:, default_arguments:}, get_name:{arguments:, default_arguments:}, get_network_master:{arguments:, default_arguments:}, get_node:{arguments:a, default_arguments:a}, get_node_and_resource:{arguments:a, default_arguments:a}, get_node_or_null:{arguments:a, default_arguments:a}, get_owner:{arguments:, default_arguments:}, get_parent:{arguments:, default_arguments:}, get_path:{arguments:, default_arguments:}, get_path_to:{arguments:a, default_arguments:a}, get_pause_mode:{arguments:, default_arguments:}, get_physics_process_delta_time:{arguments:, default_arguments:}, get_position_in_parent:{arguments:, default_arguments:}, get_process_delta_time:{arguments:, default_arguments:}, get_process_priority:{arguments:, default_arguments:}, get_property_list:{arguments:, default_arguments:}, get_scene_instance_load_placeholder:{arguments:, default_arguments:}, get_script:{arguments:, default_arguments:}, get_signal_connection_list:{arguments:a, default_arguments:a}, get_signal_list:{arguments:, default_arguments:}, get_tree:{arguments:, default_arguments:}, get_viewport:{arguments:, default_arguments:}, has_meta:{arguments:a, default_arguments:a}, has_method:{arguments:a, default_arguments:a}, has_node:{arguments:a, default_arguments:a}, has_node_and_resource:{arguments:a, default_arguments:a}, has_signal:{arguments:a, default_arguments:a}, has_user_signal:{arguments:a, default_arguments:a}, is_a_parent_of:{arguments:a, default_arguments:a}, is_blocking_signals:{arguments:, default_arguments:}, is_class:{arguments:a, default_arguments:a}, is_connected:{arguments:a, b, c, default_arguments:a, b, c}, is_displayed_folded:{arguments:, default_arguments:}, is_greater_than:{arguments:a, default_arguments:a}, is_in_group:{arguments:a, default_arguments:a}, is_inside_tree:{arguments:, default_arguments:}, is_network_master:{arguments:, default_arguments:}, is_physics_processing:{arguments:, default_arguments:}, is_physics_processing_internal:{arguments:, default_arguments:}, is_processing:{arguments:, default_arguments:}, is_processing_input:{arguments:, default_arguments:}, is_processing_internal:{arguments:, default_arguments:}, is_processing_unhandled_input:{arguments:, default_arguments:}, is_processing_unhandled_key_input:{arguments:, default_arguments:}, is_queued_for_deletion:{arguments:, default_arguments:}, math_fight:{arguments:, default_arguments:}, move_child:{arguments:a, b, default_arguments:a, b}, multiply:{arguments:a, b, default_arguments:a, b}, notification:{arguments:a, b, default_arguments:a, b = False}, pi:{arguments:, default_arguments:}, print_stray_nodes:{arguments:, default_arguments:}, print_tree:{arguments:, default_arguments:}, print_tree_pretty:{arguments:, default_arguments:}, propagate_call:{arguments:a, b, c, default_arguments:a, b = [], c = False}, propagate_notification:{arguments:a, default_arguments:a}, property_list_changed_notify:{arguments:, default_arguments:}, queue_free:{arguments:, default_arguments:}, raise:{arguments:, default_arguments:}, remove_and_skip:{arguments:, default_arguments:}, remove_child:{arguments:a, default_arguments:a}, remove_from_group:{arguments:a, default_arguments:a}, remove_meta:{arguments:a, default_arguments:a}, replace_by:{arguments:a, b, default_arguments:a, b = False}, request_ready:{arguments:, default_arguments:}, rpc:{arguments:a, default_arguments:a}, rpc_config:{arguments:a, b, default_arguments:a, b}, rpc_id:{arguments:a, b, default_arguments:a, b}, rpc_unreliable:{arguments:a, default_arguments:a}, rpc_unreliable_id:{arguments:a, b, default_arguments:a, b}, rset:{arguments:a, b, default_arguments:a, b}, rset_config:{arguments:a, b, default_arguments:a, b}, rset_id:{arguments:a, b, c, default_arguments:a, b, c}, rset_unreliable:{arguments:a, b, default_arguments:a, b}, rset_unreliable_id:{arguments:a, b, c, default_arguments:a, b, c}, set:{arguments:a, b, default_arguments:a, b}, set_block_signals:{arguments:a, default_arguments:a}, set_custom_multiplayer:{arguments:a, default_arguments:a}, set_deferred:{arguments:a, b, default_arguments:a, b}, set_display_folded:{arguments:a, default_arguments:a}, set_filename:{arguments:a, default_arguments:a}, set_indexed:{arguments:a, b, default_arguments:a, b}, set_message_translation:{arguments:a, default_arguments:a}, set_meta:{arguments:a, b, default_arguments:a, b}, set_name:{arguments:a, default_arguments:a}, set_network_master:{arguments:a, b, default_arguments:a, b = True}, set_owner:{arguments:a, default_arguments:a}, set_pause_mode:{arguments:a, default_arguments:a}, set_physics_process:{arguments:a, default_arguments:a}, set_physics_process_internal:{arguments:a, default_arguments:a}, set_process:{arguments:a, default_arguments:a}, set_process_input:{arguments:a, default_arguments:a}, set_process_internal:{arguments:a, default_arguments:a}, set_process_priority:{arguments:a, default_arguments:a}, set_process_unhandled_input:{arguments:a, default_arguments:a}, set_process_unhandled_key_input:{arguments:a, default_arguments:a}, set_scene_instance_load_placeholder:{arguments:a, default_arguments:a}, set_script:{arguments:a, default_arguments:a}, subtract:{arguments:a, b, default_arguments:a, b}, sum:{arguments:a, default_arguments:a}, to_string:{arguments:, default_arguments:}, tr:{arguments:a, default_arguments:a}, update_configuration_warning:{arguments:, default_arguments:}} is not equal to |Dictionary| {_enter_tree:{arguments:, default_arguments:}, _exit_tree:{arguments:, default_arguments:}, _get:{arguments:a, default_arguments:a}, _get_configuration_warning:{arguments:, default_arguments:}, _get_editor_description:{arguments:, default_arguments:}, _get_import_path:{arguments:, default_arguments:}, _get_property_list:{arguments:, default_arguments:}, _init:{arguments:, default_arguments:}, _input:{arguments:a, default_arguments:a}, _notification:{arguments:a, default_arguments:a}, _physics_process:{arguments:a, default_arguments:a}, _process:{arguments:a, default_arguments:a}, _ready:{arguments:, default_arguments:}, _set:{arguments:a, b, default_arguments:a, b}, _set_editor_description:{arguments:a, default_arguments:a}, _set_import_path:{arguments:a, default_arguments:a}, _to_string:{arguments:, default_arguments:}, _unhandled_input:{arguments:a, default_arguments:a}, _unhandled_key_input:{arguments:a, default_arguments:a}, add:{arguments:a, b, default_arguments:a, b}, add_child:{arguments:a, b, default_arguments:a, b = False}, add_child_below_node:{arguments:a, b, c, default_arguments:a, b, c = False}, add_to_group:{arguments:a, b, default_arguments:a, b = False}, add_user_signal:{arguments:a, b, default_arguments:a, b = []}, call:{arguments:a, default_arguments:a}, call_deferred:{arguments:a, default_arguments:a}, callv:{arguments:a, b, default_arguments:a, b}, can_process:{arguments:, default_arguments:}, can_translate_messages:{arguments:, default_arguments:}, connect:{arguments:a, b, c, d, e, default_arguments:a, b, c, d = [], e = 0}, disconnect:{arguments:a, b, c, default_arguments:a, b, c}, divide:{arguments:a, b, default_arguments:a, b}, duplicate:{arguments:a, default_arguments:a = 15}, emit_signal:{arguments:a, default_arguments:a}, find_node:{arguments:a, b, c, default_arguments:a, b = True, c = True}, find_parent:{arguments:a, default_arguments:a}, free:{arguments:, default_arguments:}, get:{arguments:a, default_arguments:a}, get_child:{arguments:a, default_arguments:a}, get_child_count:{arguments:, default_arguments:}, get_children:{arguments:, default_arguments:}, get_class:{arguments:, default_arguments:}, get_custom_multiplayer:{arguments:, default_arguments:}, get_filename:{arguments:, default_arguments:}, get_groups:{arguments:, default_arguments:}, get_incoming_connections:{arguments:, default_arguments:}, get_index:{arguments:, default_arguments:}, get_indexed:{arguments:a, default_arguments:a}, get_instance_id:{arguments:, default_arguments:}, get_meta:{arguments:a, default_arguments:a}, get_meta_list:{arguments:, default_arguments:}, get_method_list:{arguments:, default_arguments:}, get_multiplayer:{arguments:, default_arguments:}, get_name:{arguments:, default_arguments:}, get_network_master:{arguments:, default_arguments:}, get_node:{arguments:a, default_arguments:a}, get_node_and_resource:{arguments:a, default_arguments:a}, get_node_or_null:{arguments:a, default_arguments:a}, get_owner:{arguments:, default_arguments:}, get_parent:{arguments:, default_arguments:}, get_path:{arguments:, default_arguments:}, get_path_to:{arguments:a, default_arguments:a}, get_pause_mode:{arguments:, default_arguments:}, get_physics_process_delta_time:{arguments:, default_arguments:}, get_position_in_parent:{arguments:, default_arguments:}, get_process_delta_time:{arguments:, default_arguments:}, get_process_priority:{arguments:, default_arguments:}, get_property_list:{arguments:, default_arguments:}, get_scene_instance_load_placeholder:{arguments:, default_arguments:}, get_script:{arguments:, default_arguments:}, get_signal_connection_list:{arguments:a, default_arguments:a}, get_signal_list:{arguments:, default_arguments:}, get_tree:{arguments:, default_arguments:}, get_viewport:{arguments:, default_arguments:}, has_meta:{arguments:a, default_arguments:a}, has_method:{arguments:a, default_arguments:a}, has_node:{arguments:a, default_arguments:a}, has_node_and_resource:{arguments:a, default_arguments:a}, has_signal:{arguments:a, default_arguments:a}, has_user_signal:{arguments:a, default_arguments:a}, is_a_parent_of:{arguments:a, default_arguments:a}, is_blocking_signals:{arguments:, default_arguments:}, is_class:{arguments:a, default_arguments:a}, is_connected:{arguments:a, b, c, default_arguments:a, b, c}, is_displayed_folded:{arguments:, default_arguments:}, is_greater_than:{arguments:a, default_arguments:a}, is_in_group:{arguments:a, default_arguments:a}, is_inside_tree:{arguments:, default_arguments:}, is_network_master:{arguments:, default_arguments:}, is_physics_processing:{arguments:, default_arguments:}, is_physics_processing_internal:{arguments:, default_arguments:}, is_processing:{arguments:, default_arguments:}, is_processing_input:{arguments:, default_arguments:}, is_processing_internal:{arguments:, default_arguments:}, is_processing_unhandled_input:{arguments:, default_arguments:}, is_processing_unhandled_key_input:{arguments:, default_arguments:}, is_queued_for_deletion:{arguments:, default_arguments:}, math_fight:{arguments:, default_arguments:}, move_child:{arguments:a, b, default_arguments:a, b}, multiply:{arguments:a, b, default_arguments:a, b}, notification:{arguments:a, b, default_arguments:a, b = False}, pi:{arguments:, default_arguments:}, print_stray_nodes:{arguments:, default_arguments:}, print_tree:{arguments:, default_arguments:}, print_tree_pretty:{arguments:, default_arguments:}, propagate_call:{arguments:a, b, c, default_arguments:a, b = [], c = False}, propagate_notification:{arguments:a, default_arguments:a}, property_list_changed_notify:{arguments:, default_arguments:}, queue_free:{arguments:, default_arguments:}, raise:{arguments:, default_arguments:}, remove_and_skip:{arguments:, default_arguments:}, remove_child:{arguments:a, default_arguments:a}, remove_from_group:{arguments:a, default_arguments:a}, remove_meta:{arguments:a, default_arguments:a}, replace_by:{arguments:a, b, default_arguments:a, b = False}, request_ready:{arguments:, default_arguments:}, rpc:{arguments:a, default_arguments:a}, rpc_config:{arguments:a, b, default_arguments:a, b}, rpc_id:{arguments:a, b, default_arguments:a, b}, rpc_unreliable:{arguments:a, default_arguments:a}, rpc_unreliable_id:{arguments:a, b, default_arguments:a, b}, rset:{arguments:a, b, default_arguments:a, b}, rset_config:{arguments:a, b, default_arguments:a, b}, rset_id:{arguments:a, b, c, default_arguments:a, b, c}, rset_unreliable:{arguments:a, b, default_arguments:a, b}, rset_unreliable_id:{arguments:a, b, c, default_arguments:a, b, c}, set:{arguments:a, b, default_arguments:a, b}, set_block_signals:{arguments:a, default_arguments:a}, set_custom_multiplayer:{arguments:a, default_arguments:a}, set_deferred:{arguments:a, b, default_arguments:a, b}, set_display_folded:{arguments:a, default_arguments:a}, set_filename:{arguments:a, default_arguments:a}, set_indexed:{arguments:a, b, default_arguments:a, b}, set_message_translation:{arguments:a, default_arguments:a}, set_meta:{arguments:a, b, default_arguments:a, b}, set_name:{arguments:a, default_arguments:a}, set_network_master:{arguments:a, b, default_arguments:a, b = True}, set_owner:{arguments:a, default_arguments:a}, set_pause_mode:{arguments:a, default_arguments:a}, set_physics_process:{arguments:a, default_arguments:a}, set_physics_process_internal:{arguments:a, default_arguments:a}, set_process:{arguments:a, default_arguments:a}, set_process_input:{arguments:a, default_arguments:a}, set_process_internal:{arguments:a, default_arguments:a}, set_process_priority:{arguments:a, default_arguments:a}, set_process_unhandled_input:{arguments:a, default_arguments:a}, set_process_unhandled_key_input:{arguments:a, default_arguments:a}, set_scene_instance_load_placeholder:{arguments:a, default_arguments:a}, set_script:{arguments:a, default_arguments:a}, subtract:{arguments:a, b, default_arguments:a, b}, sum:{arguments:a, default_arguments:a}, to_string:{arguments:, default_arguments:}, tr:{arguments:a, default_arguments:a}, update_configuration_warning:{arguments:, default_arguments:}}",
"context": "Then they do not share resources",
"expected": "|Dictionary| {_enter_tree:{arguments:, default_arguments:}, _exit_tree:{arguments:, default_arguments:}, _get:{arguments:a, default_arguments:a}, _get_configuration_warning:{arguments:, default_arguments:}, _get_editor_description:{arguments:, default_arguments:}, _get_import_path:{arguments:, default_arguments:}, _get_property_list:{arguments:, default_arguments:}, _init:{arguments:, default_arguments:}, _input:{arguments:a, default_arguments:a}, _notification:{arguments:a, default_arguments:a}, _physics_process:{arguments:a, default_arguments:a}, _process:{arguments:a, default_arguments:a}, _ready:{arguments:, default_arguments:}, _set:{arguments:a, b, default_arguments:a, b}, _set_editor_description:{arguments:a, default_arguments:a}, _set_import_path:{arguments:a, default_arguments:a}, _to_string:{arguments:, default_arguments:}, _unhandled_input:{arguments:a, default_arguments:a}, _unhandled_key_input:{arguments:a, default_arguments:a}, add:{arguments:a, b, default_arguments:a, b}, add_child:{arguments:a, b, default_arguments:a, b = False}, add_child_below_node:{arguments:a, b, c, default_arguments:a, b, c = False}, add_to_group:{arguments:a, b, default_arguments:a, b = False}, add_user_signal:{arguments:a, b, default_arguments:a, b = []}, call:{arguments:a, default_arguments:a}, call_deferred:{arguments:a, default_arguments:a}, callv:{arguments:a, b, default_arguments:a, b}, can_process:{arguments:, default_arguments:}, can_translate_messages:{arguments:, default_arguments:}, connect:{arguments:a, b, c, d, e, default_arguments:a, b, c, d = [], e = 0}, disconnect:{arguments:a, b, c, default_arguments:a, b, c}, divide:{arguments:a, b, default_arguments:a, b}, duplicate:{arguments:a, default_arguments:a = 15}, emit_signal:{arguments:a, default_arguments:a}, find_node:{arguments:a, b, c, default_arguments:a, b = True, c = True}, find_parent:{arguments:a, default_arguments:a}, free:{arguments:, default_arguments:}, get:{arguments:a, default_arguments:a}, get_child:{arguments:a, default_arguments:a}, get_child_count:{arguments:, default_arguments:}, get_children:{arguments:, default_arguments:}, get_class:{arguments:, default_arguments:}, get_custom_multiplayer:{arguments:, default_arguments:}, get_filename:{arguments:, default_arguments:}, get_groups:{arguments:, default_arguments:}, get_incoming_connections:{arguments:, default_arguments:}, get_index:{arguments:, default_arguments:}, get_indexed:{arguments:a, default_arguments:a}, get_instance_id:{arguments:, default_arguments:}, get_meta:{arguments:a, default_arguments:a}, get_meta_list:{arguments:, default_arguments:}, get_method_list:{arguments:, default_arguments:}, get_multiplayer:{arguments:, default_arguments:}, get_name:{arguments:, default_arguments:}, get_network_master:{arguments:, default_arguments:}, get_node:{arguments:a, default_arguments:a}, get_node_and_resource:{arguments:a, default_arguments:a}, get_node_or_null:{arguments:a, default_arguments:a}, get_owner:{arguments:, default_arguments:}, get_parent:{arguments:, default_arguments:}, get_path:{arguments:, default_arguments:}, get_path_to:{arguments:a, default_arguments:a}, get_pause_mode:{arguments:, default_arguments:}, get_physics_process_delta_time:{arguments:, default_arguments:}, get_position_in_parent:{arguments:, default_arguments:}, get_process_delta_time:{arguments:, default_arguments:}, get_process_priority:{arguments:, default_arguments:}, get_property_list:{arguments:, default_arguments:}, get_scene_instance_load_placeholder:{arguments:, default_arguments:}, get_script:{arguments:, default_arguments:}, get_signal_connection_list:{arguments:a, default_arguments:a}, get_signal_list:{arguments:, default_arguments:}, get_tree:{arguments:, default_arguments:}, get_viewport:{arguments:, default_arguments:}, has_meta:{arguments:a, default_arguments:a}, has_method:{arguments:a, default_arguments:a}, has_node:{arguments:a, default_arguments:a}, has_node_and_resource:{arguments:a, default_arguments:a}, has_signal:{arguments:a, default_arguments:a}, has_user_signal:{arguments:a, default_arguments:a}, is_a_parent_of:{arguments:a, default_arguments:a}, is_blocking_signals:{arguments:, default_arguments:}, is_class:{arguments:a, default_arguments:a}, is_connected:{arguments:a, b, c, default_arguments:a, b, c}, is_displayed_folded:{arguments:, default_arguments:}, is_greater_than:{arguments:a, default_arguments:a}, is_in_group:{arguments:a, default_arguments:a}, is_inside_tree:{arguments:, default_arguments:}, is_network_master:{arguments:, default_arguments:}, is_physics_processing:{arguments:, default_arguments:}, is_physics_processing_internal:{arguments:, default_arguments:}, is_processing:{arguments:, default_arguments:}, is_processing_input:{arguments:, default_arguments:}, is_processing_internal:{arguments:, default_arguments:}, is_processing_unhandled_input:{arguments:, default_arguments:}, is_processing_unhandled_key_input:{arguments:, default_arguments:}, is_queued_for_deletion:{arguments:, default_arguments:}, math_fight:{arguments:, default_arguments:}, move_child:{arguments:a, b, default_arguments:a, b}, multiply:{arguments:a, b, default_arguments:a, b}, notification:{arguments:a, b, default_arguments:a, b = False}, pi:{arguments:, default_arguments:}, print_stray_nodes:{arguments:, default_arguments:}, print_tree:{arguments:, default_arguments:}, print_tree_pretty:{arguments:, default_arguments:}, propagate_call:{arguments:a, b, c, default_arguments:a, b = [], c = False}, propagate_notification:{arguments:a, default_arguments:a}, property_list_changed_notify:{arguments:, default_arguments:}, queue_free:{arguments:, default_arguments:}, raise:{arguments:, default_arguments:}, remove_and_skip:{arguments:, default_arguments:}, remove_child:{arguments:a, default_arguments:a}, remove_from_group:{arguments:a, default_arguments:a}, remove_meta:{arguments:a, default_arguments:a}, replace_by:{arguments:a, b, default_arguments:a, b = False}, request_ready:{arguments:, default_arguments:}, rpc:{arguments:a, default_arguments:a}, rpc_config:{arguments:a, b, default_arguments:a, b}, rpc_id:{arguments:a, b, default_arguments:a, b}, rpc_unreliable:{arguments:a, default_arguments:a}, rpc_unreliable_id:{arguments:a, b, default_arguments:a, b}, rset:{arguments:a, b, default_arguments:a, b}, rset_config:{arguments:a, b, default_arguments:a, b}, rset_id:{arguments:a, b, c, default_arguments:a, b, c}, rset_unreliable:{arguments:a, b, default_arguments:a, b}, rset_unreliable_id:{arguments:a, b, c, default_arguments:a, b, c}, set:{arguments:a, b, default_arguments:a, b}, set_block_signals:{arguments:a, default_arguments:a}, set_custom_multiplayer:{arguments:a, default_arguments:a}, set_deferred:{arguments:a, b, default_arguments:a, b}, set_display_folded:{arguments:a, default_arguments:a}, set_filename:{arguments:a, default_arguments:a}, set_indexed:{arguments:a, b, default_arguments:a, b}, set_message_translation:{arguments:a, default_arguments:a}, set_meta:{arguments:a, b, default_arguments:a, b}, set_name:{arguments:a, default_arguments:a}, set_network_master:{arguments:a, b, default_arguments:a, b = True}, set_owner:{arguments:a, default_arguments:a}, set_pause_mode:{arguments:a, default_arguments:a}, set_physics_process:{arguments:a, default_arguments:a}, set_physics_process_internal:{arguments:a, default_arguments:a}, set_process:{arguments:a, default_arguments:a}, set_process_input:{arguments:a, default_arguments:a}, set_process_internal:{arguments:a, default_arguments:a}, set_process_priority:{arguments:a, default_arguments:a}, set_process_unhandled_input:{arguments:a, default_arguments:a}, set_process_unhandled_key_input:{arguments:a, default_arguments:a}, set_scene_instance_load_placeholder:{arguments:a, default_arguments:a}, set_script:{arguments:a, default_arguments:a}, subtract:{arguments:a, b, default_arguments:a, b}, sum:{arguments:a, default_arguments:a}, to_string:{arguments:, default_arguments:}, tr:{arguments:a, default_arguments:a}, update_configuration_warning:{arguments:, default_arguments:}} != |Dictionary| {_enter_tree:{arguments:, default_arguments:}, _exit_tree:{arguments:, default_arguments:}, _get:{arguments:a, default_arguments:a}, _get_configuration_warning:{arguments:, default_arguments:}, _get_editor_description:{arguments:, default_arguments:}, _get_import_path:{arguments:, default_arguments:}, _get_property_list:{arguments:, default_arguments:}, _init:{arguments:, default_arguments:}, _input:{arguments:a, default_arguments:a}, _notification:{arguments:a, default_arguments:a}, _physics_process:{arguments:a, default_arguments:a}, _process:{arguments:a, default_arguments:a}, _ready:{arguments:, default_arguments:}, _set:{arguments:a, b, default_arguments:a, b}, _set_editor_description:{arguments:a, default_arguments:a}, _set_import_path:{arguments:a, default_arguments:a}, _to_string:{arguments:, default_arguments:}, _unhandled_input:{arguments:a, default_arguments:a}, _unhandled_key_input:{arguments:a, default_arguments:a}, add:{arguments:a, b, default_arguments:a, b}, add_child:{arguments:a, b, default_arguments:a, b = False}, add_child_below_node:{arguments:a, b, c, default_arguments:a, b, c = False}, add_to_group:{arguments:a, b, default_arguments:a, b = False}, add_user_signal:{arguments:a, b, default_arguments:a, b = []}, call:{arguments:a, default_arguments:a}, call_deferred:{arguments:a, default_arguments:a}, callv:{arguments:a, b, default_arguments:a, b}, can_process:{arguments:, default_arguments:}, can_translate_messages:{arguments:, default_arguments:}, connect:{arguments:a, b, c, d, e, default_arguments:a, b, c, d = [], e = 0}, disconnect:{arguments:a, b, c, default_arguments:a, b, c}, divide:{arguments:a, b, default_arguments:a, b}, duplicate:{arguments:a, default_arguments:a = 15}, emit_signal:{arguments:a, default_arguments:a}, find_node:{arguments:a, b, c, default_arguments:a, b = True, c = True}, find_parent:{arguments:a, default_arguments:a}, free:{arguments:, default_arguments:}, get:{arguments:a, default_arguments:a}, get_child:{arguments:a, default_arguments:a}, get_child_count:{arguments:, default_arguments:}, get_children:{arguments:, default_arguments:}, get_class:{arguments:, default_arguments:}, get_custom_multiplayer:{arguments:, default_arguments:}, get_filename:{arguments:, default_arguments:}, get_groups:{arguments:, default_arguments:}, get_incoming_connections:{arguments:, default_arguments:}, get_index:{arguments:, default_arguments:}, get_indexed:{arguments:a, default_arguments:a}, get_instance_id:{arguments:, default_arguments:}, get_meta:{arguments:a, default_arguments:a}, get_meta_list:{arguments:, default_arguments:}, get_method_list:{arguments:, default_arguments:}, get_multiplayer:{arguments:, default_arguments:}, get_name:{arguments:, default_arguments:}, get_network_master:{arguments:, default_arguments:}, get_node:{arguments:a, default_arguments:a}, get_node_and_resource:{arguments:a, default_arguments:a}, get_node_or_null:{arguments:a, default_arguments:a}, get_owner:{arguments:, default_arguments:}, get_parent:{arguments:, default_arguments:}, get_path:{arguments:, default_arguments:}, get_path_to:{arguments:a, default_arguments:a}, get_pause_mode:{arguments:, default_arguments:}, get_physics_process_delta_time:{arguments:, default_arguments:}, get_position_in_parent:{arguments:, default_arguments:}, get_process_delta_time:{arguments:, default_arguments:}, get_process_priority:{arguments:, default_arguments:}, get_property_list:{arguments:, default_arguments:}, get_scene_instance_load_placeholder:{arguments:, default_arguments:}, get_script:{arguments:, default_arguments:}, get_signal_connection_list:{arguments:a, default_arguments:a}, get_signal_list:{arguments:, default_arguments:}, get_tree:{arguments:, default_arguments:}, get_viewport:{arguments:, default_arguments:}, has_meta:{arguments:a, default_arguments:a}, has_method:{arguments:a, default_arguments:a}, has_node:{arguments:a, default_arguments:a}, has_node_and_resource:{arguments:a, default_arguments:a}, has_signal:{arguments:a, default_arguments:a}, has_user_signal:{arguments:a, default_arguments:a}, is_a_parent_of:{arguments:a, default_arguments:a}, is_blocking_signals:{arguments:, default_arguments:}, is_class:{arguments:a, default_arguments:a}, is_connected:{arguments:a, b, c, default_arguments:a, b, c}, is_displayed_folded:{arguments:, default_arguments:}, is_greater_than:{arguments:a, default_arguments:a}, is_in_group:{arguments:a, default_arguments:a}, is_inside_tree:{arguments:, default_arguments:}, is_network_master:{arguments:, default_arguments:}, is_physics_processing:{arguments:, default_arguments:}, is_physics_processing_internal:{arguments:, default_arguments:}, is_processing:{arguments:, default_arguments:}, is_processing_input:{arguments:, default_arguments:}, is_processing_internal:{arguments:, default_arguments:}, is_processing_unhandled_input:{arguments:, default_arguments:}, is_processing_unhandled_key_input:{arguments:, default_arguments:}, is_queued_for_deletion:{arguments:, default_arguments:}, math_fight:{arguments:, default_arguments:}, move_child:{arguments:a, b, default_arguments:a, b}, multiply:{arguments:a, b, default_arguments:a, b}, notification:{arguments:a, b, default_arguments:a, b = False}, pi:{arguments:, default_arguments:}, print_stray_nodes:{arguments:, default_arguments:}, print_tree:{arguments:, default_arguments:}, print_tree_pretty:{arguments:, default_arguments:}, propagate_call:{arguments:a, b, c, default_arguments:a, b = [], c = False}, propagate_notification:{arguments:a, default_arguments:a}, property_list_changed_notify:{arguments:, default_arguments:}, queue_free:{arguments:, default_arguments:}, raise:{arguments:, default_arguments:}, remove_and_skip:{arguments:, default_arguments:}, remove_child:{arguments:a, default_arguments:a}, remove_from_group:{arguments:a, default_arguments:a}, remove_meta:{arguments:a, default_arguments:a}, replace_by:{arguments:a, b, default_arguments:a, b = False}, request_ready:{arguments:, default_arguments:}, rpc:{arguments:a, default_arguments:a}, rpc_config:{arguments:a, b, default_arguments:a, b}, rpc_id:{arguments:a, b, default_arguments:a, b}, rpc_unreliable:{arguments:a, default_arguments:a}, rpc_unreliable_id:{arguments:a, b, default_arguments:a, b}, rset:{arguments:a, b, default_arguments:a, b}, rset_config:{arguments:a, b, default_arguments:a, b}, rset_id:{arguments:a, b, c, default_arguments:a, b, c}, rset_unreliable:{arguments:a, b, default_arguments:a, b}, rset_unreliable_id:{arguments:a, b, c, default_arguments:a, b, c}, set:{arguments:a, b, default_arguments:a, b}, set_block_signals:{arguments:a, default_arguments:a}, set_custom_multiplayer:{arguments:a, default_arguments:a}, set_deferred:{arguments:a, b, default_arguments:a, b}, set_display_folded:{arguments:a, default_arguments:a}, set_filename:{arguments:a, default_arguments:a}, set_indexed:{arguments:a, b, default_arguments:a, b}, set_message_translation:{arguments:a, default_arguments:a}, set_meta:{arguments:a, b, default_arguments:a, b}, set_name:{arguments:a, default_arguments:a}, set_network_master:{arguments:a, b, default_arguments:a, b = True}, set_owner:{arguments:a, default_arguments:a}, set_pause_mode:{arguments:a, default_arguments:a}, set_physics_process:{arguments:a, default_arguments:a}, set_physics_process_internal:{arguments:a, default_arguments:a}, set_process:{arguments:a, default_arguments:a}, set_process_input:{arguments:a, default_arguments:a}, set_process_internal:{arguments:a, default_arguments:a}, set_process_priority:{arguments:a, default_arguments:a}, set_process_unhandled_input:{arguments:a, default_arguments:a}, set_process_unhandled_key_input:{arguments:a, default_arguments:a}, set_scene_instance_load_placeholder:{arguments:a, default_arguments:a}, set_script:{arguments:a, default_arguments:a}, subtract:{arguments:a, b, default_arguments:a, b}, sum:{arguments:a, default_arguments:a}, to_string:{arguments:, default_arguments:}, tr:{arguments:a, default_arguments:a}, update_configuration_warning:{arguments:, default_arguments:}}",
"success": true
} ],
"context": "When we create two of it for the same script",
"fullname": "test_When_we_create_two_of_it_for_the_same_script",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|Object| [Node:3226] is equal to |Object| [Node:3226]",
"context": "Then we get the same double back",
"expected": "|Object| [Node:3226] is equal to |Object| [Node:3226]",
"success": true
} ],
"context": "When we call the double the second time",
"fullname": "test_When_we_call_double_a_second_time_on",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 3,
"path": "res://tests/integration/script_director.test.gd",
"source": {
"containers": [ "res://tests/integration", "res://tests" ],
"method": "",
"path": "res://tests/integration/script_director.test.gd",
"tags": [  ],
"test": ExtResource( 13 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 3
}, {
"context": "Given a Scene Director",
"methods": [ {
"assertions": [ {
"actual": "|Dictionary| {.:[Reference:3049], A:[Reference:3050], A/B:[Reference:3052], C:[Reference:3051], C/D:[Reference:3053]} is not equal to |Dictionary| {.:[Reference:3070], A:[Reference:3071], A/B:[Reference:3073], C:[Reference:3072], C/D:[Reference:3074]}",
"context": "Then they do not share resources",
"expected": "|Dictionary| {.:[Reference:3049], A:[Reference:3050], A/B:[Reference:3052], C:[Reference:3051], C/D:[Reference:3053]} != |Dictionary| {.:[Reference:3070], A:[Reference:3071], A/B:[Reference:3073], C:[Reference:3072], C/D:[Reference:3074]}",
"success": true
} ],
"context": "When we create two of it for the same scene",
"fullname": "test_When_we_create_two_of_it_for_the_same_scene",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 999 is equal to |int| 999",
"context": "Then we get the stubbed return value",
"expected": "|int| 999 is equal to |int| 999",
"success": true
} ],
"context": "When we call a method from a child node that we stubbed",
"fullname": "test_When_we_call_a_method_from_a_child_node_that_we_stubbed",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 9999 is equal to |int| 9999",
"context": "Then we get the stubbed return value",
"expected": "|int| 9999 is equal to |int| 9999",
"success": true
} ],
"context": "When we call a method from the root node that we stubbed",
"fullname": "test_When_we_call_a_method_from_the_root_node_that_we_stubbed",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 99 is equal to |int| 99",
"context": "Then we get the stubbed return value",
"expected": "|int| 99 is equal to |int| 99",
"success": true
} ],
"context": "When we call a method from a grandchild node that we stubbed",
"fullname": "test_When_we_call_a_method_from_a_grandchild_node_that_we_stubbed",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|NodePath| A is equal to |NodePath| A",
"context": "We have the correct NodePath Set",
"expected": "|NodePath| A is equal to |NodePath| A",
"success": true
} ],
"context": "When we add it to the tree it runs",
"fullname": "test_When_we_add_it_to_the_tree_it_runs",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 5,
"path": "res://tests/integration/scene_director.test.gd",
"source": {
"containers": [ "res://tests/integration", "res://tests" ],
"method": "",
"path": "res://tests/integration/scene_director.test.gd",
"tags": [  ],
"test": ExtResource( 4 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 5
}, {
"context": "Given a Boolean Assertion",
"methods": [ {
"assertions": [ {
"actual": "|bool| True != false",
"context": "",
"expected": "|bool| True == false",
"success": false
} ],
"context": " intentional failure",
"fullname": "test_intentional_failure",
"passed": 0,
"success": false,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then it passes",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When calling asserts.is_true(true)",
"fullname": "test_when_calling_asserts_is_true",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| False == false",
"context": "Then it passes",
"expected": "|bool| False == false",
"success": true
} ],
"context": "When calling asserts.is_false(false)",
"fullname": "test_when_calling_asserts_is_false",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 2,
"path": "res://tests/unit/boolean.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/boolean.test.gd",
"tags": [  ],
"test": ExtResource( 11 ),
"yield_time": 0.0
},
"success": false,
"time_taken": 0.0,
"total": 3
}, {
"context": "Given A File Assertion",
"methods": [ {
"assertions": [ {
"actual": "res://somefile.gd does not exist",
"context": "Then it passes",
"expected": "res://somefile.gd does not exist",
"success": true
} ],
"context": "When calling asserts.file_does_not_exist when there is no file",
"fullname": "test_when_calling_file_does_not_exist_when_there_is_no_file",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "res://tests/unit/file.test.gd exists",
"context": "Then it passes",
"expected": "res://tests/unit/file.test.gd exists",
"success": true
} ],
"context": "When calling asserts.file_exists when the file is this suite",
"fullname": "test_when_calling_file_exists_when_file_is_self",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": " does not exist",
"context": "Then it passes",
"expected": " does not exist",
"success": true
} ],
"context": "When calling asserts file does not exist when path is empty",
"fullname": "test_when_calling_file_does_not_exist_when_path_is_empty",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 3,
"path": "res://tests/unit/file.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/file.test.gd",
"tags": [  ],
"test": ExtResource( 3 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 3
}, {
"context": "Given an Equality Assertion",
"methods": [ {
"assertions": [ {
"actual": "|int| 1 is equal to |int| 1",
"context": "Then it passes",
"expected": "|int| 1 is equal to |int| 1",
"success": true
} ],
"context": "When calling asserts.is_equal(1, 1)",
"fullname": "test_when_calling_is_equal",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 2 is equal or greater |int| 1",
"context": "Then it passes",
"expected": "|int| 2 is equal or greater |int| 1",
"success": true
} ],
"context": "When calling asserts.is_equal_or_greater_than(2, 1)",
"fullname": "test_when_calling_is_equal_or_greater_than",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 2 is greater than |int| 1",
"context": "Then it passes",
"expected": "|int| 2 is greater than |int| 1",
"success": true
} ],
"context": "When calling asserts.is_greater_than(2, 1)",
"fullname": "test_when_calling_is_greater_than",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 1 is less than |int| 2",
"context": "Then it passes",
"expected": "|int| 1 is less than |int| 2",
"success": true
} ],
"context": "When calling asserts.is_less_than(2, 1)",
"fullname": "test_when_calling_is_less_than",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 5 is not equal to |int| 6",
"context": "Then it passes",
"expected": "|int| 5 != |int| 6",
"success": true
} ],
"context": "When callign asserts.is_not_equal(5, 6)",
"fullname": "test_when_calling_is_not_equal",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 1 is equal or less than |int| 1",
"context": "Then it passes!",
"expected": "|int| 1 is equal or less than |int| 1",
"success": true
} ],
"context": "When calling asserts.is_equal_or_less_than(1, 1)",
"fullname": "test_when_calling_is_equal_or_less_than_with_equal_values",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 1 is equal or greater |int| 1",
"context": "Then it passes",
"expected": "|int| 1 is equal or greater |int| 1",
"success": true
} ],
"context": "When calling asserts.is_equal_or_greater_than(1, 1)",
"fullname": "test_when_calling_is_equal_or_greater_than_with_equal_values",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 7,
"path": "res://tests/unit/equality.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/equality.test.gd",
"tags": [  ],
"test": ExtResource( 8 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 7
}, {
"context": "Given a Null Assertion",
"methods": [ {
"assertions": [ {
"actual": "|null| Null == null",
"context": "Then it passes",
"expected": "|null| Null == null",
"success": true
} ],
"context": "When calling asserts.is_null(null)",
"fullname": "test_when_calling_null_is_null",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|Object| [Node:3381] != null",
"context": "Then it passes",
"expected": "|Object| [Node:3381] != null",
"success": true
} ],
"context": "When calling Node is not null",
"fullname": "test_when_calling_node_is_not_null",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|Object| [Deleted Object] == null",
"context": "A Freed Node is null in Engine 3.2.2 or greater",
"expected": "|Object| [Deleted Object] == null",
"success": true
} ],
"context": "When calling freed object is null",
"fullname": "test_when_calling_freed_object_is_not_null",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 3,
"path": "res://tests/unit/null.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/null.test.gd",
"tags": [  ],
"test": ExtResource( 12 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 3
}, {
"context": "Given a Test Double",
"methods": [ {
"assertions": [ {
"actual": "|int| 9999 is equal to |int| 9999",
"context": "Then it returns the corresponding value when the pattern matches",
"expected": "|int| 9999 is equal to |int| 9999",
"success": true
} ],
"context": "When we call a method that was stubbed with an argument pattern that includes a non-primitive object",
"fullname": "test_When_we_call_a_method_that_was_stubbed_with_an_argument_pattern_that_includes_a_non_primitive_object",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 9999 is equal to |int| 9999",
"context": "Then it returns the corresponding value when the partial pattern matches",
"expected": "|int| 9999 is equal to |int| 9999",
"success": true
} ],
"context": "When we call a method that was stubbed with a partial (ie using any()) argument pattern",
"fullname": "test_When_we_call_a_method_that_was_stubbed_with_a_partial_argument_pattern",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|null| Null == null",
"context": "Then we get the stubbed value back",
"expected": "|null| Null == null",
"success": true
} ],
"context": "When we stub a method of a doubled inner class",
"fullname": "test_When_we_stub_a_method_of_a_double_inner_class",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|String| Jackie is equal to |String| Jackie",
"context": "Then we can double the object successfully",
"expected": "|String| Jackie is equal to |String| Jackie",
"success": true
} ],
"context": "When we pass in dependecies on direct",
"fullname": "test_When_we_pass_in_deps_on_direct",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 99 is equal to |int| 99",
"context": "Then it returns a value",
"expected": "|int| 99 is equal to |int| 99",
"success": true
} ],
"context": "When we pass a funcref as a subcall that returns",
"fullname": "test_When_we_pass_a_funcref_as_a_subcall_that_returns_a_value",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 99 is equal to |int| 99",
"context": "Then it affects the state of the double",
"expected": "|int| 99 is equal to |int| 99",
"success": true
} ],
"context": "When we pass a funcref as a subcall",
"fullname": "test_When_we_pass_a_funcref_as_a_subcall",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|Array| [10, 5] is equal to |Array| [10, 5]",
"context": "Then it returns a value",
"expected": "|Array| [10, 5] is equal to |Array| [10, 5]",
"success": true
} ],
"context": "When we pass an Object with a call_func function",
"fullname": "test_When_we_pass_an_object_with_callfunc_method_as_a_subcall",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 4 is equal to |int| 4",
"context": "Then it calls its super implementation by default",
"expected": "|int| 4 is equal to |int| 4",
"success": true
}, {
"actual": "|int| 9999 is equal to |int| 9999",
"context": "Then it does not call its super implementation when arguments patterns match a different return value",
"expected": "|int| 9999 is equal to |int| 9999",
"success": true
} ],
"context": "When we call a method that we stubbed to call its super implementation by default",
"fullname": "test_When_we_call_a_method_that_we_stubbed_to_call_its_super_implementation_by_default",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|int| 4 is equal to |int| 4",
"context": "Then we get the correct result",
"expected": "|int| 4 is equal to |int| 4",
"success": true
} ],
"context": "When we call an add(x, y) method that we haven't directed",
"fullname": "test_When_we_call_an_add_method_that_we_have_not_directed",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then it returns true",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we call a method that we have stubbed to return true",
"fullname": "test_When_we_call_a_method_that_we_have_stubbed_to_return_true",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|Object| [Node:3373] is equal to |Object| [Node:3373]",
"context": "Then it returns that same node",
"expected": "|Object| [Node:3373] is equal to |Object| [Node:3373]",
"success": true
} ],
"context": "When we call a method that we have stubbed to return a node",
"fullname": "test_When_we_call_a_method_that_we_have_stubbed_to_return_a_node",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|float| 6.283185 is equal to |float| 6.283185",
"context": "Then we can call the static methods of that inner double",
"expected": "|float| 6.283185 is equal to |float| 6.283185",
"success": true
} ],
"context": "When we add an doubled inner class to it",
"fullname": "test_When_we_add_a_doubled_inner_class_to_it",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "(1, 1) is builtin: Vector2",
"context": "Then we can call methods on it",
"expected": "(1, 1) is builtin: Vector2",
"success": true
} ],
"context": "When we double an inner class",
"fullname": "test_When_we_double_an_inner_class",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 100 is equal to |int| 100",
"context": "Then it returns the default stubbed value when the arguments don't match any pattern",
"expected": "|int| 100 is equal to |int| 100",
"success": true
}, {
"actual": "|int| 1000 is equal to |int| 1000",
"context": "Then it returns the the corresponding value to the pattern the arguments matched",
"expected": "|int| 1000 is equal to |int| 1000",
"success": true
} ],
"context": "When we call a method that was stubbed to return different values based on argument patterns",
"fullname": "test_When_we_call_a_method_that_was_stubbed_to_return_different_values_based_on_argument_patterns",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "add was called",
"context": "Then we can see that it was called at least once",
"expected": "add was called",
"success": true
} ],
"context": "When we call a method that we are spying on",
"fullname": "test_When_we_call_a_method_that_we_are_spying_on",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "method: add was called with arguments: [10, 10]",
"context": "Then we can see that it was called with those arguments",
"expected": "method: add was called with arguments: [10, 10]",
"success": true
} ],
"context": "When we pass arguments to a method call that we are spying on",
"fullname": "test_When_we_pass_arguments_to_a_method_call_that_we_are_spying_on",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| True is equal to |bool| True",
"context": "Then we can call it",
"expected": "|bool| True is equal to |bool| True",
"success": true
} ],
"context": "When we stubbed a keyworded method by passing in the correct keyword",
"fullname": "test_When_we_stubbed_a_keyword_method_by_passing_in_the_correct_keyword",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|String| Jackie is equal to |String| Jackie",
"context": "Then we can double the object successfully",
"expected": "|String| Jackie is equal to |String| Jackie",
"success": true
} ],
"context": "When we pass in dependecies on double",
"fullname": "test_When_we_pass_in_deps_on_double",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|null| Null == null",
"context": "Then we get null",
"expected": "|null| Null == null",
"success": true
} ],
"context": "When we call a method that we have dummied",
"fullname": "test_When_we_call_a_method_that_we_have_dummied",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 19,
"path": "res://tests/integration/test_double.test.gd",
"source": {
"containers": [ "res://tests/integration", "res://tests" ],
"method": "",
"path": "res://tests/integration/test_double.test.gd",
"tags": [  ],
"test": ExtResource( 14 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 19
}, {
"context": "Given an Object Assertion",
"methods": [ {
"assertions": [ {
"actual": "[Node:3419] is not freed",
"context": "Then it passes",
"expected": "[Node:3419] is not freed",
"success": true
} ],
"context": "When calling asserts.is_not_freed(unfreed_object)",
"fullname": "test_when_calling_unfreed_object_is_not_freed",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is freed from memory",
"context": "Then it passes",
"expected": "Null is freed from memory",
"success": true
} ],
"context": "When calling asserts.is_freed(freed_object",
"fullname": "test_when_calling_freed_object_is_freed",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:3401] does not have meta: bad_meta",
"context": "Then it passes",
"expected": "[Node:3401] does not have meta: bad_meta",
"success": true
} ],
"context": "When calling asserts.object_does_not_have_meta()",
"fullname": "test_when_calling_does_not_have_meta",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:3401] has meta: dummy",
"context": "Then it passes",
"expected": "[Node:3401] has meta: dummy",
"success": true
}, {
"actual": "[Node:3401] has meta: dummy",
"context": "Then it passes",
"expected": "[Node:3401] has meta: dummy",
"success": true
} ],
"context": "When calling asserts.object_has_meta() after adding metadata",
"fullname": "test_when_calling_has_meta_after_adding_metadata",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "[Node:3462] is queued for deletion",
"context": "Then it passes",
"expected": "[Node:3462] is queued for deletion",
"success": true
} ],
"context": "When calling asserts.object_is_queued for deletion after calling queue_free",
"fullname": "test_when_calling_obj_is_queued_for_deletion_after_calling_queue_free",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:3401].builtin_dummy is connected to [Node:3401].title",
"context": "Then it passes",
"expected": "[Node:3401].builtin_dummy is connected to [Node:3401].title",
"success": true
} ],
"context": "When calling asserts object is connected with a valid connection",
"fullname": "test_when_calling_obj_is_connected_with_a_real_connection",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:3401].builtin_dummy is not connected to [Node:3401].title",
"context": "Then it passes",
"expected": "[Node:3401].builtin_dummy is not connected to [Node:3401].title",
"success": true
} ],
"context": "When calling asserts object is not connected with an invalid connection",
"fullname": "test_when_calling_obj_is_not_connected_with_an_invalid_connection",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:3483] is blocking signals",
"context": "Then it passes",
"expected": "[Node:3483] is blocking signals",
"success": true
} ],
"context": "When calling is blocking signals while blocking signals",
"fullname": "test_is_blocking_signals",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:3488] is not blocking signals",
"context": "Then it passes",
"expected": "[Node:3488] is not blocking signals",
"success": true
} ],
"context": "When calling is not blocking signals while not blocking signals",
"fullname": "test_is_not_blocking_signals",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:3401] does not have meta: confusing",
"context": "Then it passes",
"expected": "[Node:3401] does not have meta: confusing",
"success": true
} ],
"context": "When calling asserts.object_has_meta with real key but null val",
"fullname": "test_when_calling_does_not_have_meta_real_key_null_value_pair",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:3401] has user signal: dummy_signal",
"context": "Then it passes",
"expected": "[Node:3401] has user signal: dummy_signal",
"success": true
} ],
"context": "When calling obj_has_user_signal after adding a signal",
"fullname": "test_when_calling_has_user_signal_after_adding_a_signal",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:3401] does not have user signal: false_signal",
"context": "Then it passes",
"expected": "[Node:3401] does not have user signal: false_signal",
"success": true
} ],
"context": "When calling obj_does_not_have_user_signal with fake signal",
"fullname": "test_when_calling_does_not_have_user_signal",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:3401] does not have user signal: builtin_dummy",
"context": "Then it passes",
"expected": "[Node:3401] does not have user signal: builtin_dummy",
"success": true
} ],
"context": "When calling does not have user signal with class signal",
"fullname": "test_when_calling_does_not_have_user_signal_with_class_signal_constant",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:3401] has method: title",
"context": "Then it passes",
"expected": "[Node:3401] has method: title",
"success": true
} ],
"context": "When calling has_method('title')",
"fullname": "test_when_calling_has_method_title",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:3510] is not queued for deletion",
"context": "Then it passes",
"expected": "[Node:3510] is not queued for deletion",
"success": true
} ],
"context": "When calling asserts.object_is_not_for_queued_deletion after not calling queue free()",
"fullname": "test_when_calling_obj_is_not_for_queued_deletion_after_not_calling_queue_free",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 15,
"path": "res://tests/unit/object.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/object.test.gd",
"tags": [  ],
"test": ExtResource( 7 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 15
}, {
"context": "Given an Is Instance of class/type Assertion",
"methods": [ {
"assertions": [ {
"actual": "|Plane| 0, 0, 0, 0 != null",
"context": "plane is not null",
"expected": "|Plane| 0, 0, 0, 0 != null",
"success": true
}, {
"actual": "0, 0, 0, 0 is builtin: Plane",
"context": "then it passes",
"expected": "0, 0, 0, 0 is builtin: Plane",
"success": true
} ],
"context": "When calling asserts.is_Plane(plane: Plane())",
"fullname": "test_when_calling_is_Plane",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|AABB| 0, 0, 0 - 0, 0, 0 != null",
"context": "AABB is not null",
"expected": "|AABB| 0, 0, 0 - 0, 0, 0 != null",
"success": true
}, {
"actual": "0, 0, 0 - 0, 0, 0 is builtin: AABB",
"context": "Then it passes",
"expected": "0, 0, 0 - 0, 0, 0 is builtin: AABB",
"success": true
} ],
"context": "When calling asserts.is_AABB(aabb: AABB)",
"fullname": "test_when_calling_is_AABB",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "{} is builtin: Dictionary",
"context": "Then it passes",
"expected": "{} is builtin: Dictionary",
"success": true
} ],
"context": "When calling asserts.is_Dictionary({})",
"fullname": "test_when_calling_is_Dictionary",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|PoolVector2Array| [] != null",
"context": "vec2s is not null",
"expected": "|PoolVector2Array| [] != null",
"success": true
}, {
"actual": "[] is builtin: PoolVector2Array",
"context": "Then it passes",
"expected": "[] is builtin: PoolVector2Array",
"success": true
} ],
"context": "When calling is asserts.is_PoolVector2Array(vec2s: PoolVector2Array)",
"fullname": "test_when_calling_is_PoolVector2Array",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|Rect2| (0, 0, 0, 0) != null",
"context": "rect2 is not null",
"expected": "|Rect2| (0, 0, 0, 0) != null",
"success": true
}, {
"actual": "(0, 0, 0, 0) is builtin: Rect2",
"context": "Then it passes",
"expected": "(0, 0, 0, 0) is builtin: Rect2",
"success": true
} ],
"context": "When calling asserts.is_Rect2(rect2: Rect2)",
"fullname": "test_when_calling_is_Rect2",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|PoolVector3Array| [] != null",
"context": "vec3s is not null",
"expected": "|PoolVector3Array| [] != null",
"success": true
}, {
"actual": "[] is builtin: PoolVector3Array",
"context": "Then it passes",
"expected": "[] is builtin: PoolVector3Array",
"success": true
} ],
"context": "When calling is asserts.is_PoolVector3Array(vec3s: PoolVector3Array)",
"fullname": "test_when_calling_is_PoolVector3Array",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|PoolRealArray| [] != null",
"context": "reals is not null",
"expected": "|PoolRealArray| [] != null",
"success": true
}, {
"actual": "[] is builtin: PoolRealArray",
"context": "Then it passes",
"expected": "[] is builtin: PoolRealArray",
"success": true
} ],
"context": "When calling is asserts.is_PoolRealArray(reals: PoolRealArray)",
"fullname": "test_when_calling_is_PoolRealArray",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|Quat| (0, 0, 0, 1) != null",
"context": "quat is not null",
"expected": "|Quat| (0, 0, 0, 1) != null",
"success": true
}, {
"actual": "(0, 0, 0, 1) is builtin: Quat",
"context": "Then it passes",
"expected": "(0, 0, 0, 1) is builtin: Quat",
"success": true
} ],
"context": "When calling asserts.is_Quat(quat: Quat)",
"fullname": "test_when_calling_is_Quat",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|RID| [RID] != null",
"context": "rid is not null",
"expected": "|RID| [RID] != null",
"success": true
}, {
"actual": "[RID] is builtin: RID",
"context": "Then it passes",
"expected": "[RID] is builtin: RID",
"success": true
} ],
"context": "When calling asserts.is_RID(rid: RID)",
"fullname": "test_when_calling_is_RID",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|Color| 0,0,0,1 != null",
"context": "color is not null",
"expected": "|Color| 0,0,0,1 != null",
"success": true
}, {
"actual": "0,0,0,1 is builtin: Color",
"context": "Then it passes",
"expected": "0,0,0,1 is builtin: Color",
"success": true
} ],
"context": "When calling asserts.is_color(color: Color)",
"fullname": "test_when_calling_is_Color",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|String|  != null",
"context": "strs is not null",
"expected": "|String|  != null",
"success": true
}, {
"actual": " is builtin: String",
"context": "Then it passes",
"expected": " is builtin: String",
"success": true
} ],
"context": "When calling asserts.is_string(strs: String)",
"fullname": "test_when_calling_is_string",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|Transform| 1, 0, 0, 0, 1, 0, 0, 0, 1 - 0, 0, 0 != null",
"context": "transform is not null",
"expected": "|Transform| 1, 0, 0, 0, 1, 0, 0, 0, 1 - 0, 0, 0 != null",
"success": true
}, {
"actual": "1, 0, 0, 0, 1, 0, 0, 0, 1 - 0, 0, 0 is builtin: Transform",
"context": "Then it passes",
"expected": "1, 0, 0, 0, 1, 0, 0, 0, 1 - 0, 0, 0 is builtin: Transform",
"success": true
} ],
"context": "When calling asserts.is_Transform(transform: Transform)",
"fullname": "test_when_calling_is_Transform",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|Transform2D| ((1, 0), (0, 1), (0, 0)) != null",
"context": "transform2D is not null",
"expected": "|Transform2D| ((1, 0), (0, 1), (0, 0)) != null",
"success": true
}, {
"actual": "((1, 0), (0, 1), (0, 0)) is builtin: Transform2D",
"context": "Then it passes",
"expected": "((1, 0), (0, 1), (0, 0)) is builtin: Transform2D",
"success": true
} ],
"context": "When calling asserts.is_Transform(transform2D: Transform2D)",
"fullname": "test_when_calling_is_Transform2D",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|Array| [] != null",
"context": "array is not null",
"expected": "|Array| [] != null",
"success": true
}, {
"actual": "[] is builtin: Array",
"context": "Then it passes",
"expected": "[] is builtin: Array",
"success": true
} ],
"context": "When calling asserts.is_Array(array: Array)",
"fullname": "test_when_calling_is_Array",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|Vector2| (0, 0) != null",
"context": "vec2 is not null",
"expected": "|Vector2| (0, 0) != null",
"success": true
}, {
"actual": "(0, 0) is builtin: Vector2",
"context": "Then it passes",
"expected": "(0, 0) is builtin: Vector2",
"success": true
} ],
"context": "When calling asserts.is_Vector2(vec2)",
"fullname": "test_when_calling_is_Vector2",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|PoolStringArray| [] != null",
"context": "strs is not null",
"expected": "|PoolStringArray| [] != null",
"success": true
}, {
"actual": "[] is builtin: PoolStringArray",
"context": "Then it passes",
"expected": "[] is builtin: PoolStringArray",
"success": true
} ],
"context": "When calling is asserts.is_PoolStringArray(strs: PoolStringArray)",
"fullname": "test_when_calling_is_PoolStringArray",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|NodePath| . != null",
"context": "@'Parent/Child' is not null",
"expected": "|NodePath| . != null",
"success": true
}, {
"actual": ". is builtin: NodePath",
"context": "Then it passes",
"expected": ". is builtin: NodePath",
"success": true
} ],
"context": "When calling asserts.is_NodePath(@'Parent/Child')",
"fullname": "test_when_calling_is_NodePath",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|Object| [Node:3480] != null",
"context": "node is not null",
"expected": "|Object| [Node:3480] != null",
"success": true
}, {
"actual": "[Node:3480] is builtin: Object",
"context": "An instance of node is an Object",
"expected": "[Node:3480] is builtin: Object",
"success": true
} ],
"context": "When calling is asserts.object(node: Node)",
"fullname": "test_when_calling_is_object",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|PoolByteArray| [PoolByteArray] != null",
"context": "bytes is not null",
"expected": "|PoolByteArray| [PoolByteArray] != null",
"success": true
}, {
"actual": "[PoolByteArray] is builtin: PoolByteArray",
"context": "Then it passes",
"expected": "[PoolByteArray] is builtin: PoolByteArray",
"success": true
} ],
"context": "When calling asserts.is_PoolByteArray(bytes: PoolByteArray)",
"fullname": "test_when_calling_is_PoolByteArray",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|PoolIntArray| [] != null",
"context": "ints is not null",
"expected": "|PoolIntArray| [] != null",
"success": true
}, {
"actual": "[] is builtin: PoolIntArray",
"context": "Then it passes",
"expected": "[] is builtin: PoolIntArray",
"success": true
} ],
"context": "When calling asserts.is_PoolIntArray(ints: PoolIntArray)",
"fullname": "test_when_calling_is_PoolIntArray",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "1 is builtin: int",
"context": "Then it passes",
"expected": "1 is builtin: int",
"success": true
} ],
"context": "When callign asserts.is_int(1)",
"fullname": "test_when_calling_is_int",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|Vector3| (0, 0, 0) != null",
"context": "vec3 is not null",
"expected": "|Vector3| (0, 0, 0) != null",
"success": true
}, {
"actual": "(0, 0, 0) is builtin: Vector3",
"context": "Then it passes",
"expected": "(0, 0, 0) is builtin: Vector3",
"success": true
} ],
"context": "When calling asserts.is_Vector3(vec3: Vector3",
"fullname": "test_when_calling_is_Vector3",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "1 is builtin: float",
"context": "Then it passes",
"expected": "1 is builtin: float",
"success": true
} ],
"context": "When calling asserts.is_float(1.0)",
"fullname": "test_when_calling_is_float",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|PoolColorArray| [PoolColorArray] != null",
"context": "colors is not null",
"expected": "|PoolColorArray| [PoolColorArray] != null",
"success": true
}, {
"actual": "[PoolColorArray] is builtin: PoolColorArray",
"context": "Then it passes",
"expected": "[PoolColorArray] is builtin: PoolColorArray",
"success": true
} ],
"context": "When calling asserts.is_PoolColorArray(colors: PoolColorArray)",
"fullname": "test_when_calling_is_PoolColorArray",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "True is builtin: bool",
"context": "Then it passes",
"expected": "True is builtin: bool",
"success": true
} ],
"context": "When calling asserts.is_bool(true)",
"fullname": "test_when_calling_is_bool",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|Basis| ((1, 0, 0), (0, 1, 0), (0, 0, 1)) != null",
"context": "basis is not null",
"expected": "|Basis| ((1, 0, 0), (0, 1, 0), (0, 0, 1)) != null",
"success": true
}, {
"actual": "((1, 0, 0), (0, 1, 0), (0, 0, 1)) is builtin: Basis",
"context": "Then it passes",
"expected": "((1, 0, 0), (0, 1, 0), (0, 0, 1)) is builtin: Basis",
"success": true
} ],
"context": "When calling asserts.is_basis(basis: Basis",
"fullname": "test_when_calling_is_Basis",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
} ],
"passed": 26,
"path": "res://tests/unit/is_instance.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/is_instance.test.gd",
"tags": [  ],
"test": ExtResource( 6 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 26
}, {
"context": "Given an Is Not Instance of class/type Assertion",
"methods": [ {
"assertions": [ {
"actual": "Null is not builtin: AABB",
"context": "Then it passes",
"expected": "Null is not builtin: AABB",
"success": true
} ],
"context": "when calling asserts.is_not_AABB(null)",
"fullname": "test_when_calling_is_not_AABB",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Basis",
"context": "Then it passes",
"expected": "Null is not builtin: Basis",
"success": true
} ],
"context": "when calling asserts.is_not_Basis(null)",
"fullname": "test_when_calling_is_not_Basis",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Array",
"context": "Then it passes",
"expected": "Null is not builtin: Array",
"success": true
} ],
"context": "when calling asserts.is_not_Array(null)",
"fullname": "test_when_calling_is_not_Array",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: RID",
"context": "Then it passes",
"expected": "Null is not builtin: RID",
"success": true
} ],
"context": "when calling asserts.is_not_RID(null)",
"fullname": "test_when_calling_is_not_RID",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Vector2",
"context": "Then it passes",
"expected": "Null is not builtin: Vector2",
"success": true
} ],
"context": "when calling asserts.is_not_Vector2(null)",
"fullname": "test_when_calling_is_not_Vector2",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Color",
"context": "Then it passes",
"expected": "Null is not builtin: Color",
"success": true
} ],
"context": "when calling asserts.is_not_Color(null)",
"fullname": "test_when_calling_is_not_Color",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Object",
"context": "Then it passes",
"expected": "Null is not builtin: Object",
"success": true
} ],
"context": "when calling asserts.is_not_Object(null)",
"fullname": "test_when_calling_is_not_Object",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Rect2",
"context": "Then it passes",
"expected": "Null is not builtin: Rect2",
"success": true
} ],
"context": "when calling asserts.is_not_Rect2(null)",
"fullname": "test_when_calling_is_not_Rect2",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: PoolVector2Array",
"context": "Then it passes",
"expected": "Null is not builtin: PoolVector2Array",
"success": true
} ],
"context": "when calling asserts.is_not_PoolVector2Array(null)",
"fullname": "test_when_calling_is_not_PoolVector2Array",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: int",
"context": "Then it passes",
"expected": "Null is not builtin: int",
"success": true
} ],
"context": "when calling asserts.is_not_int(null)",
"fullname": "test_when_calling_is_not_int",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: PoolIntArray",
"context": "Then it passes",
"expected": "Null is not builtin: PoolIntArray",
"success": true
} ],
"context": "when calling asserts.is_not_PoolIntArray(null)",
"fullname": "test_when_calling_is_not_PoolIntArray",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: NodePath",
"context": "Then it passes",
"expected": "Null is not builtin: NodePath",
"success": true
} ],
"context": "when calling asserts.is_not_NodePath(null)",
"fullname": "test_when_calling_is_not_NodePath",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Plane",
"context": "Then it passes",
"expected": "Null is not builtin: Plane",
"success": true
} ],
"context": "when calling asserts.is_not_Plane(null)",
"fullname": "test_when_calling_is_not_Plane",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: PoolVector3Array",
"context": "Then it passes",
"expected": "Null is not builtin: PoolVector3Array",
"success": true
} ],
"context": "when calling asserts.is_not_PoolVector3Array(null)",
"fullname": "test_when_calling_is_not_PoolVector3Array",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Transform",
"context": "Then it passes",
"expected": "Null is not builtin: Transform",
"success": true
} ],
"context": "when calling asserts.is_not_Transform(null)",
"fullname": "test_when_calling_is_not_Transform",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Transform2D",
"context": "Then it passes",
"expected": "Null is not builtin: Transform2D",
"success": true
} ],
"context": "when calling asserts.is_not_Transform2D(null)",
"fullname": "test_when_calling_is_not_Transform2D",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: bool",
"context": "Then it passes",
"expected": "Null is not builtin: bool",
"success": true
} ],
"context": "when calling asserts.is_not_bool(null)",
"fullname": "test_when_calling_is_not_bool",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: PoolColorArray",
"context": "Then it passes",
"expected": "Null is not builtin: PoolColorArray",
"success": true
} ],
"context": "when calling asserts.is_not_PoolColorArray(null)",
"fullname": "test_when_calling_is_not_PoolColorArray",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: PoolRealArray",
"context": "Then it passes",
"expected": "Null is not builtin: PoolRealArray",
"success": true
} ],
"context": "when calling asserts.is_not_PoolRealArray(null)",
"fullname": "test_when_calling_is_not_PoolRealArray",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: PoolStringArray",
"context": "Then it passes",
"expected": "Null is not builtin: PoolStringArray",
"success": true
} ],
"context": "when calling asserts.is_not_PoolStringArray(null)",
"fullname": "test_when_calling_is_not_PoolStringArray",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Quat",
"context": "Then it passes",
"expected": "Null is not builtin: Quat",
"success": true
} ],
"context": "when calling asserts.is_not_Quat(null)",
"fullname": "test_when_calling_is_not_Quat",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Dictionary",
"context": "Then it passes",
"expected": "Null is not builtin: Dictionary",
"success": true
} ],
"context": "when calling asserts.is_not_Dictionary(null)",
"fullname": "test_when_calling_is_not_Dictionary",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Vector3",
"context": "Then it passes",
"expected": "Null is not builtin: Vector3",
"success": true
} ],
"context": "when calling asserts.is_not_Vector3(null)",
"fullname": "test_when_calling_is_not_Vector3",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: PoolByteArray",
"context": "Then it passes",
"expected": "Null is not builtin: PoolByteArray",
"success": true
} ],
"context": "when calling asserts.is_not_PoolByteArray(null)",
"fullname": "test_when_calling_is_not_PoolByteArray",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: float",
"context": "Then it passes",
"expected": "Null is not builtin: float",
"success": true
} ],
"context": "when calling asserts.is_not_float(null)",
"fullname": "test_when_calling_is_not_float",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: String",
"context": "Then it passes",
"expected": "Null is not builtin: String",
"success": true
} ],
"context": "when calling asserts.is_not_String(null)",
"fullname": "test_when_calling_is_not_String",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 26,
"path": "res://tests/unit/is_not_instance.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/is_not_instance.test.gd",
"tags": [  ],
"test": ExtResource( 2 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 26
}, {
"context": "Given the Addition Operator",
"methods": [ {
"assertions": [ {
"actual": "|int| 4 is equal to |int| 4",
"context": "",
"expected": "|int| 4 is equal to |int| 4",
"success": true
} ],
"context": "When we add 2 to 2 we get 4",
"fullname": "test_add",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 8 is equal to |int| 8",
"context": "",
"expected": "|int| 8 is equal to |int| 8",
"success": true
} ],
"context": "When we add 5 to 3 we get 8",
"fullname": "test_add",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 13 is equal to |int| 13",
"context": "",
"expected": "|int| 13 is equal to |int| 13",
"success": true
} ],
"context": "When we add 7 to 6 we get 13",
"fullname": "test_add",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 0 is equal to |int| 0",
"context": "",
"expected": "|int| 0 is equal to |int| 0",
"success": true
} ],
"context": "When we subtract 2 from 2 we get 0",
"fullname": "test_subtract",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 2 is equal to |int| 2",
"context": "",
"expected": "|int| 2 is equal to |int| 2",
"success": true
} ],
"context": "When we subtract 5 from 3 we get 2",
"fullname": "test_subtract",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 1 is equal to |int| 1",
"context": "",
"expected": "|int| 1 is equal to |int| 1",
"success": true
} ],
"context": "When we subtract 7 from 6 we get 1",
"fullname": "test_subtract",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 6,
"path": "res://tests/unit/parameters.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/parameters.test.gd",
"tags": [  ],
"test": ExtResource( 16 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 6
}, {
"context": "Dummy Passing Test",
"methods": [ {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Passing!",
"expected": "|bool| True == true",
"success": true
} ],
"context": "This method passes",
"fullname": "test_this_method_passes",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 1,
"path": "res://tests/unit/suite.test.gd.DummyOne",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/suite.test.gd.DummyOne",
"tags": [  ],
"test": SubResource( 21 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 1
}, {
"context": "Dummy Test 2",
"methods": [ {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Passing!",
"expected": "|bool| True == true",
"success": true
} ],
"context": "This method passes",
"fullname": "test_this_method_passes",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 1,
"path": "res://tests/unit/suite.test.gd.DummyTwo",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/suite.test.gd.DummyTwo",
"tags": [  ],
"test": SubResource( 22 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 1
}, {
"context": "Given A Range Assertion",
"methods": [ {
"assertions": [ {
"actual": "10 is not in range(0, 10)",
"context": "Then it passes",
"expected": "10 is not in range(0, 10)",
"success": true
} ],
"context": "When calling is (10) not in range (in range(0, 10)",
"fullname": "test_when_calling_is_not_in_range",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "0 is in range(0, 10)",
"context": "Then it passes",
"expected": "0 is in range(0, 10)",
"success": true
} ],
"context": "When calling is (0) in range(0, 10)",
"fullname": "test_when_calling_is_in_range",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 2,
"path": "res://tests/unit/range.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/range.test.gd",
"tags": [  ],
"test": ExtResource( 15 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 2
}, {
"context": "Given a String Assertion",
"methods": [ {
"assertions": [ {
"actual": "lorem impsum ends with impsum",
"context": "Then it passes",
"expected": "lorem impsum ends with impsum",
"success": true
} ],
"context": "When calling asserts.string_ends_with('impsum', 'lorem impsum')",
"fullname": "test_when_calling_string_ends_with",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "impsum does not end with lorem",
"context": "Then it passes",
"expected": "impsum does not end with lorem",
"success": true
} ],
"context": "When calling asserts.string_does_not_end_with('lorem', 'impsum')",
"fullname": "test_when_calling_string_does_not_end_with",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "lorem impsum begins with lorem",
"context": "Then it passes",
"expected": "lorem impsum begins with lorem",
"success": true
} ],
"context": "When calling asserts.string_begins_with('lorem', 'lorem impsum')",
"fullname": "test_when_calling_string_begins_with",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "impsum does not contain beem im",
"context": "Then it passes",
"expected": "impsum does not contain beem im",
"success": true
} ],
"context": "When calling asserts.string_does_not_contain('em im', 'impsum')",
"fullname": "test_when_calling_string_does_not_contain",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "impsum does not begin with bleh lorem",
"context": "Then it passes",
"expected": "impsum does not begin with bleh lorem",
"success": true
} ],
"context": "When calling asserts.string_does_not_begin_with('lorem', 'impsum')",
"fullname": "test_when_calling_string_does_not_begin_with",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "lorem impsum contains em im",
"context": "Then it passes",
"expected": "lorem impsum contains em im",
"success": true
} ],
"context": "When calling asserts.string_contains('em im', 'lorem impsum')",
"fullname": "test_when_calling_string_contains",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 6,
"path": "res://tests/unit/string.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/string.test.gd",
"tags": [  ],
"test": ExtResource( 9 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 6
}, {
"context": "Given a Boolean Assertion",
"methods": [ {
"assertions": [ {
"actual": "|bool| True != false",
"context": "",
"expected": "|bool| True == false",
"success": false
} ],
"context": " intentional failure",
"fullname": "test_intentional_failure",
"passed": 0,
"success": false,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then it passes",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When calling asserts.is_true(true)",
"fullname": "test_when_calling_asserts_is_true",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| False == false",
"context": "Then it passes",
"expected": "|bool| False == false",
"success": true
} ],
"context": "When calling asserts.is_false(false)",
"fullname": "test_when_calling_asserts_is_false",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 2,
"path": "res://tests/integration/boolean.test.gd",
"source": {
"containers": [ "res://tests/integration", "res://tests" ],
"method": "",
"path": "res://tests/integration/boolean.test.gd",
"tags": [  ],
"test": ExtResource( 20 ),
"yield_time": 0.0
},
"success": false,
"time_taken": 0.0,
"total": 3
}, {
"context": "Given a Test Script",
"methods": [ {
"assertions": [ {
"actual": "|bool| True == true",
"context": "if the test didn't break this works",
"expected": "|bool| True == true",
"success": true
} ],
"context": " we can omit describe",
"fullname": "test_we_can_omit_describe",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 10 is greater than |int| 1",
"context": "We get an array of multiple values back",
"expected": "|int| 10 is greater than |int| 1",
"success": true
}, {
"actual": "|int| 0 is not equal to |int| 9",
"context": "With different values",
"expected": "|int| 0 != |int| 9",
"success": true
}, {
"actual": "|int| 10 is greater than |int| 1",
"context": "And we can track multiple properties",
"expected": "|int| 10 is greater than |int| 1",
"success": true
} ],
"context": "When we record properties",
"fullname": "test_we_can_record_properties",
"passed": 3,
"success": true,
"time": 0.0,
"total": 3
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|int| 2 is equal to |int| 2",
"context": "",
"expected": "|int| 2 is equal to |int| 2",
"success": true
} ],
"context": " when we omit context we can see expected and got under method",
"fullname": "test_when_we_omit_context_we_can_see_expected_and_got_under_method",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
} ],
"passed": 3,
"path": "res://tests/unit/test.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/test.test.gd",
"tags": [  ],
"test": ExtResource( 19 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 3
}, {
"context": "Given a Signal Watcher",
"methods": [ {
"assertions": [ {
"actual": "signal: example was emitted from [Node:3551]",
"context": "Then it captures the emitted signal",
"expected": "signal: example was emitted from [Node:3551]",
"success": true
} ],
"context": "When we watch and emit a signal",
"fullname": "test_When_we_watch_and_emit_a_signal",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Signal: example was emitted from [Node:3551] with arguments: [1, 20, 5]",
"context": "Then it captures any arguments that where passed when the signal was emitted",
"expected": "Signal: example was emitted from [Node:3551] with arguments: [1, 20, 5]",
"success": true
} ],
"context": "When we watch a signal from an object with no bound variables",
"fullname": "test_When_we_watch_a_signal_from_an_object_with_no_bound_variables",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Signal: example was not emitted from [Node:3551]",
"context": "Then it does not capture the non-emitted signal",
"expected": "Signal: example was not emitted from [Node:3551]",
"success": true
} ],
"context": "When we watch and do not emit a signal",
"fullname": "test_When_we_watch_and_do_not_emit_a_signal",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "signal: multiple was emitted from [Node:3551] 2",
"context": "Then we can track how many times we emitted it",
"expected": "signal: multiple was emitted from [Node:3551] 2",
"success": true
} ],
"context": "When we watch and signal and emit it multiple times",
"fullname": "test_When_we_watch_a_signal_and_emit_it_multiple_times",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 4,
"path": "res://tests/unit/watcher.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/watcher.test.gd",
"tags": [  ],
"test": ExtResource( 17 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 4
}, {
"context": "Default Args",
"methods": [ {
"assertions": [ {
"actual": "|bool| True == true",
"context": "If this method can be reached then we have doubled a script with default argument(s) properly!",
"expected": "|bool| True == true",
"success": true
} ],
"context": " default arguments of interpolate property",
"fullname": "test_default_arguments_of_interpolate_property",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 1,
"path": "res://tests/integration/default_args.test.gd",
"source": {
"containers": [ "res://tests/integration", "res://tests" ],
"method": "",
"path": "res://tests/integration/default_args.test.gd",
"tags": [  ],
"test": ExtResource( 10 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 1
}, {
"context": "Given is_on_floor",
"methods": [ {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then it can be stubbed",
"expected": "|bool| True == true",
"success": true
} ],
"context": "From a built-in KinematicBody2D2",
"fullname": "test_stubbing_is_on_floor_method_from_builtin_class2",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then it can be stubbed",
"expected": "|bool| True == true",
"success": true
} ],
"context": "From a child node of a scene without scripts",
"fullname": "test_stubbing_is_on_floor_as_child_node_with_no_script",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then it can be stubbed",
"expected": "|bool| True == true",
"success": true
} ],
"context": "From a user-defined script",
"fullname": "test_stubbing_is_on_floor_method_from_user_defined_class",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 3,
"path": "res://tests/integration/on_floor.test.gd",
"source": {
"containers": [ "res://tests/integration", "res://tests" ],
"method": "",
"path": "res://tests/integration/on_floor.test.gd",
"tags": [  ],
"test": ExtResource( 5 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 3
}, {
"context": "Given a Script Director",
"methods": [ {
"assertions": [ {
"actual": "[Reference:3689] is instance of class: [GDScript:1453]",
"context": "Then we get that inner class back",
"expected": "[Reference:3689] is instance of class: [GDScript:1453]",
"success": true
} ],
"context": "When we double an inner class",
"fullname": "test_When_we_double_an_inner_class",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|Dictionary| {_enter_tree:{arguments:, default_arguments:}, _exit_tree:{arguments:, default_arguments:}, _get:{arguments:a, default_arguments:a}, _get_configuration_warning:{arguments:, default_arguments:}, _get_editor_description:{arguments:, default_arguments:}, _get_import_path:{arguments:, default_arguments:}, _get_property_list:{arguments:, default_arguments:}, _init:{arguments:, default_arguments:}, _input:{arguments:a, default_arguments:a}, _notification:{arguments:a, default_arguments:a}, _physics_process:{arguments:a, default_arguments:a}, _process:{arguments:a, default_arguments:a}, _ready:{arguments:, default_arguments:}, _set:{arguments:a, b, default_arguments:a, b}, _set_editor_description:{arguments:a, default_arguments:a}, _set_import_path:{arguments:a, default_arguments:a}, _to_string:{arguments:, default_arguments:}, _unhandled_input:{arguments:a, default_arguments:a}, _unhandled_key_input:{arguments:a, default_arguments:a}, add:{arguments:a, b, default_arguments:a, b}, add_child:{arguments:a, b, default_arguments:a, b = False}, add_child_below_node:{arguments:a, b, c, default_arguments:a, b, c = False}, add_to_group:{arguments:a, b, default_arguments:a, b = False}, add_user_signal:{arguments:a, b, default_arguments:a, b = []}, call:{arguments:a, default_arguments:a}, call_deferred:{arguments:a, default_arguments:a}, callv:{arguments:a, b, default_arguments:a, b}, can_process:{arguments:, default_arguments:}, can_translate_messages:{arguments:, default_arguments:}, connect:{arguments:a, b, c, d, e, default_arguments:a, b, c, d = [], e = 0}, disconnect:{arguments:a, b, c, default_arguments:a, b, c}, divide:{arguments:a, b, default_arguments:a, b}, duplicate:{arguments:a, default_arguments:a = 15}, emit_signal:{arguments:a, default_arguments:a}, find_node:{arguments:a, b, c, default_arguments:a, b = True, c = True}, find_parent:{arguments:a, default_arguments:a}, free:{arguments:, default_arguments:}, get:{arguments:a, default_arguments:a}, get_child:{arguments:a, default_arguments:a}, get_child_count:{arguments:, default_arguments:}, get_children:{arguments:, default_arguments:}, get_class:{arguments:, default_arguments:}, get_custom_multiplayer:{arguments:, default_arguments:}, get_filename:{arguments:, default_arguments:}, get_groups:{arguments:, default_arguments:}, get_incoming_connections:{arguments:, default_arguments:}, get_index:{arguments:, default_arguments:}, get_indexed:{arguments:a, default_arguments:a}, get_instance_id:{arguments:, default_arguments:}, get_meta:{arguments:a, default_arguments:a}, get_meta_list:{arguments:, default_arguments:}, get_method_list:{arguments:, default_arguments:}, get_multiplayer:{arguments:, default_arguments:}, get_name:{arguments:, default_arguments:}, get_network_master:{arguments:, default_arguments:}, get_node:{arguments:a, default_arguments:a}, get_node_and_resource:{arguments:a, default_arguments:a}, get_node_or_null:{arguments:a, default_arguments:a}, get_owner:{arguments:, default_arguments:}, get_parent:{arguments:, default_arguments:}, get_path:{arguments:, default_arguments:}, get_path_to:{arguments:a, default_arguments:a}, get_pause_mode:{arguments:, default_arguments:}, get_physics_process_delta_time:{arguments:, default_arguments:}, get_position_in_parent:{arguments:, default_arguments:}, get_process_delta_time:{arguments:, default_arguments:}, get_process_priority:{arguments:, default_arguments:}, get_property_list:{arguments:, default_arguments:}, get_scene_instance_load_placeholder:{arguments:, default_arguments:}, get_script:{arguments:, default_arguments:}, get_signal_connection_list:{arguments:a, default_arguments:a}, get_signal_list:{arguments:, default_arguments:}, get_tree:{arguments:, default_arguments:}, get_viewport:{arguments:, default_arguments:}, has_meta:{arguments:a, default_arguments:a}, has_method:{arguments:a, default_arguments:a}, has_node:{arguments:a, default_arguments:a}, has_node_and_resource:{arguments:a, default_arguments:a}, has_signal:{arguments:a, default_arguments:a}, has_user_signal:{arguments:a, default_arguments:a}, is_a_parent_of:{arguments:a, default_arguments:a}, is_blocking_signals:{arguments:, default_arguments:}, is_class:{arguments:a, default_arguments:a}, is_connected:{arguments:a, b, c, default_arguments:a, b, c}, is_displayed_folded:{arguments:, default_arguments:}, is_greater_than:{arguments:a, default_arguments:a}, is_in_group:{arguments:a, default_arguments:a}, is_inside_tree:{arguments:, default_arguments:}, is_network_master:{arguments:, default_arguments:}, is_physics_processing:{arguments:, default_arguments:}, is_physics_processing_internal:{arguments:, default_arguments:}, is_processing:{arguments:, default_arguments:}, is_processing_input:{arguments:, default_arguments:}, is_processing_internal:{arguments:, default_arguments:}, is_processing_unhandled_input:{arguments:, default_arguments:}, is_processing_unhandled_key_input:{arguments:, default_arguments:}, is_queued_for_deletion:{arguments:, default_arguments:}, math_fight:{arguments:, default_arguments:}, move_child:{arguments:a, b, default_arguments:a, b}, multiply:{arguments:a, b, default_arguments:a, b}, notification:{arguments:a, b, default_arguments:a, b = False}, pi:{arguments:, default_arguments:}, print_stray_nodes:{arguments:, default_arguments:}, print_tree:{arguments:, default_arguments:}, print_tree_pretty:{arguments:, default_arguments:}, propagate_call:{arguments:a, b, c, default_arguments:a, b = [], c = False}, propagate_notification:{arguments:a, default_arguments:a}, property_list_changed_notify:{arguments:, default_arguments:}, queue_free:{arguments:, default_arguments:}, raise:{arguments:, default_arguments:}, remove_and_skip:{arguments:, default_arguments:}, remove_child:{arguments:a, default_arguments:a}, remove_from_group:{arguments:a, default_arguments:a}, remove_meta:{arguments:a, default_arguments:a}, replace_by:{arguments:a, b, default_arguments:a, b = False}, request_ready:{arguments:, default_arguments:}, rpc:{arguments:a, default_arguments:a}, rpc_config:{arguments:a, b, default_arguments:a, b}, rpc_id:{arguments:a, b, default_arguments:a, b}, rpc_unreliable:{arguments:a, default_arguments:a}, rpc_unreliable_id:{arguments:a, b, default_arguments:a, b}, rset:{arguments:a, b, default_arguments:a, b}, rset_config:{arguments:a, b, default_arguments:a, b}, rset_id:{arguments:a, b, c, default_arguments:a, b, c}, rset_unreliable:{arguments:a, b, default_arguments:a, b}, rset_unreliable_id:{arguments:a, b, c, default_arguments:a, b, c}, set:{arguments:a, b, default_arguments:a, b}, set_block_signals:{arguments:a, default_arguments:a}, set_custom_multiplayer:{arguments:a, default_arguments:a}, set_deferred:{arguments:a, b, default_arguments:a, b}, set_display_folded:{arguments:a, default_arguments:a}, set_filename:{arguments:a, default_arguments:a}, set_indexed:{arguments:a, b, default_arguments:a, b}, set_message_translation:{arguments:a, default_arguments:a}, set_meta:{arguments:a, b, default_arguments:a, b}, set_name:{arguments:a, default_arguments:a}, set_network_master:{arguments:a, b, default_arguments:a, b = True}, set_owner:{arguments:a, default_arguments:a}, set_pause_mode:{arguments:a, default_arguments:a}, set_physics_process:{arguments:a, default_arguments:a}, set_physics_process_internal:{arguments:a, default_arguments:a}, set_process:{arguments:a, default_arguments:a}, set_process_input:{arguments:a, default_arguments:a}, set_process_internal:{arguments:a, default_arguments:a}, set_process_priority:{arguments:a, default_arguments:a}, set_process_unhandled_input:{arguments:a, default_arguments:a}, set_process_unhandled_key_input:{arguments:a, default_arguments:a}, set_scene_instance_load_placeholder:{arguments:a, default_arguments:a}, set_script:{arguments:a, default_arguments:a}, subtract:{arguments:a, b, default_arguments:a, b}, sum:{arguments:a, default_arguments:a}, to_string:{arguments:, default_arguments:}, tr:{arguments:a, default_arguments:a}, update_configuration_warning:{arguments:, default_arguments:}} is not equal to |Dictionary| {_enter_tree:{arguments:, default_arguments:}, _exit_tree:{arguments:, default_arguments:}, _get:{arguments:a, default_arguments:a}, _get_configuration_warning:{arguments:, default_arguments:}, _get_editor_description:{arguments:, default_arguments:}, _get_import_path:{arguments:, default_arguments:}, _get_property_list:{arguments:, default_arguments:}, _init:{arguments:, default_arguments:}, _input:{arguments:a, default_arguments:a}, _notification:{arguments:a, default_arguments:a}, _physics_process:{arguments:a, default_arguments:a}, _process:{arguments:a, default_arguments:a}, _ready:{arguments:, default_arguments:}, _set:{arguments:a, b, default_arguments:a, b}, _set_editor_description:{arguments:a, default_arguments:a}, _set_import_path:{arguments:a, default_arguments:a}, _to_string:{arguments:, default_arguments:}, _unhandled_input:{arguments:a, default_arguments:a}, _unhandled_key_input:{arguments:a, default_arguments:a}, add:{arguments:a, b, default_arguments:a, b}, add_child:{arguments:a, b, default_arguments:a, b = False}, add_child_below_node:{arguments:a, b, c, default_arguments:a, b, c = False}, add_to_group:{arguments:a, b, default_arguments:a, b = False}, add_user_signal:{arguments:a, b, default_arguments:a, b = []}, call:{arguments:a, default_arguments:a}, call_deferred:{arguments:a, default_arguments:a}, callv:{arguments:a, b, default_arguments:a, b}, can_process:{arguments:, default_arguments:}, can_translate_messages:{arguments:, default_arguments:}, connect:{arguments:a, b, c, d, e, default_arguments:a, b, c, d = [], e = 0}, disconnect:{arguments:a, b, c, default_arguments:a, b, c}, divide:{arguments:a, b, default_arguments:a, b}, duplicate:{arguments:a, default_arguments:a = 15}, emit_signal:{arguments:a, default_arguments:a}, find_node:{arguments:a, b, c, default_arguments:a, b = True, c = True}, find_parent:{arguments:a, default_arguments:a}, free:{arguments:, default_arguments:}, get:{arguments:a, default_arguments:a}, get_child:{arguments:a, default_arguments:a}, get_child_count:{arguments:, default_arguments:}, get_children:{arguments:, default_arguments:}, get_class:{arguments:, default_arguments:}, get_custom_multiplayer:{arguments:, default_arguments:}, get_filename:{arguments:, default_arguments:}, get_groups:{arguments:, default_arguments:}, get_incoming_connections:{arguments:, default_arguments:}, get_index:{arguments:, default_arguments:}, get_indexed:{arguments:a, default_arguments:a}, get_instance_id:{arguments:, default_arguments:}, get_meta:{arguments:a, default_arguments:a}, get_meta_list:{arguments:, default_arguments:}, get_method_list:{arguments:, default_arguments:}, get_multiplayer:{arguments:, default_arguments:}, get_name:{arguments:, default_arguments:}, get_network_master:{arguments:, default_arguments:}, get_node:{arguments:a, default_arguments:a}, get_node_and_resource:{arguments:a, default_arguments:a}, get_node_or_null:{arguments:a, default_arguments:a}, get_owner:{arguments:, default_arguments:}, get_parent:{arguments:, default_arguments:}, get_path:{arguments:, default_arguments:}, get_path_to:{arguments:a, default_arguments:a}, get_pause_mode:{arguments:, default_arguments:}, get_physics_process_delta_time:{arguments:, default_arguments:}, get_position_in_parent:{arguments:, default_arguments:}, get_process_delta_time:{arguments:, default_arguments:}, get_process_priority:{arguments:, default_arguments:}, get_property_list:{arguments:, default_arguments:}, get_scene_instance_load_placeholder:{arguments:, default_arguments:}, get_script:{arguments:, default_arguments:}, get_signal_connection_list:{arguments:a, default_arguments:a}, get_signal_list:{arguments:, default_arguments:}, get_tree:{arguments:, default_arguments:}, get_viewport:{arguments:, default_arguments:}, has_meta:{arguments:a, default_arguments:a}, has_method:{arguments:a, default_arguments:a}, has_node:{arguments:a, default_arguments:a}, has_node_and_resource:{arguments:a, default_arguments:a}, has_signal:{arguments:a, default_arguments:a}, has_user_signal:{arguments:a, default_arguments:a}, is_a_parent_of:{arguments:a, default_arguments:a}, is_blocking_signals:{arguments:, default_arguments:}, is_class:{arguments:a, default_arguments:a}, is_connected:{arguments:a, b, c, default_arguments:a, b, c}, is_displayed_folded:{arguments:, default_arguments:}, is_greater_than:{arguments:a, default_arguments:a}, is_in_group:{arguments:a, default_arguments:a}, is_inside_tree:{arguments:, default_arguments:}, is_network_master:{arguments:, default_arguments:}, is_physics_processing:{arguments:, default_arguments:}, is_physics_processing_internal:{arguments:, default_arguments:}, is_processing:{arguments:, default_arguments:}, is_processing_input:{arguments:, default_arguments:}, is_processing_internal:{arguments:, default_arguments:}, is_processing_unhandled_input:{arguments:, default_arguments:}, is_processing_unhandled_key_input:{arguments:, default_arguments:}, is_queued_for_deletion:{arguments:, default_arguments:}, math_fight:{arguments:, default_arguments:}, move_child:{arguments:a, b, default_arguments:a, b}, multiply:{arguments:a, b, default_arguments:a, b}, notification:{arguments:a, b, default_arguments:a, b = False}, pi:{arguments:, default_arguments:}, print_stray_nodes:{arguments:, default_arguments:}, print_tree:{arguments:, default_arguments:}, print_tree_pretty:{arguments:, default_arguments:}, propagate_call:{arguments:a, b, c, default_arguments:a, b = [], c = False}, propagate_notification:{arguments:a, default_arguments:a}, property_list_changed_notify:{arguments:, default_arguments:}, queue_free:{arguments:, default_arguments:}, raise:{arguments:, default_arguments:}, remove_and_skip:{arguments:, default_arguments:}, remove_child:{arguments:a, default_arguments:a}, remove_from_group:{arguments:a, default_arguments:a}, remove_meta:{arguments:a, default_arguments:a}, replace_by:{arguments:a, b, default_arguments:a, b = False}, request_ready:{arguments:, default_arguments:}, rpc:{arguments:a, default_arguments:a}, rpc_config:{arguments:a, b, default_arguments:a, b}, rpc_id:{arguments:a, b, default_arguments:a, b}, rpc_unreliable:{arguments:a, default_arguments:a}, rpc_unreliable_id:{arguments:a, b, default_arguments:a, b}, rset:{arguments:a, b, default_arguments:a, b}, rset_config:{arguments:a, b, default_arguments:a, b}, rset_id:{arguments:a, b, c, default_arguments:a, b, c}, rset_unreliable:{arguments:a, b, default_arguments:a, b}, rset_unreliable_id:{arguments:a, b, c, default_arguments:a, b, c}, set:{arguments:a, b, default_arguments:a, b}, set_block_signals:{arguments:a, default_arguments:a}, set_custom_multiplayer:{arguments:a, default_arguments:a}, set_deferred:{arguments:a, b, default_arguments:a, b}, set_display_folded:{arguments:a, default_arguments:a}, set_filename:{arguments:a, default_arguments:a}, set_indexed:{arguments:a, b, default_arguments:a, b}, set_message_translation:{arguments:a, default_arguments:a}, set_meta:{arguments:a, b, default_arguments:a, b}, set_name:{arguments:a, default_arguments:a}, set_network_master:{arguments:a, b, default_arguments:a, b = True}, set_owner:{arguments:a, default_arguments:a}, set_pause_mode:{arguments:a, default_arguments:a}, set_physics_process:{arguments:a, default_arguments:a}, set_physics_process_internal:{arguments:a, default_arguments:a}, set_process:{arguments:a, default_arguments:a}, set_process_input:{arguments:a, default_arguments:a}, set_process_internal:{arguments:a, default_arguments:a}, set_process_priority:{arguments:a, default_arguments:a}, set_process_unhandled_input:{arguments:a, default_arguments:a}, set_process_unhandled_key_input:{arguments:a, default_arguments:a}, set_scene_instance_load_placeholder:{arguments:a, default_arguments:a}, set_script:{arguments:a, default_arguments:a}, subtract:{arguments:a, b, default_arguments:a, b}, sum:{arguments:a, default_arguments:a}, to_string:{arguments:, default_arguments:}, tr:{arguments:a, default_arguments:a}, update_configuration_warning:{arguments:, default_arguments:}}",
"context": "Then they do not share resources",
"expected": "|Dictionary| {_enter_tree:{arguments:, default_arguments:}, _exit_tree:{arguments:, default_arguments:}, _get:{arguments:a, default_arguments:a}, _get_configuration_warning:{arguments:, default_arguments:}, _get_editor_description:{arguments:, default_arguments:}, _get_import_path:{arguments:, default_arguments:}, _get_property_list:{arguments:, default_arguments:}, _init:{arguments:, default_arguments:}, _input:{arguments:a, default_arguments:a}, _notification:{arguments:a, default_arguments:a}, _physics_process:{arguments:a, default_arguments:a}, _process:{arguments:a, default_arguments:a}, _ready:{arguments:, default_arguments:}, _set:{arguments:a, b, default_arguments:a, b}, _set_editor_description:{arguments:a, default_arguments:a}, _set_import_path:{arguments:a, default_arguments:a}, _to_string:{arguments:, default_arguments:}, _unhandled_input:{arguments:a, default_arguments:a}, _unhandled_key_input:{arguments:a, default_arguments:a}, add:{arguments:a, b, default_arguments:a, b}, add_child:{arguments:a, b, default_arguments:a, b = False}, add_child_below_node:{arguments:a, b, c, default_arguments:a, b, c = False}, add_to_group:{arguments:a, b, default_arguments:a, b = False}, add_user_signal:{arguments:a, b, default_arguments:a, b = []}, call:{arguments:a, default_arguments:a}, call_deferred:{arguments:a, default_arguments:a}, callv:{arguments:a, b, default_arguments:a, b}, can_process:{arguments:, default_arguments:}, can_translate_messages:{arguments:, default_arguments:}, connect:{arguments:a, b, c, d, e, default_arguments:a, b, c, d = [], e = 0}, disconnect:{arguments:a, b, c, default_arguments:a, b, c}, divide:{arguments:a, b, default_arguments:a, b}, duplicate:{arguments:a, default_arguments:a = 15}, emit_signal:{arguments:a, default_arguments:a}, find_node:{arguments:a, b, c, default_arguments:a, b = True, c = True}, find_parent:{arguments:a, default_arguments:a}, free:{arguments:, default_arguments:}, get:{arguments:a, default_arguments:a}, get_child:{arguments:a, default_arguments:a}, get_child_count:{arguments:, default_arguments:}, get_children:{arguments:, default_arguments:}, get_class:{arguments:, default_arguments:}, get_custom_multiplayer:{arguments:, default_arguments:}, get_filename:{arguments:, default_arguments:}, get_groups:{arguments:, default_arguments:}, get_incoming_connections:{arguments:, default_arguments:}, get_index:{arguments:, default_arguments:}, get_indexed:{arguments:a, default_arguments:a}, get_instance_id:{arguments:, default_arguments:}, get_meta:{arguments:a, default_arguments:a}, get_meta_list:{arguments:, default_arguments:}, get_method_list:{arguments:, default_arguments:}, get_multiplayer:{arguments:, default_arguments:}, get_name:{arguments:, default_arguments:}, get_network_master:{arguments:, default_arguments:}, get_node:{arguments:a, default_arguments:a}, get_node_and_resource:{arguments:a, default_arguments:a}, get_node_or_null:{arguments:a, default_arguments:a}, get_owner:{arguments:, default_arguments:}, get_parent:{arguments:, default_arguments:}, get_path:{arguments:, default_arguments:}, get_path_to:{arguments:a, default_arguments:a}, get_pause_mode:{arguments:, default_arguments:}, get_physics_process_delta_time:{arguments:, default_arguments:}, get_position_in_parent:{arguments:, default_arguments:}, get_process_delta_time:{arguments:, default_arguments:}, get_process_priority:{arguments:, default_arguments:}, get_property_list:{arguments:, default_arguments:}, get_scene_instance_load_placeholder:{arguments:, default_arguments:}, get_script:{arguments:, default_arguments:}, get_signal_connection_list:{arguments:a, default_arguments:a}, get_signal_list:{arguments:, default_arguments:}, get_tree:{arguments:, default_arguments:}, get_viewport:{arguments:, default_arguments:}, has_meta:{arguments:a, default_arguments:a}, has_method:{arguments:a, default_arguments:a}, has_node:{arguments:a, default_arguments:a}, has_node_and_resource:{arguments:a, default_arguments:a}, has_signal:{arguments:a, default_arguments:a}, has_user_signal:{arguments:a, default_arguments:a}, is_a_parent_of:{arguments:a, default_arguments:a}, is_blocking_signals:{arguments:, default_arguments:}, is_class:{arguments:a, default_arguments:a}, is_connected:{arguments:a, b, c, default_arguments:a, b, c}, is_displayed_folded:{arguments:, default_arguments:}, is_greater_than:{arguments:a, default_arguments:a}, is_in_group:{arguments:a, default_arguments:a}, is_inside_tree:{arguments:, default_arguments:}, is_network_master:{arguments:, default_arguments:}, is_physics_processing:{arguments:, default_arguments:}, is_physics_processing_internal:{arguments:, default_arguments:}, is_processing:{arguments:, default_arguments:}, is_processing_input:{arguments:, default_arguments:}, is_processing_internal:{arguments:, default_arguments:}, is_processing_unhandled_input:{arguments:, default_arguments:}, is_processing_unhandled_key_input:{arguments:, default_arguments:}, is_queued_for_deletion:{arguments:, default_arguments:}, math_fight:{arguments:, default_arguments:}, move_child:{arguments:a, b, default_arguments:a, b}, multiply:{arguments:a, b, default_arguments:a, b}, notification:{arguments:a, b, default_arguments:a, b = False}, pi:{arguments:, default_arguments:}, print_stray_nodes:{arguments:, default_arguments:}, print_tree:{arguments:, default_arguments:}, print_tree_pretty:{arguments:, default_arguments:}, propagate_call:{arguments:a, b, c, default_arguments:a, b = [], c = False}, propagate_notification:{arguments:a, default_arguments:a}, property_list_changed_notify:{arguments:, default_arguments:}, queue_free:{arguments:, default_arguments:}, raise:{arguments:, default_arguments:}, remove_and_skip:{arguments:, default_arguments:}, remove_child:{arguments:a, default_arguments:a}, remove_from_group:{arguments:a, default_arguments:a}, remove_meta:{arguments:a, default_arguments:a}, replace_by:{arguments:a, b, default_arguments:a, b = False}, request_ready:{arguments:, default_arguments:}, rpc:{arguments:a, default_arguments:a}, rpc_config:{arguments:a, b, default_arguments:a, b}, rpc_id:{arguments:a, b, default_arguments:a, b}, rpc_unreliable:{arguments:a, default_arguments:a}, rpc_unreliable_id:{arguments:a, b, default_arguments:a, b}, rset:{arguments:a, b, default_arguments:a, b}, rset_config:{arguments:a, b, default_arguments:a, b}, rset_id:{arguments:a, b, c, default_arguments:a, b, c}, rset_unreliable:{arguments:a, b, default_arguments:a, b}, rset_unreliable_id:{arguments:a, b, c, default_arguments:a, b, c}, set:{arguments:a, b, default_arguments:a, b}, set_block_signals:{arguments:a, default_arguments:a}, set_custom_multiplayer:{arguments:a, default_arguments:a}, set_deferred:{arguments:a, b, default_arguments:a, b}, set_display_folded:{arguments:a, default_arguments:a}, set_filename:{arguments:a, default_arguments:a}, set_indexed:{arguments:a, b, default_arguments:a, b}, set_message_translation:{arguments:a, default_arguments:a}, set_meta:{arguments:a, b, default_arguments:a, b}, set_name:{arguments:a, default_arguments:a}, set_network_master:{arguments:a, b, default_arguments:a, b = True}, set_owner:{arguments:a, default_arguments:a}, set_pause_mode:{arguments:a, default_arguments:a}, set_physics_process:{arguments:a, default_arguments:a}, set_physics_process_internal:{arguments:a, default_arguments:a}, set_process:{arguments:a, default_arguments:a}, set_process_input:{arguments:a, default_arguments:a}, set_process_internal:{arguments:a, default_arguments:a}, set_process_priority:{arguments:a, default_arguments:a}, set_process_unhandled_input:{arguments:a, default_arguments:a}, set_process_unhandled_key_input:{arguments:a, default_arguments:a}, set_scene_instance_load_placeholder:{arguments:a, default_arguments:a}, set_script:{arguments:a, default_arguments:a}, subtract:{arguments:a, b, default_arguments:a, b}, sum:{arguments:a, default_arguments:a}, to_string:{arguments:, default_arguments:}, tr:{arguments:a, default_arguments:a}, update_configuration_warning:{arguments:, default_arguments:}} != |Dictionary| {_enter_tree:{arguments:, default_arguments:}, _exit_tree:{arguments:, default_arguments:}, _get:{arguments:a, default_arguments:a}, _get_configuration_warning:{arguments:, default_arguments:}, _get_editor_description:{arguments:, default_arguments:}, _get_import_path:{arguments:, default_arguments:}, _get_property_list:{arguments:, default_arguments:}, _init:{arguments:, default_arguments:}, _input:{arguments:a, default_arguments:a}, _notification:{arguments:a, default_arguments:a}, _physics_process:{arguments:a, default_arguments:a}, _process:{arguments:a, default_arguments:a}, _ready:{arguments:, default_arguments:}, _set:{arguments:a, b, default_arguments:a, b}, _set_editor_description:{arguments:a, default_arguments:a}, _set_import_path:{arguments:a, default_arguments:a}, _to_string:{arguments:, default_arguments:}, _unhandled_input:{arguments:a, default_arguments:a}, _unhandled_key_input:{arguments:a, default_arguments:a}, add:{arguments:a, b, default_arguments:a, b}, add_child:{arguments:a, b, default_arguments:a, b = False}, add_child_below_node:{arguments:a, b, c, default_arguments:a, b, c = False}, add_to_group:{arguments:a, b, default_arguments:a, b = False}, add_user_signal:{arguments:a, b, default_arguments:a, b = []}, call:{arguments:a, default_arguments:a}, call_deferred:{arguments:a, default_arguments:a}, callv:{arguments:a, b, default_arguments:a, b}, can_process:{arguments:, default_arguments:}, can_translate_messages:{arguments:, default_arguments:}, connect:{arguments:a, b, c, d, e, default_arguments:a, b, c, d = [], e = 0}, disconnect:{arguments:a, b, c, default_arguments:a, b, c}, divide:{arguments:a, b, default_arguments:a, b}, duplicate:{arguments:a, default_arguments:a = 15}, emit_signal:{arguments:a, default_arguments:a}, find_node:{arguments:a, b, c, default_arguments:a, b = True, c = True}, find_parent:{arguments:a, default_arguments:a}, free:{arguments:, default_arguments:}, get:{arguments:a, default_arguments:a}, get_child:{arguments:a, default_arguments:a}, get_child_count:{arguments:, default_arguments:}, get_children:{arguments:, default_arguments:}, get_class:{arguments:, default_arguments:}, get_custom_multiplayer:{arguments:, default_arguments:}, get_filename:{arguments:, default_arguments:}, get_groups:{arguments:, default_arguments:}, get_incoming_connections:{arguments:, default_arguments:}, get_index:{arguments:, default_arguments:}, get_indexed:{arguments:a, default_arguments:a}, get_instance_id:{arguments:, default_arguments:}, get_meta:{arguments:a, default_arguments:a}, get_meta_list:{arguments:, default_arguments:}, get_method_list:{arguments:, default_arguments:}, get_multiplayer:{arguments:, default_arguments:}, get_name:{arguments:, default_arguments:}, get_network_master:{arguments:, default_arguments:}, get_node:{arguments:a, default_arguments:a}, get_node_and_resource:{arguments:a, default_arguments:a}, get_node_or_null:{arguments:a, default_arguments:a}, get_owner:{arguments:, default_arguments:}, get_parent:{arguments:, default_arguments:}, get_path:{arguments:, default_arguments:}, get_path_to:{arguments:a, default_arguments:a}, get_pause_mode:{arguments:, default_arguments:}, get_physics_process_delta_time:{arguments:, default_arguments:}, get_position_in_parent:{arguments:, default_arguments:}, get_process_delta_time:{arguments:, default_arguments:}, get_process_priority:{arguments:, default_arguments:}, get_property_list:{arguments:, default_arguments:}, get_scene_instance_load_placeholder:{arguments:, default_arguments:}, get_script:{arguments:, default_arguments:}, get_signal_connection_list:{arguments:a, default_arguments:a}, get_signal_list:{arguments:, default_arguments:}, get_tree:{arguments:, default_arguments:}, get_viewport:{arguments:, default_arguments:}, has_meta:{arguments:a, default_arguments:a}, has_method:{arguments:a, default_arguments:a}, has_node:{arguments:a, default_arguments:a}, has_node_and_resource:{arguments:a, default_arguments:a}, has_signal:{arguments:a, default_arguments:a}, has_user_signal:{arguments:a, default_arguments:a}, is_a_parent_of:{arguments:a, default_arguments:a}, is_blocking_signals:{arguments:, default_arguments:}, is_class:{arguments:a, default_arguments:a}, is_connected:{arguments:a, b, c, default_arguments:a, b, c}, is_displayed_folded:{arguments:, default_arguments:}, is_greater_than:{arguments:a, default_arguments:a}, is_in_group:{arguments:a, default_arguments:a}, is_inside_tree:{arguments:, default_arguments:}, is_network_master:{arguments:, default_arguments:}, is_physics_processing:{arguments:, default_arguments:}, is_physics_processing_internal:{arguments:, default_arguments:}, is_processing:{arguments:, default_arguments:}, is_processing_input:{arguments:, default_arguments:}, is_processing_internal:{arguments:, default_arguments:}, is_processing_unhandled_input:{arguments:, default_arguments:}, is_processing_unhandled_key_input:{arguments:, default_arguments:}, is_queued_for_deletion:{arguments:, default_arguments:}, math_fight:{arguments:, default_arguments:}, move_child:{arguments:a, b, default_arguments:a, b}, multiply:{arguments:a, b, default_arguments:a, b}, notification:{arguments:a, b, default_arguments:a, b = False}, pi:{arguments:, default_arguments:}, print_stray_nodes:{arguments:, default_arguments:}, print_tree:{arguments:, default_arguments:}, print_tree_pretty:{arguments:, default_arguments:}, propagate_call:{arguments:a, b, c, default_arguments:a, b = [], c = False}, propagate_notification:{arguments:a, default_arguments:a}, property_list_changed_notify:{arguments:, default_arguments:}, queue_free:{arguments:, default_arguments:}, raise:{arguments:, default_arguments:}, remove_and_skip:{arguments:, default_arguments:}, remove_child:{arguments:a, default_arguments:a}, remove_from_group:{arguments:a, default_arguments:a}, remove_meta:{arguments:a, default_arguments:a}, replace_by:{arguments:a, b, default_arguments:a, b = False}, request_ready:{arguments:, default_arguments:}, rpc:{arguments:a, default_arguments:a}, rpc_config:{arguments:a, b, default_arguments:a, b}, rpc_id:{arguments:a, b, default_arguments:a, b}, rpc_unreliable:{arguments:a, default_arguments:a}, rpc_unreliable_id:{arguments:a, b, default_arguments:a, b}, rset:{arguments:a, b, default_arguments:a, b}, rset_config:{arguments:a, b, default_arguments:a, b}, rset_id:{arguments:a, b, c, default_arguments:a, b, c}, rset_unreliable:{arguments:a, b, default_arguments:a, b}, rset_unreliable_id:{arguments:a, b, c, default_arguments:a, b, c}, set:{arguments:a, b, default_arguments:a, b}, set_block_signals:{arguments:a, default_arguments:a}, set_custom_multiplayer:{arguments:a, default_arguments:a}, set_deferred:{arguments:a, b, default_arguments:a, b}, set_display_folded:{arguments:a, default_arguments:a}, set_filename:{arguments:a, default_arguments:a}, set_indexed:{arguments:a, b, default_arguments:a, b}, set_message_translation:{arguments:a, default_arguments:a}, set_meta:{arguments:a, b, default_arguments:a, b}, set_name:{arguments:a, default_arguments:a}, set_network_master:{arguments:a, b, default_arguments:a, b = True}, set_owner:{arguments:a, default_arguments:a}, set_pause_mode:{arguments:a, default_arguments:a}, set_physics_process:{arguments:a, default_arguments:a}, set_physics_process_internal:{arguments:a, default_arguments:a}, set_process:{arguments:a, default_arguments:a}, set_process_input:{arguments:a, default_arguments:a}, set_process_internal:{arguments:a, default_arguments:a}, set_process_priority:{arguments:a, default_arguments:a}, set_process_unhandled_input:{arguments:a, default_arguments:a}, set_process_unhandled_key_input:{arguments:a, default_arguments:a}, set_scene_instance_load_placeholder:{arguments:a, default_arguments:a}, set_script:{arguments:a, default_arguments:a}, subtract:{arguments:a, b, default_arguments:a, b}, sum:{arguments:a, default_arguments:a}, to_string:{arguments:, default_arguments:}, tr:{arguments:a, default_arguments:a}, update_configuration_warning:{arguments:, default_arguments:}}",
"success": true
} ],
"context": "When we create two of it for the same script",
"fullname": "test_When_we_create_two_of_it_for_the_same_script",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|Object| [Node:3768] is equal to |Object| [Node:3768]",
"context": "Then we get the same double back",
"expected": "|Object| [Node:3768] is equal to |Object| [Node:3768]",
"success": true
} ],
"context": "When we call the double the second time",
"fullname": "test_When_we_call_double_a_second_time_on",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 3,
"path": "res://tests/integration/script_director.test.gd",
"source": {
"containers": [ "res://tests/integration", "res://tests" ],
"method": "",
"path": "res://tests/integration/script_director.test.gd",
"tags": [  ],
"test": ExtResource( 13 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 3
}, {
"context": "Given a Scene Director",
"methods": [ {
"assertions": [ {
"actual": "|Dictionary| {.:[Reference:3596], A:[Reference:3597], A/B:[Reference:3599], C:[Reference:3598], C/D:[Reference:3600]} is not equal to |Dictionary| {.:[Reference:3622], A:[Reference:3623], A/B:[Reference:3625], C:[Reference:3624], C/D:[Reference:3626]}",
"context": "Then they do not share resources",
"expected": "|Dictionary| {.:[Reference:3596], A:[Reference:3597], A/B:[Reference:3599], C:[Reference:3598], C/D:[Reference:3600]} != |Dictionary| {.:[Reference:3622], A:[Reference:3623], A/B:[Reference:3625], C:[Reference:3624], C/D:[Reference:3626]}",
"success": true
} ],
"context": "When we create two of it for the same scene",
"fullname": "test_When_we_create_two_of_it_for_the_same_scene",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 999 is equal to |int| 999",
"context": "Then we get the stubbed return value",
"expected": "|int| 999 is equal to |int| 999",
"success": true
} ],
"context": "When we call a method from a child node that we stubbed",
"fullname": "test_When_we_call_a_method_from_a_child_node_that_we_stubbed",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 9999 is equal to |int| 9999",
"context": "Then we get the stubbed return value",
"expected": "|int| 9999 is equal to |int| 9999",
"success": true
} ],
"context": "When we call a method from the root node that we stubbed",
"fullname": "test_When_we_call_a_method_from_the_root_node_that_we_stubbed",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 99 is equal to |int| 99",
"context": "Then we get the stubbed return value",
"expected": "|int| 99 is equal to |int| 99",
"success": true
} ],
"context": "When we call a method from a grandchild node that we stubbed",
"fullname": "test_When_we_call_a_method_from_a_grandchild_node_that_we_stubbed",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|NodePath| A is equal to |NodePath| A",
"context": "We have the correct NodePath Set",
"expected": "|NodePath| A is equal to |NodePath| A",
"success": true
} ],
"context": "When we add it to the tree it runs",
"fullname": "test_When_we_add_it_to_the_tree_it_runs",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 5,
"path": "res://tests/integration/scene_director.test.gd",
"source": {
"containers": [ "res://tests/integration", "res://tests" ],
"method": "",
"path": "res://tests/integration/scene_director.test.gd",
"tags": [  ],
"test": ExtResource( 4 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 5
}, {
"context": "Given a Boolean Assertion",
"methods": [ {
"assertions": [ {
"actual": "|bool| True != false",
"context": "",
"expected": "|bool| True == false",
"success": false
} ],
"context": " intentional failure",
"fullname": "test_intentional_failure",
"passed": 0,
"success": false,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then it passes",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When calling asserts.is_true(true)",
"fullname": "test_when_calling_asserts_is_true",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| False == false",
"context": "Then it passes",
"expected": "|bool| False == false",
"success": true
} ],
"context": "When calling asserts.is_false(false)",
"fullname": "test_when_calling_asserts_is_false",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 2,
"path": "res://tests/unit/boolean.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/boolean.test.gd",
"tags": [  ],
"test": ExtResource( 11 ),
"yield_time": 0.0
},
"success": false,
"time_taken": 0.0,
"total": 3
}, {
"context": "Given A File Assertion",
"methods": [ {
"assertions": [ {
"actual": "res://somefile.gd does not exist",
"context": "Then it passes",
"expected": "res://somefile.gd does not exist",
"success": true
} ],
"context": "When calling asserts.file_does_not_exist when there is no file",
"fullname": "test_when_calling_file_does_not_exist_when_there_is_no_file",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "res://tests/unit/file.test.gd exists",
"context": "Then it passes",
"expected": "res://tests/unit/file.test.gd exists",
"success": true
} ],
"context": "When calling asserts.file_exists when the file is this suite",
"fullname": "test_when_calling_file_exists_when_file_is_self",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": " does not exist",
"context": "Then it passes",
"expected": " does not exist",
"success": true
} ],
"context": "When calling asserts file does not exist when path is empty",
"fullname": "test_when_calling_file_does_not_exist_when_path_is_empty",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 3,
"path": "res://tests/unit/file.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/file.test.gd",
"tags": [  ],
"test": ExtResource( 3 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 3
}, {
"context": "Given an Equality Assertion",
"methods": [ {
"assertions": [ {
"actual": "|int| 1 is equal to |int| 1",
"context": "Then it passes",
"expected": "|int| 1 is equal to |int| 1",
"success": true
} ],
"context": "When calling asserts.is_equal(1, 1)",
"fullname": "test_when_calling_is_equal",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 2 is equal or greater |int| 1",
"context": "Then it passes",
"expected": "|int| 2 is equal or greater |int| 1",
"success": true
} ],
"context": "When calling asserts.is_equal_or_greater_than(2, 1)",
"fullname": "test_when_calling_is_equal_or_greater_than",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 2 is greater than |int| 1",
"context": "Then it passes",
"expected": "|int| 2 is greater than |int| 1",
"success": true
} ],
"context": "When calling asserts.is_greater_than(2, 1)",
"fullname": "test_when_calling_is_greater_than",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 1 is less than |int| 2",
"context": "Then it passes",
"expected": "|int| 1 is less than |int| 2",
"success": true
} ],
"context": "When calling asserts.is_less_than(2, 1)",
"fullname": "test_when_calling_is_less_than",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 5 is not equal to |int| 6",
"context": "Then it passes",
"expected": "|int| 5 != |int| 6",
"success": true
} ],
"context": "When callign asserts.is_not_equal(5, 6)",
"fullname": "test_when_calling_is_not_equal",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 1 is equal or less than |int| 1",
"context": "Then it passes!",
"expected": "|int| 1 is equal or less than |int| 1",
"success": true
} ],
"context": "When calling asserts.is_equal_or_less_than(1, 1)",
"fullname": "test_when_calling_is_equal_or_less_than_with_equal_values",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 1 is equal or greater |int| 1",
"context": "Then it passes",
"expected": "|int| 1 is equal or greater |int| 1",
"success": true
} ],
"context": "When calling asserts.is_equal_or_greater_than(1, 1)",
"fullname": "test_when_calling_is_equal_or_greater_than_with_equal_values",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 7,
"path": "res://tests/unit/equality.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/equality.test.gd",
"tags": [  ],
"test": ExtResource( 8 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 7
}, {
"context": "Given a Test Double",
"methods": [ {
"assertions": [ {
"actual": "|int| 9999 is equal to |int| 9999",
"context": "Then it returns the corresponding value when the pattern matches",
"expected": "|int| 9999 is equal to |int| 9999",
"success": true
} ],
"context": "When we call a method that was stubbed with an argument pattern that includes a non-primitive object",
"fullname": "test_When_we_call_a_method_that_was_stubbed_with_an_argument_pattern_that_includes_a_non_primitive_object",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 9999 is equal to |int| 9999",
"context": "Then it returns the corresponding value when the partial pattern matches",
"expected": "|int| 9999 is equal to |int| 9999",
"success": true
} ],
"context": "When we call a method that was stubbed with a partial (ie using any()) argument pattern",
"fullname": "test_When_we_call_a_method_that_was_stubbed_with_a_partial_argument_pattern",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|null| Null == null",
"context": "Then we get the stubbed value back",
"expected": "|null| Null == null",
"success": true
} ],
"context": "When we stub a method of a doubled inner class",
"fullname": "test_When_we_stub_a_method_of_a_double_inner_class",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|String| Jackie is equal to |String| Jackie",
"context": "Then we can double the object successfully",
"expected": "|String| Jackie is equal to |String| Jackie",
"success": true
} ],
"context": "When we pass in dependecies on direct",
"fullname": "test_When_we_pass_in_deps_on_direct",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 99 is equal to |int| 99",
"context": "Then it returns a value",
"expected": "|int| 99 is equal to |int| 99",
"success": true
} ],
"context": "When we pass a funcref as a subcall that returns",
"fullname": "test_When_we_pass_a_funcref_as_a_subcall_that_returns_a_value",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 99 is equal to |int| 99",
"context": "Then it affects the state of the double",
"expected": "|int| 99 is equal to |int| 99",
"success": true
} ],
"context": "When we pass a funcref as a subcall",
"fullname": "test_When_we_pass_a_funcref_as_a_subcall",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|Array| [10, 5] is equal to |Array| [10, 5]",
"context": "Then it returns a value",
"expected": "|Array| [10, 5] is equal to |Array| [10, 5]",
"success": true
} ],
"context": "When we pass an Object with a call_func function",
"fullname": "test_When_we_pass_an_object_with_callfunc_method_as_a_subcall",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 4 is equal to |int| 4",
"context": "Then it calls its super implementation by default",
"expected": "|int| 4 is equal to |int| 4",
"success": true
}, {
"actual": "|int| 9999 is equal to |int| 9999",
"context": "Then it does not call its super implementation when arguments patterns match a different return value",
"expected": "|int| 9999 is equal to |int| 9999",
"success": true
} ],
"context": "When we call a method that we stubbed to call its super implementation by default",
"fullname": "test_When_we_call_a_method_that_we_stubbed_to_call_its_super_implementation_by_default",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|int| 4 is equal to |int| 4",
"context": "Then we get the correct result",
"expected": "|int| 4 is equal to |int| 4",
"success": true
} ],
"context": "When we call an add(x, y) method that we haven't directed",
"fullname": "test_When_we_call_an_add_method_that_we_have_not_directed",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then it returns true",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we call a method that we have stubbed to return true",
"fullname": "test_When_we_call_a_method_that_we_have_stubbed_to_return_true",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|Object| [Node:3900] is equal to |Object| [Node:3900]",
"context": "Then it returns that same node",
"expected": "|Object| [Node:3900] is equal to |Object| [Node:3900]",
"success": true
} ],
"context": "When we call a method that we have stubbed to return a node",
"fullname": "test_When_we_call_a_method_that_we_have_stubbed_to_return_a_node",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|float| 6.283185 is equal to |float| 6.283185",
"context": "Then we can call the static methods of that inner double",
"expected": "|float| 6.283185 is equal to |float| 6.283185",
"success": true
} ],
"context": "When we add an doubled inner class to it",
"fullname": "test_When_we_add_a_doubled_inner_class_to_it",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "(1, 1) is builtin: Vector2",
"context": "Then we can call methods on it",
"expected": "(1, 1) is builtin: Vector2",
"success": true
} ],
"context": "When we double an inner class",
"fullname": "test_When_we_double_an_inner_class",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 100 is equal to |int| 100",
"context": "Then it returns the default stubbed value when the arguments don't match any pattern",
"expected": "|int| 100 is equal to |int| 100",
"success": true
}, {
"actual": "|int| 1000 is equal to |int| 1000",
"context": "Then it returns the the corresponding value to the pattern the arguments matched",
"expected": "|int| 1000 is equal to |int| 1000",
"success": true
} ],
"context": "When we call a method that was stubbed to return different values based on argument patterns",
"fullname": "test_When_we_call_a_method_that_was_stubbed_to_return_different_values_based_on_argument_patterns",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "add was called",
"context": "Then we can see that it was called at least once",
"expected": "add was called",
"success": true
} ],
"context": "When we call a method that we are spying on",
"fullname": "test_When_we_call_a_method_that_we_are_spying_on",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "method: add was called with arguments: [10, 10]",
"context": "Then we can see that it was called with those arguments",
"expected": "method: add was called with arguments: [10, 10]",
"success": true
} ],
"context": "When we pass arguments to a method call that we are spying on",
"fullname": "test_When_we_pass_arguments_to_a_method_call_that_we_are_spying_on",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| True is equal to |bool| True",
"context": "Then we can call it",
"expected": "|bool| True is equal to |bool| True",
"success": true
} ],
"context": "When we stubbed a keyworded method by passing in the correct keyword",
"fullname": "test_When_we_stubbed_a_keyword_method_by_passing_in_the_correct_keyword",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|String| Jackie is equal to |String| Jackie",
"context": "Then we can double the object successfully",
"expected": "|String| Jackie is equal to |String| Jackie",
"success": true
} ],
"context": "When we pass in dependecies on double",
"fullname": "test_When_we_pass_in_deps_on_double",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|null| Null == null",
"context": "Then we get null",
"expected": "|null| Null == null",
"success": true
} ],
"context": "When we call a method that we have dummied",
"fullname": "test_When_we_call_a_method_that_we_have_dummied",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 19,
"path": "res://tests/integration/test_double.test.gd",
"source": {
"containers": [ "res://tests/integration", "res://tests" ],
"method": "",
"path": "res://tests/integration/test_double.test.gd",
"tags": [  ],
"test": ExtResource( 14 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 19
}, {
"context": "Given an Is Instance of class/type Assertion",
"methods": [ {
"assertions": [ {
"actual": "|Plane| 0, 0, 0, 0 != null",
"context": "plane is not null",
"expected": "|Plane| 0, 0, 0, 0 != null",
"success": true
}, {
"actual": "0, 0, 0, 0 is builtin: Plane",
"context": "then it passes",
"expected": "0, 0, 0, 0 is builtin: Plane",
"success": true
} ],
"context": "When calling asserts.is_Plane(plane: Plane())",
"fullname": "test_when_calling_is_Plane",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|AABB| 0, 0, 0 - 0, 0, 0 != null",
"context": "AABB is not null",
"expected": "|AABB| 0, 0, 0 - 0, 0, 0 != null",
"success": true
}, {
"actual": "0, 0, 0 - 0, 0, 0 is builtin: AABB",
"context": "Then it passes",
"expected": "0, 0, 0 - 0, 0, 0 is builtin: AABB",
"success": true
} ],
"context": "When calling asserts.is_AABB(aabb: AABB)",
"fullname": "test_when_calling_is_AABB",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "{} is builtin: Dictionary",
"context": "Then it passes",
"expected": "{} is builtin: Dictionary",
"success": true
} ],
"context": "When calling asserts.is_Dictionary({})",
"fullname": "test_when_calling_is_Dictionary",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|PoolVector2Array| [] != null",
"context": "vec2s is not null",
"expected": "|PoolVector2Array| [] != null",
"success": true
}, {
"actual": "[] is builtin: PoolVector2Array",
"context": "Then it passes",
"expected": "[] is builtin: PoolVector2Array",
"success": true
} ],
"context": "When calling is asserts.is_PoolVector2Array(vec2s: PoolVector2Array)",
"fullname": "test_when_calling_is_PoolVector2Array",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|Rect2| (0, 0, 0, 0) != null",
"context": "rect2 is not null",
"expected": "|Rect2| (0, 0, 0, 0) != null",
"success": true
}, {
"actual": "(0, 0, 0, 0) is builtin: Rect2",
"context": "Then it passes",
"expected": "(0, 0, 0, 0) is builtin: Rect2",
"success": true
} ],
"context": "When calling asserts.is_Rect2(rect2: Rect2)",
"fullname": "test_when_calling_is_Rect2",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|PoolVector3Array| [] != null",
"context": "vec3s is not null",
"expected": "|PoolVector3Array| [] != null",
"success": true
}, {
"actual": "[] is builtin: PoolVector3Array",
"context": "Then it passes",
"expected": "[] is builtin: PoolVector3Array",
"success": true
} ],
"context": "When calling is asserts.is_PoolVector3Array(vec3s: PoolVector3Array)",
"fullname": "test_when_calling_is_PoolVector3Array",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|PoolRealArray| [] != null",
"context": "reals is not null",
"expected": "|PoolRealArray| [] != null",
"success": true
}, {
"actual": "[] is builtin: PoolRealArray",
"context": "Then it passes",
"expected": "[] is builtin: PoolRealArray",
"success": true
} ],
"context": "When calling is asserts.is_PoolRealArray(reals: PoolRealArray)",
"fullname": "test_when_calling_is_PoolRealArray",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|Quat| (0, 0, 0, 1) != null",
"context": "quat is not null",
"expected": "|Quat| (0, 0, 0, 1) != null",
"success": true
}, {
"actual": "(0, 0, 0, 1) is builtin: Quat",
"context": "Then it passes",
"expected": "(0, 0, 0, 1) is builtin: Quat",
"success": true
} ],
"context": "When calling asserts.is_Quat(quat: Quat)",
"fullname": "test_when_calling_is_Quat",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|RID| [RID] != null",
"context": "rid is not null",
"expected": "|RID| [RID] != null",
"success": true
}, {
"actual": "[RID] is builtin: RID",
"context": "Then it passes",
"expected": "[RID] is builtin: RID",
"success": true
} ],
"context": "When calling asserts.is_RID(rid: RID)",
"fullname": "test_when_calling_is_RID",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|Color| 0,0,0,1 != null",
"context": "color is not null",
"expected": "|Color| 0,0,0,1 != null",
"success": true
}, {
"actual": "0,0,0,1 is builtin: Color",
"context": "Then it passes",
"expected": "0,0,0,1 is builtin: Color",
"success": true
} ],
"context": "When calling asserts.is_color(color: Color)",
"fullname": "test_when_calling_is_Color",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|String|  != null",
"context": "strs is not null",
"expected": "|String|  != null",
"success": true
}, {
"actual": " is builtin: String",
"context": "Then it passes",
"expected": " is builtin: String",
"success": true
} ],
"context": "When calling asserts.is_string(strs: String)",
"fullname": "test_when_calling_is_string",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|Transform| 1, 0, 0, 0, 1, 0, 0, 0, 1 - 0, 0, 0 != null",
"context": "transform is not null",
"expected": "|Transform| 1, 0, 0, 0, 1, 0, 0, 0, 1 - 0, 0, 0 != null",
"success": true
}, {
"actual": "1, 0, 0, 0, 1, 0, 0, 0, 1 - 0, 0, 0 is builtin: Transform",
"context": "Then it passes",
"expected": "1, 0, 0, 0, 1, 0, 0, 0, 1 - 0, 0, 0 is builtin: Transform",
"success": true
} ],
"context": "When calling asserts.is_Transform(transform: Transform)",
"fullname": "test_when_calling_is_Transform",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|Transform2D| ((1, 0), (0, 1), (0, 0)) != null",
"context": "transform2D is not null",
"expected": "|Transform2D| ((1, 0), (0, 1), (0, 0)) != null",
"success": true
}, {
"actual": "((1, 0), (0, 1), (0, 0)) is builtin: Transform2D",
"context": "Then it passes",
"expected": "((1, 0), (0, 1), (0, 0)) is builtin: Transform2D",
"success": true
} ],
"context": "When calling asserts.is_Transform(transform2D: Transform2D)",
"fullname": "test_when_calling_is_Transform2D",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|Array| [] != null",
"context": "array is not null",
"expected": "|Array| [] != null",
"success": true
}, {
"actual": "[] is builtin: Array",
"context": "Then it passes",
"expected": "[] is builtin: Array",
"success": true
} ],
"context": "When calling asserts.is_Array(array: Array)",
"fullname": "test_when_calling_is_Array",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|Vector2| (0, 0) != null",
"context": "vec2 is not null",
"expected": "|Vector2| (0, 0) != null",
"success": true
}, {
"actual": "(0, 0) is builtin: Vector2",
"context": "Then it passes",
"expected": "(0, 0) is builtin: Vector2",
"success": true
} ],
"context": "When calling asserts.is_Vector2(vec2)",
"fullname": "test_when_calling_is_Vector2",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|PoolStringArray| [] != null",
"context": "strs is not null",
"expected": "|PoolStringArray| [] != null",
"success": true
}, {
"actual": "[] is builtin: PoolStringArray",
"context": "Then it passes",
"expected": "[] is builtin: PoolStringArray",
"success": true
} ],
"context": "When calling is asserts.is_PoolStringArray(strs: PoolStringArray)",
"fullname": "test_when_calling_is_PoolStringArray",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|NodePath| . != null",
"context": "@'Parent/Child' is not null",
"expected": "|NodePath| . != null",
"success": true
}, {
"actual": ". is builtin: NodePath",
"context": "Then it passes",
"expected": ". is builtin: NodePath",
"success": true
} ],
"context": "When calling asserts.is_NodePath(@'Parent/Child')",
"fullname": "test_when_calling_is_NodePath",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|Object| [Node:4004] != null",
"context": "node is not null",
"expected": "|Object| [Node:4004] != null",
"success": true
}, {
"actual": "[Node:4004] is builtin: Object",
"context": "An instance of node is an Object",
"expected": "[Node:4004] is builtin: Object",
"success": true
} ],
"context": "When calling is asserts.object(node: Node)",
"fullname": "test_when_calling_is_object",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|PoolByteArray| [PoolByteArray] != null",
"context": "bytes is not null",
"expected": "|PoolByteArray| [PoolByteArray] != null",
"success": true
}, {
"actual": "[PoolByteArray] is builtin: PoolByteArray",
"context": "Then it passes",
"expected": "[PoolByteArray] is builtin: PoolByteArray",
"success": true
} ],
"context": "When calling asserts.is_PoolByteArray(bytes: PoolByteArray)",
"fullname": "test_when_calling_is_PoolByteArray",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|PoolIntArray| [] != null",
"context": "ints is not null",
"expected": "|PoolIntArray| [] != null",
"success": true
}, {
"actual": "[] is builtin: PoolIntArray",
"context": "Then it passes",
"expected": "[] is builtin: PoolIntArray",
"success": true
} ],
"context": "When calling asserts.is_PoolIntArray(ints: PoolIntArray)",
"fullname": "test_when_calling_is_PoolIntArray",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "1 is builtin: int",
"context": "Then it passes",
"expected": "1 is builtin: int",
"success": true
} ],
"context": "When callign asserts.is_int(1)",
"fullname": "test_when_calling_is_int",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|Vector3| (0, 0, 0) != null",
"context": "vec3 is not null",
"expected": "|Vector3| (0, 0, 0) != null",
"success": true
}, {
"actual": "(0, 0, 0) is builtin: Vector3",
"context": "Then it passes",
"expected": "(0, 0, 0) is builtin: Vector3",
"success": true
} ],
"context": "When calling asserts.is_Vector3(vec3: Vector3",
"fullname": "test_when_calling_is_Vector3",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "1 is builtin: float",
"context": "Then it passes",
"expected": "1 is builtin: float",
"success": true
} ],
"context": "When calling asserts.is_float(1.0)",
"fullname": "test_when_calling_is_float",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|PoolColorArray| [PoolColorArray] != null",
"context": "colors is not null",
"expected": "|PoolColorArray| [PoolColorArray] != null",
"success": true
}, {
"actual": "[PoolColorArray] is builtin: PoolColorArray",
"context": "Then it passes",
"expected": "[PoolColorArray] is builtin: PoolColorArray",
"success": true
} ],
"context": "When calling asserts.is_PoolColorArray(colors: PoolColorArray)",
"fullname": "test_when_calling_is_PoolColorArray",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "True is builtin: bool",
"context": "Then it passes",
"expected": "True is builtin: bool",
"success": true
} ],
"context": "When calling asserts.is_bool(true)",
"fullname": "test_when_calling_is_bool",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|Basis| ((1, 0, 0), (0, 1, 0), (0, 0, 1)) != null",
"context": "basis is not null",
"expected": "|Basis| ((1, 0, 0), (0, 1, 0), (0, 0, 1)) != null",
"success": true
}, {
"actual": "((1, 0, 0), (0, 1, 0), (0, 0, 1)) is builtin: Basis",
"context": "Then it passes",
"expected": "((1, 0, 0), (0, 1, 0), (0, 0, 1)) is builtin: Basis",
"success": true
} ],
"context": "When calling asserts.is_basis(basis: Basis",
"fullname": "test_when_calling_is_Basis",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
} ],
"passed": 26,
"path": "res://tests/unit/is_instance.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/is_instance.test.gd",
"tags": [  ],
"test": ExtResource( 6 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 26
}, {
"context": "Given an Is Not Instance of class/type Assertion",
"methods": [ {
"assertions": [ {
"actual": "Null is not builtin: AABB",
"context": "Then it passes",
"expected": "Null is not builtin: AABB",
"success": true
} ],
"context": "when calling asserts.is_not_AABB(null)",
"fullname": "test_when_calling_is_not_AABB",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Basis",
"context": "Then it passes",
"expected": "Null is not builtin: Basis",
"success": true
} ],
"context": "when calling asserts.is_not_Basis(null)",
"fullname": "test_when_calling_is_not_Basis",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Array",
"context": "Then it passes",
"expected": "Null is not builtin: Array",
"success": true
} ],
"context": "when calling asserts.is_not_Array(null)",
"fullname": "test_when_calling_is_not_Array",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: RID",
"context": "Then it passes",
"expected": "Null is not builtin: RID",
"success": true
} ],
"context": "when calling asserts.is_not_RID(null)",
"fullname": "test_when_calling_is_not_RID",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Vector2",
"context": "Then it passes",
"expected": "Null is not builtin: Vector2",
"success": true
} ],
"context": "when calling asserts.is_not_Vector2(null)",
"fullname": "test_when_calling_is_not_Vector2",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Color",
"context": "Then it passes",
"expected": "Null is not builtin: Color",
"success": true
} ],
"context": "when calling asserts.is_not_Color(null)",
"fullname": "test_when_calling_is_not_Color",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Object",
"context": "Then it passes",
"expected": "Null is not builtin: Object",
"success": true
} ],
"context": "when calling asserts.is_not_Object(null)",
"fullname": "test_when_calling_is_not_Object",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Rect2",
"context": "Then it passes",
"expected": "Null is not builtin: Rect2",
"success": true
} ],
"context": "when calling asserts.is_not_Rect2(null)",
"fullname": "test_when_calling_is_not_Rect2",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: PoolVector2Array",
"context": "Then it passes",
"expected": "Null is not builtin: PoolVector2Array",
"success": true
} ],
"context": "when calling asserts.is_not_PoolVector2Array(null)",
"fullname": "test_when_calling_is_not_PoolVector2Array",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: int",
"context": "Then it passes",
"expected": "Null is not builtin: int",
"success": true
} ],
"context": "when calling asserts.is_not_int(null)",
"fullname": "test_when_calling_is_not_int",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: PoolIntArray",
"context": "Then it passes",
"expected": "Null is not builtin: PoolIntArray",
"success": true
} ],
"context": "when calling asserts.is_not_PoolIntArray(null)",
"fullname": "test_when_calling_is_not_PoolIntArray",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: NodePath",
"context": "Then it passes",
"expected": "Null is not builtin: NodePath",
"success": true
} ],
"context": "when calling asserts.is_not_NodePath(null)",
"fullname": "test_when_calling_is_not_NodePath",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Plane",
"context": "Then it passes",
"expected": "Null is not builtin: Plane",
"success": true
} ],
"context": "when calling asserts.is_not_Plane(null)",
"fullname": "test_when_calling_is_not_Plane",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: PoolVector3Array",
"context": "Then it passes",
"expected": "Null is not builtin: PoolVector3Array",
"success": true
} ],
"context": "when calling asserts.is_not_PoolVector3Array(null)",
"fullname": "test_when_calling_is_not_PoolVector3Array",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Transform",
"context": "Then it passes",
"expected": "Null is not builtin: Transform",
"success": true
} ],
"context": "when calling asserts.is_not_Transform(null)",
"fullname": "test_when_calling_is_not_Transform",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Transform2D",
"context": "Then it passes",
"expected": "Null is not builtin: Transform2D",
"success": true
} ],
"context": "when calling asserts.is_not_Transform2D(null)",
"fullname": "test_when_calling_is_not_Transform2D",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: bool",
"context": "Then it passes",
"expected": "Null is not builtin: bool",
"success": true
} ],
"context": "when calling asserts.is_not_bool(null)",
"fullname": "test_when_calling_is_not_bool",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: PoolColorArray",
"context": "Then it passes",
"expected": "Null is not builtin: PoolColorArray",
"success": true
} ],
"context": "when calling asserts.is_not_PoolColorArray(null)",
"fullname": "test_when_calling_is_not_PoolColorArray",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: PoolRealArray",
"context": "Then it passes",
"expected": "Null is not builtin: PoolRealArray",
"success": true
} ],
"context": "when calling asserts.is_not_PoolRealArray(null)",
"fullname": "test_when_calling_is_not_PoolRealArray",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: PoolStringArray",
"context": "Then it passes",
"expected": "Null is not builtin: PoolStringArray",
"success": true
} ],
"context": "when calling asserts.is_not_PoolStringArray(null)",
"fullname": "test_when_calling_is_not_PoolStringArray",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Quat",
"context": "Then it passes",
"expected": "Null is not builtin: Quat",
"success": true
} ],
"context": "when calling asserts.is_not_Quat(null)",
"fullname": "test_when_calling_is_not_Quat",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Dictionary",
"context": "Then it passes",
"expected": "Null is not builtin: Dictionary",
"success": true
} ],
"context": "when calling asserts.is_not_Dictionary(null)",
"fullname": "test_when_calling_is_not_Dictionary",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Vector3",
"context": "Then it passes",
"expected": "Null is not builtin: Vector3",
"success": true
} ],
"context": "when calling asserts.is_not_Vector3(null)",
"fullname": "test_when_calling_is_not_Vector3",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: PoolByteArray",
"context": "Then it passes",
"expected": "Null is not builtin: PoolByteArray",
"success": true
} ],
"context": "when calling asserts.is_not_PoolByteArray(null)",
"fullname": "test_when_calling_is_not_PoolByteArray",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: float",
"context": "Then it passes",
"expected": "Null is not builtin: float",
"success": true
} ],
"context": "when calling asserts.is_not_float(null)",
"fullname": "test_when_calling_is_not_float",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: String",
"context": "Then it passes",
"expected": "Null is not builtin: String",
"success": true
} ],
"context": "when calling asserts.is_not_String(null)",
"fullname": "test_when_calling_is_not_String",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 26,
"path": "res://tests/unit/is_not_instance.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/is_not_instance.test.gd",
"tags": [  ],
"test": ExtResource( 2 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 26
}, {
"context": "Given a Null Assertion",
"methods": [ {
"assertions": [ {
"actual": "|null| Null == null",
"context": "Then it passes",
"expected": "|null| Null == null",
"success": true
} ],
"context": "When calling asserts.is_null(null)",
"fullname": "test_when_calling_null_is_null",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|Object| [Node:4038] != null",
"context": "Then it passes",
"expected": "|Object| [Node:4038] != null",
"success": true
} ],
"context": "When calling Node is not null",
"fullname": "test_when_calling_node_is_not_null",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|Object| [Deleted Object] == null",
"context": "A Freed Node is null in Engine 3.2.2 or greater",
"expected": "|Object| [Deleted Object] == null",
"success": true
} ],
"context": "When calling freed object is null",
"fullname": "test_when_calling_freed_object_is_not_null",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 3,
"path": "res://tests/unit/null.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/null.test.gd",
"tags": [  ],
"test": ExtResource( 12 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 3
}, {
"context": "Given A Range Assertion",
"methods": [ {
"assertions": [ {
"actual": "10 is not in range(0, 10)",
"context": "Then it passes",
"expected": "10 is not in range(0, 10)",
"success": true
} ],
"context": "When calling is (10) not in range (in range(0, 10)",
"fullname": "test_when_calling_is_not_in_range",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "0 is in range(0, 10)",
"context": "Then it passes",
"expected": "0 is in range(0, 10)",
"success": true
} ],
"context": "When calling is (0) in range(0, 10)",
"fullname": "test_when_calling_is_in_range",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 2,
"path": "res://tests/unit/range.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/range.test.gd",
"tags": [  ],
"test": ExtResource( 15 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 2
}, {
"context": "Given the Addition Operator",
"methods": [ {
"assertions": [ {
"actual": "|int| 4 is equal to |int| 4",
"context": "",
"expected": "|int| 4 is equal to |int| 4",
"success": true
} ],
"context": "When we add 2 to 2 we get 4",
"fullname": "test_add",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 8 is equal to |int| 8",
"context": "",
"expected": "|int| 8 is equal to |int| 8",
"success": true
} ],
"context": "When we add 5 to 3 we get 8",
"fullname": "test_add",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 13 is equal to |int| 13",
"context": "",
"expected": "|int| 13 is equal to |int| 13",
"success": true
} ],
"context": "When we add 7 to 6 we get 13",
"fullname": "test_add",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 0 is equal to |int| 0",
"context": "",
"expected": "|int| 0 is equal to |int| 0",
"success": true
} ],
"context": "When we subtract 2 from 2 we get 0",
"fullname": "test_subtract",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 2 is equal to |int| 2",
"context": "",
"expected": "|int| 2 is equal to |int| 2",
"success": true
} ],
"context": "When we subtract 5 from 3 we get 2",
"fullname": "test_subtract",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 1 is equal to |int| 1",
"context": "",
"expected": "|int| 1 is equal to |int| 1",
"success": true
} ],
"context": "When we subtract 7 from 6 we get 1",
"fullname": "test_subtract",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 6,
"path": "res://tests/unit/parameters.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/parameters.test.gd",
"tags": [  ],
"test": ExtResource( 16 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 6
}, {
"context": "Given an Object Assertion",
"methods": [ {
"assertions": [ {
"actual": "[Node:4064] is not freed",
"context": "Then it passes",
"expected": "[Node:4064] is not freed",
"success": true
} ],
"context": "When calling asserts.is_not_freed(unfreed_object)",
"fullname": "test_when_calling_unfreed_object_is_not_freed",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is freed from memory",
"context": "Then it passes",
"expected": "Null is freed from memory",
"success": true
} ],
"context": "When calling asserts.is_freed(freed_object",
"fullname": "test_when_calling_freed_object_is_freed",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:4030] does not have meta: bad_meta",
"context": "Then it passes",
"expected": "[Node:4030] does not have meta: bad_meta",
"success": true
} ],
"context": "When calling asserts.object_does_not_have_meta()",
"fullname": "test_when_calling_does_not_have_meta",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:4030] has meta: dummy",
"context": "Then it passes",
"expected": "[Node:4030] has meta: dummy",
"success": true
}, {
"actual": "[Node:4030] has meta: dummy",
"context": "Then it passes",
"expected": "[Node:4030] has meta: dummy",
"success": true
} ],
"context": "When calling asserts.object_has_meta() after adding metadata",
"fullname": "test_when_calling_has_meta_after_adding_metadata",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "[Node:4078] is queued for deletion",
"context": "Then it passes",
"expected": "[Node:4078] is queued for deletion",
"success": true
} ],
"context": "When calling asserts.object_is_queued for deletion after calling queue_free",
"fullname": "test_when_calling_obj_is_queued_for_deletion_after_calling_queue_free",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:4030].builtin_dummy is connected to [Node:4030].title",
"context": "Then it passes",
"expected": "[Node:4030].builtin_dummy is connected to [Node:4030].title",
"success": true
} ],
"context": "When calling asserts object is connected with a valid connection",
"fullname": "test_when_calling_obj_is_connected_with_a_real_connection",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:4030].builtin_dummy is not connected to [Node:4030].title",
"context": "Then it passes",
"expected": "[Node:4030].builtin_dummy is not connected to [Node:4030].title",
"success": true
} ],
"context": "When calling asserts object is not connected with an invalid connection",
"fullname": "test_when_calling_obj_is_not_connected_with_an_invalid_connection",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:4084] is blocking signals",
"context": "Then it passes",
"expected": "[Node:4084] is blocking signals",
"success": true
} ],
"context": "When calling is blocking signals while blocking signals",
"fullname": "test_is_blocking_signals",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:4086] is not blocking signals",
"context": "Then it passes",
"expected": "[Node:4086] is not blocking signals",
"success": true
} ],
"context": "When calling is not blocking signals while not blocking signals",
"fullname": "test_is_not_blocking_signals",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:4030] does not have meta: confusing",
"context": "Then it passes",
"expected": "[Node:4030] does not have meta: confusing",
"success": true
} ],
"context": "When calling asserts.object_has_meta with real key but null val",
"fullname": "test_when_calling_does_not_have_meta_real_key_null_value_pair",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:4030] has user signal: dummy_signal",
"context": "Then it passes",
"expected": "[Node:4030] has user signal: dummy_signal",
"success": true
} ],
"context": "When calling obj_has_user_signal after adding a signal",
"fullname": "test_when_calling_has_user_signal_after_adding_a_signal",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:4030] does not have user signal: false_signal",
"context": "Then it passes",
"expected": "[Node:4030] does not have user signal: false_signal",
"success": true
} ],
"context": "When calling obj_does_not_have_user_signal with fake signal",
"fullname": "test_when_calling_does_not_have_user_signal",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:4030] does not have user signal: builtin_dummy",
"context": "Then it passes",
"expected": "[Node:4030] does not have user signal: builtin_dummy",
"success": true
} ],
"context": "When calling does not have user signal with class signal",
"fullname": "test_when_calling_does_not_have_user_signal_with_class_signal_constant",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:4030] has method: title",
"context": "Then it passes",
"expected": "[Node:4030] has method: title",
"success": true
} ],
"context": "When calling has_method('title')",
"fullname": "test_when_calling_has_method_title",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:4093] is not queued for deletion",
"context": "Then it passes",
"expected": "[Node:4093] is not queued for deletion",
"success": true
} ],
"context": "When calling asserts.object_is_not_for_queued_deletion after not calling queue free()",
"fullname": "test_when_calling_obj_is_not_for_queued_deletion_after_not_calling_queue_free",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 15,
"path": "res://tests/unit/object.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/object.test.gd",
"tags": [  ],
"test": ExtResource( 7 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 15
}, {
"context": "Dummy Passing Test",
"methods": [ {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Passing!",
"expected": "|bool| True == true",
"success": true
} ],
"context": "This method passes",
"fullname": "test_this_method_passes",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 1,
"path": "res://tests/unit/suite.test.gd.DummyOne",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/suite.test.gd.DummyOne",
"tags": [  ],
"test": SubResource( 21 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 1
}, {
"context": "Dummy Test 2",
"methods": [ {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Passing!",
"expected": "|bool| True == true",
"success": true
} ],
"context": "This method passes",
"fullname": "test_this_method_passes",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 1,
"path": "res://tests/unit/suite.test.gd.DummyTwo",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/suite.test.gd.DummyTwo",
"tags": [  ],
"test": SubResource( 22 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 1
}, {
"context": "Given a String Assertion",
"methods": [ {
"assertions": [ {
"actual": "lorem impsum ends with impsum",
"context": "Then it passes",
"expected": "lorem impsum ends with impsum",
"success": true
} ],
"context": "When calling asserts.string_ends_with('impsum', 'lorem impsum')",
"fullname": "test_when_calling_string_ends_with",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "impsum does not end with lorem",
"context": "Then it passes",
"expected": "impsum does not end with lorem",
"success": true
} ],
"context": "When calling asserts.string_does_not_end_with('lorem', 'impsum')",
"fullname": "test_when_calling_string_does_not_end_with",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "lorem impsum begins with lorem",
"context": "Then it passes",
"expected": "lorem impsum begins with lorem",
"success": true
} ],
"context": "When calling asserts.string_begins_with('lorem', 'lorem impsum')",
"fullname": "test_when_calling_string_begins_with",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "impsum does not contain beem im",
"context": "Then it passes",
"expected": "impsum does not contain beem im",
"success": true
} ],
"context": "When calling asserts.string_does_not_contain('em im', 'impsum')",
"fullname": "test_when_calling_string_does_not_contain",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "impsum does not begin with bleh lorem",
"context": "Then it passes",
"expected": "impsum does not begin with bleh lorem",
"success": true
} ],
"context": "When calling asserts.string_does_not_begin_with('lorem', 'impsum')",
"fullname": "test_when_calling_string_does_not_begin_with",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "lorem impsum contains em im",
"context": "Then it passes",
"expected": "lorem impsum contains em im",
"success": true
} ],
"context": "When calling asserts.string_contains('em im', 'lorem impsum')",
"fullname": "test_when_calling_string_contains",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 6,
"path": "res://tests/unit/string.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/string.test.gd",
"tags": [  ],
"test": ExtResource( 9 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 6
}, {
"context": "Given a Test Script",
"methods": [ {
"assertions": [ {
"actual": "|bool| True == true",
"context": "if the test didn't break this works",
"expected": "|bool| True == true",
"success": true
} ],
"context": " we can omit describe",
"fullname": "test_we_can_omit_describe",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 10 is greater than |int| 1",
"context": "We get an array of multiple values back",
"expected": "|int| 10 is greater than |int| 1",
"success": true
}, {
"actual": "|int| 0 is not equal to |int| 9",
"context": "With different values",
"expected": "|int| 0 != |int| 9",
"success": true
}, {
"actual": "|int| 10 is greater than |int| 1",
"context": "And we can track multiple properties",
"expected": "|int| 10 is greater than |int| 1",
"success": true
} ],
"context": "When we record properties",
"fullname": "test_we_can_record_properties",
"passed": 3,
"success": true,
"time": 0.0,
"total": 3
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|int| 2 is equal to |int| 2",
"context": "",
"expected": "|int| 2 is equal to |int| 2",
"success": true
} ],
"context": " when we omit context we can see expected and got under method",
"fullname": "test_when_we_omit_context_we_can_see_expected_and_got_under_method",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
} ],
"passed": 3,
"path": "res://tests/unit/test.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/test.test.gd",
"tags": [  ],
"test": ExtResource( 19 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 3
}, {
"context": "Given a Signal Watcher",
"methods": [ {
"assertions": [ {
"actual": "signal: example was emitted from [Node:4107]",
"context": "Then it captures the emitted signal",
"expected": "signal: example was emitted from [Node:4107]",
"success": true
} ],
"context": "When we watch and emit a signal",
"fullname": "test_When_we_watch_and_emit_a_signal",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Signal: example was emitted from [Node:4107] with arguments: [1, 20, 5]",
"context": "Then it captures any arguments that where passed when the signal was emitted",
"expected": "Signal: example was emitted from [Node:4107] with arguments: [1, 20, 5]",
"success": true
} ],
"context": "When we watch a signal from an object with no bound variables",
"fullname": "test_When_we_watch_a_signal_from_an_object_with_no_bound_variables",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Signal: example was not emitted from [Node:4107]",
"context": "Then it does not capture the non-emitted signal",
"expected": "Signal: example was not emitted from [Node:4107]",
"success": true
} ],
"context": "When we watch and do not emit a signal",
"fullname": "test_When_we_watch_and_do_not_emit_a_signal",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "signal: multiple was emitted from [Node:4107] 2",
"context": "Then we can track how many times we emitted it",
"expected": "signal: multiple was emitted from [Node:4107] 2",
"success": true
} ],
"context": "When we watch and signal and emit it multiple times",
"fullname": "test_When_we_watch_a_signal_and_emit_it_multiple_times",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 4,
"path": "res://tests/unit/watcher.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/watcher.test.gd",
"tags": [  ],
"test": ExtResource( 17 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 4
}, {
"context": "Default Args",
"methods": [ {
"assertions": [ {
"actual": "|bool| True == true",
"context": "If this method can be reached then we have doubled a script with default argument(s) properly!",
"expected": "|bool| True == true",
"success": true
} ],
"context": " default arguments of interpolate property",
"fullname": "test_default_arguments_of_interpolate_property",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 1,
"path": "res://tests/integration/default_args.test.gd",
"source": {
"containers": [ "res://tests/integration", "res://tests" ],
"method": "",
"path": "res://tests/integration/default_args.test.gd",
"tags": [  ],
"test": ExtResource( 10 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 1
}, {
"context": "Given a Boolean Assertion",
"methods": [ {
"assertions": [ {
"actual": "|bool| True != false",
"context": "",
"expected": "|bool| True == false",
"success": false
} ],
"context": " intentional failure",
"fullname": "test_intentional_failure",
"passed": 0,
"success": false,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then it passes",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When calling asserts.is_true(true)",
"fullname": "test_when_calling_asserts_is_true",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| False == false",
"context": "Then it passes",
"expected": "|bool| False == false",
"success": true
} ],
"context": "When calling asserts.is_false(false)",
"fullname": "test_when_calling_asserts_is_false",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 2,
"path": "res://tests/integration/boolean.test.gd",
"source": {
"containers": [ "res://tests/integration", "res://tests" ],
"method": "",
"path": "res://tests/integration/boolean.test.gd",
"tags": [  ],
"test": ExtResource( 20 ),
"yield_time": 0.0
},
"success": false,
"time_taken": 0.0,
"total": 3
}, {
"context": "Given is_on_floor",
"methods": [ {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then it can be stubbed",
"expected": "|bool| True == true",
"success": true
} ],
"context": "From a built-in KinematicBody2D2",
"fullname": "test_stubbing_is_on_floor_method_from_builtin_class2",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then it can be stubbed",
"expected": "|bool| True == true",
"success": true
} ],
"context": "From a child node of a scene without scripts",
"fullname": "test_stubbing_is_on_floor_as_child_node_with_no_script",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then it can be stubbed",
"expected": "|bool| True == true",
"success": true
} ],
"context": "From a user-defined script",
"fullname": "test_stubbing_is_on_floor_method_from_user_defined_class",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 3,
"path": "res://tests/integration/on_floor.test.gd",
"source": {
"containers": [ "res://tests/integration", "res://tests" ],
"method": "",
"path": "res://tests/integration/on_floor.test.gd",
"tags": [  ],
"test": ExtResource( 5 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 3
}, {
"context": "Given a Scene Director",
"methods": [ {
"assertions": [ {
"actual": "|Dictionary| {.:[Reference:4154], A:[Reference:4155], A/B:[Reference:4157], C:[Reference:4156], C/D:[Reference:4158]} is not equal to |Dictionary| {.:[Reference:4174], A:[Reference:4175], A/B:[Reference:4177], C:[Reference:4176], C/D:[Reference:4178]}",
"context": "Then they do not share resources",
"expected": "|Dictionary| {.:[Reference:4154], A:[Reference:4155], A/B:[Reference:4157], C:[Reference:4156], C/D:[Reference:4158]} != |Dictionary| {.:[Reference:4174], A:[Reference:4175], A/B:[Reference:4177], C:[Reference:4176], C/D:[Reference:4178]}",
"success": true
} ],
"context": "When we create two of it for the same scene",
"fullname": "test_When_we_create_two_of_it_for_the_same_scene",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 999 is equal to |int| 999",
"context": "Then we get the stubbed return value",
"expected": "|int| 999 is equal to |int| 999",
"success": true
} ],
"context": "When we call a method from a child node that we stubbed",
"fullname": "test_When_we_call_a_method_from_a_child_node_that_we_stubbed",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 9999 is equal to |int| 9999",
"context": "Then we get the stubbed return value",
"expected": "|int| 9999 is equal to |int| 9999",
"success": true
} ],
"context": "When we call a method from the root node that we stubbed",
"fullname": "test_When_we_call_a_method_from_the_root_node_that_we_stubbed",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 99 is equal to |int| 99",
"context": "Then we get the stubbed return value",
"expected": "|int| 99 is equal to |int| 99",
"success": true
} ],
"context": "When we call a method from a grandchild node that we stubbed",
"fullname": "test_When_we_call_a_method_from_a_grandchild_node_that_we_stubbed",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|NodePath| A is equal to |NodePath| A",
"context": "We have the correct NodePath Set",
"expected": "|NodePath| A is equal to |NodePath| A",
"success": true
} ],
"context": "When we add it to the tree it runs",
"fullname": "test_When_we_add_it_to_the_tree_it_runs",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 5,
"path": "res://tests/integration/scene_director.test.gd",
"source": {
"containers": [ "res://tests/integration", "res://tests" ],
"method": "",
"path": "res://tests/integration/scene_director.test.gd",
"tags": [  ],
"test": ExtResource( 4 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 5
}, {
"context": "Given a Script Director",
"methods": [ {
"assertions": [ {
"actual": "[Reference:4309] is instance of class: [GDScript:1453]",
"context": "Then we get that inner class back",
"expected": "[Reference:4309] is instance of class: [GDScript:1453]",
"success": true
} ],
"context": "When we double an inner class",
"fullname": "test_When_we_double_an_inner_class",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|Dictionary| {_enter_tree:{arguments:, default_arguments:}, _exit_tree:{arguments:, default_arguments:}, _get:{arguments:a, default_arguments:a}, _get_configuration_warning:{arguments:, default_arguments:}, _get_editor_description:{arguments:, default_arguments:}, _get_import_path:{arguments:, default_arguments:}, _get_property_list:{arguments:, default_arguments:}, _init:{arguments:, default_arguments:}, _input:{arguments:a, default_arguments:a}, _notification:{arguments:a, default_arguments:a}, _physics_process:{arguments:a, default_arguments:a}, _process:{arguments:a, default_arguments:a}, _ready:{arguments:, default_arguments:}, _set:{arguments:a, b, default_arguments:a, b}, _set_editor_description:{arguments:a, default_arguments:a}, _set_import_path:{arguments:a, default_arguments:a}, _to_string:{arguments:, default_arguments:}, _unhandled_input:{arguments:a, default_arguments:a}, _unhandled_key_input:{arguments:a, default_arguments:a}, add:{arguments:a, b, default_arguments:a, b}, add_child:{arguments:a, b, default_arguments:a, b = False}, add_child_below_node:{arguments:a, b, c, default_arguments:a, b, c = False}, add_to_group:{arguments:a, b, default_arguments:a, b = False}, add_user_signal:{arguments:a, b, default_arguments:a, b = []}, call:{arguments:a, default_arguments:a}, call_deferred:{arguments:a, default_arguments:a}, callv:{arguments:a, b, default_arguments:a, b}, can_process:{arguments:, default_arguments:}, can_translate_messages:{arguments:, default_arguments:}, connect:{arguments:a, b, c, d, e, default_arguments:a, b, c, d = [], e = 0}, disconnect:{arguments:a, b, c, default_arguments:a, b, c}, divide:{arguments:a, b, default_arguments:a, b}, duplicate:{arguments:a, default_arguments:a = 15}, emit_signal:{arguments:a, default_arguments:a}, find_node:{arguments:a, b, c, default_arguments:a, b = True, c = True}, find_parent:{arguments:a, default_arguments:a}, free:{arguments:, default_arguments:}, get:{arguments:a, default_arguments:a}, get_child:{arguments:a, default_arguments:a}, get_child_count:{arguments:, default_arguments:}, get_children:{arguments:, default_arguments:}, get_class:{arguments:, default_arguments:}, get_custom_multiplayer:{arguments:, default_arguments:}, get_filename:{arguments:, default_arguments:}, get_groups:{arguments:, default_arguments:}, get_incoming_connections:{arguments:, default_arguments:}, get_index:{arguments:, default_arguments:}, get_indexed:{arguments:a, default_arguments:a}, get_instance_id:{arguments:, default_arguments:}, get_meta:{arguments:a, default_arguments:a}, get_meta_list:{arguments:, default_arguments:}, get_method_list:{arguments:, default_arguments:}, get_multiplayer:{arguments:, default_arguments:}, get_name:{arguments:, default_arguments:}, get_network_master:{arguments:, default_arguments:}, get_node:{arguments:a, default_arguments:a}, get_node_and_resource:{arguments:a, default_arguments:a}, get_node_or_null:{arguments:a, default_arguments:a}, get_owner:{arguments:, default_arguments:}, get_parent:{arguments:, default_arguments:}, get_path:{arguments:, default_arguments:}, get_path_to:{arguments:a, default_arguments:a}, get_pause_mode:{arguments:, default_arguments:}, get_physics_process_delta_time:{arguments:, default_arguments:}, get_position_in_parent:{arguments:, default_arguments:}, get_process_delta_time:{arguments:, default_arguments:}, get_process_priority:{arguments:, default_arguments:}, get_property_list:{arguments:, default_arguments:}, get_scene_instance_load_placeholder:{arguments:, default_arguments:}, get_script:{arguments:, default_arguments:}, get_signal_connection_list:{arguments:a, default_arguments:a}, get_signal_list:{arguments:, default_arguments:}, get_tree:{arguments:, default_arguments:}, get_viewport:{arguments:, default_arguments:}, has_meta:{arguments:a, default_arguments:a}, has_method:{arguments:a, default_arguments:a}, has_node:{arguments:a, default_arguments:a}, has_node_and_resource:{arguments:a, default_arguments:a}, has_signal:{arguments:a, default_arguments:a}, has_user_signal:{arguments:a, default_arguments:a}, is_a_parent_of:{arguments:a, default_arguments:a}, is_blocking_signals:{arguments:, default_arguments:}, is_class:{arguments:a, default_arguments:a}, is_connected:{arguments:a, b, c, default_arguments:a, b, c}, is_displayed_folded:{arguments:, default_arguments:}, is_greater_than:{arguments:a, default_arguments:a}, is_in_group:{arguments:a, default_arguments:a}, is_inside_tree:{arguments:, default_arguments:}, is_network_master:{arguments:, default_arguments:}, is_physics_processing:{arguments:, default_arguments:}, is_physics_processing_internal:{arguments:, default_arguments:}, is_processing:{arguments:, default_arguments:}, is_processing_input:{arguments:, default_arguments:}, is_processing_internal:{arguments:, default_arguments:}, is_processing_unhandled_input:{arguments:, default_arguments:}, is_processing_unhandled_key_input:{arguments:, default_arguments:}, is_queued_for_deletion:{arguments:, default_arguments:}, math_fight:{arguments:, default_arguments:}, move_child:{arguments:a, b, default_arguments:a, b}, multiply:{arguments:a, b, default_arguments:a, b}, notification:{arguments:a, b, default_arguments:a, b = False}, pi:{arguments:, default_arguments:}, print_stray_nodes:{arguments:, default_arguments:}, print_tree:{arguments:, default_arguments:}, print_tree_pretty:{arguments:, default_arguments:}, propagate_call:{arguments:a, b, c, default_arguments:a, b = [], c = False}, propagate_notification:{arguments:a, default_arguments:a}, property_list_changed_notify:{arguments:, default_arguments:}, queue_free:{arguments:, default_arguments:}, raise:{arguments:, default_arguments:}, remove_and_skip:{arguments:, default_arguments:}, remove_child:{arguments:a, default_arguments:a}, remove_from_group:{arguments:a, default_arguments:a}, remove_meta:{arguments:a, default_arguments:a}, replace_by:{arguments:a, b, default_arguments:a, b = False}, request_ready:{arguments:, default_arguments:}, rpc:{arguments:a, default_arguments:a}, rpc_config:{arguments:a, b, default_arguments:a, b}, rpc_id:{arguments:a, b, default_arguments:a, b}, rpc_unreliable:{arguments:a, default_arguments:a}, rpc_unreliable_id:{arguments:a, b, default_arguments:a, b}, rset:{arguments:a, b, default_arguments:a, b}, rset_config:{arguments:a, b, default_arguments:a, b}, rset_id:{arguments:a, b, c, default_arguments:a, b, c}, rset_unreliable:{arguments:a, b, default_arguments:a, b}, rset_unreliable_id:{arguments:a, b, c, default_arguments:a, b, c}, set:{arguments:a, b, default_arguments:a, b}, set_block_signals:{arguments:a, default_arguments:a}, set_custom_multiplayer:{arguments:a, default_arguments:a}, set_deferred:{arguments:a, b, default_arguments:a, b}, set_display_folded:{arguments:a, default_arguments:a}, set_filename:{arguments:a, default_arguments:a}, set_indexed:{arguments:a, b, default_arguments:a, b}, set_message_translation:{arguments:a, default_arguments:a}, set_meta:{arguments:a, b, default_arguments:a, b}, set_name:{arguments:a, default_arguments:a}, set_network_master:{arguments:a, b, default_arguments:a, b = True}, set_owner:{arguments:a, default_arguments:a}, set_pause_mode:{arguments:a, default_arguments:a}, set_physics_process:{arguments:a, default_arguments:a}, set_physics_process_internal:{arguments:a, default_arguments:a}, set_process:{arguments:a, default_arguments:a}, set_process_input:{arguments:a, default_arguments:a}, set_process_internal:{arguments:a, default_arguments:a}, set_process_priority:{arguments:a, default_arguments:a}, set_process_unhandled_input:{arguments:a, default_arguments:a}, set_process_unhandled_key_input:{arguments:a, default_arguments:a}, set_scene_instance_load_placeholder:{arguments:a, default_arguments:a}, set_script:{arguments:a, default_arguments:a}, subtract:{arguments:a, b, default_arguments:a, b}, sum:{arguments:a, default_arguments:a}, to_string:{arguments:, default_arguments:}, tr:{arguments:a, default_arguments:a}, update_configuration_warning:{arguments:, default_arguments:}} is not equal to |Dictionary| {_enter_tree:{arguments:, default_arguments:}, _exit_tree:{arguments:, default_arguments:}, _get:{arguments:a, default_arguments:a}, _get_configuration_warning:{arguments:, default_arguments:}, _get_editor_description:{arguments:, default_arguments:}, _get_import_path:{arguments:, default_arguments:}, _get_property_list:{arguments:, default_arguments:}, _init:{arguments:, default_arguments:}, _input:{arguments:a, default_arguments:a}, _notification:{arguments:a, default_arguments:a}, _physics_process:{arguments:a, default_arguments:a}, _process:{arguments:a, default_arguments:a}, _ready:{arguments:, default_arguments:}, _set:{arguments:a, b, default_arguments:a, b}, _set_editor_description:{arguments:a, default_arguments:a}, _set_import_path:{arguments:a, default_arguments:a}, _to_string:{arguments:, default_arguments:}, _unhandled_input:{arguments:a, default_arguments:a}, _unhandled_key_input:{arguments:a, default_arguments:a}, add:{arguments:a, b, default_arguments:a, b}, add_child:{arguments:a, b, default_arguments:a, b = False}, add_child_below_node:{arguments:a, b, c, default_arguments:a, b, c = False}, add_to_group:{arguments:a, b, default_arguments:a, b = False}, add_user_signal:{arguments:a, b, default_arguments:a, b = []}, call:{arguments:a, default_arguments:a}, call_deferred:{arguments:a, default_arguments:a}, callv:{arguments:a, b, default_arguments:a, b}, can_process:{arguments:, default_arguments:}, can_translate_messages:{arguments:, default_arguments:}, connect:{arguments:a, b, c, d, e, default_arguments:a, b, c, d = [], e = 0}, disconnect:{arguments:a, b, c, default_arguments:a, b, c}, divide:{arguments:a, b, default_arguments:a, b}, duplicate:{arguments:a, default_arguments:a = 15}, emit_signal:{arguments:a, default_arguments:a}, find_node:{arguments:a, b, c, default_arguments:a, b = True, c = True}, find_parent:{arguments:a, default_arguments:a}, free:{arguments:, default_arguments:}, get:{arguments:a, default_arguments:a}, get_child:{arguments:a, default_arguments:a}, get_child_count:{arguments:, default_arguments:}, get_children:{arguments:, default_arguments:}, get_class:{arguments:, default_arguments:}, get_custom_multiplayer:{arguments:, default_arguments:}, get_filename:{arguments:, default_arguments:}, get_groups:{arguments:, default_arguments:}, get_incoming_connections:{arguments:, default_arguments:}, get_index:{arguments:, default_arguments:}, get_indexed:{arguments:a, default_arguments:a}, get_instance_id:{arguments:, default_arguments:}, get_meta:{arguments:a, default_arguments:a}, get_meta_list:{arguments:, default_arguments:}, get_method_list:{arguments:, default_arguments:}, get_multiplayer:{arguments:, default_arguments:}, get_name:{arguments:, default_arguments:}, get_network_master:{arguments:, default_arguments:}, get_node:{arguments:a, default_arguments:a}, get_node_and_resource:{arguments:a, default_arguments:a}, get_node_or_null:{arguments:a, default_arguments:a}, get_owner:{arguments:, default_arguments:}, get_parent:{arguments:, default_arguments:}, get_path:{arguments:, default_arguments:}, get_path_to:{arguments:a, default_arguments:a}, get_pause_mode:{arguments:, default_arguments:}, get_physics_process_delta_time:{arguments:, default_arguments:}, get_position_in_parent:{arguments:, default_arguments:}, get_process_delta_time:{arguments:, default_arguments:}, get_process_priority:{arguments:, default_arguments:}, get_property_list:{arguments:, default_arguments:}, get_scene_instance_load_placeholder:{arguments:, default_arguments:}, get_script:{arguments:, default_arguments:}, get_signal_connection_list:{arguments:a, default_arguments:a}, get_signal_list:{arguments:, default_arguments:}, get_tree:{arguments:, default_arguments:}, get_viewport:{arguments:, default_arguments:}, has_meta:{arguments:a, default_arguments:a}, has_method:{arguments:a, default_arguments:a}, has_node:{arguments:a, default_arguments:a}, has_node_and_resource:{arguments:a, default_arguments:a}, has_signal:{arguments:a, default_arguments:a}, has_user_signal:{arguments:a, default_arguments:a}, is_a_parent_of:{arguments:a, default_arguments:a}, is_blocking_signals:{arguments:, default_arguments:}, is_class:{arguments:a, default_arguments:a}, is_connected:{arguments:a, b, c, default_arguments:a, b, c}, is_displayed_folded:{arguments:, default_arguments:}, is_greater_than:{arguments:a, default_arguments:a}, is_in_group:{arguments:a, default_arguments:a}, is_inside_tree:{arguments:, default_arguments:}, is_network_master:{arguments:, default_arguments:}, is_physics_processing:{arguments:, default_arguments:}, is_physics_processing_internal:{arguments:, default_arguments:}, is_processing:{arguments:, default_arguments:}, is_processing_input:{arguments:, default_arguments:}, is_processing_internal:{arguments:, default_arguments:}, is_processing_unhandled_input:{arguments:, default_arguments:}, is_processing_unhandled_key_input:{arguments:, default_arguments:}, is_queued_for_deletion:{arguments:, default_arguments:}, math_fight:{arguments:, default_arguments:}, move_child:{arguments:a, b, default_arguments:a, b}, multiply:{arguments:a, b, default_arguments:a, b}, notification:{arguments:a, b, default_arguments:a, b = False}, pi:{arguments:, default_arguments:}, print_stray_nodes:{arguments:, default_arguments:}, print_tree:{arguments:, default_arguments:}, print_tree_pretty:{arguments:, default_arguments:}, propagate_call:{arguments:a, b, c, default_arguments:a, b = [], c = False}, propagate_notification:{arguments:a, default_arguments:a}, property_list_changed_notify:{arguments:, default_arguments:}, queue_free:{arguments:, default_arguments:}, raise:{arguments:, default_arguments:}, remove_and_skip:{arguments:, default_arguments:}, remove_child:{arguments:a, default_arguments:a}, remove_from_group:{arguments:a, default_arguments:a}, remove_meta:{arguments:a, default_arguments:a}, replace_by:{arguments:a, b, default_arguments:a, b = False}, request_ready:{arguments:, default_arguments:}, rpc:{arguments:a, default_arguments:a}, rpc_config:{arguments:a, b, default_arguments:a, b}, rpc_id:{arguments:a, b, default_arguments:a, b}, rpc_unreliable:{arguments:a, default_arguments:a}, rpc_unreliable_id:{arguments:a, b, default_arguments:a, b}, rset:{arguments:a, b, default_arguments:a, b}, rset_config:{arguments:a, b, default_arguments:a, b}, rset_id:{arguments:a, b, c, default_arguments:a, b, c}, rset_unreliable:{arguments:a, b, default_arguments:a, b}, rset_unreliable_id:{arguments:a, b, c, default_arguments:a, b, c}, set:{arguments:a, b, default_arguments:a, b}, set_block_signals:{arguments:a, default_arguments:a}, set_custom_multiplayer:{arguments:a, default_arguments:a}, set_deferred:{arguments:a, b, default_arguments:a, b}, set_display_folded:{arguments:a, default_arguments:a}, set_filename:{arguments:a, default_arguments:a}, set_indexed:{arguments:a, b, default_arguments:a, b}, set_message_translation:{arguments:a, default_arguments:a}, set_meta:{arguments:a, b, default_arguments:a, b}, set_name:{arguments:a, default_arguments:a}, set_network_master:{arguments:a, b, default_arguments:a, b = True}, set_owner:{arguments:a, default_arguments:a}, set_pause_mode:{arguments:a, default_arguments:a}, set_physics_process:{arguments:a, default_arguments:a}, set_physics_process_internal:{arguments:a, default_arguments:a}, set_process:{arguments:a, default_arguments:a}, set_process_input:{arguments:a, default_arguments:a}, set_process_internal:{arguments:a, default_arguments:a}, set_process_priority:{arguments:a, default_arguments:a}, set_process_unhandled_input:{arguments:a, default_arguments:a}, set_process_unhandled_key_input:{arguments:a, default_arguments:a}, set_scene_instance_load_placeholder:{arguments:a, default_arguments:a}, set_script:{arguments:a, default_arguments:a}, subtract:{arguments:a, b, default_arguments:a, b}, sum:{arguments:a, default_arguments:a}, to_string:{arguments:, default_arguments:}, tr:{arguments:a, default_arguments:a}, update_configuration_warning:{arguments:, default_arguments:}}",
"context": "Then they do not share resources",
"expected": "|Dictionary| {_enter_tree:{arguments:, default_arguments:}, _exit_tree:{arguments:, default_arguments:}, _get:{arguments:a, default_arguments:a}, _get_configuration_warning:{arguments:, default_arguments:}, _get_editor_description:{arguments:, default_arguments:}, _get_import_path:{arguments:, default_arguments:}, _get_property_list:{arguments:, default_arguments:}, _init:{arguments:, default_arguments:}, _input:{arguments:a, default_arguments:a}, _notification:{arguments:a, default_arguments:a}, _physics_process:{arguments:a, default_arguments:a}, _process:{arguments:a, default_arguments:a}, _ready:{arguments:, default_arguments:}, _set:{arguments:a, b, default_arguments:a, b}, _set_editor_description:{arguments:a, default_arguments:a}, _set_import_path:{arguments:a, default_arguments:a}, _to_string:{arguments:, default_arguments:}, _unhandled_input:{arguments:a, default_arguments:a}, _unhandled_key_input:{arguments:a, default_arguments:a}, add:{arguments:a, b, default_arguments:a, b}, add_child:{arguments:a, b, default_arguments:a, b = False}, add_child_below_node:{arguments:a, b, c, default_arguments:a, b, c = False}, add_to_group:{arguments:a, b, default_arguments:a, b = False}, add_user_signal:{arguments:a, b, default_arguments:a, b = []}, call:{arguments:a, default_arguments:a}, call_deferred:{arguments:a, default_arguments:a}, callv:{arguments:a, b, default_arguments:a, b}, can_process:{arguments:, default_arguments:}, can_translate_messages:{arguments:, default_arguments:}, connect:{arguments:a, b, c, d, e, default_arguments:a, b, c, d = [], e = 0}, disconnect:{arguments:a, b, c, default_arguments:a, b, c}, divide:{arguments:a, b, default_arguments:a, b}, duplicate:{arguments:a, default_arguments:a = 15}, emit_signal:{arguments:a, default_arguments:a}, find_node:{arguments:a, b, c, default_arguments:a, b = True, c = True}, find_parent:{arguments:a, default_arguments:a}, free:{arguments:, default_arguments:}, get:{arguments:a, default_arguments:a}, get_child:{arguments:a, default_arguments:a}, get_child_count:{arguments:, default_arguments:}, get_children:{arguments:, default_arguments:}, get_class:{arguments:, default_arguments:}, get_custom_multiplayer:{arguments:, default_arguments:}, get_filename:{arguments:, default_arguments:}, get_groups:{arguments:, default_arguments:}, get_incoming_connections:{arguments:, default_arguments:}, get_index:{arguments:, default_arguments:}, get_indexed:{arguments:a, default_arguments:a}, get_instance_id:{arguments:, default_arguments:}, get_meta:{arguments:a, default_arguments:a}, get_meta_list:{arguments:, default_arguments:}, get_method_list:{arguments:, default_arguments:}, get_multiplayer:{arguments:, default_arguments:}, get_name:{arguments:, default_arguments:}, get_network_master:{arguments:, default_arguments:}, get_node:{arguments:a, default_arguments:a}, get_node_and_resource:{arguments:a, default_arguments:a}, get_node_or_null:{arguments:a, default_arguments:a}, get_owner:{arguments:, default_arguments:}, get_parent:{arguments:, default_arguments:}, get_path:{arguments:, default_arguments:}, get_path_to:{arguments:a, default_arguments:a}, get_pause_mode:{arguments:, default_arguments:}, get_physics_process_delta_time:{arguments:, default_arguments:}, get_position_in_parent:{arguments:, default_arguments:}, get_process_delta_time:{arguments:, default_arguments:}, get_process_priority:{arguments:, default_arguments:}, get_property_list:{arguments:, default_arguments:}, get_scene_instance_load_placeholder:{arguments:, default_arguments:}, get_script:{arguments:, default_arguments:}, get_signal_connection_list:{arguments:a, default_arguments:a}, get_signal_list:{arguments:, default_arguments:}, get_tree:{arguments:, default_arguments:}, get_viewport:{arguments:, default_arguments:}, has_meta:{arguments:a, default_arguments:a}, has_method:{arguments:a, default_arguments:a}, has_node:{arguments:a, default_arguments:a}, has_node_and_resource:{arguments:a, default_arguments:a}, has_signal:{arguments:a, default_arguments:a}, has_user_signal:{arguments:a, default_arguments:a}, is_a_parent_of:{arguments:a, default_arguments:a}, is_blocking_signals:{arguments:, default_arguments:}, is_class:{arguments:a, default_arguments:a}, is_connected:{arguments:a, b, c, default_arguments:a, b, c}, is_displayed_folded:{arguments:, default_arguments:}, is_greater_than:{arguments:a, default_arguments:a}, is_in_group:{arguments:a, default_arguments:a}, is_inside_tree:{arguments:, default_arguments:}, is_network_master:{arguments:, default_arguments:}, is_physics_processing:{arguments:, default_arguments:}, is_physics_processing_internal:{arguments:, default_arguments:}, is_processing:{arguments:, default_arguments:}, is_processing_input:{arguments:, default_arguments:}, is_processing_internal:{arguments:, default_arguments:}, is_processing_unhandled_input:{arguments:, default_arguments:}, is_processing_unhandled_key_input:{arguments:, default_arguments:}, is_queued_for_deletion:{arguments:, default_arguments:}, math_fight:{arguments:, default_arguments:}, move_child:{arguments:a, b, default_arguments:a, b}, multiply:{arguments:a, b, default_arguments:a, b}, notification:{arguments:a, b, default_arguments:a, b = False}, pi:{arguments:, default_arguments:}, print_stray_nodes:{arguments:, default_arguments:}, print_tree:{arguments:, default_arguments:}, print_tree_pretty:{arguments:, default_arguments:}, propagate_call:{arguments:a, b, c, default_arguments:a, b = [], c = False}, propagate_notification:{arguments:a, default_arguments:a}, property_list_changed_notify:{arguments:, default_arguments:}, queue_free:{arguments:, default_arguments:}, raise:{arguments:, default_arguments:}, remove_and_skip:{arguments:, default_arguments:}, remove_child:{arguments:a, default_arguments:a}, remove_from_group:{arguments:a, default_arguments:a}, remove_meta:{arguments:a, default_arguments:a}, replace_by:{arguments:a, b, default_arguments:a, b = False}, request_ready:{arguments:, default_arguments:}, rpc:{arguments:a, default_arguments:a}, rpc_config:{arguments:a, b, default_arguments:a, b}, rpc_id:{arguments:a, b, default_arguments:a, b}, rpc_unreliable:{arguments:a, default_arguments:a}, rpc_unreliable_id:{arguments:a, b, default_arguments:a, b}, rset:{arguments:a, b, default_arguments:a, b}, rset_config:{arguments:a, b, default_arguments:a, b}, rset_id:{arguments:a, b, c, default_arguments:a, b, c}, rset_unreliable:{arguments:a, b, default_arguments:a, b}, rset_unreliable_id:{arguments:a, b, c, default_arguments:a, b, c}, set:{arguments:a, b, default_arguments:a, b}, set_block_signals:{arguments:a, default_arguments:a}, set_custom_multiplayer:{arguments:a, default_arguments:a}, set_deferred:{arguments:a, b, default_arguments:a, b}, set_display_folded:{arguments:a, default_arguments:a}, set_filename:{arguments:a, default_arguments:a}, set_indexed:{arguments:a, b, default_arguments:a, b}, set_message_translation:{arguments:a, default_arguments:a}, set_meta:{arguments:a, b, default_arguments:a, b}, set_name:{arguments:a, default_arguments:a}, set_network_master:{arguments:a, b, default_arguments:a, b = True}, set_owner:{arguments:a, default_arguments:a}, set_pause_mode:{arguments:a, default_arguments:a}, set_physics_process:{arguments:a, default_arguments:a}, set_physics_process_internal:{arguments:a, default_arguments:a}, set_process:{arguments:a, default_arguments:a}, set_process_input:{arguments:a, default_arguments:a}, set_process_internal:{arguments:a, default_arguments:a}, set_process_priority:{arguments:a, default_arguments:a}, set_process_unhandled_input:{arguments:a, default_arguments:a}, set_process_unhandled_key_input:{arguments:a, default_arguments:a}, set_scene_instance_load_placeholder:{arguments:a, default_arguments:a}, set_script:{arguments:a, default_arguments:a}, subtract:{arguments:a, b, default_arguments:a, b}, sum:{arguments:a, default_arguments:a}, to_string:{arguments:, default_arguments:}, tr:{arguments:a, default_arguments:a}, update_configuration_warning:{arguments:, default_arguments:}} != |Dictionary| {_enter_tree:{arguments:, default_arguments:}, _exit_tree:{arguments:, default_arguments:}, _get:{arguments:a, default_arguments:a}, _get_configuration_warning:{arguments:, default_arguments:}, _get_editor_description:{arguments:, default_arguments:}, _get_import_path:{arguments:, default_arguments:}, _get_property_list:{arguments:, default_arguments:}, _init:{arguments:, default_arguments:}, _input:{arguments:a, default_arguments:a}, _notification:{arguments:a, default_arguments:a}, _physics_process:{arguments:a, default_arguments:a}, _process:{arguments:a, default_arguments:a}, _ready:{arguments:, default_arguments:}, _set:{arguments:a, b, default_arguments:a, b}, _set_editor_description:{arguments:a, default_arguments:a}, _set_import_path:{arguments:a, default_arguments:a}, _to_string:{arguments:, default_arguments:}, _unhandled_input:{arguments:a, default_arguments:a}, _unhandled_key_input:{arguments:a, default_arguments:a}, add:{arguments:a, b, default_arguments:a, b}, add_child:{arguments:a, b, default_arguments:a, b = False}, add_child_below_node:{arguments:a, b, c, default_arguments:a, b, c = False}, add_to_group:{arguments:a, b, default_arguments:a, b = False}, add_user_signal:{arguments:a, b, default_arguments:a, b = []}, call:{arguments:a, default_arguments:a}, call_deferred:{arguments:a, default_arguments:a}, callv:{arguments:a, b, default_arguments:a, b}, can_process:{arguments:, default_arguments:}, can_translate_messages:{arguments:, default_arguments:}, connect:{arguments:a, b, c, d, e, default_arguments:a, b, c, d = [], e = 0}, disconnect:{arguments:a, b, c, default_arguments:a, b, c}, divide:{arguments:a, b, default_arguments:a, b}, duplicate:{arguments:a, default_arguments:a = 15}, emit_signal:{arguments:a, default_arguments:a}, find_node:{arguments:a, b, c, default_arguments:a, b = True, c = True}, find_parent:{arguments:a, default_arguments:a}, free:{arguments:, default_arguments:}, get:{arguments:a, default_arguments:a}, get_child:{arguments:a, default_arguments:a}, get_child_count:{arguments:, default_arguments:}, get_children:{arguments:, default_arguments:}, get_class:{arguments:, default_arguments:}, get_custom_multiplayer:{arguments:, default_arguments:}, get_filename:{arguments:, default_arguments:}, get_groups:{arguments:, default_arguments:}, get_incoming_connections:{arguments:, default_arguments:}, get_index:{arguments:, default_arguments:}, get_indexed:{arguments:a, default_arguments:a}, get_instance_id:{arguments:, default_arguments:}, get_meta:{arguments:a, default_arguments:a}, get_meta_list:{arguments:, default_arguments:}, get_method_list:{arguments:, default_arguments:}, get_multiplayer:{arguments:, default_arguments:}, get_name:{arguments:, default_arguments:}, get_network_master:{arguments:, default_arguments:}, get_node:{arguments:a, default_arguments:a}, get_node_and_resource:{arguments:a, default_arguments:a}, get_node_or_null:{arguments:a, default_arguments:a}, get_owner:{arguments:, default_arguments:}, get_parent:{arguments:, default_arguments:}, get_path:{arguments:, default_arguments:}, get_path_to:{arguments:a, default_arguments:a}, get_pause_mode:{arguments:, default_arguments:}, get_physics_process_delta_time:{arguments:, default_arguments:}, get_position_in_parent:{arguments:, default_arguments:}, get_process_delta_time:{arguments:, default_arguments:}, get_process_priority:{arguments:, default_arguments:}, get_property_list:{arguments:, default_arguments:}, get_scene_instance_load_placeholder:{arguments:, default_arguments:}, get_script:{arguments:, default_arguments:}, get_signal_connection_list:{arguments:a, default_arguments:a}, get_signal_list:{arguments:, default_arguments:}, get_tree:{arguments:, default_arguments:}, get_viewport:{arguments:, default_arguments:}, has_meta:{arguments:a, default_arguments:a}, has_method:{arguments:a, default_arguments:a}, has_node:{arguments:a, default_arguments:a}, has_node_and_resource:{arguments:a, default_arguments:a}, has_signal:{arguments:a, default_arguments:a}, has_user_signal:{arguments:a, default_arguments:a}, is_a_parent_of:{arguments:a, default_arguments:a}, is_blocking_signals:{arguments:, default_arguments:}, is_class:{arguments:a, default_arguments:a}, is_connected:{arguments:a, b, c, default_arguments:a, b, c}, is_displayed_folded:{arguments:, default_arguments:}, is_greater_than:{arguments:a, default_arguments:a}, is_in_group:{arguments:a, default_arguments:a}, is_inside_tree:{arguments:, default_arguments:}, is_network_master:{arguments:, default_arguments:}, is_physics_processing:{arguments:, default_arguments:}, is_physics_processing_internal:{arguments:, default_arguments:}, is_processing:{arguments:, default_arguments:}, is_processing_input:{arguments:, default_arguments:}, is_processing_internal:{arguments:, default_arguments:}, is_processing_unhandled_input:{arguments:, default_arguments:}, is_processing_unhandled_key_input:{arguments:, default_arguments:}, is_queued_for_deletion:{arguments:, default_arguments:}, math_fight:{arguments:, default_arguments:}, move_child:{arguments:a, b, default_arguments:a, b}, multiply:{arguments:a, b, default_arguments:a, b}, notification:{arguments:a, b, default_arguments:a, b = False}, pi:{arguments:, default_arguments:}, print_stray_nodes:{arguments:, default_arguments:}, print_tree:{arguments:, default_arguments:}, print_tree_pretty:{arguments:, default_arguments:}, propagate_call:{arguments:a, b, c, default_arguments:a, b = [], c = False}, propagate_notification:{arguments:a, default_arguments:a}, property_list_changed_notify:{arguments:, default_arguments:}, queue_free:{arguments:, default_arguments:}, raise:{arguments:, default_arguments:}, remove_and_skip:{arguments:, default_arguments:}, remove_child:{arguments:a, default_arguments:a}, remove_from_group:{arguments:a, default_arguments:a}, remove_meta:{arguments:a, default_arguments:a}, replace_by:{arguments:a, b, default_arguments:a, b = False}, request_ready:{arguments:, default_arguments:}, rpc:{arguments:a, default_arguments:a}, rpc_config:{arguments:a, b, default_arguments:a, b}, rpc_id:{arguments:a, b, default_arguments:a, b}, rpc_unreliable:{arguments:a, default_arguments:a}, rpc_unreliable_id:{arguments:a, b, default_arguments:a, b}, rset:{arguments:a, b, default_arguments:a, b}, rset_config:{arguments:a, b, default_arguments:a, b}, rset_id:{arguments:a, b, c, default_arguments:a, b, c}, rset_unreliable:{arguments:a, b, default_arguments:a, b}, rset_unreliable_id:{arguments:a, b, c, default_arguments:a, b, c}, set:{arguments:a, b, default_arguments:a, b}, set_block_signals:{arguments:a, default_arguments:a}, set_custom_multiplayer:{arguments:a, default_arguments:a}, set_deferred:{arguments:a, b, default_arguments:a, b}, set_display_folded:{arguments:a, default_arguments:a}, set_filename:{arguments:a, default_arguments:a}, set_indexed:{arguments:a, b, default_arguments:a, b}, set_message_translation:{arguments:a, default_arguments:a}, set_meta:{arguments:a, b, default_arguments:a, b}, set_name:{arguments:a, default_arguments:a}, set_network_master:{arguments:a, b, default_arguments:a, b = True}, set_owner:{arguments:a, default_arguments:a}, set_pause_mode:{arguments:a, default_arguments:a}, set_physics_process:{arguments:a, default_arguments:a}, set_physics_process_internal:{arguments:a, default_arguments:a}, set_process:{arguments:a, default_arguments:a}, set_process_input:{arguments:a, default_arguments:a}, set_process_internal:{arguments:a, default_arguments:a}, set_process_priority:{arguments:a, default_arguments:a}, set_process_unhandled_input:{arguments:a, default_arguments:a}, set_process_unhandled_key_input:{arguments:a, default_arguments:a}, set_scene_instance_load_placeholder:{arguments:a, default_arguments:a}, set_script:{arguments:a, default_arguments:a}, subtract:{arguments:a, b, default_arguments:a, b}, sum:{arguments:a, default_arguments:a}, to_string:{arguments:, default_arguments:}, tr:{arguments:a, default_arguments:a}, update_configuration_warning:{arguments:, default_arguments:}}",
"success": true
} ],
"context": "When we create two of it for the same script",
"fullname": "test_When_we_create_two_of_it_for_the_same_script",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|Object| [Node:4350] is equal to |Object| [Node:4350]",
"context": "Then we get the same double back",
"expected": "|Object| [Node:4350] is equal to |Object| [Node:4350]",
"success": true
} ],
"context": "When we call the double the second time",
"fullname": "test_When_we_call_double_a_second_time_on",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 3,
"path": "res://tests/integration/script_director.test.gd",
"source": {
"containers": [ "res://tests/integration", "res://tests" ],
"method": "",
"path": "res://tests/integration/script_director.test.gd",
"tags": [  ],
"test": ExtResource( 13 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 3
}, {
"context": "Given a Boolean Assertion",
"methods": [ {
"assertions": [ {
"actual": "|bool| True != false",
"context": "",
"expected": "|bool| True == false",
"success": false
} ],
"context": " intentional failure",
"fullname": "test_intentional_failure",
"passed": 0,
"success": false,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then it passes",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When calling asserts.is_true(true)",
"fullname": "test_when_calling_asserts_is_true",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| False == false",
"context": "Then it passes",
"expected": "|bool| False == false",
"success": true
} ],
"context": "When calling asserts.is_false(false)",
"fullname": "test_when_calling_asserts_is_false",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 2,
"path": "res://tests/unit/boolean.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/boolean.test.gd",
"tags": [  ],
"test": ExtResource( 11 ),
"yield_time": 0.0
},
"success": false,
"time_taken": 0.0,
"total": 3
}, {
"context": "Given an Equality Assertion",
"methods": [ {
"assertions": [ {
"actual": "|int| 1 is equal to |int| 1",
"context": "Then it passes",
"expected": "|int| 1 is equal to |int| 1",
"success": true
} ],
"context": "When calling asserts.is_equal(1, 1)",
"fullname": "test_when_calling_is_equal",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 2 is equal or greater |int| 1",
"context": "Then it passes",
"expected": "|int| 2 is equal or greater |int| 1",
"success": true
} ],
"context": "When calling asserts.is_equal_or_greater_than(2, 1)",
"fullname": "test_when_calling_is_equal_or_greater_than",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 2 is greater than |int| 1",
"context": "Then it passes",
"expected": "|int| 2 is greater than |int| 1",
"success": true
} ],
"context": "When calling asserts.is_greater_than(2, 1)",
"fullname": "test_when_calling_is_greater_than",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 1 is less than |int| 2",
"context": "Then it passes",
"expected": "|int| 1 is less than |int| 2",
"success": true
} ],
"context": "When calling asserts.is_less_than(2, 1)",
"fullname": "test_when_calling_is_less_than",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 5 is not equal to |int| 6",
"context": "Then it passes",
"expected": "|int| 5 != |int| 6",
"success": true
} ],
"context": "When callign asserts.is_not_equal(5, 6)",
"fullname": "test_when_calling_is_not_equal",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 1 is equal or less than |int| 1",
"context": "Then it passes!",
"expected": "|int| 1 is equal or less than |int| 1",
"success": true
} ],
"context": "When calling asserts.is_equal_or_less_than(1, 1)",
"fullname": "test_when_calling_is_equal_or_less_than_with_equal_values",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 1 is equal or greater |int| 1",
"context": "Then it passes",
"expected": "|int| 1 is equal or greater |int| 1",
"success": true
} ],
"context": "When calling asserts.is_equal_or_greater_than(1, 1)",
"fullname": "test_when_calling_is_equal_or_greater_than_with_equal_values",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 7,
"path": "res://tests/unit/equality.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/equality.test.gd",
"tags": [  ],
"test": ExtResource( 8 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 7
}, {
"context": "Given A File Assertion",
"methods": [ {
"assertions": [ {
"actual": "res://somefile.gd does not exist",
"context": "Then it passes",
"expected": "res://somefile.gd does not exist",
"success": true
} ],
"context": "When calling asserts.file_does_not_exist when there is no file",
"fullname": "test_when_calling_file_does_not_exist_when_there_is_no_file",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "res://tests/unit/file.test.gd exists",
"context": "Then it passes",
"expected": "res://tests/unit/file.test.gd exists",
"success": true
} ],
"context": "When calling asserts.file_exists when the file is this suite",
"fullname": "test_when_calling_file_exists_when_file_is_self",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": " does not exist",
"context": "Then it passes",
"expected": " does not exist",
"success": true
} ],
"context": "When calling asserts file does not exist when path is empty",
"fullname": "test_when_calling_file_does_not_exist_when_path_is_empty",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 3,
"path": "res://tests/unit/file.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/file.test.gd",
"tags": [  ],
"test": ExtResource( 3 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 3
}, {
"context": "Given a Test Double",
"methods": [ {
"assertions": [ {
"actual": "|int| 9999 is equal to |int| 9999",
"context": "Then it returns the corresponding value when the pattern matches",
"expected": "|int| 9999 is equal to |int| 9999",
"success": true
} ],
"context": "When we call a method that was stubbed with an argument pattern that includes a non-primitive object",
"fullname": "test_When_we_call_a_method_that_was_stubbed_with_an_argument_pattern_that_includes_a_non_primitive_object",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 9999 is equal to |int| 9999",
"context": "Then it returns the corresponding value when the partial pattern matches",
"expected": "|int| 9999 is equal to |int| 9999",
"success": true
} ],
"context": "When we call a method that was stubbed with a partial (ie using any()) argument pattern",
"fullname": "test_When_we_call_a_method_that_was_stubbed_with_a_partial_argument_pattern",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|null| Null == null",
"context": "Then we get the stubbed value back",
"expected": "|null| Null == null",
"success": true
} ],
"context": "When we stub a method of a doubled inner class",
"fullname": "test_When_we_stub_a_method_of_a_double_inner_class",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|String| Jackie is equal to |String| Jackie",
"context": "Then we can double the object successfully",
"expected": "|String| Jackie is equal to |String| Jackie",
"success": true
} ],
"context": "When we pass in dependecies on direct",
"fullname": "test_When_we_pass_in_deps_on_direct",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 99 is equal to |int| 99",
"context": "Then it returns a value",
"expected": "|int| 99 is equal to |int| 99",
"success": true
} ],
"context": "When we pass a funcref as a subcall that returns",
"fullname": "test_When_we_pass_a_funcref_as_a_subcall_that_returns_a_value",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 99 is equal to |int| 99",
"context": "Then it affects the state of the double",
"expected": "|int| 99 is equal to |int| 99",
"success": true
} ],
"context": "When we pass a funcref as a subcall",
"fullname": "test_When_we_pass_a_funcref_as_a_subcall",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|Array| [10, 5] is equal to |Array| [10, 5]",
"context": "Then it returns a value",
"expected": "|Array| [10, 5] is equal to |Array| [10, 5]",
"success": true
} ],
"context": "When we pass an Object with a call_func function",
"fullname": "test_When_we_pass_an_object_with_callfunc_method_as_a_subcall",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 4 is equal to |int| 4",
"context": "Then it calls its super implementation by default",
"expected": "|int| 4 is equal to |int| 4",
"success": true
}, {
"actual": "|int| 9999 is equal to |int| 9999",
"context": "Then it does not call its super implementation when arguments patterns match a different return value",
"expected": "|int| 9999 is equal to |int| 9999",
"success": true
} ],
"context": "When we call a method that we stubbed to call its super implementation by default",
"fullname": "test_When_we_call_a_method_that_we_stubbed_to_call_its_super_implementation_by_default",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|int| 4 is equal to |int| 4",
"context": "Then we get the correct result",
"expected": "|int| 4 is equal to |int| 4",
"success": true
} ],
"context": "When we call an add(x, y) method that we haven't directed",
"fullname": "test_When_we_call_an_add_method_that_we_have_not_directed",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then it returns true",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we call a method that we have stubbed to return true",
"fullname": "test_When_we_call_a_method_that_we_have_stubbed_to_return_true",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|Object| [Node:4435] is equal to |Object| [Node:4435]",
"context": "Then it returns that same node",
"expected": "|Object| [Node:4435] is equal to |Object| [Node:4435]",
"success": true
} ],
"context": "When we call a method that we have stubbed to return a node",
"fullname": "test_When_we_call_a_method_that_we_have_stubbed_to_return_a_node",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|float| 6.283185 is equal to |float| 6.283185",
"context": "Then we can call the static methods of that inner double",
"expected": "|float| 6.283185 is equal to |float| 6.283185",
"success": true
} ],
"context": "When we add an doubled inner class to it",
"fullname": "test_When_we_add_a_doubled_inner_class_to_it",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "(1, 1) is builtin: Vector2",
"context": "Then we can call methods on it",
"expected": "(1, 1) is builtin: Vector2",
"success": true
} ],
"context": "When we double an inner class",
"fullname": "test_When_we_double_an_inner_class",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 100 is equal to |int| 100",
"context": "Then it returns the default stubbed value when the arguments don't match any pattern",
"expected": "|int| 100 is equal to |int| 100",
"success": true
}, {
"actual": "|int| 1000 is equal to |int| 1000",
"context": "Then it returns the the corresponding value to the pattern the arguments matched",
"expected": "|int| 1000 is equal to |int| 1000",
"success": true
} ],
"context": "When we call a method that was stubbed to return different values based on argument patterns",
"fullname": "test_When_we_call_a_method_that_was_stubbed_to_return_different_values_based_on_argument_patterns",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "add was called",
"context": "Then we can see that it was called at least once",
"expected": "add was called",
"success": true
} ],
"context": "When we call a method that we are spying on",
"fullname": "test_When_we_call_a_method_that_we_are_spying_on",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "method: add was called with arguments: [10, 10]",
"context": "Then we can see that it was called with those arguments",
"expected": "method: add was called with arguments: [10, 10]",
"success": true
} ],
"context": "When we pass arguments to a method call that we are spying on",
"fullname": "test_When_we_pass_arguments_to_a_method_call_that_we_are_spying_on",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| True is equal to |bool| True",
"context": "Then we can call it",
"expected": "|bool| True is equal to |bool| True",
"success": true
} ],
"context": "When we stubbed a keyworded method by passing in the correct keyword",
"fullname": "test_When_we_stubbed_a_keyword_method_by_passing_in_the_correct_keyword",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|String| Jackie is equal to |String| Jackie",
"context": "Then we can double the object successfully",
"expected": "|String| Jackie is equal to |String| Jackie",
"success": true
} ],
"context": "When we pass in dependecies on double",
"fullname": "test_When_we_pass_in_deps_on_double",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|null| Null == null",
"context": "Then we get null",
"expected": "|null| Null == null",
"success": true
} ],
"context": "When we call a method that we have dummied",
"fullname": "test_When_we_call_a_method_that_we_have_dummied",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 19,
"path": "res://tests/integration/test_double.test.gd",
"source": {
"containers": [ "res://tests/integration", "res://tests" ],
"method": "",
"path": "res://tests/integration/test_double.test.gd",
"tags": [  ],
"test": ExtResource( 14 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 19
}, {
"context": "Given an Is Instance of class/type Assertion",
"methods": [ {
"assertions": [ {
"actual": "|Plane| 0, 0, 0, 0 != null",
"context": "plane is not null",
"expected": "|Plane| 0, 0, 0, 0 != null",
"success": true
}, {
"actual": "0, 0, 0, 0 is builtin: Plane",
"context": "then it passes",
"expected": "0, 0, 0, 0 is builtin: Plane",
"success": true
} ],
"context": "When calling asserts.is_Plane(plane: Plane())",
"fullname": "test_when_calling_is_Plane",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|AABB| 0, 0, 0 - 0, 0, 0 != null",
"context": "AABB is not null",
"expected": "|AABB| 0, 0, 0 - 0, 0, 0 != null",
"success": true
}, {
"actual": "0, 0, 0 - 0, 0, 0 is builtin: AABB",
"context": "Then it passes",
"expected": "0, 0, 0 - 0, 0, 0 is builtin: AABB",
"success": true
} ],
"context": "When calling asserts.is_AABB(aabb: AABB)",
"fullname": "test_when_calling_is_AABB",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "{} is builtin: Dictionary",
"context": "Then it passes",
"expected": "{} is builtin: Dictionary",
"success": true
} ],
"context": "When calling asserts.is_Dictionary({})",
"fullname": "test_when_calling_is_Dictionary",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|PoolVector2Array| [] != null",
"context": "vec2s is not null",
"expected": "|PoolVector2Array| [] != null",
"success": true
}, {
"actual": "[] is builtin: PoolVector2Array",
"context": "Then it passes",
"expected": "[] is builtin: PoolVector2Array",
"success": true
} ],
"context": "When calling is asserts.is_PoolVector2Array(vec2s: PoolVector2Array)",
"fullname": "test_when_calling_is_PoolVector2Array",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|Rect2| (0, 0, 0, 0) != null",
"context": "rect2 is not null",
"expected": "|Rect2| (0, 0, 0, 0) != null",
"success": true
}, {
"actual": "(0, 0, 0, 0) is builtin: Rect2",
"context": "Then it passes",
"expected": "(0, 0, 0, 0) is builtin: Rect2",
"success": true
} ],
"context": "When calling asserts.is_Rect2(rect2: Rect2)",
"fullname": "test_when_calling_is_Rect2",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|PoolVector3Array| [] != null",
"context": "vec3s is not null",
"expected": "|PoolVector3Array| [] != null",
"success": true
}, {
"actual": "[] is builtin: PoolVector3Array",
"context": "Then it passes",
"expected": "[] is builtin: PoolVector3Array",
"success": true
} ],
"context": "When calling is asserts.is_PoolVector3Array(vec3s: PoolVector3Array)",
"fullname": "test_when_calling_is_PoolVector3Array",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|PoolRealArray| [] != null",
"context": "reals is not null",
"expected": "|PoolRealArray| [] != null",
"success": true
}, {
"actual": "[] is builtin: PoolRealArray",
"context": "Then it passes",
"expected": "[] is builtin: PoolRealArray",
"success": true
} ],
"context": "When calling is asserts.is_PoolRealArray(reals: PoolRealArray)",
"fullname": "test_when_calling_is_PoolRealArray",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|Quat| (0, 0, 0, 1) != null",
"context": "quat is not null",
"expected": "|Quat| (0, 0, 0, 1) != null",
"success": true
}, {
"actual": "(0, 0, 0, 1) is builtin: Quat",
"context": "Then it passes",
"expected": "(0, 0, 0, 1) is builtin: Quat",
"success": true
} ],
"context": "When calling asserts.is_Quat(quat: Quat)",
"fullname": "test_when_calling_is_Quat",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|RID| [RID] != null",
"context": "rid is not null",
"expected": "|RID| [RID] != null",
"success": true
}, {
"actual": "[RID] is builtin: RID",
"context": "Then it passes",
"expected": "[RID] is builtin: RID",
"success": true
} ],
"context": "When calling asserts.is_RID(rid: RID)",
"fullname": "test_when_calling_is_RID",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|Color| 0,0,0,1 != null",
"context": "color is not null",
"expected": "|Color| 0,0,0,1 != null",
"success": true
}, {
"actual": "0,0,0,1 is builtin: Color",
"context": "Then it passes",
"expected": "0,0,0,1 is builtin: Color",
"success": true
} ],
"context": "When calling asserts.is_color(color: Color)",
"fullname": "test_when_calling_is_Color",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|String|  != null",
"context": "strs is not null",
"expected": "|String|  != null",
"success": true
}, {
"actual": " is builtin: String",
"context": "Then it passes",
"expected": " is builtin: String",
"success": true
} ],
"context": "When calling asserts.is_string(strs: String)",
"fullname": "test_when_calling_is_string",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|Transform| 1, 0, 0, 0, 1, 0, 0, 0, 1 - 0, 0, 0 != null",
"context": "transform is not null",
"expected": "|Transform| 1, 0, 0, 0, 1, 0, 0, 0, 1 - 0, 0, 0 != null",
"success": true
}, {
"actual": "1, 0, 0, 0, 1, 0, 0, 0, 1 - 0, 0, 0 is builtin: Transform",
"context": "Then it passes",
"expected": "1, 0, 0, 0, 1, 0, 0, 0, 1 - 0, 0, 0 is builtin: Transform",
"success": true
} ],
"context": "When calling asserts.is_Transform(transform: Transform)",
"fullname": "test_when_calling_is_Transform",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|Transform2D| ((1, 0), (0, 1), (0, 0)) != null",
"context": "transform2D is not null",
"expected": "|Transform2D| ((1, 0), (0, 1), (0, 0)) != null",
"success": true
}, {
"actual": "((1, 0), (0, 1), (0, 0)) is builtin: Transform2D",
"context": "Then it passes",
"expected": "((1, 0), (0, 1), (0, 0)) is builtin: Transform2D",
"success": true
} ],
"context": "When calling asserts.is_Transform(transform2D: Transform2D)",
"fullname": "test_when_calling_is_Transform2D",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|Array| [] != null",
"context": "array is not null",
"expected": "|Array| [] != null",
"success": true
}, {
"actual": "[] is builtin: Array",
"context": "Then it passes",
"expected": "[] is builtin: Array",
"success": true
} ],
"context": "When calling asserts.is_Array(array: Array)",
"fullname": "test_when_calling_is_Array",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|Vector2| (0, 0) != null",
"context": "vec2 is not null",
"expected": "|Vector2| (0, 0) != null",
"success": true
}, {
"actual": "(0, 0) is builtin: Vector2",
"context": "Then it passes",
"expected": "(0, 0) is builtin: Vector2",
"success": true
} ],
"context": "When calling asserts.is_Vector2(vec2)",
"fullname": "test_when_calling_is_Vector2",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|PoolStringArray| [] != null",
"context": "strs is not null",
"expected": "|PoolStringArray| [] != null",
"success": true
}, {
"actual": "[] is builtin: PoolStringArray",
"context": "Then it passes",
"expected": "[] is builtin: PoolStringArray",
"success": true
} ],
"context": "When calling is asserts.is_PoolStringArray(strs: PoolStringArray)",
"fullname": "test_when_calling_is_PoolStringArray",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|NodePath| . != null",
"context": "@'Parent/Child' is not null",
"expected": "|NodePath| . != null",
"success": true
}, {
"actual": ". is builtin: NodePath",
"context": "Then it passes",
"expected": ". is builtin: NodePath",
"success": true
} ],
"context": "When calling asserts.is_NodePath(@'Parent/Child')",
"fullname": "test_when_calling_is_NodePath",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|Object| [Node:4539] != null",
"context": "node is not null",
"expected": "|Object| [Node:4539] != null",
"success": true
}, {
"actual": "[Node:4539] is builtin: Object",
"context": "An instance of node is an Object",
"expected": "[Node:4539] is builtin: Object",
"success": true
} ],
"context": "When calling is asserts.object(node: Node)",
"fullname": "test_when_calling_is_object",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|PoolByteArray| [PoolByteArray] != null",
"context": "bytes is not null",
"expected": "|PoolByteArray| [PoolByteArray] != null",
"success": true
}, {
"actual": "[PoolByteArray] is builtin: PoolByteArray",
"context": "Then it passes",
"expected": "[PoolByteArray] is builtin: PoolByteArray",
"success": true
} ],
"context": "When calling asserts.is_PoolByteArray(bytes: PoolByteArray)",
"fullname": "test_when_calling_is_PoolByteArray",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|PoolIntArray| [] != null",
"context": "ints is not null",
"expected": "|PoolIntArray| [] != null",
"success": true
}, {
"actual": "[] is builtin: PoolIntArray",
"context": "Then it passes",
"expected": "[] is builtin: PoolIntArray",
"success": true
} ],
"context": "When calling asserts.is_PoolIntArray(ints: PoolIntArray)",
"fullname": "test_when_calling_is_PoolIntArray",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "1 is builtin: int",
"context": "Then it passes",
"expected": "1 is builtin: int",
"success": true
} ],
"context": "When callign asserts.is_int(1)",
"fullname": "test_when_calling_is_int",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|Vector3| (0, 0, 0) != null",
"context": "vec3 is not null",
"expected": "|Vector3| (0, 0, 0) != null",
"success": true
}, {
"actual": "(0, 0, 0) is builtin: Vector3",
"context": "Then it passes",
"expected": "(0, 0, 0) is builtin: Vector3",
"success": true
} ],
"context": "When calling asserts.is_Vector3(vec3: Vector3",
"fullname": "test_when_calling_is_Vector3",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "1 is builtin: float",
"context": "Then it passes",
"expected": "1 is builtin: float",
"success": true
} ],
"context": "When calling asserts.is_float(1.0)",
"fullname": "test_when_calling_is_float",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|PoolColorArray| [PoolColorArray] != null",
"context": "colors is not null",
"expected": "|PoolColorArray| [PoolColorArray] != null",
"success": true
}, {
"actual": "[PoolColorArray] is builtin: PoolColorArray",
"context": "Then it passes",
"expected": "[PoolColorArray] is builtin: PoolColorArray",
"success": true
} ],
"context": "When calling asserts.is_PoolColorArray(colors: PoolColorArray)",
"fullname": "test_when_calling_is_PoolColorArray",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "True is builtin: bool",
"context": "Then it passes",
"expected": "True is builtin: bool",
"success": true
} ],
"context": "When calling asserts.is_bool(true)",
"fullname": "test_when_calling_is_bool",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|Basis| ((1, 0, 0), (0, 1, 0), (0, 0, 1)) != null",
"context": "basis is not null",
"expected": "|Basis| ((1, 0, 0), (0, 1, 0), (0, 0, 1)) != null",
"success": true
}, {
"actual": "((1, 0, 0), (0, 1, 0), (0, 0, 1)) is builtin: Basis",
"context": "Then it passes",
"expected": "((1, 0, 0), (0, 1, 0), (0, 0, 1)) is builtin: Basis",
"success": true
} ],
"context": "When calling asserts.is_basis(basis: Basis",
"fullname": "test_when_calling_is_Basis",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
} ],
"passed": 26,
"path": "res://tests/unit/is_instance.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/is_instance.test.gd",
"tags": [  ],
"test": ExtResource( 6 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 26
}, {
"context": "Given a Null Assertion",
"methods": [ {
"assertions": [ {
"actual": "|null| Null == null",
"context": "Then it passes",
"expected": "|null| Null == null",
"success": true
} ],
"context": "When calling asserts.is_null(null)",
"fullname": "test_when_calling_null_is_null",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|Object| [Node:4571] != null",
"context": "Then it passes",
"expected": "|Object| [Node:4571] != null",
"success": true
} ],
"context": "When calling Node is not null",
"fullname": "test_when_calling_node_is_not_null",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|Object| [Deleted Object] == null",
"context": "A Freed Node is null in Engine 3.2.2 or greater",
"expected": "|Object| [Deleted Object] == null",
"success": true
} ],
"context": "When calling freed object is null",
"fullname": "test_when_calling_freed_object_is_not_null",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 3,
"path": "res://tests/unit/null.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/null.test.gd",
"tags": [  ],
"test": ExtResource( 12 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 3
}, {
"context": "Given an Is Not Instance of class/type Assertion",
"methods": [ {
"assertions": [ {
"actual": "Null is not builtin: AABB",
"context": "Then it passes",
"expected": "Null is not builtin: AABB",
"success": true
} ],
"context": "when calling asserts.is_not_AABB(null)",
"fullname": "test_when_calling_is_not_AABB",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Basis",
"context": "Then it passes",
"expected": "Null is not builtin: Basis",
"success": true
} ],
"context": "when calling asserts.is_not_Basis(null)",
"fullname": "test_when_calling_is_not_Basis",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Array",
"context": "Then it passes",
"expected": "Null is not builtin: Array",
"success": true
} ],
"context": "when calling asserts.is_not_Array(null)",
"fullname": "test_when_calling_is_not_Array",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: RID",
"context": "Then it passes",
"expected": "Null is not builtin: RID",
"success": true
} ],
"context": "when calling asserts.is_not_RID(null)",
"fullname": "test_when_calling_is_not_RID",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Vector2",
"context": "Then it passes",
"expected": "Null is not builtin: Vector2",
"success": true
} ],
"context": "when calling asserts.is_not_Vector2(null)",
"fullname": "test_when_calling_is_not_Vector2",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Color",
"context": "Then it passes",
"expected": "Null is not builtin: Color",
"success": true
} ],
"context": "when calling asserts.is_not_Color(null)",
"fullname": "test_when_calling_is_not_Color",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Object",
"context": "Then it passes",
"expected": "Null is not builtin: Object",
"success": true
} ],
"context": "when calling asserts.is_not_Object(null)",
"fullname": "test_when_calling_is_not_Object",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Rect2",
"context": "Then it passes",
"expected": "Null is not builtin: Rect2",
"success": true
} ],
"context": "when calling asserts.is_not_Rect2(null)",
"fullname": "test_when_calling_is_not_Rect2",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: PoolVector2Array",
"context": "Then it passes",
"expected": "Null is not builtin: PoolVector2Array",
"success": true
} ],
"context": "when calling asserts.is_not_PoolVector2Array(null)",
"fullname": "test_when_calling_is_not_PoolVector2Array",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: int",
"context": "Then it passes",
"expected": "Null is not builtin: int",
"success": true
} ],
"context": "when calling asserts.is_not_int(null)",
"fullname": "test_when_calling_is_not_int",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: PoolIntArray",
"context": "Then it passes",
"expected": "Null is not builtin: PoolIntArray",
"success": true
} ],
"context": "when calling asserts.is_not_PoolIntArray(null)",
"fullname": "test_when_calling_is_not_PoolIntArray",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: NodePath",
"context": "Then it passes",
"expected": "Null is not builtin: NodePath",
"success": true
} ],
"context": "when calling asserts.is_not_NodePath(null)",
"fullname": "test_when_calling_is_not_NodePath",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Plane",
"context": "Then it passes",
"expected": "Null is not builtin: Plane",
"success": true
} ],
"context": "when calling asserts.is_not_Plane(null)",
"fullname": "test_when_calling_is_not_Plane",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: PoolVector3Array",
"context": "Then it passes",
"expected": "Null is not builtin: PoolVector3Array",
"success": true
} ],
"context": "when calling asserts.is_not_PoolVector3Array(null)",
"fullname": "test_when_calling_is_not_PoolVector3Array",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Transform",
"context": "Then it passes",
"expected": "Null is not builtin: Transform",
"success": true
} ],
"context": "when calling asserts.is_not_Transform(null)",
"fullname": "test_when_calling_is_not_Transform",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Transform2D",
"context": "Then it passes",
"expected": "Null is not builtin: Transform2D",
"success": true
} ],
"context": "when calling asserts.is_not_Transform2D(null)",
"fullname": "test_when_calling_is_not_Transform2D",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: bool",
"context": "Then it passes",
"expected": "Null is not builtin: bool",
"success": true
} ],
"context": "when calling asserts.is_not_bool(null)",
"fullname": "test_when_calling_is_not_bool",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: PoolColorArray",
"context": "Then it passes",
"expected": "Null is not builtin: PoolColorArray",
"success": true
} ],
"context": "when calling asserts.is_not_PoolColorArray(null)",
"fullname": "test_when_calling_is_not_PoolColorArray",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: PoolRealArray",
"context": "Then it passes",
"expected": "Null is not builtin: PoolRealArray",
"success": true
} ],
"context": "when calling asserts.is_not_PoolRealArray(null)",
"fullname": "test_when_calling_is_not_PoolRealArray",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: PoolStringArray",
"context": "Then it passes",
"expected": "Null is not builtin: PoolStringArray",
"success": true
} ],
"context": "when calling asserts.is_not_PoolStringArray(null)",
"fullname": "test_when_calling_is_not_PoolStringArray",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Quat",
"context": "Then it passes",
"expected": "Null is not builtin: Quat",
"success": true
} ],
"context": "when calling asserts.is_not_Quat(null)",
"fullname": "test_when_calling_is_not_Quat",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Dictionary",
"context": "Then it passes",
"expected": "Null is not builtin: Dictionary",
"success": true
} ],
"context": "when calling asserts.is_not_Dictionary(null)",
"fullname": "test_when_calling_is_not_Dictionary",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Vector3",
"context": "Then it passes",
"expected": "Null is not builtin: Vector3",
"success": true
} ],
"context": "when calling asserts.is_not_Vector3(null)",
"fullname": "test_when_calling_is_not_Vector3",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: PoolByteArray",
"context": "Then it passes",
"expected": "Null is not builtin: PoolByteArray",
"success": true
} ],
"context": "when calling asserts.is_not_PoolByteArray(null)",
"fullname": "test_when_calling_is_not_PoolByteArray",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: float",
"context": "Then it passes",
"expected": "Null is not builtin: float",
"success": true
} ],
"context": "when calling asserts.is_not_float(null)",
"fullname": "test_when_calling_is_not_float",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: String",
"context": "Then it passes",
"expected": "Null is not builtin: String",
"success": true
} ],
"context": "when calling asserts.is_not_String(null)",
"fullname": "test_when_calling_is_not_String",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 26,
"path": "res://tests/unit/is_not_instance.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/is_not_instance.test.gd",
"tags": [  ],
"test": ExtResource( 2 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 26
}, {
"context": "Given the Addition Operator",
"methods": [ {
"assertions": [ {
"actual": "|int| 4 is equal to |int| 4",
"context": "",
"expected": "|int| 4 is equal to |int| 4",
"success": true
} ],
"context": "When we add 2 to 2 we get 4",
"fullname": "test_add",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 8 is equal to |int| 8",
"context": "",
"expected": "|int| 8 is equal to |int| 8",
"success": true
} ],
"context": "When we add 5 to 3 we get 8",
"fullname": "test_add",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 13 is equal to |int| 13",
"context": "",
"expected": "|int| 13 is equal to |int| 13",
"success": true
} ],
"context": "When we add 7 to 6 we get 13",
"fullname": "test_add",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 0 is equal to |int| 0",
"context": "",
"expected": "|int| 0 is equal to |int| 0",
"success": true
} ],
"context": "When we subtract 2 from 2 we get 0",
"fullname": "test_subtract",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 2 is equal to |int| 2",
"context": "",
"expected": "|int| 2 is equal to |int| 2",
"success": true
} ],
"context": "When we subtract 5 from 3 we get 2",
"fullname": "test_subtract",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 1 is equal to |int| 1",
"context": "",
"expected": "|int| 1 is equal to |int| 1",
"success": true
} ],
"context": "When we subtract 7 from 6 we get 1",
"fullname": "test_subtract",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 6,
"path": "res://tests/unit/parameters.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/parameters.test.gd",
"tags": [  ],
"test": ExtResource( 16 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 6
}, {
"context": "Given an Object Assertion",
"methods": [ {
"assertions": [ {
"actual": "[Node:4600] is not freed",
"context": "Then it passes",
"expected": "[Node:4600] is not freed",
"success": true
} ],
"context": "When calling asserts.is_not_freed(unfreed_object)",
"fullname": "test_when_calling_unfreed_object_is_not_freed",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is freed from memory",
"context": "Then it passes",
"expected": "Null is freed from memory",
"success": true
} ],
"context": "When calling asserts.is_freed(freed_object",
"fullname": "test_when_calling_freed_object_is_freed",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:4578] does not have meta: bad_meta",
"context": "Then it passes",
"expected": "[Node:4578] does not have meta: bad_meta",
"success": true
} ],
"context": "When calling asserts.object_does_not_have_meta()",
"fullname": "test_when_calling_does_not_have_meta",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:4578] has meta: dummy",
"context": "Then it passes",
"expected": "[Node:4578] has meta: dummy",
"success": true
}, {
"actual": "[Node:4578] has meta: dummy",
"context": "Then it passes",
"expected": "[Node:4578] has meta: dummy",
"success": true
} ],
"context": "When calling asserts.object_has_meta() after adding metadata",
"fullname": "test_when_calling_has_meta_after_adding_metadata",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "[Node:4611] is queued for deletion",
"context": "Then it passes",
"expected": "[Node:4611] is queued for deletion",
"success": true
} ],
"context": "When calling asserts.object_is_queued for deletion after calling queue_free",
"fullname": "test_when_calling_obj_is_queued_for_deletion_after_calling_queue_free",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:4578].builtin_dummy is connected to [Node:4578].title",
"context": "Then it passes",
"expected": "[Node:4578].builtin_dummy is connected to [Node:4578].title",
"success": true
} ],
"context": "When calling asserts object is connected with a valid connection",
"fullname": "test_when_calling_obj_is_connected_with_a_real_connection",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:4578].builtin_dummy is not connected to [Node:4578].title",
"context": "Then it passes",
"expected": "[Node:4578].builtin_dummy is not connected to [Node:4578].title",
"success": true
} ],
"context": "When calling asserts object is not connected with an invalid connection",
"fullname": "test_when_calling_obj_is_not_connected_with_an_invalid_connection",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:4618] is blocking signals",
"context": "Then it passes",
"expected": "[Node:4618] is blocking signals",
"success": true
} ],
"context": "When calling is blocking signals while blocking signals",
"fullname": "test_is_blocking_signals",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:4620] is not blocking signals",
"context": "Then it passes",
"expected": "[Node:4620] is not blocking signals",
"success": true
} ],
"context": "When calling is not blocking signals while not blocking signals",
"fullname": "test_is_not_blocking_signals",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:4578] does not have meta: confusing",
"context": "Then it passes",
"expected": "[Node:4578] does not have meta: confusing",
"success": true
} ],
"context": "When calling asserts.object_has_meta with real key but null val",
"fullname": "test_when_calling_does_not_have_meta_real_key_null_value_pair",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:4578] has user signal: dummy_signal",
"context": "Then it passes",
"expected": "[Node:4578] has user signal: dummy_signal",
"success": true
} ],
"context": "When calling obj_has_user_signal after adding a signal",
"fullname": "test_when_calling_has_user_signal_after_adding_a_signal",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:4578] does not have user signal: false_signal",
"context": "Then it passes",
"expected": "[Node:4578] does not have user signal: false_signal",
"success": true
} ],
"context": "When calling obj_does_not_have_user_signal with fake signal",
"fullname": "test_when_calling_does_not_have_user_signal",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:4578] does not have user signal: builtin_dummy",
"context": "Then it passes",
"expected": "[Node:4578] does not have user signal: builtin_dummy",
"success": true
} ],
"context": "When calling does not have user signal with class signal",
"fullname": "test_when_calling_does_not_have_user_signal_with_class_signal_constant",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:4578] has method: title",
"context": "Then it passes",
"expected": "[Node:4578] has method: title",
"success": true
} ],
"context": "When calling has_method('title')",
"fullname": "test_when_calling_has_method_title",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:4627] is not queued for deletion",
"context": "Then it passes",
"expected": "[Node:4627] is not queued for deletion",
"success": true
} ],
"context": "When calling asserts.object_is_not_for_queued_deletion after not calling queue free()",
"fullname": "test_when_calling_obj_is_not_for_queued_deletion_after_not_calling_queue_free",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 15,
"path": "res://tests/unit/object.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/object.test.gd",
"tags": [  ],
"test": ExtResource( 7 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 15
}, {
"context": "Given A Range Assertion",
"methods": [ {
"assertions": [ {
"actual": "10 is not in range(0, 10)",
"context": "Then it passes",
"expected": "10 is not in range(0, 10)",
"success": true
} ],
"context": "When calling is (10) not in range (in range(0, 10)",
"fullname": "test_when_calling_is_not_in_range",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "0 is in range(0, 10)",
"context": "Then it passes",
"expected": "0 is in range(0, 10)",
"success": true
} ],
"context": "When calling is (0) in range(0, 10)",
"fullname": "test_when_calling_is_in_range",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 2,
"path": "res://tests/unit/range.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/range.test.gd",
"tags": [  ],
"test": ExtResource( 15 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 2
}, {
"context": "Given a String Assertion",
"methods": [ {
"assertions": [ {
"actual": "lorem impsum ends with impsum",
"context": "Then it passes",
"expected": "lorem impsum ends with impsum",
"success": true
} ],
"context": "When calling asserts.string_ends_with('impsum', 'lorem impsum')",
"fullname": "test_when_calling_string_ends_with",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "impsum does not end with lorem",
"context": "Then it passes",
"expected": "impsum does not end with lorem",
"success": true
} ],
"context": "When calling asserts.string_does_not_end_with('lorem', 'impsum')",
"fullname": "test_when_calling_string_does_not_end_with",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "lorem impsum begins with lorem",
"context": "Then it passes",
"expected": "lorem impsum begins with lorem",
"success": true
} ],
"context": "When calling asserts.string_begins_with('lorem', 'lorem impsum')",
"fullname": "test_when_calling_string_begins_with",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "impsum does not contain beem im",
"context": "Then it passes",
"expected": "impsum does not contain beem im",
"success": true
} ],
"context": "When calling asserts.string_does_not_contain('em im', 'impsum')",
"fullname": "test_when_calling_string_does_not_contain",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "impsum does not begin with bleh lorem",
"context": "Then it passes",
"expected": "impsum does not begin with bleh lorem",
"success": true
} ],
"context": "When calling asserts.string_does_not_begin_with('lorem', 'impsum')",
"fullname": "test_when_calling_string_does_not_begin_with",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "lorem impsum contains em im",
"context": "Then it passes",
"expected": "lorem impsum contains em im",
"success": true
} ],
"context": "When calling asserts.string_contains('em im', 'lorem impsum')",
"fullname": "test_when_calling_string_contains",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 6,
"path": "res://tests/unit/string.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/string.test.gd",
"tags": [  ],
"test": ExtResource( 9 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 6
}, {
"context": "Dummy Test 2",
"methods": [ {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Passing!",
"expected": "|bool| True == true",
"success": true
} ],
"context": "This method passes",
"fullname": "test_this_method_passes",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 1,
"path": "res://tests/unit/suite.test.gd.DummyTwo",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/suite.test.gd.DummyTwo",
"tags": [  ],
"test": SubResource( 22 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 1
}, {
"context": "Dummy Passing Test",
"methods": [ {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Passing!",
"expected": "|bool| True == true",
"success": true
} ],
"context": "This method passes",
"fullname": "test_this_method_passes",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 1,
"path": "res://tests/unit/suite.test.gd.DummyOne",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/suite.test.gd.DummyOne",
"tags": [  ],
"test": SubResource( 21 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 1
}, {
"context": "Given a Test Script",
"methods": [ {
"assertions": [ {
"actual": "|bool| True == true",
"context": "if the test didn't break this works",
"expected": "|bool| True == true",
"success": true
} ],
"context": " we can omit describe",
"fullname": "test_we_can_omit_describe",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 10 is greater than |int| 1",
"context": "We get an array of multiple values back",
"expected": "|int| 10 is greater than |int| 1",
"success": true
}, {
"actual": "|int| 0 is not equal to |int| 9",
"context": "With different values",
"expected": "|int| 0 != |int| 9",
"success": true
}, {
"actual": "|int| 10 is greater than |int| 1",
"context": "And we can track multiple properties",
"expected": "|int| 10 is greater than |int| 1",
"success": true
} ],
"context": "When we record properties",
"fullname": "test_we_can_record_properties",
"passed": 3,
"success": true,
"time": 0.0,
"total": 3
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|int| 2 is equal to |int| 2",
"context": "",
"expected": "|int| 2 is equal to |int| 2",
"success": true
} ],
"context": " when we omit context we can see expected and got under method",
"fullname": "test_when_we_omit_context_we_can_see_expected_and_got_under_method",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
} ],
"passed": 3,
"path": "res://tests/unit/test.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/test.test.gd",
"tags": [  ],
"test": ExtResource( 19 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 3
}, {
"context": "Given a Signal Watcher",
"methods": [ {
"assertions": [ {
"actual": "signal: example was emitted from [Node:4646]",
"context": "Then it captures the emitted signal",
"expected": "signal: example was emitted from [Node:4646]",
"success": true
} ],
"context": "When we watch and emit a signal",
"fullname": "test_When_we_watch_and_emit_a_signal",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Signal: example was emitted from [Node:4646] with arguments: [1, 20, 5]",
"context": "Then it captures any arguments that where passed when the signal was emitted",
"expected": "Signal: example was emitted from [Node:4646] with arguments: [1, 20, 5]",
"success": true
} ],
"context": "When we watch a signal from an object with no bound variables",
"fullname": "test_When_we_watch_a_signal_from_an_object_with_no_bound_variables",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Signal: example was not emitted from [Node:4646]",
"context": "Then it does not capture the non-emitted signal",
"expected": "Signal: example was not emitted from [Node:4646]",
"success": true
} ],
"context": "When we watch and do not emit a signal",
"fullname": "test_When_we_watch_and_do_not_emit_a_signal",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "signal: multiple was emitted from [Node:4646] 2",
"context": "Then we can track how many times we emitted it",
"expected": "signal: multiple was emitted from [Node:4646] 2",
"success": true
} ],
"context": "When we watch and signal and emit it multiple times",
"fullname": "test_When_we_watch_a_signal_and_emit_it_multiple_times",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 4,
"path": "res://tests/unit/watcher.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/watcher.test.gd",
"tags": [  ],
"test": ExtResource( 17 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 4
}, {
"context": "Given a Boolean Assertion",
"methods": [ {
"assertions": [ {
"actual": "|bool| True != false",
"context": "",
"expected": "|bool| True == false",
"success": false
} ],
"context": " intentional failure",
"fullname": "test_intentional_failure",
"passed": 0,
"success": false,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then it passes",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When calling asserts.is_true(true)",
"fullname": "test_when_calling_asserts_is_true",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| False == false",
"context": "Then it passes",
"expected": "|bool| False == false",
"success": true
} ],
"context": "When calling asserts.is_false(false)",
"fullname": "test_when_calling_asserts_is_false",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 2,
"path": "res://tests/integration/boolean.test.gd",
"source": {
"containers": [ "res://tests/integration", "res://tests" ],
"method": "",
"path": "res://tests/integration/boolean.test.gd",
"tags": [  ],
"test": ExtResource( 20 ),
"yield_time": 0.0
},
"success": false,
"time_taken": 0.0,
"total": 3
}, {
"context": "Default Args",
"methods": [ {
"assertions": [ {
"actual": "|bool| True == true",
"context": "If this method can be reached then we have doubled a script with default argument(s) properly!",
"expected": "|bool| True == true",
"success": true
} ],
"context": " default arguments of interpolate property",
"fullname": "test_default_arguments_of_interpolate_property",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 1,
"path": "res://tests/integration/default_args.test.gd",
"source": {
"containers": [ "res://tests/integration", "res://tests" ],
"method": "",
"path": "res://tests/integration/default_args.test.gd",
"tags": [  ],
"test": ExtResource( 10 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 1
}, {
"context": "Given is_on_floor",
"methods": [ {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then it can be stubbed",
"expected": "|bool| True == true",
"success": true
} ],
"context": "From a built-in KinematicBody2D2",
"fullname": "test_stubbing_is_on_floor_method_from_builtin_class2",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then it can be stubbed",
"expected": "|bool| True == true",
"success": true
} ],
"context": "From a child node of a scene without scripts",
"fullname": "test_stubbing_is_on_floor_as_child_node_with_no_script",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then it can be stubbed",
"expected": "|bool| True == true",
"success": true
} ],
"context": "From a user-defined script",
"fullname": "test_stubbing_is_on_floor_method_from_user_defined_class",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 3,
"path": "res://tests/integration/on_floor.test.gd",
"source": {
"containers": [ "res://tests/integration", "res://tests" ],
"method": "",
"path": "res://tests/integration/on_floor.test.gd",
"tags": [  ],
"test": ExtResource( 5 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 3
}, {
"context": "Given a Scene Director",
"methods": [ {
"assertions": [ {
"actual": "|Dictionary| {.:[Reference:4729], A:[Reference:4730], A/B:[Reference:4732], C:[Reference:4731], C/D:[Reference:4733]} is not equal to |Dictionary| {.:[Reference:4743], A:[Reference:4744], A/B:[Reference:4746], C:[Reference:4745], C/D:[Reference:4747]}",
"context": "Then they do not share resources",
"expected": "|Dictionary| {.:[Reference:4729], A:[Reference:4730], A/B:[Reference:4732], C:[Reference:4731], C/D:[Reference:4733]} != |Dictionary| {.:[Reference:4743], A:[Reference:4744], A/B:[Reference:4746], C:[Reference:4745], C/D:[Reference:4747]}",
"success": true
} ],
"context": "When we create two of it for the same scene",
"fullname": "test_When_we_create_two_of_it_for_the_same_scene",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 999 is equal to |int| 999",
"context": "Then we get the stubbed return value",
"expected": "|int| 999 is equal to |int| 999",
"success": true
} ],
"context": "When we call a method from a child node that we stubbed",
"fullname": "test_When_we_call_a_method_from_a_child_node_that_we_stubbed",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 9999 is equal to |int| 9999",
"context": "Then we get the stubbed return value",
"expected": "|int| 9999 is equal to |int| 9999",
"success": true
} ],
"context": "When we call a method from the root node that we stubbed",
"fullname": "test_When_we_call_a_method_from_the_root_node_that_we_stubbed",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 99 is equal to |int| 99",
"context": "Then we get the stubbed return value",
"expected": "|int| 99 is equal to |int| 99",
"success": true
} ],
"context": "When we call a method from a grandchild node that we stubbed",
"fullname": "test_When_we_call_a_method_from_a_grandchild_node_that_we_stubbed",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|NodePath| A is equal to |NodePath| A",
"context": "We have the correct NodePath Set",
"expected": "|NodePath| A is equal to |NodePath| A",
"success": true
} ],
"context": "When we add it to the tree it runs",
"fullname": "test_When_we_add_it_to_the_tree_it_runs",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 5,
"path": "res://tests/integration/scene_director.test.gd",
"source": {
"containers": [ "res://tests/integration", "res://tests" ],
"method": "",
"path": "res://tests/integration/scene_director.test.gd",
"tags": [  ],
"test": ExtResource( 4 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 5
}, {
"context": "Given a Script Director",
"methods": [ {
"assertions": [ {
"actual": "[Reference:4890] is instance of class: [GDScript:1453]",
"context": "Then we get that inner class back",
"expected": "[Reference:4890] is instance of class: [GDScript:1453]",
"success": true
} ],
"context": "When we double an inner class",
"fullname": "test_When_we_double_an_inner_class",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|Dictionary| {_enter_tree:{arguments:, default_arguments:}, _exit_tree:{arguments:, default_arguments:}, _get:{arguments:a, default_arguments:a}, _get_configuration_warning:{arguments:, default_arguments:}, _get_editor_description:{arguments:, default_arguments:}, _get_import_path:{arguments:, default_arguments:}, _get_property_list:{arguments:, default_arguments:}, _init:{arguments:, default_arguments:}, _input:{arguments:a, default_arguments:a}, _notification:{arguments:a, default_arguments:a}, _physics_process:{arguments:a, default_arguments:a}, _process:{arguments:a, default_arguments:a}, _ready:{arguments:, default_arguments:}, _set:{arguments:a, b, default_arguments:a, b}, _set_editor_description:{arguments:a, default_arguments:a}, _set_import_path:{arguments:a, default_arguments:a}, _to_string:{arguments:, default_arguments:}, _unhandled_input:{arguments:a, default_arguments:a}, _unhandled_key_input:{arguments:a, default_arguments:a}, add:{arguments:a, b, default_arguments:a, b}, add_child:{arguments:a, b, default_arguments:a, b = False}, add_child_below_node:{arguments:a, b, c, default_arguments:a, b, c = False}, add_to_group:{arguments:a, b, default_arguments:a, b = False}, add_user_signal:{arguments:a, b, default_arguments:a, b = []}, call:{arguments:a, default_arguments:a}, call_deferred:{arguments:a, default_arguments:a}, callv:{arguments:a, b, default_arguments:a, b}, can_process:{arguments:, default_arguments:}, can_translate_messages:{arguments:, default_arguments:}, connect:{arguments:a, b, c, d, e, default_arguments:a, b, c, d = [], e = 0}, disconnect:{arguments:a, b, c, default_arguments:a, b, c}, divide:{arguments:a, b, default_arguments:a, b}, duplicate:{arguments:a, default_arguments:a = 15}, emit_signal:{arguments:a, default_arguments:a}, find_node:{arguments:a, b, c, default_arguments:a, b = True, c = True}, find_parent:{arguments:a, default_arguments:a}, free:{arguments:, default_arguments:}, get:{arguments:a, default_arguments:a}, get_child:{arguments:a, default_arguments:a}, get_child_count:{arguments:, default_arguments:}, get_children:{arguments:, default_arguments:}, get_class:{arguments:, default_arguments:}, get_custom_multiplayer:{arguments:, default_arguments:}, get_filename:{arguments:, default_arguments:}, get_groups:{arguments:, default_arguments:}, get_incoming_connections:{arguments:, default_arguments:}, get_index:{arguments:, default_arguments:}, get_indexed:{arguments:a, default_arguments:a}, get_instance_id:{arguments:, default_arguments:}, get_meta:{arguments:a, default_arguments:a}, get_meta_list:{arguments:, default_arguments:}, get_method_list:{arguments:, default_arguments:}, get_multiplayer:{arguments:, default_arguments:}, get_name:{arguments:, default_arguments:}, get_network_master:{arguments:, default_arguments:}, get_node:{arguments:a, default_arguments:a}, get_node_and_resource:{arguments:a, default_arguments:a}, get_node_or_null:{arguments:a, default_arguments:a}, get_owner:{arguments:, default_arguments:}, get_parent:{arguments:, default_arguments:}, get_path:{arguments:, default_arguments:}, get_path_to:{arguments:a, default_arguments:a}, get_pause_mode:{arguments:, default_arguments:}, get_physics_process_delta_time:{arguments:, default_arguments:}, get_position_in_parent:{arguments:, default_arguments:}, get_process_delta_time:{arguments:, default_arguments:}, get_process_priority:{arguments:, default_arguments:}, get_property_list:{arguments:, default_arguments:}, get_scene_instance_load_placeholder:{arguments:, default_arguments:}, get_script:{arguments:, default_arguments:}, get_signal_connection_list:{arguments:a, default_arguments:a}, get_signal_list:{arguments:, default_arguments:}, get_tree:{arguments:, default_arguments:}, get_viewport:{arguments:, default_arguments:}, has_meta:{arguments:a, default_arguments:a}, has_method:{arguments:a, default_arguments:a}, has_node:{arguments:a, default_arguments:a}, has_node_and_resource:{arguments:a, default_arguments:a}, has_signal:{arguments:a, default_arguments:a}, has_user_signal:{arguments:a, default_arguments:a}, is_a_parent_of:{arguments:a, default_arguments:a}, is_blocking_signals:{arguments:, default_arguments:}, is_class:{arguments:a, default_arguments:a}, is_connected:{arguments:a, b, c, default_arguments:a, b, c}, is_displayed_folded:{arguments:, default_arguments:}, is_greater_than:{arguments:a, default_arguments:a}, is_in_group:{arguments:a, default_arguments:a}, is_inside_tree:{arguments:, default_arguments:}, is_network_master:{arguments:, default_arguments:}, is_physics_processing:{arguments:, default_arguments:}, is_physics_processing_internal:{arguments:, default_arguments:}, is_processing:{arguments:, default_arguments:}, is_processing_input:{arguments:, default_arguments:}, is_processing_internal:{arguments:, default_arguments:}, is_processing_unhandled_input:{arguments:, default_arguments:}, is_processing_unhandled_key_input:{arguments:, default_arguments:}, is_queued_for_deletion:{arguments:, default_arguments:}, math_fight:{arguments:, default_arguments:}, move_child:{arguments:a, b, default_arguments:a, b}, multiply:{arguments:a, b, default_arguments:a, b}, notification:{arguments:a, b, default_arguments:a, b = False}, pi:{arguments:, default_arguments:}, print_stray_nodes:{arguments:, default_arguments:}, print_tree:{arguments:, default_arguments:}, print_tree_pretty:{arguments:, default_arguments:}, propagate_call:{arguments:a, b, c, default_arguments:a, b = [], c = False}, propagate_notification:{arguments:a, default_arguments:a}, property_list_changed_notify:{arguments:, default_arguments:}, queue_free:{arguments:, default_arguments:}, raise:{arguments:, default_arguments:}, remove_and_skip:{arguments:, default_arguments:}, remove_child:{arguments:a, default_arguments:a}, remove_from_group:{arguments:a, default_arguments:a}, remove_meta:{arguments:a, default_arguments:a}, replace_by:{arguments:a, b, default_arguments:a, b = False}, request_ready:{arguments:, default_arguments:}, rpc:{arguments:a, default_arguments:a}, rpc_config:{arguments:a, b, default_arguments:a, b}, rpc_id:{arguments:a, b, default_arguments:a, b}, rpc_unreliable:{arguments:a, default_arguments:a}, rpc_unreliable_id:{arguments:a, b, default_arguments:a, b}, rset:{arguments:a, b, default_arguments:a, b}, rset_config:{arguments:a, b, default_arguments:a, b}, rset_id:{arguments:a, b, c, default_arguments:a, b, c}, rset_unreliable:{arguments:a, b, default_arguments:a, b}, rset_unreliable_id:{arguments:a, b, c, default_arguments:a, b, c}, set:{arguments:a, b, default_arguments:a, b}, set_block_signals:{arguments:a, default_arguments:a}, set_custom_multiplayer:{arguments:a, default_arguments:a}, set_deferred:{arguments:a, b, default_arguments:a, b}, set_display_folded:{arguments:a, default_arguments:a}, set_filename:{arguments:a, default_arguments:a}, set_indexed:{arguments:a, b, default_arguments:a, b}, set_message_translation:{arguments:a, default_arguments:a}, set_meta:{arguments:a, b, default_arguments:a, b}, set_name:{arguments:a, default_arguments:a}, set_network_master:{arguments:a, b, default_arguments:a, b = True}, set_owner:{arguments:a, default_arguments:a}, set_pause_mode:{arguments:a, default_arguments:a}, set_physics_process:{arguments:a, default_arguments:a}, set_physics_process_internal:{arguments:a, default_arguments:a}, set_process:{arguments:a, default_arguments:a}, set_process_input:{arguments:a, default_arguments:a}, set_process_internal:{arguments:a, default_arguments:a}, set_process_priority:{arguments:a, default_arguments:a}, set_process_unhandled_input:{arguments:a, default_arguments:a}, set_process_unhandled_key_input:{arguments:a, default_arguments:a}, set_scene_instance_load_placeholder:{arguments:a, default_arguments:a}, set_script:{arguments:a, default_arguments:a}, subtract:{arguments:a, b, default_arguments:a, b}, sum:{arguments:a, default_arguments:a}, to_string:{arguments:, default_arguments:}, tr:{arguments:a, default_arguments:a}, update_configuration_warning:{arguments:, default_arguments:}} is not equal to |Dictionary| {_enter_tree:{arguments:, default_arguments:}, _exit_tree:{arguments:, default_arguments:}, _get:{arguments:a, default_arguments:a}, _get_configuration_warning:{arguments:, default_arguments:}, _get_editor_description:{arguments:, default_arguments:}, _get_import_path:{arguments:, default_arguments:}, _get_property_list:{arguments:, default_arguments:}, _init:{arguments:, default_arguments:}, _input:{arguments:a, default_arguments:a}, _notification:{arguments:a, default_arguments:a}, _physics_process:{arguments:a, default_arguments:a}, _process:{arguments:a, default_arguments:a}, _ready:{arguments:, default_arguments:}, _set:{arguments:a, b, default_arguments:a, b}, _set_editor_description:{arguments:a, default_arguments:a}, _set_import_path:{arguments:a, default_arguments:a}, _to_string:{arguments:, default_arguments:}, _unhandled_input:{arguments:a, default_arguments:a}, _unhandled_key_input:{arguments:a, default_arguments:a}, add:{arguments:a, b, default_arguments:a, b}, add_child:{arguments:a, b, default_arguments:a, b = False}, add_child_below_node:{arguments:a, b, c, default_arguments:a, b, c = False}, add_to_group:{arguments:a, b, default_arguments:a, b = False}, add_user_signal:{arguments:a, b, default_arguments:a, b = []}, call:{arguments:a, default_arguments:a}, call_deferred:{arguments:a, default_arguments:a}, callv:{arguments:a, b, default_arguments:a, b}, can_process:{arguments:, default_arguments:}, can_translate_messages:{arguments:, default_arguments:}, connect:{arguments:a, b, c, d, e, default_arguments:a, b, c, d = [], e = 0}, disconnect:{arguments:a, b, c, default_arguments:a, b, c}, divide:{arguments:a, b, default_arguments:a, b}, duplicate:{arguments:a, default_arguments:a = 15}, emit_signal:{arguments:a, default_arguments:a}, find_node:{arguments:a, b, c, default_arguments:a, b = True, c = True}, find_parent:{arguments:a, default_arguments:a}, free:{arguments:, default_arguments:}, get:{arguments:a, default_arguments:a}, get_child:{arguments:a, default_arguments:a}, get_child_count:{arguments:, default_arguments:}, get_children:{arguments:, default_arguments:}, get_class:{arguments:, default_arguments:}, get_custom_multiplayer:{arguments:, default_arguments:}, get_filename:{arguments:, default_arguments:}, get_groups:{arguments:, default_arguments:}, get_incoming_connections:{arguments:, default_arguments:}, get_index:{arguments:, default_arguments:}, get_indexed:{arguments:a, default_arguments:a}, get_instance_id:{arguments:, default_arguments:}, get_meta:{arguments:a, default_arguments:a}, get_meta_list:{arguments:, default_arguments:}, get_method_list:{arguments:, default_arguments:}, get_multiplayer:{arguments:, default_arguments:}, get_name:{arguments:, default_arguments:}, get_network_master:{arguments:, default_arguments:}, get_node:{arguments:a, default_arguments:a}, get_node_and_resource:{arguments:a, default_arguments:a}, get_node_or_null:{arguments:a, default_arguments:a}, get_owner:{arguments:, default_arguments:}, get_parent:{arguments:, default_arguments:}, get_path:{arguments:, default_arguments:}, get_path_to:{arguments:a, default_arguments:a}, get_pause_mode:{arguments:, default_arguments:}, get_physics_process_delta_time:{arguments:, default_arguments:}, get_position_in_parent:{arguments:, default_arguments:}, get_process_delta_time:{arguments:, default_arguments:}, get_process_priority:{arguments:, default_arguments:}, get_property_list:{arguments:, default_arguments:}, get_scene_instance_load_placeholder:{arguments:, default_arguments:}, get_script:{arguments:, default_arguments:}, get_signal_connection_list:{arguments:a, default_arguments:a}, get_signal_list:{arguments:, default_arguments:}, get_tree:{arguments:, default_arguments:}, get_viewport:{arguments:, default_arguments:}, has_meta:{arguments:a, default_arguments:a}, has_method:{arguments:a, default_arguments:a}, has_node:{arguments:a, default_arguments:a}, has_node_and_resource:{arguments:a, default_arguments:a}, has_signal:{arguments:a, default_arguments:a}, has_user_signal:{arguments:a, default_arguments:a}, is_a_parent_of:{arguments:a, default_arguments:a}, is_blocking_signals:{arguments:, default_arguments:}, is_class:{arguments:a, default_arguments:a}, is_connected:{arguments:a, b, c, default_arguments:a, b, c}, is_displayed_folded:{arguments:, default_arguments:}, is_greater_than:{arguments:a, default_arguments:a}, is_in_group:{arguments:a, default_arguments:a}, is_inside_tree:{arguments:, default_arguments:}, is_network_master:{arguments:, default_arguments:}, is_physics_processing:{arguments:, default_arguments:}, is_physics_processing_internal:{arguments:, default_arguments:}, is_processing:{arguments:, default_arguments:}, is_processing_input:{arguments:, default_arguments:}, is_processing_internal:{arguments:, default_arguments:}, is_processing_unhandled_input:{arguments:, default_arguments:}, is_processing_unhandled_key_input:{arguments:, default_arguments:}, is_queued_for_deletion:{arguments:, default_arguments:}, math_fight:{arguments:, default_arguments:}, move_child:{arguments:a, b, default_arguments:a, b}, multiply:{arguments:a, b, default_arguments:a, b}, notification:{arguments:a, b, default_arguments:a, b = False}, pi:{arguments:, default_arguments:}, print_stray_nodes:{arguments:, default_arguments:}, print_tree:{arguments:, default_arguments:}, print_tree_pretty:{arguments:, default_arguments:}, propagate_call:{arguments:a, b, c, default_arguments:a, b = [], c = False}, propagate_notification:{arguments:a, default_arguments:a}, property_list_changed_notify:{arguments:, default_arguments:}, queue_free:{arguments:, default_arguments:}, raise:{arguments:, default_arguments:}, remove_and_skip:{arguments:, default_arguments:}, remove_child:{arguments:a, default_arguments:a}, remove_from_group:{arguments:a, default_arguments:a}, remove_meta:{arguments:a, default_arguments:a}, replace_by:{arguments:a, b, default_arguments:a, b = False}, request_ready:{arguments:, default_arguments:}, rpc:{arguments:a, default_arguments:a}, rpc_config:{arguments:a, b, default_arguments:a, b}, rpc_id:{arguments:a, b, default_arguments:a, b}, rpc_unreliable:{arguments:a, default_arguments:a}, rpc_unreliable_id:{arguments:a, b, default_arguments:a, b}, rset:{arguments:a, b, default_arguments:a, b}, rset_config:{arguments:a, b, default_arguments:a, b}, rset_id:{arguments:a, b, c, default_arguments:a, b, c}, rset_unreliable:{arguments:a, b, default_arguments:a, b}, rset_unreliable_id:{arguments:a, b, c, default_arguments:a, b, c}, set:{arguments:a, b, default_arguments:a, b}, set_block_signals:{arguments:a, default_arguments:a}, set_custom_multiplayer:{arguments:a, default_arguments:a}, set_deferred:{arguments:a, b, default_arguments:a, b}, set_display_folded:{arguments:a, default_arguments:a}, set_filename:{arguments:a, default_arguments:a}, set_indexed:{arguments:a, b, default_arguments:a, b}, set_message_translation:{arguments:a, default_arguments:a}, set_meta:{arguments:a, b, default_arguments:a, b}, set_name:{arguments:a, default_arguments:a}, set_network_master:{arguments:a, b, default_arguments:a, b = True}, set_owner:{arguments:a, default_arguments:a}, set_pause_mode:{arguments:a, default_arguments:a}, set_physics_process:{arguments:a, default_arguments:a}, set_physics_process_internal:{arguments:a, default_arguments:a}, set_process:{arguments:a, default_arguments:a}, set_process_input:{arguments:a, default_arguments:a}, set_process_internal:{arguments:a, default_arguments:a}, set_process_priority:{arguments:a, default_arguments:a}, set_process_unhandled_input:{arguments:a, default_arguments:a}, set_process_unhandled_key_input:{arguments:a, default_arguments:a}, set_scene_instance_load_placeholder:{arguments:a, default_arguments:a}, set_script:{arguments:a, default_arguments:a}, subtract:{arguments:a, b, default_arguments:a, b}, sum:{arguments:a, default_arguments:a}, to_string:{arguments:, default_arguments:}, tr:{arguments:a, default_arguments:a}, update_configuration_warning:{arguments:, default_arguments:}}",
"context": "Then they do not share resources",
"expected": "|Dictionary| {_enter_tree:{arguments:, default_arguments:}, _exit_tree:{arguments:, default_arguments:}, _get:{arguments:a, default_arguments:a}, _get_configuration_warning:{arguments:, default_arguments:}, _get_editor_description:{arguments:, default_arguments:}, _get_import_path:{arguments:, default_arguments:}, _get_property_list:{arguments:, default_arguments:}, _init:{arguments:, default_arguments:}, _input:{arguments:a, default_arguments:a}, _notification:{arguments:a, default_arguments:a}, _physics_process:{arguments:a, default_arguments:a}, _process:{arguments:a, default_arguments:a}, _ready:{arguments:, default_arguments:}, _set:{arguments:a, b, default_arguments:a, b}, _set_editor_description:{arguments:a, default_arguments:a}, _set_import_path:{arguments:a, default_arguments:a}, _to_string:{arguments:, default_arguments:}, _unhandled_input:{arguments:a, default_arguments:a}, _unhandled_key_input:{arguments:a, default_arguments:a}, add:{arguments:a, b, default_arguments:a, b}, add_child:{arguments:a, b, default_arguments:a, b = False}, add_child_below_node:{arguments:a, b, c, default_arguments:a, b, c = False}, add_to_group:{arguments:a, b, default_arguments:a, b = False}, add_user_signal:{arguments:a, b, default_arguments:a, b = []}, call:{arguments:a, default_arguments:a}, call_deferred:{arguments:a, default_arguments:a}, callv:{arguments:a, b, default_arguments:a, b}, can_process:{arguments:, default_arguments:}, can_translate_messages:{arguments:, default_arguments:}, connect:{arguments:a, b, c, d, e, default_arguments:a, b, c, d = [], e = 0}, disconnect:{arguments:a, b, c, default_arguments:a, b, c}, divide:{arguments:a, b, default_arguments:a, b}, duplicate:{arguments:a, default_arguments:a = 15}, emit_signal:{arguments:a, default_arguments:a}, find_node:{arguments:a, b, c, default_arguments:a, b = True, c = True}, find_parent:{arguments:a, default_arguments:a}, free:{arguments:, default_arguments:}, get:{arguments:a, default_arguments:a}, get_child:{arguments:a, default_arguments:a}, get_child_count:{arguments:, default_arguments:}, get_children:{arguments:, default_arguments:}, get_class:{arguments:, default_arguments:}, get_custom_multiplayer:{arguments:, default_arguments:}, get_filename:{arguments:, default_arguments:}, get_groups:{arguments:, default_arguments:}, get_incoming_connections:{arguments:, default_arguments:}, get_index:{arguments:, default_arguments:}, get_indexed:{arguments:a, default_arguments:a}, get_instance_id:{arguments:, default_arguments:}, get_meta:{arguments:a, default_arguments:a}, get_meta_list:{arguments:, default_arguments:}, get_method_list:{arguments:, default_arguments:}, get_multiplayer:{arguments:, default_arguments:}, get_name:{arguments:, default_arguments:}, get_network_master:{arguments:, default_arguments:}, get_node:{arguments:a, default_arguments:a}, get_node_and_resource:{arguments:a, default_arguments:a}, get_node_or_null:{arguments:a, default_arguments:a}, get_owner:{arguments:, default_arguments:}, get_parent:{arguments:, default_arguments:}, get_path:{arguments:, default_arguments:}, get_path_to:{arguments:a, default_arguments:a}, get_pause_mode:{arguments:, default_arguments:}, get_physics_process_delta_time:{arguments:, default_arguments:}, get_position_in_parent:{arguments:, default_arguments:}, get_process_delta_time:{arguments:, default_arguments:}, get_process_priority:{arguments:, default_arguments:}, get_property_list:{arguments:, default_arguments:}, get_scene_instance_load_placeholder:{arguments:, default_arguments:}, get_script:{arguments:, default_arguments:}, get_signal_connection_list:{arguments:a, default_arguments:a}, get_signal_list:{arguments:, default_arguments:}, get_tree:{arguments:, default_arguments:}, get_viewport:{arguments:, default_arguments:}, has_meta:{arguments:a, default_arguments:a}, has_method:{arguments:a, default_arguments:a}, has_node:{arguments:a, default_arguments:a}, has_node_and_resource:{arguments:a, default_arguments:a}, has_signal:{arguments:a, default_arguments:a}, has_user_signal:{arguments:a, default_arguments:a}, is_a_parent_of:{arguments:a, default_arguments:a}, is_blocking_signals:{arguments:, default_arguments:}, is_class:{arguments:a, default_arguments:a}, is_connected:{arguments:a, b, c, default_arguments:a, b, c}, is_displayed_folded:{arguments:, default_arguments:}, is_greater_than:{arguments:a, default_arguments:a}, is_in_group:{arguments:a, default_arguments:a}, is_inside_tree:{arguments:, default_arguments:}, is_network_master:{arguments:, default_arguments:}, is_physics_processing:{arguments:, default_arguments:}, is_physics_processing_internal:{arguments:, default_arguments:}, is_processing:{arguments:, default_arguments:}, is_processing_input:{arguments:, default_arguments:}, is_processing_internal:{arguments:, default_arguments:}, is_processing_unhandled_input:{arguments:, default_arguments:}, is_processing_unhandled_key_input:{arguments:, default_arguments:}, is_queued_for_deletion:{arguments:, default_arguments:}, math_fight:{arguments:, default_arguments:}, move_child:{arguments:a, b, default_arguments:a, b}, multiply:{arguments:a, b, default_arguments:a, b}, notification:{arguments:a, b, default_arguments:a, b = False}, pi:{arguments:, default_arguments:}, print_stray_nodes:{arguments:, default_arguments:}, print_tree:{arguments:, default_arguments:}, print_tree_pretty:{arguments:, default_arguments:}, propagate_call:{arguments:a, b, c, default_arguments:a, b = [], c = False}, propagate_notification:{arguments:a, default_arguments:a}, property_list_changed_notify:{arguments:, default_arguments:}, queue_free:{arguments:, default_arguments:}, raise:{arguments:, default_arguments:}, remove_and_skip:{arguments:, default_arguments:}, remove_child:{arguments:a, default_arguments:a}, remove_from_group:{arguments:a, default_arguments:a}, remove_meta:{arguments:a, default_arguments:a}, replace_by:{arguments:a, b, default_arguments:a, b = False}, request_ready:{arguments:, default_arguments:}, rpc:{arguments:a, default_arguments:a}, rpc_config:{arguments:a, b, default_arguments:a, b}, rpc_id:{arguments:a, b, default_arguments:a, b}, rpc_unreliable:{arguments:a, default_arguments:a}, rpc_unreliable_id:{arguments:a, b, default_arguments:a, b}, rset:{arguments:a, b, default_arguments:a, b}, rset_config:{arguments:a, b, default_arguments:a, b}, rset_id:{arguments:a, b, c, default_arguments:a, b, c}, rset_unreliable:{arguments:a, b, default_arguments:a, b}, rset_unreliable_id:{arguments:a, b, c, default_arguments:a, b, c}, set:{arguments:a, b, default_arguments:a, b}, set_block_signals:{arguments:a, default_arguments:a}, set_custom_multiplayer:{arguments:a, default_arguments:a}, set_deferred:{arguments:a, b, default_arguments:a, b}, set_display_folded:{arguments:a, default_arguments:a}, set_filename:{arguments:a, default_arguments:a}, set_indexed:{arguments:a, b, default_arguments:a, b}, set_message_translation:{arguments:a, default_arguments:a}, set_meta:{arguments:a, b, default_arguments:a, b}, set_name:{arguments:a, default_arguments:a}, set_network_master:{arguments:a, b, default_arguments:a, b = True}, set_owner:{arguments:a, default_arguments:a}, set_pause_mode:{arguments:a, default_arguments:a}, set_physics_process:{arguments:a, default_arguments:a}, set_physics_process_internal:{arguments:a, default_arguments:a}, set_process:{arguments:a, default_arguments:a}, set_process_input:{arguments:a, default_arguments:a}, set_process_internal:{arguments:a, default_arguments:a}, set_process_priority:{arguments:a, default_arguments:a}, set_process_unhandled_input:{arguments:a, default_arguments:a}, set_process_unhandled_key_input:{arguments:a, default_arguments:a}, set_scene_instance_load_placeholder:{arguments:a, default_arguments:a}, set_script:{arguments:a, default_arguments:a}, subtract:{arguments:a, b, default_arguments:a, b}, sum:{arguments:a, default_arguments:a}, to_string:{arguments:, default_arguments:}, tr:{arguments:a, default_arguments:a}, update_configuration_warning:{arguments:, default_arguments:}} != |Dictionary| {_enter_tree:{arguments:, default_arguments:}, _exit_tree:{arguments:, default_arguments:}, _get:{arguments:a, default_arguments:a}, _get_configuration_warning:{arguments:, default_arguments:}, _get_editor_description:{arguments:, default_arguments:}, _get_import_path:{arguments:, default_arguments:}, _get_property_list:{arguments:, default_arguments:}, _init:{arguments:, default_arguments:}, _input:{arguments:a, default_arguments:a}, _notification:{arguments:a, default_arguments:a}, _physics_process:{arguments:a, default_arguments:a}, _process:{arguments:a, default_arguments:a}, _ready:{arguments:, default_arguments:}, _set:{arguments:a, b, default_arguments:a, b}, _set_editor_description:{arguments:a, default_arguments:a}, _set_import_path:{arguments:a, default_arguments:a}, _to_string:{arguments:, default_arguments:}, _unhandled_input:{arguments:a, default_arguments:a}, _unhandled_key_input:{arguments:a, default_arguments:a}, add:{arguments:a, b, default_arguments:a, b}, add_child:{arguments:a, b, default_arguments:a, b = False}, add_child_below_node:{arguments:a, b, c, default_arguments:a, b, c = False}, add_to_group:{arguments:a, b, default_arguments:a, b = False}, add_user_signal:{arguments:a, b, default_arguments:a, b = []}, call:{arguments:a, default_arguments:a}, call_deferred:{arguments:a, default_arguments:a}, callv:{arguments:a, b, default_arguments:a, b}, can_process:{arguments:, default_arguments:}, can_translate_messages:{arguments:, default_arguments:}, connect:{arguments:a, b, c, d, e, default_arguments:a, b, c, d = [], e = 0}, disconnect:{arguments:a, b, c, default_arguments:a, b, c}, divide:{arguments:a, b, default_arguments:a, b}, duplicate:{arguments:a, default_arguments:a = 15}, emit_signal:{arguments:a, default_arguments:a}, find_node:{arguments:a, b, c, default_arguments:a, b = True, c = True}, find_parent:{arguments:a, default_arguments:a}, free:{arguments:, default_arguments:}, get:{arguments:a, default_arguments:a}, get_child:{arguments:a, default_arguments:a}, get_child_count:{arguments:, default_arguments:}, get_children:{arguments:, default_arguments:}, get_class:{arguments:, default_arguments:}, get_custom_multiplayer:{arguments:, default_arguments:}, get_filename:{arguments:, default_arguments:}, get_groups:{arguments:, default_arguments:}, get_incoming_connections:{arguments:, default_arguments:}, get_index:{arguments:, default_arguments:}, get_indexed:{arguments:a, default_arguments:a}, get_instance_id:{arguments:, default_arguments:}, get_meta:{arguments:a, default_arguments:a}, get_meta_list:{arguments:, default_arguments:}, get_method_list:{arguments:, default_arguments:}, get_multiplayer:{arguments:, default_arguments:}, get_name:{arguments:, default_arguments:}, get_network_master:{arguments:, default_arguments:}, get_node:{arguments:a, default_arguments:a}, get_node_and_resource:{arguments:a, default_arguments:a}, get_node_or_null:{arguments:a, default_arguments:a}, get_owner:{arguments:, default_arguments:}, get_parent:{arguments:, default_arguments:}, get_path:{arguments:, default_arguments:}, get_path_to:{arguments:a, default_arguments:a}, get_pause_mode:{arguments:, default_arguments:}, get_physics_process_delta_time:{arguments:, default_arguments:}, get_position_in_parent:{arguments:, default_arguments:}, get_process_delta_time:{arguments:, default_arguments:}, get_process_priority:{arguments:, default_arguments:}, get_property_list:{arguments:, default_arguments:}, get_scene_instance_load_placeholder:{arguments:, default_arguments:}, get_script:{arguments:, default_arguments:}, get_signal_connection_list:{arguments:a, default_arguments:a}, get_signal_list:{arguments:, default_arguments:}, get_tree:{arguments:, default_arguments:}, get_viewport:{arguments:, default_arguments:}, has_meta:{arguments:a, default_arguments:a}, has_method:{arguments:a, default_arguments:a}, has_node:{arguments:a, default_arguments:a}, has_node_and_resource:{arguments:a, default_arguments:a}, has_signal:{arguments:a, default_arguments:a}, has_user_signal:{arguments:a, default_arguments:a}, is_a_parent_of:{arguments:a, default_arguments:a}, is_blocking_signals:{arguments:, default_arguments:}, is_class:{arguments:a, default_arguments:a}, is_connected:{arguments:a, b, c, default_arguments:a, b, c}, is_displayed_folded:{arguments:, default_arguments:}, is_greater_than:{arguments:a, default_arguments:a}, is_in_group:{arguments:a, default_arguments:a}, is_inside_tree:{arguments:, default_arguments:}, is_network_master:{arguments:, default_arguments:}, is_physics_processing:{arguments:, default_arguments:}, is_physics_processing_internal:{arguments:, default_arguments:}, is_processing:{arguments:, default_arguments:}, is_processing_input:{arguments:, default_arguments:}, is_processing_internal:{arguments:, default_arguments:}, is_processing_unhandled_input:{arguments:, default_arguments:}, is_processing_unhandled_key_input:{arguments:, default_arguments:}, is_queued_for_deletion:{arguments:, default_arguments:}, math_fight:{arguments:, default_arguments:}, move_child:{arguments:a, b, default_arguments:a, b}, multiply:{arguments:a, b, default_arguments:a, b}, notification:{arguments:a, b, default_arguments:a, b = False}, pi:{arguments:, default_arguments:}, print_stray_nodes:{arguments:, default_arguments:}, print_tree:{arguments:, default_arguments:}, print_tree_pretty:{arguments:, default_arguments:}, propagate_call:{arguments:a, b, c, default_arguments:a, b = [], c = False}, propagate_notification:{arguments:a, default_arguments:a}, property_list_changed_notify:{arguments:, default_arguments:}, queue_free:{arguments:, default_arguments:}, raise:{arguments:, default_arguments:}, remove_and_skip:{arguments:, default_arguments:}, remove_child:{arguments:a, default_arguments:a}, remove_from_group:{arguments:a, default_arguments:a}, remove_meta:{arguments:a, default_arguments:a}, replace_by:{arguments:a, b, default_arguments:a, b = False}, request_ready:{arguments:, default_arguments:}, rpc:{arguments:a, default_arguments:a}, rpc_config:{arguments:a, b, default_arguments:a, b}, rpc_id:{arguments:a, b, default_arguments:a, b}, rpc_unreliable:{arguments:a, default_arguments:a}, rpc_unreliable_id:{arguments:a, b, default_arguments:a, b}, rset:{arguments:a, b, default_arguments:a, b}, rset_config:{arguments:a, b, default_arguments:a, b}, rset_id:{arguments:a, b, c, default_arguments:a, b, c}, rset_unreliable:{arguments:a, b, default_arguments:a, b}, rset_unreliable_id:{arguments:a, b, c, default_arguments:a, b, c}, set:{arguments:a, b, default_arguments:a, b}, set_block_signals:{arguments:a, default_arguments:a}, set_custom_multiplayer:{arguments:a, default_arguments:a}, set_deferred:{arguments:a, b, default_arguments:a, b}, set_display_folded:{arguments:a, default_arguments:a}, set_filename:{arguments:a, default_arguments:a}, set_indexed:{arguments:a, b, default_arguments:a, b}, set_message_translation:{arguments:a, default_arguments:a}, set_meta:{arguments:a, b, default_arguments:a, b}, set_name:{arguments:a, default_arguments:a}, set_network_master:{arguments:a, b, default_arguments:a, b = True}, set_owner:{arguments:a, default_arguments:a}, set_pause_mode:{arguments:a, default_arguments:a}, set_physics_process:{arguments:a, default_arguments:a}, set_physics_process_internal:{arguments:a, default_arguments:a}, set_process:{arguments:a, default_arguments:a}, set_process_input:{arguments:a, default_arguments:a}, set_process_internal:{arguments:a, default_arguments:a}, set_process_priority:{arguments:a, default_arguments:a}, set_process_unhandled_input:{arguments:a, default_arguments:a}, set_process_unhandled_key_input:{arguments:a, default_arguments:a}, set_scene_instance_load_placeholder:{arguments:a, default_arguments:a}, set_script:{arguments:a, default_arguments:a}, subtract:{arguments:a, b, default_arguments:a, b}, sum:{arguments:a, default_arguments:a}, to_string:{arguments:, default_arguments:}, tr:{arguments:a, default_arguments:a}, update_configuration_warning:{arguments:, default_arguments:}}",
"success": true
} ],
"context": "When we create two of it for the same script",
"fullname": "test_When_we_create_two_of_it_for_the_same_script",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|Object| [Node:4898] is equal to |Object| [Node:4898]",
"context": "Then we get the same double back",
"expected": "|Object| [Node:4898] is equal to |Object| [Node:4898]",
"success": true
} ],
"context": "When we call the double the second time",
"fullname": "test_When_we_call_double_a_second_time_on",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 3,
"path": "res://tests/integration/script_director.test.gd",
"source": {
"containers": [ "res://tests/integration", "res://tests" ],
"method": "",
"path": "res://tests/integration/script_director.test.gd",
"tags": [  ],
"test": ExtResource( 13 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 3
}, {
"context": "Given a Test Double",
"methods": [ {
"assertions": [ {
"actual": "|int| 9999 is equal to |int| 9999",
"context": "Then it returns the corresponding value when the pattern matches",
"expected": "|int| 9999 is equal to |int| 9999",
"success": true
} ],
"context": "When we call a method that was stubbed with an argument pattern that includes a non-primitive object",
"fullname": "test_When_we_call_a_method_that_was_stubbed_with_an_argument_pattern_that_includes_a_non_primitive_object",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 9999 is equal to |int| 9999",
"context": "Then it returns the corresponding value when the partial pattern matches",
"expected": "|int| 9999 is equal to |int| 9999",
"success": true
} ],
"context": "When we call a method that was stubbed with a partial (ie using any()) argument pattern",
"fullname": "test_When_we_call_a_method_that_was_stubbed_with_a_partial_argument_pattern",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|null| Null == null",
"context": "Then we get the stubbed value back",
"expected": "|null| Null == null",
"success": true
} ],
"context": "When we stub a method of a doubled inner class",
"fullname": "test_When_we_stub_a_method_of_a_double_inner_class",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|String| Jackie is equal to |String| Jackie",
"context": "Then we can double the object successfully",
"expected": "|String| Jackie is equal to |String| Jackie",
"success": true
} ],
"context": "When we pass in dependecies on direct",
"fullname": "test_When_we_pass_in_deps_on_direct",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 99 is equal to |int| 99",
"context": "Then it returns a value",
"expected": "|int| 99 is equal to |int| 99",
"success": true
} ],
"context": "When we pass a funcref as a subcall that returns",
"fullname": "test_When_we_pass_a_funcref_as_a_subcall_that_returns_a_value",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 99 is equal to |int| 99",
"context": "Then it affects the state of the double",
"expected": "|int| 99 is equal to |int| 99",
"success": true
} ],
"context": "When we pass a funcref as a subcall",
"fullname": "test_When_we_pass_a_funcref_as_a_subcall",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|Array| [10, 5] is equal to |Array| [10, 5]",
"context": "Then it returns a value",
"expected": "|Array| [10, 5] is equal to |Array| [10, 5]",
"success": true
} ],
"context": "When we pass an Object with a call_func function",
"fullname": "test_When_we_pass_an_object_with_callfunc_method_as_a_subcall",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 4 is equal to |int| 4",
"context": "Then it calls its super implementation by default",
"expected": "|int| 4 is equal to |int| 4",
"success": true
}, {
"actual": "|int| 9999 is equal to |int| 9999",
"context": "Then it does not call its super implementation when arguments patterns match a different return value",
"expected": "|int| 9999 is equal to |int| 9999",
"success": true
} ],
"context": "When we call a method that we stubbed to call its super implementation by default",
"fullname": "test_When_we_call_a_method_that_we_stubbed_to_call_its_super_implementation_by_default",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|int| 4 is equal to |int| 4",
"context": "Then we get the correct result",
"expected": "|int| 4 is equal to |int| 4",
"success": true
} ],
"context": "When we call an add(x, y) method that we haven't directed",
"fullname": "test_When_we_call_an_add_method_that_we_have_not_directed",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then it returns true",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we call a method that we have stubbed to return true",
"fullname": "test_When_we_call_a_method_that_we_have_stubbed_to_return_true",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|Object| [Node:4974] is equal to |Object| [Node:4974]",
"context": "Then it returns that same node",
"expected": "|Object| [Node:4974] is equal to |Object| [Node:4974]",
"success": true
} ],
"context": "When we call a method that we have stubbed to return a node",
"fullname": "test_When_we_call_a_method_that_we_have_stubbed_to_return_a_node",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|float| 6.283185 is equal to |float| 6.283185",
"context": "Then we can call the static methods of that inner double",
"expected": "|float| 6.283185 is equal to |float| 6.283185",
"success": true
} ],
"context": "When we add an doubled inner class to it",
"fullname": "test_When_we_add_a_doubled_inner_class_to_it",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "(1, 1) is builtin: Vector2",
"context": "Then we can call methods on it",
"expected": "(1, 1) is builtin: Vector2",
"success": true
} ],
"context": "When we double an inner class",
"fullname": "test_When_we_double_an_inner_class",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 100 is equal to |int| 100",
"context": "Then it returns the default stubbed value when the arguments don't match any pattern",
"expected": "|int| 100 is equal to |int| 100",
"success": true
}, {
"actual": "|int| 1000 is equal to |int| 1000",
"context": "Then it returns the the corresponding value to the pattern the arguments matched",
"expected": "|int| 1000 is equal to |int| 1000",
"success": true
} ],
"context": "When we call a method that was stubbed to return different values based on argument patterns",
"fullname": "test_When_we_call_a_method_that_was_stubbed_to_return_different_values_based_on_argument_patterns",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "add was called",
"context": "Then we can see that it was called at least once",
"expected": "add was called",
"success": true
} ],
"context": "When we call a method that we are spying on",
"fullname": "test_When_we_call_a_method_that_we_are_spying_on",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "method: add was called with arguments: [10, 10]",
"context": "Then we can see that it was called with those arguments",
"expected": "method: add was called with arguments: [10, 10]",
"success": true
} ],
"context": "When we pass arguments to a method call that we are spying on",
"fullname": "test_When_we_pass_arguments_to_a_method_call_that_we_are_spying_on",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| True is equal to |bool| True",
"context": "Then we can call it",
"expected": "|bool| True is equal to |bool| True",
"success": true
} ],
"context": "When we stubbed a keyworded method by passing in the correct keyword",
"fullname": "test_When_we_stubbed_a_keyword_method_by_passing_in_the_correct_keyword",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|String| Jackie is equal to |String| Jackie",
"context": "Then we can double the object successfully",
"expected": "|String| Jackie is equal to |String| Jackie",
"success": true
} ],
"context": "When we pass in dependecies on double",
"fullname": "test_When_we_pass_in_deps_on_double",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|null| Null == null",
"context": "Then we get null",
"expected": "|null| Null == null",
"success": true
} ],
"context": "When we call a method that we have dummied",
"fullname": "test_When_we_call_a_method_that_we_have_dummied",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 19,
"path": "res://tests/integration/test_double.test.gd",
"source": {
"containers": [ "res://tests/integration", "res://tests" ],
"method": "",
"path": "res://tests/integration/test_double.test.gd",
"tags": [  ],
"test": ExtResource( 14 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 19
}, {
"context": "Given a Boolean Assertion",
"methods": [ {
"assertions": [ {
"actual": "|bool| True != false",
"context": "",
"expected": "|bool| True == false",
"success": false
} ],
"context": " intentional failure",
"fullname": "test_intentional_failure",
"passed": 0,
"success": false,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then it passes",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When calling asserts.is_true(true)",
"fullname": "test_when_calling_asserts_is_true",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| False == false",
"context": "Then it passes",
"expected": "|bool| False == false",
"success": true
} ],
"context": "When calling asserts.is_false(false)",
"fullname": "test_when_calling_asserts_is_false",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 2,
"path": "res://tests/unit/boolean.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/boolean.test.gd",
"tags": [  ],
"test": ExtResource( 11 ),
"yield_time": 0.0
},
"success": false,
"time_taken": 0.0,
"total": 3
}, {
"context": "Given an Equality Assertion",
"methods": [ {
"assertions": [ {
"actual": "|int| 1 is equal to |int| 1",
"context": "Then it passes",
"expected": "|int| 1 is equal to |int| 1",
"success": true
} ],
"context": "When calling asserts.is_equal(1, 1)",
"fullname": "test_when_calling_is_equal",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 2 is equal or greater |int| 1",
"context": "Then it passes",
"expected": "|int| 2 is equal or greater |int| 1",
"success": true
} ],
"context": "When calling asserts.is_equal_or_greater_than(2, 1)",
"fullname": "test_when_calling_is_equal_or_greater_than",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 2 is greater than |int| 1",
"context": "Then it passes",
"expected": "|int| 2 is greater than |int| 1",
"success": true
} ],
"context": "When calling asserts.is_greater_than(2, 1)",
"fullname": "test_when_calling_is_greater_than",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 1 is less than |int| 2",
"context": "Then it passes",
"expected": "|int| 1 is less than |int| 2",
"success": true
} ],
"context": "When calling asserts.is_less_than(2, 1)",
"fullname": "test_when_calling_is_less_than",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 5 is not equal to |int| 6",
"context": "Then it passes",
"expected": "|int| 5 != |int| 6",
"success": true
} ],
"context": "When callign asserts.is_not_equal(5, 6)",
"fullname": "test_when_calling_is_not_equal",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 1 is equal or less than |int| 1",
"context": "Then it passes!",
"expected": "|int| 1 is equal or less than |int| 1",
"success": true
} ],
"context": "When calling asserts.is_equal_or_less_than(1, 1)",
"fullname": "test_when_calling_is_equal_or_less_than_with_equal_values",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 1 is equal or greater |int| 1",
"context": "Then it passes",
"expected": "|int| 1 is equal or greater |int| 1",
"success": true
} ],
"context": "When calling asserts.is_equal_or_greater_than(1, 1)",
"fullname": "test_when_calling_is_equal_or_greater_than_with_equal_values",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 7,
"path": "res://tests/unit/equality.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/equality.test.gd",
"tags": [  ],
"test": ExtResource( 8 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 7
}, {
"context": "Given A File Assertion",
"methods": [ {
"assertions": [ {
"actual": "res://somefile.gd does not exist",
"context": "Then it passes",
"expected": "res://somefile.gd does not exist",
"success": true
} ],
"context": "When calling asserts.file_does_not_exist when there is no file",
"fullname": "test_when_calling_file_does_not_exist_when_there_is_no_file",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "res://tests/unit/file.test.gd exists",
"context": "Then it passes",
"expected": "res://tests/unit/file.test.gd exists",
"success": true
} ],
"context": "When calling asserts.file_exists when the file is this suite",
"fullname": "test_when_calling_file_exists_when_file_is_self",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": " does not exist",
"context": "Then it passes",
"expected": " does not exist",
"success": true
} ],
"context": "When calling asserts file does not exist when path is empty",
"fullname": "test_when_calling_file_does_not_exist_when_path_is_empty",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 3,
"path": "res://tests/unit/file.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/file.test.gd",
"tags": [  ],
"test": ExtResource( 3 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 3
}, {
"context": "Given an Is Instance of class/type Assertion",
"methods": [ {
"assertions": [ {
"actual": "|Plane| 0, 0, 0, 0 != null",
"context": "plane is not null",
"expected": "|Plane| 0, 0, 0, 0 != null",
"success": true
}, {
"actual": "0, 0, 0, 0 is builtin: Plane",
"context": "then it passes",
"expected": "0, 0, 0, 0 is builtin: Plane",
"success": true
} ],
"context": "When calling asserts.is_Plane(plane: Plane())",
"fullname": "test_when_calling_is_Plane",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|AABB| 0, 0, 0 - 0, 0, 0 != null",
"context": "AABB is not null",
"expected": "|AABB| 0, 0, 0 - 0, 0, 0 != null",
"success": true
}, {
"actual": "0, 0, 0 - 0, 0, 0 is builtin: AABB",
"context": "Then it passes",
"expected": "0, 0, 0 - 0, 0, 0 is builtin: AABB",
"success": true
} ],
"context": "When calling asserts.is_AABB(aabb: AABB)",
"fullname": "test_when_calling_is_AABB",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "{} is builtin: Dictionary",
"context": "Then it passes",
"expected": "{} is builtin: Dictionary",
"success": true
} ],
"context": "When calling asserts.is_Dictionary({})",
"fullname": "test_when_calling_is_Dictionary",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|PoolVector2Array| [] != null",
"context": "vec2s is not null",
"expected": "|PoolVector2Array| [] != null",
"success": true
}, {
"actual": "[] is builtin: PoolVector2Array",
"context": "Then it passes",
"expected": "[] is builtin: PoolVector2Array",
"success": true
} ],
"context": "When calling is asserts.is_PoolVector2Array(vec2s: PoolVector2Array)",
"fullname": "test_when_calling_is_PoolVector2Array",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|Rect2| (0, 0, 0, 0) != null",
"context": "rect2 is not null",
"expected": "|Rect2| (0, 0, 0, 0) != null",
"success": true
}, {
"actual": "(0, 0, 0, 0) is builtin: Rect2",
"context": "Then it passes",
"expected": "(0, 0, 0, 0) is builtin: Rect2",
"success": true
} ],
"context": "When calling asserts.is_Rect2(rect2: Rect2)",
"fullname": "test_when_calling_is_Rect2",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|PoolVector3Array| [] != null",
"context": "vec3s is not null",
"expected": "|PoolVector3Array| [] != null",
"success": true
}, {
"actual": "[] is builtin: PoolVector3Array",
"context": "Then it passes",
"expected": "[] is builtin: PoolVector3Array",
"success": true
} ],
"context": "When calling is asserts.is_PoolVector3Array(vec3s: PoolVector3Array)",
"fullname": "test_when_calling_is_PoolVector3Array",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|PoolRealArray| [] != null",
"context": "reals is not null",
"expected": "|PoolRealArray| [] != null",
"success": true
}, {
"actual": "[] is builtin: PoolRealArray",
"context": "Then it passes",
"expected": "[] is builtin: PoolRealArray",
"success": true
} ],
"context": "When calling is asserts.is_PoolRealArray(reals: PoolRealArray)",
"fullname": "test_when_calling_is_PoolRealArray",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|Quat| (0, 0, 0, 1) != null",
"context": "quat is not null",
"expected": "|Quat| (0, 0, 0, 1) != null",
"success": true
}, {
"actual": "(0, 0, 0, 1) is builtin: Quat",
"context": "Then it passes",
"expected": "(0, 0, 0, 1) is builtin: Quat",
"success": true
} ],
"context": "When calling asserts.is_Quat(quat: Quat)",
"fullname": "test_when_calling_is_Quat",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|RID| [RID] != null",
"context": "rid is not null",
"expected": "|RID| [RID] != null",
"success": true
}, {
"actual": "[RID] is builtin: RID",
"context": "Then it passes",
"expected": "[RID] is builtin: RID",
"success": true
} ],
"context": "When calling asserts.is_RID(rid: RID)",
"fullname": "test_when_calling_is_RID",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|Color| 0,0,0,1 != null",
"context": "color is not null",
"expected": "|Color| 0,0,0,1 != null",
"success": true
}, {
"actual": "0,0,0,1 is builtin: Color",
"context": "Then it passes",
"expected": "0,0,0,1 is builtin: Color",
"success": true
} ],
"context": "When calling asserts.is_color(color: Color)",
"fullname": "test_when_calling_is_Color",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|String|  != null",
"context": "strs is not null",
"expected": "|String|  != null",
"success": true
}, {
"actual": " is builtin: String",
"context": "Then it passes",
"expected": " is builtin: String",
"success": true
} ],
"context": "When calling asserts.is_string(strs: String)",
"fullname": "test_when_calling_is_string",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|Transform| 1, 0, 0, 0, 1, 0, 0, 0, 1 - 0, 0, 0 != null",
"context": "transform is not null",
"expected": "|Transform| 1, 0, 0, 0, 1, 0, 0, 0, 1 - 0, 0, 0 != null",
"success": true
}, {
"actual": "1, 0, 0, 0, 1, 0, 0, 0, 1 - 0, 0, 0 is builtin: Transform",
"context": "Then it passes",
"expected": "1, 0, 0, 0, 1, 0, 0, 0, 1 - 0, 0, 0 is builtin: Transform",
"success": true
} ],
"context": "When calling asserts.is_Transform(transform: Transform)",
"fullname": "test_when_calling_is_Transform",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|Transform2D| ((1, 0), (0, 1), (0, 0)) != null",
"context": "transform2D is not null",
"expected": "|Transform2D| ((1, 0), (0, 1), (0, 0)) != null",
"success": true
}, {
"actual": "((1, 0), (0, 1), (0, 0)) is builtin: Transform2D",
"context": "Then it passes",
"expected": "((1, 0), (0, 1), (0, 0)) is builtin: Transform2D",
"success": true
} ],
"context": "When calling asserts.is_Transform(transform2D: Transform2D)",
"fullname": "test_when_calling_is_Transform2D",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|Array| [] != null",
"context": "array is not null",
"expected": "|Array| [] != null",
"success": true
}, {
"actual": "[] is builtin: Array",
"context": "Then it passes",
"expected": "[] is builtin: Array",
"success": true
} ],
"context": "When calling asserts.is_Array(array: Array)",
"fullname": "test_when_calling_is_Array",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|Vector2| (0, 0) != null",
"context": "vec2 is not null",
"expected": "|Vector2| (0, 0) != null",
"success": true
}, {
"actual": "(0, 0) is builtin: Vector2",
"context": "Then it passes",
"expected": "(0, 0) is builtin: Vector2",
"success": true
} ],
"context": "When calling asserts.is_Vector2(vec2)",
"fullname": "test_when_calling_is_Vector2",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|PoolStringArray| [] != null",
"context": "strs is not null",
"expected": "|PoolStringArray| [] != null",
"success": true
}, {
"actual": "[] is builtin: PoolStringArray",
"context": "Then it passes",
"expected": "[] is builtin: PoolStringArray",
"success": true
} ],
"context": "When calling is asserts.is_PoolStringArray(strs: PoolStringArray)",
"fullname": "test_when_calling_is_PoolStringArray",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|NodePath| . != null",
"context": "@'Parent/Child' is not null",
"expected": "|NodePath| . != null",
"success": true
}, {
"actual": ". is builtin: NodePath",
"context": "Then it passes",
"expected": ". is builtin: NodePath",
"success": true
} ],
"context": "When calling asserts.is_NodePath(@'Parent/Child')",
"fullname": "test_when_calling_is_NodePath",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|Object| [Node:5100] != null",
"context": "node is not null",
"expected": "|Object| [Node:5100] != null",
"success": true
}, {
"actual": "[Node:5100] is builtin: Object",
"context": "An instance of node is an Object",
"expected": "[Node:5100] is builtin: Object",
"success": true
} ],
"context": "When calling is asserts.object(node: Node)",
"fullname": "test_when_calling_is_object",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|PoolByteArray| [PoolByteArray] != null",
"context": "bytes is not null",
"expected": "|PoolByteArray| [PoolByteArray] != null",
"success": true
}, {
"actual": "[PoolByteArray] is builtin: PoolByteArray",
"context": "Then it passes",
"expected": "[PoolByteArray] is builtin: PoolByteArray",
"success": true
} ],
"context": "When calling asserts.is_PoolByteArray(bytes: PoolByteArray)",
"fullname": "test_when_calling_is_PoolByteArray",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|PoolIntArray| [] != null",
"context": "ints is not null",
"expected": "|PoolIntArray| [] != null",
"success": true
}, {
"actual": "[] is builtin: PoolIntArray",
"context": "Then it passes",
"expected": "[] is builtin: PoolIntArray",
"success": true
} ],
"context": "When calling asserts.is_PoolIntArray(ints: PoolIntArray)",
"fullname": "test_when_calling_is_PoolIntArray",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "1 is builtin: int",
"context": "Then it passes",
"expected": "1 is builtin: int",
"success": true
} ],
"context": "When callign asserts.is_int(1)",
"fullname": "test_when_calling_is_int",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|Vector3| (0, 0, 0) != null",
"context": "vec3 is not null",
"expected": "|Vector3| (0, 0, 0) != null",
"success": true
}, {
"actual": "(0, 0, 0) is builtin: Vector3",
"context": "Then it passes",
"expected": "(0, 0, 0) is builtin: Vector3",
"success": true
} ],
"context": "When calling asserts.is_Vector3(vec3: Vector3",
"fullname": "test_when_calling_is_Vector3",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "1 is builtin: float",
"context": "Then it passes",
"expected": "1 is builtin: float",
"success": true
} ],
"context": "When calling asserts.is_float(1.0)",
"fullname": "test_when_calling_is_float",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|PoolColorArray| [PoolColorArray] != null",
"context": "colors is not null",
"expected": "|PoolColorArray| [PoolColorArray] != null",
"success": true
}, {
"actual": "[PoolColorArray] is builtin: PoolColorArray",
"context": "Then it passes",
"expected": "[PoolColorArray] is builtin: PoolColorArray",
"success": true
} ],
"context": "When calling asserts.is_PoolColorArray(colors: PoolColorArray)",
"fullname": "test_when_calling_is_PoolColorArray",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "True is builtin: bool",
"context": "Then it passes",
"expected": "True is builtin: bool",
"success": true
} ],
"context": "When calling asserts.is_bool(true)",
"fullname": "test_when_calling_is_bool",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|Basis| ((1, 0, 0), (0, 1, 0), (0, 0, 1)) != null",
"context": "basis is not null",
"expected": "|Basis| ((1, 0, 0), (0, 1, 0), (0, 0, 1)) != null",
"success": true
}, {
"actual": "((1, 0, 0), (0, 1, 0), (0, 0, 1)) is builtin: Basis",
"context": "Then it passes",
"expected": "((1, 0, 0), (0, 1, 0), (0, 0, 1)) is builtin: Basis",
"success": true
} ],
"context": "When calling asserts.is_basis(basis: Basis",
"fullname": "test_when_calling_is_Basis",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
} ],
"passed": 26,
"path": "res://tests/unit/is_instance.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/is_instance.test.gd",
"tags": [  ],
"test": ExtResource( 6 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 26
}, {
"context": "Given an Is Not Instance of class/type Assertion",
"methods": [ {
"assertions": [ {
"actual": "Null is not builtin: AABB",
"context": "Then it passes",
"expected": "Null is not builtin: AABB",
"success": true
} ],
"context": "when calling asserts.is_not_AABB(null)",
"fullname": "test_when_calling_is_not_AABB",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Basis",
"context": "Then it passes",
"expected": "Null is not builtin: Basis",
"success": true
} ],
"context": "when calling asserts.is_not_Basis(null)",
"fullname": "test_when_calling_is_not_Basis",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Array",
"context": "Then it passes",
"expected": "Null is not builtin: Array",
"success": true
} ],
"context": "when calling asserts.is_not_Array(null)",
"fullname": "test_when_calling_is_not_Array",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: RID",
"context": "Then it passes",
"expected": "Null is not builtin: RID",
"success": true
} ],
"context": "when calling asserts.is_not_RID(null)",
"fullname": "test_when_calling_is_not_RID",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Vector2",
"context": "Then it passes",
"expected": "Null is not builtin: Vector2",
"success": true
} ],
"context": "when calling asserts.is_not_Vector2(null)",
"fullname": "test_when_calling_is_not_Vector2",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Color",
"context": "Then it passes",
"expected": "Null is not builtin: Color",
"success": true
} ],
"context": "when calling asserts.is_not_Color(null)",
"fullname": "test_when_calling_is_not_Color",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Object",
"context": "Then it passes",
"expected": "Null is not builtin: Object",
"success": true
} ],
"context": "when calling asserts.is_not_Object(null)",
"fullname": "test_when_calling_is_not_Object",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Rect2",
"context": "Then it passes",
"expected": "Null is not builtin: Rect2",
"success": true
} ],
"context": "when calling asserts.is_not_Rect2(null)",
"fullname": "test_when_calling_is_not_Rect2",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: PoolVector2Array",
"context": "Then it passes",
"expected": "Null is not builtin: PoolVector2Array",
"success": true
} ],
"context": "when calling asserts.is_not_PoolVector2Array(null)",
"fullname": "test_when_calling_is_not_PoolVector2Array",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: int",
"context": "Then it passes",
"expected": "Null is not builtin: int",
"success": true
} ],
"context": "when calling asserts.is_not_int(null)",
"fullname": "test_when_calling_is_not_int",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: PoolIntArray",
"context": "Then it passes",
"expected": "Null is not builtin: PoolIntArray",
"success": true
} ],
"context": "when calling asserts.is_not_PoolIntArray(null)",
"fullname": "test_when_calling_is_not_PoolIntArray",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: NodePath",
"context": "Then it passes",
"expected": "Null is not builtin: NodePath",
"success": true
} ],
"context": "when calling asserts.is_not_NodePath(null)",
"fullname": "test_when_calling_is_not_NodePath",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Plane",
"context": "Then it passes",
"expected": "Null is not builtin: Plane",
"success": true
} ],
"context": "when calling asserts.is_not_Plane(null)",
"fullname": "test_when_calling_is_not_Plane",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: PoolVector3Array",
"context": "Then it passes",
"expected": "Null is not builtin: PoolVector3Array",
"success": true
} ],
"context": "when calling asserts.is_not_PoolVector3Array(null)",
"fullname": "test_when_calling_is_not_PoolVector3Array",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Transform",
"context": "Then it passes",
"expected": "Null is not builtin: Transform",
"success": true
} ],
"context": "when calling asserts.is_not_Transform(null)",
"fullname": "test_when_calling_is_not_Transform",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Transform2D",
"context": "Then it passes",
"expected": "Null is not builtin: Transform2D",
"success": true
} ],
"context": "when calling asserts.is_not_Transform2D(null)",
"fullname": "test_when_calling_is_not_Transform2D",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: bool",
"context": "Then it passes",
"expected": "Null is not builtin: bool",
"success": true
} ],
"context": "when calling asserts.is_not_bool(null)",
"fullname": "test_when_calling_is_not_bool",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: PoolColorArray",
"context": "Then it passes",
"expected": "Null is not builtin: PoolColorArray",
"success": true
} ],
"context": "when calling asserts.is_not_PoolColorArray(null)",
"fullname": "test_when_calling_is_not_PoolColorArray",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: PoolRealArray",
"context": "Then it passes",
"expected": "Null is not builtin: PoolRealArray",
"success": true
} ],
"context": "when calling asserts.is_not_PoolRealArray(null)",
"fullname": "test_when_calling_is_not_PoolRealArray",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: PoolStringArray",
"context": "Then it passes",
"expected": "Null is not builtin: PoolStringArray",
"success": true
} ],
"context": "when calling asserts.is_not_PoolStringArray(null)",
"fullname": "test_when_calling_is_not_PoolStringArray",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Quat",
"context": "Then it passes",
"expected": "Null is not builtin: Quat",
"success": true
} ],
"context": "when calling asserts.is_not_Quat(null)",
"fullname": "test_when_calling_is_not_Quat",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Dictionary",
"context": "Then it passes",
"expected": "Null is not builtin: Dictionary",
"success": true
} ],
"context": "when calling asserts.is_not_Dictionary(null)",
"fullname": "test_when_calling_is_not_Dictionary",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Vector3",
"context": "Then it passes",
"expected": "Null is not builtin: Vector3",
"success": true
} ],
"context": "when calling asserts.is_not_Vector3(null)",
"fullname": "test_when_calling_is_not_Vector3",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: PoolByteArray",
"context": "Then it passes",
"expected": "Null is not builtin: PoolByteArray",
"success": true
} ],
"context": "when calling asserts.is_not_PoolByteArray(null)",
"fullname": "test_when_calling_is_not_PoolByteArray",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: float",
"context": "Then it passes",
"expected": "Null is not builtin: float",
"success": true
} ],
"context": "when calling asserts.is_not_float(null)",
"fullname": "test_when_calling_is_not_float",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: String",
"context": "Then it passes",
"expected": "Null is not builtin: String",
"success": true
} ],
"context": "when calling asserts.is_not_String(null)",
"fullname": "test_when_calling_is_not_String",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 26,
"path": "res://tests/unit/is_not_instance.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/is_not_instance.test.gd",
"tags": [  ],
"test": ExtResource( 2 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 26
}, {
"context": "Given a Null Assertion",
"methods": [ {
"assertions": [ {
"actual": "|null| Null == null",
"context": "Then it passes",
"expected": "|null| Null == null",
"success": true
} ],
"context": "When calling asserts.is_null(null)",
"fullname": "test_when_calling_null_is_null",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|Object| [Node:5147] != null",
"context": "Then it passes",
"expected": "|Object| [Node:5147] != null",
"success": true
} ],
"context": "When calling Node is not null",
"fullname": "test_when_calling_node_is_not_null",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|Object| [Deleted Object] == null",
"context": "A Freed Node is null in Engine 3.2.2 or greater",
"expected": "|Object| [Deleted Object] == null",
"success": true
} ],
"context": "When calling freed object is null",
"fullname": "test_when_calling_freed_object_is_not_null",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 3,
"path": "res://tests/unit/null.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/null.test.gd",
"tags": [  ],
"test": ExtResource( 12 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 3
}, {
"context": "Given an Object Assertion",
"methods": [ {
"assertions": [ {
"actual": "[Node:5160] is not freed",
"context": "Then it passes",
"expected": "[Node:5160] is not freed",
"success": true
} ],
"context": "When calling asserts.is_not_freed(unfreed_object)",
"fullname": "test_when_calling_unfreed_object_is_not_freed",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is freed from memory",
"context": "Then it passes",
"expected": "Null is freed from memory",
"success": true
} ],
"context": "When calling asserts.is_freed(freed_object",
"fullname": "test_when_calling_freed_object_is_freed",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:5151] does not have meta: bad_meta",
"context": "Then it passes",
"expected": "[Node:5151] does not have meta: bad_meta",
"success": true
} ],
"context": "When calling asserts.object_does_not_have_meta()",
"fullname": "test_when_calling_does_not_have_meta",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:5151] has meta: dummy",
"context": "Then it passes",
"expected": "[Node:5151] has meta: dummy",
"success": true
}, {
"actual": "[Node:5151] has meta: dummy",
"context": "Then it passes",
"expected": "[Node:5151] has meta: dummy",
"success": true
} ],
"context": "When calling asserts.object_has_meta() after adding metadata",
"fullname": "test_when_calling_has_meta_after_adding_metadata",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "[Node:5167] is queued for deletion",
"context": "Then it passes",
"expected": "[Node:5167] is queued for deletion",
"success": true
} ],
"context": "When calling asserts.object_is_queued for deletion after calling queue_free",
"fullname": "test_when_calling_obj_is_queued_for_deletion_after_calling_queue_free",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:5151].builtin_dummy is connected to [Node:5151].title",
"context": "Then it passes",
"expected": "[Node:5151].builtin_dummy is connected to [Node:5151].title",
"success": true
} ],
"context": "When calling asserts object is connected with a valid connection",
"fullname": "test_when_calling_obj_is_connected_with_a_real_connection",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:5151].builtin_dummy is not connected to [Node:5151].title",
"context": "Then it passes",
"expected": "[Node:5151].builtin_dummy is not connected to [Node:5151].title",
"success": true
} ],
"context": "When calling asserts object is not connected with an invalid connection",
"fullname": "test_when_calling_obj_is_not_connected_with_an_invalid_connection",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:5171] is blocking signals",
"context": "Then it passes",
"expected": "[Node:5171] is blocking signals",
"success": true
} ],
"context": "When calling is blocking signals while blocking signals",
"fullname": "test_is_blocking_signals",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:5173] is not blocking signals",
"context": "Then it passes",
"expected": "[Node:5173] is not blocking signals",
"success": true
} ],
"context": "When calling is not blocking signals while not blocking signals",
"fullname": "test_is_not_blocking_signals",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:5151] does not have meta: confusing",
"context": "Then it passes",
"expected": "[Node:5151] does not have meta: confusing",
"success": true
} ],
"context": "When calling asserts.object_has_meta with real key but null val",
"fullname": "test_when_calling_does_not_have_meta_real_key_null_value_pair",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:5151] has user signal: dummy_signal",
"context": "Then it passes",
"expected": "[Node:5151] has user signal: dummy_signal",
"success": true
} ],
"context": "When calling obj_has_user_signal after adding a signal",
"fullname": "test_when_calling_has_user_signal_after_adding_a_signal",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:5151] does not have user signal: false_signal",
"context": "Then it passes",
"expected": "[Node:5151] does not have user signal: false_signal",
"success": true
} ],
"context": "When calling obj_does_not_have_user_signal with fake signal",
"fullname": "test_when_calling_does_not_have_user_signal",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:5151] does not have user signal: builtin_dummy",
"context": "Then it passes",
"expected": "[Node:5151] does not have user signal: builtin_dummy",
"success": true
} ],
"context": "When calling does not have user signal with class signal",
"fullname": "test_when_calling_does_not_have_user_signal_with_class_signal_constant",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:5151] has method: title",
"context": "Then it passes",
"expected": "[Node:5151] has method: title",
"success": true
} ],
"context": "When calling has_method('title')",
"fullname": "test_when_calling_has_method_title",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:5180] is not queued for deletion",
"context": "Then it passes",
"expected": "[Node:5180] is not queued for deletion",
"success": true
} ],
"context": "When calling asserts.object_is_not_for_queued_deletion after not calling queue free()",
"fullname": "test_when_calling_obj_is_not_for_queued_deletion_after_not_calling_queue_free",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 15,
"path": "res://tests/unit/object.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/object.test.gd",
"tags": [  ],
"test": ExtResource( 7 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 15
}, {
"context": "Given the Addition Operator",
"methods": [ {
"assertions": [ {
"actual": "|int| 4 is equal to |int| 4",
"context": "",
"expected": "|int| 4 is equal to |int| 4",
"success": true
} ],
"context": "When we add 2 to 2 we get 4",
"fullname": "test_add",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 8 is equal to |int| 8",
"context": "",
"expected": "|int| 8 is equal to |int| 8",
"success": true
} ],
"context": "When we add 5 to 3 we get 8",
"fullname": "test_add",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 13 is equal to |int| 13",
"context": "",
"expected": "|int| 13 is equal to |int| 13",
"success": true
} ],
"context": "When we add 7 to 6 we get 13",
"fullname": "test_add",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 0 is equal to |int| 0",
"context": "",
"expected": "|int| 0 is equal to |int| 0",
"success": true
} ],
"context": "When we subtract 2 from 2 we get 0",
"fullname": "test_subtract",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 2 is equal to |int| 2",
"context": "",
"expected": "|int| 2 is equal to |int| 2",
"success": true
} ],
"context": "When we subtract 5 from 3 we get 2",
"fullname": "test_subtract",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 1 is equal to |int| 1",
"context": "",
"expected": "|int| 1 is equal to |int| 1",
"success": true
} ],
"context": "When we subtract 7 from 6 we get 1",
"fullname": "test_subtract",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 6,
"path": "res://tests/unit/parameters.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/parameters.test.gd",
"tags": [  ],
"test": ExtResource( 16 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 6
}, {
"context": "Given A Range Assertion",
"methods": [ {
"assertions": [ {
"actual": "10 is not in range(0, 10)",
"context": "Then it passes",
"expected": "10 is not in range(0, 10)",
"success": true
} ],
"context": "When calling is (10) not in range (in range(0, 10)",
"fullname": "test_when_calling_is_not_in_range",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "0 is in range(0, 10)",
"context": "Then it passes",
"expected": "0 is in range(0, 10)",
"success": true
} ],
"context": "When calling is (0) in range(0, 10)",
"fullname": "test_when_calling_is_in_range",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 2,
"path": "res://tests/unit/range.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/range.test.gd",
"tags": [  ],
"test": ExtResource( 15 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 2
}, {
"context": "Given a String Assertion",
"methods": [ {
"assertions": [ {
"actual": "lorem impsum ends with impsum",
"context": "Then it passes",
"expected": "lorem impsum ends with impsum",
"success": true
} ],
"context": "When calling asserts.string_ends_with('impsum', 'lorem impsum')",
"fullname": "test_when_calling_string_ends_with",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "impsum does not end with lorem",
"context": "Then it passes",
"expected": "impsum does not end with lorem",
"success": true
} ],
"context": "When calling asserts.string_does_not_end_with('lorem', 'impsum')",
"fullname": "test_when_calling_string_does_not_end_with",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "lorem impsum begins with lorem",
"context": "Then it passes",
"expected": "lorem impsum begins with lorem",
"success": true
} ],
"context": "When calling asserts.string_begins_with('lorem', 'lorem impsum')",
"fullname": "test_when_calling_string_begins_with",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "impsum does not contain beem im",
"context": "Then it passes",
"expected": "impsum does not contain beem im",
"success": true
} ],
"context": "When calling asserts.string_does_not_contain('em im', 'impsum')",
"fullname": "test_when_calling_string_does_not_contain",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "impsum does not begin with bleh lorem",
"context": "Then it passes",
"expected": "impsum does not begin with bleh lorem",
"success": true
} ],
"context": "When calling asserts.string_does_not_begin_with('lorem', 'impsum')",
"fullname": "test_when_calling_string_does_not_begin_with",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "lorem impsum contains em im",
"context": "Then it passes",
"expected": "lorem impsum contains em im",
"success": true
} ],
"context": "When calling asserts.string_contains('em im', 'lorem impsum')",
"fullname": "test_when_calling_string_contains",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 6,
"path": "res://tests/unit/string.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/string.test.gd",
"tags": [  ],
"test": ExtResource( 9 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 6
}, {
"context": "Dummy Passing Test",
"methods": [ {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Passing!",
"expected": "|bool| True == true",
"success": true
} ],
"context": "This method passes",
"fullname": "test_this_method_passes",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 1,
"path": "res://tests/unit/suite.test.gd.DummyOne",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/suite.test.gd.DummyOne",
"tags": [  ],
"test": SubResource( 21 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 1
}, {
"context": "Dummy Test 2",
"methods": [ {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Passing!",
"expected": "|bool| True == true",
"success": true
} ],
"context": "This method passes",
"fullname": "test_this_method_passes",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 1,
"path": "res://tests/unit/suite.test.gd.DummyTwo",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/suite.test.gd.DummyTwo",
"tags": [  ],
"test": SubResource( 22 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 1
}, {
"context": "Given a Test Script",
"methods": [ {
"assertions": [ {
"actual": "|bool| True == true",
"context": "if the test didn't break this works",
"expected": "|bool| True == true",
"success": true
} ],
"context": " we can omit describe",
"fullname": "test_we_can_omit_describe",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 10 is greater than |int| 1",
"context": "We get an array of multiple values back",
"expected": "|int| 10 is greater than |int| 1",
"success": true
}, {
"actual": "|int| 0 is not equal to |int| 9",
"context": "With different values",
"expected": "|int| 0 != |int| 9",
"success": true
}, {
"actual": "|int| 10 is greater than |int| 1",
"context": "And we can track multiple properties",
"expected": "|int| 10 is greater than |int| 1",
"success": true
} ],
"context": "When we record properties",
"fullname": "test_we_can_record_properties",
"passed": 3,
"success": true,
"time": 0.0,
"total": 3
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|int| 2 is equal to |int| 2",
"context": "",
"expected": "|int| 2 is equal to |int| 2",
"success": true
} ],
"context": " when we omit context we can see expected and got under method",
"fullname": "test_when_we_omit_context_we_can_see_expected_and_got_under_method",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
} ],
"passed": 3,
"path": "res://tests/unit/test.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/test.test.gd",
"tags": [  ],
"test": ExtResource( 19 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 3
}, {
"context": "Given a Signal Watcher",
"methods": [ {
"assertions": [ {
"actual": "signal: example was emitted from [Node:5230]",
"context": "Then it captures the emitted signal",
"expected": "signal: example was emitted from [Node:5230]",
"success": true
} ],
"context": "When we watch and emit a signal",
"fullname": "test_When_we_watch_and_emit_a_signal",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Signal: example was emitted from [Node:5230] with arguments: [1, 20, 5]",
"context": "Then it captures any arguments that where passed when the signal was emitted",
"expected": "Signal: example was emitted from [Node:5230] with arguments: [1, 20, 5]",
"success": true
} ],
"context": "When we watch a signal from an object with no bound variables",
"fullname": "test_When_we_watch_a_signal_from_an_object_with_no_bound_variables",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Signal: example was not emitted from [Node:5230]",
"context": "Then it does not capture the non-emitted signal",
"expected": "Signal: example was not emitted from [Node:5230]",
"success": true
} ],
"context": "When we watch and do not emit a signal",
"fullname": "test_When_we_watch_and_do_not_emit_a_signal",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "signal: multiple was emitted from [Node:5230] 2",
"context": "Then we can track how many times we emitted it",
"expected": "signal: multiple was emitted from [Node:5230] 2",
"success": true
} ],
"context": "When we watch and signal and emit it multiple times",
"fullname": "test_When_we_watch_a_signal_and_emit_it_multiple_times",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 4,
"path": "res://tests/unit/watcher.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/watcher.test.gd",
"tags": [  ],
"test": ExtResource( 17 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 4
}, {
"context": "Given a Yield",
"methods": [ {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then we set var a to true",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then we set var b to true",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we yield in start twice",
"fullname": "test_When_we_yield_in_start",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then we set var c to true",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then we set var d to true",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we yield in pre thrice",
"fullname": "test_When_we_yield_in_pre",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then the yielder is unpaused",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then the timeout signal of the yielder is connected",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then our signal is connected to the yielder",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we call until signal",
"fullname": "test_When_we_call_until_signal",
"passed": 3,
"success": true,
"time": 0.0,
"total": 3
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then we set var e to true",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then we set var f to true",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we yield twice in execute",
"fullname": "test_When_we_yield_in_execute",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then the yielder is paused",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When a signal being yielded on is emitted",
"fullname": "test_When_a_signal_being_yielded_on_is_emitted_the_yielder_is_stopped",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then the yielder is paused",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then the timeout signal of the yielder is disconnected",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then our signal to the yielder is disconnected",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When the yielder heres our signal",
"fullname": "test_When_the_yielder_hears_our_signal",
"passed": 3,
"success": true,
"time": 0.0,
"total": 3
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then the timeout signal is disconnected",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then the signal-signal is disconnected",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When it is finished",
"fullname": "test_When_yielder_is_finished_signals_are_disconnected",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "[100, Null, Null, Null, Null, Null] is builtin: Array",
"context": "Then we get an array",
"expected": "[100, Null, Null, Null, Null, Null] is builtin: Array",
"success": true
}, {
"actual": "|int| 6 is equal to |int| 6",
"context": "Of size 6",
"expected": "|int| 6 is equal to |int| 6",
"success": true
}, {
"actual": "|int| 100 is equal to |int| 100",
"context": "Where element 0 is 100",
"expected": "|int| 100 is equal to |int| 100",
"success": true
} ],
"context": "When yield(self.yield_value()) returns",
"fullname": "test_When_we_yield_we_get_the_return_value",
"passed": 3,
"success": true,
"time": 0.0,
"total": 3
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then yielder is unpaused",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "The timeout signal of the yielder is connected",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we call until_timeout (with 1.0)",
"fullname": "test_When_we_call_until_timeout",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then yielder is not active",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When asserting against a test",
"fullname": "test_Yielder_is_not_active_when_asserting",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then the yielder is paused",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "The timeout signal of the yielder is not connected",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When the yielder times out on until_timeout(0.1)",
"fullname": "test_When_the_yielder_times_out",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
} ],
"passed": 11,
"path": "res://tests/unit/yield.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/yield.test.gd",
"tags": [  ],
"test": ExtResource( 18 ),
"yield_time": 1.9
},
"success": true,
"time_taken": 0.0,
"total": 11
}, {
"context": "Given a Boolean Assertion",
"methods": [ {
"assertions": [ {
"actual": "|bool| True != false",
"context": "",
"expected": "|bool| True == false",
"success": false
} ],
"context": " intentional failure",
"fullname": "test_intentional_failure",
"passed": 0,
"success": false,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then it passes",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When calling asserts.is_true(true)",
"fullname": "test_when_calling_asserts_is_true",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| False == false",
"context": "Then it passes",
"expected": "|bool| False == false",
"success": true
} ],
"context": "When calling asserts.is_false(false)",
"fullname": "test_when_calling_asserts_is_false",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 2,
"path": "res://tests/integration/boolean.test.gd",
"source": {
"containers": [ "res://tests/integration", "res://tests" ],
"method": "",
"path": "res://tests/integration/boolean.test.gd",
"tags": [  ],
"test": ExtResource( 20 ),
"yield_time": 0.0
},
"success": false,
"time_taken": 0.0,
"total": 3
}, {
"context": "Default Args",
"methods": [ {
"assertions": [ {
"actual": "|bool| True == true",
"context": "If this method can be reached then we have doubled a script with default argument(s) properly!",
"expected": "|bool| True == true",
"success": true
} ],
"context": " default arguments of interpolate property",
"fullname": "test_default_arguments_of_interpolate_property",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 1,
"path": "res://tests/integration/default_args.test.gd",
"source": {
"containers": [ "res://tests/integration", "res://tests" ],
"method": "",
"path": "res://tests/integration/default_args.test.gd",
"tags": [  ],
"test": ExtResource( 10 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 1
}, {
"context": "Given is_on_floor",
"methods": [ {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then it can be stubbed",
"expected": "|bool| True == true",
"success": true
} ],
"context": "From a built-in KinematicBody2D2",
"fullname": "test_stubbing_is_on_floor_method_from_builtin_class2",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then it can be stubbed",
"expected": "|bool| True == true",
"success": true
} ],
"context": "From a child node of a scene without scripts",
"fullname": "test_stubbing_is_on_floor_as_child_node_with_no_script",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then it can be stubbed",
"expected": "|bool| True == true",
"success": true
} ],
"context": "From a user-defined script",
"fullname": "test_stubbing_is_on_floor_method_from_user_defined_class",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 3,
"path": "res://tests/integration/on_floor.test.gd",
"source": {
"containers": [ "res://tests/integration", "res://tests" ],
"method": "",
"path": "res://tests/integration/on_floor.test.gd",
"tags": [  ],
"test": ExtResource( 5 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 3
}, {
"context": "Given a Yield",
"methods": [ {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then we set var a to true",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then we set var b to true",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we yield in start twice",
"fullname": "test_When_we_yield_in_start",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then we set var c to true",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then we set var d to true",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we yield in pre thrice",
"fullname": "test_When_we_yield_in_pre",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then the yielder is unpaused",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then the timeout signal of the yielder is connected",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then our signal is connected to the yielder",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we call until signal",
"fullname": "test_When_we_call_until_signal",
"passed": 3,
"success": true,
"time": 0.0,
"total": 3
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then we set var e to true",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then we set var f to true",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we yield twice in execute",
"fullname": "test_When_we_yield_in_execute",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then the yielder is paused",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When a signal being yielded on is emitted",
"fullname": "test_When_a_signal_being_yielded_on_is_emitted_the_yielder_is_stopped",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then the yielder is paused",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then the timeout signal of the yielder is disconnected",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then our signal to the yielder is disconnected",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When the yielder heres our signal",
"fullname": "test_When_the_yielder_hears_our_signal",
"passed": 3,
"success": true,
"time": 0.0,
"total": 3
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then the timeout signal is disconnected",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then the signal-signal is disconnected",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When it is finished",
"fullname": "test_When_yielder_is_finished_signals_are_disconnected",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "[100, Null, Null, Null, Null, Null] is builtin: Array",
"context": "Then we get an array",
"expected": "[100, Null, Null, Null, Null, Null] is builtin: Array",
"success": true
}, {
"actual": "|int| 6 is equal to |int| 6",
"context": "Of size 6",
"expected": "|int| 6 is equal to |int| 6",
"success": true
}, {
"actual": "|int| 100 is equal to |int| 100",
"context": "Where element 0 is 100",
"expected": "|int| 100 is equal to |int| 100",
"success": true
} ],
"context": "When yield(self.yield_value()) returns",
"fullname": "test_When_we_yield_we_get_the_return_value",
"passed": 3,
"success": true,
"time": 0.0,
"total": 3
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then yielder is unpaused",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "The timeout signal of the yielder is connected",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we call until_timeout (with 1.0)",
"fullname": "test_When_we_call_until_timeout",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then yielder is not active",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When asserting against a test",
"fullname": "test_Yielder_is_not_active_when_asserting",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then the yielder is paused",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "The timeout signal of the yielder is not connected",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When the yielder times out on until_timeout(0.1)",
"fullname": "test_When_the_yielder_times_out",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
} ],
"passed": 11,
"path": "res://tests/unit/yield.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/yield.test.gd",
"tags": [  ],
"test": ExtResource( 18 ),
"yield_time": 1.9
},
"success": true,
"time_taken": 0.0,
"total": 11
}, {
"context": "Given a Script Director",
"methods": [ {
"assertions": [ {
"actual": "[Reference:5709] is instance of class: [GDScript:1453]",
"context": "Then we get that inner class back",
"expected": "[Reference:5709] is instance of class: [GDScript:1453]",
"success": true
} ],
"context": "When we double an inner class",
"fullname": "test_When_we_double_an_inner_class",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|Dictionary| {_enter_tree:{arguments:, default_arguments:}, _exit_tree:{arguments:, default_arguments:}, _get:{arguments:a, default_arguments:a}, _get_configuration_warning:{arguments:, default_arguments:}, _get_editor_description:{arguments:, default_arguments:}, _get_import_path:{arguments:, default_arguments:}, _get_property_list:{arguments:, default_arguments:}, _init:{arguments:, default_arguments:}, _input:{arguments:a, default_arguments:a}, _notification:{arguments:a, default_arguments:a}, _physics_process:{arguments:a, default_arguments:a}, _process:{arguments:a, default_arguments:a}, _ready:{arguments:, default_arguments:}, _set:{arguments:a, b, default_arguments:a, b}, _set_editor_description:{arguments:a, default_arguments:a}, _set_import_path:{arguments:a, default_arguments:a}, _to_string:{arguments:, default_arguments:}, _unhandled_input:{arguments:a, default_arguments:a}, _unhandled_key_input:{arguments:a, default_arguments:a}, add:{arguments:a, b, default_arguments:a, b}, add_child:{arguments:a, b, default_arguments:a, b = False}, add_child_below_node:{arguments:a, b, c, default_arguments:a, b, c = False}, add_to_group:{arguments:a, b, default_arguments:a, b = False}, add_user_signal:{arguments:a, b, default_arguments:a, b = []}, call:{arguments:a, default_arguments:a}, call_deferred:{arguments:a, default_arguments:a}, callv:{arguments:a, b, default_arguments:a, b}, can_process:{arguments:, default_arguments:}, can_translate_messages:{arguments:, default_arguments:}, connect:{arguments:a, b, c, d, e, default_arguments:a, b, c, d = [], e = 0}, disconnect:{arguments:a, b, c, default_arguments:a, b, c}, divide:{arguments:a, b, default_arguments:a, b}, duplicate:{arguments:a, default_arguments:a = 15}, emit_signal:{arguments:a, default_arguments:a}, find_node:{arguments:a, b, c, default_arguments:a, b = True, c = True}, find_parent:{arguments:a, default_arguments:a}, free:{arguments:, default_arguments:}, get:{arguments:a, default_arguments:a}, get_child:{arguments:a, default_arguments:a}, get_child_count:{arguments:, default_arguments:}, get_children:{arguments:, default_arguments:}, get_class:{arguments:, default_arguments:}, get_custom_multiplayer:{arguments:, default_arguments:}, get_filename:{arguments:, default_arguments:}, get_groups:{arguments:, default_arguments:}, get_incoming_connections:{arguments:, default_arguments:}, get_index:{arguments:, default_arguments:}, get_indexed:{arguments:a, default_arguments:a}, get_instance_id:{arguments:, default_arguments:}, get_meta:{arguments:a, default_arguments:a}, get_meta_list:{arguments:, default_arguments:}, get_method_list:{arguments:, default_arguments:}, get_multiplayer:{arguments:, default_arguments:}, get_name:{arguments:, default_arguments:}, get_network_master:{arguments:, default_arguments:}, get_node:{arguments:a, default_arguments:a}, get_node_and_resource:{arguments:a, default_arguments:a}, get_node_or_null:{arguments:a, default_arguments:a}, get_owner:{arguments:, default_arguments:}, get_parent:{arguments:, default_arguments:}, get_path:{arguments:, default_arguments:}, get_path_to:{arguments:a, default_arguments:a}, get_pause_mode:{arguments:, default_arguments:}, get_physics_process_delta_time:{arguments:, default_arguments:}, get_position_in_parent:{arguments:, default_arguments:}, get_process_delta_time:{arguments:, default_arguments:}, get_process_priority:{arguments:, default_arguments:}, get_property_list:{arguments:, default_arguments:}, get_scene_instance_load_placeholder:{arguments:, default_arguments:}, get_script:{arguments:, default_arguments:}, get_signal_connection_list:{arguments:a, default_arguments:a}, get_signal_list:{arguments:, default_arguments:}, get_tree:{arguments:, default_arguments:}, get_viewport:{arguments:, default_arguments:}, has_meta:{arguments:a, default_arguments:a}, has_method:{arguments:a, default_arguments:a}, has_node:{arguments:a, default_arguments:a}, has_node_and_resource:{arguments:a, default_arguments:a}, has_signal:{arguments:a, default_arguments:a}, has_user_signal:{arguments:a, default_arguments:a}, is_a_parent_of:{arguments:a, default_arguments:a}, is_blocking_signals:{arguments:, default_arguments:}, is_class:{arguments:a, default_arguments:a}, is_connected:{arguments:a, b, c, default_arguments:a, b, c}, is_displayed_folded:{arguments:, default_arguments:}, is_greater_than:{arguments:a, default_arguments:a}, is_in_group:{arguments:a, default_arguments:a}, is_inside_tree:{arguments:, default_arguments:}, is_network_master:{arguments:, default_arguments:}, is_physics_processing:{arguments:, default_arguments:}, is_physics_processing_internal:{arguments:, default_arguments:}, is_processing:{arguments:, default_arguments:}, is_processing_input:{arguments:, default_arguments:}, is_processing_internal:{arguments:, default_arguments:}, is_processing_unhandled_input:{arguments:, default_arguments:}, is_processing_unhandled_key_input:{arguments:, default_arguments:}, is_queued_for_deletion:{arguments:, default_arguments:}, math_fight:{arguments:, default_arguments:}, move_child:{arguments:a, b, default_arguments:a, b}, multiply:{arguments:a, b, default_arguments:a, b}, notification:{arguments:a, b, default_arguments:a, b = False}, pi:{arguments:, default_arguments:}, print_stray_nodes:{arguments:, default_arguments:}, print_tree:{arguments:, default_arguments:}, print_tree_pretty:{arguments:, default_arguments:}, propagate_call:{arguments:a, b, c, default_arguments:a, b = [], c = False}, propagate_notification:{arguments:a, default_arguments:a}, property_list_changed_notify:{arguments:, default_arguments:}, queue_free:{arguments:, default_arguments:}, raise:{arguments:, default_arguments:}, remove_and_skip:{arguments:, default_arguments:}, remove_child:{arguments:a, default_arguments:a}, remove_from_group:{arguments:a, default_arguments:a}, remove_meta:{arguments:a, default_arguments:a}, replace_by:{arguments:a, b, default_arguments:a, b = False}, request_ready:{arguments:, default_arguments:}, rpc:{arguments:a, default_arguments:a}, rpc_config:{arguments:a, b, default_arguments:a, b}, rpc_id:{arguments:a, b, default_arguments:a, b}, rpc_unreliable:{arguments:a, default_arguments:a}, rpc_unreliable_id:{arguments:a, b, default_arguments:a, b}, rset:{arguments:a, b, default_arguments:a, b}, rset_config:{arguments:a, b, default_arguments:a, b}, rset_id:{arguments:a, b, c, default_arguments:a, b, c}, rset_unreliable:{arguments:a, b, default_arguments:a, b}, rset_unreliable_id:{arguments:a, b, c, default_arguments:a, b, c}, set:{arguments:a, b, default_arguments:a, b}, set_block_signals:{arguments:a, default_arguments:a}, set_custom_multiplayer:{arguments:a, default_arguments:a}, set_deferred:{arguments:a, b, default_arguments:a, b}, set_display_folded:{arguments:a, default_arguments:a}, set_filename:{arguments:a, default_arguments:a}, set_indexed:{arguments:a, b, default_arguments:a, b}, set_message_translation:{arguments:a, default_arguments:a}, set_meta:{arguments:a, b, default_arguments:a, b}, set_name:{arguments:a, default_arguments:a}, set_network_master:{arguments:a, b, default_arguments:a, b = True}, set_owner:{arguments:a, default_arguments:a}, set_pause_mode:{arguments:a, default_arguments:a}, set_physics_process:{arguments:a, default_arguments:a}, set_physics_process_internal:{arguments:a, default_arguments:a}, set_process:{arguments:a, default_arguments:a}, set_process_input:{arguments:a, default_arguments:a}, set_process_internal:{arguments:a, default_arguments:a}, set_process_priority:{arguments:a, default_arguments:a}, set_process_unhandled_input:{arguments:a, default_arguments:a}, set_process_unhandled_key_input:{arguments:a, default_arguments:a}, set_scene_instance_load_placeholder:{arguments:a, default_arguments:a}, set_script:{arguments:a, default_arguments:a}, subtract:{arguments:a, b, default_arguments:a, b}, sum:{arguments:a, default_arguments:a}, to_string:{arguments:, default_arguments:}, tr:{arguments:a, default_arguments:a}, update_configuration_warning:{arguments:, default_arguments:}} is not equal to |Dictionary| {_enter_tree:{arguments:, default_arguments:}, _exit_tree:{arguments:, default_arguments:}, _get:{arguments:a, default_arguments:a}, _get_configuration_warning:{arguments:, default_arguments:}, _get_editor_description:{arguments:, default_arguments:}, _get_import_path:{arguments:, default_arguments:}, _get_property_list:{arguments:, default_arguments:}, _init:{arguments:, default_arguments:}, _input:{arguments:a, default_arguments:a}, _notification:{arguments:a, default_arguments:a}, _physics_process:{arguments:a, default_arguments:a}, _process:{arguments:a, default_arguments:a}, _ready:{arguments:, default_arguments:}, _set:{arguments:a, b, default_arguments:a, b}, _set_editor_description:{arguments:a, default_arguments:a}, _set_import_path:{arguments:a, default_arguments:a}, _to_string:{arguments:, default_arguments:}, _unhandled_input:{arguments:a, default_arguments:a}, _unhandled_key_input:{arguments:a, default_arguments:a}, add:{arguments:a, b, default_arguments:a, b}, add_child:{arguments:a, b, default_arguments:a, b = False}, add_child_below_node:{arguments:a, b, c, default_arguments:a, b, c = False}, add_to_group:{arguments:a, b, default_arguments:a, b = False}, add_user_signal:{arguments:a, b, default_arguments:a, b = []}, call:{arguments:a, default_arguments:a}, call_deferred:{arguments:a, default_arguments:a}, callv:{arguments:a, b, default_arguments:a, b}, can_process:{arguments:, default_arguments:}, can_translate_messages:{arguments:, default_arguments:}, connect:{arguments:a, b, c, d, e, default_arguments:a, b, c, d = [], e = 0}, disconnect:{arguments:a, b, c, default_arguments:a, b, c}, divide:{arguments:a, b, default_arguments:a, b}, duplicate:{arguments:a, default_arguments:a = 15}, emit_signal:{arguments:a, default_arguments:a}, find_node:{arguments:a, b, c, default_arguments:a, b = True, c = True}, find_parent:{arguments:a, default_arguments:a}, free:{arguments:, default_arguments:}, get:{arguments:a, default_arguments:a}, get_child:{arguments:a, default_arguments:a}, get_child_count:{arguments:, default_arguments:}, get_children:{arguments:, default_arguments:}, get_class:{arguments:, default_arguments:}, get_custom_multiplayer:{arguments:, default_arguments:}, get_filename:{arguments:, default_arguments:}, get_groups:{arguments:, default_arguments:}, get_incoming_connections:{arguments:, default_arguments:}, get_index:{arguments:, default_arguments:}, get_indexed:{arguments:a, default_arguments:a}, get_instance_id:{arguments:, default_arguments:}, get_meta:{arguments:a, default_arguments:a}, get_meta_list:{arguments:, default_arguments:}, get_method_list:{arguments:, default_arguments:}, get_multiplayer:{arguments:, default_arguments:}, get_name:{arguments:, default_arguments:}, get_network_master:{arguments:, default_arguments:}, get_node:{arguments:a, default_arguments:a}, get_node_and_resource:{arguments:a, default_arguments:a}, get_node_or_null:{arguments:a, default_arguments:a}, get_owner:{arguments:, default_arguments:}, get_parent:{arguments:, default_arguments:}, get_path:{arguments:, default_arguments:}, get_path_to:{arguments:a, default_arguments:a}, get_pause_mode:{arguments:, default_arguments:}, get_physics_process_delta_time:{arguments:, default_arguments:}, get_position_in_parent:{arguments:, default_arguments:}, get_process_delta_time:{arguments:, default_arguments:}, get_process_priority:{arguments:, default_arguments:}, get_property_list:{arguments:, default_arguments:}, get_scene_instance_load_placeholder:{arguments:, default_arguments:}, get_script:{arguments:, default_arguments:}, get_signal_connection_list:{arguments:a, default_arguments:a}, get_signal_list:{arguments:, default_arguments:}, get_tree:{arguments:, default_arguments:}, get_viewport:{arguments:, default_arguments:}, has_meta:{arguments:a, default_arguments:a}, has_method:{arguments:a, default_arguments:a}, has_node:{arguments:a, default_arguments:a}, has_node_and_resource:{arguments:a, default_arguments:a}, has_signal:{arguments:a, default_arguments:a}, has_user_signal:{arguments:a, default_arguments:a}, is_a_parent_of:{arguments:a, default_arguments:a}, is_blocking_signals:{arguments:, default_arguments:}, is_class:{arguments:a, default_arguments:a}, is_connected:{arguments:a, b, c, default_arguments:a, b, c}, is_displayed_folded:{arguments:, default_arguments:}, is_greater_than:{arguments:a, default_arguments:a}, is_in_group:{arguments:a, default_arguments:a}, is_inside_tree:{arguments:, default_arguments:}, is_network_master:{arguments:, default_arguments:}, is_physics_processing:{arguments:, default_arguments:}, is_physics_processing_internal:{arguments:, default_arguments:}, is_processing:{arguments:, default_arguments:}, is_processing_input:{arguments:, default_arguments:}, is_processing_internal:{arguments:, default_arguments:}, is_processing_unhandled_input:{arguments:, default_arguments:}, is_processing_unhandled_key_input:{arguments:, default_arguments:}, is_queued_for_deletion:{arguments:, default_arguments:}, math_fight:{arguments:, default_arguments:}, move_child:{arguments:a, b, default_arguments:a, b}, multiply:{arguments:a, b, default_arguments:a, b}, notification:{arguments:a, b, default_arguments:a, b = False}, pi:{arguments:, default_arguments:}, print_stray_nodes:{arguments:, default_arguments:}, print_tree:{arguments:, default_arguments:}, print_tree_pretty:{arguments:, default_arguments:}, propagate_call:{arguments:a, b, c, default_arguments:a, b = [], c = False}, propagate_notification:{arguments:a, default_arguments:a}, property_list_changed_notify:{arguments:, default_arguments:}, queue_free:{arguments:, default_arguments:}, raise:{arguments:, default_arguments:}, remove_and_skip:{arguments:, default_arguments:}, remove_child:{arguments:a, default_arguments:a}, remove_from_group:{arguments:a, default_arguments:a}, remove_meta:{arguments:a, default_arguments:a}, replace_by:{arguments:a, b, default_arguments:a, b = False}, request_ready:{arguments:, default_arguments:}, rpc:{arguments:a, default_arguments:a}, rpc_config:{arguments:a, b, default_arguments:a, b}, rpc_id:{arguments:a, b, default_arguments:a, b}, rpc_unreliable:{arguments:a, default_arguments:a}, rpc_unreliable_id:{arguments:a, b, default_arguments:a, b}, rset:{arguments:a, b, default_arguments:a, b}, rset_config:{arguments:a, b, default_arguments:a, b}, rset_id:{arguments:a, b, c, default_arguments:a, b, c}, rset_unreliable:{arguments:a, b, default_arguments:a, b}, rset_unreliable_id:{arguments:a, b, c, default_arguments:a, b, c}, set:{arguments:a, b, default_arguments:a, b}, set_block_signals:{arguments:a, default_arguments:a}, set_custom_multiplayer:{arguments:a, default_arguments:a}, set_deferred:{arguments:a, b, default_arguments:a, b}, set_display_folded:{arguments:a, default_arguments:a}, set_filename:{arguments:a, default_arguments:a}, set_indexed:{arguments:a, b, default_arguments:a, b}, set_message_translation:{arguments:a, default_arguments:a}, set_meta:{arguments:a, b, default_arguments:a, b}, set_name:{arguments:a, default_arguments:a}, set_network_master:{arguments:a, b, default_arguments:a, b = True}, set_owner:{arguments:a, default_arguments:a}, set_pause_mode:{arguments:a, default_arguments:a}, set_physics_process:{arguments:a, default_arguments:a}, set_physics_process_internal:{arguments:a, default_arguments:a}, set_process:{arguments:a, default_arguments:a}, set_process_input:{arguments:a, default_arguments:a}, set_process_internal:{arguments:a, default_arguments:a}, set_process_priority:{arguments:a, default_arguments:a}, set_process_unhandled_input:{arguments:a, default_arguments:a}, set_process_unhandled_key_input:{arguments:a, default_arguments:a}, set_scene_instance_load_placeholder:{arguments:a, default_arguments:a}, set_script:{arguments:a, default_arguments:a}, subtract:{arguments:a, b, default_arguments:a, b}, sum:{arguments:a, default_arguments:a}, to_string:{arguments:, default_arguments:}, tr:{arguments:a, default_arguments:a}, update_configuration_warning:{arguments:, default_arguments:}}",
"context": "Then they do not share resources",
"expected": "|Dictionary| {_enter_tree:{arguments:, default_arguments:}, _exit_tree:{arguments:, default_arguments:}, _get:{arguments:a, default_arguments:a}, _get_configuration_warning:{arguments:, default_arguments:}, _get_editor_description:{arguments:, default_arguments:}, _get_import_path:{arguments:, default_arguments:}, _get_property_list:{arguments:, default_arguments:}, _init:{arguments:, default_arguments:}, _input:{arguments:a, default_arguments:a}, _notification:{arguments:a, default_arguments:a}, _physics_process:{arguments:a, default_arguments:a}, _process:{arguments:a, default_arguments:a}, _ready:{arguments:, default_arguments:}, _set:{arguments:a, b, default_arguments:a, b}, _set_editor_description:{arguments:a, default_arguments:a}, _set_import_path:{arguments:a, default_arguments:a}, _to_string:{arguments:, default_arguments:}, _unhandled_input:{arguments:a, default_arguments:a}, _unhandled_key_input:{arguments:a, default_arguments:a}, add:{arguments:a, b, default_arguments:a, b}, add_child:{arguments:a, b, default_arguments:a, b = False}, add_child_below_node:{arguments:a, b, c, default_arguments:a, b, c = False}, add_to_group:{arguments:a, b, default_arguments:a, b = False}, add_user_signal:{arguments:a, b, default_arguments:a, b = []}, call:{arguments:a, default_arguments:a}, call_deferred:{arguments:a, default_arguments:a}, callv:{arguments:a, b, default_arguments:a, b}, can_process:{arguments:, default_arguments:}, can_translate_messages:{arguments:, default_arguments:}, connect:{arguments:a, b, c, d, e, default_arguments:a, b, c, d = [], e = 0}, disconnect:{arguments:a, b, c, default_arguments:a, b, c}, divide:{arguments:a, b, default_arguments:a, b}, duplicate:{arguments:a, default_arguments:a = 15}, emit_signal:{arguments:a, default_arguments:a}, find_node:{arguments:a, b, c, default_arguments:a, b = True, c = True}, find_parent:{arguments:a, default_arguments:a}, free:{arguments:, default_arguments:}, get:{arguments:a, default_arguments:a}, get_child:{arguments:a, default_arguments:a}, get_child_count:{arguments:, default_arguments:}, get_children:{arguments:, default_arguments:}, get_class:{arguments:, default_arguments:}, get_custom_multiplayer:{arguments:, default_arguments:}, get_filename:{arguments:, default_arguments:}, get_groups:{arguments:, default_arguments:}, get_incoming_connections:{arguments:, default_arguments:}, get_index:{arguments:, default_arguments:}, get_indexed:{arguments:a, default_arguments:a}, get_instance_id:{arguments:, default_arguments:}, get_meta:{arguments:a, default_arguments:a}, get_meta_list:{arguments:, default_arguments:}, get_method_list:{arguments:, default_arguments:}, get_multiplayer:{arguments:, default_arguments:}, get_name:{arguments:, default_arguments:}, get_network_master:{arguments:, default_arguments:}, get_node:{arguments:a, default_arguments:a}, get_node_and_resource:{arguments:a, default_arguments:a}, get_node_or_null:{arguments:a, default_arguments:a}, get_owner:{arguments:, default_arguments:}, get_parent:{arguments:, default_arguments:}, get_path:{arguments:, default_arguments:}, get_path_to:{arguments:a, default_arguments:a}, get_pause_mode:{arguments:, default_arguments:}, get_physics_process_delta_time:{arguments:, default_arguments:}, get_position_in_parent:{arguments:, default_arguments:}, get_process_delta_time:{arguments:, default_arguments:}, get_process_priority:{arguments:, default_arguments:}, get_property_list:{arguments:, default_arguments:}, get_scene_instance_load_placeholder:{arguments:, default_arguments:}, get_script:{arguments:, default_arguments:}, get_signal_connection_list:{arguments:a, default_arguments:a}, get_signal_list:{arguments:, default_arguments:}, get_tree:{arguments:, default_arguments:}, get_viewport:{arguments:, default_arguments:}, has_meta:{arguments:a, default_arguments:a}, has_method:{arguments:a, default_arguments:a}, has_node:{arguments:a, default_arguments:a}, has_node_and_resource:{arguments:a, default_arguments:a}, has_signal:{arguments:a, default_arguments:a}, has_user_signal:{arguments:a, default_arguments:a}, is_a_parent_of:{arguments:a, default_arguments:a}, is_blocking_signals:{arguments:, default_arguments:}, is_class:{arguments:a, default_arguments:a}, is_connected:{arguments:a, b, c, default_arguments:a, b, c}, is_displayed_folded:{arguments:, default_arguments:}, is_greater_than:{arguments:a, default_arguments:a}, is_in_group:{arguments:a, default_arguments:a}, is_inside_tree:{arguments:, default_arguments:}, is_network_master:{arguments:, default_arguments:}, is_physics_processing:{arguments:, default_arguments:}, is_physics_processing_internal:{arguments:, default_arguments:}, is_processing:{arguments:, default_arguments:}, is_processing_input:{arguments:, default_arguments:}, is_processing_internal:{arguments:, default_arguments:}, is_processing_unhandled_input:{arguments:, default_arguments:}, is_processing_unhandled_key_input:{arguments:, default_arguments:}, is_queued_for_deletion:{arguments:, default_arguments:}, math_fight:{arguments:, default_arguments:}, move_child:{arguments:a, b, default_arguments:a, b}, multiply:{arguments:a, b, default_arguments:a, b}, notification:{arguments:a, b, default_arguments:a, b = False}, pi:{arguments:, default_arguments:}, print_stray_nodes:{arguments:, default_arguments:}, print_tree:{arguments:, default_arguments:}, print_tree_pretty:{arguments:, default_arguments:}, propagate_call:{arguments:a, b, c, default_arguments:a, b = [], c = False}, propagate_notification:{arguments:a, default_arguments:a}, property_list_changed_notify:{arguments:, default_arguments:}, queue_free:{arguments:, default_arguments:}, raise:{arguments:, default_arguments:}, remove_and_skip:{arguments:, default_arguments:}, remove_child:{arguments:a, default_arguments:a}, remove_from_group:{arguments:a, default_arguments:a}, remove_meta:{arguments:a, default_arguments:a}, replace_by:{arguments:a, b, default_arguments:a, b = False}, request_ready:{arguments:, default_arguments:}, rpc:{arguments:a, default_arguments:a}, rpc_config:{arguments:a, b, default_arguments:a, b}, rpc_id:{arguments:a, b, default_arguments:a, b}, rpc_unreliable:{arguments:a, default_arguments:a}, rpc_unreliable_id:{arguments:a, b, default_arguments:a, b}, rset:{arguments:a, b, default_arguments:a, b}, rset_config:{arguments:a, b, default_arguments:a, b}, rset_id:{arguments:a, b, c, default_arguments:a, b, c}, rset_unreliable:{arguments:a, b, default_arguments:a, b}, rset_unreliable_id:{arguments:a, b, c, default_arguments:a, b, c}, set:{arguments:a, b, default_arguments:a, b}, set_block_signals:{arguments:a, default_arguments:a}, set_custom_multiplayer:{arguments:a, default_arguments:a}, set_deferred:{arguments:a, b, default_arguments:a, b}, set_display_folded:{arguments:a, default_arguments:a}, set_filename:{arguments:a, default_arguments:a}, set_indexed:{arguments:a, b, default_arguments:a, b}, set_message_translation:{arguments:a, default_arguments:a}, set_meta:{arguments:a, b, default_arguments:a, b}, set_name:{arguments:a, default_arguments:a}, set_network_master:{arguments:a, b, default_arguments:a, b = True}, set_owner:{arguments:a, default_arguments:a}, set_pause_mode:{arguments:a, default_arguments:a}, set_physics_process:{arguments:a, default_arguments:a}, set_physics_process_internal:{arguments:a, default_arguments:a}, set_process:{arguments:a, default_arguments:a}, set_process_input:{arguments:a, default_arguments:a}, set_process_internal:{arguments:a, default_arguments:a}, set_process_priority:{arguments:a, default_arguments:a}, set_process_unhandled_input:{arguments:a, default_arguments:a}, set_process_unhandled_key_input:{arguments:a, default_arguments:a}, set_scene_instance_load_placeholder:{arguments:a, default_arguments:a}, set_script:{arguments:a, default_arguments:a}, subtract:{arguments:a, b, default_arguments:a, b}, sum:{arguments:a, default_arguments:a}, to_string:{arguments:, default_arguments:}, tr:{arguments:a, default_arguments:a}, update_configuration_warning:{arguments:, default_arguments:}} != |Dictionary| {_enter_tree:{arguments:, default_arguments:}, _exit_tree:{arguments:, default_arguments:}, _get:{arguments:a, default_arguments:a}, _get_configuration_warning:{arguments:, default_arguments:}, _get_editor_description:{arguments:, default_arguments:}, _get_import_path:{arguments:, default_arguments:}, _get_property_list:{arguments:, default_arguments:}, _init:{arguments:, default_arguments:}, _input:{arguments:a, default_arguments:a}, _notification:{arguments:a, default_arguments:a}, _physics_process:{arguments:a, default_arguments:a}, _process:{arguments:a, default_arguments:a}, _ready:{arguments:, default_arguments:}, _set:{arguments:a, b, default_arguments:a, b}, _set_editor_description:{arguments:a, default_arguments:a}, _set_import_path:{arguments:a, default_arguments:a}, _to_string:{arguments:, default_arguments:}, _unhandled_input:{arguments:a, default_arguments:a}, _unhandled_key_input:{arguments:a, default_arguments:a}, add:{arguments:a, b, default_arguments:a, b}, add_child:{arguments:a, b, default_arguments:a, b = False}, add_child_below_node:{arguments:a, b, c, default_arguments:a, b, c = False}, add_to_group:{arguments:a, b, default_arguments:a, b = False}, add_user_signal:{arguments:a, b, default_arguments:a, b = []}, call:{arguments:a, default_arguments:a}, call_deferred:{arguments:a, default_arguments:a}, callv:{arguments:a, b, default_arguments:a, b}, can_process:{arguments:, default_arguments:}, can_translate_messages:{arguments:, default_arguments:}, connect:{arguments:a, b, c, d, e, default_arguments:a, b, c, d = [], e = 0}, disconnect:{arguments:a, b, c, default_arguments:a, b, c}, divide:{arguments:a, b, default_arguments:a, b}, duplicate:{arguments:a, default_arguments:a = 15}, emit_signal:{arguments:a, default_arguments:a}, find_node:{arguments:a, b, c, default_arguments:a, b = True, c = True}, find_parent:{arguments:a, default_arguments:a}, free:{arguments:, default_arguments:}, get:{arguments:a, default_arguments:a}, get_child:{arguments:a, default_arguments:a}, get_child_count:{arguments:, default_arguments:}, get_children:{arguments:, default_arguments:}, get_class:{arguments:, default_arguments:}, get_custom_multiplayer:{arguments:, default_arguments:}, get_filename:{arguments:, default_arguments:}, get_groups:{arguments:, default_arguments:}, get_incoming_connections:{arguments:, default_arguments:}, get_index:{arguments:, default_arguments:}, get_indexed:{arguments:a, default_arguments:a}, get_instance_id:{arguments:, default_arguments:}, get_meta:{arguments:a, default_arguments:a}, get_meta_list:{arguments:, default_arguments:}, get_method_list:{arguments:, default_arguments:}, get_multiplayer:{arguments:, default_arguments:}, get_name:{arguments:, default_arguments:}, get_network_master:{arguments:, default_arguments:}, get_node:{arguments:a, default_arguments:a}, get_node_and_resource:{arguments:a, default_arguments:a}, get_node_or_null:{arguments:a, default_arguments:a}, get_owner:{arguments:, default_arguments:}, get_parent:{arguments:, default_arguments:}, get_path:{arguments:, default_arguments:}, get_path_to:{arguments:a, default_arguments:a}, get_pause_mode:{arguments:, default_arguments:}, get_physics_process_delta_time:{arguments:, default_arguments:}, get_position_in_parent:{arguments:, default_arguments:}, get_process_delta_time:{arguments:, default_arguments:}, get_process_priority:{arguments:, default_arguments:}, get_property_list:{arguments:, default_arguments:}, get_scene_instance_load_placeholder:{arguments:, default_arguments:}, get_script:{arguments:, default_arguments:}, get_signal_connection_list:{arguments:a, default_arguments:a}, get_signal_list:{arguments:, default_arguments:}, get_tree:{arguments:, default_arguments:}, get_viewport:{arguments:, default_arguments:}, has_meta:{arguments:a, default_arguments:a}, has_method:{arguments:a, default_arguments:a}, has_node:{arguments:a, default_arguments:a}, has_node_and_resource:{arguments:a, default_arguments:a}, has_signal:{arguments:a, default_arguments:a}, has_user_signal:{arguments:a, default_arguments:a}, is_a_parent_of:{arguments:a, default_arguments:a}, is_blocking_signals:{arguments:, default_arguments:}, is_class:{arguments:a, default_arguments:a}, is_connected:{arguments:a, b, c, default_arguments:a, b, c}, is_displayed_folded:{arguments:, default_arguments:}, is_greater_than:{arguments:a, default_arguments:a}, is_in_group:{arguments:a, default_arguments:a}, is_inside_tree:{arguments:, default_arguments:}, is_network_master:{arguments:, default_arguments:}, is_physics_processing:{arguments:, default_arguments:}, is_physics_processing_internal:{arguments:, default_arguments:}, is_processing:{arguments:, default_arguments:}, is_processing_input:{arguments:, default_arguments:}, is_processing_internal:{arguments:, default_arguments:}, is_processing_unhandled_input:{arguments:, default_arguments:}, is_processing_unhandled_key_input:{arguments:, default_arguments:}, is_queued_for_deletion:{arguments:, default_arguments:}, math_fight:{arguments:, default_arguments:}, move_child:{arguments:a, b, default_arguments:a, b}, multiply:{arguments:a, b, default_arguments:a, b}, notification:{arguments:a, b, default_arguments:a, b = False}, pi:{arguments:, default_arguments:}, print_stray_nodes:{arguments:, default_arguments:}, print_tree:{arguments:, default_arguments:}, print_tree_pretty:{arguments:, default_arguments:}, propagate_call:{arguments:a, b, c, default_arguments:a, b = [], c = False}, propagate_notification:{arguments:a, default_arguments:a}, property_list_changed_notify:{arguments:, default_arguments:}, queue_free:{arguments:, default_arguments:}, raise:{arguments:, default_arguments:}, remove_and_skip:{arguments:, default_arguments:}, remove_child:{arguments:a, default_arguments:a}, remove_from_group:{arguments:a, default_arguments:a}, remove_meta:{arguments:a, default_arguments:a}, replace_by:{arguments:a, b, default_arguments:a, b = False}, request_ready:{arguments:, default_arguments:}, rpc:{arguments:a, default_arguments:a}, rpc_config:{arguments:a, b, default_arguments:a, b}, rpc_id:{arguments:a, b, default_arguments:a, b}, rpc_unreliable:{arguments:a, default_arguments:a}, rpc_unreliable_id:{arguments:a, b, default_arguments:a, b}, rset:{arguments:a, b, default_arguments:a, b}, rset_config:{arguments:a, b, default_arguments:a, b}, rset_id:{arguments:a, b, c, default_arguments:a, b, c}, rset_unreliable:{arguments:a, b, default_arguments:a, b}, rset_unreliable_id:{arguments:a, b, c, default_arguments:a, b, c}, set:{arguments:a, b, default_arguments:a, b}, set_block_signals:{arguments:a, default_arguments:a}, set_custom_multiplayer:{arguments:a, default_arguments:a}, set_deferred:{arguments:a, b, default_arguments:a, b}, set_display_folded:{arguments:a, default_arguments:a}, set_filename:{arguments:a, default_arguments:a}, set_indexed:{arguments:a, b, default_arguments:a, b}, set_message_translation:{arguments:a, default_arguments:a}, set_meta:{arguments:a, b, default_arguments:a, b}, set_name:{arguments:a, default_arguments:a}, set_network_master:{arguments:a, b, default_arguments:a, b = True}, set_owner:{arguments:a, default_arguments:a}, set_pause_mode:{arguments:a, default_arguments:a}, set_physics_process:{arguments:a, default_arguments:a}, set_physics_process_internal:{arguments:a, default_arguments:a}, set_process:{arguments:a, default_arguments:a}, set_process_input:{arguments:a, default_arguments:a}, set_process_internal:{arguments:a, default_arguments:a}, set_process_priority:{arguments:a, default_arguments:a}, set_process_unhandled_input:{arguments:a, default_arguments:a}, set_process_unhandled_key_input:{arguments:a, default_arguments:a}, set_scene_instance_load_placeholder:{arguments:a, default_arguments:a}, set_script:{arguments:a, default_arguments:a}, subtract:{arguments:a, b, default_arguments:a, b}, sum:{arguments:a, default_arguments:a}, to_string:{arguments:, default_arguments:}, tr:{arguments:a, default_arguments:a}, update_configuration_warning:{arguments:, default_arguments:}}",
"success": true
} ],
"context": "When we create two of it for the same script",
"fullname": "test_When_we_create_two_of_it_for_the_same_script",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|Object| [Node:5779] is equal to |Object| [Node:5779]",
"context": "Then we get the same double back",
"expected": "|Object| [Node:5779] is equal to |Object| [Node:5779]",
"success": true
} ],
"context": "When we call the double the second time",
"fullname": "test_When_we_call_double_a_second_time_on",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 3,
"path": "res://tests/integration/script_director.test.gd",
"source": {
"containers": [ "res://tests/integration", "res://tests" ],
"method": "",
"path": "res://tests/integration/script_director.test.gd",
"tags": [  ],
"test": ExtResource( 13 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 3
}, {
"context": "Given a Scene Director",
"methods": [ {
"assertions": [ {
"actual": "|Dictionary| {.:[Reference:5683], A:[Reference:5684], A/B:[Reference:5686], C:[Reference:5685], C/D:[Reference:5687]} is not equal to |Dictionary| {.:[Reference:5698], A:[Reference:5699], A/B:[Reference:5701], C:[Reference:5700], C/D:[Reference:5702]}",
"context": "Then they do not share resources",
"expected": "|Dictionary| {.:[Reference:5683], A:[Reference:5684], A/B:[Reference:5686], C:[Reference:5685], C/D:[Reference:5687]} != |Dictionary| {.:[Reference:5698], A:[Reference:5699], A/B:[Reference:5701], C:[Reference:5700], C/D:[Reference:5702]}",
"success": true
} ],
"context": "When we create two of it for the same scene",
"fullname": "test_When_we_create_two_of_it_for_the_same_scene",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 999 is equal to |int| 999",
"context": "Then we get the stubbed return value",
"expected": "|int| 999 is equal to |int| 999",
"success": true
} ],
"context": "When we call a method from a child node that we stubbed",
"fullname": "test_When_we_call_a_method_from_a_child_node_that_we_stubbed",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 9999 is equal to |int| 9999",
"context": "Then we get the stubbed return value",
"expected": "|int| 9999 is equal to |int| 9999",
"success": true
} ],
"context": "When we call a method from the root node that we stubbed",
"fullname": "test_When_we_call_a_method_from_the_root_node_that_we_stubbed",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 99 is equal to |int| 99",
"context": "Then we get the stubbed return value",
"expected": "|int| 99 is equal to |int| 99",
"success": true
} ],
"context": "When we call a method from a grandchild node that we stubbed",
"fullname": "test_When_we_call_a_method_from_a_grandchild_node_that_we_stubbed",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|NodePath| A is equal to |NodePath| A",
"context": "We have the correct NodePath Set",
"expected": "|NodePath| A is equal to |NodePath| A",
"success": true
} ],
"context": "When we add it to the tree it runs",
"fullname": "test_When_we_add_it_to_the_tree_it_runs",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 5,
"path": "res://tests/integration/scene_director.test.gd",
"source": {
"containers": [ "res://tests/integration", "res://tests" ],
"method": "",
"path": "res://tests/integration/scene_director.test.gd",
"tags": [  ],
"test": ExtResource( 4 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 5
}, {
"context": "Given a Boolean Assertion",
"methods": [ {
"assertions": [ {
"actual": "|bool| True != false",
"context": "",
"expected": "|bool| True == false",
"success": false
} ],
"context": " intentional failure",
"fullname": "test_intentional_failure",
"passed": 0,
"success": false,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then it passes",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When calling asserts.is_true(true)",
"fullname": "test_when_calling_asserts_is_true",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| False == false",
"context": "Then it passes",
"expected": "|bool| False == false",
"success": true
} ],
"context": "When calling asserts.is_false(false)",
"fullname": "test_when_calling_asserts_is_false",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 2,
"path": "res://tests/unit/boolean.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/boolean.test.gd",
"tags": [  ],
"test": ExtResource( 11 ),
"yield_time": 0.0
},
"success": false,
"time_taken": 0.0,
"total": 3
}, {
"context": "Given an Equality Assertion",
"methods": [ {
"assertions": [ {
"actual": "|int| 1 is equal to |int| 1",
"context": "Then it passes",
"expected": "|int| 1 is equal to |int| 1",
"success": true
} ],
"context": "When calling asserts.is_equal(1, 1)",
"fullname": "test_when_calling_is_equal",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 2 is equal or greater |int| 1",
"context": "Then it passes",
"expected": "|int| 2 is equal or greater |int| 1",
"success": true
} ],
"context": "When calling asserts.is_equal_or_greater_than(2, 1)",
"fullname": "test_when_calling_is_equal_or_greater_than",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 2 is greater than |int| 1",
"context": "Then it passes",
"expected": "|int| 2 is greater than |int| 1",
"success": true
} ],
"context": "When calling asserts.is_greater_than(2, 1)",
"fullname": "test_when_calling_is_greater_than",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 1 is less than |int| 2",
"context": "Then it passes",
"expected": "|int| 1 is less than |int| 2",
"success": true
} ],
"context": "When calling asserts.is_less_than(2, 1)",
"fullname": "test_when_calling_is_less_than",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 5 is not equal to |int| 6",
"context": "Then it passes",
"expected": "|int| 5 != |int| 6",
"success": true
} ],
"context": "When callign asserts.is_not_equal(5, 6)",
"fullname": "test_when_calling_is_not_equal",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 1 is equal or less than |int| 1",
"context": "Then it passes!",
"expected": "|int| 1 is equal or less than |int| 1",
"success": true
} ],
"context": "When calling asserts.is_equal_or_less_than(1, 1)",
"fullname": "test_when_calling_is_equal_or_less_than_with_equal_values",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 1 is equal or greater |int| 1",
"context": "Then it passes",
"expected": "|int| 1 is equal or greater |int| 1",
"success": true
} ],
"context": "When calling asserts.is_equal_or_greater_than(1, 1)",
"fullname": "test_when_calling_is_equal_or_greater_than_with_equal_values",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 7,
"path": "res://tests/unit/equality.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/equality.test.gd",
"tags": [  ],
"test": ExtResource( 8 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 7
}, {
"context": "Given A File Assertion",
"methods": [ {
"assertions": [ {
"actual": "res://somefile.gd does not exist",
"context": "Then it passes",
"expected": "res://somefile.gd does not exist",
"success": true
} ],
"context": "When calling asserts.file_does_not_exist when there is no file",
"fullname": "test_when_calling_file_does_not_exist_when_there_is_no_file",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "res://tests/unit/file.test.gd exists",
"context": "Then it passes",
"expected": "res://tests/unit/file.test.gd exists",
"success": true
} ],
"context": "When calling asserts.file_exists when the file is this suite",
"fullname": "test_when_calling_file_exists_when_file_is_self",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": " does not exist",
"context": "Then it passes",
"expected": " does not exist",
"success": true
} ],
"context": "When calling asserts file does not exist when path is empty",
"fullname": "test_when_calling_file_does_not_exist_when_path_is_empty",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 3,
"path": "res://tests/unit/file.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/file.test.gd",
"tags": [  ],
"test": ExtResource( 3 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 3
}, {
"context": "Given a Test Double",
"methods": [ {
"assertions": [ {
"actual": "|int| 9999 is equal to |int| 9999",
"context": "Then it returns the corresponding value when the pattern matches",
"expected": "|int| 9999 is equal to |int| 9999",
"success": true
} ],
"context": "When we call a method that was stubbed with an argument pattern that includes a non-primitive object",
"fullname": "test_When_we_call_a_method_that_was_stubbed_with_an_argument_pattern_that_includes_a_non_primitive_object",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 9999 is equal to |int| 9999",
"context": "Then it returns the corresponding value when the partial pattern matches",
"expected": "|int| 9999 is equal to |int| 9999",
"success": true
} ],
"context": "When we call a method that was stubbed with a partial (ie using any()) argument pattern",
"fullname": "test_When_we_call_a_method_that_was_stubbed_with_a_partial_argument_pattern",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|null| Null == null",
"context": "Then we get the stubbed value back",
"expected": "|null| Null == null",
"success": true
} ],
"context": "When we stub a method of a doubled inner class",
"fullname": "test_When_we_stub_a_method_of_a_double_inner_class",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|String| Jackie is equal to |String| Jackie",
"context": "Then we can double the object successfully",
"expected": "|String| Jackie is equal to |String| Jackie",
"success": true
} ],
"context": "When we pass in dependecies on direct",
"fullname": "test_When_we_pass_in_deps_on_direct",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 99 is equal to |int| 99",
"context": "Then it returns a value",
"expected": "|int| 99 is equal to |int| 99",
"success": true
} ],
"context": "When we pass a funcref as a subcall that returns",
"fullname": "test_When_we_pass_a_funcref_as_a_subcall_that_returns_a_value",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 99 is equal to |int| 99",
"context": "Then it affects the state of the double",
"expected": "|int| 99 is equal to |int| 99",
"success": true
} ],
"context": "When we pass a funcref as a subcall",
"fullname": "test_When_we_pass_a_funcref_as_a_subcall",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|Array| [10, 5] is equal to |Array| [10, 5]",
"context": "Then it returns a value",
"expected": "|Array| [10, 5] is equal to |Array| [10, 5]",
"success": true
} ],
"context": "When we pass an Object with a call_func function",
"fullname": "test_When_we_pass_an_object_with_callfunc_method_as_a_subcall",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 4 is equal to |int| 4",
"context": "Then it calls its super implementation by default",
"expected": "|int| 4 is equal to |int| 4",
"success": true
}, {
"actual": "|int| 9999 is equal to |int| 9999",
"context": "Then it does not call its super implementation when arguments patterns match a different return value",
"expected": "|int| 9999 is equal to |int| 9999",
"success": true
} ],
"context": "When we call a method that we stubbed to call its super implementation by default",
"fullname": "test_When_we_call_a_method_that_we_stubbed_to_call_its_super_implementation_by_default",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|int| 4 is equal to |int| 4",
"context": "Then we get the correct result",
"expected": "|int| 4 is equal to |int| 4",
"success": true
} ],
"context": "When we call an add(x, y) method that we haven't directed",
"fullname": "test_When_we_call_an_add_method_that_we_have_not_directed",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then it returns true",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we call a method that we have stubbed to return true",
"fullname": "test_When_we_call_a_method_that_we_have_stubbed_to_return_true",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|Object| [Node:5927] is equal to |Object| [Node:5927]",
"context": "Then it returns that same node",
"expected": "|Object| [Node:5927] is equal to |Object| [Node:5927]",
"success": true
} ],
"context": "When we call a method that we have stubbed to return a node",
"fullname": "test_When_we_call_a_method_that_we_have_stubbed_to_return_a_node",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|float| 6.283185 is equal to |float| 6.283185",
"context": "Then we can call the static methods of that inner double",
"expected": "|float| 6.283185 is equal to |float| 6.283185",
"success": true
} ],
"context": "When we add an doubled inner class to it",
"fullname": "test_When_we_add_a_doubled_inner_class_to_it",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "(1, 1) is builtin: Vector2",
"context": "Then we can call methods on it",
"expected": "(1, 1) is builtin: Vector2",
"success": true
} ],
"context": "When we double an inner class",
"fullname": "test_When_we_double_an_inner_class",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 100 is equal to |int| 100",
"context": "Then it returns the default stubbed value when the arguments don't match any pattern",
"expected": "|int| 100 is equal to |int| 100",
"success": true
}, {
"actual": "|int| 1000 is equal to |int| 1000",
"context": "Then it returns the the corresponding value to the pattern the arguments matched",
"expected": "|int| 1000 is equal to |int| 1000",
"success": true
} ],
"context": "When we call a method that was stubbed to return different values based on argument patterns",
"fullname": "test_When_we_call_a_method_that_was_stubbed_to_return_different_values_based_on_argument_patterns",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "add was called",
"context": "Then we can see that it was called at least once",
"expected": "add was called",
"success": true
} ],
"context": "When we call a method that we are spying on",
"fullname": "test_When_we_call_a_method_that_we_are_spying_on",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "method: add was called with arguments: [10, 10]",
"context": "Then we can see that it was called with those arguments",
"expected": "method: add was called with arguments: [10, 10]",
"success": true
} ],
"context": "When we pass arguments to a method call that we are spying on",
"fullname": "test_When_we_pass_arguments_to_a_method_call_that_we_are_spying_on",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| True is equal to |bool| True",
"context": "Then we can call it",
"expected": "|bool| True is equal to |bool| True",
"success": true
} ],
"context": "When we stubbed a keyworded method by passing in the correct keyword",
"fullname": "test_When_we_stubbed_a_keyword_method_by_passing_in_the_correct_keyword",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|String| Jackie is equal to |String| Jackie",
"context": "Then we can double the object successfully",
"expected": "|String| Jackie is equal to |String| Jackie",
"success": true
} ],
"context": "When we pass in dependecies on double",
"fullname": "test_When_we_pass_in_deps_on_double",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|null| Null == null",
"context": "Then we get null",
"expected": "|null| Null == null",
"success": true
} ],
"context": "When we call a method that we have dummied",
"fullname": "test_When_we_call_a_method_that_we_have_dummied",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 19,
"path": "res://tests/integration/test_double.test.gd",
"source": {
"containers": [ "res://tests/integration", "res://tests" ],
"method": "",
"path": "res://tests/integration/test_double.test.gd",
"tags": [  ],
"test": ExtResource( 14 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 19
}, {
"context": "Given an Is Instance of class/type Assertion",
"methods": [ {
"assertions": [ {
"actual": "|Plane| 0, 0, 0, 0 != null",
"context": "plane is not null",
"expected": "|Plane| 0, 0, 0, 0 != null",
"success": true
}, {
"actual": "0, 0, 0, 0 is builtin: Plane",
"context": "then it passes",
"expected": "0, 0, 0, 0 is builtin: Plane",
"success": true
} ],
"context": "When calling asserts.is_Plane(plane: Plane())",
"fullname": "test_when_calling_is_Plane",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|AABB| 0, 0, 0 - 0, 0, 0 != null",
"context": "AABB is not null",
"expected": "|AABB| 0, 0, 0 - 0, 0, 0 != null",
"success": true
}, {
"actual": "0, 0, 0 - 0, 0, 0 is builtin: AABB",
"context": "Then it passes",
"expected": "0, 0, 0 - 0, 0, 0 is builtin: AABB",
"success": true
} ],
"context": "When calling asserts.is_AABB(aabb: AABB)",
"fullname": "test_when_calling_is_AABB",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "{} is builtin: Dictionary",
"context": "Then it passes",
"expected": "{} is builtin: Dictionary",
"success": true
} ],
"context": "When calling asserts.is_Dictionary({})",
"fullname": "test_when_calling_is_Dictionary",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|PoolVector2Array| [] != null",
"context": "vec2s is not null",
"expected": "|PoolVector2Array| [] != null",
"success": true
}, {
"actual": "[] is builtin: PoolVector2Array",
"context": "Then it passes",
"expected": "[] is builtin: PoolVector2Array",
"success": true
} ],
"context": "When calling is asserts.is_PoolVector2Array(vec2s: PoolVector2Array)",
"fullname": "test_when_calling_is_PoolVector2Array",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|Rect2| (0, 0, 0, 0) != null",
"context": "rect2 is not null",
"expected": "|Rect2| (0, 0, 0, 0) != null",
"success": true
}, {
"actual": "(0, 0, 0, 0) is builtin: Rect2",
"context": "Then it passes",
"expected": "(0, 0, 0, 0) is builtin: Rect2",
"success": true
} ],
"context": "When calling asserts.is_Rect2(rect2: Rect2)",
"fullname": "test_when_calling_is_Rect2",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|PoolVector3Array| [] != null",
"context": "vec3s is not null",
"expected": "|PoolVector3Array| [] != null",
"success": true
}, {
"actual": "[] is builtin: PoolVector3Array",
"context": "Then it passes",
"expected": "[] is builtin: PoolVector3Array",
"success": true
} ],
"context": "When calling is asserts.is_PoolVector3Array(vec3s: PoolVector3Array)",
"fullname": "test_when_calling_is_PoolVector3Array",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|PoolRealArray| [] != null",
"context": "reals is not null",
"expected": "|PoolRealArray| [] != null",
"success": true
}, {
"actual": "[] is builtin: PoolRealArray",
"context": "Then it passes",
"expected": "[] is builtin: PoolRealArray",
"success": true
} ],
"context": "When calling is asserts.is_PoolRealArray(reals: PoolRealArray)",
"fullname": "test_when_calling_is_PoolRealArray",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|Quat| (0, 0, 0, 1) != null",
"context": "quat is not null",
"expected": "|Quat| (0, 0, 0, 1) != null",
"success": true
}, {
"actual": "(0, 0, 0, 1) is builtin: Quat",
"context": "Then it passes",
"expected": "(0, 0, 0, 1) is builtin: Quat",
"success": true
} ],
"context": "When calling asserts.is_Quat(quat: Quat)",
"fullname": "test_when_calling_is_Quat",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|RID| [RID] != null",
"context": "rid is not null",
"expected": "|RID| [RID] != null",
"success": true
}, {
"actual": "[RID] is builtin: RID",
"context": "Then it passes",
"expected": "[RID] is builtin: RID",
"success": true
} ],
"context": "When calling asserts.is_RID(rid: RID)",
"fullname": "test_when_calling_is_RID",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|Color| 0,0,0,1 != null",
"context": "color is not null",
"expected": "|Color| 0,0,0,1 != null",
"success": true
}, {
"actual": "0,0,0,1 is builtin: Color",
"context": "Then it passes",
"expected": "0,0,0,1 is builtin: Color",
"success": true
} ],
"context": "When calling asserts.is_color(color: Color)",
"fullname": "test_when_calling_is_Color",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|String|  != null",
"context": "strs is not null",
"expected": "|String|  != null",
"success": true
}, {
"actual": " is builtin: String",
"context": "Then it passes",
"expected": " is builtin: String",
"success": true
} ],
"context": "When calling asserts.is_string(strs: String)",
"fullname": "test_when_calling_is_string",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|Transform| 1, 0, 0, 0, 1, 0, 0, 0, 1 - 0, 0, 0 != null",
"context": "transform is not null",
"expected": "|Transform| 1, 0, 0, 0, 1, 0, 0, 0, 1 - 0, 0, 0 != null",
"success": true
}, {
"actual": "1, 0, 0, 0, 1, 0, 0, 0, 1 - 0, 0, 0 is builtin: Transform",
"context": "Then it passes",
"expected": "1, 0, 0, 0, 1, 0, 0, 0, 1 - 0, 0, 0 is builtin: Transform",
"success": true
} ],
"context": "When calling asserts.is_Transform(transform: Transform)",
"fullname": "test_when_calling_is_Transform",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|Transform2D| ((1, 0), (0, 1), (0, 0)) != null",
"context": "transform2D is not null",
"expected": "|Transform2D| ((1, 0), (0, 1), (0, 0)) != null",
"success": true
}, {
"actual": "((1, 0), (0, 1), (0, 0)) is builtin: Transform2D",
"context": "Then it passes",
"expected": "((1, 0), (0, 1), (0, 0)) is builtin: Transform2D",
"success": true
} ],
"context": "When calling asserts.is_Transform(transform2D: Transform2D)",
"fullname": "test_when_calling_is_Transform2D",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|Array| [] != null",
"context": "array is not null",
"expected": "|Array| [] != null",
"success": true
}, {
"actual": "[] is builtin: Array",
"context": "Then it passes",
"expected": "[] is builtin: Array",
"success": true
} ],
"context": "When calling asserts.is_Array(array: Array)",
"fullname": "test_when_calling_is_Array",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|Vector2| (0, 0) != null",
"context": "vec2 is not null",
"expected": "|Vector2| (0, 0) != null",
"success": true
}, {
"actual": "(0, 0) is builtin: Vector2",
"context": "Then it passes",
"expected": "(0, 0) is builtin: Vector2",
"success": true
} ],
"context": "When calling asserts.is_Vector2(vec2)",
"fullname": "test_when_calling_is_Vector2",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|PoolStringArray| [] != null",
"context": "strs is not null",
"expected": "|PoolStringArray| [] != null",
"success": true
}, {
"actual": "[] is builtin: PoolStringArray",
"context": "Then it passes",
"expected": "[] is builtin: PoolStringArray",
"success": true
} ],
"context": "When calling is asserts.is_PoolStringArray(strs: PoolStringArray)",
"fullname": "test_when_calling_is_PoolStringArray",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|NodePath| . != null",
"context": "@'Parent/Child' is not null",
"expected": "|NodePath| . != null",
"success": true
}, {
"actual": ". is builtin: NodePath",
"context": "Then it passes",
"expected": ". is builtin: NodePath",
"success": true
} ],
"context": "When calling asserts.is_NodePath(@'Parent/Child')",
"fullname": "test_when_calling_is_NodePath",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|Object| [Node:6032] != null",
"context": "node is not null",
"expected": "|Object| [Node:6032] != null",
"success": true
}, {
"actual": "[Node:6032] is builtin: Object",
"context": "An instance of node is an Object",
"expected": "[Node:6032] is builtin: Object",
"success": true
} ],
"context": "When calling is asserts.object(node: Node)",
"fullname": "test_when_calling_is_object",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|PoolByteArray| [PoolByteArray] != null",
"context": "bytes is not null",
"expected": "|PoolByteArray| [PoolByteArray] != null",
"success": true
}, {
"actual": "[PoolByteArray] is builtin: PoolByteArray",
"context": "Then it passes",
"expected": "[PoolByteArray] is builtin: PoolByteArray",
"success": true
} ],
"context": "When calling asserts.is_PoolByteArray(bytes: PoolByteArray)",
"fullname": "test_when_calling_is_PoolByteArray",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|PoolIntArray| [] != null",
"context": "ints is not null",
"expected": "|PoolIntArray| [] != null",
"success": true
}, {
"actual": "[] is builtin: PoolIntArray",
"context": "Then it passes",
"expected": "[] is builtin: PoolIntArray",
"success": true
} ],
"context": "When calling asserts.is_PoolIntArray(ints: PoolIntArray)",
"fullname": "test_when_calling_is_PoolIntArray",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "1 is builtin: int",
"context": "Then it passes",
"expected": "1 is builtin: int",
"success": true
} ],
"context": "When callign asserts.is_int(1)",
"fullname": "test_when_calling_is_int",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|Vector3| (0, 0, 0) != null",
"context": "vec3 is not null",
"expected": "|Vector3| (0, 0, 0) != null",
"success": true
}, {
"actual": "(0, 0, 0) is builtin: Vector3",
"context": "Then it passes",
"expected": "(0, 0, 0) is builtin: Vector3",
"success": true
} ],
"context": "When calling asserts.is_Vector3(vec3: Vector3",
"fullname": "test_when_calling_is_Vector3",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "1 is builtin: float",
"context": "Then it passes",
"expected": "1 is builtin: float",
"success": true
} ],
"context": "When calling asserts.is_float(1.0)",
"fullname": "test_when_calling_is_float",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|PoolColorArray| [PoolColorArray] != null",
"context": "colors is not null",
"expected": "|PoolColorArray| [PoolColorArray] != null",
"success": true
}, {
"actual": "[PoolColorArray] is builtin: PoolColorArray",
"context": "Then it passes",
"expected": "[PoolColorArray] is builtin: PoolColorArray",
"success": true
} ],
"context": "When calling asserts.is_PoolColorArray(colors: PoolColorArray)",
"fullname": "test_when_calling_is_PoolColorArray",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "True is builtin: bool",
"context": "Then it passes",
"expected": "True is builtin: bool",
"success": true
} ],
"context": "When calling asserts.is_bool(true)",
"fullname": "test_when_calling_is_bool",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|Basis| ((1, 0, 0), (0, 1, 0), (0, 0, 1)) != null",
"context": "basis is not null",
"expected": "|Basis| ((1, 0, 0), (0, 1, 0), (0, 0, 1)) != null",
"success": true
}, {
"actual": "((1, 0, 0), (0, 1, 0), (0, 0, 1)) is builtin: Basis",
"context": "Then it passes",
"expected": "((1, 0, 0), (0, 1, 0), (0, 0, 1)) is builtin: Basis",
"success": true
} ],
"context": "When calling asserts.is_basis(basis: Basis",
"fullname": "test_when_calling_is_Basis",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
} ],
"passed": 26,
"path": "res://tests/unit/is_instance.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/is_instance.test.gd",
"tags": [  ],
"test": ExtResource( 6 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 26
}, {
"context": "Given an Is Not Instance of class/type Assertion",
"methods": [ {
"assertions": [ {
"actual": "Null is not builtin: AABB",
"context": "Then it passes",
"expected": "Null is not builtin: AABB",
"success": true
} ],
"context": "when calling asserts.is_not_AABB(null)",
"fullname": "test_when_calling_is_not_AABB",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Basis",
"context": "Then it passes",
"expected": "Null is not builtin: Basis",
"success": true
} ],
"context": "when calling asserts.is_not_Basis(null)",
"fullname": "test_when_calling_is_not_Basis",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Array",
"context": "Then it passes",
"expected": "Null is not builtin: Array",
"success": true
} ],
"context": "when calling asserts.is_not_Array(null)",
"fullname": "test_when_calling_is_not_Array",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: RID",
"context": "Then it passes",
"expected": "Null is not builtin: RID",
"success": true
} ],
"context": "when calling asserts.is_not_RID(null)",
"fullname": "test_when_calling_is_not_RID",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Vector2",
"context": "Then it passes",
"expected": "Null is not builtin: Vector2",
"success": true
} ],
"context": "when calling asserts.is_not_Vector2(null)",
"fullname": "test_when_calling_is_not_Vector2",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Color",
"context": "Then it passes",
"expected": "Null is not builtin: Color",
"success": true
} ],
"context": "when calling asserts.is_not_Color(null)",
"fullname": "test_when_calling_is_not_Color",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Object",
"context": "Then it passes",
"expected": "Null is not builtin: Object",
"success": true
} ],
"context": "when calling asserts.is_not_Object(null)",
"fullname": "test_when_calling_is_not_Object",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Rect2",
"context": "Then it passes",
"expected": "Null is not builtin: Rect2",
"success": true
} ],
"context": "when calling asserts.is_not_Rect2(null)",
"fullname": "test_when_calling_is_not_Rect2",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: PoolVector2Array",
"context": "Then it passes",
"expected": "Null is not builtin: PoolVector2Array",
"success": true
} ],
"context": "when calling asserts.is_not_PoolVector2Array(null)",
"fullname": "test_when_calling_is_not_PoolVector2Array",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: int",
"context": "Then it passes",
"expected": "Null is not builtin: int",
"success": true
} ],
"context": "when calling asserts.is_not_int(null)",
"fullname": "test_when_calling_is_not_int",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: PoolIntArray",
"context": "Then it passes",
"expected": "Null is not builtin: PoolIntArray",
"success": true
} ],
"context": "when calling asserts.is_not_PoolIntArray(null)",
"fullname": "test_when_calling_is_not_PoolIntArray",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: NodePath",
"context": "Then it passes",
"expected": "Null is not builtin: NodePath",
"success": true
} ],
"context": "when calling asserts.is_not_NodePath(null)",
"fullname": "test_when_calling_is_not_NodePath",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Plane",
"context": "Then it passes",
"expected": "Null is not builtin: Plane",
"success": true
} ],
"context": "when calling asserts.is_not_Plane(null)",
"fullname": "test_when_calling_is_not_Plane",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: PoolVector3Array",
"context": "Then it passes",
"expected": "Null is not builtin: PoolVector3Array",
"success": true
} ],
"context": "when calling asserts.is_not_PoolVector3Array(null)",
"fullname": "test_when_calling_is_not_PoolVector3Array",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Transform",
"context": "Then it passes",
"expected": "Null is not builtin: Transform",
"success": true
} ],
"context": "when calling asserts.is_not_Transform(null)",
"fullname": "test_when_calling_is_not_Transform",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Transform2D",
"context": "Then it passes",
"expected": "Null is not builtin: Transform2D",
"success": true
} ],
"context": "when calling asserts.is_not_Transform2D(null)",
"fullname": "test_when_calling_is_not_Transform2D",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: bool",
"context": "Then it passes",
"expected": "Null is not builtin: bool",
"success": true
} ],
"context": "when calling asserts.is_not_bool(null)",
"fullname": "test_when_calling_is_not_bool",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: PoolColorArray",
"context": "Then it passes",
"expected": "Null is not builtin: PoolColorArray",
"success": true
} ],
"context": "when calling asserts.is_not_PoolColorArray(null)",
"fullname": "test_when_calling_is_not_PoolColorArray",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: PoolRealArray",
"context": "Then it passes",
"expected": "Null is not builtin: PoolRealArray",
"success": true
} ],
"context": "when calling asserts.is_not_PoolRealArray(null)",
"fullname": "test_when_calling_is_not_PoolRealArray",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: PoolStringArray",
"context": "Then it passes",
"expected": "Null is not builtin: PoolStringArray",
"success": true
} ],
"context": "when calling asserts.is_not_PoolStringArray(null)",
"fullname": "test_when_calling_is_not_PoolStringArray",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Quat",
"context": "Then it passes",
"expected": "Null is not builtin: Quat",
"success": true
} ],
"context": "when calling asserts.is_not_Quat(null)",
"fullname": "test_when_calling_is_not_Quat",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Dictionary",
"context": "Then it passes",
"expected": "Null is not builtin: Dictionary",
"success": true
} ],
"context": "when calling asserts.is_not_Dictionary(null)",
"fullname": "test_when_calling_is_not_Dictionary",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Vector3",
"context": "Then it passes",
"expected": "Null is not builtin: Vector3",
"success": true
} ],
"context": "when calling asserts.is_not_Vector3(null)",
"fullname": "test_when_calling_is_not_Vector3",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: PoolByteArray",
"context": "Then it passes",
"expected": "Null is not builtin: PoolByteArray",
"success": true
} ],
"context": "when calling asserts.is_not_PoolByteArray(null)",
"fullname": "test_when_calling_is_not_PoolByteArray",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: float",
"context": "Then it passes",
"expected": "Null is not builtin: float",
"success": true
} ],
"context": "when calling asserts.is_not_float(null)",
"fullname": "test_when_calling_is_not_float",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: String",
"context": "Then it passes",
"expected": "Null is not builtin: String",
"success": true
} ],
"context": "when calling asserts.is_not_String(null)",
"fullname": "test_when_calling_is_not_String",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 26,
"path": "res://tests/unit/is_not_instance.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/is_not_instance.test.gd",
"tags": [  ],
"test": ExtResource( 2 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 26
}, {
"context": "Given a Null Assertion",
"methods": [ {
"assertions": [ {
"actual": "|null| Null == null",
"context": "Then it passes",
"expected": "|null| Null == null",
"success": true
} ],
"context": "When calling asserts.is_null(null)",
"fullname": "test_when_calling_null_is_null",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|Object| [Node:6088] != null",
"context": "Then it passes",
"expected": "|Object| [Node:6088] != null",
"success": true
} ],
"context": "When calling Node is not null",
"fullname": "test_when_calling_node_is_not_null",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|Object| [Deleted Object] == null",
"context": "A Freed Node is null in Engine 3.2.2 or greater",
"expected": "|Object| [Deleted Object] == null",
"success": true
} ],
"context": "When calling freed object is null",
"fullname": "test_when_calling_freed_object_is_not_null",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 3,
"path": "res://tests/unit/null.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/null.test.gd",
"tags": [  ],
"test": ExtResource( 12 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 3
}, {
"context": "Given an Object Assertion",
"methods": [ {
"assertions": [ {
"actual": "[Node:6086] is not freed",
"context": "Then it passes",
"expected": "[Node:6086] is not freed",
"success": true
} ],
"context": "When calling asserts.is_not_freed(unfreed_object)",
"fullname": "test_when_calling_unfreed_object_is_not_freed",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is freed from memory",
"context": "Then it passes",
"expected": "Null is freed from memory",
"success": true
} ],
"context": "When calling asserts.is_freed(freed_object",
"fullname": "test_when_calling_freed_object_is_freed",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:6083] does not have meta: bad_meta",
"context": "Then it passes",
"expected": "[Node:6083] does not have meta: bad_meta",
"success": true
} ],
"context": "When calling asserts.object_does_not_have_meta()",
"fullname": "test_when_calling_does_not_have_meta",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:6083] has meta: dummy",
"context": "Then it passes",
"expected": "[Node:6083] has meta: dummy",
"success": true
}, {
"actual": "[Node:6083] has meta: dummy",
"context": "Then it passes",
"expected": "[Node:6083] has meta: dummy",
"success": true
} ],
"context": "When calling asserts.object_has_meta() after adding metadata",
"fullname": "test_when_calling_has_meta_after_adding_metadata",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "[Node:6098] is queued for deletion",
"context": "Then it passes",
"expected": "[Node:6098] is queued for deletion",
"success": true
} ],
"context": "When calling asserts.object_is_queued for deletion after calling queue_free",
"fullname": "test_when_calling_obj_is_queued_for_deletion_after_calling_queue_free",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:6083].builtin_dummy is connected to [Node:6083].title",
"context": "Then it passes",
"expected": "[Node:6083].builtin_dummy is connected to [Node:6083].title",
"success": true
} ],
"context": "When calling asserts object is connected with a valid connection",
"fullname": "test_when_calling_obj_is_connected_with_a_real_connection",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:6083].builtin_dummy is not connected to [Node:6083].title",
"context": "Then it passes",
"expected": "[Node:6083].builtin_dummy is not connected to [Node:6083].title",
"success": true
} ],
"context": "When calling asserts object is not connected with an invalid connection",
"fullname": "test_when_calling_obj_is_not_connected_with_an_invalid_connection",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:6102] is blocking signals",
"context": "Then it passes",
"expected": "[Node:6102] is blocking signals",
"success": true
} ],
"context": "When calling is blocking signals while blocking signals",
"fullname": "test_is_blocking_signals",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:6104] is not blocking signals",
"context": "Then it passes",
"expected": "[Node:6104] is not blocking signals",
"success": true
} ],
"context": "When calling is not blocking signals while not blocking signals",
"fullname": "test_is_not_blocking_signals",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:6083] does not have meta: confusing",
"context": "Then it passes",
"expected": "[Node:6083] does not have meta: confusing",
"success": true
} ],
"context": "When calling asserts.object_has_meta with real key but null val",
"fullname": "test_when_calling_does_not_have_meta_real_key_null_value_pair",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:6083] has user signal: dummy_signal",
"context": "Then it passes",
"expected": "[Node:6083] has user signal: dummy_signal",
"success": true
} ],
"context": "When calling obj_has_user_signal after adding a signal",
"fullname": "test_when_calling_has_user_signal_after_adding_a_signal",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:6083] does not have user signal: false_signal",
"context": "Then it passes",
"expected": "[Node:6083] does not have user signal: false_signal",
"success": true
} ],
"context": "When calling obj_does_not_have_user_signal with fake signal",
"fullname": "test_when_calling_does_not_have_user_signal",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:6083] does not have user signal: builtin_dummy",
"context": "Then it passes",
"expected": "[Node:6083] does not have user signal: builtin_dummy",
"success": true
} ],
"context": "When calling does not have user signal with class signal",
"fullname": "test_when_calling_does_not_have_user_signal_with_class_signal_constant",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:6083] has method: title",
"context": "Then it passes",
"expected": "[Node:6083] has method: title",
"success": true
} ],
"context": "When calling has_method('title')",
"fullname": "test_when_calling_has_method_title",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:6111] is not queued for deletion",
"context": "Then it passes",
"expected": "[Node:6111] is not queued for deletion",
"success": true
} ],
"context": "When calling asserts.object_is_not_for_queued_deletion after not calling queue free()",
"fullname": "test_when_calling_obj_is_not_for_queued_deletion_after_not_calling_queue_free",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 15,
"path": "res://tests/unit/object.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/object.test.gd",
"tags": [  ],
"test": ExtResource( 7 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 15
}, {
"context": "Given A Range Assertion",
"methods": [ {
"assertions": [ {
"actual": "10 is not in range(0, 10)",
"context": "Then it passes",
"expected": "10 is not in range(0, 10)",
"success": true
} ],
"context": "When calling is (10) not in range (in range(0, 10)",
"fullname": "test_when_calling_is_not_in_range",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "0 is in range(0, 10)",
"context": "Then it passes",
"expected": "0 is in range(0, 10)",
"success": true
} ],
"context": "When calling is (0) in range(0, 10)",
"fullname": "test_when_calling_is_in_range",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 2,
"path": "res://tests/unit/range.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/range.test.gd",
"tags": [  ],
"test": ExtResource( 15 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 2
}, {
"context": "Given the Addition Operator",
"methods": [ {
"assertions": [ {
"actual": "|int| 4 is equal to |int| 4",
"context": "",
"expected": "|int| 4 is equal to |int| 4",
"success": true
} ],
"context": "When we add 2 to 2 we get 4",
"fullname": "test_add",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 8 is equal to |int| 8",
"context": "",
"expected": "|int| 8 is equal to |int| 8",
"success": true
} ],
"context": "When we add 5 to 3 we get 8",
"fullname": "test_add",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 13 is equal to |int| 13",
"context": "",
"expected": "|int| 13 is equal to |int| 13",
"success": true
} ],
"context": "When we add 7 to 6 we get 13",
"fullname": "test_add",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 0 is equal to |int| 0",
"context": "",
"expected": "|int| 0 is equal to |int| 0",
"success": true
} ],
"context": "When we subtract 2 from 2 we get 0",
"fullname": "test_subtract",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 2 is equal to |int| 2",
"context": "",
"expected": "|int| 2 is equal to |int| 2",
"success": true
} ],
"context": "When we subtract 5 from 3 we get 2",
"fullname": "test_subtract",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 1 is equal to |int| 1",
"context": "",
"expected": "|int| 1 is equal to |int| 1",
"success": true
} ],
"context": "When we subtract 7 from 6 we get 1",
"fullname": "test_subtract",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 6,
"path": "res://tests/unit/parameters.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/parameters.test.gd",
"tags": [  ],
"test": ExtResource( 16 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 6
}, {
"context": "Dummy Passing Test",
"methods": [ {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Passing!",
"expected": "|bool| True == true",
"success": true
} ],
"context": "This method passes",
"fullname": "test_this_method_passes",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 1,
"path": "res://tests/unit/suite.test.gd.DummyOne",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/suite.test.gd.DummyOne",
"tags": [  ],
"test": SubResource( 21 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 1
}, {
"context": "Given a String Assertion",
"methods": [ {
"assertions": [ {
"actual": "lorem impsum ends with impsum",
"context": "Then it passes",
"expected": "lorem impsum ends with impsum",
"success": true
} ],
"context": "When calling asserts.string_ends_with('impsum', 'lorem impsum')",
"fullname": "test_when_calling_string_ends_with",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "impsum does not end with lorem",
"context": "Then it passes",
"expected": "impsum does not end with lorem",
"success": true
} ],
"context": "When calling asserts.string_does_not_end_with('lorem', 'impsum')",
"fullname": "test_when_calling_string_does_not_end_with",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "lorem impsum begins with lorem",
"context": "Then it passes",
"expected": "lorem impsum begins with lorem",
"success": true
} ],
"context": "When calling asserts.string_begins_with('lorem', 'lorem impsum')",
"fullname": "test_when_calling_string_begins_with",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "impsum does not contain beem im",
"context": "Then it passes",
"expected": "impsum does not contain beem im",
"success": true
} ],
"context": "When calling asserts.string_does_not_contain('em im', 'impsum')",
"fullname": "test_when_calling_string_does_not_contain",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "impsum does not begin with bleh lorem",
"context": "Then it passes",
"expected": "impsum does not begin with bleh lorem",
"success": true
} ],
"context": "When calling asserts.string_does_not_begin_with('lorem', 'impsum')",
"fullname": "test_when_calling_string_does_not_begin_with",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "lorem impsum contains em im",
"context": "Then it passes",
"expected": "lorem impsum contains em im",
"success": true
} ],
"context": "When calling asserts.string_contains('em im', 'lorem impsum')",
"fullname": "test_when_calling_string_contains",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 6,
"path": "res://tests/unit/string.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/string.test.gd",
"tags": [  ],
"test": ExtResource( 9 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 6
}, {
"context": "Dummy Test 2",
"methods": [ {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Passing!",
"expected": "|bool| True == true",
"success": true
} ],
"context": "This method passes",
"fullname": "test_this_method_passes",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 1,
"path": "res://tests/unit/suite.test.gd.DummyTwo",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/suite.test.gd.DummyTwo",
"tags": [  ],
"test": SubResource( 22 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 1
}, {
"context": "Given a Test Script",
"methods": [ {
"assertions": [ {
"actual": "|bool| True == true",
"context": "if the test didn't break this works",
"expected": "|bool| True == true",
"success": true
} ],
"context": " we can omit describe",
"fullname": "test_we_can_omit_describe",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 10 is greater than |int| 1",
"context": "We get an array of multiple values back",
"expected": "|int| 10 is greater than |int| 1",
"success": true
}, {
"actual": "|int| 0 is not equal to |int| 9",
"context": "With different values",
"expected": "|int| 0 != |int| 9",
"success": true
}, {
"actual": "|int| 10 is greater than |int| 1",
"context": "And we can track multiple properties",
"expected": "|int| 10 is greater than |int| 1",
"success": true
} ],
"context": "When we record properties",
"fullname": "test_we_can_record_properties",
"passed": 3,
"success": true,
"time": 0.0,
"total": 3
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|int| 2 is equal to |int| 2",
"context": "",
"expected": "|int| 2 is equal to |int| 2",
"success": true
} ],
"context": " when we omit context we can see expected and got under method",
"fullname": "test_when_we_omit_context_we_can_see_expected_and_got_under_method",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
} ],
"passed": 3,
"path": "res://tests/unit/test.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/test.test.gd",
"tags": [  ],
"test": ExtResource( 19 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 3
}, {
"context": "Given a Signal Watcher",
"methods": [ {
"assertions": [ {
"actual": "signal: example was emitted from [Node:6141]",
"context": "Then it captures the emitted signal",
"expected": "signal: example was emitted from [Node:6141]",
"success": true
} ],
"context": "When we watch and emit a signal",
"fullname": "test_When_we_watch_and_emit_a_signal",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Signal: example was emitted from [Node:6141] with arguments: [1, 20, 5]",
"context": "Then it captures any arguments that where passed when the signal was emitted",
"expected": "Signal: example was emitted from [Node:6141] with arguments: [1, 20, 5]",
"success": true
} ],
"context": "When we watch a signal from an object with no bound variables",
"fullname": "test_When_we_watch_a_signal_from_an_object_with_no_bound_variables",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Signal: example was not emitted from [Node:6141]",
"context": "Then it does not capture the non-emitted signal",
"expected": "Signal: example was not emitted from [Node:6141]",
"success": true
} ],
"context": "When we watch and do not emit a signal",
"fullname": "test_When_we_watch_and_do_not_emit_a_signal",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "signal: multiple was emitted from [Node:6141] 2",
"context": "Then we can track how many times we emitted it",
"expected": "signal: multiple was emitted from [Node:6141] 2",
"success": true
} ],
"context": "When we watch and signal and emit it multiple times",
"fullname": "test_When_we_watch_a_signal_and_emit_it_multiple_times",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 4,
"path": "res://tests/unit/watcher.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/watcher.test.gd",
"tags": [  ],
"test": ExtResource( 17 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 4
}, {
"context": "Given a Boolean Assertion",
"methods": [ {
"assertions": [ {
"actual": "|bool| True != false",
"context": "",
"expected": "|bool| True == false",
"success": false
} ],
"context": " intentional failure",
"fullname": "test_intentional_failure",
"passed": 0,
"success": false,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then it passes",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When calling asserts.is_true(true)",
"fullname": "test_when_calling_asserts_is_true",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| False == false",
"context": "Then it passes",
"expected": "|bool| False == false",
"success": true
} ],
"context": "When calling asserts.is_false(false)",
"fullname": "test_when_calling_asserts_is_false",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 2,
"path": "res://tests/integration/boolean.test.gd",
"source": {
"containers": [ "res://tests/integration", "res://tests" ],
"method": "",
"path": "res://tests/integration/boolean.test.gd",
"tags": [  ],
"test": ExtResource( 20 ),
"yield_time": 0.0
},
"success": false,
"time_taken": 0.0,
"total": 3
}, {
"context": "Given a Yield",
"methods": [ {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then we set var a to true",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then we set var b to true",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we yield in start twice",
"fullname": "test_When_we_yield_in_start",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then we set var c to true",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then we set var d to true",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we yield in pre thrice",
"fullname": "test_When_we_yield_in_pre",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then the yielder is unpaused",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then the timeout signal of the yielder is connected",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then our signal is connected to the yielder",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we call until signal",
"fullname": "test_When_we_call_until_signal",
"passed": 3,
"success": true,
"time": 0.0,
"total": 3
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then we set var e to true",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then we set var f to true",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we yield twice in execute",
"fullname": "test_When_we_yield_in_execute",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then the yielder is paused",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When a signal being yielded on is emitted",
"fullname": "test_When_a_signal_being_yielded_on_is_emitted_the_yielder_is_stopped",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then the yielder is paused",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then the timeout signal of the yielder is disconnected",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then our signal to the yielder is disconnected",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When the yielder heres our signal",
"fullname": "test_When_the_yielder_hears_our_signal",
"passed": 3,
"success": true,
"time": 0.0,
"total": 3
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then the timeout signal is disconnected",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then the signal-signal is disconnected",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When it is finished",
"fullname": "test_When_yielder_is_finished_signals_are_disconnected",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "[100, Null, Null, Null, Null, Null] is builtin: Array",
"context": "Then we get an array",
"expected": "[100, Null, Null, Null, Null, Null] is builtin: Array",
"success": true
}, {
"actual": "|int| 6 is equal to |int| 6",
"context": "Of size 6",
"expected": "|int| 6 is equal to |int| 6",
"success": true
}, {
"actual": "|int| 100 is equal to |int| 100",
"context": "Where element 0 is 100",
"expected": "|int| 100 is equal to |int| 100",
"success": true
} ],
"context": "When yield(self.yield_value()) returns",
"fullname": "test_When_we_yield_we_get_the_return_value",
"passed": 3,
"success": true,
"time": 0.0,
"total": 3
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then yielder is unpaused",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "The timeout signal of the yielder is connected",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we call until_timeout (with 1.0)",
"fullname": "test_When_we_call_until_timeout",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then yielder is not active",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When asserting against a test",
"fullname": "test_Yielder_is_not_active_when_asserting",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then the yielder is paused",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "The timeout signal of the yielder is not connected",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When the yielder times out on until_timeout(0.1)",
"fullname": "test_When_the_yielder_times_out",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
} ],
"passed": 11,
"path": "res://tests/unit/yield.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/yield.test.gd",
"tags": [  ],
"test": ExtResource( 18 ),
"yield_time": 1.9
},
"success": true,
"time_taken": 0.0,
"total": 11
}, {
"context": "Default Args",
"methods": [ {
"assertions": [ {
"actual": "|bool| True == true",
"context": "If this method can be reached then we have doubled a script with default argument(s) properly!",
"expected": "|bool| True == true",
"success": true
} ],
"context": " default arguments of interpolate property",
"fullname": "test_default_arguments_of_interpolate_property",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 1,
"path": "res://tests/integration/default_args.test.gd",
"source": {
"containers": [ "res://tests/integration", "res://tests" ],
"method": "",
"path": "res://tests/integration/default_args.test.gd",
"tags": [  ],
"test": ExtResource( 10 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 1
}, {
"context": "Given is_on_floor",
"methods": [ {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then it can be stubbed",
"expected": "|bool| True == true",
"success": true
} ],
"context": "From a built-in KinematicBody2D2",
"fullname": "test_stubbing_is_on_floor_method_from_builtin_class2",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then it can be stubbed",
"expected": "|bool| True == true",
"success": true
} ],
"context": "From a child node of a scene without scripts",
"fullname": "test_stubbing_is_on_floor_as_child_node_with_no_script",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then it can be stubbed",
"expected": "|bool| True == true",
"success": true
} ],
"context": "From a user-defined script",
"fullname": "test_stubbing_is_on_floor_method_from_user_defined_class",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 3,
"path": "res://tests/integration/on_floor.test.gd",
"source": {
"containers": [ "res://tests/integration", "res://tests" ],
"method": "",
"path": "res://tests/integration/on_floor.test.gd",
"tags": [  ],
"test": ExtResource( 5 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 3
}, {
"context": "Given a Scene Director",
"methods": [ {
"assertions": [ {
"actual": "|Dictionary| {.:[Reference:6219], A:[Reference:6220], A/B:[Reference:6222], C:[Reference:6221], C/D:[Reference:6223]} is not equal to |Dictionary| {.:[Reference:6233], A:[Reference:6234], A/B:[Reference:6236], C:[Reference:6235], C/D:[Reference:6237]}",
"context": "Then they do not share resources",
"expected": "|Dictionary| {.:[Reference:6219], A:[Reference:6220], A/B:[Reference:6222], C:[Reference:6221], C/D:[Reference:6223]} != |Dictionary| {.:[Reference:6233], A:[Reference:6234], A/B:[Reference:6236], C:[Reference:6235], C/D:[Reference:6237]}",
"success": true
} ],
"context": "When we create two of it for the same scene",
"fullname": "test_When_we_create_two_of_it_for_the_same_scene",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 999 is equal to |int| 999",
"context": "Then we get the stubbed return value",
"expected": "|int| 999 is equal to |int| 999",
"success": true
} ],
"context": "When we call a method from a child node that we stubbed",
"fullname": "test_When_we_call_a_method_from_a_child_node_that_we_stubbed",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 9999 is equal to |int| 9999",
"context": "Then we get the stubbed return value",
"expected": "|int| 9999 is equal to |int| 9999",
"success": true
} ],
"context": "When we call a method from the root node that we stubbed",
"fullname": "test_When_we_call_a_method_from_the_root_node_that_we_stubbed",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 99 is equal to |int| 99",
"context": "Then we get the stubbed return value",
"expected": "|int| 99 is equal to |int| 99",
"success": true
} ],
"context": "When we call a method from a grandchild node that we stubbed",
"fullname": "test_When_we_call_a_method_from_a_grandchild_node_that_we_stubbed",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|NodePath| A is equal to |NodePath| A",
"context": "We have the correct NodePath Set",
"expected": "|NodePath| A is equal to |NodePath| A",
"success": true
} ],
"context": "When we add it to the tree it runs",
"fullname": "test_When_we_add_it_to_the_tree_it_runs",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 5,
"path": "res://tests/integration/scene_director.test.gd",
"source": {
"containers": [ "res://tests/integration", "res://tests" ],
"method": "",
"path": "res://tests/integration/scene_director.test.gd",
"tags": [  ],
"test": ExtResource( 4 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 5
}, {
"context": "Given a Script Director",
"methods": [ {
"assertions": [ {
"actual": "[Reference:6315] is instance of class: [GDScript:1453]",
"context": "Then we get that inner class back",
"expected": "[Reference:6315] is instance of class: [GDScript:1453]",
"success": true
} ],
"context": "When we double an inner class",
"fullname": "test_When_we_double_an_inner_class",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|Dictionary| {_enter_tree:{arguments:, default_arguments:}, _exit_tree:{arguments:, default_arguments:}, _get:{arguments:a, default_arguments:a}, _get_configuration_warning:{arguments:, default_arguments:}, _get_editor_description:{arguments:, default_arguments:}, _get_import_path:{arguments:, default_arguments:}, _get_property_list:{arguments:, default_arguments:}, _init:{arguments:, default_arguments:}, _input:{arguments:a, default_arguments:a}, _notification:{arguments:a, default_arguments:a}, _physics_process:{arguments:a, default_arguments:a}, _process:{arguments:a, default_arguments:a}, _ready:{arguments:, default_arguments:}, _set:{arguments:a, b, default_arguments:a, b}, _set_editor_description:{arguments:a, default_arguments:a}, _set_import_path:{arguments:a, default_arguments:a}, _to_string:{arguments:, default_arguments:}, _unhandled_input:{arguments:a, default_arguments:a}, _unhandled_key_input:{arguments:a, default_arguments:a}, add:{arguments:a, b, default_arguments:a, b}, add_child:{arguments:a, b, default_arguments:a, b = False}, add_child_below_node:{arguments:a, b, c, default_arguments:a, b, c = False}, add_to_group:{arguments:a, b, default_arguments:a, b = False}, add_user_signal:{arguments:a, b, default_arguments:a, b = []}, call:{arguments:a, default_arguments:a}, call_deferred:{arguments:a, default_arguments:a}, callv:{arguments:a, b, default_arguments:a, b}, can_process:{arguments:, default_arguments:}, can_translate_messages:{arguments:, default_arguments:}, connect:{arguments:a, b, c, d, e, default_arguments:a, b, c, d = [], e = 0}, disconnect:{arguments:a, b, c, default_arguments:a, b, c}, divide:{arguments:a, b, default_arguments:a, b}, duplicate:{arguments:a, default_arguments:a = 15}, emit_signal:{arguments:a, default_arguments:a}, find_node:{arguments:a, b, c, default_arguments:a, b = True, c = True}, find_parent:{arguments:a, default_arguments:a}, free:{arguments:, default_arguments:}, get:{arguments:a, default_arguments:a}, get_child:{arguments:a, default_arguments:a}, get_child_count:{arguments:, default_arguments:}, get_children:{arguments:, default_arguments:}, get_class:{arguments:, default_arguments:}, get_custom_multiplayer:{arguments:, default_arguments:}, get_filename:{arguments:, default_arguments:}, get_groups:{arguments:, default_arguments:}, get_incoming_connections:{arguments:, default_arguments:}, get_index:{arguments:, default_arguments:}, get_indexed:{arguments:a, default_arguments:a}, get_instance_id:{arguments:, default_arguments:}, get_meta:{arguments:a, default_arguments:a}, get_meta_list:{arguments:, default_arguments:}, get_method_list:{arguments:, default_arguments:}, get_multiplayer:{arguments:, default_arguments:}, get_name:{arguments:, default_arguments:}, get_network_master:{arguments:, default_arguments:}, get_node:{arguments:a, default_arguments:a}, get_node_and_resource:{arguments:a, default_arguments:a}, get_node_or_null:{arguments:a, default_arguments:a}, get_owner:{arguments:, default_arguments:}, get_parent:{arguments:, default_arguments:}, get_path:{arguments:, default_arguments:}, get_path_to:{arguments:a, default_arguments:a}, get_pause_mode:{arguments:, default_arguments:}, get_physics_process_delta_time:{arguments:, default_arguments:}, get_position_in_parent:{arguments:, default_arguments:}, get_process_delta_time:{arguments:, default_arguments:}, get_process_priority:{arguments:, default_arguments:}, get_property_list:{arguments:, default_arguments:}, get_scene_instance_load_placeholder:{arguments:, default_arguments:}, get_script:{arguments:, default_arguments:}, get_signal_connection_list:{arguments:a, default_arguments:a}, get_signal_list:{arguments:, default_arguments:}, get_tree:{arguments:, default_arguments:}, get_viewport:{arguments:, default_arguments:}, has_meta:{arguments:a, default_arguments:a}, has_method:{arguments:a, default_arguments:a}, has_node:{arguments:a, default_arguments:a}, has_node_and_resource:{arguments:a, default_arguments:a}, has_signal:{arguments:a, default_arguments:a}, has_user_signal:{arguments:a, default_arguments:a}, is_a_parent_of:{arguments:a, default_arguments:a}, is_blocking_signals:{arguments:, default_arguments:}, is_class:{arguments:a, default_arguments:a}, is_connected:{arguments:a, b, c, default_arguments:a, b, c}, is_displayed_folded:{arguments:, default_arguments:}, is_greater_than:{arguments:a, default_arguments:a}, is_in_group:{arguments:a, default_arguments:a}, is_inside_tree:{arguments:, default_arguments:}, is_network_master:{arguments:, default_arguments:}, is_physics_processing:{arguments:, default_arguments:}, is_physics_processing_internal:{arguments:, default_arguments:}, is_processing:{arguments:, default_arguments:}, is_processing_input:{arguments:, default_arguments:}, is_processing_internal:{arguments:, default_arguments:}, is_processing_unhandled_input:{arguments:, default_arguments:}, is_processing_unhandled_key_input:{arguments:, default_arguments:}, is_queued_for_deletion:{arguments:, default_arguments:}, math_fight:{arguments:, default_arguments:}, move_child:{arguments:a, b, default_arguments:a, b}, multiply:{arguments:a, b, default_arguments:a, b}, notification:{arguments:a, b, default_arguments:a, b = False}, pi:{arguments:, default_arguments:}, print_stray_nodes:{arguments:, default_arguments:}, print_tree:{arguments:, default_arguments:}, print_tree_pretty:{arguments:, default_arguments:}, propagate_call:{arguments:a, b, c, default_arguments:a, b = [], c = False}, propagate_notification:{arguments:a, default_arguments:a}, property_list_changed_notify:{arguments:, default_arguments:}, queue_free:{arguments:, default_arguments:}, raise:{arguments:, default_arguments:}, remove_and_skip:{arguments:, default_arguments:}, remove_child:{arguments:a, default_arguments:a}, remove_from_group:{arguments:a, default_arguments:a}, remove_meta:{arguments:a, default_arguments:a}, replace_by:{arguments:a, b, default_arguments:a, b = False}, request_ready:{arguments:, default_arguments:}, rpc:{arguments:a, default_arguments:a}, rpc_config:{arguments:a, b, default_arguments:a, b}, rpc_id:{arguments:a, b, default_arguments:a, b}, rpc_unreliable:{arguments:a, default_arguments:a}, rpc_unreliable_id:{arguments:a, b, default_arguments:a, b}, rset:{arguments:a, b, default_arguments:a, b}, rset_config:{arguments:a, b, default_arguments:a, b}, rset_id:{arguments:a, b, c, default_arguments:a, b, c}, rset_unreliable:{arguments:a, b, default_arguments:a, b}, rset_unreliable_id:{arguments:a, b, c, default_arguments:a, b, c}, set:{arguments:a, b, default_arguments:a, b}, set_block_signals:{arguments:a, default_arguments:a}, set_custom_multiplayer:{arguments:a, default_arguments:a}, set_deferred:{arguments:a, b, default_arguments:a, b}, set_display_folded:{arguments:a, default_arguments:a}, set_filename:{arguments:a, default_arguments:a}, set_indexed:{arguments:a, b, default_arguments:a, b}, set_message_translation:{arguments:a, default_arguments:a}, set_meta:{arguments:a, b, default_arguments:a, b}, set_name:{arguments:a, default_arguments:a}, set_network_master:{arguments:a, b, default_arguments:a, b = True}, set_owner:{arguments:a, default_arguments:a}, set_pause_mode:{arguments:a, default_arguments:a}, set_physics_process:{arguments:a, default_arguments:a}, set_physics_process_internal:{arguments:a, default_arguments:a}, set_process:{arguments:a, default_arguments:a}, set_process_input:{arguments:a, default_arguments:a}, set_process_internal:{arguments:a, default_arguments:a}, set_process_priority:{arguments:a, default_arguments:a}, set_process_unhandled_input:{arguments:a, default_arguments:a}, set_process_unhandled_key_input:{arguments:a, default_arguments:a}, set_scene_instance_load_placeholder:{arguments:a, default_arguments:a}, set_script:{arguments:a, default_arguments:a}, subtract:{arguments:a, b, default_arguments:a, b}, sum:{arguments:a, default_arguments:a}, to_string:{arguments:, default_arguments:}, tr:{arguments:a, default_arguments:a}, update_configuration_warning:{arguments:, default_arguments:}} is not equal to |Dictionary| {_enter_tree:{arguments:, default_arguments:}, _exit_tree:{arguments:, default_arguments:}, _get:{arguments:a, default_arguments:a}, _get_configuration_warning:{arguments:, default_arguments:}, _get_editor_description:{arguments:, default_arguments:}, _get_import_path:{arguments:, default_arguments:}, _get_property_list:{arguments:, default_arguments:}, _init:{arguments:, default_arguments:}, _input:{arguments:a, default_arguments:a}, _notification:{arguments:a, default_arguments:a}, _physics_process:{arguments:a, default_arguments:a}, _process:{arguments:a, default_arguments:a}, _ready:{arguments:, default_arguments:}, _set:{arguments:a, b, default_arguments:a, b}, _set_editor_description:{arguments:a, default_arguments:a}, _set_import_path:{arguments:a, default_arguments:a}, _to_string:{arguments:, default_arguments:}, _unhandled_input:{arguments:a, default_arguments:a}, _unhandled_key_input:{arguments:a, default_arguments:a}, add:{arguments:a, b, default_arguments:a, b}, add_child:{arguments:a, b, default_arguments:a, b = False}, add_child_below_node:{arguments:a, b, c, default_arguments:a, b, c = False}, add_to_group:{arguments:a, b, default_arguments:a, b = False}, add_user_signal:{arguments:a, b, default_arguments:a, b = []}, call:{arguments:a, default_arguments:a}, call_deferred:{arguments:a, default_arguments:a}, callv:{arguments:a, b, default_arguments:a, b}, can_process:{arguments:, default_arguments:}, can_translate_messages:{arguments:, default_arguments:}, connect:{arguments:a, b, c, d, e, default_arguments:a, b, c, d = [], e = 0}, disconnect:{arguments:a, b, c, default_arguments:a, b, c}, divide:{arguments:a, b, default_arguments:a, b}, duplicate:{arguments:a, default_arguments:a = 15}, emit_signal:{arguments:a, default_arguments:a}, find_node:{arguments:a, b, c, default_arguments:a, b = True, c = True}, find_parent:{arguments:a, default_arguments:a}, free:{arguments:, default_arguments:}, get:{arguments:a, default_arguments:a}, get_child:{arguments:a, default_arguments:a}, get_child_count:{arguments:, default_arguments:}, get_children:{arguments:, default_arguments:}, get_class:{arguments:, default_arguments:}, get_custom_multiplayer:{arguments:, default_arguments:}, get_filename:{arguments:, default_arguments:}, get_groups:{arguments:, default_arguments:}, get_incoming_connections:{arguments:, default_arguments:}, get_index:{arguments:, default_arguments:}, get_indexed:{arguments:a, default_arguments:a}, get_instance_id:{arguments:, default_arguments:}, get_meta:{arguments:a, default_arguments:a}, get_meta_list:{arguments:, default_arguments:}, get_method_list:{arguments:, default_arguments:}, get_multiplayer:{arguments:, default_arguments:}, get_name:{arguments:, default_arguments:}, get_network_master:{arguments:, default_arguments:}, get_node:{arguments:a, default_arguments:a}, get_node_and_resource:{arguments:a, default_arguments:a}, get_node_or_null:{arguments:a, default_arguments:a}, get_owner:{arguments:, default_arguments:}, get_parent:{arguments:, default_arguments:}, get_path:{arguments:, default_arguments:}, get_path_to:{arguments:a, default_arguments:a}, get_pause_mode:{arguments:, default_arguments:}, get_physics_process_delta_time:{arguments:, default_arguments:}, get_position_in_parent:{arguments:, default_arguments:}, get_process_delta_time:{arguments:, default_arguments:}, get_process_priority:{arguments:, default_arguments:}, get_property_list:{arguments:, default_arguments:}, get_scene_instance_load_placeholder:{arguments:, default_arguments:}, get_script:{arguments:, default_arguments:}, get_signal_connection_list:{arguments:a, default_arguments:a}, get_signal_list:{arguments:, default_arguments:}, get_tree:{arguments:, default_arguments:}, get_viewport:{arguments:, default_arguments:}, has_meta:{arguments:a, default_arguments:a}, has_method:{arguments:a, default_arguments:a}, has_node:{arguments:a, default_arguments:a}, has_node_and_resource:{arguments:a, default_arguments:a}, has_signal:{arguments:a, default_arguments:a}, has_user_signal:{arguments:a, default_arguments:a}, is_a_parent_of:{arguments:a, default_arguments:a}, is_blocking_signals:{arguments:, default_arguments:}, is_class:{arguments:a, default_arguments:a}, is_connected:{arguments:a, b, c, default_arguments:a, b, c}, is_displayed_folded:{arguments:, default_arguments:}, is_greater_than:{arguments:a, default_arguments:a}, is_in_group:{arguments:a, default_arguments:a}, is_inside_tree:{arguments:, default_arguments:}, is_network_master:{arguments:, default_arguments:}, is_physics_processing:{arguments:, default_arguments:}, is_physics_processing_internal:{arguments:, default_arguments:}, is_processing:{arguments:, default_arguments:}, is_processing_input:{arguments:, default_arguments:}, is_processing_internal:{arguments:, default_arguments:}, is_processing_unhandled_input:{arguments:, default_arguments:}, is_processing_unhandled_key_input:{arguments:, default_arguments:}, is_queued_for_deletion:{arguments:, default_arguments:}, math_fight:{arguments:, default_arguments:}, move_child:{arguments:a, b, default_arguments:a, b}, multiply:{arguments:a, b, default_arguments:a, b}, notification:{arguments:a, b, default_arguments:a, b = False}, pi:{arguments:, default_arguments:}, print_stray_nodes:{arguments:, default_arguments:}, print_tree:{arguments:, default_arguments:}, print_tree_pretty:{arguments:, default_arguments:}, propagate_call:{arguments:a, b, c, default_arguments:a, b = [], c = False}, propagate_notification:{arguments:a, default_arguments:a}, property_list_changed_notify:{arguments:, default_arguments:}, queue_free:{arguments:, default_arguments:}, raise:{arguments:, default_arguments:}, remove_and_skip:{arguments:, default_arguments:}, remove_child:{arguments:a, default_arguments:a}, remove_from_group:{arguments:a, default_arguments:a}, remove_meta:{arguments:a, default_arguments:a}, replace_by:{arguments:a, b, default_arguments:a, b = False}, request_ready:{arguments:, default_arguments:}, rpc:{arguments:a, default_arguments:a}, rpc_config:{arguments:a, b, default_arguments:a, b}, rpc_id:{arguments:a, b, default_arguments:a, b}, rpc_unreliable:{arguments:a, default_arguments:a}, rpc_unreliable_id:{arguments:a, b, default_arguments:a, b}, rset:{arguments:a, b, default_arguments:a, b}, rset_config:{arguments:a, b, default_arguments:a, b}, rset_id:{arguments:a, b, c, default_arguments:a, b, c}, rset_unreliable:{arguments:a, b, default_arguments:a, b}, rset_unreliable_id:{arguments:a, b, c, default_arguments:a, b, c}, set:{arguments:a, b, default_arguments:a, b}, set_block_signals:{arguments:a, default_arguments:a}, set_custom_multiplayer:{arguments:a, default_arguments:a}, set_deferred:{arguments:a, b, default_arguments:a, b}, set_display_folded:{arguments:a, default_arguments:a}, set_filename:{arguments:a, default_arguments:a}, set_indexed:{arguments:a, b, default_arguments:a, b}, set_message_translation:{arguments:a, default_arguments:a}, set_meta:{arguments:a, b, default_arguments:a, b}, set_name:{arguments:a, default_arguments:a}, set_network_master:{arguments:a, b, default_arguments:a, b = True}, set_owner:{arguments:a, default_arguments:a}, set_pause_mode:{arguments:a, default_arguments:a}, set_physics_process:{arguments:a, default_arguments:a}, set_physics_process_internal:{arguments:a, default_arguments:a}, set_process:{arguments:a, default_arguments:a}, set_process_input:{arguments:a, default_arguments:a}, set_process_internal:{arguments:a, default_arguments:a}, set_process_priority:{arguments:a, default_arguments:a}, set_process_unhandled_input:{arguments:a, default_arguments:a}, set_process_unhandled_key_input:{arguments:a, default_arguments:a}, set_scene_instance_load_placeholder:{arguments:a, default_arguments:a}, set_script:{arguments:a, default_arguments:a}, subtract:{arguments:a, b, default_arguments:a, b}, sum:{arguments:a, default_arguments:a}, to_string:{arguments:, default_arguments:}, tr:{arguments:a, default_arguments:a}, update_configuration_warning:{arguments:, default_arguments:}}",
"context": "Then they do not share resources",
"expected": "|Dictionary| {_enter_tree:{arguments:, default_arguments:}, _exit_tree:{arguments:, default_arguments:}, _get:{arguments:a, default_arguments:a}, _get_configuration_warning:{arguments:, default_arguments:}, _get_editor_description:{arguments:, default_arguments:}, _get_import_path:{arguments:, default_arguments:}, _get_property_list:{arguments:, default_arguments:}, _init:{arguments:, default_arguments:}, _input:{arguments:a, default_arguments:a}, _notification:{arguments:a, default_arguments:a}, _physics_process:{arguments:a, default_arguments:a}, _process:{arguments:a, default_arguments:a}, _ready:{arguments:, default_arguments:}, _set:{arguments:a, b, default_arguments:a, b}, _set_editor_description:{arguments:a, default_arguments:a}, _set_import_path:{arguments:a, default_arguments:a}, _to_string:{arguments:, default_arguments:}, _unhandled_input:{arguments:a, default_arguments:a}, _unhandled_key_input:{arguments:a, default_arguments:a}, add:{arguments:a, b, default_arguments:a, b}, add_child:{arguments:a, b, default_arguments:a, b = False}, add_child_below_node:{arguments:a, b, c, default_arguments:a, b, c = False}, add_to_group:{arguments:a, b, default_arguments:a, b = False}, add_user_signal:{arguments:a, b, default_arguments:a, b = []}, call:{arguments:a, default_arguments:a}, call_deferred:{arguments:a, default_arguments:a}, callv:{arguments:a, b, default_arguments:a, b}, can_process:{arguments:, default_arguments:}, can_translate_messages:{arguments:, default_arguments:}, connect:{arguments:a, b, c, d, e, default_arguments:a, b, c, d = [], e = 0}, disconnect:{arguments:a, b, c, default_arguments:a, b, c}, divide:{arguments:a, b, default_arguments:a, b}, duplicate:{arguments:a, default_arguments:a = 15}, emit_signal:{arguments:a, default_arguments:a}, find_node:{arguments:a, b, c, default_arguments:a, b = True, c = True}, find_parent:{arguments:a, default_arguments:a}, free:{arguments:, default_arguments:}, get:{arguments:a, default_arguments:a}, get_child:{arguments:a, default_arguments:a}, get_child_count:{arguments:, default_arguments:}, get_children:{arguments:, default_arguments:}, get_class:{arguments:, default_arguments:}, get_custom_multiplayer:{arguments:, default_arguments:}, get_filename:{arguments:, default_arguments:}, get_groups:{arguments:, default_arguments:}, get_incoming_connections:{arguments:, default_arguments:}, get_index:{arguments:, default_arguments:}, get_indexed:{arguments:a, default_arguments:a}, get_instance_id:{arguments:, default_arguments:}, get_meta:{arguments:a, default_arguments:a}, get_meta_list:{arguments:, default_arguments:}, get_method_list:{arguments:, default_arguments:}, get_multiplayer:{arguments:, default_arguments:}, get_name:{arguments:, default_arguments:}, get_network_master:{arguments:, default_arguments:}, get_node:{arguments:a, default_arguments:a}, get_node_and_resource:{arguments:a, default_arguments:a}, get_node_or_null:{arguments:a, default_arguments:a}, get_owner:{arguments:, default_arguments:}, get_parent:{arguments:, default_arguments:}, get_path:{arguments:, default_arguments:}, get_path_to:{arguments:a, default_arguments:a}, get_pause_mode:{arguments:, default_arguments:}, get_physics_process_delta_time:{arguments:, default_arguments:}, get_position_in_parent:{arguments:, default_arguments:}, get_process_delta_time:{arguments:, default_arguments:}, get_process_priority:{arguments:, default_arguments:}, get_property_list:{arguments:, default_arguments:}, get_scene_instance_load_placeholder:{arguments:, default_arguments:}, get_script:{arguments:, default_arguments:}, get_signal_connection_list:{arguments:a, default_arguments:a}, get_signal_list:{arguments:, default_arguments:}, get_tree:{arguments:, default_arguments:}, get_viewport:{arguments:, default_arguments:}, has_meta:{arguments:a, default_arguments:a}, has_method:{arguments:a, default_arguments:a}, has_node:{arguments:a, default_arguments:a}, has_node_and_resource:{arguments:a, default_arguments:a}, has_signal:{arguments:a, default_arguments:a}, has_user_signal:{arguments:a, default_arguments:a}, is_a_parent_of:{arguments:a, default_arguments:a}, is_blocking_signals:{arguments:, default_arguments:}, is_class:{arguments:a, default_arguments:a}, is_connected:{arguments:a, b, c, default_arguments:a, b, c}, is_displayed_folded:{arguments:, default_arguments:}, is_greater_than:{arguments:a, default_arguments:a}, is_in_group:{arguments:a, default_arguments:a}, is_inside_tree:{arguments:, default_arguments:}, is_network_master:{arguments:, default_arguments:}, is_physics_processing:{arguments:, default_arguments:}, is_physics_processing_internal:{arguments:, default_arguments:}, is_processing:{arguments:, default_arguments:}, is_processing_input:{arguments:, default_arguments:}, is_processing_internal:{arguments:, default_arguments:}, is_processing_unhandled_input:{arguments:, default_arguments:}, is_processing_unhandled_key_input:{arguments:, default_arguments:}, is_queued_for_deletion:{arguments:, default_arguments:}, math_fight:{arguments:, default_arguments:}, move_child:{arguments:a, b, default_arguments:a, b}, multiply:{arguments:a, b, default_arguments:a, b}, notification:{arguments:a, b, default_arguments:a, b = False}, pi:{arguments:, default_arguments:}, print_stray_nodes:{arguments:, default_arguments:}, print_tree:{arguments:, default_arguments:}, print_tree_pretty:{arguments:, default_arguments:}, propagate_call:{arguments:a, b, c, default_arguments:a, b = [], c = False}, propagate_notification:{arguments:a, default_arguments:a}, property_list_changed_notify:{arguments:, default_arguments:}, queue_free:{arguments:, default_arguments:}, raise:{arguments:, default_arguments:}, remove_and_skip:{arguments:, default_arguments:}, remove_child:{arguments:a, default_arguments:a}, remove_from_group:{arguments:a, default_arguments:a}, remove_meta:{arguments:a, default_arguments:a}, replace_by:{arguments:a, b, default_arguments:a, b = False}, request_ready:{arguments:, default_arguments:}, rpc:{arguments:a, default_arguments:a}, rpc_config:{arguments:a, b, default_arguments:a, b}, rpc_id:{arguments:a, b, default_arguments:a, b}, rpc_unreliable:{arguments:a, default_arguments:a}, rpc_unreliable_id:{arguments:a, b, default_arguments:a, b}, rset:{arguments:a, b, default_arguments:a, b}, rset_config:{arguments:a, b, default_arguments:a, b}, rset_id:{arguments:a, b, c, default_arguments:a, b, c}, rset_unreliable:{arguments:a, b, default_arguments:a, b}, rset_unreliable_id:{arguments:a, b, c, default_arguments:a, b, c}, set:{arguments:a, b, default_arguments:a, b}, set_block_signals:{arguments:a, default_arguments:a}, set_custom_multiplayer:{arguments:a, default_arguments:a}, set_deferred:{arguments:a, b, default_arguments:a, b}, set_display_folded:{arguments:a, default_arguments:a}, set_filename:{arguments:a, default_arguments:a}, set_indexed:{arguments:a, b, default_arguments:a, b}, set_message_translation:{arguments:a, default_arguments:a}, set_meta:{arguments:a, b, default_arguments:a, b}, set_name:{arguments:a, default_arguments:a}, set_network_master:{arguments:a, b, default_arguments:a, b = True}, set_owner:{arguments:a, default_arguments:a}, set_pause_mode:{arguments:a, default_arguments:a}, set_physics_process:{arguments:a, default_arguments:a}, set_physics_process_internal:{arguments:a, default_arguments:a}, set_process:{arguments:a, default_arguments:a}, set_process_input:{arguments:a, default_arguments:a}, set_process_internal:{arguments:a, default_arguments:a}, set_process_priority:{arguments:a, default_arguments:a}, set_process_unhandled_input:{arguments:a, default_arguments:a}, set_process_unhandled_key_input:{arguments:a, default_arguments:a}, set_scene_instance_load_placeholder:{arguments:a, default_arguments:a}, set_script:{arguments:a, default_arguments:a}, subtract:{arguments:a, b, default_arguments:a, b}, sum:{arguments:a, default_arguments:a}, to_string:{arguments:, default_arguments:}, tr:{arguments:a, default_arguments:a}, update_configuration_warning:{arguments:, default_arguments:}} != |Dictionary| {_enter_tree:{arguments:, default_arguments:}, _exit_tree:{arguments:, default_arguments:}, _get:{arguments:a, default_arguments:a}, _get_configuration_warning:{arguments:, default_arguments:}, _get_editor_description:{arguments:, default_arguments:}, _get_import_path:{arguments:, default_arguments:}, _get_property_list:{arguments:, default_arguments:}, _init:{arguments:, default_arguments:}, _input:{arguments:a, default_arguments:a}, _notification:{arguments:a, default_arguments:a}, _physics_process:{arguments:a, default_arguments:a}, _process:{arguments:a, default_arguments:a}, _ready:{arguments:, default_arguments:}, _set:{arguments:a, b, default_arguments:a, b}, _set_editor_description:{arguments:a, default_arguments:a}, _set_import_path:{arguments:a, default_arguments:a}, _to_string:{arguments:, default_arguments:}, _unhandled_input:{arguments:a, default_arguments:a}, _unhandled_key_input:{arguments:a, default_arguments:a}, add:{arguments:a, b, default_arguments:a, b}, add_child:{arguments:a, b, default_arguments:a, b = False}, add_child_below_node:{arguments:a, b, c, default_arguments:a, b, c = False}, add_to_group:{arguments:a, b, default_arguments:a, b = False}, add_user_signal:{arguments:a, b, default_arguments:a, b = []}, call:{arguments:a, default_arguments:a}, call_deferred:{arguments:a, default_arguments:a}, callv:{arguments:a, b, default_arguments:a, b}, can_process:{arguments:, default_arguments:}, can_translate_messages:{arguments:, default_arguments:}, connect:{arguments:a, b, c, d, e, default_arguments:a, b, c, d = [], e = 0}, disconnect:{arguments:a, b, c, default_arguments:a, b, c}, divide:{arguments:a, b, default_arguments:a, b}, duplicate:{arguments:a, default_arguments:a = 15}, emit_signal:{arguments:a, default_arguments:a}, find_node:{arguments:a, b, c, default_arguments:a, b = True, c = True}, find_parent:{arguments:a, default_arguments:a}, free:{arguments:, default_arguments:}, get:{arguments:a, default_arguments:a}, get_child:{arguments:a, default_arguments:a}, get_child_count:{arguments:, default_arguments:}, get_children:{arguments:, default_arguments:}, get_class:{arguments:, default_arguments:}, get_custom_multiplayer:{arguments:, default_arguments:}, get_filename:{arguments:, default_arguments:}, get_groups:{arguments:, default_arguments:}, get_incoming_connections:{arguments:, default_arguments:}, get_index:{arguments:, default_arguments:}, get_indexed:{arguments:a, default_arguments:a}, get_instance_id:{arguments:, default_arguments:}, get_meta:{arguments:a, default_arguments:a}, get_meta_list:{arguments:, default_arguments:}, get_method_list:{arguments:, default_arguments:}, get_multiplayer:{arguments:, default_arguments:}, get_name:{arguments:, default_arguments:}, get_network_master:{arguments:, default_arguments:}, get_node:{arguments:a, default_arguments:a}, get_node_and_resource:{arguments:a, default_arguments:a}, get_node_or_null:{arguments:a, default_arguments:a}, get_owner:{arguments:, default_arguments:}, get_parent:{arguments:, default_arguments:}, get_path:{arguments:, default_arguments:}, get_path_to:{arguments:a, default_arguments:a}, get_pause_mode:{arguments:, default_arguments:}, get_physics_process_delta_time:{arguments:, default_arguments:}, get_position_in_parent:{arguments:, default_arguments:}, get_process_delta_time:{arguments:, default_arguments:}, get_process_priority:{arguments:, default_arguments:}, get_property_list:{arguments:, default_arguments:}, get_scene_instance_load_placeholder:{arguments:, default_arguments:}, get_script:{arguments:, default_arguments:}, get_signal_connection_list:{arguments:a, default_arguments:a}, get_signal_list:{arguments:, default_arguments:}, get_tree:{arguments:, default_arguments:}, get_viewport:{arguments:, default_arguments:}, has_meta:{arguments:a, default_arguments:a}, has_method:{arguments:a, default_arguments:a}, has_node:{arguments:a, default_arguments:a}, has_node_and_resource:{arguments:a, default_arguments:a}, has_signal:{arguments:a, default_arguments:a}, has_user_signal:{arguments:a, default_arguments:a}, is_a_parent_of:{arguments:a, default_arguments:a}, is_blocking_signals:{arguments:, default_arguments:}, is_class:{arguments:a, default_arguments:a}, is_connected:{arguments:a, b, c, default_arguments:a, b, c}, is_displayed_folded:{arguments:, default_arguments:}, is_greater_than:{arguments:a, default_arguments:a}, is_in_group:{arguments:a, default_arguments:a}, is_inside_tree:{arguments:, default_arguments:}, is_network_master:{arguments:, default_arguments:}, is_physics_processing:{arguments:, default_arguments:}, is_physics_processing_internal:{arguments:, default_arguments:}, is_processing:{arguments:, default_arguments:}, is_processing_input:{arguments:, default_arguments:}, is_processing_internal:{arguments:, default_arguments:}, is_processing_unhandled_input:{arguments:, default_arguments:}, is_processing_unhandled_key_input:{arguments:, default_arguments:}, is_queued_for_deletion:{arguments:, default_arguments:}, math_fight:{arguments:, default_arguments:}, move_child:{arguments:a, b, default_arguments:a, b}, multiply:{arguments:a, b, default_arguments:a, b}, notification:{arguments:a, b, default_arguments:a, b = False}, pi:{arguments:, default_arguments:}, print_stray_nodes:{arguments:, default_arguments:}, print_tree:{arguments:, default_arguments:}, print_tree_pretty:{arguments:, default_arguments:}, propagate_call:{arguments:a, b, c, default_arguments:a, b = [], c = False}, propagate_notification:{arguments:a, default_arguments:a}, property_list_changed_notify:{arguments:, default_arguments:}, queue_free:{arguments:, default_arguments:}, raise:{arguments:, default_arguments:}, remove_and_skip:{arguments:, default_arguments:}, remove_child:{arguments:a, default_arguments:a}, remove_from_group:{arguments:a, default_arguments:a}, remove_meta:{arguments:a, default_arguments:a}, replace_by:{arguments:a, b, default_arguments:a, b = False}, request_ready:{arguments:, default_arguments:}, rpc:{arguments:a, default_arguments:a}, rpc_config:{arguments:a, b, default_arguments:a, b}, rpc_id:{arguments:a, b, default_arguments:a, b}, rpc_unreliable:{arguments:a, default_arguments:a}, rpc_unreliable_id:{arguments:a, b, default_arguments:a, b}, rset:{arguments:a, b, default_arguments:a, b}, rset_config:{arguments:a, b, default_arguments:a, b}, rset_id:{arguments:a, b, c, default_arguments:a, b, c}, rset_unreliable:{arguments:a, b, default_arguments:a, b}, rset_unreliable_id:{arguments:a, b, c, default_arguments:a, b, c}, set:{arguments:a, b, default_arguments:a, b}, set_block_signals:{arguments:a, default_arguments:a}, set_custom_multiplayer:{arguments:a, default_arguments:a}, set_deferred:{arguments:a, b, default_arguments:a, b}, set_display_folded:{arguments:a, default_arguments:a}, set_filename:{arguments:a, default_arguments:a}, set_indexed:{arguments:a, b, default_arguments:a, b}, set_message_translation:{arguments:a, default_arguments:a}, set_meta:{arguments:a, b, default_arguments:a, b}, set_name:{arguments:a, default_arguments:a}, set_network_master:{arguments:a, b, default_arguments:a, b = True}, set_owner:{arguments:a, default_arguments:a}, set_pause_mode:{arguments:a, default_arguments:a}, set_physics_process:{arguments:a, default_arguments:a}, set_physics_process_internal:{arguments:a, default_arguments:a}, set_process:{arguments:a, default_arguments:a}, set_process_input:{arguments:a, default_arguments:a}, set_process_internal:{arguments:a, default_arguments:a}, set_process_priority:{arguments:a, default_arguments:a}, set_process_unhandled_input:{arguments:a, default_arguments:a}, set_process_unhandled_key_input:{arguments:a, default_arguments:a}, set_scene_instance_load_placeholder:{arguments:a, default_arguments:a}, set_script:{arguments:a, default_arguments:a}, subtract:{arguments:a, b, default_arguments:a, b}, sum:{arguments:a, default_arguments:a}, to_string:{arguments:, default_arguments:}, tr:{arguments:a, default_arguments:a}, update_configuration_warning:{arguments:, default_arguments:}}",
"success": true
} ],
"context": "When we create two of it for the same script",
"fullname": "test_When_we_create_two_of_it_for_the_same_script",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|Object| [Node:6384] is equal to |Object| [Node:6384]",
"context": "Then we get the same double back",
"expected": "|Object| [Node:6384] is equal to |Object| [Node:6384]",
"success": true
} ],
"context": "When we call the double the second time",
"fullname": "test_When_we_call_double_a_second_time_on",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 3,
"path": "res://tests/integration/script_director.test.gd",
"source": {
"containers": [ "res://tests/integration", "res://tests" ],
"method": "",
"path": "res://tests/integration/script_director.test.gd",
"tags": [  ],
"test": ExtResource( 13 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 3
}, {
"context": "Given a Yield",
"methods": [ {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then we set var a to true",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then we set var b to true",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we yield in start twice",
"fullname": "test_When_we_yield_in_start",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then we set var c to true",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then we set var d to true",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we yield in pre thrice",
"fullname": "test_When_we_yield_in_pre",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then the yielder is unpaused",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then the timeout signal of the yielder is connected",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then our signal is connected to the yielder",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we call until signal",
"fullname": "test_When_we_call_until_signal",
"passed": 3,
"success": true,
"time": 0.0,
"total": 3
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then we set var e to true",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then we set var f to true",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we yield twice in execute",
"fullname": "test_When_we_yield_in_execute",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then the yielder is paused",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When a signal being yielded on is emitted",
"fullname": "test_When_a_signal_being_yielded_on_is_emitted_the_yielder_is_stopped",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then the yielder is paused",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then the timeout signal of the yielder is disconnected",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then our signal to the yielder is disconnected",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When the yielder heres our signal",
"fullname": "test_When_the_yielder_hears_our_signal",
"passed": 3,
"success": true,
"time": 0.0,
"total": 3
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then the timeout signal is disconnected",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then the signal-signal is disconnected",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When it is finished",
"fullname": "test_When_yielder_is_finished_signals_are_disconnected",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "[100, Null, Null, Null, Null, Null] is builtin: Array",
"context": "Then we get an array",
"expected": "[100, Null, Null, Null, Null, Null] is builtin: Array",
"success": true
}, {
"actual": "|int| 6 is equal to |int| 6",
"context": "Of size 6",
"expected": "|int| 6 is equal to |int| 6",
"success": true
}, {
"actual": "|int| 100 is equal to |int| 100",
"context": "Where element 0 is 100",
"expected": "|int| 100 is equal to |int| 100",
"success": true
} ],
"context": "When yield(self.yield_value()) returns",
"fullname": "test_When_we_yield_we_get_the_return_value",
"passed": 3,
"success": true,
"time": 0.0,
"total": 3
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then yielder is unpaused",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "The timeout signal of the yielder is connected",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we call until_timeout (with 1.0)",
"fullname": "test_When_we_call_until_timeout",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then yielder is not active",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When asserting against a test",
"fullname": "test_Yielder_is_not_active_when_asserting",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then the yielder is paused",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "The timeout signal of the yielder is not connected",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When the yielder times out on until_timeout(0.1)",
"fullname": "test_When_the_yielder_times_out",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
} ],
"passed": 11,
"path": "res://tests/unit/yield.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/yield.test.gd",
"tags": [  ],
"test": ExtResource( 18 ),
"yield_time": 1.9
},
"success": true,
"time_taken": 0.0,
"total": 11
}, {
"context": "Given a Boolean Assertion",
"methods": [ {
"assertions": [ {
"actual": "|bool| True != false",
"context": "",
"expected": "|bool| True == false",
"success": false
} ],
"context": " intentional failure",
"fullname": "test_intentional_failure",
"passed": 0,
"success": false,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then it passes",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When calling asserts.is_true(true)",
"fullname": "test_when_calling_asserts_is_true",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| False == false",
"context": "Then it passes",
"expected": "|bool| False == false",
"success": true
} ],
"context": "When calling asserts.is_false(false)",
"fullname": "test_when_calling_asserts_is_false",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 2,
"path": "res://tests/unit/boolean.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/boolean.test.gd",
"tags": [  ],
"test": ExtResource( 11 ),
"yield_time": 0.0
},
"success": false,
"time_taken": 0.0,
"total": 3
}, {
"context": "Given A File Assertion",
"methods": [ {
"assertions": [ {
"actual": "res://somefile.gd does not exist",
"context": "Then it passes",
"expected": "res://somefile.gd does not exist",
"success": true
} ],
"context": "When calling asserts.file_does_not_exist when there is no file",
"fullname": "test_when_calling_file_does_not_exist_when_there_is_no_file",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "res://tests/unit/file.test.gd exists",
"context": "Then it passes",
"expected": "res://tests/unit/file.test.gd exists",
"success": true
} ],
"context": "When calling asserts.file_exists when the file is this suite",
"fullname": "test_when_calling_file_exists_when_file_is_self",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": " does not exist",
"context": "Then it passes",
"expected": " does not exist",
"success": true
} ],
"context": "When calling asserts file does not exist when path is empty",
"fullname": "test_when_calling_file_does_not_exist_when_path_is_empty",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 3,
"path": "res://tests/unit/file.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/file.test.gd",
"tags": [  ],
"test": ExtResource( 3 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 3
}, {
"context": "Given an Equality Assertion",
"methods": [ {
"assertions": [ {
"actual": "|int| 1 is equal to |int| 1",
"context": "Then it passes",
"expected": "|int| 1 is equal to |int| 1",
"success": true
} ],
"context": "When calling asserts.is_equal(1, 1)",
"fullname": "test_when_calling_is_equal",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 2 is equal or greater |int| 1",
"context": "Then it passes",
"expected": "|int| 2 is equal or greater |int| 1",
"success": true
} ],
"context": "When calling asserts.is_equal_or_greater_than(2, 1)",
"fullname": "test_when_calling_is_equal_or_greater_than",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 2 is greater than |int| 1",
"context": "Then it passes",
"expected": "|int| 2 is greater than |int| 1",
"success": true
} ],
"context": "When calling asserts.is_greater_than(2, 1)",
"fullname": "test_when_calling_is_greater_than",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 1 is less than |int| 2",
"context": "Then it passes",
"expected": "|int| 1 is less than |int| 2",
"success": true
} ],
"context": "When calling asserts.is_less_than(2, 1)",
"fullname": "test_when_calling_is_less_than",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 5 is not equal to |int| 6",
"context": "Then it passes",
"expected": "|int| 5 != |int| 6",
"success": true
} ],
"context": "When callign asserts.is_not_equal(5, 6)",
"fullname": "test_when_calling_is_not_equal",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 1 is equal or less than |int| 1",
"context": "Then it passes!",
"expected": "|int| 1 is equal or less than |int| 1",
"success": true
} ],
"context": "When calling asserts.is_equal_or_less_than(1, 1)",
"fullname": "test_when_calling_is_equal_or_less_than_with_equal_values",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 1 is equal or greater |int| 1",
"context": "Then it passes",
"expected": "|int| 1 is equal or greater |int| 1",
"success": true
} ],
"context": "When calling asserts.is_equal_or_greater_than(1, 1)",
"fullname": "test_when_calling_is_equal_or_greater_than_with_equal_values",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 7,
"path": "res://tests/unit/equality.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/equality.test.gd",
"tags": [  ],
"test": ExtResource( 8 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 7
}, {
"context": "Given a Test Double",
"methods": [ {
"assertions": [ {
"actual": "|int| 9999 is equal to |int| 9999",
"context": "Then it returns the corresponding value when the pattern matches",
"expected": "|int| 9999 is equal to |int| 9999",
"success": true
} ],
"context": "When we call a method that was stubbed with an argument pattern that includes a non-primitive object",
"fullname": "test_When_we_call_a_method_that_was_stubbed_with_an_argument_pattern_that_includes_a_non_primitive_object",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 9999 is equal to |int| 9999",
"context": "Then it returns the corresponding value when the partial pattern matches",
"expected": "|int| 9999 is equal to |int| 9999",
"success": true
} ],
"context": "When we call a method that was stubbed with a partial (ie using any()) argument pattern",
"fullname": "test_When_we_call_a_method_that_was_stubbed_with_a_partial_argument_pattern",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|null| Null == null",
"context": "Then we get the stubbed value back",
"expected": "|null| Null == null",
"success": true
} ],
"context": "When we stub a method of a doubled inner class",
"fullname": "test_When_we_stub_a_method_of_a_double_inner_class",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|String| Jackie is equal to |String| Jackie",
"context": "Then we can double the object successfully",
"expected": "|String| Jackie is equal to |String| Jackie",
"success": true
} ],
"context": "When we pass in dependecies on direct",
"fullname": "test_When_we_pass_in_deps_on_direct",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 99 is equal to |int| 99",
"context": "Then it returns a value",
"expected": "|int| 99 is equal to |int| 99",
"success": true
} ],
"context": "When we pass a funcref as a subcall that returns",
"fullname": "test_When_we_pass_a_funcref_as_a_subcall_that_returns_a_value",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 99 is equal to |int| 99",
"context": "Then it affects the state of the double",
"expected": "|int| 99 is equal to |int| 99",
"success": true
} ],
"context": "When we pass a funcref as a subcall",
"fullname": "test_When_we_pass_a_funcref_as_a_subcall",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|Array| [10, 5] is equal to |Array| [10, 5]",
"context": "Then it returns a value",
"expected": "|Array| [10, 5] is equal to |Array| [10, 5]",
"success": true
} ],
"context": "When we pass an Object with a call_func function",
"fullname": "test_When_we_pass_an_object_with_callfunc_method_as_a_subcall",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 4 is equal to |int| 4",
"context": "Then it calls its super implementation by default",
"expected": "|int| 4 is equal to |int| 4",
"success": true
}, {
"actual": "|int| 9999 is equal to |int| 9999",
"context": "Then it does not call its super implementation when arguments patterns match a different return value",
"expected": "|int| 9999 is equal to |int| 9999",
"success": true
} ],
"context": "When we call a method that we stubbed to call its super implementation by default",
"fullname": "test_When_we_call_a_method_that_we_stubbed_to_call_its_super_implementation_by_default",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|int| 4 is equal to |int| 4",
"context": "Then we get the correct result",
"expected": "|int| 4 is equal to |int| 4",
"success": true
} ],
"context": "When we call an add(x, y) method that we haven't directed",
"fullname": "test_When_we_call_an_add_method_that_we_have_not_directed",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then it returns true",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we call a method that we have stubbed to return true",
"fullname": "test_When_we_call_a_method_that_we_have_stubbed_to_return_true",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|Object| [Node:6500] is equal to |Object| [Node:6500]",
"context": "Then it returns that same node",
"expected": "|Object| [Node:6500] is equal to |Object| [Node:6500]",
"success": true
} ],
"context": "When we call a method that we have stubbed to return a node",
"fullname": "test_When_we_call_a_method_that_we_have_stubbed_to_return_a_node",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|float| 6.283185 is equal to |float| 6.283185",
"context": "Then we can call the static methods of that inner double",
"expected": "|float| 6.283185 is equal to |float| 6.283185",
"success": true
} ],
"context": "When we add an doubled inner class to it",
"fullname": "test_When_we_add_a_doubled_inner_class_to_it",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "(1, 1) is builtin: Vector2",
"context": "Then we can call methods on it",
"expected": "(1, 1) is builtin: Vector2",
"success": true
} ],
"context": "When we double an inner class",
"fullname": "test_When_we_double_an_inner_class",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 100 is equal to |int| 100",
"context": "Then it returns the default stubbed value when the arguments don't match any pattern",
"expected": "|int| 100 is equal to |int| 100",
"success": true
}, {
"actual": "|int| 1000 is equal to |int| 1000",
"context": "Then it returns the the corresponding value to the pattern the arguments matched",
"expected": "|int| 1000 is equal to |int| 1000",
"success": true
} ],
"context": "When we call a method that was stubbed to return different values based on argument patterns",
"fullname": "test_When_we_call_a_method_that_was_stubbed_to_return_different_values_based_on_argument_patterns",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "add was called",
"context": "Then we can see that it was called at least once",
"expected": "add was called",
"success": true
} ],
"context": "When we call a method that we are spying on",
"fullname": "test_When_we_call_a_method_that_we_are_spying_on",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "method: add was called with arguments: [10, 10]",
"context": "Then we can see that it was called with those arguments",
"expected": "method: add was called with arguments: [10, 10]",
"success": true
} ],
"context": "When we pass arguments to a method call that we are spying on",
"fullname": "test_When_we_pass_arguments_to_a_method_call_that_we_are_spying_on",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| True is equal to |bool| True",
"context": "Then we can call it",
"expected": "|bool| True is equal to |bool| True",
"success": true
} ],
"context": "When we stubbed a keyworded method by passing in the correct keyword",
"fullname": "test_When_we_stubbed_a_keyword_method_by_passing_in_the_correct_keyword",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|String| Jackie is equal to |String| Jackie",
"context": "Then we can double the object successfully",
"expected": "|String| Jackie is equal to |String| Jackie",
"success": true
} ],
"context": "When we pass in dependecies on double",
"fullname": "test_When_we_pass_in_deps_on_double",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|null| Null == null",
"context": "Then we get null",
"expected": "|null| Null == null",
"success": true
} ],
"context": "When we call a method that we have dummied",
"fullname": "test_When_we_call_a_method_that_we_have_dummied",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 19,
"path": "res://tests/integration/test_double.test.gd",
"source": {
"containers": [ "res://tests/integration", "res://tests" ],
"method": "",
"path": "res://tests/integration/test_double.test.gd",
"tags": [  ],
"test": ExtResource( 14 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 19
}, {
"context": "Given an Is Instance of class/type Assertion",
"methods": [ {
"assertions": [ {
"actual": "|Plane| 0, 0, 0, 0 != null",
"context": "plane is not null",
"expected": "|Plane| 0, 0, 0, 0 != null",
"success": true
}, {
"actual": "0, 0, 0, 0 is builtin: Plane",
"context": "then it passes",
"expected": "0, 0, 0, 0 is builtin: Plane",
"success": true
} ],
"context": "When calling asserts.is_Plane(plane: Plane())",
"fullname": "test_when_calling_is_Plane",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|AABB| 0, 0, 0 - 0, 0, 0 != null",
"context": "AABB is not null",
"expected": "|AABB| 0, 0, 0 - 0, 0, 0 != null",
"success": true
}, {
"actual": "0, 0, 0 - 0, 0, 0 is builtin: AABB",
"context": "Then it passes",
"expected": "0, 0, 0 - 0, 0, 0 is builtin: AABB",
"success": true
} ],
"context": "When calling asserts.is_AABB(aabb: AABB)",
"fullname": "test_when_calling_is_AABB",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "{} is builtin: Dictionary",
"context": "Then it passes",
"expected": "{} is builtin: Dictionary",
"success": true
} ],
"context": "When calling asserts.is_Dictionary({})",
"fullname": "test_when_calling_is_Dictionary",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|PoolVector2Array| [] != null",
"context": "vec2s is not null",
"expected": "|PoolVector2Array| [] != null",
"success": true
}, {
"actual": "[] is builtin: PoolVector2Array",
"context": "Then it passes",
"expected": "[] is builtin: PoolVector2Array",
"success": true
} ],
"context": "When calling is asserts.is_PoolVector2Array(vec2s: PoolVector2Array)",
"fullname": "test_when_calling_is_PoolVector2Array",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|Rect2| (0, 0, 0, 0) != null",
"context": "rect2 is not null",
"expected": "|Rect2| (0, 0, 0, 0) != null",
"success": true
}, {
"actual": "(0, 0, 0, 0) is builtin: Rect2",
"context": "Then it passes",
"expected": "(0, 0, 0, 0) is builtin: Rect2",
"success": true
} ],
"context": "When calling asserts.is_Rect2(rect2: Rect2)",
"fullname": "test_when_calling_is_Rect2",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|PoolVector3Array| [] != null",
"context": "vec3s is not null",
"expected": "|PoolVector3Array| [] != null",
"success": true
}, {
"actual": "[] is builtin: PoolVector3Array",
"context": "Then it passes",
"expected": "[] is builtin: PoolVector3Array",
"success": true
} ],
"context": "When calling is asserts.is_PoolVector3Array(vec3s: PoolVector3Array)",
"fullname": "test_when_calling_is_PoolVector3Array",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|PoolRealArray| [] != null",
"context": "reals is not null",
"expected": "|PoolRealArray| [] != null",
"success": true
}, {
"actual": "[] is builtin: PoolRealArray",
"context": "Then it passes",
"expected": "[] is builtin: PoolRealArray",
"success": true
} ],
"context": "When calling is asserts.is_PoolRealArray(reals: PoolRealArray)",
"fullname": "test_when_calling_is_PoolRealArray",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|Quat| (0, 0, 0, 1) != null",
"context": "quat is not null",
"expected": "|Quat| (0, 0, 0, 1) != null",
"success": true
}, {
"actual": "(0, 0, 0, 1) is builtin: Quat",
"context": "Then it passes",
"expected": "(0, 0, 0, 1) is builtin: Quat",
"success": true
} ],
"context": "When calling asserts.is_Quat(quat: Quat)",
"fullname": "test_when_calling_is_Quat",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|RID| [RID] != null",
"context": "rid is not null",
"expected": "|RID| [RID] != null",
"success": true
}, {
"actual": "[RID] is builtin: RID",
"context": "Then it passes",
"expected": "[RID] is builtin: RID",
"success": true
} ],
"context": "When calling asserts.is_RID(rid: RID)",
"fullname": "test_when_calling_is_RID",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|Color| 0,0,0,1 != null",
"context": "color is not null",
"expected": "|Color| 0,0,0,1 != null",
"success": true
}, {
"actual": "0,0,0,1 is builtin: Color",
"context": "Then it passes",
"expected": "0,0,0,1 is builtin: Color",
"success": true
} ],
"context": "When calling asserts.is_color(color: Color)",
"fullname": "test_when_calling_is_Color",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|String|  != null",
"context": "strs is not null",
"expected": "|String|  != null",
"success": true
}, {
"actual": " is builtin: String",
"context": "Then it passes",
"expected": " is builtin: String",
"success": true
} ],
"context": "When calling asserts.is_string(strs: String)",
"fullname": "test_when_calling_is_string",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|Transform| 1, 0, 0, 0, 1, 0, 0, 0, 1 - 0, 0, 0 != null",
"context": "transform is not null",
"expected": "|Transform| 1, 0, 0, 0, 1, 0, 0, 0, 1 - 0, 0, 0 != null",
"success": true
}, {
"actual": "1, 0, 0, 0, 1, 0, 0, 0, 1 - 0, 0, 0 is builtin: Transform",
"context": "Then it passes",
"expected": "1, 0, 0, 0, 1, 0, 0, 0, 1 - 0, 0, 0 is builtin: Transform",
"success": true
} ],
"context": "When calling asserts.is_Transform(transform: Transform)",
"fullname": "test_when_calling_is_Transform",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|Transform2D| ((1, 0), (0, 1), (0, 0)) != null",
"context": "transform2D is not null",
"expected": "|Transform2D| ((1, 0), (0, 1), (0, 0)) != null",
"success": true
}, {
"actual": "((1, 0), (0, 1), (0, 0)) is builtin: Transform2D",
"context": "Then it passes",
"expected": "((1, 0), (0, 1), (0, 0)) is builtin: Transform2D",
"success": true
} ],
"context": "When calling asserts.is_Transform(transform2D: Transform2D)",
"fullname": "test_when_calling_is_Transform2D",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|Array| [] != null",
"context": "array is not null",
"expected": "|Array| [] != null",
"success": true
}, {
"actual": "[] is builtin: Array",
"context": "Then it passes",
"expected": "[] is builtin: Array",
"success": true
} ],
"context": "When calling asserts.is_Array(array: Array)",
"fullname": "test_when_calling_is_Array",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|Vector2| (0, 0) != null",
"context": "vec2 is not null",
"expected": "|Vector2| (0, 0) != null",
"success": true
}, {
"actual": "(0, 0) is builtin: Vector2",
"context": "Then it passes",
"expected": "(0, 0) is builtin: Vector2",
"success": true
} ],
"context": "When calling asserts.is_Vector2(vec2)",
"fullname": "test_when_calling_is_Vector2",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|PoolStringArray| [] != null",
"context": "strs is not null",
"expected": "|PoolStringArray| [] != null",
"success": true
}, {
"actual": "[] is builtin: PoolStringArray",
"context": "Then it passes",
"expected": "[] is builtin: PoolStringArray",
"success": true
} ],
"context": "When calling is asserts.is_PoolStringArray(strs: PoolStringArray)",
"fullname": "test_when_calling_is_PoolStringArray",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|NodePath| . != null",
"context": "@'Parent/Child' is not null",
"expected": "|NodePath| . != null",
"success": true
}, {
"actual": ". is builtin: NodePath",
"context": "Then it passes",
"expected": ". is builtin: NodePath",
"success": true
} ],
"context": "When calling asserts.is_NodePath(@'Parent/Child')",
"fullname": "test_when_calling_is_NodePath",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|Object| [Node:6600] != null",
"context": "node is not null",
"expected": "|Object| [Node:6600] != null",
"success": true
}, {
"actual": "[Node:6600] is builtin: Object",
"context": "An instance of node is an Object",
"expected": "[Node:6600] is builtin: Object",
"success": true
} ],
"context": "When calling is asserts.object(node: Node)",
"fullname": "test_when_calling_is_object",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|PoolByteArray| [PoolByteArray] != null",
"context": "bytes is not null",
"expected": "|PoolByteArray| [PoolByteArray] != null",
"success": true
}, {
"actual": "[PoolByteArray] is builtin: PoolByteArray",
"context": "Then it passes",
"expected": "[PoolByteArray] is builtin: PoolByteArray",
"success": true
} ],
"context": "When calling asserts.is_PoolByteArray(bytes: PoolByteArray)",
"fullname": "test_when_calling_is_PoolByteArray",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|PoolIntArray| [] != null",
"context": "ints is not null",
"expected": "|PoolIntArray| [] != null",
"success": true
}, {
"actual": "[] is builtin: PoolIntArray",
"context": "Then it passes",
"expected": "[] is builtin: PoolIntArray",
"success": true
} ],
"context": "When calling asserts.is_PoolIntArray(ints: PoolIntArray)",
"fullname": "test_when_calling_is_PoolIntArray",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "1 is builtin: int",
"context": "Then it passes",
"expected": "1 is builtin: int",
"success": true
} ],
"context": "When callign asserts.is_int(1)",
"fullname": "test_when_calling_is_int",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|Vector3| (0, 0, 0) != null",
"context": "vec3 is not null",
"expected": "|Vector3| (0, 0, 0) != null",
"success": true
}, {
"actual": "(0, 0, 0) is builtin: Vector3",
"context": "Then it passes",
"expected": "(0, 0, 0) is builtin: Vector3",
"success": true
} ],
"context": "When calling asserts.is_Vector3(vec3: Vector3",
"fullname": "test_when_calling_is_Vector3",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "1 is builtin: float",
"context": "Then it passes",
"expected": "1 is builtin: float",
"success": true
} ],
"context": "When calling asserts.is_float(1.0)",
"fullname": "test_when_calling_is_float",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|PoolColorArray| [PoolColorArray] != null",
"context": "colors is not null",
"expected": "|PoolColorArray| [PoolColorArray] != null",
"success": true
}, {
"actual": "[PoolColorArray] is builtin: PoolColorArray",
"context": "Then it passes",
"expected": "[PoolColorArray] is builtin: PoolColorArray",
"success": true
} ],
"context": "When calling asserts.is_PoolColorArray(colors: PoolColorArray)",
"fullname": "test_when_calling_is_PoolColorArray",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "True is builtin: bool",
"context": "Then it passes",
"expected": "True is builtin: bool",
"success": true
} ],
"context": "When calling asserts.is_bool(true)",
"fullname": "test_when_calling_is_bool",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|Basis| ((1, 0, 0), (0, 1, 0), (0, 0, 1)) != null",
"context": "basis is not null",
"expected": "|Basis| ((1, 0, 0), (0, 1, 0), (0, 0, 1)) != null",
"success": true
}, {
"actual": "((1, 0, 0), (0, 1, 0), (0, 0, 1)) is builtin: Basis",
"context": "Then it passes",
"expected": "((1, 0, 0), (0, 1, 0), (0, 0, 1)) is builtin: Basis",
"success": true
} ],
"context": "When calling asserts.is_basis(basis: Basis",
"fullname": "test_when_calling_is_Basis",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
} ],
"passed": 26,
"path": "res://tests/unit/is_instance.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/is_instance.test.gd",
"tags": [  ],
"test": ExtResource( 6 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 26
}, {
"context": "Given an Is Not Instance of class/type Assertion",
"methods": [ {
"assertions": [ {
"actual": "Null is not builtin: AABB",
"context": "Then it passes",
"expected": "Null is not builtin: AABB",
"success": true
} ],
"context": "when calling asserts.is_not_AABB(null)",
"fullname": "test_when_calling_is_not_AABB",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Basis",
"context": "Then it passes",
"expected": "Null is not builtin: Basis",
"success": true
} ],
"context": "when calling asserts.is_not_Basis(null)",
"fullname": "test_when_calling_is_not_Basis",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Array",
"context": "Then it passes",
"expected": "Null is not builtin: Array",
"success": true
} ],
"context": "when calling asserts.is_not_Array(null)",
"fullname": "test_when_calling_is_not_Array",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: RID",
"context": "Then it passes",
"expected": "Null is not builtin: RID",
"success": true
} ],
"context": "when calling asserts.is_not_RID(null)",
"fullname": "test_when_calling_is_not_RID",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Vector2",
"context": "Then it passes",
"expected": "Null is not builtin: Vector2",
"success": true
} ],
"context": "when calling asserts.is_not_Vector2(null)",
"fullname": "test_when_calling_is_not_Vector2",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Color",
"context": "Then it passes",
"expected": "Null is not builtin: Color",
"success": true
} ],
"context": "when calling asserts.is_not_Color(null)",
"fullname": "test_when_calling_is_not_Color",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Object",
"context": "Then it passes",
"expected": "Null is not builtin: Object",
"success": true
} ],
"context": "when calling asserts.is_not_Object(null)",
"fullname": "test_when_calling_is_not_Object",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Rect2",
"context": "Then it passes",
"expected": "Null is not builtin: Rect2",
"success": true
} ],
"context": "when calling asserts.is_not_Rect2(null)",
"fullname": "test_when_calling_is_not_Rect2",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: PoolVector2Array",
"context": "Then it passes",
"expected": "Null is not builtin: PoolVector2Array",
"success": true
} ],
"context": "when calling asserts.is_not_PoolVector2Array(null)",
"fullname": "test_when_calling_is_not_PoolVector2Array",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: int",
"context": "Then it passes",
"expected": "Null is not builtin: int",
"success": true
} ],
"context": "when calling asserts.is_not_int(null)",
"fullname": "test_when_calling_is_not_int",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: PoolIntArray",
"context": "Then it passes",
"expected": "Null is not builtin: PoolIntArray",
"success": true
} ],
"context": "when calling asserts.is_not_PoolIntArray(null)",
"fullname": "test_when_calling_is_not_PoolIntArray",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: NodePath",
"context": "Then it passes",
"expected": "Null is not builtin: NodePath",
"success": true
} ],
"context": "when calling asserts.is_not_NodePath(null)",
"fullname": "test_when_calling_is_not_NodePath",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Plane",
"context": "Then it passes",
"expected": "Null is not builtin: Plane",
"success": true
} ],
"context": "when calling asserts.is_not_Plane(null)",
"fullname": "test_when_calling_is_not_Plane",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: PoolVector3Array",
"context": "Then it passes",
"expected": "Null is not builtin: PoolVector3Array",
"success": true
} ],
"context": "when calling asserts.is_not_PoolVector3Array(null)",
"fullname": "test_when_calling_is_not_PoolVector3Array",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Transform",
"context": "Then it passes",
"expected": "Null is not builtin: Transform",
"success": true
} ],
"context": "when calling asserts.is_not_Transform(null)",
"fullname": "test_when_calling_is_not_Transform",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Transform2D",
"context": "Then it passes",
"expected": "Null is not builtin: Transform2D",
"success": true
} ],
"context": "when calling asserts.is_not_Transform2D(null)",
"fullname": "test_when_calling_is_not_Transform2D",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: bool",
"context": "Then it passes",
"expected": "Null is not builtin: bool",
"success": true
} ],
"context": "when calling asserts.is_not_bool(null)",
"fullname": "test_when_calling_is_not_bool",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: PoolColorArray",
"context": "Then it passes",
"expected": "Null is not builtin: PoolColorArray",
"success": true
} ],
"context": "when calling asserts.is_not_PoolColorArray(null)",
"fullname": "test_when_calling_is_not_PoolColorArray",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: PoolRealArray",
"context": "Then it passes",
"expected": "Null is not builtin: PoolRealArray",
"success": true
} ],
"context": "when calling asserts.is_not_PoolRealArray(null)",
"fullname": "test_when_calling_is_not_PoolRealArray",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: PoolStringArray",
"context": "Then it passes",
"expected": "Null is not builtin: PoolStringArray",
"success": true
} ],
"context": "when calling asserts.is_not_PoolStringArray(null)",
"fullname": "test_when_calling_is_not_PoolStringArray",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Quat",
"context": "Then it passes",
"expected": "Null is not builtin: Quat",
"success": true
} ],
"context": "when calling asserts.is_not_Quat(null)",
"fullname": "test_when_calling_is_not_Quat",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Dictionary",
"context": "Then it passes",
"expected": "Null is not builtin: Dictionary",
"success": true
} ],
"context": "when calling asserts.is_not_Dictionary(null)",
"fullname": "test_when_calling_is_not_Dictionary",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Vector3",
"context": "Then it passes",
"expected": "Null is not builtin: Vector3",
"success": true
} ],
"context": "when calling asserts.is_not_Vector3(null)",
"fullname": "test_when_calling_is_not_Vector3",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: PoolByteArray",
"context": "Then it passes",
"expected": "Null is not builtin: PoolByteArray",
"success": true
} ],
"context": "when calling asserts.is_not_PoolByteArray(null)",
"fullname": "test_when_calling_is_not_PoolByteArray",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: float",
"context": "Then it passes",
"expected": "Null is not builtin: float",
"success": true
} ],
"context": "when calling asserts.is_not_float(null)",
"fullname": "test_when_calling_is_not_float",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: String",
"context": "Then it passes",
"expected": "Null is not builtin: String",
"success": true
} ],
"context": "when calling asserts.is_not_String(null)",
"fullname": "test_when_calling_is_not_String",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 26,
"path": "res://tests/unit/is_not_instance.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/is_not_instance.test.gd",
"tags": [  ],
"test": ExtResource( 2 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 26
}, {
"context": "Given a Yield",
"methods": [ {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then we set var a to true",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then we set var b to true",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we yield in start twice",
"fullname": "test_When_we_yield_in_start",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then we set var c to true",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then we set var d to true",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we yield in pre thrice",
"fullname": "test_When_we_yield_in_pre",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then the yielder is unpaused",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then the timeout signal of the yielder is connected",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then our signal is connected to the yielder",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we call until signal",
"fullname": "test_When_we_call_until_signal",
"passed": 3,
"success": true,
"time": 0.0,
"total": 3
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then we set var e to true",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then we set var f to true",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we yield twice in execute",
"fullname": "test_When_we_yield_in_execute",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then the yielder is paused",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When a signal being yielded on is emitted",
"fullname": "test_When_a_signal_being_yielded_on_is_emitted_the_yielder_is_stopped",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then the yielder is paused",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then the timeout signal of the yielder is disconnected",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then our signal to the yielder is disconnected",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When the yielder heres our signal",
"fullname": "test_When_the_yielder_hears_our_signal",
"passed": 3,
"success": true,
"time": 0.0,
"total": 3
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then the timeout signal is disconnected",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then the signal-signal is disconnected",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When it is finished",
"fullname": "test_When_yielder_is_finished_signals_are_disconnected",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "[100, Null, Null, Null, Null, Null] is builtin: Array",
"context": "Then we get an array",
"expected": "[100, Null, Null, Null, Null, Null] is builtin: Array",
"success": true
}, {
"actual": "|int| 6 is equal to |int| 6",
"context": "Of size 6",
"expected": "|int| 6 is equal to |int| 6",
"success": true
}, {
"actual": "|int| 100 is equal to |int| 100",
"context": "Where element 0 is 100",
"expected": "|int| 100 is equal to |int| 100",
"success": true
} ],
"context": "When yield(self.yield_value()) returns",
"fullname": "test_When_we_yield_we_get_the_return_value",
"passed": 3,
"success": true,
"time": 0.0,
"total": 3
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then yielder is unpaused",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "The timeout signal of the yielder is connected",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we call until_timeout (with 1.0)",
"fullname": "test_When_we_call_until_timeout",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then yielder is not active",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When asserting against a test",
"fullname": "test_Yielder_is_not_active_when_asserting",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then the yielder is paused",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "The timeout signal of the yielder is not connected",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When the yielder times out on until_timeout(0.1)",
"fullname": "test_When_the_yielder_times_out",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
} ],
"passed": 11,
"path": "res://tests/unit/yield.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/yield.test.gd",
"tags": [  ],
"test": ExtResource( 18 ),
"yield_time": 1.9
},
"success": true,
"time_taken": 0.0,
"total": 11
}, {
"context": "Given A Range Assertion",
"methods": [ {
"assertions": [ {
"actual": "10 is not in range(0, 10)",
"context": "Then it passes",
"expected": "10 is not in range(0, 10)",
"success": true
} ],
"context": "When calling is (10) not in range (in range(0, 10)",
"fullname": "test_when_calling_is_not_in_range",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "0 is in range(0, 10)",
"context": "Then it passes",
"expected": "0 is in range(0, 10)",
"success": true
} ],
"context": "When calling is (0) in range(0, 10)",
"fullname": "test_when_calling_is_in_range",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 2,
"path": "res://tests/unit/range.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/range.test.gd",
"tags": [  ],
"test": ExtResource( 15 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 2
}, {
"context": "Given a Null Assertion",
"methods": [ {
"assertions": [ {
"actual": "|null| Null == null",
"context": "Then it passes",
"expected": "|null| Null == null",
"success": true
} ],
"context": "When calling asserts.is_null(null)",
"fullname": "test_when_calling_null_is_null",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|Object| [Node:6643] != null",
"context": "Then it passes",
"expected": "|Object| [Node:6643] != null",
"success": true
} ],
"context": "When calling Node is not null",
"fullname": "test_when_calling_node_is_not_null",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|Object| [Deleted Object] == null",
"context": "A Freed Node is null in Engine 3.2.2 or greater",
"expected": "|Object| [Deleted Object] == null",
"success": true
} ],
"context": "When calling freed object is null",
"fullname": "test_when_calling_freed_object_is_not_null",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 3,
"path": "res://tests/unit/null.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/null.test.gd",
"tags": [  ],
"test": ExtResource( 12 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 3
}, {
"context": "Given the Addition Operator",
"methods": [ {
"assertions": [ {
"actual": "|int| 4 is equal to |int| 4",
"context": "",
"expected": "|int| 4 is equal to |int| 4",
"success": true
} ],
"context": "When we add 2 to 2 we get 4",
"fullname": "test_add",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 8 is equal to |int| 8",
"context": "",
"expected": "|int| 8 is equal to |int| 8",
"success": true
} ],
"context": "When we add 5 to 3 we get 8",
"fullname": "test_add",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 13 is equal to |int| 13",
"context": "",
"expected": "|int| 13 is equal to |int| 13",
"success": true
} ],
"context": "When we add 7 to 6 we get 13",
"fullname": "test_add",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 0 is equal to |int| 0",
"context": "",
"expected": "|int| 0 is equal to |int| 0",
"success": true
} ],
"context": "When we subtract 2 from 2 we get 0",
"fullname": "test_subtract",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 2 is equal to |int| 2",
"context": "",
"expected": "|int| 2 is equal to |int| 2",
"success": true
} ],
"context": "When we subtract 5 from 3 we get 2",
"fullname": "test_subtract",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 1 is equal to |int| 1",
"context": "",
"expected": "|int| 1 is equal to |int| 1",
"success": true
} ],
"context": "When we subtract 7 from 6 we get 1",
"fullname": "test_subtract",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 6,
"path": "res://tests/unit/parameters.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/parameters.test.gd",
"tags": [  ],
"test": ExtResource( 16 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 6
}, {
"context": "Given an Object Assertion",
"methods": [ {
"assertions": [ {
"actual": "[Node:6639] is not freed",
"context": "Then it passes",
"expected": "[Node:6639] is not freed",
"success": true
} ],
"context": "When calling asserts.is_not_freed(unfreed_object)",
"fullname": "test_when_calling_unfreed_object_is_not_freed",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is freed from memory",
"context": "Then it passes",
"expected": "Null is freed from memory",
"success": true
} ],
"context": "When calling asserts.is_freed(freed_object",
"fullname": "test_when_calling_freed_object_is_freed",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:6625] does not have meta: bad_meta",
"context": "Then it passes",
"expected": "[Node:6625] does not have meta: bad_meta",
"success": true
} ],
"context": "When calling asserts.object_does_not_have_meta()",
"fullname": "test_when_calling_does_not_have_meta",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:6625] has meta: dummy",
"context": "Then it passes",
"expected": "[Node:6625] has meta: dummy",
"success": true
}, {
"actual": "[Node:6625] has meta: dummy",
"context": "Then it passes",
"expected": "[Node:6625] has meta: dummy",
"success": true
} ],
"context": "When calling asserts.object_has_meta() after adding metadata",
"fullname": "test_when_calling_has_meta_after_adding_metadata",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "[Node:6658] is queued for deletion",
"context": "Then it passes",
"expected": "[Node:6658] is queued for deletion",
"success": true
} ],
"context": "When calling asserts.object_is_queued for deletion after calling queue_free",
"fullname": "test_when_calling_obj_is_queued_for_deletion_after_calling_queue_free",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:6625].builtin_dummy is connected to [Node:6625].title",
"context": "Then it passes",
"expected": "[Node:6625].builtin_dummy is connected to [Node:6625].title",
"success": true
} ],
"context": "When calling asserts object is connected with a valid connection",
"fullname": "test_when_calling_obj_is_connected_with_a_real_connection",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:6625].builtin_dummy is not connected to [Node:6625].title",
"context": "Then it passes",
"expected": "[Node:6625].builtin_dummy is not connected to [Node:6625].title",
"success": true
} ],
"context": "When calling asserts object is not connected with an invalid connection",
"fullname": "test_when_calling_obj_is_not_connected_with_an_invalid_connection",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:6665] is blocking signals",
"context": "Then it passes",
"expected": "[Node:6665] is blocking signals",
"success": true
} ],
"context": "When calling is blocking signals while blocking signals",
"fullname": "test_is_blocking_signals",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:6667] is not blocking signals",
"context": "Then it passes",
"expected": "[Node:6667] is not blocking signals",
"success": true
} ],
"context": "When calling is not blocking signals while not blocking signals",
"fullname": "test_is_not_blocking_signals",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:6625] does not have meta: confusing",
"context": "Then it passes",
"expected": "[Node:6625] does not have meta: confusing",
"success": true
} ],
"context": "When calling asserts.object_has_meta with real key but null val",
"fullname": "test_when_calling_does_not_have_meta_real_key_null_value_pair",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:6625] has user signal: dummy_signal",
"context": "Then it passes",
"expected": "[Node:6625] has user signal: dummy_signal",
"success": true
} ],
"context": "When calling obj_has_user_signal after adding a signal",
"fullname": "test_when_calling_has_user_signal_after_adding_a_signal",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:6625] does not have user signal: false_signal",
"context": "Then it passes",
"expected": "[Node:6625] does not have user signal: false_signal",
"success": true
} ],
"context": "When calling obj_does_not_have_user_signal with fake signal",
"fullname": "test_when_calling_does_not_have_user_signal",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:6625] does not have user signal: builtin_dummy",
"context": "Then it passes",
"expected": "[Node:6625] does not have user signal: builtin_dummy",
"success": true
} ],
"context": "When calling does not have user signal with class signal",
"fullname": "test_when_calling_does_not_have_user_signal_with_class_signal_constant",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:6625] has method: title",
"context": "Then it passes",
"expected": "[Node:6625] has method: title",
"success": true
} ],
"context": "When calling has_method('title')",
"fullname": "test_when_calling_has_method_title",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:6674] is not queued for deletion",
"context": "Then it passes",
"expected": "[Node:6674] is not queued for deletion",
"success": true
} ],
"context": "When calling asserts.object_is_not_for_queued_deletion after not calling queue free()",
"fullname": "test_when_calling_obj_is_not_for_queued_deletion_after_not_calling_queue_free",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 15,
"path": "res://tests/unit/object.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/object.test.gd",
"tags": [  ],
"test": ExtResource( 7 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 15
}, {
"context": "Dummy Passing Test",
"methods": [ {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Passing!",
"expected": "|bool| True == true",
"success": true
} ],
"context": "This method passes",
"fullname": "test_this_method_passes",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 1,
"path": "res://tests/unit/suite.test.gd.DummyOne",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/suite.test.gd.DummyOne",
"tags": [  ],
"test": SubResource( 21 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 1
}, {
"context": "Dummy Test 2",
"methods": [ {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Passing!",
"expected": "|bool| True == true",
"success": true
} ],
"context": "This method passes",
"fullname": "test_this_method_passes",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 1,
"path": "res://tests/unit/suite.test.gd.DummyTwo",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/suite.test.gd.DummyTwo",
"tags": [  ],
"test": SubResource( 22 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 1
}, {
"context": "Given a Test Script",
"methods": [ {
"assertions": [ {
"actual": "|bool| True == true",
"context": "if the test didn't break this works",
"expected": "|bool| True == true",
"success": true
} ],
"context": " we can omit describe",
"fullname": "test_we_can_omit_describe",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 10 is greater than |int| 1",
"context": "We get an array of multiple values back",
"expected": "|int| 10 is greater than |int| 1",
"success": true
}, {
"actual": "|int| 0 is not equal to |int| 9",
"context": "With different values",
"expected": "|int| 0 != |int| 9",
"success": true
}, {
"actual": "|int| 10 is greater than |int| 1",
"context": "And we can track multiple properties",
"expected": "|int| 10 is greater than |int| 1",
"success": true
} ],
"context": "When we record properties",
"fullname": "test_we_can_record_properties",
"passed": 3,
"success": true,
"time": 0.0,
"total": 3
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|int| 2 is equal to |int| 2",
"context": "",
"expected": "|int| 2 is equal to |int| 2",
"success": true
} ],
"context": " when we omit context we can see expected and got under method",
"fullname": "test_when_we_omit_context_we_can_see_expected_and_got_under_method",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
} ],
"passed": 3,
"path": "res://tests/unit/test.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/test.test.gd",
"tags": [  ],
"test": ExtResource( 19 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 3
}, {
"context": "Given a String Assertion",
"methods": [ {
"assertions": [ {
"actual": "lorem impsum ends with impsum",
"context": "Then it passes",
"expected": "lorem impsum ends with impsum",
"success": true
} ],
"context": "When calling asserts.string_ends_with('impsum', 'lorem impsum')",
"fullname": "test_when_calling_string_ends_with",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "impsum does not end with lorem",
"context": "Then it passes",
"expected": "impsum does not end with lorem",
"success": true
} ],
"context": "When calling asserts.string_does_not_end_with('lorem', 'impsum')",
"fullname": "test_when_calling_string_does_not_end_with",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "lorem impsum begins with lorem",
"context": "Then it passes",
"expected": "lorem impsum begins with lorem",
"success": true
} ],
"context": "When calling asserts.string_begins_with('lorem', 'lorem impsum')",
"fullname": "test_when_calling_string_begins_with",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "impsum does not contain beem im",
"context": "Then it passes",
"expected": "impsum does not contain beem im",
"success": true
} ],
"context": "When calling asserts.string_does_not_contain('em im', 'impsum')",
"fullname": "test_when_calling_string_does_not_contain",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "impsum does not begin with bleh lorem",
"context": "Then it passes",
"expected": "impsum does not begin with bleh lorem",
"success": true
} ],
"context": "When calling asserts.string_does_not_begin_with('lorem', 'impsum')",
"fullname": "test_when_calling_string_does_not_begin_with",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "lorem impsum contains em im",
"context": "Then it passes",
"expected": "lorem impsum contains em im",
"success": true
} ],
"context": "When calling asserts.string_contains('em im', 'lorem impsum')",
"fullname": "test_when_calling_string_contains",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 6,
"path": "res://tests/unit/string.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/string.test.gd",
"tags": [  ],
"test": ExtResource( 9 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 6
}, {
"context": "Default Args",
"methods": [ {
"assertions": [ {
"actual": "|bool| True == true",
"context": "If this method can be reached then we have doubled a script with default argument(s) properly!",
"expected": "|bool| True == true",
"success": true
} ],
"context": " default arguments of interpolate property",
"fullname": "test_default_arguments_of_interpolate_property",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 1,
"path": "res://tests/integration/default_args.test.gd",
"source": {
"containers": [ "res://tests/integration", "res://tests" ],
"method": "",
"path": "res://tests/integration/default_args.test.gd",
"tags": [  ],
"test": ExtResource( 10 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 1
}, {
"context": "Given a Boolean Assertion",
"methods": [ {
"assertions": [ {
"actual": "|bool| True != false",
"context": "",
"expected": "|bool| True == false",
"success": false
} ],
"context": " intentional failure",
"fullname": "test_intentional_failure",
"passed": 0,
"success": false,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then it passes",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When calling asserts.is_true(true)",
"fullname": "test_when_calling_asserts_is_true",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| False == false",
"context": "Then it passes",
"expected": "|bool| False == false",
"success": true
} ],
"context": "When calling asserts.is_false(false)",
"fullname": "test_when_calling_asserts_is_false",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 2,
"path": "res://tests/integration/boolean.test.gd",
"source": {
"containers": [ "res://tests/integration", "res://tests" ],
"method": "",
"path": "res://tests/integration/boolean.test.gd",
"tags": [  ],
"test": ExtResource( 20 ),
"yield_time": 0.0
},
"success": false,
"time_taken": 0.0,
"total": 3
}, {
"context": "Given a Signal Watcher",
"methods": [ {
"assertions": [ {
"actual": "signal: example was emitted from [Node:6686]",
"context": "Then it captures the emitted signal",
"expected": "signal: example was emitted from [Node:6686]",
"success": true
} ],
"context": "When we watch and emit a signal",
"fullname": "test_When_we_watch_and_emit_a_signal",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Signal: example was emitted from [Node:6686] with arguments: [1, 20, 5]",
"context": "Then it captures any arguments that where passed when the signal was emitted",
"expected": "Signal: example was emitted from [Node:6686] with arguments: [1, 20, 5]",
"success": true
} ],
"context": "When we watch a signal from an object with no bound variables",
"fullname": "test_When_we_watch_a_signal_from_an_object_with_no_bound_variables",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Signal: example was not emitted from [Node:6686]",
"context": "Then it does not capture the non-emitted signal",
"expected": "Signal: example was not emitted from [Node:6686]",
"success": true
} ],
"context": "When we watch and do not emit a signal",
"fullname": "test_When_we_watch_and_do_not_emit_a_signal",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "signal: multiple was emitted from [Node:6686] 2",
"context": "Then we can track how many times we emitted it",
"expected": "signal: multiple was emitted from [Node:6686] 2",
"success": true
} ],
"context": "When we watch and signal and emit it multiple times",
"fullname": "test_When_we_watch_a_signal_and_emit_it_multiple_times",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 4,
"path": "res://tests/unit/watcher.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/watcher.test.gd",
"tags": [  ],
"test": ExtResource( 17 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 4
}, {
"context": "Given a Script Director",
"methods": [ {
"assertions": [ {
"actual": "[Reference:6744] is instance of class: [GDScript:1453]",
"context": "Then we get that inner class back",
"expected": "[Reference:6744] is instance of class: [GDScript:1453]",
"success": true
} ],
"context": "When we double an inner class",
"fullname": "test_When_we_double_an_inner_class",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|Dictionary| {_enter_tree:{arguments:, default_arguments:}, _exit_tree:{arguments:, default_arguments:}, _get:{arguments:a, default_arguments:a}, _get_configuration_warning:{arguments:, default_arguments:}, _get_editor_description:{arguments:, default_arguments:}, _get_import_path:{arguments:, default_arguments:}, _get_property_list:{arguments:, default_arguments:}, _init:{arguments:, default_arguments:}, _input:{arguments:a, default_arguments:a}, _notification:{arguments:a, default_arguments:a}, _physics_process:{arguments:a, default_arguments:a}, _process:{arguments:a, default_arguments:a}, _ready:{arguments:, default_arguments:}, _set:{arguments:a, b, default_arguments:a, b}, _set_editor_description:{arguments:a, default_arguments:a}, _set_import_path:{arguments:a, default_arguments:a}, _to_string:{arguments:, default_arguments:}, _unhandled_input:{arguments:a, default_arguments:a}, _unhandled_key_input:{arguments:a, default_arguments:a}, add:{arguments:a, b, default_arguments:a, b}, add_child:{arguments:a, b, default_arguments:a, b = False}, add_child_below_node:{arguments:a, b, c, default_arguments:a, b, c = False}, add_to_group:{arguments:a, b, default_arguments:a, b = False}, add_user_signal:{arguments:a, b, default_arguments:a, b = []}, call:{arguments:a, default_arguments:a}, call_deferred:{arguments:a, default_arguments:a}, callv:{arguments:a, b, default_arguments:a, b}, can_process:{arguments:, default_arguments:}, can_translate_messages:{arguments:, default_arguments:}, connect:{arguments:a, b, c, d, e, default_arguments:a, b, c, d = [], e = 0}, disconnect:{arguments:a, b, c, default_arguments:a, b, c}, divide:{arguments:a, b, default_arguments:a, b}, duplicate:{arguments:a, default_arguments:a = 15}, emit_signal:{arguments:a, default_arguments:a}, find_node:{arguments:a, b, c, default_arguments:a, b = True, c = True}, find_parent:{arguments:a, default_arguments:a}, free:{arguments:, default_arguments:}, get:{arguments:a, default_arguments:a}, get_child:{arguments:a, default_arguments:a}, get_child_count:{arguments:, default_arguments:}, get_children:{arguments:, default_arguments:}, get_class:{arguments:, default_arguments:}, get_custom_multiplayer:{arguments:, default_arguments:}, get_filename:{arguments:, default_arguments:}, get_groups:{arguments:, default_arguments:}, get_incoming_connections:{arguments:, default_arguments:}, get_index:{arguments:, default_arguments:}, get_indexed:{arguments:a, default_arguments:a}, get_instance_id:{arguments:, default_arguments:}, get_meta:{arguments:a, default_arguments:a}, get_meta_list:{arguments:, default_arguments:}, get_method_list:{arguments:, default_arguments:}, get_multiplayer:{arguments:, default_arguments:}, get_name:{arguments:, default_arguments:}, get_network_master:{arguments:, default_arguments:}, get_node:{arguments:a, default_arguments:a}, get_node_and_resource:{arguments:a, default_arguments:a}, get_node_or_null:{arguments:a, default_arguments:a}, get_owner:{arguments:, default_arguments:}, get_parent:{arguments:, default_arguments:}, get_path:{arguments:, default_arguments:}, get_path_to:{arguments:a, default_arguments:a}, get_pause_mode:{arguments:, default_arguments:}, get_physics_process_delta_time:{arguments:, default_arguments:}, get_position_in_parent:{arguments:, default_arguments:}, get_process_delta_time:{arguments:, default_arguments:}, get_process_priority:{arguments:, default_arguments:}, get_property_list:{arguments:, default_arguments:}, get_scene_instance_load_placeholder:{arguments:, default_arguments:}, get_script:{arguments:, default_arguments:}, get_signal_connection_list:{arguments:a, default_arguments:a}, get_signal_list:{arguments:, default_arguments:}, get_tree:{arguments:, default_arguments:}, get_viewport:{arguments:, default_arguments:}, has_meta:{arguments:a, default_arguments:a}, has_method:{arguments:a, default_arguments:a}, has_node:{arguments:a, default_arguments:a}, has_node_and_resource:{arguments:a, default_arguments:a}, has_signal:{arguments:a, default_arguments:a}, has_user_signal:{arguments:a, default_arguments:a}, is_a_parent_of:{arguments:a, default_arguments:a}, is_blocking_signals:{arguments:, default_arguments:}, is_class:{arguments:a, default_arguments:a}, is_connected:{arguments:a, b, c, default_arguments:a, b, c}, is_displayed_folded:{arguments:, default_arguments:}, is_greater_than:{arguments:a, default_arguments:a}, is_in_group:{arguments:a, default_arguments:a}, is_inside_tree:{arguments:, default_arguments:}, is_network_master:{arguments:, default_arguments:}, is_physics_processing:{arguments:, default_arguments:}, is_physics_processing_internal:{arguments:, default_arguments:}, is_processing:{arguments:, default_arguments:}, is_processing_input:{arguments:, default_arguments:}, is_processing_internal:{arguments:, default_arguments:}, is_processing_unhandled_input:{arguments:, default_arguments:}, is_processing_unhandled_key_input:{arguments:, default_arguments:}, is_queued_for_deletion:{arguments:, default_arguments:}, math_fight:{arguments:, default_arguments:}, move_child:{arguments:a, b, default_arguments:a, b}, multiply:{arguments:a, b, default_arguments:a, b}, notification:{arguments:a, b, default_arguments:a, b = False}, pi:{arguments:, default_arguments:}, print_stray_nodes:{arguments:, default_arguments:}, print_tree:{arguments:, default_arguments:}, print_tree_pretty:{arguments:, default_arguments:}, propagate_call:{arguments:a, b, c, default_arguments:a, b = [], c = False}, propagate_notification:{arguments:a, default_arguments:a}, property_list_changed_notify:{arguments:, default_arguments:}, queue_free:{arguments:, default_arguments:}, raise:{arguments:, default_arguments:}, remove_and_skip:{arguments:, default_arguments:}, remove_child:{arguments:a, default_arguments:a}, remove_from_group:{arguments:a, default_arguments:a}, remove_meta:{arguments:a, default_arguments:a}, replace_by:{arguments:a, b, default_arguments:a, b = False}, request_ready:{arguments:, default_arguments:}, rpc:{arguments:a, default_arguments:a}, rpc_config:{arguments:a, b, default_arguments:a, b}, rpc_id:{arguments:a, b, default_arguments:a, b}, rpc_unreliable:{arguments:a, default_arguments:a}, rpc_unreliable_id:{arguments:a, b, default_arguments:a, b}, rset:{arguments:a, b, default_arguments:a, b}, rset_config:{arguments:a, b, default_arguments:a, b}, rset_id:{arguments:a, b, c, default_arguments:a, b, c}, rset_unreliable:{arguments:a, b, default_arguments:a, b}, rset_unreliable_id:{arguments:a, b, c, default_arguments:a, b, c}, set:{arguments:a, b, default_arguments:a, b}, set_block_signals:{arguments:a, default_arguments:a}, set_custom_multiplayer:{arguments:a, default_arguments:a}, set_deferred:{arguments:a, b, default_arguments:a, b}, set_display_folded:{arguments:a, default_arguments:a}, set_filename:{arguments:a, default_arguments:a}, set_indexed:{arguments:a, b, default_arguments:a, b}, set_message_translation:{arguments:a, default_arguments:a}, set_meta:{arguments:a, b, default_arguments:a, b}, set_name:{arguments:a, default_arguments:a}, set_network_master:{arguments:a, b, default_arguments:a, b = True}, set_owner:{arguments:a, default_arguments:a}, set_pause_mode:{arguments:a, default_arguments:a}, set_physics_process:{arguments:a, default_arguments:a}, set_physics_process_internal:{arguments:a, default_arguments:a}, set_process:{arguments:a, default_arguments:a}, set_process_input:{arguments:a, default_arguments:a}, set_process_internal:{arguments:a, default_arguments:a}, set_process_priority:{arguments:a, default_arguments:a}, set_process_unhandled_input:{arguments:a, default_arguments:a}, set_process_unhandled_key_input:{arguments:a, default_arguments:a}, set_scene_instance_load_placeholder:{arguments:a, default_arguments:a}, set_script:{arguments:a, default_arguments:a}, subtract:{arguments:a, b, default_arguments:a, b}, sum:{arguments:a, default_arguments:a}, to_string:{arguments:, default_arguments:}, tr:{arguments:a, default_arguments:a}, update_configuration_warning:{arguments:, default_arguments:}} is not equal to |Dictionary| {_enter_tree:{arguments:, default_arguments:}, _exit_tree:{arguments:, default_arguments:}, _get:{arguments:a, default_arguments:a}, _get_configuration_warning:{arguments:, default_arguments:}, _get_editor_description:{arguments:, default_arguments:}, _get_import_path:{arguments:, default_arguments:}, _get_property_list:{arguments:, default_arguments:}, _init:{arguments:, default_arguments:}, _input:{arguments:a, default_arguments:a}, _notification:{arguments:a, default_arguments:a}, _physics_process:{arguments:a, default_arguments:a}, _process:{arguments:a, default_arguments:a}, _ready:{arguments:, default_arguments:}, _set:{arguments:a, b, default_arguments:a, b}, _set_editor_description:{arguments:a, default_arguments:a}, _set_import_path:{arguments:a, default_arguments:a}, _to_string:{arguments:, default_arguments:}, _unhandled_input:{arguments:a, default_arguments:a}, _unhandled_key_input:{arguments:a, default_arguments:a}, add:{arguments:a, b, default_arguments:a, b}, add_child:{arguments:a, b, default_arguments:a, b = False}, add_child_below_node:{arguments:a, b, c, default_arguments:a, b, c = False}, add_to_group:{arguments:a, b, default_arguments:a, b = False}, add_user_signal:{arguments:a, b, default_arguments:a, b = []}, call:{arguments:a, default_arguments:a}, call_deferred:{arguments:a, default_arguments:a}, callv:{arguments:a, b, default_arguments:a, b}, can_process:{arguments:, default_arguments:}, can_translate_messages:{arguments:, default_arguments:}, connect:{arguments:a, b, c, d, e, default_arguments:a, b, c, d = [], e = 0}, disconnect:{arguments:a, b, c, default_arguments:a, b, c}, divide:{arguments:a, b, default_arguments:a, b}, duplicate:{arguments:a, default_arguments:a = 15}, emit_signal:{arguments:a, default_arguments:a}, find_node:{arguments:a, b, c, default_arguments:a, b = True, c = True}, find_parent:{arguments:a, default_arguments:a}, free:{arguments:, default_arguments:}, get:{arguments:a, default_arguments:a}, get_child:{arguments:a, default_arguments:a}, get_child_count:{arguments:, default_arguments:}, get_children:{arguments:, default_arguments:}, get_class:{arguments:, default_arguments:}, get_custom_multiplayer:{arguments:, default_arguments:}, get_filename:{arguments:, default_arguments:}, get_groups:{arguments:, default_arguments:}, get_incoming_connections:{arguments:, default_arguments:}, get_index:{arguments:, default_arguments:}, get_indexed:{arguments:a, default_arguments:a}, get_instance_id:{arguments:, default_arguments:}, get_meta:{arguments:a, default_arguments:a}, get_meta_list:{arguments:, default_arguments:}, get_method_list:{arguments:, default_arguments:}, get_multiplayer:{arguments:, default_arguments:}, get_name:{arguments:, default_arguments:}, get_network_master:{arguments:, default_arguments:}, get_node:{arguments:a, default_arguments:a}, get_node_and_resource:{arguments:a, default_arguments:a}, get_node_or_null:{arguments:a, default_arguments:a}, get_owner:{arguments:, default_arguments:}, get_parent:{arguments:, default_arguments:}, get_path:{arguments:, default_arguments:}, get_path_to:{arguments:a, default_arguments:a}, get_pause_mode:{arguments:, default_arguments:}, get_physics_process_delta_time:{arguments:, default_arguments:}, get_position_in_parent:{arguments:, default_arguments:}, get_process_delta_time:{arguments:, default_arguments:}, get_process_priority:{arguments:, default_arguments:}, get_property_list:{arguments:, default_arguments:}, get_scene_instance_load_placeholder:{arguments:, default_arguments:}, get_script:{arguments:, default_arguments:}, get_signal_connection_list:{arguments:a, default_arguments:a}, get_signal_list:{arguments:, default_arguments:}, get_tree:{arguments:, default_arguments:}, get_viewport:{arguments:, default_arguments:}, has_meta:{arguments:a, default_arguments:a}, has_method:{arguments:a, default_arguments:a}, has_node:{arguments:a, default_arguments:a}, has_node_and_resource:{arguments:a, default_arguments:a}, has_signal:{arguments:a, default_arguments:a}, has_user_signal:{arguments:a, default_arguments:a}, is_a_parent_of:{arguments:a, default_arguments:a}, is_blocking_signals:{arguments:, default_arguments:}, is_class:{arguments:a, default_arguments:a}, is_connected:{arguments:a, b, c, default_arguments:a, b, c}, is_displayed_folded:{arguments:, default_arguments:}, is_greater_than:{arguments:a, default_arguments:a}, is_in_group:{arguments:a, default_arguments:a}, is_inside_tree:{arguments:, default_arguments:}, is_network_master:{arguments:, default_arguments:}, is_physics_processing:{arguments:, default_arguments:}, is_physics_processing_internal:{arguments:, default_arguments:}, is_processing:{arguments:, default_arguments:}, is_processing_input:{arguments:, default_arguments:}, is_processing_internal:{arguments:, default_arguments:}, is_processing_unhandled_input:{arguments:, default_arguments:}, is_processing_unhandled_key_input:{arguments:, default_arguments:}, is_queued_for_deletion:{arguments:, default_arguments:}, math_fight:{arguments:, default_arguments:}, move_child:{arguments:a, b, default_arguments:a, b}, multiply:{arguments:a, b, default_arguments:a, b}, notification:{arguments:a, b, default_arguments:a, b = False}, pi:{arguments:, default_arguments:}, print_stray_nodes:{arguments:, default_arguments:}, print_tree:{arguments:, default_arguments:}, print_tree_pretty:{arguments:, default_arguments:}, propagate_call:{arguments:a, b, c, default_arguments:a, b = [], c = False}, propagate_notification:{arguments:a, default_arguments:a}, property_list_changed_notify:{arguments:, default_arguments:}, queue_free:{arguments:, default_arguments:}, raise:{arguments:, default_arguments:}, remove_and_skip:{arguments:, default_arguments:}, remove_child:{arguments:a, default_arguments:a}, remove_from_group:{arguments:a, default_arguments:a}, remove_meta:{arguments:a, default_arguments:a}, replace_by:{arguments:a, b, default_arguments:a, b = False}, request_ready:{arguments:, default_arguments:}, rpc:{arguments:a, default_arguments:a}, rpc_config:{arguments:a, b, default_arguments:a, b}, rpc_id:{arguments:a, b, default_arguments:a, b}, rpc_unreliable:{arguments:a, default_arguments:a}, rpc_unreliable_id:{arguments:a, b, default_arguments:a, b}, rset:{arguments:a, b, default_arguments:a, b}, rset_config:{arguments:a, b, default_arguments:a, b}, rset_id:{arguments:a, b, c, default_arguments:a, b, c}, rset_unreliable:{arguments:a, b, default_arguments:a, b}, rset_unreliable_id:{arguments:a, b, c, default_arguments:a, b, c}, set:{arguments:a, b, default_arguments:a, b}, set_block_signals:{arguments:a, default_arguments:a}, set_custom_multiplayer:{arguments:a, default_arguments:a}, set_deferred:{arguments:a, b, default_arguments:a, b}, set_display_folded:{arguments:a, default_arguments:a}, set_filename:{arguments:a, default_arguments:a}, set_indexed:{arguments:a, b, default_arguments:a, b}, set_message_translation:{arguments:a, default_arguments:a}, set_meta:{arguments:a, b, default_arguments:a, b}, set_name:{arguments:a, default_arguments:a}, set_network_master:{arguments:a, b, default_arguments:a, b = True}, set_owner:{arguments:a, default_arguments:a}, set_pause_mode:{arguments:a, default_arguments:a}, set_physics_process:{arguments:a, default_arguments:a}, set_physics_process_internal:{arguments:a, default_arguments:a}, set_process:{arguments:a, default_arguments:a}, set_process_input:{arguments:a, default_arguments:a}, set_process_internal:{arguments:a, default_arguments:a}, set_process_priority:{arguments:a, default_arguments:a}, set_process_unhandled_input:{arguments:a, default_arguments:a}, set_process_unhandled_key_input:{arguments:a, default_arguments:a}, set_scene_instance_load_placeholder:{arguments:a, default_arguments:a}, set_script:{arguments:a, default_arguments:a}, subtract:{arguments:a, b, default_arguments:a, b}, sum:{arguments:a, default_arguments:a}, to_string:{arguments:, default_arguments:}, tr:{arguments:a, default_arguments:a}, update_configuration_warning:{arguments:, default_arguments:}}",
"context": "Then they do not share resources",
"expected": "|Dictionary| {_enter_tree:{arguments:, default_arguments:}, _exit_tree:{arguments:, default_arguments:}, _get:{arguments:a, default_arguments:a}, _get_configuration_warning:{arguments:, default_arguments:}, _get_editor_description:{arguments:, default_arguments:}, _get_import_path:{arguments:, default_arguments:}, _get_property_list:{arguments:, default_arguments:}, _init:{arguments:, default_arguments:}, _input:{arguments:a, default_arguments:a}, _notification:{arguments:a, default_arguments:a}, _physics_process:{arguments:a, default_arguments:a}, _process:{arguments:a, default_arguments:a}, _ready:{arguments:, default_arguments:}, _set:{arguments:a, b, default_arguments:a, b}, _set_editor_description:{arguments:a, default_arguments:a}, _set_import_path:{arguments:a, default_arguments:a}, _to_string:{arguments:, default_arguments:}, _unhandled_input:{arguments:a, default_arguments:a}, _unhandled_key_input:{arguments:a, default_arguments:a}, add:{arguments:a, b, default_arguments:a, b}, add_child:{arguments:a, b, default_arguments:a, b = False}, add_child_below_node:{arguments:a, b, c, default_arguments:a, b, c = False}, add_to_group:{arguments:a, b, default_arguments:a, b = False}, add_user_signal:{arguments:a, b, default_arguments:a, b = []}, call:{arguments:a, default_arguments:a}, call_deferred:{arguments:a, default_arguments:a}, callv:{arguments:a, b, default_arguments:a, b}, can_process:{arguments:, default_arguments:}, can_translate_messages:{arguments:, default_arguments:}, connect:{arguments:a, b, c, d, e, default_arguments:a, b, c, d = [], e = 0}, disconnect:{arguments:a, b, c, default_arguments:a, b, c}, divide:{arguments:a, b, default_arguments:a, b}, duplicate:{arguments:a, default_arguments:a = 15}, emit_signal:{arguments:a, default_arguments:a}, find_node:{arguments:a, b, c, default_arguments:a, b = True, c = True}, find_parent:{arguments:a, default_arguments:a}, free:{arguments:, default_arguments:}, get:{arguments:a, default_arguments:a}, get_child:{arguments:a, default_arguments:a}, get_child_count:{arguments:, default_arguments:}, get_children:{arguments:, default_arguments:}, get_class:{arguments:, default_arguments:}, get_custom_multiplayer:{arguments:, default_arguments:}, get_filename:{arguments:, default_arguments:}, get_groups:{arguments:, default_arguments:}, get_incoming_connections:{arguments:, default_arguments:}, get_index:{arguments:, default_arguments:}, get_indexed:{arguments:a, default_arguments:a}, get_instance_id:{arguments:, default_arguments:}, get_meta:{arguments:a, default_arguments:a}, get_meta_list:{arguments:, default_arguments:}, get_method_list:{arguments:, default_arguments:}, get_multiplayer:{arguments:, default_arguments:}, get_name:{arguments:, default_arguments:}, get_network_master:{arguments:, default_arguments:}, get_node:{arguments:a, default_arguments:a}, get_node_and_resource:{arguments:a, default_arguments:a}, get_node_or_null:{arguments:a, default_arguments:a}, get_owner:{arguments:, default_arguments:}, get_parent:{arguments:, default_arguments:}, get_path:{arguments:, default_arguments:}, get_path_to:{arguments:a, default_arguments:a}, get_pause_mode:{arguments:, default_arguments:}, get_physics_process_delta_time:{arguments:, default_arguments:}, get_position_in_parent:{arguments:, default_arguments:}, get_process_delta_time:{arguments:, default_arguments:}, get_process_priority:{arguments:, default_arguments:}, get_property_list:{arguments:, default_arguments:}, get_scene_instance_load_placeholder:{arguments:, default_arguments:}, get_script:{arguments:, default_arguments:}, get_signal_connection_list:{arguments:a, default_arguments:a}, get_signal_list:{arguments:, default_arguments:}, get_tree:{arguments:, default_arguments:}, get_viewport:{arguments:, default_arguments:}, has_meta:{arguments:a, default_arguments:a}, has_method:{arguments:a, default_arguments:a}, has_node:{arguments:a, default_arguments:a}, has_node_and_resource:{arguments:a, default_arguments:a}, has_signal:{arguments:a, default_arguments:a}, has_user_signal:{arguments:a, default_arguments:a}, is_a_parent_of:{arguments:a, default_arguments:a}, is_blocking_signals:{arguments:, default_arguments:}, is_class:{arguments:a, default_arguments:a}, is_connected:{arguments:a, b, c, default_arguments:a, b, c}, is_displayed_folded:{arguments:, default_arguments:}, is_greater_than:{arguments:a, default_arguments:a}, is_in_group:{arguments:a, default_arguments:a}, is_inside_tree:{arguments:, default_arguments:}, is_network_master:{arguments:, default_arguments:}, is_physics_processing:{arguments:, default_arguments:}, is_physics_processing_internal:{arguments:, default_arguments:}, is_processing:{arguments:, default_arguments:}, is_processing_input:{arguments:, default_arguments:}, is_processing_internal:{arguments:, default_arguments:}, is_processing_unhandled_input:{arguments:, default_arguments:}, is_processing_unhandled_key_input:{arguments:, default_arguments:}, is_queued_for_deletion:{arguments:, default_arguments:}, math_fight:{arguments:, default_arguments:}, move_child:{arguments:a, b, default_arguments:a, b}, multiply:{arguments:a, b, default_arguments:a, b}, notification:{arguments:a, b, default_arguments:a, b = False}, pi:{arguments:, default_arguments:}, print_stray_nodes:{arguments:, default_arguments:}, print_tree:{arguments:, default_arguments:}, print_tree_pretty:{arguments:, default_arguments:}, propagate_call:{arguments:a, b, c, default_arguments:a, b = [], c = False}, propagate_notification:{arguments:a, default_arguments:a}, property_list_changed_notify:{arguments:, default_arguments:}, queue_free:{arguments:, default_arguments:}, raise:{arguments:, default_arguments:}, remove_and_skip:{arguments:, default_arguments:}, remove_child:{arguments:a, default_arguments:a}, remove_from_group:{arguments:a, default_arguments:a}, remove_meta:{arguments:a, default_arguments:a}, replace_by:{arguments:a, b, default_arguments:a, b = False}, request_ready:{arguments:, default_arguments:}, rpc:{arguments:a, default_arguments:a}, rpc_config:{arguments:a, b, default_arguments:a, b}, rpc_id:{arguments:a, b, default_arguments:a, b}, rpc_unreliable:{arguments:a, default_arguments:a}, rpc_unreliable_id:{arguments:a, b, default_arguments:a, b}, rset:{arguments:a, b, default_arguments:a, b}, rset_config:{arguments:a, b, default_arguments:a, b}, rset_id:{arguments:a, b, c, default_arguments:a, b, c}, rset_unreliable:{arguments:a, b, default_arguments:a, b}, rset_unreliable_id:{arguments:a, b, c, default_arguments:a, b, c}, set:{arguments:a, b, default_arguments:a, b}, set_block_signals:{arguments:a, default_arguments:a}, set_custom_multiplayer:{arguments:a, default_arguments:a}, set_deferred:{arguments:a, b, default_arguments:a, b}, set_display_folded:{arguments:a, default_arguments:a}, set_filename:{arguments:a, default_arguments:a}, set_indexed:{arguments:a, b, default_arguments:a, b}, set_message_translation:{arguments:a, default_arguments:a}, set_meta:{arguments:a, b, default_arguments:a, b}, set_name:{arguments:a, default_arguments:a}, set_network_master:{arguments:a, b, default_arguments:a, b = True}, set_owner:{arguments:a, default_arguments:a}, set_pause_mode:{arguments:a, default_arguments:a}, set_physics_process:{arguments:a, default_arguments:a}, set_physics_process_internal:{arguments:a, default_arguments:a}, set_process:{arguments:a, default_arguments:a}, set_process_input:{arguments:a, default_arguments:a}, set_process_internal:{arguments:a, default_arguments:a}, set_process_priority:{arguments:a, default_arguments:a}, set_process_unhandled_input:{arguments:a, default_arguments:a}, set_process_unhandled_key_input:{arguments:a, default_arguments:a}, set_scene_instance_load_placeholder:{arguments:a, default_arguments:a}, set_script:{arguments:a, default_arguments:a}, subtract:{arguments:a, b, default_arguments:a, b}, sum:{arguments:a, default_arguments:a}, to_string:{arguments:, default_arguments:}, tr:{arguments:a, default_arguments:a}, update_configuration_warning:{arguments:, default_arguments:}} != |Dictionary| {_enter_tree:{arguments:, default_arguments:}, _exit_tree:{arguments:, default_arguments:}, _get:{arguments:a, default_arguments:a}, _get_configuration_warning:{arguments:, default_arguments:}, _get_editor_description:{arguments:, default_arguments:}, _get_import_path:{arguments:, default_arguments:}, _get_property_list:{arguments:, default_arguments:}, _init:{arguments:, default_arguments:}, _input:{arguments:a, default_arguments:a}, _notification:{arguments:a, default_arguments:a}, _physics_process:{arguments:a, default_arguments:a}, _process:{arguments:a, default_arguments:a}, _ready:{arguments:, default_arguments:}, _set:{arguments:a, b, default_arguments:a, b}, _set_editor_description:{arguments:a, default_arguments:a}, _set_import_path:{arguments:a, default_arguments:a}, _to_string:{arguments:, default_arguments:}, _unhandled_input:{arguments:a, default_arguments:a}, _unhandled_key_input:{arguments:a, default_arguments:a}, add:{arguments:a, b, default_arguments:a, b}, add_child:{arguments:a, b, default_arguments:a, b = False}, add_child_below_node:{arguments:a, b, c, default_arguments:a, b, c = False}, add_to_group:{arguments:a, b, default_arguments:a, b = False}, add_user_signal:{arguments:a, b, default_arguments:a, b = []}, call:{arguments:a, default_arguments:a}, call_deferred:{arguments:a, default_arguments:a}, callv:{arguments:a, b, default_arguments:a, b}, can_process:{arguments:, default_arguments:}, can_translate_messages:{arguments:, default_arguments:}, connect:{arguments:a, b, c, d, e, default_arguments:a, b, c, d = [], e = 0}, disconnect:{arguments:a, b, c, default_arguments:a, b, c}, divide:{arguments:a, b, default_arguments:a, b}, duplicate:{arguments:a, default_arguments:a = 15}, emit_signal:{arguments:a, default_arguments:a}, find_node:{arguments:a, b, c, default_arguments:a, b = True, c = True}, find_parent:{arguments:a, default_arguments:a}, free:{arguments:, default_arguments:}, get:{arguments:a, default_arguments:a}, get_child:{arguments:a, default_arguments:a}, get_child_count:{arguments:, default_arguments:}, get_children:{arguments:, default_arguments:}, get_class:{arguments:, default_arguments:}, get_custom_multiplayer:{arguments:, default_arguments:}, get_filename:{arguments:, default_arguments:}, get_groups:{arguments:, default_arguments:}, get_incoming_connections:{arguments:, default_arguments:}, get_index:{arguments:, default_arguments:}, get_indexed:{arguments:a, default_arguments:a}, get_instance_id:{arguments:, default_arguments:}, get_meta:{arguments:a, default_arguments:a}, get_meta_list:{arguments:, default_arguments:}, get_method_list:{arguments:, default_arguments:}, get_multiplayer:{arguments:, default_arguments:}, get_name:{arguments:, default_arguments:}, get_network_master:{arguments:, default_arguments:}, get_node:{arguments:a, default_arguments:a}, get_node_and_resource:{arguments:a, default_arguments:a}, get_node_or_null:{arguments:a, default_arguments:a}, get_owner:{arguments:, default_arguments:}, get_parent:{arguments:, default_arguments:}, get_path:{arguments:, default_arguments:}, get_path_to:{arguments:a, default_arguments:a}, get_pause_mode:{arguments:, default_arguments:}, get_physics_process_delta_time:{arguments:, default_arguments:}, get_position_in_parent:{arguments:, default_arguments:}, get_process_delta_time:{arguments:, default_arguments:}, get_process_priority:{arguments:, default_arguments:}, get_property_list:{arguments:, default_arguments:}, get_scene_instance_load_placeholder:{arguments:, default_arguments:}, get_script:{arguments:, default_arguments:}, get_signal_connection_list:{arguments:a, default_arguments:a}, get_signal_list:{arguments:, default_arguments:}, get_tree:{arguments:, default_arguments:}, get_viewport:{arguments:, default_arguments:}, has_meta:{arguments:a, default_arguments:a}, has_method:{arguments:a, default_arguments:a}, has_node:{arguments:a, default_arguments:a}, has_node_and_resource:{arguments:a, default_arguments:a}, has_signal:{arguments:a, default_arguments:a}, has_user_signal:{arguments:a, default_arguments:a}, is_a_parent_of:{arguments:a, default_arguments:a}, is_blocking_signals:{arguments:, default_arguments:}, is_class:{arguments:a, default_arguments:a}, is_connected:{arguments:a, b, c, default_arguments:a, b, c}, is_displayed_folded:{arguments:, default_arguments:}, is_greater_than:{arguments:a, default_arguments:a}, is_in_group:{arguments:a, default_arguments:a}, is_inside_tree:{arguments:, default_arguments:}, is_network_master:{arguments:, default_arguments:}, is_physics_processing:{arguments:, default_arguments:}, is_physics_processing_internal:{arguments:, default_arguments:}, is_processing:{arguments:, default_arguments:}, is_processing_input:{arguments:, default_arguments:}, is_processing_internal:{arguments:, default_arguments:}, is_processing_unhandled_input:{arguments:, default_arguments:}, is_processing_unhandled_key_input:{arguments:, default_arguments:}, is_queued_for_deletion:{arguments:, default_arguments:}, math_fight:{arguments:, default_arguments:}, move_child:{arguments:a, b, default_arguments:a, b}, multiply:{arguments:a, b, default_arguments:a, b}, notification:{arguments:a, b, default_arguments:a, b = False}, pi:{arguments:, default_arguments:}, print_stray_nodes:{arguments:, default_arguments:}, print_tree:{arguments:, default_arguments:}, print_tree_pretty:{arguments:, default_arguments:}, propagate_call:{arguments:a, b, c, default_arguments:a, b = [], c = False}, propagate_notification:{arguments:a, default_arguments:a}, property_list_changed_notify:{arguments:, default_arguments:}, queue_free:{arguments:, default_arguments:}, raise:{arguments:, default_arguments:}, remove_and_skip:{arguments:, default_arguments:}, remove_child:{arguments:a, default_arguments:a}, remove_from_group:{arguments:a, default_arguments:a}, remove_meta:{arguments:a, default_arguments:a}, replace_by:{arguments:a, b, default_arguments:a, b = False}, request_ready:{arguments:, default_arguments:}, rpc:{arguments:a, default_arguments:a}, rpc_config:{arguments:a, b, default_arguments:a, b}, rpc_id:{arguments:a, b, default_arguments:a, b}, rpc_unreliable:{arguments:a, default_arguments:a}, rpc_unreliable_id:{arguments:a, b, default_arguments:a, b}, rset:{arguments:a, b, default_arguments:a, b}, rset_config:{arguments:a, b, default_arguments:a, b}, rset_id:{arguments:a, b, c, default_arguments:a, b, c}, rset_unreliable:{arguments:a, b, default_arguments:a, b}, rset_unreliable_id:{arguments:a, b, c, default_arguments:a, b, c}, set:{arguments:a, b, default_arguments:a, b}, set_block_signals:{arguments:a, default_arguments:a}, set_custom_multiplayer:{arguments:a, default_arguments:a}, set_deferred:{arguments:a, b, default_arguments:a, b}, set_display_folded:{arguments:a, default_arguments:a}, set_filename:{arguments:a, default_arguments:a}, set_indexed:{arguments:a, b, default_arguments:a, b}, set_message_translation:{arguments:a, default_arguments:a}, set_meta:{arguments:a, b, default_arguments:a, b}, set_name:{arguments:a, default_arguments:a}, set_network_master:{arguments:a, b, default_arguments:a, b = True}, set_owner:{arguments:a, default_arguments:a}, set_pause_mode:{arguments:a, default_arguments:a}, set_physics_process:{arguments:a, default_arguments:a}, set_physics_process_internal:{arguments:a, default_arguments:a}, set_process:{arguments:a, default_arguments:a}, set_process_input:{arguments:a, default_arguments:a}, set_process_internal:{arguments:a, default_arguments:a}, set_process_priority:{arguments:a, default_arguments:a}, set_process_unhandled_input:{arguments:a, default_arguments:a}, set_process_unhandled_key_input:{arguments:a, default_arguments:a}, set_scene_instance_load_placeholder:{arguments:a, default_arguments:a}, set_script:{arguments:a, default_arguments:a}, subtract:{arguments:a, b, default_arguments:a, b}, sum:{arguments:a, default_arguments:a}, to_string:{arguments:, default_arguments:}, tr:{arguments:a, default_arguments:a}, update_configuration_warning:{arguments:, default_arguments:}}",
"success": true
} ],
"context": "When we create two of it for the same script",
"fullname": "test_When_we_create_two_of_it_for_the_same_script",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|Object| [Node:6840] is equal to |Object| [Node:6840]",
"context": "Then we get the same double back",
"expected": "|Object| [Node:6840] is equal to |Object| [Node:6840]",
"success": true
} ],
"context": "When we call the double the second time",
"fullname": "test_When_we_call_double_a_second_time_on",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 3,
"path": "res://tests/integration/script_director.test.gd",
"source": {
"containers": [ "res://tests/integration", "res://tests" ],
"method": "",
"path": "res://tests/integration/script_director.test.gd",
"tags": [  ],
"test": ExtResource( 13 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 3
}, {
"context": "Given is_on_floor",
"methods": [ {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then it can be stubbed",
"expected": "|bool| True == true",
"success": true
} ],
"context": "From a built-in KinematicBody2D2",
"fullname": "test_stubbing_is_on_floor_method_from_builtin_class2",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then it can be stubbed",
"expected": "|bool| True == true",
"success": true
} ],
"context": "From a child node of a scene without scripts",
"fullname": "test_stubbing_is_on_floor_as_child_node_with_no_script",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then it can be stubbed",
"expected": "|bool| True == true",
"success": true
} ],
"context": "From a user-defined script",
"fullname": "test_stubbing_is_on_floor_method_from_user_defined_class",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 3,
"path": "res://tests/integration/on_floor.test.gd",
"source": {
"containers": [ "res://tests/integration", "res://tests" ],
"method": "",
"path": "res://tests/integration/on_floor.test.gd",
"tags": [  ],
"test": ExtResource( 5 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 3
}, {
"context": "Given a Scene Director",
"methods": [ {
"assertions": [ {
"actual": "|Dictionary| {.:[Reference:6734], A:[Reference:6735], A/B:[Reference:6737], C:[Reference:6736], C/D:[Reference:6738]} is not equal to |Dictionary| {.:[Reference:6760], A:[Reference:6761], A/B:[Reference:6763], C:[Reference:6762], C/D:[Reference:6764]}",
"context": "Then they do not share resources",
"expected": "|Dictionary| {.:[Reference:6734], A:[Reference:6735], A/B:[Reference:6737], C:[Reference:6736], C/D:[Reference:6738]} != |Dictionary| {.:[Reference:6760], A:[Reference:6761], A/B:[Reference:6763], C:[Reference:6762], C/D:[Reference:6764]}",
"success": true
} ],
"context": "When we create two of it for the same scene",
"fullname": "test_When_we_create_two_of_it_for_the_same_scene",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 999 is equal to |int| 999",
"context": "Then we get the stubbed return value",
"expected": "|int| 999 is equal to |int| 999",
"success": true
} ],
"context": "When we call a method from a child node that we stubbed",
"fullname": "test_When_we_call_a_method_from_a_child_node_that_we_stubbed",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 9999 is equal to |int| 9999",
"context": "Then we get the stubbed return value",
"expected": "|int| 9999 is equal to |int| 9999",
"success": true
} ],
"context": "When we call a method from the root node that we stubbed",
"fullname": "test_When_we_call_a_method_from_the_root_node_that_we_stubbed",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 99 is equal to |int| 99",
"context": "Then we get the stubbed return value",
"expected": "|int| 99 is equal to |int| 99",
"success": true
} ],
"context": "When we call a method from a grandchild node that we stubbed",
"fullname": "test_When_we_call_a_method_from_a_grandchild_node_that_we_stubbed",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|NodePath| A is equal to |NodePath| A",
"context": "We have the correct NodePath Set",
"expected": "|NodePath| A is equal to |NodePath| A",
"success": true
} ],
"context": "When we add it to the tree it runs",
"fullname": "test_When_we_add_it_to_the_tree_it_runs",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 5,
"path": "res://tests/integration/scene_director.test.gd",
"source": {
"containers": [ "res://tests/integration", "res://tests" ],
"method": "",
"path": "res://tests/integration/scene_director.test.gd",
"tags": [  ],
"test": ExtResource( 4 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 5
}, {
"context": "Given a Boolean Assertion",
"methods": [ {
"assertions": [ {
"actual": "|bool| True != false",
"context": "",
"expected": "|bool| True == false",
"success": false
} ],
"context": " intentional failure",
"fullname": "test_intentional_failure",
"passed": 0,
"success": false,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then it passes",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When calling asserts.is_true(true)",
"fullname": "test_when_calling_asserts_is_true",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| False == false",
"context": "Then it passes",
"expected": "|bool| False == false",
"success": true
} ],
"context": "When calling asserts.is_false(false)",
"fullname": "test_when_calling_asserts_is_false",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 2,
"path": "res://tests/unit/boolean.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/boolean.test.gd",
"tags": [  ],
"test": ExtResource( 11 ),
"yield_time": 0.0
},
"success": false,
"time_taken": 0.0,
"total": 3
}, {
"context": "Given A File Assertion",
"methods": [ {
"assertions": [ {
"actual": "res://somefile.gd does not exist",
"context": "Then it passes",
"expected": "res://somefile.gd does not exist",
"success": true
} ],
"context": "When calling asserts.file_does_not_exist when there is no file",
"fullname": "test_when_calling_file_does_not_exist_when_there_is_no_file",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "res://tests/unit/file.test.gd exists",
"context": "Then it passes",
"expected": "res://tests/unit/file.test.gd exists",
"success": true
} ],
"context": "When calling asserts.file_exists when the file is this suite",
"fullname": "test_when_calling_file_exists_when_file_is_self",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": " does not exist",
"context": "Then it passes",
"expected": " does not exist",
"success": true
} ],
"context": "When calling asserts file does not exist when path is empty",
"fullname": "test_when_calling_file_does_not_exist_when_path_is_empty",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 3,
"path": "res://tests/unit/file.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/file.test.gd",
"tags": [  ],
"test": ExtResource( 3 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 3
}, {
"context": "Given an Equality Assertion",
"methods": [ {
"assertions": [ {
"actual": "|int| 1 is equal to |int| 1",
"context": "Then it passes",
"expected": "|int| 1 is equal to |int| 1",
"success": true
} ],
"context": "When calling asserts.is_equal(1, 1)",
"fullname": "test_when_calling_is_equal",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 2 is equal or greater |int| 1",
"context": "Then it passes",
"expected": "|int| 2 is equal or greater |int| 1",
"success": true
} ],
"context": "When calling asserts.is_equal_or_greater_than(2, 1)",
"fullname": "test_when_calling_is_equal_or_greater_than",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 2 is greater than |int| 1",
"context": "Then it passes",
"expected": "|int| 2 is greater than |int| 1",
"success": true
} ],
"context": "When calling asserts.is_greater_than(2, 1)",
"fullname": "test_when_calling_is_greater_than",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 1 is less than |int| 2",
"context": "Then it passes",
"expected": "|int| 1 is less than |int| 2",
"success": true
} ],
"context": "When calling asserts.is_less_than(2, 1)",
"fullname": "test_when_calling_is_less_than",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 5 is not equal to |int| 6",
"context": "Then it passes",
"expected": "|int| 5 != |int| 6",
"success": true
} ],
"context": "When callign asserts.is_not_equal(5, 6)",
"fullname": "test_when_calling_is_not_equal",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 1 is equal or less than |int| 1",
"context": "Then it passes!",
"expected": "|int| 1 is equal or less than |int| 1",
"success": true
} ],
"context": "When calling asserts.is_equal_or_less_than(1, 1)",
"fullname": "test_when_calling_is_equal_or_less_than_with_equal_values",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 1 is equal or greater |int| 1",
"context": "Then it passes",
"expected": "|int| 1 is equal or greater |int| 1",
"success": true
} ],
"context": "When calling asserts.is_equal_or_greater_than(1, 1)",
"fullname": "test_when_calling_is_equal_or_greater_than_with_equal_values",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 7,
"path": "res://tests/unit/equality.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/equality.test.gd",
"tags": [  ],
"test": ExtResource( 8 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 7
}, {
"context": "Given a Test Double",
"methods": [ {
"assertions": [ {
"actual": "|int| 9999 is equal to |int| 9999",
"context": "Then it returns the corresponding value when the pattern matches",
"expected": "|int| 9999 is equal to |int| 9999",
"success": true
} ],
"context": "When we call a method that was stubbed with an argument pattern that includes a non-primitive object",
"fullname": "test_When_we_call_a_method_that_was_stubbed_with_an_argument_pattern_that_includes_a_non_primitive_object",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 9999 is equal to |int| 9999",
"context": "Then it returns the corresponding value when the partial pattern matches",
"expected": "|int| 9999 is equal to |int| 9999",
"success": true
} ],
"context": "When we call a method that was stubbed with a partial (ie using any()) argument pattern",
"fullname": "test_When_we_call_a_method_that_was_stubbed_with_a_partial_argument_pattern",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|null| Null == null",
"context": "Then we get the stubbed value back",
"expected": "|null| Null == null",
"success": true
} ],
"context": "When we stub a method of a doubled inner class",
"fullname": "test_When_we_stub_a_method_of_a_double_inner_class",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|String| Jackie is equal to |String| Jackie",
"context": "Then we can double the object successfully",
"expected": "|String| Jackie is equal to |String| Jackie",
"success": true
} ],
"context": "When we pass in dependecies on direct",
"fullname": "test_When_we_pass_in_deps_on_direct",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 99 is equal to |int| 99",
"context": "Then it returns a value",
"expected": "|int| 99 is equal to |int| 99",
"success": true
} ],
"context": "When we pass a funcref as a subcall that returns",
"fullname": "test_When_we_pass_a_funcref_as_a_subcall_that_returns_a_value",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 99 is equal to |int| 99",
"context": "Then it affects the state of the double",
"expected": "|int| 99 is equal to |int| 99",
"success": true
} ],
"context": "When we pass a funcref as a subcall",
"fullname": "test_When_we_pass_a_funcref_as_a_subcall",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|Array| [10, 5] is equal to |Array| [10, 5]",
"context": "Then it returns a value",
"expected": "|Array| [10, 5] is equal to |Array| [10, 5]",
"success": true
} ],
"context": "When we pass an Object with a call_func function",
"fullname": "test_When_we_pass_an_object_with_callfunc_method_as_a_subcall",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 4 is equal to |int| 4",
"context": "Then it calls its super implementation by default",
"expected": "|int| 4 is equal to |int| 4",
"success": true
}, {
"actual": "|int| 9999 is equal to |int| 9999",
"context": "Then it does not call its super implementation when arguments patterns match a different return value",
"expected": "|int| 9999 is equal to |int| 9999",
"success": true
} ],
"context": "When we call a method that we stubbed to call its super implementation by default",
"fullname": "test_When_we_call_a_method_that_we_stubbed_to_call_its_super_implementation_by_default",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|int| 4 is equal to |int| 4",
"context": "Then we get the correct result",
"expected": "|int| 4 is equal to |int| 4",
"success": true
} ],
"context": "When we call an add(x, y) method that we haven't directed",
"fullname": "test_When_we_call_an_add_method_that_we_have_not_directed",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then it returns true",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we call a method that we have stubbed to return true",
"fullname": "test_When_we_call_a_method_that_we_have_stubbed_to_return_true",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|Object| [Node:7029] is equal to |Object| [Node:7029]",
"context": "Then it returns that same node",
"expected": "|Object| [Node:7029] is equal to |Object| [Node:7029]",
"success": true
} ],
"context": "When we call a method that we have stubbed to return a node",
"fullname": "test_When_we_call_a_method_that_we_have_stubbed_to_return_a_node",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|float| 6.283185 is equal to |float| 6.283185",
"context": "Then we can call the static methods of that inner double",
"expected": "|float| 6.283185 is equal to |float| 6.283185",
"success": true
} ],
"context": "When we add an doubled inner class to it",
"fullname": "test_When_we_add_a_doubled_inner_class_to_it",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "(1, 1) is builtin: Vector2",
"context": "Then we can call methods on it",
"expected": "(1, 1) is builtin: Vector2",
"success": true
} ],
"context": "When we double an inner class",
"fullname": "test_When_we_double_an_inner_class",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 100 is equal to |int| 100",
"context": "Then it returns the default stubbed value when the arguments don't match any pattern",
"expected": "|int| 100 is equal to |int| 100",
"success": true
}, {
"actual": "|int| 1000 is equal to |int| 1000",
"context": "Then it returns the the corresponding value to the pattern the arguments matched",
"expected": "|int| 1000 is equal to |int| 1000",
"success": true
} ],
"context": "When we call a method that was stubbed to return different values based on argument patterns",
"fullname": "test_When_we_call_a_method_that_was_stubbed_to_return_different_values_based_on_argument_patterns",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "add was called",
"context": "Then we can see that it was called at least once",
"expected": "add was called",
"success": true
} ],
"context": "When we call a method that we are spying on",
"fullname": "test_When_we_call_a_method_that_we_are_spying_on",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "method: add was called with arguments: [10, 10]",
"context": "Then we can see that it was called with those arguments",
"expected": "method: add was called with arguments: [10, 10]",
"success": true
} ],
"context": "When we pass arguments to a method call that we are spying on",
"fullname": "test_When_we_pass_arguments_to_a_method_call_that_we_are_spying_on",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| True is equal to |bool| True",
"context": "Then we can call it",
"expected": "|bool| True is equal to |bool| True",
"success": true
} ],
"context": "When we stubbed a keyworded method by passing in the correct keyword",
"fullname": "test_When_we_stubbed_a_keyword_method_by_passing_in_the_correct_keyword",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|String| Jackie is equal to |String| Jackie",
"context": "Then we can double the object successfully",
"expected": "|String| Jackie is equal to |String| Jackie",
"success": true
} ],
"context": "When we pass in dependecies on double",
"fullname": "test_When_we_pass_in_deps_on_double",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|null| Null == null",
"context": "Then we get null",
"expected": "|null| Null == null",
"success": true
} ],
"context": "When we call a method that we have dummied",
"fullname": "test_When_we_call_a_method_that_we_have_dummied",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 19,
"path": "res://tests/integration/test_double.test.gd",
"source": {
"containers": [ "res://tests/integration", "res://tests" ],
"method": "",
"path": "res://tests/integration/test_double.test.gd",
"tags": [  ],
"test": ExtResource( 14 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 19
}, {
"context": "Given an Is Instance of class/type Assertion",
"methods": [ {
"assertions": [ {
"actual": "|Plane| 0, 0, 0, 0 != null",
"context": "plane is not null",
"expected": "|Plane| 0, 0, 0, 0 != null",
"success": true
}, {
"actual": "0, 0, 0, 0 is builtin: Plane",
"context": "then it passes",
"expected": "0, 0, 0, 0 is builtin: Plane",
"success": true
} ],
"context": "When calling asserts.is_Plane(plane: Plane())",
"fullname": "test_when_calling_is_Plane",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|AABB| 0, 0, 0 - 0, 0, 0 != null",
"context": "AABB is not null",
"expected": "|AABB| 0, 0, 0 - 0, 0, 0 != null",
"success": true
}, {
"actual": "0, 0, 0 - 0, 0, 0 is builtin: AABB",
"context": "Then it passes",
"expected": "0, 0, 0 - 0, 0, 0 is builtin: AABB",
"success": true
} ],
"context": "When calling asserts.is_AABB(aabb: AABB)",
"fullname": "test_when_calling_is_AABB",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "{} is builtin: Dictionary",
"context": "Then it passes",
"expected": "{} is builtin: Dictionary",
"success": true
} ],
"context": "When calling asserts.is_Dictionary({})",
"fullname": "test_when_calling_is_Dictionary",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|PoolVector2Array| [] != null",
"context": "vec2s is not null",
"expected": "|PoolVector2Array| [] != null",
"success": true
}, {
"actual": "[] is builtin: PoolVector2Array",
"context": "Then it passes",
"expected": "[] is builtin: PoolVector2Array",
"success": true
} ],
"context": "When calling is asserts.is_PoolVector2Array(vec2s: PoolVector2Array)",
"fullname": "test_when_calling_is_PoolVector2Array",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|Rect2| (0, 0, 0, 0) != null",
"context": "rect2 is not null",
"expected": "|Rect2| (0, 0, 0, 0) != null",
"success": true
}, {
"actual": "(0, 0, 0, 0) is builtin: Rect2",
"context": "Then it passes",
"expected": "(0, 0, 0, 0) is builtin: Rect2",
"success": true
} ],
"context": "When calling asserts.is_Rect2(rect2: Rect2)",
"fullname": "test_when_calling_is_Rect2",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|PoolVector3Array| [] != null",
"context": "vec3s is not null",
"expected": "|PoolVector3Array| [] != null",
"success": true
}, {
"actual": "[] is builtin: PoolVector3Array",
"context": "Then it passes",
"expected": "[] is builtin: PoolVector3Array",
"success": true
} ],
"context": "When calling is asserts.is_PoolVector3Array(vec3s: PoolVector3Array)",
"fullname": "test_when_calling_is_PoolVector3Array",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|PoolRealArray| [] != null",
"context": "reals is not null",
"expected": "|PoolRealArray| [] != null",
"success": true
}, {
"actual": "[] is builtin: PoolRealArray",
"context": "Then it passes",
"expected": "[] is builtin: PoolRealArray",
"success": true
} ],
"context": "When calling is asserts.is_PoolRealArray(reals: PoolRealArray)",
"fullname": "test_when_calling_is_PoolRealArray",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|Quat| (0, 0, 0, 1) != null",
"context": "quat is not null",
"expected": "|Quat| (0, 0, 0, 1) != null",
"success": true
}, {
"actual": "(0, 0, 0, 1) is builtin: Quat",
"context": "Then it passes",
"expected": "(0, 0, 0, 1) is builtin: Quat",
"success": true
} ],
"context": "When calling asserts.is_Quat(quat: Quat)",
"fullname": "test_when_calling_is_Quat",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|RID| [RID] != null",
"context": "rid is not null",
"expected": "|RID| [RID] != null",
"success": true
}, {
"actual": "[RID] is builtin: RID",
"context": "Then it passes",
"expected": "[RID] is builtin: RID",
"success": true
} ],
"context": "When calling asserts.is_RID(rid: RID)",
"fullname": "test_when_calling_is_RID",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|Color| 0,0,0,1 != null",
"context": "color is not null",
"expected": "|Color| 0,0,0,1 != null",
"success": true
}, {
"actual": "0,0,0,1 is builtin: Color",
"context": "Then it passes",
"expected": "0,0,0,1 is builtin: Color",
"success": true
} ],
"context": "When calling asserts.is_color(color: Color)",
"fullname": "test_when_calling_is_Color",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|String|  != null",
"context": "strs is not null",
"expected": "|String|  != null",
"success": true
}, {
"actual": " is builtin: String",
"context": "Then it passes",
"expected": " is builtin: String",
"success": true
} ],
"context": "When calling asserts.is_string(strs: String)",
"fullname": "test_when_calling_is_string",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|Transform| 1, 0, 0, 0, 1, 0, 0, 0, 1 - 0, 0, 0 != null",
"context": "transform is not null",
"expected": "|Transform| 1, 0, 0, 0, 1, 0, 0, 0, 1 - 0, 0, 0 != null",
"success": true
}, {
"actual": "1, 0, 0, 0, 1, 0, 0, 0, 1 - 0, 0, 0 is builtin: Transform",
"context": "Then it passes",
"expected": "1, 0, 0, 0, 1, 0, 0, 0, 1 - 0, 0, 0 is builtin: Transform",
"success": true
} ],
"context": "When calling asserts.is_Transform(transform: Transform)",
"fullname": "test_when_calling_is_Transform",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|Transform2D| ((1, 0), (0, 1), (0, 0)) != null",
"context": "transform2D is not null",
"expected": "|Transform2D| ((1, 0), (0, 1), (0, 0)) != null",
"success": true
}, {
"actual": "((1, 0), (0, 1), (0, 0)) is builtin: Transform2D",
"context": "Then it passes",
"expected": "((1, 0), (0, 1), (0, 0)) is builtin: Transform2D",
"success": true
} ],
"context": "When calling asserts.is_Transform(transform2D: Transform2D)",
"fullname": "test_when_calling_is_Transform2D",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|Array| [] != null",
"context": "array is not null",
"expected": "|Array| [] != null",
"success": true
}, {
"actual": "[] is builtin: Array",
"context": "Then it passes",
"expected": "[] is builtin: Array",
"success": true
} ],
"context": "When calling asserts.is_Array(array: Array)",
"fullname": "test_when_calling_is_Array",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|Vector2| (0, 0) != null",
"context": "vec2 is not null",
"expected": "|Vector2| (0, 0) != null",
"success": true
}, {
"actual": "(0, 0) is builtin: Vector2",
"context": "Then it passes",
"expected": "(0, 0) is builtin: Vector2",
"success": true
} ],
"context": "When calling asserts.is_Vector2(vec2)",
"fullname": "test_when_calling_is_Vector2",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|PoolStringArray| [] != null",
"context": "strs is not null",
"expected": "|PoolStringArray| [] != null",
"success": true
}, {
"actual": "[] is builtin: PoolStringArray",
"context": "Then it passes",
"expected": "[] is builtin: PoolStringArray",
"success": true
} ],
"context": "When calling is asserts.is_PoolStringArray(strs: PoolStringArray)",
"fullname": "test_when_calling_is_PoolStringArray",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|NodePath| . != null",
"context": "@'Parent/Child' is not null",
"expected": "|NodePath| . != null",
"success": true
}, {
"actual": ". is builtin: NodePath",
"context": "Then it passes",
"expected": ". is builtin: NodePath",
"success": true
} ],
"context": "When calling asserts.is_NodePath(@'Parent/Child')",
"fullname": "test_when_calling_is_NodePath",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|Object| [Node:7133] != null",
"context": "node is not null",
"expected": "|Object| [Node:7133] != null",
"success": true
}, {
"actual": "[Node:7133] is builtin: Object",
"context": "An instance of node is an Object",
"expected": "[Node:7133] is builtin: Object",
"success": true
} ],
"context": "When calling is asserts.object(node: Node)",
"fullname": "test_when_calling_is_object",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|PoolByteArray| [PoolByteArray] != null",
"context": "bytes is not null",
"expected": "|PoolByteArray| [PoolByteArray] != null",
"success": true
}, {
"actual": "[PoolByteArray] is builtin: PoolByteArray",
"context": "Then it passes",
"expected": "[PoolByteArray] is builtin: PoolByteArray",
"success": true
} ],
"context": "When calling asserts.is_PoolByteArray(bytes: PoolByteArray)",
"fullname": "test_when_calling_is_PoolByteArray",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|PoolIntArray| [] != null",
"context": "ints is not null",
"expected": "|PoolIntArray| [] != null",
"success": true
}, {
"actual": "[] is builtin: PoolIntArray",
"context": "Then it passes",
"expected": "[] is builtin: PoolIntArray",
"success": true
} ],
"context": "When calling asserts.is_PoolIntArray(ints: PoolIntArray)",
"fullname": "test_when_calling_is_PoolIntArray",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "1 is builtin: int",
"context": "Then it passes",
"expected": "1 is builtin: int",
"success": true
} ],
"context": "When callign asserts.is_int(1)",
"fullname": "test_when_calling_is_int",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|Vector3| (0, 0, 0) != null",
"context": "vec3 is not null",
"expected": "|Vector3| (0, 0, 0) != null",
"success": true
}, {
"actual": "(0, 0, 0) is builtin: Vector3",
"context": "Then it passes",
"expected": "(0, 0, 0) is builtin: Vector3",
"success": true
} ],
"context": "When calling asserts.is_Vector3(vec3: Vector3",
"fullname": "test_when_calling_is_Vector3",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "1 is builtin: float",
"context": "Then it passes",
"expected": "1 is builtin: float",
"success": true
} ],
"context": "When calling asserts.is_float(1.0)",
"fullname": "test_when_calling_is_float",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|PoolColorArray| [PoolColorArray] != null",
"context": "colors is not null",
"expected": "|PoolColorArray| [PoolColorArray] != null",
"success": true
}, {
"actual": "[PoolColorArray] is builtin: PoolColorArray",
"context": "Then it passes",
"expected": "[PoolColorArray] is builtin: PoolColorArray",
"success": true
} ],
"context": "When calling asserts.is_PoolColorArray(colors: PoolColorArray)",
"fullname": "test_when_calling_is_PoolColorArray",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "True is builtin: bool",
"context": "Then it passes",
"expected": "True is builtin: bool",
"success": true
} ],
"context": "When calling asserts.is_bool(true)",
"fullname": "test_when_calling_is_bool",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|Basis| ((1, 0, 0), (0, 1, 0), (0, 0, 1)) != null",
"context": "basis is not null",
"expected": "|Basis| ((1, 0, 0), (0, 1, 0), (0, 0, 1)) != null",
"success": true
}, {
"actual": "((1, 0, 0), (0, 1, 0), (0, 0, 1)) is builtin: Basis",
"context": "Then it passes",
"expected": "((1, 0, 0), (0, 1, 0), (0, 0, 1)) is builtin: Basis",
"success": true
} ],
"context": "When calling asserts.is_basis(basis: Basis",
"fullname": "test_when_calling_is_Basis",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
} ],
"passed": 26,
"path": "res://tests/unit/is_instance.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/is_instance.test.gd",
"tags": [  ],
"test": ExtResource( 6 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 26
}, {
"context": "Given an Is Not Instance of class/type Assertion",
"methods": [ {
"assertions": [ {
"actual": "Null is not builtin: AABB",
"context": "Then it passes",
"expected": "Null is not builtin: AABB",
"success": true
} ],
"context": "when calling asserts.is_not_AABB(null)",
"fullname": "test_when_calling_is_not_AABB",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Basis",
"context": "Then it passes",
"expected": "Null is not builtin: Basis",
"success": true
} ],
"context": "when calling asserts.is_not_Basis(null)",
"fullname": "test_when_calling_is_not_Basis",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Array",
"context": "Then it passes",
"expected": "Null is not builtin: Array",
"success": true
} ],
"context": "when calling asserts.is_not_Array(null)",
"fullname": "test_when_calling_is_not_Array",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: RID",
"context": "Then it passes",
"expected": "Null is not builtin: RID",
"success": true
} ],
"context": "when calling asserts.is_not_RID(null)",
"fullname": "test_when_calling_is_not_RID",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Vector2",
"context": "Then it passes",
"expected": "Null is not builtin: Vector2",
"success": true
} ],
"context": "when calling asserts.is_not_Vector2(null)",
"fullname": "test_when_calling_is_not_Vector2",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Color",
"context": "Then it passes",
"expected": "Null is not builtin: Color",
"success": true
} ],
"context": "when calling asserts.is_not_Color(null)",
"fullname": "test_when_calling_is_not_Color",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Object",
"context": "Then it passes",
"expected": "Null is not builtin: Object",
"success": true
} ],
"context": "when calling asserts.is_not_Object(null)",
"fullname": "test_when_calling_is_not_Object",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Rect2",
"context": "Then it passes",
"expected": "Null is not builtin: Rect2",
"success": true
} ],
"context": "when calling asserts.is_not_Rect2(null)",
"fullname": "test_when_calling_is_not_Rect2",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: PoolVector2Array",
"context": "Then it passes",
"expected": "Null is not builtin: PoolVector2Array",
"success": true
} ],
"context": "when calling asserts.is_not_PoolVector2Array(null)",
"fullname": "test_when_calling_is_not_PoolVector2Array",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: int",
"context": "Then it passes",
"expected": "Null is not builtin: int",
"success": true
} ],
"context": "when calling asserts.is_not_int(null)",
"fullname": "test_when_calling_is_not_int",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: PoolIntArray",
"context": "Then it passes",
"expected": "Null is not builtin: PoolIntArray",
"success": true
} ],
"context": "when calling asserts.is_not_PoolIntArray(null)",
"fullname": "test_when_calling_is_not_PoolIntArray",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: NodePath",
"context": "Then it passes",
"expected": "Null is not builtin: NodePath",
"success": true
} ],
"context": "when calling asserts.is_not_NodePath(null)",
"fullname": "test_when_calling_is_not_NodePath",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Plane",
"context": "Then it passes",
"expected": "Null is not builtin: Plane",
"success": true
} ],
"context": "when calling asserts.is_not_Plane(null)",
"fullname": "test_when_calling_is_not_Plane",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: PoolVector3Array",
"context": "Then it passes",
"expected": "Null is not builtin: PoolVector3Array",
"success": true
} ],
"context": "when calling asserts.is_not_PoolVector3Array(null)",
"fullname": "test_when_calling_is_not_PoolVector3Array",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Transform",
"context": "Then it passes",
"expected": "Null is not builtin: Transform",
"success": true
} ],
"context": "when calling asserts.is_not_Transform(null)",
"fullname": "test_when_calling_is_not_Transform",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Transform2D",
"context": "Then it passes",
"expected": "Null is not builtin: Transform2D",
"success": true
} ],
"context": "when calling asserts.is_not_Transform2D(null)",
"fullname": "test_when_calling_is_not_Transform2D",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: bool",
"context": "Then it passes",
"expected": "Null is not builtin: bool",
"success": true
} ],
"context": "when calling asserts.is_not_bool(null)",
"fullname": "test_when_calling_is_not_bool",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: PoolColorArray",
"context": "Then it passes",
"expected": "Null is not builtin: PoolColorArray",
"success": true
} ],
"context": "when calling asserts.is_not_PoolColorArray(null)",
"fullname": "test_when_calling_is_not_PoolColorArray",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: PoolRealArray",
"context": "Then it passes",
"expected": "Null is not builtin: PoolRealArray",
"success": true
} ],
"context": "when calling asserts.is_not_PoolRealArray(null)",
"fullname": "test_when_calling_is_not_PoolRealArray",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: PoolStringArray",
"context": "Then it passes",
"expected": "Null is not builtin: PoolStringArray",
"success": true
} ],
"context": "when calling asserts.is_not_PoolStringArray(null)",
"fullname": "test_when_calling_is_not_PoolStringArray",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Quat",
"context": "Then it passes",
"expected": "Null is not builtin: Quat",
"success": true
} ],
"context": "when calling asserts.is_not_Quat(null)",
"fullname": "test_when_calling_is_not_Quat",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Dictionary",
"context": "Then it passes",
"expected": "Null is not builtin: Dictionary",
"success": true
} ],
"context": "when calling asserts.is_not_Dictionary(null)",
"fullname": "test_when_calling_is_not_Dictionary",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Vector3",
"context": "Then it passes",
"expected": "Null is not builtin: Vector3",
"success": true
} ],
"context": "when calling asserts.is_not_Vector3(null)",
"fullname": "test_when_calling_is_not_Vector3",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: PoolByteArray",
"context": "Then it passes",
"expected": "Null is not builtin: PoolByteArray",
"success": true
} ],
"context": "when calling asserts.is_not_PoolByteArray(null)",
"fullname": "test_when_calling_is_not_PoolByteArray",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: float",
"context": "Then it passes",
"expected": "Null is not builtin: float",
"success": true
} ],
"context": "when calling asserts.is_not_float(null)",
"fullname": "test_when_calling_is_not_float",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: String",
"context": "Then it passes",
"expected": "Null is not builtin: String",
"success": true
} ],
"context": "when calling asserts.is_not_String(null)",
"fullname": "test_when_calling_is_not_String",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 26,
"path": "res://tests/unit/is_not_instance.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/is_not_instance.test.gd",
"tags": [  ],
"test": ExtResource( 2 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 26
}, {
"context": "Given a Yield",
"methods": [ {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then we set var a to true",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then we set var b to true",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we yield in start twice",
"fullname": "test_When_we_yield_in_start",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then we set var c to true",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then we set var d to true",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we yield in pre thrice",
"fullname": "test_When_we_yield_in_pre",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then the yielder is unpaused",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then the timeout signal of the yielder is connected",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then our signal is connected to the yielder",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we call until signal",
"fullname": "test_When_we_call_until_signal",
"passed": 3,
"success": true,
"time": 0.0,
"total": 3
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then we set var e to true",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then we set var f to true",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we yield twice in execute",
"fullname": "test_When_we_yield_in_execute",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then the yielder is paused",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When a signal being yielded on is emitted",
"fullname": "test_When_a_signal_being_yielded_on_is_emitted_the_yielder_is_stopped",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then the yielder is paused",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then the timeout signal of the yielder is disconnected",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then our signal to the yielder is disconnected",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When the yielder heres our signal",
"fullname": "test_When_the_yielder_hears_our_signal",
"passed": 3,
"success": true,
"time": 0.0,
"total": 3
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then the timeout signal is disconnected",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then the signal-signal is disconnected",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When it is finished",
"fullname": "test_When_yielder_is_finished_signals_are_disconnected",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "[100, Null, Null, Null, Null, Null] is builtin: Array",
"context": "Then we get an array",
"expected": "[100, Null, Null, Null, Null, Null] is builtin: Array",
"success": true
}, {
"actual": "|int| 6 is equal to |int| 6",
"context": "Of size 6",
"expected": "|int| 6 is equal to |int| 6",
"success": true
}, {
"actual": "|int| 100 is equal to |int| 100",
"context": "Where element 0 is 100",
"expected": "|int| 100 is equal to |int| 100",
"success": true
} ],
"context": "When yield(self.yield_value()) returns",
"fullname": "test_When_we_yield_we_get_the_return_value",
"passed": 3,
"success": true,
"time": 0.0,
"total": 3
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then yielder is unpaused",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "The timeout signal of the yielder is connected",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we call until_timeout (with 1.0)",
"fullname": "test_When_we_call_until_timeout",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then yielder is not active",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When asserting against a test",
"fullname": "test_Yielder_is_not_active_when_asserting",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then the yielder is paused",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "The timeout signal of the yielder is not connected",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When the yielder times out on until_timeout(0.1)",
"fullname": "test_When_the_yielder_times_out",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
} ],
"passed": 11,
"path": "res://tests/unit/yield.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/yield.test.gd",
"tags": [  ],
"test": ExtResource( 18 ),
"yield_time": 1.9
},
"success": true,
"time_taken": 0.0,
"total": 11
}, {
"context": "Given a Null Assertion",
"methods": [ {
"assertions": [ {
"actual": "|null| Null == null",
"context": "Then it passes",
"expected": "|null| Null == null",
"success": true
} ],
"context": "When calling asserts.is_null(null)",
"fullname": "test_when_calling_null_is_null",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|Object| [Node:7170] != null",
"context": "Then it passes",
"expected": "|Object| [Node:7170] != null",
"success": true
} ],
"context": "When calling Node is not null",
"fullname": "test_when_calling_node_is_not_null",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|Object| [Deleted Object] == null",
"context": "A Freed Node is null in Engine 3.2.2 or greater",
"expected": "|Object| [Deleted Object] == null",
"success": true
} ],
"context": "When calling freed object is null",
"fullname": "test_when_calling_freed_object_is_not_null",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 3,
"path": "res://tests/unit/null.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/null.test.gd",
"tags": [  ],
"test": ExtResource( 12 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 3
}, {
"context": "Given A Range Assertion",
"methods": [ {
"assertions": [ {
"actual": "10 is not in range(0, 10)",
"context": "Then it passes",
"expected": "10 is not in range(0, 10)",
"success": true
} ],
"context": "When calling is (10) not in range (in range(0, 10)",
"fullname": "test_when_calling_is_not_in_range",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "0 is in range(0, 10)",
"context": "Then it passes",
"expected": "0 is in range(0, 10)",
"success": true
} ],
"context": "When calling is (0) in range(0, 10)",
"fullname": "test_when_calling_is_in_range",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 2,
"path": "res://tests/unit/range.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/range.test.gd",
"tags": [  ],
"test": ExtResource( 15 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 2
}, {
"context": "Given the Addition Operator",
"methods": [ {
"assertions": [ {
"actual": "|int| 4 is equal to |int| 4",
"context": "",
"expected": "|int| 4 is equal to |int| 4",
"success": true
} ],
"context": "When we add 2 to 2 we get 4",
"fullname": "test_add",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 8 is equal to |int| 8",
"context": "",
"expected": "|int| 8 is equal to |int| 8",
"success": true
} ],
"context": "When we add 5 to 3 we get 8",
"fullname": "test_add",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 13 is equal to |int| 13",
"context": "",
"expected": "|int| 13 is equal to |int| 13",
"success": true
} ],
"context": "When we add 7 to 6 we get 13",
"fullname": "test_add",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 0 is equal to |int| 0",
"context": "",
"expected": "|int| 0 is equal to |int| 0",
"success": true
} ],
"context": "When we subtract 2 from 2 we get 0",
"fullname": "test_subtract",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 2 is equal to |int| 2",
"context": "",
"expected": "|int| 2 is equal to |int| 2",
"success": true
} ],
"context": "When we subtract 5 from 3 we get 2",
"fullname": "test_subtract",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 1 is equal to |int| 1",
"context": "",
"expected": "|int| 1 is equal to |int| 1",
"success": true
} ],
"context": "When we subtract 7 from 6 we get 1",
"fullname": "test_subtract",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 6,
"path": "res://tests/unit/parameters.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/parameters.test.gd",
"tags": [  ],
"test": ExtResource( 16 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 6
}, {
"context": "Given a String Assertion",
"methods": [ {
"assertions": [ {
"actual": "lorem impsum ends with impsum",
"context": "Then it passes",
"expected": "lorem impsum ends with impsum",
"success": true
} ],
"context": "When calling asserts.string_ends_with('impsum', 'lorem impsum')",
"fullname": "test_when_calling_string_ends_with",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "impsum does not end with lorem",
"context": "Then it passes",
"expected": "impsum does not end with lorem",
"success": true
} ],
"context": "When calling asserts.string_does_not_end_with('lorem', 'impsum')",
"fullname": "test_when_calling_string_does_not_end_with",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "lorem impsum begins with lorem",
"context": "Then it passes",
"expected": "lorem impsum begins with lorem",
"success": true
} ],
"context": "When calling asserts.string_begins_with('lorem', 'lorem impsum')",
"fullname": "test_when_calling_string_begins_with",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "impsum does not contain beem im",
"context": "Then it passes",
"expected": "impsum does not contain beem im",
"success": true
} ],
"context": "When calling asserts.string_does_not_contain('em im', 'impsum')",
"fullname": "test_when_calling_string_does_not_contain",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "impsum does not begin with bleh lorem",
"context": "Then it passes",
"expected": "impsum does not begin with bleh lorem",
"success": true
} ],
"context": "When calling asserts.string_does_not_begin_with('lorem', 'impsum')",
"fullname": "test_when_calling_string_does_not_begin_with",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "lorem impsum contains em im",
"context": "Then it passes",
"expected": "lorem impsum contains em im",
"success": true
} ],
"context": "When calling asserts.string_contains('em im', 'lorem impsum')",
"fullname": "test_when_calling_string_contains",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 6,
"path": "res://tests/unit/string.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/string.test.gd",
"tags": [  ],
"test": ExtResource( 9 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 6
}, {
"context": "Given an Object Assertion",
"methods": [ {
"assertions": [ {
"actual": "[Node:7179] is not freed",
"context": "Then it passes",
"expected": "[Node:7179] is not freed",
"success": true
} ],
"context": "When calling asserts.is_not_freed(unfreed_object)",
"fullname": "test_when_calling_unfreed_object_is_not_freed",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is freed from memory",
"context": "Then it passes",
"expected": "Null is freed from memory",
"success": true
} ],
"context": "When calling asserts.is_freed(freed_object",
"fullname": "test_when_calling_freed_object_is_freed",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:7159] does not have meta: bad_meta",
"context": "Then it passes",
"expected": "[Node:7159] does not have meta: bad_meta",
"success": true
} ],
"context": "When calling asserts.object_does_not_have_meta()",
"fullname": "test_when_calling_does_not_have_meta",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:7159] has meta: dummy",
"context": "Then it passes",
"expected": "[Node:7159] has meta: dummy",
"success": true
}, {
"actual": "[Node:7159] has meta: dummy",
"context": "Then it passes",
"expected": "[Node:7159] has meta: dummy",
"success": true
} ],
"context": "When calling asserts.object_has_meta() after adding metadata",
"fullname": "test_when_calling_has_meta_after_adding_metadata",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "[Node:7197] is queued for deletion",
"context": "Then it passes",
"expected": "[Node:7197] is queued for deletion",
"success": true
} ],
"context": "When calling asserts.object_is_queued for deletion after calling queue_free",
"fullname": "test_when_calling_obj_is_queued_for_deletion_after_calling_queue_free",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:7159].builtin_dummy is connected to [Node:7159].title",
"context": "Then it passes",
"expected": "[Node:7159].builtin_dummy is connected to [Node:7159].title",
"success": true
} ],
"context": "When calling asserts object is connected with a valid connection",
"fullname": "test_when_calling_obj_is_connected_with_a_real_connection",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:7159].builtin_dummy is not connected to [Node:7159].title",
"context": "Then it passes",
"expected": "[Node:7159].builtin_dummy is not connected to [Node:7159].title",
"success": true
} ],
"context": "When calling asserts object is not connected with an invalid connection",
"fullname": "test_when_calling_obj_is_not_connected_with_an_invalid_connection",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:7207] is blocking signals",
"context": "Then it passes",
"expected": "[Node:7207] is blocking signals",
"success": true
} ],
"context": "When calling is blocking signals while blocking signals",
"fullname": "test_is_blocking_signals",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:7209] is not blocking signals",
"context": "Then it passes",
"expected": "[Node:7209] is not blocking signals",
"success": true
} ],
"context": "When calling is not blocking signals while not blocking signals",
"fullname": "test_is_not_blocking_signals",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:7159] does not have meta: confusing",
"context": "Then it passes",
"expected": "[Node:7159] does not have meta: confusing",
"success": true
} ],
"context": "When calling asserts.object_has_meta with real key but null val",
"fullname": "test_when_calling_does_not_have_meta_real_key_null_value_pair",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:7159] has user signal: dummy_signal",
"context": "Then it passes",
"expected": "[Node:7159] has user signal: dummy_signal",
"success": true
} ],
"context": "When calling obj_has_user_signal after adding a signal",
"fullname": "test_when_calling_has_user_signal_after_adding_a_signal",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:7159] does not have user signal: false_signal",
"context": "Then it passes",
"expected": "[Node:7159] does not have user signal: false_signal",
"success": true
} ],
"context": "When calling obj_does_not_have_user_signal with fake signal",
"fullname": "test_when_calling_does_not_have_user_signal",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:7159] does not have user signal: builtin_dummy",
"context": "Then it passes",
"expected": "[Node:7159] does not have user signal: builtin_dummy",
"success": true
} ],
"context": "When calling does not have user signal with class signal",
"fullname": "test_when_calling_does_not_have_user_signal_with_class_signal_constant",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:7159] has method: title",
"context": "Then it passes",
"expected": "[Node:7159] has method: title",
"success": true
} ],
"context": "When calling has_method('title')",
"fullname": "test_when_calling_has_method_title",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:7216] is not queued for deletion",
"context": "Then it passes",
"expected": "[Node:7216] is not queued for deletion",
"success": true
} ],
"context": "When calling asserts.object_is_not_for_queued_deletion after not calling queue free()",
"fullname": "test_when_calling_obj_is_not_for_queued_deletion_after_not_calling_queue_free",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 15,
"path": "res://tests/unit/object.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/object.test.gd",
"tags": [  ],
"test": ExtResource( 7 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 15
}, {
"context": "Dummy Passing Test",
"methods": [ {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Passing!",
"expected": "|bool| True == true",
"success": true
} ],
"context": "This method passes",
"fullname": "test_this_method_passes",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 1,
"path": "res://tests/unit/suite.test.gd.DummyOne",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/suite.test.gd.DummyOne",
"tags": [  ],
"test": SubResource( 21 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 1
}, {
"context": "Dummy Test 2",
"methods": [ {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Passing!",
"expected": "|bool| True == true",
"success": true
} ],
"context": "This method passes",
"fullname": "test_this_method_passes",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 1,
"path": "res://tests/unit/suite.test.gd.DummyTwo",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/suite.test.gd.DummyTwo",
"tags": [  ],
"test": SubResource( 22 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 1
}, {
"context": "Given a Test Script",
"methods": [ {
"assertions": [ {
"actual": "|bool| True == true",
"context": "if the test didn't break this works",
"expected": "|bool| True == true",
"success": true
} ],
"context": " we can omit describe",
"fullname": "test_we_can_omit_describe",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 10 is greater than |int| 1",
"context": "We get an array of multiple values back",
"expected": "|int| 10 is greater than |int| 1",
"success": true
}, {
"actual": "|int| 0 is not equal to |int| 9",
"context": "With different values",
"expected": "|int| 0 != |int| 9",
"success": true
}, {
"actual": "|int| 10 is greater than |int| 1",
"context": "And we can track multiple properties",
"expected": "|int| 10 is greater than |int| 1",
"success": true
} ],
"context": "When we record properties",
"fullname": "test_we_can_record_properties",
"passed": 3,
"success": true,
"time": 0.0,
"total": 3
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|int| 2 is equal to |int| 2",
"context": "",
"expected": "|int| 2 is equal to |int| 2",
"success": true
} ],
"context": " when we omit context we can see expected and got under method",
"fullname": "test_when_we_omit_context_we_can_see_expected_and_got_under_method",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
} ],
"passed": 3,
"path": "res://tests/unit/test.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/test.test.gd",
"tags": [  ],
"test": ExtResource( 19 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 3
}, {
"context": "Given a Signal Watcher",
"methods": [ {
"assertions": [ {
"actual": "signal: example was emitted from [Node:7218]",
"context": "Then it captures the emitted signal",
"expected": "signal: example was emitted from [Node:7218]",
"success": true
} ],
"context": "When we watch and emit a signal",
"fullname": "test_When_we_watch_and_emit_a_signal",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Signal: example was emitted from [Node:7218] with arguments: [1, 20, 5]",
"context": "Then it captures any arguments that where passed when the signal was emitted",
"expected": "Signal: example was emitted from [Node:7218] with arguments: [1, 20, 5]",
"success": true
} ],
"context": "When we watch a signal from an object with no bound variables",
"fullname": "test_When_we_watch_a_signal_from_an_object_with_no_bound_variables",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Signal: example was not emitted from [Node:7218]",
"context": "Then it does not capture the non-emitted signal",
"expected": "Signal: example was not emitted from [Node:7218]",
"success": true
} ],
"context": "When we watch and do not emit a signal",
"fullname": "test_When_we_watch_and_do_not_emit_a_signal",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "signal: multiple was emitted from [Node:7218] 2",
"context": "Then we can track how many times we emitted it",
"expected": "signal: multiple was emitted from [Node:7218] 2",
"success": true
} ],
"context": "When we watch and signal and emit it multiple times",
"fullname": "test_When_we_watch_a_signal_and_emit_it_multiple_times",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 4,
"path": "res://tests/unit/watcher.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/watcher.test.gd",
"tags": [  ],
"test": ExtResource( 17 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 4
}, {
"context": "Default Args",
"methods": [ {
"assertions": [ {
"actual": "|bool| True == true",
"context": "If this method can be reached then we have doubled a script with default argument(s) properly!",
"expected": "|bool| True == true",
"success": true
} ],
"context": " default arguments of interpolate property",
"fullname": "test_default_arguments_of_interpolate_property",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 1,
"path": "res://tests/integration/default_args.test.gd",
"source": {
"containers": [ "res://tests/integration", "res://tests" ],
"method": "",
"path": "res://tests/integration/default_args.test.gd",
"tags": [  ],
"test": ExtResource( 10 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 1
}, {
"context": "Given a Boolean Assertion",
"methods": [ {
"assertions": [ {
"actual": "|bool| True != false",
"context": "",
"expected": "|bool| True == false",
"success": false
} ],
"context": " intentional failure",
"fullname": "test_intentional_failure",
"passed": 0,
"success": false,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then it passes",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When calling asserts.is_true(true)",
"fullname": "test_when_calling_asserts_is_true",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| False == false",
"context": "Then it passes",
"expected": "|bool| False == false",
"success": true
} ],
"context": "When calling asserts.is_false(false)",
"fullname": "test_when_calling_asserts_is_false",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 2,
"path": "res://tests/integration/boolean.test.gd",
"source": {
"containers": [ "res://tests/integration", "res://tests" ],
"method": "",
"path": "res://tests/integration/boolean.test.gd",
"tags": [  ],
"test": ExtResource( 20 ),
"yield_time": 0.0
},
"success": false,
"time_taken": 0.0,
"total": 3
}, {
"context": "Given is_on_floor",
"methods": [ {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then it can be stubbed",
"expected": "|bool| True == true",
"success": true
} ],
"context": "From a built-in KinematicBody2D2",
"fullname": "test_stubbing_is_on_floor_method_from_builtin_class2",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then it can be stubbed",
"expected": "|bool| True == true",
"success": true
} ],
"context": "From a child node of a scene without scripts",
"fullname": "test_stubbing_is_on_floor_as_child_node_with_no_script",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then it can be stubbed",
"expected": "|bool| True == true",
"success": true
} ],
"context": "From a user-defined script",
"fullname": "test_stubbing_is_on_floor_method_from_user_defined_class",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 3,
"path": "res://tests/integration/on_floor.test.gd",
"source": {
"containers": [ "res://tests/integration", "res://tests" ],
"method": "",
"path": "res://tests/integration/on_floor.test.gd",
"tags": [  ],
"test": ExtResource( 5 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 3
}, {
"context": "Given a Scene Director",
"methods": [ {
"assertions": [ {
"actual": "|Dictionary| {.:[Reference:7292], A:[Reference:7293], A/B:[Reference:7295], C:[Reference:7294], C/D:[Reference:7296]} is not equal to |Dictionary| {.:[Reference:7306], A:[Reference:7307], A/B:[Reference:7309], C:[Reference:7308], C/D:[Reference:7310]}",
"context": "Then they do not share resources",
"expected": "|Dictionary| {.:[Reference:7292], A:[Reference:7293], A/B:[Reference:7295], C:[Reference:7294], C/D:[Reference:7296]} != |Dictionary| {.:[Reference:7306], A:[Reference:7307], A/B:[Reference:7309], C:[Reference:7308], C/D:[Reference:7310]}",
"success": true
} ],
"context": "When we create two of it for the same scene",
"fullname": "test_When_we_create_two_of_it_for_the_same_scene",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 999 is equal to |int| 999",
"context": "Then we get the stubbed return value",
"expected": "|int| 999 is equal to |int| 999",
"success": true
} ],
"context": "When we call a method from a child node that we stubbed",
"fullname": "test_When_we_call_a_method_from_a_child_node_that_we_stubbed",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 9999 is equal to |int| 9999",
"context": "Then we get the stubbed return value",
"expected": "|int| 9999 is equal to |int| 9999",
"success": true
} ],
"context": "When we call a method from the root node that we stubbed",
"fullname": "test_When_we_call_a_method_from_the_root_node_that_we_stubbed",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 99 is equal to |int| 99",
"context": "Then we get the stubbed return value",
"expected": "|int| 99 is equal to |int| 99",
"success": true
} ],
"context": "When we call a method from a grandchild node that we stubbed",
"fullname": "test_When_we_call_a_method_from_a_grandchild_node_that_we_stubbed",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|NodePath| A is equal to |NodePath| A",
"context": "We have the correct NodePath Set",
"expected": "|NodePath| A is equal to |NodePath| A",
"success": true
} ],
"context": "When we add it to the tree it runs",
"fullname": "test_When_we_add_it_to_the_tree_it_runs",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 5,
"path": "res://tests/integration/scene_director.test.gd",
"source": {
"containers": [ "res://tests/integration", "res://tests" ],
"method": "",
"path": "res://tests/integration/scene_director.test.gd",
"tags": [  ],
"test": ExtResource( 4 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 5
}, {
"context": "Given a Script Director",
"methods": [ {
"assertions": [ {
"actual": "[Reference:7392] is instance of class: [GDScript:1453]",
"context": "Then we get that inner class back",
"expected": "[Reference:7392] is instance of class: [GDScript:1453]",
"success": true
} ],
"context": "When we double an inner class",
"fullname": "test_When_we_double_an_inner_class",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|Dictionary| {_enter_tree:{arguments:, default_arguments:}, _exit_tree:{arguments:, default_arguments:}, _get:{arguments:a, default_arguments:a}, _get_configuration_warning:{arguments:, default_arguments:}, _get_editor_description:{arguments:, default_arguments:}, _get_import_path:{arguments:, default_arguments:}, _get_property_list:{arguments:, default_arguments:}, _init:{arguments:, default_arguments:}, _input:{arguments:a, default_arguments:a}, _notification:{arguments:a, default_arguments:a}, _physics_process:{arguments:a, default_arguments:a}, _process:{arguments:a, default_arguments:a}, _ready:{arguments:, default_arguments:}, _set:{arguments:a, b, default_arguments:a, b}, _set_editor_description:{arguments:a, default_arguments:a}, _set_import_path:{arguments:a, default_arguments:a}, _to_string:{arguments:, default_arguments:}, _unhandled_input:{arguments:a, default_arguments:a}, _unhandled_key_input:{arguments:a, default_arguments:a}, add:{arguments:a, b, default_arguments:a, b}, add_child:{arguments:a, b, default_arguments:a, b = False}, add_child_below_node:{arguments:a, b, c, default_arguments:a, b, c = False}, add_to_group:{arguments:a, b, default_arguments:a, b = False}, add_user_signal:{arguments:a, b, default_arguments:a, b = []}, call:{arguments:a, default_arguments:a}, call_deferred:{arguments:a, default_arguments:a}, callv:{arguments:a, b, default_arguments:a, b}, can_process:{arguments:, default_arguments:}, can_translate_messages:{arguments:, default_arguments:}, connect:{arguments:a, b, c, d, e, default_arguments:a, b, c, d = [], e = 0}, disconnect:{arguments:a, b, c, default_arguments:a, b, c}, divide:{arguments:a, b, default_arguments:a, b}, duplicate:{arguments:a, default_arguments:a = 15}, emit_signal:{arguments:a, default_arguments:a}, find_node:{arguments:a, b, c, default_arguments:a, b = True, c = True}, find_parent:{arguments:a, default_arguments:a}, free:{arguments:, default_arguments:}, get:{arguments:a, default_arguments:a}, get_child:{arguments:a, default_arguments:a}, get_child_count:{arguments:, default_arguments:}, get_children:{arguments:, default_arguments:}, get_class:{arguments:, default_arguments:}, get_custom_multiplayer:{arguments:, default_arguments:}, get_filename:{arguments:, default_arguments:}, get_groups:{arguments:, default_arguments:}, get_incoming_connections:{arguments:, default_arguments:}, get_index:{arguments:, default_arguments:}, get_indexed:{arguments:a, default_arguments:a}, get_instance_id:{arguments:, default_arguments:}, get_meta:{arguments:a, default_arguments:a}, get_meta_list:{arguments:, default_arguments:}, get_method_list:{arguments:, default_arguments:}, get_multiplayer:{arguments:, default_arguments:}, get_name:{arguments:, default_arguments:}, get_network_master:{arguments:, default_arguments:}, get_node:{arguments:a, default_arguments:a}, get_node_and_resource:{arguments:a, default_arguments:a}, get_node_or_null:{arguments:a, default_arguments:a}, get_owner:{arguments:, default_arguments:}, get_parent:{arguments:, default_arguments:}, get_path:{arguments:, default_arguments:}, get_path_to:{arguments:a, default_arguments:a}, get_pause_mode:{arguments:, default_arguments:}, get_physics_process_delta_time:{arguments:, default_arguments:}, get_position_in_parent:{arguments:, default_arguments:}, get_process_delta_time:{arguments:, default_arguments:}, get_process_priority:{arguments:, default_arguments:}, get_property_list:{arguments:, default_arguments:}, get_scene_instance_load_placeholder:{arguments:, default_arguments:}, get_script:{arguments:, default_arguments:}, get_signal_connection_list:{arguments:a, default_arguments:a}, get_signal_list:{arguments:, default_arguments:}, get_tree:{arguments:, default_arguments:}, get_viewport:{arguments:, default_arguments:}, has_meta:{arguments:a, default_arguments:a}, has_method:{arguments:a, default_arguments:a}, has_node:{arguments:a, default_arguments:a}, has_node_and_resource:{arguments:a, default_arguments:a}, has_signal:{arguments:a, default_arguments:a}, has_user_signal:{arguments:a, default_arguments:a}, is_a_parent_of:{arguments:a, default_arguments:a}, is_blocking_signals:{arguments:, default_arguments:}, is_class:{arguments:a, default_arguments:a}, is_connected:{arguments:a, b, c, default_arguments:a, b, c}, is_displayed_folded:{arguments:, default_arguments:}, is_greater_than:{arguments:a, default_arguments:a}, is_in_group:{arguments:a, default_arguments:a}, is_inside_tree:{arguments:, default_arguments:}, is_network_master:{arguments:, default_arguments:}, is_physics_processing:{arguments:, default_arguments:}, is_physics_processing_internal:{arguments:, default_arguments:}, is_processing:{arguments:, default_arguments:}, is_processing_input:{arguments:, default_arguments:}, is_processing_internal:{arguments:, default_arguments:}, is_processing_unhandled_input:{arguments:, default_arguments:}, is_processing_unhandled_key_input:{arguments:, default_arguments:}, is_queued_for_deletion:{arguments:, default_arguments:}, math_fight:{arguments:, default_arguments:}, move_child:{arguments:a, b, default_arguments:a, b}, multiply:{arguments:a, b, default_arguments:a, b}, notification:{arguments:a, b, default_arguments:a, b = False}, pi:{arguments:, default_arguments:}, print_stray_nodes:{arguments:, default_arguments:}, print_tree:{arguments:, default_arguments:}, print_tree_pretty:{arguments:, default_arguments:}, propagate_call:{arguments:a, b, c, default_arguments:a, b = [], c = False}, propagate_notification:{arguments:a, default_arguments:a}, property_list_changed_notify:{arguments:, default_arguments:}, queue_free:{arguments:, default_arguments:}, raise:{arguments:, default_arguments:}, remove_and_skip:{arguments:, default_arguments:}, remove_child:{arguments:a, default_arguments:a}, remove_from_group:{arguments:a, default_arguments:a}, remove_meta:{arguments:a, default_arguments:a}, replace_by:{arguments:a, b, default_arguments:a, b = False}, request_ready:{arguments:, default_arguments:}, rpc:{arguments:a, default_arguments:a}, rpc_config:{arguments:a, b, default_arguments:a, b}, rpc_id:{arguments:a, b, default_arguments:a, b}, rpc_unreliable:{arguments:a, default_arguments:a}, rpc_unreliable_id:{arguments:a, b, default_arguments:a, b}, rset:{arguments:a, b, default_arguments:a, b}, rset_config:{arguments:a, b, default_arguments:a, b}, rset_id:{arguments:a, b, c, default_arguments:a, b, c}, rset_unreliable:{arguments:a, b, default_arguments:a, b}, rset_unreliable_id:{arguments:a, b, c, default_arguments:a, b, c}, set:{arguments:a, b, default_arguments:a, b}, set_block_signals:{arguments:a, default_arguments:a}, set_custom_multiplayer:{arguments:a, default_arguments:a}, set_deferred:{arguments:a, b, default_arguments:a, b}, set_display_folded:{arguments:a, default_arguments:a}, set_filename:{arguments:a, default_arguments:a}, set_indexed:{arguments:a, b, default_arguments:a, b}, set_message_translation:{arguments:a, default_arguments:a}, set_meta:{arguments:a, b, default_arguments:a, b}, set_name:{arguments:a, default_arguments:a}, set_network_master:{arguments:a, b, default_arguments:a, b = True}, set_owner:{arguments:a, default_arguments:a}, set_pause_mode:{arguments:a, default_arguments:a}, set_physics_process:{arguments:a, default_arguments:a}, set_physics_process_internal:{arguments:a, default_arguments:a}, set_process:{arguments:a, default_arguments:a}, set_process_input:{arguments:a, default_arguments:a}, set_process_internal:{arguments:a, default_arguments:a}, set_process_priority:{arguments:a, default_arguments:a}, set_process_unhandled_input:{arguments:a, default_arguments:a}, set_process_unhandled_key_input:{arguments:a, default_arguments:a}, set_scene_instance_load_placeholder:{arguments:a, default_arguments:a}, set_script:{arguments:a, default_arguments:a}, subtract:{arguments:a, b, default_arguments:a, b}, sum:{arguments:a, default_arguments:a}, to_string:{arguments:, default_arguments:}, tr:{arguments:a, default_arguments:a}, update_configuration_warning:{arguments:, default_arguments:}} is not equal to |Dictionary| {_enter_tree:{arguments:, default_arguments:}, _exit_tree:{arguments:, default_arguments:}, _get:{arguments:a, default_arguments:a}, _get_configuration_warning:{arguments:, default_arguments:}, _get_editor_description:{arguments:, default_arguments:}, _get_import_path:{arguments:, default_arguments:}, _get_property_list:{arguments:, default_arguments:}, _init:{arguments:, default_arguments:}, _input:{arguments:a, default_arguments:a}, _notification:{arguments:a, default_arguments:a}, _physics_process:{arguments:a, default_arguments:a}, _process:{arguments:a, default_arguments:a}, _ready:{arguments:, default_arguments:}, _set:{arguments:a, b, default_arguments:a, b}, _set_editor_description:{arguments:a, default_arguments:a}, _set_import_path:{arguments:a, default_arguments:a}, _to_string:{arguments:, default_arguments:}, _unhandled_input:{arguments:a, default_arguments:a}, _unhandled_key_input:{arguments:a, default_arguments:a}, add:{arguments:a, b, default_arguments:a, b}, add_child:{arguments:a, b, default_arguments:a, b = False}, add_child_below_node:{arguments:a, b, c, default_arguments:a, b, c = False}, add_to_group:{arguments:a, b, default_arguments:a, b = False}, add_user_signal:{arguments:a, b, default_arguments:a, b = []}, call:{arguments:a, default_arguments:a}, call_deferred:{arguments:a, default_arguments:a}, callv:{arguments:a, b, default_arguments:a, b}, can_process:{arguments:, default_arguments:}, can_translate_messages:{arguments:, default_arguments:}, connect:{arguments:a, b, c, d, e, default_arguments:a, b, c, d = [], e = 0}, disconnect:{arguments:a, b, c, default_arguments:a, b, c}, divide:{arguments:a, b, default_arguments:a, b}, duplicate:{arguments:a, default_arguments:a = 15}, emit_signal:{arguments:a, default_arguments:a}, find_node:{arguments:a, b, c, default_arguments:a, b = True, c = True}, find_parent:{arguments:a, default_arguments:a}, free:{arguments:, default_arguments:}, get:{arguments:a, default_arguments:a}, get_child:{arguments:a, default_arguments:a}, get_child_count:{arguments:, default_arguments:}, get_children:{arguments:, default_arguments:}, get_class:{arguments:, default_arguments:}, get_custom_multiplayer:{arguments:, default_arguments:}, get_filename:{arguments:, default_arguments:}, get_groups:{arguments:, default_arguments:}, get_incoming_connections:{arguments:, default_arguments:}, get_index:{arguments:, default_arguments:}, get_indexed:{arguments:a, default_arguments:a}, get_instance_id:{arguments:, default_arguments:}, get_meta:{arguments:a, default_arguments:a}, get_meta_list:{arguments:, default_arguments:}, get_method_list:{arguments:, default_arguments:}, get_multiplayer:{arguments:, default_arguments:}, get_name:{arguments:, default_arguments:}, get_network_master:{arguments:, default_arguments:}, get_node:{arguments:a, default_arguments:a}, get_node_and_resource:{arguments:a, default_arguments:a}, get_node_or_null:{arguments:a, default_arguments:a}, get_owner:{arguments:, default_arguments:}, get_parent:{arguments:, default_arguments:}, get_path:{arguments:, default_arguments:}, get_path_to:{arguments:a, default_arguments:a}, get_pause_mode:{arguments:, default_arguments:}, get_physics_process_delta_time:{arguments:, default_arguments:}, get_position_in_parent:{arguments:, default_arguments:}, get_process_delta_time:{arguments:, default_arguments:}, get_process_priority:{arguments:, default_arguments:}, get_property_list:{arguments:, default_arguments:}, get_scene_instance_load_placeholder:{arguments:, default_arguments:}, get_script:{arguments:, default_arguments:}, get_signal_connection_list:{arguments:a, default_arguments:a}, get_signal_list:{arguments:, default_arguments:}, get_tree:{arguments:, default_arguments:}, get_viewport:{arguments:, default_arguments:}, has_meta:{arguments:a, default_arguments:a}, has_method:{arguments:a, default_arguments:a}, has_node:{arguments:a, default_arguments:a}, has_node_and_resource:{arguments:a, default_arguments:a}, has_signal:{arguments:a, default_arguments:a}, has_user_signal:{arguments:a, default_arguments:a}, is_a_parent_of:{arguments:a, default_arguments:a}, is_blocking_signals:{arguments:, default_arguments:}, is_class:{arguments:a, default_arguments:a}, is_connected:{arguments:a, b, c, default_arguments:a, b, c}, is_displayed_folded:{arguments:, default_arguments:}, is_greater_than:{arguments:a, default_arguments:a}, is_in_group:{arguments:a, default_arguments:a}, is_inside_tree:{arguments:, default_arguments:}, is_network_master:{arguments:, default_arguments:}, is_physics_processing:{arguments:, default_arguments:}, is_physics_processing_internal:{arguments:, default_arguments:}, is_processing:{arguments:, default_arguments:}, is_processing_input:{arguments:, default_arguments:}, is_processing_internal:{arguments:, default_arguments:}, is_processing_unhandled_input:{arguments:, default_arguments:}, is_processing_unhandled_key_input:{arguments:, default_arguments:}, is_queued_for_deletion:{arguments:, default_arguments:}, math_fight:{arguments:, default_arguments:}, move_child:{arguments:a, b, default_arguments:a, b}, multiply:{arguments:a, b, default_arguments:a, b}, notification:{arguments:a, b, default_arguments:a, b = False}, pi:{arguments:, default_arguments:}, print_stray_nodes:{arguments:, default_arguments:}, print_tree:{arguments:, default_arguments:}, print_tree_pretty:{arguments:, default_arguments:}, propagate_call:{arguments:a, b, c, default_arguments:a, b = [], c = False}, propagate_notification:{arguments:a, default_arguments:a}, property_list_changed_notify:{arguments:, default_arguments:}, queue_free:{arguments:, default_arguments:}, raise:{arguments:, default_arguments:}, remove_and_skip:{arguments:, default_arguments:}, remove_child:{arguments:a, default_arguments:a}, remove_from_group:{arguments:a, default_arguments:a}, remove_meta:{arguments:a, default_arguments:a}, replace_by:{arguments:a, b, default_arguments:a, b = False}, request_ready:{arguments:, default_arguments:}, rpc:{arguments:a, default_arguments:a}, rpc_config:{arguments:a, b, default_arguments:a, b}, rpc_id:{arguments:a, b, default_arguments:a, b}, rpc_unreliable:{arguments:a, default_arguments:a}, rpc_unreliable_id:{arguments:a, b, default_arguments:a, b}, rset:{arguments:a, b, default_arguments:a, b}, rset_config:{arguments:a, b, default_arguments:a, b}, rset_id:{arguments:a, b, c, default_arguments:a, b, c}, rset_unreliable:{arguments:a, b, default_arguments:a, b}, rset_unreliable_id:{arguments:a, b, c, default_arguments:a, b, c}, set:{arguments:a, b, default_arguments:a, b}, set_block_signals:{arguments:a, default_arguments:a}, set_custom_multiplayer:{arguments:a, default_arguments:a}, set_deferred:{arguments:a, b, default_arguments:a, b}, set_display_folded:{arguments:a, default_arguments:a}, set_filename:{arguments:a, default_arguments:a}, set_indexed:{arguments:a, b, default_arguments:a, b}, set_message_translation:{arguments:a, default_arguments:a}, set_meta:{arguments:a, b, default_arguments:a, b}, set_name:{arguments:a, default_arguments:a}, set_network_master:{arguments:a, b, default_arguments:a, b = True}, set_owner:{arguments:a, default_arguments:a}, set_pause_mode:{arguments:a, default_arguments:a}, set_physics_process:{arguments:a, default_arguments:a}, set_physics_process_internal:{arguments:a, default_arguments:a}, set_process:{arguments:a, default_arguments:a}, set_process_input:{arguments:a, default_arguments:a}, set_process_internal:{arguments:a, default_arguments:a}, set_process_priority:{arguments:a, default_arguments:a}, set_process_unhandled_input:{arguments:a, default_arguments:a}, set_process_unhandled_key_input:{arguments:a, default_arguments:a}, set_scene_instance_load_placeholder:{arguments:a, default_arguments:a}, set_script:{arguments:a, default_arguments:a}, subtract:{arguments:a, b, default_arguments:a, b}, sum:{arguments:a, default_arguments:a}, to_string:{arguments:, default_arguments:}, tr:{arguments:a, default_arguments:a}, update_configuration_warning:{arguments:, default_arguments:}}",
"context": "Then they do not share resources",
"expected": "|Dictionary| {_enter_tree:{arguments:, default_arguments:}, _exit_tree:{arguments:, default_arguments:}, _get:{arguments:a, default_arguments:a}, _get_configuration_warning:{arguments:, default_arguments:}, _get_editor_description:{arguments:, default_arguments:}, _get_import_path:{arguments:, default_arguments:}, _get_property_list:{arguments:, default_arguments:}, _init:{arguments:, default_arguments:}, _input:{arguments:a, default_arguments:a}, _notification:{arguments:a, default_arguments:a}, _physics_process:{arguments:a, default_arguments:a}, _process:{arguments:a, default_arguments:a}, _ready:{arguments:, default_arguments:}, _set:{arguments:a, b, default_arguments:a, b}, _set_editor_description:{arguments:a, default_arguments:a}, _set_import_path:{arguments:a, default_arguments:a}, _to_string:{arguments:, default_arguments:}, _unhandled_input:{arguments:a, default_arguments:a}, _unhandled_key_input:{arguments:a, default_arguments:a}, add:{arguments:a, b, default_arguments:a, b}, add_child:{arguments:a, b, default_arguments:a, b = False}, add_child_below_node:{arguments:a, b, c, default_arguments:a, b, c = False}, add_to_group:{arguments:a, b, default_arguments:a, b = False}, add_user_signal:{arguments:a, b, default_arguments:a, b = []}, call:{arguments:a, default_arguments:a}, call_deferred:{arguments:a, default_arguments:a}, callv:{arguments:a, b, default_arguments:a, b}, can_process:{arguments:, default_arguments:}, can_translate_messages:{arguments:, default_arguments:}, connect:{arguments:a, b, c, d, e, default_arguments:a, b, c, d = [], e = 0}, disconnect:{arguments:a, b, c, default_arguments:a, b, c}, divide:{arguments:a, b, default_arguments:a, b}, duplicate:{arguments:a, default_arguments:a = 15}, emit_signal:{arguments:a, default_arguments:a}, find_node:{arguments:a, b, c, default_arguments:a, b = True, c = True}, find_parent:{arguments:a, default_arguments:a}, free:{arguments:, default_arguments:}, get:{arguments:a, default_arguments:a}, get_child:{arguments:a, default_arguments:a}, get_child_count:{arguments:, default_arguments:}, get_children:{arguments:, default_arguments:}, get_class:{arguments:, default_arguments:}, get_custom_multiplayer:{arguments:, default_arguments:}, get_filename:{arguments:, default_arguments:}, get_groups:{arguments:, default_arguments:}, get_incoming_connections:{arguments:, default_arguments:}, get_index:{arguments:, default_arguments:}, get_indexed:{arguments:a, default_arguments:a}, get_instance_id:{arguments:, default_arguments:}, get_meta:{arguments:a, default_arguments:a}, get_meta_list:{arguments:, default_arguments:}, get_method_list:{arguments:, default_arguments:}, get_multiplayer:{arguments:, default_arguments:}, get_name:{arguments:, default_arguments:}, get_network_master:{arguments:, default_arguments:}, get_node:{arguments:a, default_arguments:a}, get_node_and_resource:{arguments:a, default_arguments:a}, get_node_or_null:{arguments:a, default_arguments:a}, get_owner:{arguments:, default_arguments:}, get_parent:{arguments:, default_arguments:}, get_path:{arguments:, default_arguments:}, get_path_to:{arguments:a, default_arguments:a}, get_pause_mode:{arguments:, default_arguments:}, get_physics_process_delta_time:{arguments:, default_arguments:}, get_position_in_parent:{arguments:, default_arguments:}, get_process_delta_time:{arguments:, default_arguments:}, get_process_priority:{arguments:, default_arguments:}, get_property_list:{arguments:, default_arguments:}, get_scene_instance_load_placeholder:{arguments:, default_arguments:}, get_script:{arguments:, default_arguments:}, get_signal_connection_list:{arguments:a, default_arguments:a}, get_signal_list:{arguments:, default_arguments:}, get_tree:{arguments:, default_arguments:}, get_viewport:{arguments:, default_arguments:}, has_meta:{arguments:a, default_arguments:a}, has_method:{arguments:a, default_arguments:a}, has_node:{arguments:a, default_arguments:a}, has_node_and_resource:{arguments:a, default_arguments:a}, has_signal:{arguments:a, default_arguments:a}, has_user_signal:{arguments:a, default_arguments:a}, is_a_parent_of:{arguments:a, default_arguments:a}, is_blocking_signals:{arguments:, default_arguments:}, is_class:{arguments:a, default_arguments:a}, is_connected:{arguments:a, b, c, default_arguments:a, b, c}, is_displayed_folded:{arguments:, default_arguments:}, is_greater_than:{arguments:a, default_arguments:a}, is_in_group:{arguments:a, default_arguments:a}, is_inside_tree:{arguments:, default_arguments:}, is_network_master:{arguments:, default_arguments:}, is_physics_processing:{arguments:, default_arguments:}, is_physics_processing_internal:{arguments:, default_arguments:}, is_processing:{arguments:, default_arguments:}, is_processing_input:{arguments:, default_arguments:}, is_processing_internal:{arguments:, default_arguments:}, is_processing_unhandled_input:{arguments:, default_arguments:}, is_processing_unhandled_key_input:{arguments:, default_arguments:}, is_queued_for_deletion:{arguments:, default_arguments:}, math_fight:{arguments:, default_arguments:}, move_child:{arguments:a, b, default_arguments:a, b}, multiply:{arguments:a, b, default_arguments:a, b}, notification:{arguments:a, b, default_arguments:a, b = False}, pi:{arguments:, default_arguments:}, print_stray_nodes:{arguments:, default_arguments:}, print_tree:{arguments:, default_arguments:}, print_tree_pretty:{arguments:, default_arguments:}, propagate_call:{arguments:a, b, c, default_arguments:a, b = [], c = False}, propagate_notification:{arguments:a, default_arguments:a}, property_list_changed_notify:{arguments:, default_arguments:}, queue_free:{arguments:, default_arguments:}, raise:{arguments:, default_arguments:}, remove_and_skip:{arguments:, default_arguments:}, remove_child:{arguments:a, default_arguments:a}, remove_from_group:{arguments:a, default_arguments:a}, remove_meta:{arguments:a, default_arguments:a}, replace_by:{arguments:a, b, default_arguments:a, b = False}, request_ready:{arguments:, default_arguments:}, rpc:{arguments:a, default_arguments:a}, rpc_config:{arguments:a, b, default_arguments:a, b}, rpc_id:{arguments:a, b, default_arguments:a, b}, rpc_unreliable:{arguments:a, default_arguments:a}, rpc_unreliable_id:{arguments:a, b, default_arguments:a, b}, rset:{arguments:a, b, default_arguments:a, b}, rset_config:{arguments:a, b, default_arguments:a, b}, rset_id:{arguments:a, b, c, default_arguments:a, b, c}, rset_unreliable:{arguments:a, b, default_arguments:a, b}, rset_unreliable_id:{arguments:a, b, c, default_arguments:a, b, c}, set:{arguments:a, b, default_arguments:a, b}, set_block_signals:{arguments:a, default_arguments:a}, set_custom_multiplayer:{arguments:a, default_arguments:a}, set_deferred:{arguments:a, b, default_arguments:a, b}, set_display_folded:{arguments:a, default_arguments:a}, set_filename:{arguments:a, default_arguments:a}, set_indexed:{arguments:a, b, default_arguments:a, b}, set_message_translation:{arguments:a, default_arguments:a}, set_meta:{arguments:a, b, default_arguments:a, b}, set_name:{arguments:a, default_arguments:a}, set_network_master:{arguments:a, b, default_arguments:a, b = True}, set_owner:{arguments:a, default_arguments:a}, set_pause_mode:{arguments:a, default_arguments:a}, set_physics_process:{arguments:a, default_arguments:a}, set_physics_process_internal:{arguments:a, default_arguments:a}, set_process:{arguments:a, default_arguments:a}, set_process_input:{arguments:a, default_arguments:a}, set_process_internal:{arguments:a, default_arguments:a}, set_process_priority:{arguments:a, default_arguments:a}, set_process_unhandled_input:{arguments:a, default_arguments:a}, set_process_unhandled_key_input:{arguments:a, default_arguments:a}, set_scene_instance_load_placeholder:{arguments:a, default_arguments:a}, set_script:{arguments:a, default_arguments:a}, subtract:{arguments:a, b, default_arguments:a, b}, sum:{arguments:a, default_arguments:a}, to_string:{arguments:, default_arguments:}, tr:{arguments:a, default_arguments:a}, update_configuration_warning:{arguments:, default_arguments:}} != |Dictionary| {_enter_tree:{arguments:, default_arguments:}, _exit_tree:{arguments:, default_arguments:}, _get:{arguments:a, default_arguments:a}, _get_configuration_warning:{arguments:, default_arguments:}, _get_editor_description:{arguments:, default_arguments:}, _get_import_path:{arguments:, default_arguments:}, _get_property_list:{arguments:, default_arguments:}, _init:{arguments:, default_arguments:}, _input:{arguments:a, default_arguments:a}, _notification:{arguments:a, default_arguments:a}, _physics_process:{arguments:a, default_arguments:a}, _process:{arguments:a, default_arguments:a}, _ready:{arguments:, default_arguments:}, _set:{arguments:a, b, default_arguments:a, b}, _set_editor_description:{arguments:a, default_arguments:a}, _set_import_path:{arguments:a, default_arguments:a}, _to_string:{arguments:, default_arguments:}, _unhandled_input:{arguments:a, default_arguments:a}, _unhandled_key_input:{arguments:a, default_arguments:a}, add:{arguments:a, b, default_arguments:a, b}, add_child:{arguments:a, b, default_arguments:a, b = False}, add_child_below_node:{arguments:a, b, c, default_arguments:a, b, c = False}, add_to_group:{arguments:a, b, default_arguments:a, b = False}, add_user_signal:{arguments:a, b, default_arguments:a, b = []}, call:{arguments:a, default_arguments:a}, call_deferred:{arguments:a, default_arguments:a}, callv:{arguments:a, b, default_arguments:a, b}, can_process:{arguments:, default_arguments:}, can_translate_messages:{arguments:, default_arguments:}, connect:{arguments:a, b, c, d, e, default_arguments:a, b, c, d = [], e = 0}, disconnect:{arguments:a, b, c, default_arguments:a, b, c}, divide:{arguments:a, b, default_arguments:a, b}, duplicate:{arguments:a, default_arguments:a = 15}, emit_signal:{arguments:a, default_arguments:a}, find_node:{arguments:a, b, c, default_arguments:a, b = True, c = True}, find_parent:{arguments:a, default_arguments:a}, free:{arguments:, default_arguments:}, get:{arguments:a, default_arguments:a}, get_child:{arguments:a, default_arguments:a}, get_child_count:{arguments:, default_arguments:}, get_children:{arguments:, default_arguments:}, get_class:{arguments:, default_arguments:}, get_custom_multiplayer:{arguments:, default_arguments:}, get_filename:{arguments:, default_arguments:}, get_groups:{arguments:, default_arguments:}, get_incoming_connections:{arguments:, default_arguments:}, get_index:{arguments:, default_arguments:}, get_indexed:{arguments:a, default_arguments:a}, get_instance_id:{arguments:, default_arguments:}, get_meta:{arguments:a, default_arguments:a}, get_meta_list:{arguments:, default_arguments:}, get_method_list:{arguments:, default_arguments:}, get_multiplayer:{arguments:, default_arguments:}, get_name:{arguments:, default_arguments:}, get_network_master:{arguments:, default_arguments:}, get_node:{arguments:a, default_arguments:a}, get_node_and_resource:{arguments:a, default_arguments:a}, get_node_or_null:{arguments:a, default_arguments:a}, get_owner:{arguments:, default_arguments:}, get_parent:{arguments:, default_arguments:}, get_path:{arguments:, default_arguments:}, get_path_to:{arguments:a, default_arguments:a}, get_pause_mode:{arguments:, default_arguments:}, get_physics_process_delta_time:{arguments:, default_arguments:}, get_position_in_parent:{arguments:, default_arguments:}, get_process_delta_time:{arguments:, default_arguments:}, get_process_priority:{arguments:, default_arguments:}, get_property_list:{arguments:, default_arguments:}, get_scene_instance_load_placeholder:{arguments:, default_arguments:}, get_script:{arguments:, default_arguments:}, get_signal_connection_list:{arguments:a, default_arguments:a}, get_signal_list:{arguments:, default_arguments:}, get_tree:{arguments:, default_arguments:}, get_viewport:{arguments:, default_arguments:}, has_meta:{arguments:a, default_arguments:a}, has_method:{arguments:a, default_arguments:a}, has_node:{arguments:a, default_arguments:a}, has_node_and_resource:{arguments:a, default_arguments:a}, has_signal:{arguments:a, default_arguments:a}, has_user_signal:{arguments:a, default_arguments:a}, is_a_parent_of:{arguments:a, default_arguments:a}, is_blocking_signals:{arguments:, default_arguments:}, is_class:{arguments:a, default_arguments:a}, is_connected:{arguments:a, b, c, default_arguments:a, b, c}, is_displayed_folded:{arguments:, default_arguments:}, is_greater_than:{arguments:a, default_arguments:a}, is_in_group:{arguments:a, default_arguments:a}, is_inside_tree:{arguments:, default_arguments:}, is_network_master:{arguments:, default_arguments:}, is_physics_processing:{arguments:, default_arguments:}, is_physics_processing_internal:{arguments:, default_arguments:}, is_processing:{arguments:, default_arguments:}, is_processing_input:{arguments:, default_arguments:}, is_processing_internal:{arguments:, default_arguments:}, is_processing_unhandled_input:{arguments:, default_arguments:}, is_processing_unhandled_key_input:{arguments:, default_arguments:}, is_queued_for_deletion:{arguments:, default_arguments:}, math_fight:{arguments:, default_arguments:}, move_child:{arguments:a, b, default_arguments:a, b}, multiply:{arguments:a, b, default_arguments:a, b}, notification:{arguments:a, b, default_arguments:a, b = False}, pi:{arguments:, default_arguments:}, print_stray_nodes:{arguments:, default_arguments:}, print_tree:{arguments:, default_arguments:}, print_tree_pretty:{arguments:, default_arguments:}, propagate_call:{arguments:a, b, c, default_arguments:a, b = [], c = False}, propagate_notification:{arguments:a, default_arguments:a}, property_list_changed_notify:{arguments:, default_arguments:}, queue_free:{arguments:, default_arguments:}, raise:{arguments:, default_arguments:}, remove_and_skip:{arguments:, default_arguments:}, remove_child:{arguments:a, default_arguments:a}, remove_from_group:{arguments:a, default_arguments:a}, remove_meta:{arguments:a, default_arguments:a}, replace_by:{arguments:a, b, default_arguments:a, b = False}, request_ready:{arguments:, default_arguments:}, rpc:{arguments:a, default_arguments:a}, rpc_config:{arguments:a, b, default_arguments:a, b}, rpc_id:{arguments:a, b, default_arguments:a, b}, rpc_unreliable:{arguments:a, default_arguments:a}, rpc_unreliable_id:{arguments:a, b, default_arguments:a, b}, rset:{arguments:a, b, default_arguments:a, b}, rset_config:{arguments:a, b, default_arguments:a, b}, rset_id:{arguments:a, b, c, default_arguments:a, b, c}, rset_unreliable:{arguments:a, b, default_arguments:a, b}, rset_unreliable_id:{arguments:a, b, c, default_arguments:a, b, c}, set:{arguments:a, b, default_arguments:a, b}, set_block_signals:{arguments:a, default_arguments:a}, set_custom_multiplayer:{arguments:a, default_arguments:a}, set_deferred:{arguments:a, b, default_arguments:a, b}, set_display_folded:{arguments:a, default_arguments:a}, set_filename:{arguments:a, default_arguments:a}, set_indexed:{arguments:a, b, default_arguments:a, b}, set_message_translation:{arguments:a, default_arguments:a}, set_meta:{arguments:a, b, default_arguments:a, b}, set_name:{arguments:a, default_arguments:a}, set_network_master:{arguments:a, b, default_arguments:a, b = True}, set_owner:{arguments:a, default_arguments:a}, set_pause_mode:{arguments:a, default_arguments:a}, set_physics_process:{arguments:a, default_arguments:a}, set_physics_process_internal:{arguments:a, default_arguments:a}, set_process:{arguments:a, default_arguments:a}, set_process_input:{arguments:a, default_arguments:a}, set_process_internal:{arguments:a, default_arguments:a}, set_process_priority:{arguments:a, default_arguments:a}, set_process_unhandled_input:{arguments:a, default_arguments:a}, set_process_unhandled_key_input:{arguments:a, default_arguments:a}, set_scene_instance_load_placeholder:{arguments:a, default_arguments:a}, set_script:{arguments:a, default_arguments:a}, subtract:{arguments:a, b, default_arguments:a, b}, sum:{arguments:a, default_arguments:a}, to_string:{arguments:, default_arguments:}, tr:{arguments:a, default_arguments:a}, update_configuration_warning:{arguments:, default_arguments:}}",
"success": true
} ],
"context": "When we create two of it for the same script",
"fullname": "test_When_we_create_two_of_it_for_the_same_script",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|Object| [Node:7475] is equal to |Object| [Node:7475]",
"context": "Then we get the same double back",
"expected": "|Object| [Node:7475] is equal to |Object| [Node:7475]",
"success": true
} ],
"context": "When we call the double the second time",
"fullname": "test_When_we_call_double_a_second_time_on",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 3,
"path": "res://tests/integration/script_director.test.gd",
"source": {
"containers": [ "res://tests/integration", "res://tests" ],
"method": "",
"path": "res://tests/integration/script_director.test.gd",
"tags": [  ],
"test": ExtResource( 13 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 3
}, {
"context": "Given a Boolean Assertion",
"methods": [ {
"assertions": [ {
"actual": "|bool| True != false",
"context": "",
"expected": "|bool| True == false",
"success": false
} ],
"context": " intentional failure",
"fullname": "test_intentional_failure",
"passed": 0,
"success": false,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then it passes",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When calling asserts.is_true(true)",
"fullname": "test_when_calling_asserts_is_true",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| False == false",
"context": "Then it passes",
"expected": "|bool| False == false",
"success": true
} ],
"context": "When calling asserts.is_false(false)",
"fullname": "test_when_calling_asserts_is_false",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 2,
"path": "res://tests/unit/boolean.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/boolean.test.gd",
"tags": [  ],
"test": ExtResource( 11 ),
"yield_time": 0.0
},
"success": false,
"time_taken": 0.0,
"total": 3
}, {
"context": "Given A File Assertion",
"methods": [ {
"assertions": [ {
"actual": "res://somefile.gd does not exist",
"context": "Then it passes",
"expected": "res://somefile.gd does not exist",
"success": true
} ],
"context": "When calling asserts.file_does_not_exist when there is no file",
"fullname": "test_when_calling_file_does_not_exist_when_there_is_no_file",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "res://tests/unit/file.test.gd exists",
"context": "Then it passes",
"expected": "res://tests/unit/file.test.gd exists",
"success": true
} ],
"context": "When calling asserts.file_exists when the file is this suite",
"fullname": "test_when_calling_file_exists_when_file_is_self",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": " does not exist",
"context": "Then it passes",
"expected": " does not exist",
"success": true
} ],
"context": "When calling asserts file does not exist when path is empty",
"fullname": "test_when_calling_file_does_not_exist_when_path_is_empty",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 3,
"path": "res://tests/unit/file.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/file.test.gd",
"tags": [  ],
"test": ExtResource( 3 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 3
}, {
"context": "Given an Equality Assertion",
"methods": [ {
"assertions": [ {
"actual": "|int| 1 is equal to |int| 1",
"context": "Then it passes",
"expected": "|int| 1 is equal to |int| 1",
"success": true
} ],
"context": "When calling asserts.is_equal(1, 1)",
"fullname": "test_when_calling_is_equal",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 2 is equal or greater |int| 1",
"context": "Then it passes",
"expected": "|int| 2 is equal or greater |int| 1",
"success": true
} ],
"context": "When calling asserts.is_equal_or_greater_than(2, 1)",
"fullname": "test_when_calling_is_equal_or_greater_than",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 2 is greater than |int| 1",
"context": "Then it passes",
"expected": "|int| 2 is greater than |int| 1",
"success": true
} ],
"context": "When calling asserts.is_greater_than(2, 1)",
"fullname": "test_when_calling_is_greater_than",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 1 is less than |int| 2",
"context": "Then it passes",
"expected": "|int| 1 is less than |int| 2",
"success": true
} ],
"context": "When calling asserts.is_less_than(2, 1)",
"fullname": "test_when_calling_is_less_than",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 5 is not equal to |int| 6",
"context": "Then it passes",
"expected": "|int| 5 != |int| 6",
"success": true
} ],
"context": "When callign asserts.is_not_equal(5, 6)",
"fullname": "test_when_calling_is_not_equal",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 1 is equal or less than |int| 1",
"context": "Then it passes!",
"expected": "|int| 1 is equal or less than |int| 1",
"success": true
} ],
"context": "When calling asserts.is_equal_or_less_than(1, 1)",
"fullname": "test_when_calling_is_equal_or_less_than_with_equal_values",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 1 is equal or greater |int| 1",
"context": "Then it passes",
"expected": "|int| 1 is equal or greater |int| 1",
"success": true
} ],
"context": "When calling asserts.is_equal_or_greater_than(1, 1)",
"fullname": "test_when_calling_is_equal_or_greater_than_with_equal_values",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 7,
"path": "res://tests/unit/equality.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/equality.test.gd",
"tags": [  ],
"test": ExtResource( 8 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 7
}, {
"context": "Given a Test Double",
"methods": [ {
"assertions": [ {
"actual": "|int| 9999 is equal to |int| 9999",
"context": "Then it returns the corresponding value when the pattern matches",
"expected": "|int| 9999 is equal to |int| 9999",
"success": true
} ],
"context": "When we call a method that was stubbed with an argument pattern that includes a non-primitive object",
"fullname": "test_When_we_call_a_method_that_was_stubbed_with_an_argument_pattern_that_includes_a_non_primitive_object",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 9999 is equal to |int| 9999",
"context": "Then it returns the corresponding value when the partial pattern matches",
"expected": "|int| 9999 is equal to |int| 9999",
"success": true
} ],
"context": "When we call a method that was stubbed with a partial (ie using any()) argument pattern",
"fullname": "test_When_we_call_a_method_that_was_stubbed_with_a_partial_argument_pattern",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|null| Null == null",
"context": "Then we get the stubbed value back",
"expected": "|null| Null == null",
"success": true
} ],
"context": "When we stub a method of a doubled inner class",
"fullname": "test_When_we_stub_a_method_of_a_double_inner_class",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|String| Jackie is equal to |String| Jackie",
"context": "Then we can double the object successfully",
"expected": "|String| Jackie is equal to |String| Jackie",
"success": true
} ],
"context": "When we pass in dependecies on direct",
"fullname": "test_When_we_pass_in_deps_on_direct",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 99 is equal to |int| 99",
"context": "Then it returns a value",
"expected": "|int| 99 is equal to |int| 99",
"success": true
} ],
"context": "When we pass a funcref as a subcall that returns",
"fullname": "test_When_we_pass_a_funcref_as_a_subcall_that_returns_a_value",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 99 is equal to |int| 99",
"context": "Then it affects the state of the double",
"expected": "|int| 99 is equal to |int| 99",
"success": true
} ],
"context": "When we pass a funcref as a subcall",
"fullname": "test_When_we_pass_a_funcref_as_a_subcall",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|Array| [10, 5] is equal to |Array| [10, 5]",
"context": "Then it returns a value",
"expected": "|Array| [10, 5] is equal to |Array| [10, 5]",
"success": true
} ],
"context": "When we pass an Object with a call_func function",
"fullname": "test_When_we_pass_an_object_with_callfunc_method_as_a_subcall",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 4 is equal to |int| 4",
"context": "Then it calls its super implementation by default",
"expected": "|int| 4 is equal to |int| 4",
"success": true
}, {
"actual": "|int| 9999 is equal to |int| 9999",
"context": "Then it does not call its super implementation when arguments patterns match a different return value",
"expected": "|int| 9999 is equal to |int| 9999",
"success": true
} ],
"context": "When we call a method that we stubbed to call its super implementation by default",
"fullname": "test_When_we_call_a_method_that_we_stubbed_to_call_its_super_implementation_by_default",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|int| 4 is equal to |int| 4",
"context": "Then we get the correct result",
"expected": "|int| 4 is equal to |int| 4",
"success": true
} ],
"context": "When we call an add(x, y) method that we haven't directed",
"fullname": "test_When_we_call_an_add_method_that_we_have_not_directed",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then it returns true",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we call a method that we have stubbed to return true",
"fullname": "test_When_we_call_a_method_that_we_have_stubbed_to_return_true",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|Object| [Node:7557] is equal to |Object| [Node:7557]",
"context": "Then it returns that same node",
"expected": "|Object| [Node:7557] is equal to |Object| [Node:7557]",
"success": true
} ],
"context": "When we call a method that we have stubbed to return a node",
"fullname": "test_When_we_call_a_method_that_we_have_stubbed_to_return_a_node",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|float| 6.283185 is equal to |float| 6.283185",
"context": "Then we can call the static methods of that inner double",
"expected": "|float| 6.283185 is equal to |float| 6.283185",
"success": true
} ],
"context": "When we add an doubled inner class to it",
"fullname": "test_When_we_add_a_doubled_inner_class_to_it",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "(1, 1) is builtin: Vector2",
"context": "Then we can call methods on it",
"expected": "(1, 1) is builtin: Vector2",
"success": true
} ],
"context": "When we double an inner class",
"fullname": "test_When_we_double_an_inner_class",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 100 is equal to |int| 100",
"context": "Then it returns the default stubbed value when the arguments don't match any pattern",
"expected": "|int| 100 is equal to |int| 100",
"success": true
}, {
"actual": "|int| 1000 is equal to |int| 1000",
"context": "Then it returns the the corresponding value to the pattern the arguments matched",
"expected": "|int| 1000 is equal to |int| 1000",
"success": true
} ],
"context": "When we call a method that was stubbed to return different values based on argument patterns",
"fullname": "test_When_we_call_a_method_that_was_stubbed_to_return_different_values_based_on_argument_patterns",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "add was called",
"context": "Then we can see that it was called at least once",
"expected": "add was called",
"success": true
} ],
"context": "When we call a method that we are spying on",
"fullname": "test_When_we_call_a_method_that_we_are_spying_on",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "method: add was called with arguments: [10, 10]",
"context": "Then we can see that it was called with those arguments",
"expected": "method: add was called with arguments: [10, 10]",
"success": true
} ],
"context": "When we pass arguments to a method call that we are spying on",
"fullname": "test_When_we_pass_arguments_to_a_method_call_that_we_are_spying_on",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| True is equal to |bool| True",
"context": "Then we can call it",
"expected": "|bool| True is equal to |bool| True",
"success": true
} ],
"context": "When we stubbed a keyworded method by passing in the correct keyword",
"fullname": "test_When_we_stubbed_a_keyword_method_by_passing_in_the_correct_keyword",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|String| Jackie is equal to |String| Jackie",
"context": "Then we can double the object successfully",
"expected": "|String| Jackie is equal to |String| Jackie",
"success": true
} ],
"context": "When we pass in dependecies on double",
"fullname": "test_When_we_pass_in_deps_on_double",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|null| Null == null",
"context": "Then we get null",
"expected": "|null| Null == null",
"success": true
} ],
"context": "When we call a method that we have dummied",
"fullname": "test_When_we_call_a_method_that_we_have_dummied",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 19,
"path": "res://tests/integration/test_double.test.gd",
"source": {
"containers": [ "res://tests/integration", "res://tests" ],
"method": "",
"path": "res://tests/integration/test_double.test.gd",
"tags": [  ],
"test": ExtResource( 14 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 19
}, {
"context": "Given an Is Instance of class/type Assertion",
"methods": [ {
"assertions": [ {
"actual": "|Plane| 0, 0, 0, 0 != null",
"context": "plane is not null",
"expected": "|Plane| 0, 0, 0, 0 != null",
"success": true
}, {
"actual": "0, 0, 0, 0 is builtin: Plane",
"context": "then it passes",
"expected": "0, 0, 0, 0 is builtin: Plane",
"success": true
} ],
"context": "When calling asserts.is_Plane(plane: Plane())",
"fullname": "test_when_calling_is_Plane",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|AABB| 0, 0, 0 - 0, 0, 0 != null",
"context": "AABB is not null",
"expected": "|AABB| 0, 0, 0 - 0, 0, 0 != null",
"success": true
}, {
"actual": "0, 0, 0 - 0, 0, 0 is builtin: AABB",
"context": "Then it passes",
"expected": "0, 0, 0 - 0, 0, 0 is builtin: AABB",
"success": true
} ],
"context": "When calling asserts.is_AABB(aabb: AABB)",
"fullname": "test_when_calling_is_AABB",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "{} is builtin: Dictionary",
"context": "Then it passes",
"expected": "{} is builtin: Dictionary",
"success": true
} ],
"context": "When calling asserts.is_Dictionary({})",
"fullname": "test_when_calling_is_Dictionary",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|PoolVector2Array| [] != null",
"context": "vec2s is not null",
"expected": "|PoolVector2Array| [] != null",
"success": true
}, {
"actual": "[] is builtin: PoolVector2Array",
"context": "Then it passes",
"expected": "[] is builtin: PoolVector2Array",
"success": true
} ],
"context": "When calling is asserts.is_PoolVector2Array(vec2s: PoolVector2Array)",
"fullname": "test_when_calling_is_PoolVector2Array",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|Rect2| (0, 0, 0, 0) != null",
"context": "rect2 is not null",
"expected": "|Rect2| (0, 0, 0, 0) != null",
"success": true
}, {
"actual": "(0, 0, 0, 0) is builtin: Rect2",
"context": "Then it passes",
"expected": "(0, 0, 0, 0) is builtin: Rect2",
"success": true
} ],
"context": "When calling asserts.is_Rect2(rect2: Rect2)",
"fullname": "test_when_calling_is_Rect2",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|PoolVector3Array| [] != null",
"context": "vec3s is not null",
"expected": "|PoolVector3Array| [] != null",
"success": true
}, {
"actual": "[] is builtin: PoolVector3Array",
"context": "Then it passes",
"expected": "[] is builtin: PoolVector3Array",
"success": true
} ],
"context": "When calling is asserts.is_PoolVector3Array(vec3s: PoolVector3Array)",
"fullname": "test_when_calling_is_PoolVector3Array",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|PoolRealArray| [] != null",
"context": "reals is not null",
"expected": "|PoolRealArray| [] != null",
"success": true
}, {
"actual": "[] is builtin: PoolRealArray",
"context": "Then it passes",
"expected": "[] is builtin: PoolRealArray",
"success": true
} ],
"context": "When calling is asserts.is_PoolRealArray(reals: PoolRealArray)",
"fullname": "test_when_calling_is_PoolRealArray",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|Quat| (0, 0, 0, 1) != null",
"context": "quat is not null",
"expected": "|Quat| (0, 0, 0, 1) != null",
"success": true
}, {
"actual": "(0, 0, 0, 1) is builtin: Quat",
"context": "Then it passes",
"expected": "(0, 0, 0, 1) is builtin: Quat",
"success": true
} ],
"context": "When calling asserts.is_Quat(quat: Quat)",
"fullname": "test_when_calling_is_Quat",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|RID| [RID] != null",
"context": "rid is not null",
"expected": "|RID| [RID] != null",
"success": true
}, {
"actual": "[RID] is builtin: RID",
"context": "Then it passes",
"expected": "[RID] is builtin: RID",
"success": true
} ],
"context": "When calling asserts.is_RID(rid: RID)",
"fullname": "test_when_calling_is_RID",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|Color| 0,0,0,1 != null",
"context": "color is not null",
"expected": "|Color| 0,0,0,1 != null",
"success": true
}, {
"actual": "0,0,0,1 is builtin: Color",
"context": "Then it passes",
"expected": "0,0,0,1 is builtin: Color",
"success": true
} ],
"context": "When calling asserts.is_color(color: Color)",
"fullname": "test_when_calling_is_Color",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|String|  != null",
"context": "strs is not null",
"expected": "|String|  != null",
"success": true
}, {
"actual": " is builtin: String",
"context": "Then it passes",
"expected": " is builtin: String",
"success": true
} ],
"context": "When calling asserts.is_string(strs: String)",
"fullname": "test_when_calling_is_string",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|Transform| 1, 0, 0, 0, 1, 0, 0, 0, 1 - 0, 0, 0 != null",
"context": "transform is not null",
"expected": "|Transform| 1, 0, 0, 0, 1, 0, 0, 0, 1 - 0, 0, 0 != null",
"success": true
}, {
"actual": "1, 0, 0, 0, 1, 0, 0, 0, 1 - 0, 0, 0 is builtin: Transform",
"context": "Then it passes",
"expected": "1, 0, 0, 0, 1, 0, 0, 0, 1 - 0, 0, 0 is builtin: Transform",
"success": true
} ],
"context": "When calling asserts.is_Transform(transform: Transform)",
"fullname": "test_when_calling_is_Transform",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|Transform2D| ((1, 0), (0, 1), (0, 0)) != null",
"context": "transform2D is not null",
"expected": "|Transform2D| ((1, 0), (0, 1), (0, 0)) != null",
"success": true
}, {
"actual": "((1, 0), (0, 1), (0, 0)) is builtin: Transform2D",
"context": "Then it passes",
"expected": "((1, 0), (0, 1), (0, 0)) is builtin: Transform2D",
"success": true
} ],
"context": "When calling asserts.is_Transform(transform2D: Transform2D)",
"fullname": "test_when_calling_is_Transform2D",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|Array| [] != null",
"context": "array is not null",
"expected": "|Array| [] != null",
"success": true
}, {
"actual": "[] is builtin: Array",
"context": "Then it passes",
"expected": "[] is builtin: Array",
"success": true
} ],
"context": "When calling asserts.is_Array(array: Array)",
"fullname": "test_when_calling_is_Array",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|Vector2| (0, 0) != null",
"context": "vec2 is not null",
"expected": "|Vector2| (0, 0) != null",
"success": true
}, {
"actual": "(0, 0) is builtin: Vector2",
"context": "Then it passes",
"expected": "(0, 0) is builtin: Vector2",
"success": true
} ],
"context": "When calling asserts.is_Vector2(vec2)",
"fullname": "test_when_calling_is_Vector2",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|PoolStringArray| [] != null",
"context": "strs is not null",
"expected": "|PoolStringArray| [] != null",
"success": true
}, {
"actual": "[] is builtin: PoolStringArray",
"context": "Then it passes",
"expected": "[] is builtin: PoolStringArray",
"success": true
} ],
"context": "When calling is asserts.is_PoolStringArray(strs: PoolStringArray)",
"fullname": "test_when_calling_is_PoolStringArray",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|NodePath| . != null",
"context": "@'Parent/Child' is not null",
"expected": "|NodePath| . != null",
"success": true
}, {
"actual": ". is builtin: NodePath",
"context": "Then it passes",
"expected": ". is builtin: NodePath",
"success": true
} ],
"context": "When calling asserts.is_NodePath(@'Parent/Child')",
"fullname": "test_when_calling_is_NodePath",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|Object| [Node:7669] != null",
"context": "node is not null",
"expected": "|Object| [Node:7669] != null",
"success": true
}, {
"actual": "[Node:7669] is builtin: Object",
"context": "An instance of node is an Object",
"expected": "[Node:7669] is builtin: Object",
"success": true
} ],
"context": "When calling is asserts.object(node: Node)",
"fullname": "test_when_calling_is_object",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|PoolByteArray| [PoolByteArray] != null",
"context": "bytes is not null",
"expected": "|PoolByteArray| [PoolByteArray] != null",
"success": true
}, {
"actual": "[PoolByteArray] is builtin: PoolByteArray",
"context": "Then it passes",
"expected": "[PoolByteArray] is builtin: PoolByteArray",
"success": true
} ],
"context": "When calling asserts.is_PoolByteArray(bytes: PoolByteArray)",
"fullname": "test_when_calling_is_PoolByteArray",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|PoolIntArray| [] != null",
"context": "ints is not null",
"expected": "|PoolIntArray| [] != null",
"success": true
}, {
"actual": "[] is builtin: PoolIntArray",
"context": "Then it passes",
"expected": "[] is builtin: PoolIntArray",
"success": true
} ],
"context": "When calling asserts.is_PoolIntArray(ints: PoolIntArray)",
"fullname": "test_when_calling_is_PoolIntArray",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "1 is builtin: int",
"context": "Then it passes",
"expected": "1 is builtin: int",
"success": true
} ],
"context": "When callign asserts.is_int(1)",
"fullname": "test_when_calling_is_int",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|Vector3| (0, 0, 0) != null",
"context": "vec3 is not null",
"expected": "|Vector3| (0, 0, 0) != null",
"success": true
}, {
"actual": "(0, 0, 0) is builtin: Vector3",
"context": "Then it passes",
"expected": "(0, 0, 0) is builtin: Vector3",
"success": true
} ],
"context": "When calling asserts.is_Vector3(vec3: Vector3",
"fullname": "test_when_calling_is_Vector3",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "1 is builtin: float",
"context": "Then it passes",
"expected": "1 is builtin: float",
"success": true
} ],
"context": "When calling asserts.is_float(1.0)",
"fullname": "test_when_calling_is_float",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|PoolColorArray| [PoolColorArray] != null",
"context": "colors is not null",
"expected": "|PoolColorArray| [PoolColorArray] != null",
"success": true
}, {
"actual": "[PoolColorArray] is builtin: PoolColorArray",
"context": "Then it passes",
"expected": "[PoolColorArray] is builtin: PoolColorArray",
"success": true
} ],
"context": "When calling asserts.is_PoolColorArray(colors: PoolColorArray)",
"fullname": "test_when_calling_is_PoolColorArray",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "True is builtin: bool",
"context": "Then it passes",
"expected": "True is builtin: bool",
"success": true
} ],
"context": "When calling asserts.is_bool(true)",
"fullname": "test_when_calling_is_bool",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|Basis| ((1, 0, 0), (0, 1, 0), (0, 0, 1)) != null",
"context": "basis is not null",
"expected": "|Basis| ((1, 0, 0), (0, 1, 0), (0, 0, 1)) != null",
"success": true
}, {
"actual": "((1, 0, 0), (0, 1, 0), (0, 0, 1)) is builtin: Basis",
"context": "Then it passes",
"expected": "((1, 0, 0), (0, 1, 0), (0, 0, 1)) is builtin: Basis",
"success": true
} ],
"context": "When calling asserts.is_basis(basis: Basis",
"fullname": "test_when_calling_is_Basis",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
} ],
"passed": 26,
"path": "res://tests/unit/is_instance.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/is_instance.test.gd",
"tags": [  ],
"test": ExtResource( 6 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 26
}, {
"context": "Given an Is Not Instance of class/type Assertion",
"methods": [ {
"assertions": [ {
"actual": "Null is not builtin: AABB",
"context": "Then it passes",
"expected": "Null is not builtin: AABB",
"success": true
} ],
"context": "when calling asserts.is_not_AABB(null)",
"fullname": "test_when_calling_is_not_AABB",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Basis",
"context": "Then it passes",
"expected": "Null is not builtin: Basis",
"success": true
} ],
"context": "when calling asserts.is_not_Basis(null)",
"fullname": "test_when_calling_is_not_Basis",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Array",
"context": "Then it passes",
"expected": "Null is not builtin: Array",
"success": true
} ],
"context": "when calling asserts.is_not_Array(null)",
"fullname": "test_when_calling_is_not_Array",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: RID",
"context": "Then it passes",
"expected": "Null is not builtin: RID",
"success": true
} ],
"context": "when calling asserts.is_not_RID(null)",
"fullname": "test_when_calling_is_not_RID",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Vector2",
"context": "Then it passes",
"expected": "Null is not builtin: Vector2",
"success": true
} ],
"context": "when calling asserts.is_not_Vector2(null)",
"fullname": "test_when_calling_is_not_Vector2",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Color",
"context": "Then it passes",
"expected": "Null is not builtin: Color",
"success": true
} ],
"context": "when calling asserts.is_not_Color(null)",
"fullname": "test_when_calling_is_not_Color",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Object",
"context": "Then it passes",
"expected": "Null is not builtin: Object",
"success": true
} ],
"context": "when calling asserts.is_not_Object(null)",
"fullname": "test_when_calling_is_not_Object",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Rect2",
"context": "Then it passes",
"expected": "Null is not builtin: Rect2",
"success": true
} ],
"context": "when calling asserts.is_not_Rect2(null)",
"fullname": "test_when_calling_is_not_Rect2",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: PoolVector2Array",
"context": "Then it passes",
"expected": "Null is not builtin: PoolVector2Array",
"success": true
} ],
"context": "when calling asserts.is_not_PoolVector2Array(null)",
"fullname": "test_when_calling_is_not_PoolVector2Array",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: int",
"context": "Then it passes",
"expected": "Null is not builtin: int",
"success": true
} ],
"context": "when calling asserts.is_not_int(null)",
"fullname": "test_when_calling_is_not_int",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: PoolIntArray",
"context": "Then it passes",
"expected": "Null is not builtin: PoolIntArray",
"success": true
} ],
"context": "when calling asserts.is_not_PoolIntArray(null)",
"fullname": "test_when_calling_is_not_PoolIntArray",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: NodePath",
"context": "Then it passes",
"expected": "Null is not builtin: NodePath",
"success": true
} ],
"context": "when calling asserts.is_not_NodePath(null)",
"fullname": "test_when_calling_is_not_NodePath",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Plane",
"context": "Then it passes",
"expected": "Null is not builtin: Plane",
"success": true
} ],
"context": "when calling asserts.is_not_Plane(null)",
"fullname": "test_when_calling_is_not_Plane",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: PoolVector3Array",
"context": "Then it passes",
"expected": "Null is not builtin: PoolVector3Array",
"success": true
} ],
"context": "when calling asserts.is_not_PoolVector3Array(null)",
"fullname": "test_when_calling_is_not_PoolVector3Array",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Transform",
"context": "Then it passes",
"expected": "Null is not builtin: Transform",
"success": true
} ],
"context": "when calling asserts.is_not_Transform(null)",
"fullname": "test_when_calling_is_not_Transform",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Transform2D",
"context": "Then it passes",
"expected": "Null is not builtin: Transform2D",
"success": true
} ],
"context": "when calling asserts.is_not_Transform2D(null)",
"fullname": "test_when_calling_is_not_Transform2D",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: bool",
"context": "Then it passes",
"expected": "Null is not builtin: bool",
"success": true
} ],
"context": "when calling asserts.is_not_bool(null)",
"fullname": "test_when_calling_is_not_bool",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: PoolColorArray",
"context": "Then it passes",
"expected": "Null is not builtin: PoolColorArray",
"success": true
} ],
"context": "when calling asserts.is_not_PoolColorArray(null)",
"fullname": "test_when_calling_is_not_PoolColorArray",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: PoolRealArray",
"context": "Then it passes",
"expected": "Null is not builtin: PoolRealArray",
"success": true
} ],
"context": "when calling asserts.is_not_PoolRealArray(null)",
"fullname": "test_when_calling_is_not_PoolRealArray",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: PoolStringArray",
"context": "Then it passes",
"expected": "Null is not builtin: PoolStringArray",
"success": true
} ],
"context": "when calling asserts.is_not_PoolStringArray(null)",
"fullname": "test_when_calling_is_not_PoolStringArray",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Quat",
"context": "Then it passes",
"expected": "Null is not builtin: Quat",
"success": true
} ],
"context": "when calling asserts.is_not_Quat(null)",
"fullname": "test_when_calling_is_not_Quat",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Dictionary",
"context": "Then it passes",
"expected": "Null is not builtin: Dictionary",
"success": true
} ],
"context": "when calling asserts.is_not_Dictionary(null)",
"fullname": "test_when_calling_is_not_Dictionary",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Vector3",
"context": "Then it passes",
"expected": "Null is not builtin: Vector3",
"success": true
} ],
"context": "when calling asserts.is_not_Vector3(null)",
"fullname": "test_when_calling_is_not_Vector3",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: PoolByteArray",
"context": "Then it passes",
"expected": "Null is not builtin: PoolByteArray",
"success": true
} ],
"context": "when calling asserts.is_not_PoolByteArray(null)",
"fullname": "test_when_calling_is_not_PoolByteArray",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: float",
"context": "Then it passes",
"expected": "Null is not builtin: float",
"success": true
} ],
"context": "when calling asserts.is_not_float(null)",
"fullname": "test_when_calling_is_not_float",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: String",
"context": "Then it passes",
"expected": "Null is not builtin: String",
"success": true
} ],
"context": "when calling asserts.is_not_String(null)",
"fullname": "test_when_calling_is_not_String",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 26,
"path": "res://tests/unit/is_not_instance.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/is_not_instance.test.gd",
"tags": [  ],
"test": ExtResource( 2 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 26
}, {
"context": "Given a Null Assertion",
"methods": [ {
"assertions": [ {
"actual": "|null| Null == null",
"context": "Then it passes",
"expected": "|null| Null == null",
"success": true
} ],
"context": "When calling asserts.is_null(null)",
"fullname": "test_when_calling_null_is_null",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|Object| [Node:7698] != null",
"context": "Then it passes",
"expected": "|Object| [Node:7698] != null",
"success": true
} ],
"context": "When calling Node is not null",
"fullname": "test_when_calling_node_is_not_null",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|Object| [Deleted Object] == null",
"context": "A Freed Node is null in Engine 3.2.2 or greater",
"expected": "|Object| [Deleted Object] == null",
"success": true
} ],
"context": "When calling freed object is null",
"fullname": "test_when_calling_freed_object_is_not_null",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 3,
"path": "res://tests/unit/null.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/null.test.gd",
"tags": [  ],
"test": ExtResource( 12 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 3
}, {
"context": "Given A Range Assertion",
"methods": [ {
"assertions": [ {
"actual": "10 is not in range(0, 10)",
"context": "Then it passes",
"expected": "10 is not in range(0, 10)",
"success": true
} ],
"context": "When calling is (10) not in range (in range(0, 10)",
"fullname": "test_when_calling_is_not_in_range",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "0 is in range(0, 10)",
"context": "Then it passes",
"expected": "0 is in range(0, 10)",
"success": true
} ],
"context": "When calling is (0) in range(0, 10)",
"fullname": "test_when_calling_is_in_range",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 2,
"path": "res://tests/unit/range.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/range.test.gd",
"tags": [  ],
"test": ExtResource( 15 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 2
}, {
"context": "Given the Addition Operator",
"methods": [ {
"assertions": [ {
"actual": "|int| 4 is equal to |int| 4",
"context": "",
"expected": "|int| 4 is equal to |int| 4",
"success": true
} ],
"context": "When we add 2 to 2 we get 4",
"fullname": "test_add",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 8 is equal to |int| 8",
"context": "",
"expected": "|int| 8 is equal to |int| 8",
"success": true
} ],
"context": "When we add 5 to 3 we get 8",
"fullname": "test_add",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 13 is equal to |int| 13",
"context": "",
"expected": "|int| 13 is equal to |int| 13",
"success": true
} ],
"context": "When we add 7 to 6 we get 13",
"fullname": "test_add",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 0 is equal to |int| 0",
"context": "",
"expected": "|int| 0 is equal to |int| 0",
"success": true
} ],
"context": "When we subtract 2 from 2 we get 0",
"fullname": "test_subtract",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 2 is equal to |int| 2",
"context": "",
"expected": "|int| 2 is equal to |int| 2",
"success": true
} ],
"context": "When we subtract 5 from 3 we get 2",
"fullname": "test_subtract",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 1 is equal to |int| 1",
"context": "",
"expected": "|int| 1 is equal to |int| 1",
"success": true
} ],
"context": "When we subtract 7 from 6 we get 1",
"fullname": "test_subtract",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 6,
"path": "res://tests/unit/parameters.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/parameters.test.gd",
"tags": [  ],
"test": ExtResource( 16 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 6
}, {
"context": "Given an Object Assertion",
"methods": [ {
"assertions": [ {
"actual": "[Node:7711] is not freed",
"context": "Then it passes",
"expected": "[Node:7711] is not freed",
"success": true
} ],
"context": "When calling asserts.is_not_freed(unfreed_object)",
"fullname": "test_when_calling_unfreed_object_is_not_freed",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is freed from memory",
"context": "Then it passes",
"expected": "Null is freed from memory",
"success": true
} ],
"context": "When calling asserts.is_freed(freed_object",
"fullname": "test_when_calling_freed_object_is_freed",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:7694] does not have meta: bad_meta",
"context": "Then it passes",
"expected": "[Node:7694] does not have meta: bad_meta",
"success": true
} ],
"context": "When calling asserts.object_does_not_have_meta()",
"fullname": "test_when_calling_does_not_have_meta",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:7694] has meta: dummy",
"context": "Then it passes",
"expected": "[Node:7694] has meta: dummy",
"success": true
}, {
"actual": "[Node:7694] has meta: dummy",
"context": "Then it passes",
"expected": "[Node:7694] has meta: dummy",
"success": true
} ],
"context": "When calling asserts.object_has_meta() after adding metadata",
"fullname": "test_when_calling_has_meta_after_adding_metadata",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "[Node:7725] is queued for deletion",
"context": "Then it passes",
"expected": "[Node:7725] is queued for deletion",
"success": true
} ],
"context": "When calling asserts.object_is_queued for deletion after calling queue_free",
"fullname": "test_when_calling_obj_is_queued_for_deletion_after_calling_queue_free",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:7694].builtin_dummy is connected to [Node:7694].title",
"context": "Then it passes",
"expected": "[Node:7694].builtin_dummy is connected to [Node:7694].title",
"success": true
} ],
"context": "When calling asserts object is connected with a valid connection",
"fullname": "test_when_calling_obj_is_connected_with_a_real_connection",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:7694].builtin_dummy is not connected to [Node:7694].title",
"context": "Then it passes",
"expected": "[Node:7694].builtin_dummy is not connected to [Node:7694].title",
"success": true
} ],
"context": "When calling asserts object is not connected with an invalid connection",
"fullname": "test_when_calling_obj_is_not_connected_with_an_invalid_connection",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:7732] is blocking signals",
"context": "Then it passes",
"expected": "[Node:7732] is blocking signals",
"success": true
} ],
"context": "When calling is blocking signals while blocking signals",
"fullname": "test_is_blocking_signals",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:7734] is not blocking signals",
"context": "Then it passes",
"expected": "[Node:7734] is not blocking signals",
"success": true
} ],
"context": "When calling is not blocking signals while not blocking signals",
"fullname": "test_is_not_blocking_signals",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:7694] does not have meta: confusing",
"context": "Then it passes",
"expected": "[Node:7694] does not have meta: confusing",
"success": true
} ],
"context": "When calling asserts.object_has_meta with real key but null val",
"fullname": "test_when_calling_does_not_have_meta_real_key_null_value_pair",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:7694] has user signal: dummy_signal",
"context": "Then it passes",
"expected": "[Node:7694] has user signal: dummy_signal",
"success": true
} ],
"context": "When calling obj_has_user_signal after adding a signal",
"fullname": "test_when_calling_has_user_signal_after_adding_a_signal",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:7694] does not have user signal: false_signal",
"context": "Then it passes",
"expected": "[Node:7694] does not have user signal: false_signal",
"success": true
} ],
"context": "When calling obj_does_not_have_user_signal with fake signal",
"fullname": "test_when_calling_does_not_have_user_signal",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:7694] does not have user signal: builtin_dummy",
"context": "Then it passes",
"expected": "[Node:7694] does not have user signal: builtin_dummy",
"success": true
} ],
"context": "When calling does not have user signal with class signal",
"fullname": "test_when_calling_does_not_have_user_signal_with_class_signal_constant",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:7694] has method: title",
"context": "Then it passes",
"expected": "[Node:7694] has method: title",
"success": true
} ],
"context": "When calling has_method('title')",
"fullname": "test_when_calling_has_method_title",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:7741] is not queued for deletion",
"context": "Then it passes",
"expected": "[Node:7741] is not queued for deletion",
"success": true
} ],
"context": "When calling asserts.object_is_not_for_queued_deletion after not calling queue free()",
"fullname": "test_when_calling_obj_is_not_for_queued_deletion_after_not_calling_queue_free",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 15,
"path": "res://tests/unit/object.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/object.test.gd",
"tags": [  ],
"test": ExtResource( 7 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 15
}, {
"context": "Dummy Passing Test",
"methods": [ {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Passing!",
"expected": "|bool| True == true",
"success": true
} ],
"context": "This method passes",
"fullname": "test_this_method_passes",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 1,
"path": "res://tests/unit/suite.test.gd.DummyOne",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/suite.test.gd.DummyOne",
"tags": [  ],
"test": SubResource( 21 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 1
}, {
"context": "Dummy Test 2",
"methods": [ {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Passing!",
"expected": "|bool| True == true",
"success": true
} ],
"context": "This method passes",
"fullname": "test_this_method_passes",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 1,
"path": "res://tests/unit/suite.test.gd.DummyTwo",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/suite.test.gd.DummyTwo",
"tags": [  ],
"test": SubResource( 22 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 1
}, {
"context": "Given a String Assertion",
"methods": [ {
"assertions": [ {
"actual": "lorem impsum ends with impsum",
"context": "Then it passes",
"expected": "lorem impsum ends with impsum",
"success": true
} ],
"context": "When calling asserts.string_ends_with('impsum', 'lorem impsum')",
"fullname": "test_when_calling_string_ends_with",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "impsum does not end with lorem",
"context": "Then it passes",
"expected": "impsum does not end with lorem",
"success": true
} ],
"context": "When calling asserts.string_does_not_end_with('lorem', 'impsum')",
"fullname": "test_when_calling_string_does_not_end_with",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "lorem impsum begins with lorem",
"context": "Then it passes",
"expected": "lorem impsum begins with lorem",
"success": true
} ],
"context": "When calling asserts.string_begins_with('lorem', 'lorem impsum')",
"fullname": "test_when_calling_string_begins_with",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "impsum does not contain beem im",
"context": "Then it passes",
"expected": "impsum does not contain beem im",
"success": true
} ],
"context": "When calling asserts.string_does_not_contain('em im', 'impsum')",
"fullname": "test_when_calling_string_does_not_contain",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "impsum does not begin with bleh lorem",
"context": "Then it passes",
"expected": "impsum does not begin with bleh lorem",
"success": true
} ],
"context": "When calling asserts.string_does_not_begin_with('lorem', 'impsum')",
"fullname": "test_when_calling_string_does_not_begin_with",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "lorem impsum contains em im",
"context": "Then it passes",
"expected": "lorem impsum contains em im",
"success": true
} ],
"context": "When calling asserts.string_contains('em im', 'lorem impsum')",
"fullname": "test_when_calling_string_contains",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 6,
"path": "res://tests/unit/string.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/string.test.gd",
"tags": [  ],
"test": ExtResource( 9 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 6
}, {
"context": "Given a Test Script",
"methods": [ {
"assertions": [ {
"actual": "|bool| True == true",
"context": "if the test didn't break this works",
"expected": "|bool| True == true",
"success": true
} ],
"context": " we can omit describe",
"fullname": "test_we_can_omit_describe",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 10 is greater than |int| 1",
"context": "We get an array of multiple values back",
"expected": "|int| 10 is greater than |int| 1",
"success": true
}, {
"actual": "|int| 0 is not equal to |int| 9",
"context": "With different values",
"expected": "|int| 0 != |int| 9",
"success": true
}, {
"actual": "|int| 10 is greater than |int| 1",
"context": "And we can track multiple properties",
"expected": "|int| 10 is greater than |int| 1",
"success": true
} ],
"context": "When we record properties",
"fullname": "test_we_can_record_properties",
"passed": 3,
"success": true,
"time": 0.0,
"total": 3
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|int| 2 is equal to |int| 2",
"context": "",
"expected": "|int| 2 is equal to |int| 2",
"success": true
} ],
"context": " when we omit context we can see expected and got under method",
"fullname": "test_when_we_omit_context_we_can_see_expected_and_got_under_method",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
} ],
"passed": 3,
"path": "res://tests/unit/test.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/test.test.gd",
"tags": [  ],
"test": ExtResource( 19 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 3
}, {
"context": "Given a Signal Watcher",
"methods": [ {
"assertions": [ {
"actual": "signal: example was emitted from [Node:7752]",
"context": "Then it captures the emitted signal",
"expected": "signal: example was emitted from [Node:7752]",
"success": true
} ],
"context": "When we watch and emit a signal",
"fullname": "test_When_we_watch_and_emit_a_signal",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Signal: example was emitted from [Node:7752] with arguments: [1, 20, 5]",
"context": "Then it captures any arguments that where passed when the signal was emitted",
"expected": "Signal: example was emitted from [Node:7752] with arguments: [1, 20, 5]",
"success": true
} ],
"context": "When we watch a signal from an object with no bound variables",
"fullname": "test_When_we_watch_a_signal_from_an_object_with_no_bound_variables",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Signal: example was not emitted from [Node:7752]",
"context": "Then it does not capture the non-emitted signal",
"expected": "Signal: example was not emitted from [Node:7752]",
"success": true
} ],
"context": "When we watch and do not emit a signal",
"fullname": "test_When_we_watch_and_do_not_emit_a_signal",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "signal: multiple was emitted from [Node:7752] 2",
"context": "Then we can track how many times we emitted it",
"expected": "signal: multiple was emitted from [Node:7752] 2",
"success": true
} ],
"context": "When we watch and signal and emit it multiple times",
"fullname": "test_When_we_watch_a_signal_and_emit_it_multiple_times",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 4,
"path": "res://tests/unit/watcher.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/watcher.test.gd",
"tags": [  ],
"test": ExtResource( 17 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 4
}, {
"context": "Given a Yield",
"methods": [ {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then we set var a to true",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then we set var b to true",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we yield in start twice",
"fullname": "test_When_we_yield_in_start",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then we set var c to true",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then we set var d to true",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we yield in pre thrice",
"fullname": "test_When_we_yield_in_pre",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then the yielder is unpaused",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then the timeout signal of the yielder is connected",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then our signal is connected to the yielder",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we call until signal",
"fullname": "test_When_we_call_until_signal",
"passed": 3,
"success": true,
"time": 0.0,
"total": 3
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then we set var e to true",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then we set var f to true",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we yield twice in execute",
"fullname": "test_When_we_yield_in_execute",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then the yielder is paused",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When a signal being yielded on is emitted",
"fullname": "test_When_a_signal_being_yielded_on_is_emitted_the_yielder_is_stopped",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then the yielder is paused",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then the timeout signal of the yielder is disconnected",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then our signal to the yielder is disconnected",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When the yielder heres our signal",
"fullname": "test_When_the_yielder_hears_our_signal",
"passed": 3,
"success": true,
"time": 0.0,
"total": 3
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then the timeout signal is disconnected",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then the signal-signal is disconnected",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When it is finished",
"fullname": "test_When_yielder_is_finished_signals_are_disconnected",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "[100, Null, Null, Null, Null, Null] is builtin: Array",
"context": "Then we get an array",
"expected": "[100, Null, Null, Null, Null, Null] is builtin: Array",
"success": true
}, {
"actual": "|int| 6 is equal to |int| 6",
"context": "Of size 6",
"expected": "|int| 6 is equal to |int| 6",
"success": true
}, {
"actual": "|int| 100 is equal to |int| 100",
"context": "Where element 0 is 100",
"expected": "|int| 100 is equal to |int| 100",
"success": true
} ],
"context": "When yield(self.yield_value()) returns",
"fullname": "test_When_we_yield_we_get_the_return_value",
"passed": 3,
"success": true,
"time": 0.0,
"total": 3
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then yielder is unpaused",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "The timeout signal of the yielder is connected",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we call until_timeout (with 1.0)",
"fullname": "test_When_we_call_until_timeout",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then yielder is not active",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When asserting against a test",
"fullname": "test_Yielder_is_not_active_when_asserting",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then the yielder is paused",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "The timeout signal of the yielder is not connected",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When the yielder times out on until_timeout(0.1)",
"fullname": "test_When_the_yielder_times_out",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
} ],
"passed": 11,
"path": "res://tests/unit/yield.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/yield.test.gd",
"tags": [  ],
"test": ExtResource( 18 ),
"yield_time": 1.9
},
"success": true,
"time_taken": 0.0,
"total": 11
}, {
"context": "Given a Yield",
"methods": [ {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then we set var a to true",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then we set var b to true",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we yield in start twice",
"fullname": "test_When_we_yield_in_start",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then we set var c to true",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then we set var d to true",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we yield in pre thrice",
"fullname": "test_When_we_yield_in_pre",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then the yielder is unpaused",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then the timeout signal of the yielder is connected",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then our signal is connected to the yielder",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we call until signal",
"fullname": "test_When_we_call_until_signal",
"passed": 3,
"success": true,
"time": 0.0,
"total": 3
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then we set var e to true",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then we set var f to true",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we yield twice in execute",
"fullname": "test_When_we_yield_in_execute",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then the yielder is paused",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When a signal being yielded on is emitted",
"fullname": "test_When_a_signal_being_yielded_on_is_emitted_the_yielder_is_stopped",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then the yielder is paused",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then the timeout signal of the yielder is disconnected",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then our signal to the yielder is disconnected",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When the yielder heres our signal",
"fullname": "test_When_the_yielder_hears_our_signal",
"passed": 3,
"success": true,
"time": 0.0,
"total": 3
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then the timeout signal is disconnected",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then the signal-signal is disconnected",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When it is finished",
"fullname": "test_When_yielder_is_finished_signals_are_disconnected",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "[100, Null, Null, Null, Null, Null] is builtin: Array",
"context": "Then we get an array",
"expected": "[100, Null, Null, Null, Null, Null] is builtin: Array",
"success": true
}, {
"actual": "|int| 6 is equal to |int| 6",
"context": "Of size 6",
"expected": "|int| 6 is equal to |int| 6",
"success": true
}, {
"actual": "|int| 100 is equal to |int| 100",
"context": "Where element 0 is 100",
"expected": "|int| 100 is equal to |int| 100",
"success": true
} ],
"context": "When yield(self.yield_value()) returns",
"fullname": "test_When_we_yield_we_get_the_return_value",
"passed": 3,
"success": true,
"time": 0.0,
"total": 3
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then yielder is unpaused",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "The timeout signal of the yielder is connected",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we call until_timeout (with 1.0)",
"fullname": "test_When_we_call_until_timeout",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then yielder is not active",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When asserting against a test",
"fullname": "test_Yielder_is_not_active_when_asserting",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then the yielder is paused",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "The timeout signal of the yielder is not connected",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When the yielder times out on until_timeout(0.1)",
"fullname": "test_When_the_yielder_times_out",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
} ],
"passed": 11,
"path": "res://tests/unit/yield.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/yield.test.gd",
"tags": [  ],
"test": ExtResource( 18 ),
"yield_time": 1.9
},
"success": true,
"time_taken": 0.0,
"total": 11
}, {
"context": "Given a Yield",
"methods": [ {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then we set var a to true",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then we set var b to true",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we yield in start twice",
"fullname": "test_When_we_yield_in_start",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then we set var c to true",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then we set var d to true",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we yield in pre thrice",
"fullname": "test_When_we_yield_in_pre",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then the yielder is unpaused",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then the timeout signal of the yielder is connected",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then our signal is connected to the yielder",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we call until signal",
"fullname": "test_When_we_call_until_signal",
"passed": 3,
"success": true,
"time": 0.0,
"total": 3
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then we set var e to true",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then we set var f to true",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we yield twice in execute",
"fullname": "test_When_we_yield_in_execute",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then the yielder is paused",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When a signal being yielded on is emitted",
"fullname": "test_When_a_signal_being_yielded_on_is_emitted_the_yielder_is_stopped",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then the yielder is paused",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then the timeout signal of the yielder is disconnected",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then our signal to the yielder is disconnected",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When the yielder heres our signal",
"fullname": "test_When_the_yielder_hears_our_signal",
"passed": 3,
"success": true,
"time": 0.0,
"total": 3
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then the timeout signal is disconnected",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then the signal-signal is disconnected",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When it is finished",
"fullname": "test_When_yielder_is_finished_signals_are_disconnected",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "[100, Null, Null, Null, Null, Null] is builtin: Array",
"context": "Then we get an array",
"expected": "[100, Null, Null, Null, Null, Null] is builtin: Array",
"success": true
}, {
"actual": "|int| 6 is equal to |int| 6",
"context": "Of size 6",
"expected": "|int| 6 is equal to |int| 6",
"success": true
}, {
"actual": "|int| 100 is equal to |int| 100",
"context": "Where element 0 is 100",
"expected": "|int| 100 is equal to |int| 100",
"success": true
} ],
"context": "When yield(self.yield_value()) returns",
"fullname": "test_When_we_yield_we_get_the_return_value",
"passed": 3,
"success": true,
"time": 0.0,
"total": 3
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then yielder is unpaused",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "The timeout signal of the yielder is connected",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we call until_timeout (with 1.0)",
"fullname": "test_When_we_call_until_timeout",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then yielder is not active",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When asserting against a test",
"fullname": "test_Yielder_is_not_active_when_asserting",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then the yielder is paused",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "The timeout signal of the yielder is not connected",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When the yielder times out on until_timeout(0.1)",
"fullname": "test_When_the_yielder_times_out",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
} ],
"passed": 11,
"path": "res://tests/unit/yield.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/yield.test.gd",
"tags": [  ],
"test": ExtResource( 18 ),
"yield_time": 1.9
},
"success": true,
"time_taken": 0.0,
"total": 11
}, {
"context": "Given a Yield",
"methods": [ {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then we set var a to true",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then we set var b to true",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we yield in start twice",
"fullname": "test_When_we_yield_in_start",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then we set var c to true",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then we set var d to true",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we yield in pre thrice",
"fullname": "test_When_we_yield_in_pre",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then the yielder is unpaused",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then the timeout signal of the yielder is connected",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then our signal is connected to the yielder",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we call until signal",
"fullname": "test_When_we_call_until_signal",
"passed": 3,
"success": true,
"time": 0.0,
"total": 3
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then we set var e to true",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then we set var f to true",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we yield twice in execute",
"fullname": "test_When_we_yield_in_execute",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then the yielder is paused",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When a signal being yielded on is emitted",
"fullname": "test_When_a_signal_being_yielded_on_is_emitted_the_yielder_is_stopped",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then the yielder is paused",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then the timeout signal of the yielder is disconnected",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then our signal to the yielder is disconnected",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When the yielder heres our signal",
"fullname": "test_When_the_yielder_hears_our_signal",
"passed": 3,
"success": true,
"time": 0.0,
"total": 3
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then the timeout signal is disconnected",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then the signal-signal is disconnected",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When it is finished",
"fullname": "test_When_yielder_is_finished_signals_are_disconnected",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "[100, Null, Null, Null, Null, Null] is builtin: Array",
"context": "Then we get an array",
"expected": "[100, Null, Null, Null, Null, Null] is builtin: Array",
"success": true
}, {
"actual": "|int| 6 is equal to |int| 6",
"context": "Of size 6",
"expected": "|int| 6 is equal to |int| 6",
"success": true
}, {
"actual": "|int| 100 is equal to |int| 100",
"context": "Where element 0 is 100",
"expected": "|int| 100 is equal to |int| 100",
"success": true
} ],
"context": "When yield(self.yield_value()) returns",
"fullname": "test_When_we_yield_we_get_the_return_value",
"passed": 3,
"success": true,
"time": 0.0,
"total": 3
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then yielder is unpaused",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "The timeout signal of the yielder is connected",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we call until_timeout (with 1.0)",
"fullname": "test_When_we_call_until_timeout",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then yielder is not active",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When asserting against a test",
"fullname": "test_Yielder_is_not_active_when_asserting",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then the yielder is paused",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "The timeout signal of the yielder is not connected",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When the yielder times out on until_timeout(0.1)",
"fullname": "test_When_the_yielder_times_out",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
} ],
"passed": 11,
"path": "res://tests/unit/yield.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/yield.test.gd",
"tags": [  ],
"test": ExtResource( 18 ),
"yield_time": 1.9
},
"success": true,
"time_taken": 0.0,
"total": 11
}, {
"context": "Given a Yield",
"methods": [ {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then we set var a to true",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then we set var b to true",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we yield in start twice",
"fullname": "test_When_we_yield_in_start",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then we set var c to true",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then we set var d to true",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we yield in pre thrice",
"fullname": "test_When_we_yield_in_pre",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then the yielder is unpaused",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then the timeout signal of the yielder is connected",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then our signal is connected to the yielder",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we call until signal",
"fullname": "test_When_we_call_until_signal",
"passed": 3,
"success": true,
"time": 0.0,
"total": 3
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then we set var e to true",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then we set var f to true",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we yield twice in execute",
"fullname": "test_When_we_yield_in_execute",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then the yielder is paused",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When a signal being yielded on is emitted",
"fullname": "test_When_a_signal_being_yielded_on_is_emitted_the_yielder_is_stopped",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then the yielder is paused",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then the timeout signal of the yielder is disconnected",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then our signal to the yielder is disconnected",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When the yielder heres our signal",
"fullname": "test_When_the_yielder_hears_our_signal",
"passed": 3,
"success": true,
"time": 0.0,
"total": 3
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then the timeout signal is disconnected",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then the signal-signal is disconnected",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When it is finished",
"fullname": "test_When_yielder_is_finished_signals_are_disconnected",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "[100, Null, Null, Null, Null, Null] is builtin: Array",
"context": "Then we get an array",
"expected": "[100, Null, Null, Null, Null, Null] is builtin: Array",
"success": true
}, {
"actual": "|int| 6 is equal to |int| 6",
"context": "Of size 6",
"expected": "|int| 6 is equal to |int| 6",
"success": true
}, {
"actual": "|int| 100 is equal to |int| 100",
"context": "Where element 0 is 100",
"expected": "|int| 100 is equal to |int| 100",
"success": true
} ],
"context": "When yield(self.yield_value()) returns",
"fullname": "test_When_we_yield_we_get_the_return_value",
"passed": 3,
"success": true,
"time": 0.0,
"total": 3
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then yielder is unpaused",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "The timeout signal of the yielder is connected",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we call until_timeout (with 1.0)",
"fullname": "test_When_we_call_until_timeout",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then yielder is not active",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When asserting against a test",
"fullname": "test_Yielder_is_not_active_when_asserting",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then the yielder is paused",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "The timeout signal of the yielder is not connected",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When the yielder times out on until_timeout(0.1)",
"fullname": "test_When_the_yielder_times_out",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
} ],
"passed": 11,
"path": "res://tests/unit/yield.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/yield.test.gd",
"tags": [  ],
"test": ExtResource( 18 ),
"yield_time": 1.9
},
"success": true,
"time_taken": 0.0,
"total": 11
} ],
1611518257: [  ],
1611518304: [ {
"context": "Given a Boolean Assertion",
"methods": [ {
"assertions": [ {
"actual": "|bool| False == false",
"context": "Then it passes",
"expected": "|bool| False == false",
"success": true
} ],
"context": "When calling asserts.is_false(false)",
"fullname": "test_when_calling_asserts_is_false",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then it passes",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When calling asserts.is_true(true)",
"fullname": "test_when_calling_asserts_is_true",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| True != false",
"context": "",
"expected": "|bool| True == false",
"success": false
} ],
"context": " intentional failure",
"fullname": "test_intentional_failure",
"passed": 0,
"success": false,
"time": 0.0,
"total": 1
} ],
"passed": 2,
"path": "res://tests/unit/boolean.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/boolean.test.gd",
"tags": [  ],
"test": ExtResource( 11 ),
"yield_time": 0.0
},
"success": false,
"time_taken": 0.0,
"total": 3
} ],
1611518314: [  ],
1611518361: [  ],
1611518395: [  ],
1611518435: [  ],
1611518533: [ {
"context": "Given a Boolean Assertion",
"methods": [ {
"assertions": [ {
"actual": "|bool| False == false",
"context": "Then it passes",
"expected": "|bool| False == false",
"success": true
} ],
"context": "When calling asserts.is_false(false)",
"fullname": "test_when_calling_asserts_is_false",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then it passes",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When calling asserts.is_true(true)",
"fullname": "test_when_calling_asserts_is_true",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| True != false",
"context": "",
"expected": "|bool| True == false",
"success": false
} ],
"context": " intentional failure",
"fullname": "test_intentional_failure",
"passed": 0,
"success": false,
"time": 0.0,
"total": 1
} ],
"passed": 2,
"path": "res://tests/unit/boolean.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/boolean.test.gd",
"tags": [  ],
"test": ExtResource( 11 ),
"yield_time": 0.0
},
"success": false,
"time_taken": 0.0,
"total": 3
} ],
1611518576: [  ],
1611518592: [  ],
1611518613: [  ],
1611518837: [  ],
1611518867: [  ],
1611525258: [ {
"context": "Given a Boolean Assertion",
"methods": [ {
"assertions": [ {
"actual": "|bool| True != false",
"context": "",
"expected": "|bool| True == false",
"success": false
} ],
"context": " intentional failure",
"fullname": "test_intentional_failure",
"passed": 0,
"success": false,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then it passes",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When calling asserts.is_true(true)",
"fullname": "test_when_calling_asserts_is_true",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| False == false",
"context": "Then it passes",
"expected": "|bool| False == false",
"success": true
} ],
"context": "When calling asserts.is_false(false)",
"fullname": "test_when_calling_asserts_is_false",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 2,
"path": "res://tests/integration/boolean.test.gd",
"source": {
"containers": [ "res://tests/integration", "res://tests" ],
"method": "",
"path": "res://tests/integration/boolean.test.gd",
"tags": [  ],
"test": ExtResource( 20 ),
"yield_time": 0.0
},
"success": false,
"time_taken": 0.0,
"total": 3
}, {
"context": "Default Args",
"methods": [ {
"assertions": [ {
"actual": "|bool| True == true",
"context": "If this method can be reached then we have doubled a script with default argument(s) properly!",
"expected": "|bool| True == true",
"success": true
} ],
"context": " default arguments of interpolate property",
"fullname": "test_default_arguments_of_interpolate_property",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 1,
"path": "res://tests/integration/default_args.test.gd",
"source": {
"containers": [ "res://tests/integration", "res://tests" ],
"method": "",
"path": "res://tests/integration/default_args.test.gd",
"tags": [  ],
"test": ExtResource( 10 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 1
}, {
"context": "Given is_on_floor",
"methods": [ {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then it can be stubbed",
"expected": "|bool| True == true",
"success": true
} ],
"context": "From a user-defined script",
"fullname": "test_stubbing_is_on_floor_method_from_user_defined_class",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then it can be stubbed",
"expected": "|bool| True == true",
"success": true
} ],
"context": "From a built-in KinematicBody2D2",
"fullname": "test_stubbing_is_on_floor_method_from_builtin_class2",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then it can be stubbed",
"expected": "|bool| True == true",
"success": true
} ],
"context": "From a child node of a scene without scripts",
"fullname": "test_stubbing_is_on_floor_as_child_node_with_no_script",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 3,
"path": "res://tests/integration/on_floor.test.gd",
"source": {
"containers": [ "res://tests/integration", "res://tests" ],
"method": "",
"path": "res://tests/integration/on_floor.test.gd",
"tags": [  ],
"test": ExtResource( 5 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 3
}, {
"context": "Given a Scene Director",
"methods": [ {
"assertions": [ {
"actual": "|NodePath| A is equal to |NodePath| A",
"context": "We have the correct NodePath Set",
"expected": "|NodePath| A is equal to |NodePath| A",
"success": true
} ],
"context": "When we add it to the tree it runs",
"fullname": "test_When_we_add_it_to_the_tree_it_runs",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 9999 is equal to |int| 9999",
"context": "Then we get the stubbed return value",
"expected": "|int| 9999 is equal to |int| 9999",
"success": true
} ],
"context": "When we call a method from the root node that we stubbed",
"fullname": "test_When_we_call_a_method_from_the_root_node_that_we_stubbed",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|Dictionary| {.:[Reference:1465], A:[Reference:1466], A/B:[Reference:1468], C:[Reference:1467], C/D:[Reference:1469]} is not equal to |Dictionary| {.:[Reference:1479], A:[Reference:1480], A/B:[Reference:1482], C:[Reference:1481], C/D:[Reference:1483]}",
"context": "Then they do not share resources",
"expected": "|Dictionary| {.:[Reference:1465], A:[Reference:1466], A/B:[Reference:1468], C:[Reference:1467], C/D:[Reference:1469]} != |Dictionary| {.:[Reference:1479], A:[Reference:1480], A/B:[Reference:1482], C:[Reference:1481], C/D:[Reference:1483]}",
"success": true
} ],
"context": "When we create two of it for the same scene",
"fullname": "test_When_we_create_two_of_it_for_the_same_scene",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 999 is equal to |int| 999",
"context": "Then we get the stubbed return value",
"expected": "|int| 999 is equal to |int| 999",
"success": true
} ],
"context": "When we call a method from a child node that we stubbed",
"fullname": "test_When_we_call_a_method_from_a_child_node_that_we_stubbed",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 99 is equal to |int| 99",
"context": "Then we get the stubbed return value",
"expected": "|int| 99 is equal to |int| 99",
"success": true
} ],
"context": "When we call a method from a grandchild node that we stubbed",
"fullname": "test_When_we_call_a_method_from_a_grandchild_node_that_we_stubbed",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 5,
"path": "res://tests/integration/scene_director.test.gd",
"source": {
"containers": [ "res://tests/integration", "res://tests" ],
"method": "",
"path": "res://tests/integration/scene_director.test.gd",
"tags": [  ],
"test": ExtResource( 4 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 5
}, {
"context": "Given a Script Director",
"methods": [ {
"assertions": [ {
"actual": "|Dictionary| {_enter_tree:{arguments:, default_arguments:}, _exit_tree:{arguments:, default_arguments:}, _get:{arguments:a, default_arguments:a}, _get_configuration_warning:{arguments:, default_arguments:}, _get_editor_description:{arguments:, default_arguments:}, _get_import_path:{arguments:, default_arguments:}, _get_property_list:{arguments:, default_arguments:}, _init:{arguments:, default_arguments:}, _input:{arguments:a, default_arguments:a}, _notification:{arguments:a, default_arguments:a}, _physics_process:{arguments:a, default_arguments:a}, _process:{arguments:a, default_arguments:a}, _ready:{arguments:, default_arguments:}, _set:{arguments:a, b, default_arguments:a, b}, _set_editor_description:{arguments:a, default_arguments:a}, _set_import_path:{arguments:a, default_arguments:a}, _to_string:{arguments:, default_arguments:}, _unhandled_input:{arguments:a, default_arguments:a}, _unhandled_key_input:{arguments:a, default_arguments:a}, add:{arguments:a, b, default_arguments:a, b}, add_child:{arguments:a, b, default_arguments:a, b = False}, add_child_below_node:{arguments:a, b, c, default_arguments:a, b, c = False}, add_to_group:{arguments:a, b, default_arguments:a, b = False}, add_user_signal:{arguments:a, b, default_arguments:a, b = []}, call:{arguments:a, default_arguments:a}, call_deferred:{arguments:a, default_arguments:a}, callv:{arguments:a, b, default_arguments:a, b}, can_process:{arguments:, default_arguments:}, can_translate_messages:{arguments:, default_arguments:}, connect:{arguments:a, b, c, d, e, default_arguments:a, b, c, d = [], e = 0}, disconnect:{arguments:a, b, c, default_arguments:a, b, c}, divide:{arguments:a, b, default_arguments:a, b}, duplicate:{arguments:a, default_arguments:a = 15}, emit_signal:{arguments:a, default_arguments:a}, find_node:{arguments:a, b, c, default_arguments:a, b = True, c = True}, find_parent:{arguments:a, default_arguments:a}, free:{arguments:, default_arguments:}, get:{arguments:a, default_arguments:a}, get_child:{arguments:a, default_arguments:a}, get_child_count:{arguments:, default_arguments:}, get_children:{arguments:, default_arguments:}, get_class:{arguments:, default_arguments:}, get_custom_multiplayer:{arguments:, default_arguments:}, get_filename:{arguments:, default_arguments:}, get_groups:{arguments:, default_arguments:}, get_incoming_connections:{arguments:, default_arguments:}, get_index:{arguments:, default_arguments:}, get_indexed:{arguments:a, default_arguments:a}, get_instance_id:{arguments:, default_arguments:}, get_meta:{arguments:a, default_arguments:a}, get_meta_list:{arguments:, default_arguments:}, get_method_list:{arguments:, default_arguments:}, get_multiplayer:{arguments:, default_arguments:}, get_name:{arguments:, default_arguments:}, get_network_master:{arguments:, default_arguments:}, get_node:{arguments:a, default_arguments:a}, get_node_and_resource:{arguments:a, default_arguments:a}, get_node_or_null:{arguments:a, default_arguments:a}, get_owner:{arguments:, default_arguments:}, get_parent:{arguments:, default_arguments:}, get_path:{arguments:, default_arguments:}, get_path_to:{arguments:a, default_arguments:a}, get_pause_mode:{arguments:, default_arguments:}, get_physics_process_delta_time:{arguments:, default_arguments:}, get_position_in_parent:{arguments:, default_arguments:}, get_process_delta_time:{arguments:, default_arguments:}, get_process_priority:{arguments:, default_arguments:}, get_property_list:{arguments:, default_arguments:}, get_scene_instance_load_placeholder:{arguments:, default_arguments:}, get_script:{arguments:, default_arguments:}, get_signal_connection_list:{arguments:a, default_arguments:a}, get_signal_list:{arguments:, default_arguments:}, get_tree:{arguments:, default_arguments:}, get_viewport:{arguments:, default_arguments:}, has_meta:{arguments:a, default_arguments:a}, has_method:{arguments:a, default_arguments:a}, has_node:{arguments:a, default_arguments:a}, has_node_and_resource:{arguments:a, default_arguments:a}, has_signal:{arguments:a, default_arguments:a}, has_user_signal:{arguments:a, default_arguments:a}, is_a_parent_of:{arguments:a, default_arguments:a}, is_blocking_signals:{arguments:, default_arguments:}, is_class:{arguments:a, default_arguments:a}, is_connected:{arguments:a, b, c, default_arguments:a, b, c}, is_displayed_folded:{arguments:, default_arguments:}, is_greater_than:{arguments:a, default_arguments:a}, is_in_group:{arguments:a, default_arguments:a}, is_inside_tree:{arguments:, default_arguments:}, is_network_master:{arguments:, default_arguments:}, is_physics_processing:{arguments:, default_arguments:}, is_physics_processing_internal:{arguments:, default_arguments:}, is_processing:{arguments:, default_arguments:}, is_processing_input:{arguments:, default_arguments:}, is_processing_internal:{arguments:, default_arguments:}, is_processing_unhandled_input:{arguments:, default_arguments:}, is_processing_unhandled_key_input:{arguments:, default_arguments:}, is_queued_for_deletion:{arguments:, default_arguments:}, math_fight:{arguments:, default_arguments:}, move_child:{arguments:a, b, default_arguments:a, b}, multiply:{arguments:a, b, default_arguments:a, b}, notification:{arguments:a, b, default_arguments:a, b = False}, pi:{arguments:, default_arguments:}, print_stray_nodes:{arguments:, default_arguments:}, print_tree:{arguments:, default_arguments:}, print_tree_pretty:{arguments:, default_arguments:}, propagate_call:{arguments:a, b, c, default_arguments:a, b = [], c = False}, propagate_notification:{arguments:a, default_arguments:a}, property_list_changed_notify:{arguments:, default_arguments:}, queue_free:{arguments:, default_arguments:}, raise:{arguments:, default_arguments:}, remove_and_skip:{arguments:, default_arguments:}, remove_child:{arguments:a, default_arguments:a}, remove_from_group:{arguments:a, default_arguments:a}, remove_meta:{arguments:a, default_arguments:a}, replace_by:{arguments:a, b, default_arguments:a, b = False}, request_ready:{arguments:, default_arguments:}, rpc:{arguments:a, default_arguments:a}, rpc_config:{arguments:a, b, default_arguments:a, b}, rpc_id:{arguments:a, b, default_arguments:a, b}, rpc_unreliable:{arguments:a, default_arguments:a}, rpc_unreliable_id:{arguments:a, b, default_arguments:a, b}, rset:{arguments:a, b, default_arguments:a, b}, rset_config:{arguments:a, b, default_arguments:a, b}, rset_id:{arguments:a, b, c, default_arguments:a, b, c}, rset_unreliable:{arguments:a, b, default_arguments:a, b}, rset_unreliable_id:{arguments:a, b, c, default_arguments:a, b, c}, set:{arguments:a, b, default_arguments:a, b}, set_block_signals:{arguments:a, default_arguments:a}, set_custom_multiplayer:{arguments:a, default_arguments:a}, set_deferred:{arguments:a, b, default_arguments:a, b}, set_display_folded:{arguments:a, default_arguments:a}, set_filename:{arguments:a, default_arguments:a}, set_indexed:{arguments:a, b, default_arguments:a, b}, set_message_translation:{arguments:a, default_arguments:a}, set_meta:{arguments:a, b, default_arguments:a, b}, set_name:{arguments:a, default_arguments:a}, set_network_master:{arguments:a, b, default_arguments:a, b = True}, set_owner:{arguments:a, default_arguments:a}, set_pause_mode:{arguments:a, default_arguments:a}, set_physics_process:{arguments:a, default_arguments:a}, set_physics_process_internal:{arguments:a, default_arguments:a}, set_process:{arguments:a, default_arguments:a}, set_process_input:{arguments:a, default_arguments:a}, set_process_internal:{arguments:a, default_arguments:a}, set_process_priority:{arguments:a, default_arguments:a}, set_process_unhandled_input:{arguments:a, default_arguments:a}, set_process_unhandled_key_input:{arguments:a, default_arguments:a}, set_scene_instance_load_placeholder:{arguments:a, default_arguments:a}, set_script:{arguments:a, default_arguments:a}, subtract:{arguments:a, b, default_arguments:a, b}, sum:{arguments:a, default_arguments:a}, to_string:{arguments:, default_arguments:}, tr:{arguments:a, default_arguments:a}, update_configuration_warning:{arguments:, default_arguments:}} is not equal to |Dictionary| {_enter_tree:{arguments:, default_arguments:}, _exit_tree:{arguments:, default_arguments:}, _get:{arguments:a, default_arguments:a}, _get_configuration_warning:{arguments:, default_arguments:}, _get_editor_description:{arguments:, default_arguments:}, _get_import_path:{arguments:, default_arguments:}, _get_property_list:{arguments:, default_arguments:}, _init:{arguments:, default_arguments:}, _input:{arguments:a, default_arguments:a}, _notification:{arguments:a, default_arguments:a}, _physics_process:{arguments:a, default_arguments:a}, _process:{arguments:a, default_arguments:a}, _ready:{arguments:, default_arguments:}, _set:{arguments:a, b, default_arguments:a, b}, _set_editor_description:{arguments:a, default_arguments:a}, _set_import_path:{arguments:a, default_arguments:a}, _to_string:{arguments:, default_arguments:}, _unhandled_input:{arguments:a, default_arguments:a}, _unhandled_key_input:{arguments:a, default_arguments:a}, add:{arguments:a, b, default_arguments:a, b}, add_child:{arguments:a, b, default_arguments:a, b = False}, add_child_below_node:{arguments:a, b, c, default_arguments:a, b, c = False}, add_to_group:{arguments:a, b, default_arguments:a, b = False}, add_user_signal:{arguments:a, b, default_arguments:a, b = []}, call:{arguments:a, default_arguments:a}, call_deferred:{arguments:a, default_arguments:a}, callv:{arguments:a, b, default_arguments:a, b}, can_process:{arguments:, default_arguments:}, can_translate_messages:{arguments:, default_arguments:}, connect:{arguments:a, b, c, d, e, default_arguments:a, b, c, d = [], e = 0}, disconnect:{arguments:a, b, c, default_arguments:a, b, c}, divide:{arguments:a, b, default_arguments:a, b}, duplicate:{arguments:a, default_arguments:a = 15}, emit_signal:{arguments:a, default_arguments:a}, find_node:{arguments:a, b, c, default_arguments:a, b = True, c = True}, find_parent:{arguments:a, default_arguments:a}, free:{arguments:, default_arguments:}, get:{arguments:a, default_arguments:a}, get_child:{arguments:a, default_arguments:a}, get_child_count:{arguments:, default_arguments:}, get_children:{arguments:, default_arguments:}, get_class:{arguments:, default_arguments:}, get_custom_multiplayer:{arguments:, default_arguments:}, get_filename:{arguments:, default_arguments:}, get_groups:{arguments:, default_arguments:}, get_incoming_connections:{arguments:, default_arguments:}, get_index:{arguments:, default_arguments:}, get_indexed:{arguments:a, default_arguments:a}, get_instance_id:{arguments:, default_arguments:}, get_meta:{arguments:a, default_arguments:a}, get_meta_list:{arguments:, default_arguments:}, get_method_list:{arguments:, default_arguments:}, get_multiplayer:{arguments:, default_arguments:}, get_name:{arguments:, default_arguments:}, get_network_master:{arguments:, default_arguments:}, get_node:{arguments:a, default_arguments:a}, get_node_and_resource:{arguments:a, default_arguments:a}, get_node_or_null:{arguments:a, default_arguments:a}, get_owner:{arguments:, default_arguments:}, get_parent:{arguments:, default_arguments:}, get_path:{arguments:, default_arguments:}, get_path_to:{arguments:a, default_arguments:a}, get_pause_mode:{arguments:, default_arguments:}, get_physics_process_delta_time:{arguments:, default_arguments:}, get_position_in_parent:{arguments:, default_arguments:}, get_process_delta_time:{arguments:, default_arguments:}, get_process_priority:{arguments:, default_arguments:}, get_property_list:{arguments:, default_arguments:}, get_scene_instance_load_placeholder:{arguments:, default_arguments:}, get_script:{arguments:, default_arguments:}, get_signal_connection_list:{arguments:a, default_arguments:a}, get_signal_list:{arguments:, default_arguments:}, get_tree:{arguments:, default_arguments:}, get_viewport:{arguments:, default_arguments:}, has_meta:{arguments:a, default_arguments:a}, has_method:{arguments:a, default_arguments:a}, has_node:{arguments:a, default_arguments:a}, has_node_and_resource:{arguments:a, default_arguments:a}, has_signal:{arguments:a, default_arguments:a}, has_user_signal:{arguments:a, default_arguments:a}, is_a_parent_of:{arguments:a, default_arguments:a}, is_blocking_signals:{arguments:, default_arguments:}, is_class:{arguments:a, default_arguments:a}, is_connected:{arguments:a, b, c, default_arguments:a, b, c}, is_displayed_folded:{arguments:, default_arguments:}, is_greater_than:{arguments:a, default_arguments:a}, is_in_group:{arguments:a, default_arguments:a}, is_inside_tree:{arguments:, default_arguments:}, is_network_master:{arguments:, default_arguments:}, is_physics_processing:{arguments:, default_arguments:}, is_physics_processing_internal:{arguments:, default_arguments:}, is_processing:{arguments:, default_arguments:}, is_processing_input:{arguments:, default_arguments:}, is_processing_internal:{arguments:, default_arguments:}, is_processing_unhandled_input:{arguments:, default_arguments:}, is_processing_unhandled_key_input:{arguments:, default_arguments:}, is_queued_for_deletion:{arguments:, default_arguments:}, math_fight:{arguments:, default_arguments:}, move_child:{arguments:a, b, default_arguments:a, b}, multiply:{arguments:a, b, default_arguments:a, b}, notification:{arguments:a, b, default_arguments:a, b = False}, pi:{arguments:, default_arguments:}, print_stray_nodes:{arguments:, default_arguments:}, print_tree:{arguments:, default_arguments:}, print_tree_pretty:{arguments:, default_arguments:}, propagate_call:{arguments:a, b, c, default_arguments:a, b = [], c = False}, propagate_notification:{arguments:a, default_arguments:a}, property_list_changed_notify:{arguments:, default_arguments:}, queue_free:{arguments:, default_arguments:}, raise:{arguments:, default_arguments:}, remove_and_skip:{arguments:, default_arguments:}, remove_child:{arguments:a, default_arguments:a}, remove_from_group:{arguments:a, default_arguments:a}, remove_meta:{arguments:a, default_arguments:a}, replace_by:{arguments:a, b, default_arguments:a, b = False}, request_ready:{arguments:, default_arguments:}, rpc:{arguments:a, default_arguments:a}, rpc_config:{arguments:a, b, default_arguments:a, b}, rpc_id:{arguments:a, b, default_arguments:a, b}, rpc_unreliable:{arguments:a, default_arguments:a}, rpc_unreliable_id:{arguments:a, b, default_arguments:a, b}, rset:{arguments:a, b, default_arguments:a, b}, rset_config:{arguments:a, b, default_arguments:a, b}, rset_id:{arguments:a, b, c, default_arguments:a, b, c}, rset_unreliable:{arguments:a, b, default_arguments:a, b}, rset_unreliable_id:{arguments:a, b, c, default_arguments:a, b, c}, set:{arguments:a, b, default_arguments:a, b}, set_block_signals:{arguments:a, default_arguments:a}, set_custom_multiplayer:{arguments:a, default_arguments:a}, set_deferred:{arguments:a, b, default_arguments:a, b}, set_display_folded:{arguments:a, default_arguments:a}, set_filename:{arguments:a, default_arguments:a}, set_indexed:{arguments:a, b, default_arguments:a, b}, set_message_translation:{arguments:a, default_arguments:a}, set_meta:{arguments:a, b, default_arguments:a, b}, set_name:{arguments:a, default_arguments:a}, set_network_master:{arguments:a, b, default_arguments:a, b = True}, set_owner:{arguments:a, default_arguments:a}, set_pause_mode:{arguments:a, default_arguments:a}, set_physics_process:{arguments:a, default_arguments:a}, set_physics_process_internal:{arguments:a, default_arguments:a}, set_process:{arguments:a, default_arguments:a}, set_process_input:{arguments:a, default_arguments:a}, set_process_internal:{arguments:a, default_arguments:a}, set_process_priority:{arguments:a, default_arguments:a}, set_process_unhandled_input:{arguments:a, default_arguments:a}, set_process_unhandled_key_input:{arguments:a, default_arguments:a}, set_scene_instance_load_placeholder:{arguments:a, default_arguments:a}, set_script:{arguments:a, default_arguments:a}, subtract:{arguments:a, b, default_arguments:a, b}, sum:{arguments:a, default_arguments:a}, to_string:{arguments:, default_arguments:}, tr:{arguments:a, default_arguments:a}, update_configuration_warning:{arguments:, default_arguments:}}",
"context": "Then they do not share resources",
"expected": "|Dictionary| {_enter_tree:{arguments:, default_arguments:}, _exit_tree:{arguments:, default_arguments:}, _get:{arguments:a, default_arguments:a}, _get_configuration_warning:{arguments:, default_arguments:}, _get_editor_description:{arguments:, default_arguments:}, _get_import_path:{arguments:, default_arguments:}, _get_property_list:{arguments:, default_arguments:}, _init:{arguments:, default_arguments:}, _input:{arguments:a, default_arguments:a}, _notification:{arguments:a, default_arguments:a}, _physics_process:{arguments:a, default_arguments:a}, _process:{arguments:a, default_arguments:a}, _ready:{arguments:, default_arguments:}, _set:{arguments:a, b, default_arguments:a, b}, _set_editor_description:{arguments:a, default_arguments:a}, _set_import_path:{arguments:a, default_arguments:a}, _to_string:{arguments:, default_arguments:}, _unhandled_input:{arguments:a, default_arguments:a}, _unhandled_key_input:{arguments:a, default_arguments:a}, add:{arguments:a, b, default_arguments:a, b}, add_child:{arguments:a, b, default_arguments:a, b = False}, add_child_below_node:{arguments:a, b, c, default_arguments:a, b, c = False}, add_to_group:{arguments:a, b, default_arguments:a, b = False}, add_user_signal:{arguments:a, b, default_arguments:a, b = []}, call:{arguments:a, default_arguments:a}, call_deferred:{arguments:a, default_arguments:a}, callv:{arguments:a, b, default_arguments:a, b}, can_process:{arguments:, default_arguments:}, can_translate_messages:{arguments:, default_arguments:}, connect:{arguments:a, b, c, d, e, default_arguments:a, b, c, d = [], e = 0}, disconnect:{arguments:a, b, c, default_arguments:a, b, c}, divide:{arguments:a, b, default_arguments:a, b}, duplicate:{arguments:a, default_arguments:a = 15}, emit_signal:{arguments:a, default_arguments:a}, find_node:{arguments:a, b, c, default_arguments:a, b = True, c = True}, find_parent:{arguments:a, default_arguments:a}, free:{arguments:, default_arguments:}, get:{arguments:a, default_arguments:a}, get_child:{arguments:a, default_arguments:a}, get_child_count:{arguments:, default_arguments:}, get_children:{arguments:, default_arguments:}, get_class:{arguments:, default_arguments:}, get_custom_multiplayer:{arguments:, default_arguments:}, get_filename:{arguments:, default_arguments:}, get_groups:{arguments:, default_arguments:}, get_incoming_connections:{arguments:, default_arguments:}, get_index:{arguments:, default_arguments:}, get_indexed:{arguments:a, default_arguments:a}, get_instance_id:{arguments:, default_arguments:}, get_meta:{arguments:a, default_arguments:a}, get_meta_list:{arguments:, default_arguments:}, get_method_list:{arguments:, default_arguments:}, get_multiplayer:{arguments:, default_arguments:}, get_name:{arguments:, default_arguments:}, get_network_master:{arguments:, default_arguments:}, get_node:{arguments:a, default_arguments:a}, get_node_and_resource:{arguments:a, default_arguments:a}, get_node_or_null:{arguments:a, default_arguments:a}, get_owner:{arguments:, default_arguments:}, get_parent:{arguments:, default_arguments:}, get_path:{arguments:, default_arguments:}, get_path_to:{arguments:a, default_arguments:a}, get_pause_mode:{arguments:, default_arguments:}, get_physics_process_delta_time:{arguments:, default_arguments:}, get_position_in_parent:{arguments:, default_arguments:}, get_process_delta_time:{arguments:, default_arguments:}, get_process_priority:{arguments:, default_arguments:}, get_property_list:{arguments:, default_arguments:}, get_scene_instance_load_placeholder:{arguments:, default_arguments:}, get_script:{arguments:, default_arguments:}, get_signal_connection_list:{arguments:a, default_arguments:a}, get_signal_list:{arguments:, default_arguments:}, get_tree:{arguments:, default_arguments:}, get_viewport:{arguments:, default_arguments:}, has_meta:{arguments:a, default_arguments:a}, has_method:{arguments:a, default_arguments:a}, has_node:{arguments:a, default_arguments:a}, has_node_and_resource:{arguments:a, default_arguments:a}, has_signal:{arguments:a, default_arguments:a}, has_user_signal:{arguments:a, default_arguments:a}, is_a_parent_of:{arguments:a, default_arguments:a}, is_blocking_signals:{arguments:, default_arguments:}, is_class:{arguments:a, default_arguments:a}, is_connected:{arguments:a, b, c, default_arguments:a, b, c}, is_displayed_folded:{arguments:, default_arguments:}, is_greater_than:{arguments:a, default_arguments:a}, is_in_group:{arguments:a, default_arguments:a}, is_inside_tree:{arguments:, default_arguments:}, is_network_master:{arguments:, default_arguments:}, is_physics_processing:{arguments:, default_arguments:}, is_physics_processing_internal:{arguments:, default_arguments:}, is_processing:{arguments:, default_arguments:}, is_processing_input:{arguments:, default_arguments:}, is_processing_internal:{arguments:, default_arguments:}, is_processing_unhandled_input:{arguments:, default_arguments:}, is_processing_unhandled_key_input:{arguments:, default_arguments:}, is_queued_for_deletion:{arguments:, default_arguments:}, math_fight:{arguments:, default_arguments:}, move_child:{arguments:a, b, default_arguments:a, b}, multiply:{arguments:a, b, default_arguments:a, b}, notification:{arguments:a, b, default_arguments:a, b = False}, pi:{arguments:, default_arguments:}, print_stray_nodes:{arguments:, default_arguments:}, print_tree:{arguments:, default_arguments:}, print_tree_pretty:{arguments:, default_arguments:}, propagate_call:{arguments:a, b, c, default_arguments:a, b = [], c = False}, propagate_notification:{arguments:a, default_arguments:a}, property_list_changed_notify:{arguments:, default_arguments:}, queue_free:{arguments:, default_arguments:}, raise:{arguments:, default_arguments:}, remove_and_skip:{arguments:, default_arguments:}, remove_child:{arguments:a, default_arguments:a}, remove_from_group:{arguments:a, default_arguments:a}, remove_meta:{arguments:a, default_arguments:a}, replace_by:{arguments:a, b, default_arguments:a, b = False}, request_ready:{arguments:, default_arguments:}, rpc:{arguments:a, default_arguments:a}, rpc_config:{arguments:a, b, default_arguments:a, b}, rpc_id:{arguments:a, b, default_arguments:a, b}, rpc_unreliable:{arguments:a, default_arguments:a}, rpc_unreliable_id:{arguments:a, b, default_arguments:a, b}, rset:{arguments:a, b, default_arguments:a, b}, rset_config:{arguments:a, b, default_arguments:a, b}, rset_id:{arguments:a, b, c, default_arguments:a, b, c}, rset_unreliable:{arguments:a, b, default_arguments:a, b}, rset_unreliable_id:{arguments:a, b, c, default_arguments:a, b, c}, set:{arguments:a, b, default_arguments:a, b}, set_block_signals:{arguments:a, default_arguments:a}, set_custom_multiplayer:{arguments:a, default_arguments:a}, set_deferred:{arguments:a, b, default_arguments:a, b}, set_display_folded:{arguments:a, default_arguments:a}, set_filename:{arguments:a, default_arguments:a}, set_indexed:{arguments:a, b, default_arguments:a, b}, set_message_translation:{arguments:a, default_arguments:a}, set_meta:{arguments:a, b, default_arguments:a, b}, set_name:{arguments:a, default_arguments:a}, set_network_master:{arguments:a, b, default_arguments:a, b = True}, set_owner:{arguments:a, default_arguments:a}, set_pause_mode:{arguments:a, default_arguments:a}, set_physics_process:{arguments:a, default_arguments:a}, set_physics_process_internal:{arguments:a, default_arguments:a}, set_process:{arguments:a, default_arguments:a}, set_process_input:{arguments:a, default_arguments:a}, set_process_internal:{arguments:a, default_arguments:a}, set_process_priority:{arguments:a, default_arguments:a}, set_process_unhandled_input:{arguments:a, default_arguments:a}, set_process_unhandled_key_input:{arguments:a, default_arguments:a}, set_scene_instance_load_placeholder:{arguments:a, default_arguments:a}, set_script:{arguments:a, default_arguments:a}, subtract:{arguments:a, b, default_arguments:a, b}, sum:{arguments:a, default_arguments:a}, to_string:{arguments:, default_arguments:}, tr:{arguments:a, default_arguments:a}, update_configuration_warning:{arguments:, default_arguments:}} != |Dictionary| {_enter_tree:{arguments:, default_arguments:}, _exit_tree:{arguments:, default_arguments:}, _get:{arguments:a, default_arguments:a}, _get_configuration_warning:{arguments:, default_arguments:}, _get_editor_description:{arguments:, default_arguments:}, _get_import_path:{arguments:, default_arguments:}, _get_property_list:{arguments:, default_arguments:}, _init:{arguments:, default_arguments:}, _input:{arguments:a, default_arguments:a}, _notification:{arguments:a, default_arguments:a}, _physics_process:{arguments:a, default_arguments:a}, _process:{arguments:a, default_arguments:a}, _ready:{arguments:, default_arguments:}, _set:{arguments:a, b, default_arguments:a, b}, _set_editor_description:{arguments:a, default_arguments:a}, _set_import_path:{arguments:a, default_arguments:a}, _to_string:{arguments:, default_arguments:}, _unhandled_input:{arguments:a, default_arguments:a}, _unhandled_key_input:{arguments:a, default_arguments:a}, add:{arguments:a, b, default_arguments:a, b}, add_child:{arguments:a, b, default_arguments:a, b = False}, add_child_below_node:{arguments:a, b, c, default_arguments:a, b, c = False}, add_to_group:{arguments:a, b, default_arguments:a, b = False}, add_user_signal:{arguments:a, b, default_arguments:a, b = []}, call:{arguments:a, default_arguments:a}, call_deferred:{arguments:a, default_arguments:a}, callv:{arguments:a, b, default_arguments:a, b}, can_process:{arguments:, default_arguments:}, can_translate_messages:{arguments:, default_arguments:}, connect:{arguments:a, b, c, d, e, default_arguments:a, b, c, d = [], e = 0}, disconnect:{arguments:a, b, c, default_arguments:a, b, c}, divide:{arguments:a, b, default_arguments:a, b}, duplicate:{arguments:a, default_arguments:a = 15}, emit_signal:{arguments:a, default_arguments:a}, find_node:{arguments:a, b, c, default_arguments:a, b = True, c = True}, find_parent:{arguments:a, default_arguments:a}, free:{arguments:, default_arguments:}, get:{arguments:a, default_arguments:a}, get_child:{arguments:a, default_arguments:a}, get_child_count:{arguments:, default_arguments:}, get_children:{arguments:, default_arguments:}, get_class:{arguments:, default_arguments:}, get_custom_multiplayer:{arguments:, default_arguments:}, get_filename:{arguments:, default_arguments:}, get_groups:{arguments:, default_arguments:}, get_incoming_connections:{arguments:, default_arguments:}, get_index:{arguments:, default_arguments:}, get_indexed:{arguments:a, default_arguments:a}, get_instance_id:{arguments:, default_arguments:}, get_meta:{arguments:a, default_arguments:a}, get_meta_list:{arguments:, default_arguments:}, get_method_list:{arguments:, default_arguments:}, get_multiplayer:{arguments:, default_arguments:}, get_name:{arguments:, default_arguments:}, get_network_master:{arguments:, default_arguments:}, get_node:{arguments:a, default_arguments:a}, get_node_and_resource:{arguments:a, default_arguments:a}, get_node_or_null:{arguments:a, default_arguments:a}, get_owner:{arguments:, default_arguments:}, get_parent:{arguments:, default_arguments:}, get_path:{arguments:, default_arguments:}, get_path_to:{arguments:a, default_arguments:a}, get_pause_mode:{arguments:, default_arguments:}, get_physics_process_delta_time:{arguments:, default_arguments:}, get_position_in_parent:{arguments:, default_arguments:}, get_process_delta_time:{arguments:, default_arguments:}, get_process_priority:{arguments:, default_arguments:}, get_property_list:{arguments:, default_arguments:}, get_scene_instance_load_placeholder:{arguments:, default_arguments:}, get_script:{arguments:, default_arguments:}, get_signal_connection_list:{arguments:a, default_arguments:a}, get_signal_list:{arguments:, default_arguments:}, get_tree:{arguments:, default_arguments:}, get_viewport:{arguments:, default_arguments:}, has_meta:{arguments:a, default_arguments:a}, has_method:{arguments:a, default_arguments:a}, has_node:{arguments:a, default_arguments:a}, has_node_and_resource:{arguments:a, default_arguments:a}, has_signal:{arguments:a, default_arguments:a}, has_user_signal:{arguments:a, default_arguments:a}, is_a_parent_of:{arguments:a, default_arguments:a}, is_blocking_signals:{arguments:, default_arguments:}, is_class:{arguments:a, default_arguments:a}, is_connected:{arguments:a, b, c, default_arguments:a, b, c}, is_displayed_folded:{arguments:, default_arguments:}, is_greater_than:{arguments:a, default_arguments:a}, is_in_group:{arguments:a, default_arguments:a}, is_inside_tree:{arguments:, default_arguments:}, is_network_master:{arguments:, default_arguments:}, is_physics_processing:{arguments:, default_arguments:}, is_physics_processing_internal:{arguments:, default_arguments:}, is_processing:{arguments:, default_arguments:}, is_processing_input:{arguments:, default_arguments:}, is_processing_internal:{arguments:, default_arguments:}, is_processing_unhandled_input:{arguments:, default_arguments:}, is_processing_unhandled_key_input:{arguments:, default_arguments:}, is_queued_for_deletion:{arguments:, default_arguments:}, math_fight:{arguments:, default_arguments:}, move_child:{arguments:a, b, default_arguments:a, b}, multiply:{arguments:a, b, default_arguments:a, b}, notification:{arguments:a, b, default_arguments:a, b = False}, pi:{arguments:, default_arguments:}, print_stray_nodes:{arguments:, default_arguments:}, print_tree:{arguments:, default_arguments:}, print_tree_pretty:{arguments:, default_arguments:}, propagate_call:{arguments:a, b, c, default_arguments:a, b = [], c = False}, propagate_notification:{arguments:a, default_arguments:a}, property_list_changed_notify:{arguments:, default_arguments:}, queue_free:{arguments:, default_arguments:}, raise:{arguments:, default_arguments:}, remove_and_skip:{arguments:, default_arguments:}, remove_child:{arguments:a, default_arguments:a}, remove_from_group:{arguments:a, default_arguments:a}, remove_meta:{arguments:a, default_arguments:a}, replace_by:{arguments:a, b, default_arguments:a, b = False}, request_ready:{arguments:, default_arguments:}, rpc:{arguments:a, default_arguments:a}, rpc_config:{arguments:a, b, default_arguments:a, b}, rpc_id:{arguments:a, b, default_arguments:a, b}, rpc_unreliable:{arguments:a, default_arguments:a}, rpc_unreliable_id:{arguments:a, b, default_arguments:a, b}, rset:{arguments:a, b, default_arguments:a, b}, rset_config:{arguments:a, b, default_arguments:a, b}, rset_id:{arguments:a, b, c, default_arguments:a, b, c}, rset_unreliable:{arguments:a, b, default_arguments:a, b}, rset_unreliable_id:{arguments:a, b, c, default_arguments:a, b, c}, set:{arguments:a, b, default_arguments:a, b}, set_block_signals:{arguments:a, default_arguments:a}, set_custom_multiplayer:{arguments:a, default_arguments:a}, set_deferred:{arguments:a, b, default_arguments:a, b}, set_display_folded:{arguments:a, default_arguments:a}, set_filename:{arguments:a, default_arguments:a}, set_indexed:{arguments:a, b, default_arguments:a, b}, set_message_translation:{arguments:a, default_arguments:a}, set_meta:{arguments:a, b, default_arguments:a, b}, set_name:{arguments:a, default_arguments:a}, set_network_master:{arguments:a, b, default_arguments:a, b = True}, set_owner:{arguments:a, default_arguments:a}, set_pause_mode:{arguments:a, default_arguments:a}, set_physics_process:{arguments:a, default_arguments:a}, set_physics_process_internal:{arguments:a, default_arguments:a}, set_process:{arguments:a, default_arguments:a}, set_process_input:{arguments:a, default_arguments:a}, set_process_internal:{arguments:a, default_arguments:a}, set_process_priority:{arguments:a, default_arguments:a}, set_process_unhandled_input:{arguments:a, default_arguments:a}, set_process_unhandled_key_input:{arguments:a, default_arguments:a}, set_scene_instance_load_placeholder:{arguments:a, default_arguments:a}, set_script:{arguments:a, default_arguments:a}, subtract:{arguments:a, b, default_arguments:a, b}, sum:{arguments:a, default_arguments:a}, to_string:{arguments:, default_arguments:}, tr:{arguments:a, default_arguments:a}, update_configuration_warning:{arguments:, default_arguments:}}",
"success": true
} ],
"context": "When we create two of it for the same script",
"fullname": "test_When_we_create_two_of_it_for_the_same_script",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|Object| [Node:1565] is equal to |Object| [Node:1565]",
"context": "Then we get the same double back",
"expected": "|Object| [Node:1565] is equal to |Object| [Node:1565]",
"success": true
} ],
"context": "When we call the double the second time",
"fullname": "test_When_we_call_double_a_second_time_on",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Reference:1572] is instance of class: [GDScript:1564]",
"context": "Then we get that inner class back",
"expected": "[Reference:1572] is instance of class: [GDScript:1564]",
"success": true
} ],
"context": "When we double an inner class",
"fullname": "test_When_we_double_an_inner_class",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 3,
"path": "res://tests/integration/script_director.test.gd",
"source": {
"containers": [ "res://tests/integration", "res://tests" ],
"method": "",
"path": "res://tests/integration/script_director.test.gd",
"tags": [  ],
"test": ExtResource( 13 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 3
}, {
"context": "Given a Test Double",
"methods": [ {
"assertions": [ {
"actual": "|int| 4 is equal to |int| 4",
"context": "Then we get the correct result",
"expected": "|int| 4 is equal to |int| 4",
"success": true
} ],
"context": "When we call an add(x, y) method that we haven't directed",
"fullname": "test_When_we_call_an_add_method_that_we_have_not_directed",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|null| Null == null",
"context": "Then we get null",
"expected": "|null| Null == null",
"success": true
} ],
"context": "When we call a method that we have dummied",
"fullname": "test_When_we_call_a_method_that_we_have_dummied",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then it returns true",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we call a method that we have stubbed to return true",
"fullname": "test_When_we_call_a_method_that_we_have_stubbed_to_return_true",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|Object| [Node:1595] is equal to |Object| [Node:1595]",
"context": "Then it returns that same node",
"expected": "|Object| [Node:1595] is equal to |Object| [Node:1595]",
"success": true
} ],
"context": "When we call a method that we have stubbed to return a node",
"fullname": "test_When_we_call_a_method_that_we_have_stubbed_to_return_a_node",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "add was called",
"context": "Then we can see that it was called at least once",
"expected": "add was called",
"success": true
} ],
"context": "When we call a method that we are spying on",
"fullname": "test_When_we_call_a_method_that_we_are_spying_on",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|float| 6.283185 is equal to |float| 6.283185",
"context": "Then we can call the static methods of that inner double",
"expected": "|float| 6.283185 is equal to |float| 6.283185",
"success": true
} ],
"context": "When we add an doubled inner class to it",
"fullname": "test_When_we_add_a_doubled_inner_class_to_it",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| True is equal to |bool| True",
"context": "Then we can call it",
"expected": "|bool| True is equal to |bool| True",
"success": true
} ],
"context": "When we stubbed a keyworded method by passing in the correct keyword",
"fullname": "test_When_we_stubbed_a_keyword_method_by_passing_in_the_correct_keyword",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 9999 is equal to |int| 9999",
"context": "Then it returns the corresponding value when the partial pattern matches",
"expected": "|int| 9999 is equal to |int| 9999",
"success": true
} ],
"context": "When we call a method that was stubbed with a partial (ie using any()) argument pattern",
"fullname": "test_When_we_call_a_method_that_was_stubbed_with_a_partial_argument_pattern",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "method: add was called with arguments: [10, 10]",
"context": "Then we can see that it was called with those arguments",
"expected": "method: add was called with arguments: [10, 10]",
"success": true
} ],
"context": "When we pass arguments to a method call that we are spying on",
"fullname": "test_When_we_pass_arguments_to_a_method_call_that_we_are_spying_on",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 100 is equal to |int| 100",
"context": "Then it returns the default stubbed value when the arguments don't match any pattern",
"expected": "|int| 100 is equal to |int| 100",
"success": true
}, {
"actual": "|int| 1000 is equal to |int| 1000",
"context": "Then it returns the the corresponding value to the pattern the arguments matched",
"expected": "|int| 1000 is equal to |int| 1000",
"success": true
} ],
"context": "When we call a method that was stubbed to return different values based on argument patterns",
"fullname": "test_When_we_call_a_method_that_was_stubbed_to_return_different_values_based_on_argument_patterns",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|int| 9999 is equal to |int| 9999",
"context": "Then it returns the corresponding value when the pattern matches",
"expected": "|int| 9999 is equal to |int| 9999",
"success": true
} ],
"context": "When we call a method that was stubbed with an argument pattern that includes a non-primitive object",
"fullname": "test_When_we_call_a_method_that_was_stubbed_with_an_argument_pattern_that_includes_a_non_primitive_object",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|String| Jackie is equal to |String| Jackie",
"context": "Then we can double the object successfully",
"expected": "|String| Jackie is equal to |String| Jackie",
"success": true
} ],
"context": "When we pass in dependecies on double",
"fullname": "test_When_we_pass_in_deps_on_double",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 99 is equal to |int| 99",
"context": "Then it affects the state of the double",
"expected": "|int| 99 is equal to |int| 99",
"success": true
} ],
"context": "When we pass a funcref as a subcall",
"fullname": "test_When_we_pass_a_funcref_as_a_subcall",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "(1, 1) is builtin: Vector2",
"context": "Then we can call methods on it",
"expected": "(1, 1) is builtin: Vector2",
"success": true
} ],
"context": "When we double an inner class",
"fullname": "test_When_we_double_an_inner_class",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|String| Jackie is equal to |String| Jackie",
"context": "Then we can double the object successfully",
"expected": "|String| Jackie is equal to |String| Jackie",
"success": true
} ],
"context": "When we pass in dependecies on direct",
"fullname": "test_When_we_pass_in_deps_on_direct",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 99 is equal to |int| 99",
"context": "Then it returns a value",
"expected": "|int| 99 is equal to |int| 99",
"success": true
} ],
"context": "When we pass a funcref as a subcall that returns",
"fullname": "test_When_we_pass_a_funcref_as_a_subcall_that_returns_a_value",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|Array| [10, 5] is equal to |Array| [10, 5]",
"context": "Then it returns a value",
"expected": "|Array| [10, 5] is equal to |Array| [10, 5]",
"success": true
} ],
"context": "When we pass an Object with a call_func function",
"fullname": "test_When_we_pass_an_object_with_callfunc_method_as_a_subcall",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|null| Null == null",
"context": "Then we get the stubbed value back",
"expected": "|null| Null == null",
"success": true
} ],
"context": "When we stub a method of a doubled inner class",
"fullname": "test_When_we_stub_a_method_of_a_double_inner_class",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 4 is equal to |int| 4",
"context": "Then it calls its super implementation by default",
"expected": "|int| 4 is equal to |int| 4",
"success": true
}, {
"actual": "|int| 9999 is equal to |int| 9999",
"context": "Then it does not call its super implementation when arguments patterns match a different return value",
"expected": "|int| 9999 is equal to |int| 9999",
"success": true
} ],
"context": "When we call a method that we stubbed to call its super implementation by default",
"fullname": "test_When_we_call_a_method_that_we_stubbed_to_call_its_super_implementation_by_default",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
} ],
"passed": 19,
"path": "res://tests/integration/test_double.test.gd",
"source": {
"containers": [ "res://tests/integration", "res://tests" ],
"method": "",
"path": "res://tests/integration/test_double.test.gd",
"tags": [  ],
"test": ExtResource( 14 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 19
}, {
"context": "Given a Boolean Assertion",
"methods": [ {
"assertions": [ {
"actual": "|bool| True != false",
"context": "",
"expected": "|bool| True == false",
"success": false
} ],
"context": " intentional failure",
"fullname": "test_intentional_failure",
"passed": 0,
"success": false,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then it passes",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When calling asserts.is_true(true)",
"fullname": "test_when_calling_asserts_is_true",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| False == false",
"context": "Then it passes",
"expected": "|bool| False == false",
"success": true
} ],
"context": "When calling asserts.is_false(false)",
"fullname": "test_when_calling_asserts_is_false",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 2,
"path": "res://tests/unit/boolean.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/boolean.test.gd",
"tags": [  ],
"test": ExtResource( 11 ),
"yield_time": 0.0
},
"success": false,
"time_taken": 0.0,
"total": 3
}, {
"context": "Given an Equality Assertion",
"methods": [ {
"assertions": [ {
"actual": "|int| 1 is less than |int| 2",
"context": "Then it passes",
"expected": "|int| 1 is less than |int| 2",
"success": true
} ],
"context": "When calling asserts.is_less_than(2, 1)",
"fullname": "test_when_calling_is_less_than",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 1 is equal or greater |int| 1",
"context": "Then it passes",
"expected": "|int| 1 is equal or greater |int| 1",
"success": true
} ],
"context": "When calling asserts.is_equal_or_greater_than(1, 1)",
"fullname": "test_when_calling_is_equal_or_greater_than_with_equal_values",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 5 is not equal to |int| 6",
"context": "Then it passes",
"expected": "|int| 5 != |int| 6",
"success": true
} ],
"context": "When callign asserts.is_not_equal(5, 6)",
"fullname": "test_when_calling_is_not_equal",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 1 is equal to |int| 1",
"context": "Then it passes",
"expected": "|int| 1 is equal to |int| 1",
"success": true
} ],
"context": "When calling asserts.is_equal(1, 1)",
"fullname": "test_when_calling_is_equal",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 2 is greater than |int| 1",
"context": "Then it passes",
"expected": "|int| 2 is greater than |int| 1",
"success": true
} ],
"context": "When calling asserts.is_greater_than(2, 1)",
"fullname": "test_when_calling_is_greater_than",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 2 is equal or greater |int| 1",
"context": "Then it passes",
"expected": "|int| 2 is equal or greater |int| 1",
"success": true
} ],
"context": "When calling asserts.is_equal_or_greater_than(2, 1)",
"fullname": "test_when_calling_is_equal_or_greater_than",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 1 is equal or less than |int| 1",
"context": "Then it passes!",
"expected": "|int| 1 is equal or less than |int| 1",
"success": true
} ],
"context": "When calling asserts.is_equal_or_less_than(1, 1)",
"fullname": "test_when_calling_is_equal_or_less_than_with_equal_values",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 7,
"path": "res://tests/unit/equality.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/equality.test.gd",
"tags": [  ],
"test": ExtResource( 8 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 7
}, {
"context": "Given A File Assertion",
"methods": [ {
"assertions": [ {
"actual": "res://tests/unit/file.test.gd exists",
"context": "Then it passes",
"expected": "res://tests/unit/file.test.gd exists",
"success": true
} ],
"context": "When calling asserts.file_exists when the file is this suite",
"fullname": "test_when_calling_file_exists_when_file_is_self",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "res://somefile.gd does not exist",
"context": "Then it passes",
"expected": "res://somefile.gd does not exist",
"success": true
} ],
"context": "When calling asserts.file_does_not_exist when there is no file",
"fullname": "test_when_calling_file_does_not_exist_when_there_is_no_file",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": " does not exist",
"context": "Then it passes",
"expected": " does not exist",
"success": true
} ],
"context": "When calling asserts file does not exist when path is empty",
"fullname": "test_when_calling_file_does_not_exist_when_path_is_empty",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 3,
"path": "res://tests/unit/file.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/file.test.gd",
"tags": [  ],
"test": ExtResource( 3 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 3
}, {
"context": "Given an Is Instance of class/type Assertion",
"methods": [ {
"assertions": [ {
"actual": "1 is builtin: float",
"context": "Then it passes",
"expected": "1 is builtin: float",
"success": true
} ],
"context": "When calling asserts.is_float(1.0)",
"fullname": "test_when_calling_is_float",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|PoolIntArray| [] != null",
"context": "ints is not null",
"expected": "|PoolIntArray| [] != null",
"success": true
}, {
"actual": "[] is builtin: PoolIntArray",
"context": "Then it passes",
"expected": "[] is builtin: PoolIntArray",
"success": true
} ],
"context": "When calling asserts.is_PoolIntArray(ints: PoolIntArray)",
"fullname": "test_when_calling_is_PoolIntArray",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|PoolRealArray| [] != null",
"context": "reals is not null",
"expected": "|PoolRealArray| [] != null",
"success": true
}, {
"actual": "[] is builtin: PoolRealArray",
"context": "Then it passes",
"expected": "[] is builtin: PoolRealArray",
"success": true
} ],
"context": "When calling is asserts.is_PoolRealArray(reals: PoolRealArray)",
"fullname": "test_when_calling_is_PoolRealArray",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|PoolVector3Array| [] != null",
"context": "vec3s is not null",
"expected": "|PoolVector3Array| [] != null",
"success": true
}, {
"actual": "[] is builtin: PoolVector3Array",
"context": "Then it passes",
"expected": "[] is builtin: PoolVector3Array",
"success": true
} ],
"context": "When calling is asserts.is_PoolVector3Array(vec3s: PoolVector3Array)",
"fullname": "test_when_calling_is_PoolVector3Array",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|Plane| 0, 0, 0, 0 != null",
"context": "plane is not null",
"expected": "|Plane| 0, 0, 0, 0 != null",
"success": true
}, {
"actual": "0, 0, 0, 0 is builtin: Plane",
"context": "then it passes",
"expected": "0, 0, 0, 0 is builtin: Plane",
"success": true
} ],
"context": "When calling asserts.is_Plane(plane: Plane())",
"fullname": "test_when_calling_is_Plane",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|Color| 0,0,0,1 != null",
"context": "color is not null",
"expected": "|Color| 0,0,0,1 != null",
"success": true
}, {
"actual": "0,0,0,1 is builtin: Color",
"context": "Then it passes",
"expected": "0,0,0,1 is builtin: Color",
"success": true
} ],
"context": "When calling asserts.is_color(color: Color)",
"fullname": "test_when_calling_is_Color",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|PoolColorArray| [PoolColorArray] != null",
"context": "colors is not null",
"expected": "|PoolColorArray| [PoolColorArray] != null",
"success": true
}, {
"actual": "[PoolColorArray] is builtin: PoolColorArray",
"context": "Then it passes",
"expected": "[PoolColorArray] is builtin: PoolColorArray",
"success": true
} ],
"context": "When calling asserts.is_PoolColorArray(colors: PoolColorArray)",
"fullname": "test_when_calling_is_PoolColorArray",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|Object| [Node:1750] != null",
"context": "node is not null",
"expected": "|Object| [Node:1750] != null",
"success": true
}, {
"actual": "[Node:1750] is builtin: Object",
"context": "An instance of node is an Object",
"expected": "[Node:1750] is builtin: Object",
"success": true
} ],
"context": "When calling is asserts.object(node: Node)",
"fullname": "test_when_calling_is_object",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|Basis| ((1, 0, 0), (0, 1, 0), (0, 0, 1)) != null",
"context": "basis is not null",
"expected": "|Basis| ((1, 0, 0), (0, 1, 0), (0, 0, 1)) != null",
"success": true
}, {
"actual": "((1, 0, 0), (0, 1, 0), (0, 0, 1)) is builtin: Basis",
"context": "Then it passes",
"expected": "((1, 0, 0), (0, 1, 0), (0, 0, 1)) is builtin: Basis",
"success": true
} ],
"context": "When calling asserts.is_basis(basis: Basis",
"fullname": "test_when_calling_is_Basis",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|PoolStringArray| [] != null",
"context": "strs is not null",
"expected": "|PoolStringArray| [] != null",
"success": true
}, {
"actual": "[] is builtin: PoolStringArray",
"context": "Then it passes",
"expected": "[] is builtin: PoolStringArray",
"success": true
} ],
"context": "When calling is asserts.is_PoolStringArray(strs: PoolStringArray)",
"fullname": "test_when_calling_is_PoolStringArray",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "True is builtin: bool",
"context": "Then it passes",
"expected": "True is builtin: bool",
"success": true
} ],
"context": "When calling asserts.is_bool(true)",
"fullname": "test_when_calling_is_bool",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|PoolVector2Array| [] != null",
"context": "vec2s is not null",
"expected": "|PoolVector2Array| [] != null",
"success": true
}, {
"actual": "[] is builtin: PoolVector2Array",
"context": "Then it passes",
"expected": "[] is builtin: PoolVector2Array",
"success": true
} ],
"context": "When calling is asserts.is_PoolVector2Array(vec2s: PoolVector2Array)",
"fullname": "test_when_calling_is_PoolVector2Array",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|Array| [] != null",
"context": "array is not null",
"expected": "|Array| [] != null",
"success": true
}, {
"actual": "[] is builtin: Array",
"context": "Then it passes",
"expected": "[] is builtin: Array",
"success": true
} ],
"context": "When calling asserts.is_Array(array: Array)",
"fullname": "test_when_calling_is_Array",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|PoolByteArray| [PoolByteArray] != null",
"context": "bytes is not null",
"expected": "|PoolByteArray| [PoolByteArray] != null",
"success": true
}, {
"actual": "[PoolByteArray] is builtin: PoolByteArray",
"context": "Then it passes",
"expected": "[PoolByteArray] is builtin: PoolByteArray",
"success": true
} ],
"context": "When calling asserts.is_PoolByteArray(bytes: PoolByteArray)",
"fullname": "test_when_calling_is_PoolByteArray",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "1 is builtin: int",
"context": "Then it passes",
"expected": "1 is builtin: int",
"success": true
} ],
"context": "When callign asserts.is_int(1)",
"fullname": "test_when_calling_is_int",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|NodePath| . != null",
"context": "@'Parent/Child' is not null",
"expected": "|NodePath| . != null",
"success": true
}, {
"actual": ". is builtin: NodePath",
"context": "Then it passes",
"expected": ". is builtin: NodePath",
"success": true
} ],
"context": "When calling asserts.is_NodePath(@'Parent/Child')",
"fullname": "test_when_calling_is_NodePath",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|Quat| (0, 0, 0, 1) != null",
"context": "quat is not null",
"expected": "|Quat| (0, 0, 0, 1) != null",
"success": true
}, {
"actual": "(0, 0, 0, 1) is builtin: Quat",
"context": "Then it passes",
"expected": "(0, 0, 0, 1) is builtin: Quat",
"success": true
} ],
"context": "When calling asserts.is_Quat(quat: Quat)",
"fullname": "test_when_calling_is_Quat",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|Rect2| (0, 0, 0, 0) != null",
"context": "rect2 is not null",
"expected": "|Rect2| (0, 0, 0, 0) != null",
"success": true
}, {
"actual": "(0, 0, 0, 0) is builtin: Rect2",
"context": "Then it passes",
"expected": "(0, 0, 0, 0) is builtin: Rect2",
"success": true
} ],
"context": "When calling asserts.is_Rect2(rect2: Rect2)",
"fullname": "test_when_calling_is_Rect2",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|RID| [RID] != null",
"context": "rid is not null",
"expected": "|RID| [RID] != null",
"success": true
}, {
"actual": "[RID] is builtin: RID",
"context": "Then it passes",
"expected": "[RID] is builtin: RID",
"success": true
} ],
"context": "When calling asserts.is_RID(rid: RID)",
"fullname": "test_when_calling_is_RID",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|String|  != null",
"context": "strs is not null",
"expected": "|String|  != null",
"success": true
}, {
"actual": " is builtin: String",
"context": "Then it passes",
"expected": " is builtin: String",
"success": true
} ],
"context": "When calling asserts.is_string(strs: String)",
"fullname": "test_when_calling_is_string",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|AABB| 0, 0, 0 - 0, 0, 0 != null",
"context": "AABB is not null",
"expected": "|AABB| 0, 0, 0 - 0, 0, 0 != null",
"success": true
}, {
"actual": "0, 0, 0 - 0, 0, 0 is builtin: AABB",
"context": "Then it passes",
"expected": "0, 0, 0 - 0, 0, 0 is builtin: AABB",
"success": true
} ],
"context": "When calling asserts.is_AABB(aabb: AABB)",
"fullname": "test_when_calling_is_AABB",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "{} is builtin: Dictionary",
"context": "Then it passes",
"expected": "{} is builtin: Dictionary",
"success": true
} ],
"context": "When calling asserts.is_Dictionary({})",
"fullname": "test_when_calling_is_Dictionary",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|Vector2| (0, 0) != null",
"context": "vec2 is not null",
"expected": "|Vector2| (0, 0) != null",
"success": true
}, {
"actual": "(0, 0) is builtin: Vector2",
"context": "Then it passes",
"expected": "(0, 0) is builtin: Vector2",
"success": true
} ],
"context": "When calling asserts.is_Vector2(vec2)",
"fullname": "test_when_calling_is_Vector2",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|Transform2D| ((1, 0), (0, 1), (0, 0)) != null",
"context": "transform2D is not null",
"expected": "|Transform2D| ((1, 0), (0, 1), (0, 0)) != null",
"success": true
}, {
"actual": "((1, 0), (0, 1), (0, 0)) is builtin: Transform2D",
"context": "Then it passes",
"expected": "((1, 0), (0, 1), (0, 0)) is builtin: Transform2D",
"success": true
} ],
"context": "When calling asserts.is_Transform(transform2D: Transform2D)",
"fullname": "test_when_calling_is_Transform2D",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|Transform| 1, 0, 0, 0, 1, 0, 0, 0, 1 - 0, 0, 0 != null",
"context": "transform is not null",
"expected": "|Transform| 1, 0, 0, 0, 1, 0, 0, 0, 1 - 0, 0, 0 != null",
"success": true
}, {
"actual": "1, 0, 0, 0, 1, 0, 0, 0, 1 - 0, 0, 0 is builtin: Transform",
"context": "Then it passes",
"expected": "1, 0, 0, 0, 1, 0, 0, 0, 1 - 0, 0, 0 is builtin: Transform",
"success": true
} ],
"context": "When calling asserts.is_Transform(transform: Transform)",
"fullname": "test_when_calling_is_Transform",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|Vector3| (0, 0, 0) != null",
"context": "vec3 is not null",
"expected": "|Vector3| (0, 0, 0) != null",
"success": true
}, {
"actual": "(0, 0, 0) is builtin: Vector3",
"context": "Then it passes",
"expected": "(0, 0, 0) is builtin: Vector3",
"success": true
} ],
"context": "When calling asserts.is_Vector3(vec3: Vector3",
"fullname": "test_when_calling_is_Vector3",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
} ],
"passed": 26,
"path": "res://tests/unit/is_instance.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/is_instance.test.gd",
"tags": [  ],
"test": ExtResource( 6 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 26
}, {
"context": "Given an Is Not Instance of class/type Assertion",
"methods": [ {
"assertions": [ {
"actual": "Null is not builtin: AABB",
"context": "Then it passes",
"expected": "Null is not builtin: AABB",
"success": true
} ],
"context": "when calling asserts.is_not_AABB(null)",
"fullname": "test_when_calling_is_not_AABB",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: bool",
"context": "Then it passes",
"expected": "Null is not builtin: bool",
"success": true
} ],
"context": "when calling asserts.is_not_bool(null)",
"fullname": "test_when_calling_is_not_bool",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: float",
"context": "Then it passes",
"expected": "Null is not builtin: float",
"success": true
} ],
"context": "when calling asserts.is_not_float(null)",
"fullname": "test_when_calling_is_not_float",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Array",
"context": "Then it passes",
"expected": "Null is not builtin: Array",
"success": true
} ],
"context": "when calling asserts.is_not_Array(null)",
"fullname": "test_when_calling_is_not_Array",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Basis",
"context": "Then it passes",
"expected": "Null is not builtin: Basis",
"success": true
} ],
"context": "when calling asserts.is_not_Basis(null)",
"fullname": "test_when_calling_is_not_Basis",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Color",
"context": "Then it passes",
"expected": "Null is not builtin: Color",
"success": true
} ],
"context": "when calling asserts.is_not_Color(null)",
"fullname": "test_when_calling_is_not_Color",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Dictionary",
"context": "Then it passes",
"expected": "Null is not builtin: Dictionary",
"success": true
} ],
"context": "when calling asserts.is_not_Dictionary(null)",
"fullname": "test_when_calling_is_not_Dictionary",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Object",
"context": "Then it passes",
"expected": "Null is not builtin: Object",
"success": true
} ],
"context": "when calling asserts.is_not_Object(null)",
"fullname": "test_when_calling_is_not_Object",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: PoolColorArray",
"context": "Then it passes",
"expected": "Null is not builtin: PoolColorArray",
"success": true
} ],
"context": "when calling asserts.is_not_PoolColorArray(null)",
"fullname": "test_when_calling_is_not_PoolColorArray",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Plane",
"context": "Then it passes",
"expected": "Null is not builtin: Plane",
"success": true
} ],
"context": "when calling asserts.is_not_Plane(null)",
"fullname": "test_when_calling_is_not_Plane",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: String",
"context": "Then it passes",
"expected": "Null is not builtin: String",
"success": true
} ],
"context": "when calling asserts.is_not_String(null)",
"fullname": "test_when_calling_is_not_String",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Quat",
"context": "Then it passes",
"expected": "Null is not builtin: Quat",
"success": true
} ],
"context": "when calling asserts.is_not_Quat(null)",
"fullname": "test_when_calling_is_not_Quat",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: PoolByteArray",
"context": "Then it passes",
"expected": "Null is not builtin: PoolByteArray",
"success": true
} ],
"context": "when calling asserts.is_not_PoolByteArray(null)",
"fullname": "test_when_calling_is_not_PoolByteArray",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: PoolVector2Array",
"context": "Then it passes",
"expected": "Null is not builtin: PoolVector2Array",
"success": true
} ],
"context": "when calling asserts.is_not_PoolVector2Array(null)",
"fullname": "test_when_calling_is_not_PoolVector2Array",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: RID",
"context": "Then it passes",
"expected": "Null is not builtin: RID",
"success": true
} ],
"context": "when calling asserts.is_not_RID(null)",
"fullname": "test_when_calling_is_not_RID",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: int",
"context": "Then it passes",
"expected": "Null is not builtin: int",
"success": true
} ],
"context": "when calling asserts.is_not_int(null)",
"fullname": "test_when_calling_is_not_int",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: NodePath",
"context": "Then it passes",
"expected": "Null is not builtin: NodePath",
"success": true
} ],
"context": "when calling asserts.is_not_NodePath(null)",
"fullname": "test_when_calling_is_not_NodePath",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: PoolStringArray",
"context": "Then it passes",
"expected": "Null is not builtin: PoolStringArray",
"success": true
} ],
"context": "when calling asserts.is_not_PoolStringArray(null)",
"fullname": "test_when_calling_is_not_PoolStringArray",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: PoolVector3Array",
"context": "Then it passes",
"expected": "Null is not builtin: PoolVector3Array",
"success": true
} ],
"context": "when calling asserts.is_not_PoolVector3Array(null)",
"fullname": "test_when_calling_is_not_PoolVector3Array",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Transform2D",
"context": "Then it passes",
"expected": "Null is not builtin: Transform2D",
"success": true
} ],
"context": "when calling asserts.is_not_Transform2D(null)",
"fullname": "test_when_calling_is_not_Transform2D",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Vector2",
"context": "Then it passes",
"expected": "Null is not builtin: Vector2",
"success": true
} ],
"context": "when calling asserts.is_not_Vector2(null)",
"fullname": "test_when_calling_is_not_Vector2",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Vector3",
"context": "Then it passes",
"expected": "Null is not builtin: Vector3",
"success": true
} ],
"context": "when calling asserts.is_not_Vector3(null)",
"fullname": "test_when_calling_is_not_Vector3",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: PoolRealArray",
"context": "Then it passes",
"expected": "Null is not builtin: PoolRealArray",
"success": true
} ],
"context": "when calling asserts.is_not_PoolRealArray(null)",
"fullname": "test_when_calling_is_not_PoolRealArray",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Transform",
"context": "Then it passes",
"expected": "Null is not builtin: Transform",
"success": true
} ],
"context": "when calling asserts.is_not_Transform(null)",
"fullname": "test_when_calling_is_not_Transform",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: PoolIntArray",
"context": "Then it passes",
"expected": "Null is not builtin: PoolIntArray",
"success": true
} ],
"context": "when calling asserts.is_not_PoolIntArray(null)",
"fullname": "test_when_calling_is_not_PoolIntArray",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Rect2",
"context": "Then it passes",
"expected": "Null is not builtin: Rect2",
"success": true
} ],
"context": "when calling asserts.is_not_Rect2(null)",
"fullname": "test_when_calling_is_not_Rect2",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 26,
"path": "res://tests/unit/is_not_instance.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/is_not_instance.test.gd",
"tags": [  ],
"test": ExtResource( 2 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 26
}, {
"context": "Given a Null Assertion",
"methods": [ {
"assertions": [ {
"actual": "|null| Null == null",
"context": "Then it passes",
"expected": "|null| Null == null",
"success": true
} ],
"context": "When calling asserts.is_null(null)",
"fullname": "test_when_calling_null_is_null",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|Object| [Node:1819] != null",
"context": "Then it passes",
"expected": "|Object| [Node:1819] != null",
"success": true
} ],
"context": "When calling Node is not null",
"fullname": "test_when_calling_node_is_not_null",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|Object| [Deleted Object] == null",
"context": "A Freed Node is null in Engine 3.2.2 or greater",
"expected": "|Object| [Deleted Object] == null",
"success": true
} ],
"context": "When calling freed object is null",
"fullname": "test_when_calling_freed_object_is_not_null",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 3,
"path": "res://tests/unit/null.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/null.test.gd",
"tags": [  ],
"test": ExtResource( 12 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 3
}, {
"context": "Given an Object Assertion",
"methods": [ {
"assertions": [ {
"actual": "[Node:1826] is not freed",
"context": "Then it passes",
"expected": "[Node:1826] is not freed",
"success": true
} ],
"context": "When calling asserts.is_not_freed(unfreed_object)",
"fullname": "test_when_calling_unfreed_object_is_not_freed",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:1823] has meta: dummy",
"context": "Then it passes",
"expected": "[Node:1823] has meta: dummy",
"success": true
}, {
"actual": "[Node:1823] has meta: dummy",
"context": "Then it passes",
"expected": "[Node:1823] has meta: dummy",
"success": true
} ],
"context": "When calling asserts.object_has_meta() after adding metadata",
"fullname": "test_when_calling_has_meta_after_adding_metadata",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "Null is freed from memory",
"context": "Then it passes",
"expected": "Null is freed from memory",
"success": true
} ],
"context": "When calling asserts.is_freed(freed_object",
"fullname": "test_when_calling_freed_object_is_freed",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:1823] does not have meta: bad_meta",
"context": "Then it passes",
"expected": "[Node:1823] does not have meta: bad_meta",
"success": true
} ],
"context": "When calling asserts.object_does_not_have_meta()",
"fullname": "test_when_calling_does_not_have_meta",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:1823] does not have user signal: false_signal",
"context": "Then it passes",
"expected": "[Node:1823] does not have user signal: false_signal",
"success": true
} ],
"context": "When calling obj_does_not_have_user_signal with fake signal",
"fullname": "test_when_calling_does_not_have_user_signal",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:1834] is queued for deletion",
"context": "Then it passes",
"expected": "[Node:1834] is queued for deletion",
"success": true
} ],
"context": "When calling asserts.object_is_queued for deletion after calling queue_free",
"fullname": "test_when_calling_obj_is_queued_for_deletion_after_calling_queue_free",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:1823] does not have meta: confusing",
"context": "Then it passes",
"expected": "[Node:1823] does not have meta: confusing",
"success": true
} ],
"context": "When calling asserts.object_has_meta with real key but null val",
"fullname": "test_when_calling_does_not_have_meta_real_key_null_value_pair",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:1823] has method: title",
"context": "Then it passes",
"expected": "[Node:1823] has method: title",
"success": true
} ],
"context": "When calling has_method('title')",
"fullname": "test_when_calling_has_method_title",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:1823] does not have user signal: builtin_dummy",
"context": "Then it passes",
"expected": "[Node:1823] does not have user signal: builtin_dummy",
"success": true
} ],
"context": "When calling does not have user signal with class signal",
"fullname": "test_when_calling_does_not_have_user_signal_with_class_signal_constant",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:1823] has user signal: dummy_signal",
"context": "Then it passes",
"expected": "[Node:1823] has user signal: dummy_signal",
"success": true
} ],
"context": "When calling obj_has_user_signal after adding a signal",
"fullname": "test_when_calling_has_user_signal_after_adding_a_signal",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:1840] is not blocking signals",
"context": "Then it passes",
"expected": "[Node:1840] is not blocking signals",
"success": true
} ],
"context": "When calling is not blocking signals while not blocking signals",
"fullname": "test_is_not_blocking_signals",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:1842] is not queued for deletion",
"context": "Then it passes",
"expected": "[Node:1842] is not queued for deletion",
"success": true
} ],
"context": "When calling asserts.object_is_not_for_queued_deletion after not calling queue free()",
"fullname": "test_when_calling_obj_is_not_for_queued_deletion_after_not_calling_queue_free",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:1823].builtin_dummy is not connected to [Node:1823].title",
"context": "Then it passes",
"expected": "[Node:1823].builtin_dummy is not connected to [Node:1823].title",
"success": true
} ],
"context": "When calling asserts object is not connected with an invalid connection",
"fullname": "test_when_calling_obj_is_not_connected_with_an_invalid_connection",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:1845] is blocking signals",
"context": "Then it passes",
"expected": "[Node:1845] is blocking signals",
"success": true
} ],
"context": "When calling is blocking signals while blocking signals",
"fullname": "test_is_blocking_signals",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:1823].builtin_dummy is connected to [Node:1823].title",
"context": "Then it passes",
"expected": "[Node:1823].builtin_dummy is connected to [Node:1823].title",
"success": true
} ],
"context": "When calling asserts object is connected with a valid connection",
"fullname": "test_when_calling_obj_is_connected_with_a_real_connection",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 15,
"path": "res://tests/unit/object.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/object.test.gd",
"tags": [  ],
"test": ExtResource( 7 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 15
}, {
"context": "Given the Addition Operator",
"methods": [ {
"assertions": [ {
"actual": "|int| 4 is equal to |int| 4",
"context": "",
"expected": "|int| 4 is equal to |int| 4",
"success": true
} ],
"context": "When we add 2 to 2 we get 4",
"fullname": "test_add",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 8 is equal to |int| 8",
"context": "",
"expected": "|int| 8 is equal to |int| 8",
"success": true
} ],
"context": "When we add 5 to 3 we get 8",
"fullname": "test_add",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 13 is equal to |int| 13",
"context": "",
"expected": "|int| 13 is equal to |int| 13",
"success": true
} ],
"context": "When we add 7 to 6 we get 13",
"fullname": "test_add",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 0 is equal to |int| 0",
"context": "",
"expected": "|int| 0 is equal to |int| 0",
"success": true
} ],
"context": "When we subtract 2 from 2 we get 0",
"fullname": "test_subtract",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 2 is equal to |int| 2",
"context": "",
"expected": "|int| 2 is equal to |int| 2",
"success": true
} ],
"context": "When we subtract 5 from 3 we get 2",
"fullname": "test_subtract",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 1 is equal to |int| 1",
"context": "",
"expected": "|int| 1 is equal to |int| 1",
"success": true
} ],
"context": "When we subtract 7 from 6 we get 1",
"fullname": "test_subtract",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 6,
"path": "res://tests/unit/parameters.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/parameters.test.gd",
"tags": [  ],
"test": ExtResource( 16 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 6
}, {
"context": "Given A Range Assertion",
"methods": [ {
"assertions": [ {
"actual": "10 is not in range(0, 10)",
"context": "Then it passes",
"expected": "10 is not in range(0, 10)",
"success": true
} ],
"context": "When calling is (10) not in range (in range(0, 10)",
"fullname": "test_when_calling_is_not_in_range",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "0 is in range(0, 10)",
"context": "Then it passes",
"expected": "0 is in range(0, 10)",
"success": true
} ],
"context": "When calling is (0) in range(0, 10)",
"fullname": "test_when_calling_is_in_range",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 2,
"path": "res://tests/unit/range.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/range.test.gd",
"tags": [  ],
"test": ExtResource( 15 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 2
}, {
"context": "Given a String Assertion",
"methods": [ {
"assertions": [ {
"actual": "lorem impsum ends with impsum",
"context": "Then it passes",
"expected": "lorem impsum ends with impsum",
"success": true
} ],
"context": "When calling asserts.string_ends_with('impsum', 'lorem impsum')",
"fullname": "test_when_calling_string_ends_with",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "impsum does not begin with bleh lorem",
"context": "Then it passes",
"expected": "impsum does not begin with bleh lorem",
"success": true
} ],
"context": "When calling asserts.string_does_not_begin_with('lorem', 'impsum')",
"fullname": "test_when_calling_string_does_not_begin_with",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "impsum does not end with lorem",
"context": "Then it passes",
"expected": "impsum does not end with lorem",
"success": true
} ],
"context": "When calling asserts.string_does_not_end_with('lorem', 'impsum')",
"fullname": "test_when_calling_string_does_not_end_with",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "lorem impsum begins with lorem",
"context": "Then it passes",
"expected": "lorem impsum begins with lorem",
"success": true
} ],
"context": "When calling asserts.string_begins_with('lorem', 'lorem impsum')",
"fullname": "test_when_calling_string_begins_with",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "impsum does not contain beem im",
"context": "Then it passes",
"expected": "impsum does not contain beem im",
"success": true
} ],
"context": "When calling asserts.string_does_not_contain('em im', 'impsum')",
"fullname": "test_when_calling_string_does_not_contain",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "lorem impsum contains em im",
"context": "Then it passes",
"expected": "lorem impsum contains em im",
"success": true
} ],
"context": "When calling asserts.string_contains('em im', 'lorem impsum')",
"fullname": "test_when_calling_string_contains",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 6,
"path": "res://tests/unit/string.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/string.test.gd",
"tags": [  ],
"test": ExtResource( 9 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 6
}, {
"context": "Dummy Passing Test",
"methods": [ {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Passing!",
"expected": "|bool| True == true",
"success": true
} ],
"context": "This method passes",
"fullname": "test_this_method_passes",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 1,
"path": "res://tests/unit/suite.test.gd.DummyOne",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/suite.test.gd.DummyOne",
"tags": [  ],
"test": SubResource( 23 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 1
}, {
"context": "Dummy Test 2",
"methods": [ {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Passing!",
"expected": "|bool| True == true",
"success": true
} ],
"context": "This method passes",
"fullname": "test_this_method_passes",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 1,
"path": "res://tests/unit/suite.test.gd.DummyTwo",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/suite.test.gd.DummyTwo",
"tags": [  ],
"test": SubResource( 24 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 1
}, {
"context": "Given a Test Script",
"methods": [ {
"assertions": [ {
"actual": "|bool| True == true",
"context": "if the test didn't break this works",
"expected": "|bool| True == true",
"success": true
} ],
"context": " we can omit describe",
"fullname": "test_we_can_omit_describe",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|int| 2 is equal to |int| 2",
"context": "",
"expected": "|int| 2 is equal to |int| 2",
"success": true
} ],
"context": " when we omit context we can see expected and got under method",
"fullname": "test_when_we_omit_context_we_can_see_expected_and_got_under_method",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|int| 10 is greater than |int| 1",
"context": "We get an array of multiple values back",
"expected": "|int| 10 is greater than |int| 1",
"success": true
}, {
"actual": "|int| 0 is not equal to |int| 9",
"context": "With different values",
"expected": "|int| 0 != |int| 9",
"success": true
}, {
"actual": "|int| 10 is greater than |int| 1",
"context": "And we can track multiple properties",
"expected": "|int| 10 is greater than |int| 1",
"success": true
} ],
"context": "When we record properties",
"fullname": "test_we_can_record_properties",
"passed": 3,
"success": true,
"time": 0.0,
"total": 3
} ],
"passed": 3,
"path": "res://tests/unit/test.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/test.test.gd",
"tags": [  ],
"test": ExtResource( 19 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 3
}, {
"context": "Given a Signal Watcher",
"methods": [ {
"assertions": [ {
"actual": "signal: example was emitted from [Node:1890]",
"context": "Then it captures the emitted signal",
"expected": "signal: example was emitted from [Node:1890]",
"success": true
} ],
"context": "When we watch and emit a signal",
"fullname": "test_When_we_watch_and_emit_a_signal",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Signal: example was not emitted from [Node:1890]",
"context": "Then it does not capture the non-emitted signal",
"expected": "Signal: example was not emitted from [Node:1890]",
"success": true
} ],
"context": "When we watch and do not emit a signal",
"fullname": "test_When_we_watch_and_do_not_emit_a_signal",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "signal: multiple was emitted from [Node:1890] 2",
"context": "Then we can track how many times we emitted it",
"expected": "signal: multiple was emitted from [Node:1890] 2",
"success": true
} ],
"context": "When we watch and signal and emit it multiple times",
"fullname": "test_When_we_watch_a_signal_and_emit_it_multiple_times",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Signal: example was emitted from [Node:1890] with arguments: [1, 20, 5]",
"context": "Then it captures any arguments that where passed when the signal was emitted",
"expected": "Signal: example was emitted from [Node:1890] with arguments: [1, 20, 5]",
"success": true
} ],
"context": "When we watch a signal from an object with no bound variables",
"fullname": "test_When_we_watch_a_signal_from_an_object_with_no_bound_variables",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 4,
"path": "res://tests/unit/watcher.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/watcher.test.gd",
"tags": [  ],
"test": ExtResource( 17 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 4
}, {
"context": "Given a Yield",
"methods": [ {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then we set var c to true",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then we set var d to true",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we yield in pre thrice",
"fullname": "test_When_we_yield_in_pre",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then we set var e to true",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then we set var f to true",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we yield twice in execute",
"fullname": "test_When_we_yield_in_execute",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then the yielder is paused",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When a signal being yielded on is emitted",
"fullname": "test_When_a_signal_being_yielded_on_is_emitted_the_yielder_is_stopped",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[100, Null, Null, Null, Null, Null] is builtin: Array",
"context": "Then we get an array",
"expected": "[100, Null, Null, Null, Null, Null] is builtin: Array",
"success": true
}, {
"actual": "|int| 6 is equal to |int| 6",
"context": "Of size 6",
"expected": "|int| 6 is equal to |int| 6",
"success": true
}, {
"actual": "|int| 100 is equal to |int| 100",
"context": "Where element 0 is 100",
"expected": "|int| 100 is equal to |int| 100",
"success": true
} ],
"context": "When yield(self.yield_value()) returns",
"fullname": "test_When_we_yield_we_get_the_return_value",
"passed": 3,
"success": true,
"time": 0.0,
"total": 3
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then yielder is unpaused",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "The timeout signal of the yielder is connected",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we call until_timeout (with 1.0)",
"fullname": "test_When_we_call_until_timeout",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then the yielder is paused",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "The timeout signal of the yielder is not connected",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When the yielder times out on until_timeout(0.1)",
"fullname": "test_When_the_yielder_times_out",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then the yielder is unpaused",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then the timeout signal of the yielder is connected",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then our signal is connected to the yielder",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we call until signal",
"fullname": "test_When_we_call_until_signal",
"passed": 3,
"success": true,
"time": 0.0,
"total": 3
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then yielder is not active",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When asserting against a test",
"fullname": "test_Yielder_is_not_active_when_asserting",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then the yielder is paused",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then the timeout signal of the yielder is disconnected",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then our signal to the yielder is disconnected",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When the yielder heres our signal",
"fullname": "test_When_the_yielder_hears_our_signal",
"passed": 3,
"success": true,
"time": 0.0,
"total": 3
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then we set var a to true",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then we set var b to true",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we yield in start twice",
"fullname": "test_When_we_yield_in_start",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then the timeout signal is disconnected",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then the signal-signal is disconnected",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When it is finished",
"fullname": "test_When_yielder_is_finished_signals_are_disconnected",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
} ],
"passed": 11,
"path": "res://tests/unit/yield.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/yield.test.gd",
"tags": [  ],
"test": ExtResource( 18 ),
"yield_time": 1.9
},
"success": true,
"time_taken": 0.0,
"total": 11
} ],
1611526052: [  ],
1611526144: [  ],
1611526165: [ {
"context": "Given a Boolean Assertion",
"methods": [ {
"assertions": [ {
"actual": "|bool| True != false",
"context": "",
"expected": "|bool| True == false",
"success": false
} ],
"context": " intentional failure",
"fullname": "test_intentional_failure",
"passed": 0,
"success": false,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then it passes",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When calling asserts.is_true(true)",
"fullname": "test_when_calling_asserts_is_true",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| False == false",
"context": "Then it passes",
"expected": "|bool| False == false",
"success": true
} ],
"context": "When calling asserts.is_false(false)",
"fullname": "test_when_calling_asserts_is_false",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 2,
"path": "res://tests/integration/boolean.test.gd",
"source": {
"containers": [ "res://tests/integration", "res://tests" ],
"method": "",
"path": "res://tests/integration/boolean.test.gd",
"tags": [  ],
"test": ExtResource( 20 ),
"yield_time": 0.0
},
"success": false,
"time_taken": 0.0,
"total": 3
}, {
"context": "Default Args",
"methods": [ {
"assertions": [ {
"actual": "|bool| True == true",
"context": "If this method can be reached then we have doubled a script with default argument(s) properly!",
"expected": "|bool| True == true",
"success": true
} ],
"context": " default arguments of interpolate property",
"fullname": "test_default_arguments_of_interpolate_property",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 1,
"path": "res://tests/integration/default_args.test.gd",
"source": {
"containers": [ "res://tests/integration", "res://tests" ],
"method": "",
"path": "res://tests/integration/default_args.test.gd",
"tags": [  ],
"test": ExtResource( 10 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 1
}, {
"context": "Given is_on_floor",
"methods": [ {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then it can be stubbed",
"expected": "|bool| True == true",
"success": true
} ],
"context": "From a built-in KinematicBody2D2",
"fullname": "test_stubbing_is_on_floor_method_from_builtin_class2",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then it can be stubbed",
"expected": "|bool| True == true",
"success": true
} ],
"context": "From a child node of a scene without scripts",
"fullname": "test_stubbing_is_on_floor_as_child_node_with_no_script",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then it can be stubbed",
"expected": "|bool| True == true",
"success": true
} ],
"context": "From a user-defined script",
"fullname": "test_stubbing_is_on_floor_method_from_user_defined_class",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 3,
"path": "res://tests/integration/on_floor.test.gd",
"source": {
"containers": [ "res://tests/integration", "res://tests" ],
"method": "",
"path": "res://tests/integration/on_floor.test.gd",
"tags": [  ],
"test": ExtResource( 5 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 3
}, {
"context": "Given a Scene Director",
"methods": [ {
"assertions": [ {
"actual": "|Dictionary| {.:[Reference:1365], A:[Reference:1366], A/B:[Reference:1368], C:[Reference:1367], C/D:[Reference:1369]} is not equal to |Dictionary| {.:[Reference:1379], A:[Reference:1380], A/B:[Reference:1382], C:[Reference:1381], C/D:[Reference:1383]}",
"context": "Then they do not share resources",
"expected": "|Dictionary| {.:[Reference:1365], A:[Reference:1366], A/B:[Reference:1368], C:[Reference:1367], C/D:[Reference:1369]} != |Dictionary| {.:[Reference:1379], A:[Reference:1380], A/B:[Reference:1382], C:[Reference:1381], C/D:[Reference:1383]}",
"success": true
} ],
"context": "When we create two of it for the same scene",
"fullname": "test_When_we_create_two_of_it_for_the_same_scene",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 9999 is equal to |int| 9999",
"context": "Then we get the stubbed return value",
"expected": "|int| 9999 is equal to |int| 9999",
"success": true
} ],
"context": "When we call a method from the root node that we stubbed",
"fullname": "test_When_we_call_a_method_from_the_root_node_that_we_stubbed",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 999 is equal to |int| 999",
"context": "Then we get the stubbed return value",
"expected": "|int| 999 is equal to |int| 999",
"success": true
} ],
"context": "When we call a method from a child node that we stubbed",
"fullname": "test_When_we_call_a_method_from_a_child_node_that_we_stubbed",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|NodePath| A is equal to |NodePath| A",
"context": "We have the correct NodePath Set",
"expected": "|NodePath| A is equal to |NodePath| A",
"success": true
} ],
"context": "When we add it to the tree it runs",
"fullname": "test_When_we_add_it_to_the_tree_it_runs",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 99 is equal to |int| 99",
"context": "Then we get the stubbed return value",
"expected": "|int| 99 is equal to |int| 99",
"success": true
} ],
"context": "When we call a method from a grandchild node that we stubbed",
"fullname": "test_When_we_call_a_method_from_a_grandchild_node_that_we_stubbed",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 5,
"path": "res://tests/integration/scene_director.test.gd",
"source": {
"containers": [ "res://tests/integration", "res://tests" ],
"method": "",
"path": "res://tests/integration/scene_director.test.gd",
"tags": [  ],
"test": ExtResource( 4 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 5
}, {
"context": "Given a Script Director",
"methods": [ {
"assertions": [ {
"actual": "[Reference:1523] is instance of class: [GDScript:1516]",
"context": "Then we get that inner class back",
"expected": "[Reference:1523] is instance of class: [GDScript:1516]",
"success": true
} ],
"context": "When we double an inner class",
"fullname": "test_When_we_double_an_inner_class",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|Dictionary| {_enter_tree:{arguments:, default_arguments:}, _exit_tree:{arguments:, default_arguments:}, _get:{arguments:a, default_arguments:a}, _get_configuration_warning:{arguments:, default_arguments:}, _get_editor_description:{arguments:, default_arguments:}, _get_import_path:{arguments:, default_arguments:}, _get_property_list:{arguments:, default_arguments:}, _init:{arguments:, default_arguments:}, _input:{arguments:a, default_arguments:a}, _notification:{arguments:a, default_arguments:a}, _physics_process:{arguments:a, default_arguments:a}, _process:{arguments:a, default_arguments:a}, _ready:{arguments:, default_arguments:}, _set:{arguments:a, b, default_arguments:a, b}, _set_editor_description:{arguments:a, default_arguments:a}, _set_import_path:{arguments:a, default_arguments:a}, _to_string:{arguments:, default_arguments:}, _unhandled_input:{arguments:a, default_arguments:a}, _unhandled_key_input:{arguments:a, default_arguments:a}, add:{arguments:a, b, default_arguments:a, b}, add_child:{arguments:a, b, default_arguments:a, b = False}, add_child_below_node:{arguments:a, b, c, default_arguments:a, b, c = False}, add_to_group:{arguments:a, b, default_arguments:a, b = False}, add_user_signal:{arguments:a, b, default_arguments:a, b = []}, call:{arguments:a, default_arguments:a}, call_deferred:{arguments:a, default_arguments:a}, callv:{arguments:a, b, default_arguments:a, b}, can_process:{arguments:, default_arguments:}, can_translate_messages:{arguments:, default_arguments:}, connect:{arguments:a, b, c, d, e, default_arguments:a, b, c, d = [], e = 0}, disconnect:{arguments:a, b, c, default_arguments:a, b, c}, divide:{arguments:a, b, default_arguments:a, b}, duplicate:{arguments:a, default_arguments:a = 15}, emit_signal:{arguments:a, default_arguments:a}, find_node:{arguments:a, b, c, default_arguments:a, b = True, c = True}, find_parent:{arguments:a, default_arguments:a}, free:{arguments:, default_arguments:}, get:{arguments:a, default_arguments:a}, get_child:{arguments:a, default_arguments:a}, get_child_count:{arguments:, default_arguments:}, get_children:{arguments:, default_arguments:}, get_class:{arguments:, default_arguments:}, get_custom_multiplayer:{arguments:, default_arguments:}, get_filename:{arguments:, default_arguments:}, get_groups:{arguments:, default_arguments:}, get_incoming_connections:{arguments:, default_arguments:}, get_index:{arguments:, default_arguments:}, get_indexed:{arguments:a, default_arguments:a}, get_instance_id:{arguments:, default_arguments:}, get_meta:{arguments:a, default_arguments:a}, get_meta_list:{arguments:, default_arguments:}, get_method_list:{arguments:, default_arguments:}, get_multiplayer:{arguments:, default_arguments:}, get_name:{arguments:, default_arguments:}, get_network_master:{arguments:, default_arguments:}, get_node:{arguments:a, default_arguments:a}, get_node_and_resource:{arguments:a, default_arguments:a}, get_node_or_null:{arguments:a, default_arguments:a}, get_owner:{arguments:, default_arguments:}, get_parent:{arguments:, default_arguments:}, get_path:{arguments:, default_arguments:}, get_path_to:{arguments:a, default_arguments:a}, get_pause_mode:{arguments:, default_arguments:}, get_physics_process_delta_time:{arguments:, default_arguments:}, get_position_in_parent:{arguments:, default_arguments:}, get_process_delta_time:{arguments:, default_arguments:}, get_process_priority:{arguments:, default_arguments:}, get_property_list:{arguments:, default_arguments:}, get_scene_instance_load_placeholder:{arguments:, default_arguments:}, get_script:{arguments:, default_arguments:}, get_signal_connection_list:{arguments:a, default_arguments:a}, get_signal_list:{arguments:, default_arguments:}, get_tree:{arguments:, default_arguments:}, get_viewport:{arguments:, default_arguments:}, has_meta:{arguments:a, default_arguments:a}, has_method:{arguments:a, default_arguments:a}, has_node:{arguments:a, default_arguments:a}, has_node_and_resource:{arguments:a, default_arguments:a}, has_signal:{arguments:a, default_arguments:a}, has_user_signal:{arguments:a, default_arguments:a}, is_a_parent_of:{arguments:a, default_arguments:a}, is_blocking_signals:{arguments:, default_arguments:}, is_class:{arguments:a, default_arguments:a}, is_connected:{arguments:a, b, c, default_arguments:a, b, c}, is_displayed_folded:{arguments:, default_arguments:}, is_greater_than:{arguments:a, default_arguments:a}, is_in_group:{arguments:a, default_arguments:a}, is_inside_tree:{arguments:, default_arguments:}, is_network_master:{arguments:, default_arguments:}, is_physics_processing:{arguments:, default_arguments:}, is_physics_processing_internal:{arguments:, default_arguments:}, is_processing:{arguments:, default_arguments:}, is_processing_input:{arguments:, default_arguments:}, is_processing_internal:{arguments:, default_arguments:}, is_processing_unhandled_input:{arguments:, default_arguments:}, is_processing_unhandled_key_input:{arguments:, default_arguments:}, is_queued_for_deletion:{arguments:, default_arguments:}, math_fight:{arguments:, default_arguments:}, move_child:{arguments:a, b, default_arguments:a, b}, multiply:{arguments:a, b, default_arguments:a, b}, notification:{arguments:a, b, default_arguments:a, b = False}, pi:{arguments:, default_arguments:}, print_stray_nodes:{arguments:, default_arguments:}, print_tree:{arguments:, default_arguments:}, print_tree_pretty:{arguments:, default_arguments:}, propagate_call:{arguments:a, b, c, default_arguments:a, b = [], c = False}, propagate_notification:{arguments:a, default_arguments:a}, property_list_changed_notify:{arguments:, default_arguments:}, queue_free:{arguments:, default_arguments:}, raise:{arguments:, default_arguments:}, remove_and_skip:{arguments:, default_arguments:}, remove_child:{arguments:a, default_arguments:a}, remove_from_group:{arguments:a, default_arguments:a}, remove_meta:{arguments:a, default_arguments:a}, replace_by:{arguments:a, b, default_arguments:a, b = False}, request_ready:{arguments:, default_arguments:}, rpc:{arguments:a, default_arguments:a}, rpc_config:{arguments:a, b, default_arguments:a, b}, rpc_id:{arguments:a, b, default_arguments:a, b}, rpc_unreliable:{arguments:a, default_arguments:a}, rpc_unreliable_id:{arguments:a, b, default_arguments:a, b}, rset:{arguments:a, b, default_arguments:a, b}, rset_config:{arguments:a, b, default_arguments:a, b}, rset_id:{arguments:a, b, c, default_arguments:a, b, c}, rset_unreliable:{arguments:a, b, default_arguments:a, b}, rset_unreliable_id:{arguments:a, b, c, default_arguments:a, b, c}, set:{arguments:a, b, default_arguments:a, b}, set_block_signals:{arguments:a, default_arguments:a}, set_custom_multiplayer:{arguments:a, default_arguments:a}, set_deferred:{arguments:a, b, default_arguments:a, b}, set_display_folded:{arguments:a, default_arguments:a}, set_filename:{arguments:a, default_arguments:a}, set_indexed:{arguments:a, b, default_arguments:a, b}, set_message_translation:{arguments:a, default_arguments:a}, set_meta:{arguments:a, b, default_arguments:a, b}, set_name:{arguments:a, default_arguments:a}, set_network_master:{arguments:a, b, default_arguments:a, b = True}, set_owner:{arguments:a, default_arguments:a}, set_pause_mode:{arguments:a, default_arguments:a}, set_physics_process:{arguments:a, default_arguments:a}, set_physics_process_internal:{arguments:a, default_arguments:a}, set_process:{arguments:a, default_arguments:a}, set_process_input:{arguments:a, default_arguments:a}, set_process_internal:{arguments:a, default_arguments:a}, set_process_priority:{arguments:a, default_arguments:a}, set_process_unhandled_input:{arguments:a, default_arguments:a}, set_process_unhandled_key_input:{arguments:a, default_arguments:a}, set_scene_instance_load_placeholder:{arguments:a, default_arguments:a}, set_script:{arguments:a, default_arguments:a}, subtract:{arguments:a, b, default_arguments:a, b}, sum:{arguments:a, default_arguments:a}, to_string:{arguments:, default_arguments:}, tr:{arguments:a, default_arguments:a}, update_configuration_warning:{arguments:, default_arguments:}} is not equal to |Dictionary| {_enter_tree:{arguments:, default_arguments:}, _exit_tree:{arguments:, default_arguments:}, _get:{arguments:a, default_arguments:a}, _get_configuration_warning:{arguments:, default_arguments:}, _get_editor_description:{arguments:, default_arguments:}, _get_import_path:{arguments:, default_arguments:}, _get_property_list:{arguments:, default_arguments:}, _init:{arguments:, default_arguments:}, _input:{arguments:a, default_arguments:a}, _notification:{arguments:a, default_arguments:a}, _physics_process:{arguments:a, default_arguments:a}, _process:{arguments:a, default_arguments:a}, _ready:{arguments:, default_arguments:}, _set:{arguments:a, b, default_arguments:a, b}, _set_editor_description:{arguments:a, default_arguments:a}, _set_import_path:{arguments:a, default_arguments:a}, _to_string:{arguments:, default_arguments:}, _unhandled_input:{arguments:a, default_arguments:a}, _unhandled_key_input:{arguments:a, default_arguments:a}, add:{arguments:a, b, default_arguments:a, b}, add_child:{arguments:a, b, default_arguments:a, b = False}, add_child_below_node:{arguments:a, b, c, default_arguments:a, b, c = False}, add_to_group:{arguments:a, b, default_arguments:a, b = False}, add_user_signal:{arguments:a, b, default_arguments:a, b = []}, call:{arguments:a, default_arguments:a}, call_deferred:{arguments:a, default_arguments:a}, callv:{arguments:a, b, default_arguments:a, b}, can_process:{arguments:, default_arguments:}, can_translate_messages:{arguments:, default_arguments:}, connect:{arguments:a, b, c, d, e, default_arguments:a, b, c, d = [], e = 0}, disconnect:{arguments:a, b, c, default_arguments:a, b, c}, divide:{arguments:a, b, default_arguments:a, b}, duplicate:{arguments:a, default_arguments:a = 15}, emit_signal:{arguments:a, default_arguments:a}, find_node:{arguments:a, b, c, default_arguments:a, b = True, c = True}, find_parent:{arguments:a, default_arguments:a}, free:{arguments:, default_arguments:}, get:{arguments:a, default_arguments:a}, get_child:{arguments:a, default_arguments:a}, get_child_count:{arguments:, default_arguments:}, get_children:{arguments:, default_arguments:}, get_class:{arguments:, default_arguments:}, get_custom_multiplayer:{arguments:, default_arguments:}, get_filename:{arguments:, default_arguments:}, get_groups:{arguments:, default_arguments:}, get_incoming_connections:{arguments:, default_arguments:}, get_index:{arguments:, default_arguments:}, get_indexed:{arguments:a, default_arguments:a}, get_instance_id:{arguments:, default_arguments:}, get_meta:{arguments:a, default_arguments:a}, get_meta_list:{arguments:, default_arguments:}, get_method_list:{arguments:, default_arguments:}, get_multiplayer:{arguments:, default_arguments:}, get_name:{arguments:, default_arguments:}, get_network_master:{arguments:, default_arguments:}, get_node:{arguments:a, default_arguments:a}, get_node_and_resource:{arguments:a, default_arguments:a}, get_node_or_null:{arguments:a, default_arguments:a}, get_owner:{arguments:, default_arguments:}, get_parent:{arguments:, default_arguments:}, get_path:{arguments:, default_arguments:}, get_path_to:{arguments:a, default_arguments:a}, get_pause_mode:{arguments:, default_arguments:}, get_physics_process_delta_time:{arguments:, default_arguments:}, get_position_in_parent:{arguments:, default_arguments:}, get_process_delta_time:{arguments:, default_arguments:}, get_process_priority:{arguments:, default_arguments:}, get_property_list:{arguments:, default_arguments:}, get_scene_instance_load_placeholder:{arguments:, default_arguments:}, get_script:{arguments:, default_arguments:}, get_signal_connection_list:{arguments:a, default_arguments:a}, get_signal_list:{arguments:, default_arguments:}, get_tree:{arguments:, default_arguments:}, get_viewport:{arguments:, default_arguments:}, has_meta:{arguments:a, default_arguments:a}, has_method:{arguments:a, default_arguments:a}, has_node:{arguments:a, default_arguments:a}, has_node_and_resource:{arguments:a, default_arguments:a}, has_signal:{arguments:a, default_arguments:a}, has_user_signal:{arguments:a, default_arguments:a}, is_a_parent_of:{arguments:a, default_arguments:a}, is_blocking_signals:{arguments:, default_arguments:}, is_class:{arguments:a, default_arguments:a}, is_connected:{arguments:a, b, c, default_arguments:a, b, c}, is_displayed_folded:{arguments:, default_arguments:}, is_greater_than:{arguments:a, default_arguments:a}, is_in_group:{arguments:a, default_arguments:a}, is_inside_tree:{arguments:, default_arguments:}, is_network_master:{arguments:, default_arguments:}, is_physics_processing:{arguments:, default_arguments:}, is_physics_processing_internal:{arguments:, default_arguments:}, is_processing:{arguments:, default_arguments:}, is_processing_input:{arguments:, default_arguments:}, is_processing_internal:{arguments:, default_arguments:}, is_processing_unhandled_input:{arguments:, default_arguments:}, is_processing_unhandled_key_input:{arguments:, default_arguments:}, is_queued_for_deletion:{arguments:, default_arguments:}, math_fight:{arguments:, default_arguments:}, move_child:{arguments:a, b, default_arguments:a, b}, multiply:{arguments:a, b, default_arguments:a, b}, notification:{arguments:a, b, default_arguments:a, b = False}, pi:{arguments:, default_arguments:}, print_stray_nodes:{arguments:, default_arguments:}, print_tree:{arguments:, default_arguments:}, print_tree_pretty:{arguments:, default_arguments:}, propagate_call:{arguments:a, b, c, default_arguments:a, b = [], c = False}, propagate_notification:{arguments:a, default_arguments:a}, property_list_changed_notify:{arguments:, default_arguments:}, queue_free:{arguments:, default_arguments:}, raise:{arguments:, default_arguments:}, remove_and_skip:{arguments:, default_arguments:}, remove_child:{arguments:a, default_arguments:a}, remove_from_group:{arguments:a, default_arguments:a}, remove_meta:{arguments:a, default_arguments:a}, replace_by:{arguments:a, b, default_arguments:a, b = False}, request_ready:{arguments:, default_arguments:}, rpc:{arguments:a, default_arguments:a}, rpc_config:{arguments:a, b, default_arguments:a, b}, rpc_id:{arguments:a, b, default_arguments:a, b}, rpc_unreliable:{arguments:a, default_arguments:a}, rpc_unreliable_id:{arguments:a, b, default_arguments:a, b}, rset:{arguments:a, b, default_arguments:a, b}, rset_config:{arguments:a, b, default_arguments:a, b}, rset_id:{arguments:a, b, c, default_arguments:a, b, c}, rset_unreliable:{arguments:a, b, default_arguments:a, b}, rset_unreliable_id:{arguments:a, b, c, default_arguments:a, b, c}, set:{arguments:a, b, default_arguments:a, b}, set_block_signals:{arguments:a, default_arguments:a}, set_custom_multiplayer:{arguments:a, default_arguments:a}, set_deferred:{arguments:a, b, default_arguments:a, b}, set_display_folded:{arguments:a, default_arguments:a}, set_filename:{arguments:a, default_arguments:a}, set_indexed:{arguments:a, b, default_arguments:a, b}, set_message_translation:{arguments:a, default_arguments:a}, set_meta:{arguments:a, b, default_arguments:a, b}, set_name:{arguments:a, default_arguments:a}, set_network_master:{arguments:a, b, default_arguments:a, b = True}, set_owner:{arguments:a, default_arguments:a}, set_pause_mode:{arguments:a, default_arguments:a}, set_physics_process:{arguments:a, default_arguments:a}, set_physics_process_internal:{arguments:a, default_arguments:a}, set_process:{arguments:a, default_arguments:a}, set_process_input:{arguments:a, default_arguments:a}, set_process_internal:{arguments:a, default_arguments:a}, set_process_priority:{arguments:a, default_arguments:a}, set_process_unhandled_input:{arguments:a, default_arguments:a}, set_process_unhandled_key_input:{arguments:a, default_arguments:a}, set_scene_instance_load_placeholder:{arguments:a, default_arguments:a}, set_script:{arguments:a, default_arguments:a}, subtract:{arguments:a, b, default_arguments:a, b}, sum:{arguments:a, default_arguments:a}, to_string:{arguments:, default_arguments:}, tr:{arguments:a, default_arguments:a}, update_configuration_warning:{arguments:, default_arguments:}}",
"context": "Then they do not share resources",
"expected": "|Dictionary| {_enter_tree:{arguments:, default_arguments:}, _exit_tree:{arguments:, default_arguments:}, _get:{arguments:a, default_arguments:a}, _get_configuration_warning:{arguments:, default_arguments:}, _get_editor_description:{arguments:, default_arguments:}, _get_import_path:{arguments:, default_arguments:}, _get_property_list:{arguments:, default_arguments:}, _init:{arguments:, default_arguments:}, _input:{arguments:a, default_arguments:a}, _notification:{arguments:a, default_arguments:a}, _physics_process:{arguments:a, default_arguments:a}, _process:{arguments:a, default_arguments:a}, _ready:{arguments:, default_arguments:}, _set:{arguments:a, b, default_arguments:a, b}, _set_editor_description:{arguments:a, default_arguments:a}, _set_import_path:{arguments:a, default_arguments:a}, _to_string:{arguments:, default_arguments:}, _unhandled_input:{arguments:a, default_arguments:a}, _unhandled_key_input:{arguments:a, default_arguments:a}, add:{arguments:a, b, default_arguments:a, b}, add_child:{arguments:a, b, default_arguments:a, b = False}, add_child_below_node:{arguments:a, b, c, default_arguments:a, b, c = False}, add_to_group:{arguments:a, b, default_arguments:a, b = False}, add_user_signal:{arguments:a, b, default_arguments:a, b = []}, call:{arguments:a, default_arguments:a}, call_deferred:{arguments:a, default_arguments:a}, callv:{arguments:a, b, default_arguments:a, b}, can_process:{arguments:, default_arguments:}, can_translate_messages:{arguments:, default_arguments:}, connect:{arguments:a, b, c, d, e, default_arguments:a, b, c, d = [], e = 0}, disconnect:{arguments:a, b, c, default_arguments:a, b, c}, divide:{arguments:a, b, default_arguments:a, b}, duplicate:{arguments:a, default_arguments:a = 15}, emit_signal:{arguments:a, default_arguments:a}, find_node:{arguments:a, b, c, default_arguments:a, b = True, c = True}, find_parent:{arguments:a, default_arguments:a}, free:{arguments:, default_arguments:}, get:{arguments:a, default_arguments:a}, get_child:{arguments:a, default_arguments:a}, get_child_count:{arguments:, default_arguments:}, get_children:{arguments:, default_arguments:}, get_class:{arguments:, default_arguments:}, get_custom_multiplayer:{arguments:, default_arguments:}, get_filename:{arguments:, default_arguments:}, get_groups:{arguments:, default_arguments:}, get_incoming_connections:{arguments:, default_arguments:}, get_index:{arguments:, default_arguments:}, get_indexed:{arguments:a, default_arguments:a}, get_instance_id:{arguments:, default_arguments:}, get_meta:{arguments:a, default_arguments:a}, get_meta_list:{arguments:, default_arguments:}, get_method_list:{arguments:, default_arguments:}, get_multiplayer:{arguments:, default_arguments:}, get_name:{arguments:, default_arguments:}, get_network_master:{arguments:, default_arguments:}, get_node:{arguments:a, default_arguments:a}, get_node_and_resource:{arguments:a, default_arguments:a}, get_node_or_null:{arguments:a, default_arguments:a}, get_owner:{arguments:, default_arguments:}, get_parent:{arguments:, default_arguments:}, get_path:{arguments:, default_arguments:}, get_path_to:{arguments:a, default_arguments:a}, get_pause_mode:{arguments:, default_arguments:}, get_physics_process_delta_time:{arguments:, default_arguments:}, get_position_in_parent:{arguments:, default_arguments:}, get_process_delta_time:{arguments:, default_arguments:}, get_process_priority:{arguments:, default_arguments:}, get_property_list:{arguments:, default_arguments:}, get_scene_instance_load_placeholder:{arguments:, default_arguments:}, get_script:{arguments:, default_arguments:}, get_signal_connection_list:{arguments:a, default_arguments:a}, get_signal_list:{arguments:, default_arguments:}, get_tree:{arguments:, default_arguments:}, get_viewport:{arguments:, default_arguments:}, has_meta:{arguments:a, default_arguments:a}, has_method:{arguments:a, default_arguments:a}, has_node:{arguments:a, default_arguments:a}, has_node_and_resource:{arguments:a, default_arguments:a}, has_signal:{arguments:a, default_arguments:a}, has_user_signal:{arguments:a, default_arguments:a}, is_a_parent_of:{arguments:a, default_arguments:a}, is_blocking_signals:{arguments:, default_arguments:}, is_class:{arguments:a, default_arguments:a}, is_connected:{arguments:a, b, c, default_arguments:a, b, c}, is_displayed_folded:{arguments:, default_arguments:}, is_greater_than:{arguments:a, default_arguments:a}, is_in_group:{arguments:a, default_arguments:a}, is_inside_tree:{arguments:, default_arguments:}, is_network_master:{arguments:, default_arguments:}, is_physics_processing:{arguments:, default_arguments:}, is_physics_processing_internal:{arguments:, default_arguments:}, is_processing:{arguments:, default_arguments:}, is_processing_input:{arguments:, default_arguments:}, is_processing_internal:{arguments:, default_arguments:}, is_processing_unhandled_input:{arguments:, default_arguments:}, is_processing_unhandled_key_input:{arguments:, default_arguments:}, is_queued_for_deletion:{arguments:, default_arguments:}, math_fight:{arguments:, default_arguments:}, move_child:{arguments:a, b, default_arguments:a, b}, multiply:{arguments:a, b, default_arguments:a, b}, notification:{arguments:a, b, default_arguments:a, b = False}, pi:{arguments:, default_arguments:}, print_stray_nodes:{arguments:, default_arguments:}, print_tree:{arguments:, default_arguments:}, print_tree_pretty:{arguments:, default_arguments:}, propagate_call:{arguments:a, b, c, default_arguments:a, b = [], c = False}, propagate_notification:{arguments:a, default_arguments:a}, property_list_changed_notify:{arguments:, default_arguments:}, queue_free:{arguments:, default_arguments:}, raise:{arguments:, default_arguments:}, remove_and_skip:{arguments:, default_arguments:}, remove_child:{arguments:a, default_arguments:a}, remove_from_group:{arguments:a, default_arguments:a}, remove_meta:{arguments:a, default_arguments:a}, replace_by:{arguments:a, b, default_arguments:a, b = False}, request_ready:{arguments:, default_arguments:}, rpc:{arguments:a, default_arguments:a}, rpc_config:{arguments:a, b, default_arguments:a, b}, rpc_id:{arguments:a, b, default_arguments:a, b}, rpc_unreliable:{arguments:a, default_arguments:a}, rpc_unreliable_id:{arguments:a, b, default_arguments:a, b}, rset:{arguments:a, b, default_arguments:a, b}, rset_config:{arguments:a, b, default_arguments:a, b}, rset_id:{arguments:a, b, c, default_arguments:a, b, c}, rset_unreliable:{arguments:a, b, default_arguments:a, b}, rset_unreliable_id:{arguments:a, b, c, default_arguments:a, b, c}, set:{arguments:a, b, default_arguments:a, b}, set_block_signals:{arguments:a, default_arguments:a}, set_custom_multiplayer:{arguments:a, default_arguments:a}, set_deferred:{arguments:a, b, default_arguments:a, b}, set_display_folded:{arguments:a, default_arguments:a}, set_filename:{arguments:a, default_arguments:a}, set_indexed:{arguments:a, b, default_arguments:a, b}, set_message_translation:{arguments:a, default_arguments:a}, set_meta:{arguments:a, b, default_arguments:a, b}, set_name:{arguments:a, default_arguments:a}, set_network_master:{arguments:a, b, default_arguments:a, b = True}, set_owner:{arguments:a, default_arguments:a}, set_pause_mode:{arguments:a, default_arguments:a}, set_physics_process:{arguments:a, default_arguments:a}, set_physics_process_internal:{arguments:a, default_arguments:a}, set_process:{arguments:a, default_arguments:a}, set_process_input:{arguments:a, default_arguments:a}, set_process_internal:{arguments:a, default_arguments:a}, set_process_priority:{arguments:a, default_arguments:a}, set_process_unhandled_input:{arguments:a, default_arguments:a}, set_process_unhandled_key_input:{arguments:a, default_arguments:a}, set_scene_instance_load_placeholder:{arguments:a, default_arguments:a}, set_script:{arguments:a, default_arguments:a}, subtract:{arguments:a, b, default_arguments:a, b}, sum:{arguments:a, default_arguments:a}, to_string:{arguments:, default_arguments:}, tr:{arguments:a, default_arguments:a}, update_configuration_warning:{arguments:, default_arguments:}} != |Dictionary| {_enter_tree:{arguments:, default_arguments:}, _exit_tree:{arguments:, default_arguments:}, _get:{arguments:a, default_arguments:a}, _get_configuration_warning:{arguments:, default_arguments:}, _get_editor_description:{arguments:, default_arguments:}, _get_import_path:{arguments:, default_arguments:}, _get_property_list:{arguments:, default_arguments:}, _init:{arguments:, default_arguments:}, _input:{arguments:a, default_arguments:a}, _notification:{arguments:a, default_arguments:a}, _physics_process:{arguments:a, default_arguments:a}, _process:{arguments:a, default_arguments:a}, _ready:{arguments:, default_arguments:}, _set:{arguments:a, b, default_arguments:a, b}, _set_editor_description:{arguments:a, default_arguments:a}, _set_import_path:{arguments:a, default_arguments:a}, _to_string:{arguments:, default_arguments:}, _unhandled_input:{arguments:a, default_arguments:a}, _unhandled_key_input:{arguments:a, default_arguments:a}, add:{arguments:a, b, default_arguments:a, b}, add_child:{arguments:a, b, default_arguments:a, b = False}, add_child_below_node:{arguments:a, b, c, default_arguments:a, b, c = False}, add_to_group:{arguments:a, b, default_arguments:a, b = False}, add_user_signal:{arguments:a, b, default_arguments:a, b = []}, call:{arguments:a, default_arguments:a}, call_deferred:{arguments:a, default_arguments:a}, callv:{arguments:a, b, default_arguments:a, b}, can_process:{arguments:, default_arguments:}, can_translate_messages:{arguments:, default_arguments:}, connect:{arguments:a, b, c, d, e, default_arguments:a, b, c, d = [], e = 0}, disconnect:{arguments:a, b, c, default_arguments:a, b, c}, divide:{arguments:a, b, default_arguments:a, b}, duplicate:{arguments:a, default_arguments:a = 15}, emit_signal:{arguments:a, default_arguments:a}, find_node:{arguments:a, b, c, default_arguments:a, b = True, c = True}, find_parent:{arguments:a, default_arguments:a}, free:{arguments:, default_arguments:}, get:{arguments:a, default_arguments:a}, get_child:{arguments:a, default_arguments:a}, get_child_count:{arguments:, default_arguments:}, get_children:{arguments:, default_arguments:}, get_class:{arguments:, default_arguments:}, get_custom_multiplayer:{arguments:, default_arguments:}, get_filename:{arguments:, default_arguments:}, get_groups:{arguments:, default_arguments:}, get_incoming_connections:{arguments:, default_arguments:}, get_index:{arguments:, default_arguments:}, get_indexed:{arguments:a, default_arguments:a}, get_instance_id:{arguments:, default_arguments:}, get_meta:{arguments:a, default_arguments:a}, get_meta_list:{arguments:, default_arguments:}, get_method_list:{arguments:, default_arguments:}, get_multiplayer:{arguments:, default_arguments:}, get_name:{arguments:, default_arguments:}, get_network_master:{arguments:, default_arguments:}, get_node:{arguments:a, default_arguments:a}, get_node_and_resource:{arguments:a, default_arguments:a}, get_node_or_null:{arguments:a, default_arguments:a}, get_owner:{arguments:, default_arguments:}, get_parent:{arguments:, default_arguments:}, get_path:{arguments:, default_arguments:}, get_path_to:{arguments:a, default_arguments:a}, get_pause_mode:{arguments:, default_arguments:}, get_physics_process_delta_time:{arguments:, default_arguments:}, get_position_in_parent:{arguments:, default_arguments:}, get_process_delta_time:{arguments:, default_arguments:}, get_process_priority:{arguments:, default_arguments:}, get_property_list:{arguments:, default_arguments:}, get_scene_instance_load_placeholder:{arguments:, default_arguments:}, get_script:{arguments:, default_arguments:}, get_signal_connection_list:{arguments:a, default_arguments:a}, get_signal_list:{arguments:, default_arguments:}, get_tree:{arguments:, default_arguments:}, get_viewport:{arguments:, default_arguments:}, has_meta:{arguments:a, default_arguments:a}, has_method:{arguments:a, default_arguments:a}, has_node:{arguments:a, default_arguments:a}, has_node_and_resource:{arguments:a, default_arguments:a}, has_signal:{arguments:a, default_arguments:a}, has_user_signal:{arguments:a, default_arguments:a}, is_a_parent_of:{arguments:a, default_arguments:a}, is_blocking_signals:{arguments:, default_arguments:}, is_class:{arguments:a, default_arguments:a}, is_connected:{arguments:a, b, c, default_arguments:a, b, c}, is_displayed_folded:{arguments:, default_arguments:}, is_greater_than:{arguments:a, default_arguments:a}, is_in_group:{arguments:a, default_arguments:a}, is_inside_tree:{arguments:, default_arguments:}, is_network_master:{arguments:, default_arguments:}, is_physics_processing:{arguments:, default_arguments:}, is_physics_processing_internal:{arguments:, default_arguments:}, is_processing:{arguments:, default_arguments:}, is_processing_input:{arguments:, default_arguments:}, is_processing_internal:{arguments:, default_arguments:}, is_processing_unhandled_input:{arguments:, default_arguments:}, is_processing_unhandled_key_input:{arguments:, default_arguments:}, is_queued_for_deletion:{arguments:, default_arguments:}, math_fight:{arguments:, default_arguments:}, move_child:{arguments:a, b, default_arguments:a, b}, multiply:{arguments:a, b, default_arguments:a, b}, notification:{arguments:a, b, default_arguments:a, b = False}, pi:{arguments:, default_arguments:}, print_stray_nodes:{arguments:, default_arguments:}, print_tree:{arguments:, default_arguments:}, print_tree_pretty:{arguments:, default_arguments:}, propagate_call:{arguments:a, b, c, default_arguments:a, b = [], c = False}, propagate_notification:{arguments:a, default_arguments:a}, property_list_changed_notify:{arguments:, default_arguments:}, queue_free:{arguments:, default_arguments:}, raise:{arguments:, default_arguments:}, remove_and_skip:{arguments:, default_arguments:}, remove_child:{arguments:a, default_arguments:a}, remove_from_group:{arguments:a, default_arguments:a}, remove_meta:{arguments:a, default_arguments:a}, replace_by:{arguments:a, b, default_arguments:a, b = False}, request_ready:{arguments:, default_arguments:}, rpc:{arguments:a, default_arguments:a}, rpc_config:{arguments:a, b, default_arguments:a, b}, rpc_id:{arguments:a, b, default_arguments:a, b}, rpc_unreliable:{arguments:a, default_arguments:a}, rpc_unreliable_id:{arguments:a, b, default_arguments:a, b}, rset:{arguments:a, b, default_arguments:a, b}, rset_config:{arguments:a, b, default_arguments:a, b}, rset_id:{arguments:a, b, c, default_arguments:a, b, c}, rset_unreliable:{arguments:a, b, default_arguments:a, b}, rset_unreliable_id:{arguments:a, b, c, default_arguments:a, b, c}, set:{arguments:a, b, default_arguments:a, b}, set_block_signals:{arguments:a, default_arguments:a}, set_custom_multiplayer:{arguments:a, default_arguments:a}, set_deferred:{arguments:a, b, default_arguments:a, b}, set_display_folded:{arguments:a, default_arguments:a}, set_filename:{arguments:a, default_arguments:a}, set_indexed:{arguments:a, b, default_arguments:a, b}, set_message_translation:{arguments:a, default_arguments:a}, set_meta:{arguments:a, b, default_arguments:a, b}, set_name:{arguments:a, default_arguments:a}, set_network_master:{arguments:a, b, default_arguments:a, b = True}, set_owner:{arguments:a, default_arguments:a}, set_pause_mode:{arguments:a, default_arguments:a}, set_physics_process:{arguments:a, default_arguments:a}, set_physics_process_internal:{arguments:a, default_arguments:a}, set_process:{arguments:a, default_arguments:a}, set_process_input:{arguments:a, default_arguments:a}, set_process_internal:{arguments:a, default_arguments:a}, set_process_priority:{arguments:a, default_arguments:a}, set_process_unhandled_input:{arguments:a, default_arguments:a}, set_process_unhandled_key_input:{arguments:a, default_arguments:a}, set_scene_instance_load_placeholder:{arguments:a, default_arguments:a}, set_script:{arguments:a, default_arguments:a}, subtract:{arguments:a, b, default_arguments:a, b}, sum:{arguments:a, default_arguments:a}, to_string:{arguments:, default_arguments:}, tr:{arguments:a, default_arguments:a}, update_configuration_warning:{arguments:, default_arguments:}}",
"success": true
} ],
"context": "When we create two of it for the same script",
"fullname": "test_When_we_create_two_of_it_for_the_same_script",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|Object| [Node:1535] is equal to |Object| [Node:1535]",
"context": "Then we get the same double back",
"expected": "|Object| [Node:1535] is equal to |Object| [Node:1535]",
"success": true
} ],
"context": "When we call the double the second time",
"fullname": "test_When_we_call_double_a_second_time_on",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 3,
"path": "res://tests/integration/script_director.test.gd",
"source": {
"containers": [ "res://tests/integration", "res://tests" ],
"method": "",
"path": "res://tests/integration/script_director.test.gd",
"tags": [  ],
"test": ExtResource( 13 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 3
}, {
"context": "Given a Test Double",
"methods": [ {
"assertions": [ {
"actual": "|int| 4 is equal to |int| 4",
"context": "Then we get the correct result",
"expected": "|int| 4 is equal to |int| 4",
"success": true
} ],
"context": "When we call an add(x, y) method that we haven't directed",
"fullname": "test_When_we_call_an_add_method_that_we_have_not_directed",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|null| Null == null",
"context": "Then we get null",
"expected": "|null| Null == null",
"success": true
} ],
"context": "When we call a method that we have dummied",
"fullname": "test_When_we_call_a_method_that_we_have_dummied",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|Object| [Node:1552] is equal to |Object| [Node:1552]",
"context": "Then it returns that same node",
"expected": "|Object| [Node:1552] is equal to |Object| [Node:1552]",
"success": true
} ],
"context": "When we call a method that we have stubbed to return a node",
"fullname": "test_When_we_call_a_method_that_we_have_stubbed_to_return_a_node",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then it returns true",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we call a method that we have stubbed to return true",
"fullname": "test_When_we_call_a_method_that_we_have_stubbed_to_return_true",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "add was called",
"context": "Then we can see that it was called at least once",
"expected": "add was called",
"success": true
} ],
"context": "When we call a method that we are spying on",
"fullname": "test_When_we_call_a_method_that_we_are_spying_on",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "method: add was called with arguments: [10, 10]",
"context": "Then we can see that it was called with those arguments",
"expected": "method: add was called with arguments: [10, 10]",
"success": true
} ],
"context": "When we pass arguments to a method call that we are spying on",
"fullname": "test_When_we_pass_arguments_to_a_method_call_that_we_are_spying_on",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 100 is equal to |int| 100",
"context": "Then it returns the default stubbed value when the arguments don't match any pattern",
"expected": "|int| 100 is equal to |int| 100",
"success": true
}, {
"actual": "|int| 1000 is equal to |int| 1000",
"context": "Then it returns the the corresponding value to the pattern the arguments matched",
"expected": "|int| 1000 is equal to |int| 1000",
"success": true
} ],
"context": "When we call a method that was stubbed to return different values based on argument patterns",
"fullname": "test_When_we_call_a_method_that_was_stubbed_to_return_different_values_based_on_argument_patterns",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|int| 9999 is equal to |int| 9999",
"context": "Then it returns the corresponding value when the pattern matches",
"expected": "|int| 9999 is equal to |int| 9999",
"success": true
} ],
"context": "When we call a method that was stubbed with an argument pattern that includes a non-primitive object",
"fullname": "test_When_we_call_a_method_that_was_stubbed_with_an_argument_pattern_that_includes_a_non_primitive_object",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|String| Jackie is equal to |String| Jackie",
"context": "Then we can double the object successfully",
"expected": "|String| Jackie is equal to |String| Jackie",
"success": true
} ],
"context": "When we pass in dependecies on double",
"fullname": "test_When_we_pass_in_deps_on_double",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 9999 is equal to |int| 9999",
"context": "Then it returns the corresponding value when the partial pattern matches",
"expected": "|int| 9999 is equal to |int| 9999",
"success": true
} ],
"context": "When we call a method that was stubbed with a partial (ie using any()) argument pattern",
"fullname": "test_When_we_call_a_method_that_was_stubbed_with_a_partial_argument_pattern",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "(1, 1) is builtin: Vector2",
"context": "Then we can call methods on it",
"expected": "(1, 1) is builtin: Vector2",
"success": true
} ],
"context": "When we double an inner class",
"fullname": "test_When_we_double_an_inner_class",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|Array| [10, 5] is equal to |Array| [10, 5]",
"context": "Then it returns a value",
"expected": "|Array| [10, 5] is equal to |Array| [10, 5]",
"success": true
} ],
"context": "When we pass an Object with a call_func function",
"fullname": "test_When_we_pass_an_object_with_callfunc_method_as_a_subcall",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 99 is equal to |int| 99",
"context": "Then it affects the state of the double",
"expected": "|int| 99 is equal to |int| 99",
"success": true
} ],
"context": "When we pass a funcref as a subcall",
"fullname": "test_When_we_pass_a_funcref_as_a_subcall",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| True is equal to |bool| True",
"context": "Then we can call it",
"expected": "|bool| True is equal to |bool| True",
"success": true
} ],
"context": "When we stubbed a keyworded method by passing in the correct keyword",
"fullname": "test_When_we_stubbed_a_keyword_method_by_passing_in_the_correct_keyword",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 99 is equal to |int| 99",
"context": "Then it returns a value",
"expected": "|int| 99 is equal to |int| 99",
"success": true
} ],
"context": "When we pass a funcref as a subcall that returns",
"fullname": "test_When_we_pass_a_funcref_as_a_subcall_that_returns_a_value",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 4 is equal to |int| 4",
"context": "Then it calls its super implementation by default",
"expected": "|int| 4 is equal to |int| 4",
"success": true
}, {
"actual": "|int| 9999 is equal to |int| 9999",
"context": "Then it does not call its super implementation when arguments patterns match a different return value",
"expected": "|int| 9999 is equal to |int| 9999",
"success": true
} ],
"context": "When we call a method that we stubbed to call its super implementation by default",
"fullname": "test_When_we_call_a_method_that_we_stubbed_to_call_its_super_implementation_by_default",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|null| Null == null",
"context": "Then we get the stubbed value back",
"expected": "|null| Null == null",
"success": true
} ],
"context": "When we stub a method of a doubled inner class",
"fullname": "test_When_we_stub_a_method_of_a_double_inner_class",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|float| 6.283185 is equal to |float| 6.283185",
"context": "Then we can call the static methods of that inner double",
"expected": "|float| 6.283185 is equal to |float| 6.283185",
"success": true
} ],
"context": "When we add an doubled inner class to it",
"fullname": "test_When_we_add_a_doubled_inner_class_to_it",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|String| Jackie is equal to |String| Jackie",
"context": "Then we can double the object successfully",
"expected": "|String| Jackie is equal to |String| Jackie",
"success": true
} ],
"context": "When we pass in dependecies on direct",
"fullname": "test_When_we_pass_in_deps_on_direct",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 19,
"path": "res://tests/integration/test_double.test.gd",
"source": {
"containers": [ "res://tests/integration", "res://tests" ],
"method": "",
"path": "res://tests/integration/test_double.test.gd",
"tags": [  ],
"test": ExtResource( 14 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 19
}, {
"context": "Given a Boolean Assertion",
"methods": [ {
"assertions": [ {
"actual": "|bool| True != false",
"context": "",
"expected": "|bool| True == false",
"success": false
} ],
"context": " intentional failure",
"fullname": "test_intentional_failure",
"passed": 0,
"success": false,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then it passes",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When calling asserts.is_true(true)",
"fullname": "test_when_calling_asserts_is_true",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| False == false",
"context": "Then it passes",
"expected": "|bool| False == false",
"success": true
} ],
"context": "When calling asserts.is_false(false)",
"fullname": "test_when_calling_asserts_is_false",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 2,
"path": "res://tests/unit/boolean.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/boolean.test.gd",
"tags": [  ],
"test": ExtResource( 11 ),
"yield_time": 0.0
},
"success": false,
"time_taken": 0.0,
"total": 3
}, {
"context": "Given an Equality Assertion",
"methods": [ {
"assertions": [ {
"actual": "|int| 1 is equal to |int| 1",
"context": "Then it passes",
"expected": "|int| 1 is equal to |int| 1",
"success": true
} ],
"context": "When calling asserts.is_equal(1, 1)",
"fullname": "test_when_calling_is_equal",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 1 is less than |int| 2",
"context": "Then it passes",
"expected": "|int| 1 is less than |int| 2",
"success": true
} ],
"context": "When calling asserts.is_less_than(2, 1)",
"fullname": "test_when_calling_is_less_than",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 1 is equal or less than |int| 1",
"context": "Then it passes!",
"expected": "|int| 1 is equal or less than |int| 1",
"success": true
} ],
"context": "When calling asserts.is_equal_or_less_than(1, 1)",
"fullname": "test_when_calling_is_equal_or_less_than_with_equal_values",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 2 is greater than |int| 1",
"context": "Then it passes",
"expected": "|int| 2 is greater than |int| 1",
"success": true
} ],
"context": "When calling asserts.is_greater_than(2, 1)",
"fullname": "test_when_calling_is_greater_than",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 1 is equal or greater |int| 1",
"context": "Then it passes",
"expected": "|int| 1 is equal or greater |int| 1",
"success": true
} ],
"context": "When calling asserts.is_equal_or_greater_than(1, 1)",
"fullname": "test_when_calling_is_equal_or_greater_than_with_equal_values",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 5 is not equal to |int| 6",
"context": "Then it passes",
"expected": "|int| 5 != |int| 6",
"success": true
} ],
"context": "When callign asserts.is_not_equal(5, 6)",
"fullname": "test_when_calling_is_not_equal",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 2 is equal or greater |int| 1",
"context": "Then it passes",
"expected": "|int| 2 is equal or greater |int| 1",
"success": true
} ],
"context": "When calling asserts.is_equal_or_greater_than(2, 1)",
"fullname": "test_when_calling_is_equal_or_greater_than",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 7,
"path": "res://tests/unit/equality.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/equality.test.gd",
"tags": [  ],
"test": ExtResource( 8 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 7
}, {
"context": "Given A File Assertion",
"methods": [ {
"assertions": [ {
"actual": "res://tests/unit/file.test.gd exists",
"context": "Then it passes",
"expected": "res://tests/unit/file.test.gd exists",
"success": true
} ],
"context": "When calling asserts.file_exists when the file is this suite",
"fullname": "test_when_calling_file_exists_when_file_is_self",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "res://somefile.gd does not exist",
"context": "Then it passes",
"expected": "res://somefile.gd does not exist",
"success": true
} ],
"context": "When calling asserts.file_does_not_exist when there is no file",
"fullname": "test_when_calling_file_does_not_exist_when_there_is_no_file",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": " does not exist",
"context": "Then it passes",
"expected": " does not exist",
"success": true
} ],
"context": "When calling asserts file does not exist when path is empty",
"fullname": "test_when_calling_file_does_not_exist_when_path_is_empty",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 3,
"path": "res://tests/unit/file.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/file.test.gd",
"tags": [  ],
"test": ExtResource( 3 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 3
}, {
"context": "Given an Is Instance of class/type Assertion",
"methods": [ {
"assertions": [ {
"actual": "|Object| [Node:1700] != null",
"context": "node is not null",
"expected": "|Object| [Node:1700] != null",
"success": true
}, {
"actual": "[Node:1700] is builtin: Object",
"context": "An instance of node is an Object",
"expected": "[Node:1700] is builtin: Object",
"success": true
} ],
"context": "When calling is asserts.object(node: Node)",
"fullname": "test_when_calling_is_object",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|Plane| 0, 0, 0, 0 != null",
"context": "plane is not null",
"expected": "|Plane| 0, 0, 0, 0 != null",
"success": true
}, {
"actual": "0, 0, 0, 0 is builtin: Plane",
"context": "then it passes",
"expected": "0, 0, 0, 0 is builtin: Plane",
"success": true
} ],
"context": "When calling asserts.is_Plane(plane: Plane())",
"fullname": "test_when_calling_is_Plane",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|PoolByteArray| [PoolByteArray] != null",
"context": "bytes is not null",
"expected": "|PoolByteArray| [PoolByteArray] != null",
"success": true
}, {
"actual": "[PoolByteArray] is builtin: PoolByteArray",
"context": "Then it passes",
"expected": "[PoolByteArray] is builtin: PoolByteArray",
"success": true
} ],
"context": "When calling asserts.is_PoolByteArray(bytes: PoolByteArray)",
"fullname": "test_when_calling_is_PoolByteArray",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|PoolColorArray| [PoolColorArray] != null",
"context": "colors is not null",
"expected": "|PoolColorArray| [PoolColorArray] != null",
"success": true
}, {
"actual": "[PoolColorArray] is builtin: PoolColorArray",
"context": "Then it passes",
"expected": "[PoolColorArray] is builtin: PoolColorArray",
"success": true
} ],
"context": "When calling asserts.is_PoolColorArray(colors: PoolColorArray)",
"fullname": "test_when_calling_is_PoolColorArray",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|PoolIntArray| [] != null",
"context": "ints is not null",
"expected": "|PoolIntArray| [] != null",
"success": true
}, {
"actual": "[] is builtin: PoolIntArray",
"context": "Then it passes",
"expected": "[] is builtin: PoolIntArray",
"success": true
} ],
"context": "When calling asserts.is_PoolIntArray(ints: PoolIntArray)",
"fullname": "test_when_calling_is_PoolIntArray",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|NodePath| . != null",
"context": "@'Parent/Child' is not null",
"expected": "|NodePath| . != null",
"success": true
}, {
"actual": ". is builtin: NodePath",
"context": "Then it passes",
"expected": ". is builtin: NodePath",
"success": true
} ],
"context": "When calling asserts.is_NodePath(@'Parent/Child')",
"fullname": "test_when_calling_is_NodePath",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "1 is builtin: int",
"context": "Then it passes",
"expected": "1 is builtin: int",
"success": true
} ],
"context": "When callign asserts.is_int(1)",
"fullname": "test_when_calling_is_int",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|Array| [] != null",
"context": "array is not null",
"expected": "|Array| [] != null",
"success": true
}, {
"actual": "[] is builtin: Array",
"context": "Then it passes",
"expected": "[] is builtin: Array",
"success": true
} ],
"context": "When calling asserts.is_Array(array: Array)",
"fullname": "test_when_calling_is_Array",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|AABB| 0, 0, 0 - 0, 0, 0 != null",
"context": "AABB is not null",
"expected": "|AABB| 0, 0, 0 - 0, 0, 0 != null",
"success": true
}, {
"actual": "0, 0, 0 - 0, 0, 0 is builtin: AABB",
"context": "Then it passes",
"expected": "0, 0, 0 - 0, 0, 0 is builtin: AABB",
"success": true
} ],
"context": "When calling asserts.is_AABB(aabb: AABB)",
"fullname": "test_when_calling_is_AABB",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "{} is builtin: Dictionary",
"context": "Then it passes",
"expected": "{} is builtin: Dictionary",
"success": true
} ],
"context": "When calling asserts.is_Dictionary({})",
"fullname": "test_when_calling_is_Dictionary",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "1 is builtin: float",
"context": "Then it passes",
"expected": "1 is builtin: float",
"success": true
} ],
"context": "When calling asserts.is_float(1.0)",
"fullname": "test_when_calling_is_float",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|Basis| ((1, 0, 0), (0, 1, 0), (0, 0, 1)) != null",
"context": "basis is not null",
"expected": "|Basis| ((1, 0, 0), (0, 1, 0), (0, 0, 1)) != null",
"success": true
}, {
"actual": "((1, 0, 0), (0, 1, 0), (0, 0, 1)) is builtin: Basis",
"context": "Then it passes",
"expected": "((1, 0, 0), (0, 1, 0), (0, 0, 1)) is builtin: Basis",
"success": true
} ],
"context": "When calling asserts.is_basis(basis: Basis",
"fullname": "test_when_calling_is_Basis",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "True is builtin: bool",
"context": "Then it passes",
"expected": "True is builtin: bool",
"success": true
} ],
"context": "When calling asserts.is_bool(true)",
"fullname": "test_when_calling_is_bool",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|Color| 0,0,0,1 != null",
"context": "color is not null",
"expected": "|Color| 0,0,0,1 != null",
"success": true
}, {
"actual": "0,0,0,1 is builtin: Color",
"context": "Then it passes",
"expected": "0,0,0,1 is builtin: Color",
"success": true
} ],
"context": "When calling asserts.is_color(color: Color)",
"fullname": "test_when_calling_is_Color",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|Rect2| (0, 0, 0, 0) != null",
"context": "rect2 is not null",
"expected": "|Rect2| (0, 0, 0, 0) != null",
"success": true
}, {
"actual": "(0, 0, 0, 0) is builtin: Rect2",
"context": "Then it passes",
"expected": "(0, 0, 0, 0) is builtin: Rect2",
"success": true
} ],
"context": "When calling asserts.is_Rect2(rect2: Rect2)",
"fullname": "test_when_calling_is_Rect2",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|Transform| 1, 0, 0, 0, 1, 0, 0, 0, 1 - 0, 0, 0 != null",
"context": "transform is not null",
"expected": "|Transform| 1, 0, 0, 0, 1, 0, 0, 0, 1 - 0, 0, 0 != null",
"success": true
}, {
"actual": "1, 0, 0, 0, 1, 0, 0, 0, 1 - 0, 0, 0 is builtin: Transform",
"context": "Then it passes",
"expected": "1, 0, 0, 0, 1, 0, 0, 0, 1 - 0, 0, 0 is builtin: Transform",
"success": true
} ],
"context": "When calling asserts.is_Transform(transform: Transform)",
"fullname": "test_when_calling_is_Transform",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|PoolStringArray| [] != null",
"context": "strs is not null",
"expected": "|PoolStringArray| [] != null",
"success": true
}, {
"actual": "[] is builtin: PoolStringArray",
"context": "Then it passes",
"expected": "[] is builtin: PoolStringArray",
"success": true
} ],
"context": "When calling is asserts.is_PoolStringArray(strs: PoolStringArray)",
"fullname": "test_when_calling_is_PoolStringArray",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|PoolVector3Array| [] != null",
"context": "vec3s is not null",
"expected": "|PoolVector3Array| [] != null",
"success": true
}, {
"actual": "[] is builtin: PoolVector3Array",
"context": "Then it passes",
"expected": "[] is builtin: PoolVector3Array",
"success": true
} ],
"context": "When calling is asserts.is_PoolVector3Array(vec3s: PoolVector3Array)",
"fullname": "test_when_calling_is_PoolVector3Array",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|Vector3| (0, 0, 0) != null",
"context": "vec3 is not null",
"expected": "|Vector3| (0, 0, 0) != null",
"success": true
}, {
"actual": "(0, 0, 0) is builtin: Vector3",
"context": "Then it passes",
"expected": "(0, 0, 0) is builtin: Vector3",
"success": true
} ],
"context": "When calling asserts.is_Vector3(vec3: Vector3",
"fullname": "test_when_calling_is_Vector3",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|PoolVector2Array| [] != null",
"context": "vec2s is not null",
"expected": "|PoolVector2Array| [] != null",
"success": true
}, {
"actual": "[] is builtin: PoolVector2Array",
"context": "Then it passes",
"expected": "[] is builtin: PoolVector2Array",
"success": true
} ],
"context": "When calling is asserts.is_PoolVector2Array(vec2s: PoolVector2Array)",
"fullname": "test_when_calling_is_PoolVector2Array",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|PoolRealArray| [] != null",
"context": "reals is not null",
"expected": "|PoolRealArray| [] != null",
"success": true
}, {
"actual": "[] is builtin: PoolRealArray",
"context": "Then it passes",
"expected": "[] is builtin: PoolRealArray",
"success": true
} ],
"context": "When calling is asserts.is_PoolRealArray(reals: PoolRealArray)",
"fullname": "test_when_calling_is_PoolRealArray",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|String|  != null",
"context": "strs is not null",
"expected": "|String|  != null",
"success": true
}, {
"actual": " is builtin: String",
"context": "Then it passes",
"expected": " is builtin: String",
"success": true
} ],
"context": "When calling asserts.is_string(strs: String)",
"fullname": "test_when_calling_is_string",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|Transform2D| ((1, 0), (0, 1), (0, 0)) != null",
"context": "transform2D is not null",
"expected": "|Transform2D| ((1, 0), (0, 1), (0, 0)) != null",
"success": true
}, {
"actual": "((1, 0), (0, 1), (0, 0)) is builtin: Transform2D",
"context": "Then it passes",
"expected": "((1, 0), (0, 1), (0, 0)) is builtin: Transform2D",
"success": true
} ],
"context": "When calling asserts.is_Transform(transform2D: Transform2D)",
"fullname": "test_when_calling_is_Transform2D",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|RID| [RID] != null",
"context": "rid is not null",
"expected": "|RID| [RID] != null",
"success": true
}, {
"actual": "[RID] is builtin: RID",
"context": "Then it passes",
"expected": "[RID] is builtin: RID",
"success": true
} ],
"context": "When calling asserts.is_RID(rid: RID)",
"fullname": "test_when_calling_is_RID",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|Vector2| (0, 0) != null",
"context": "vec2 is not null",
"expected": "|Vector2| (0, 0) != null",
"success": true
}, {
"actual": "(0, 0) is builtin: Vector2",
"context": "Then it passes",
"expected": "(0, 0) is builtin: Vector2",
"success": true
} ],
"context": "When calling asserts.is_Vector2(vec2)",
"fullname": "test_when_calling_is_Vector2",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|Quat| (0, 0, 0, 1) != null",
"context": "quat is not null",
"expected": "|Quat| (0, 0, 0, 1) != null",
"success": true
}, {
"actual": "(0, 0, 0, 1) is builtin: Quat",
"context": "Then it passes",
"expected": "(0, 0, 0, 1) is builtin: Quat",
"success": true
} ],
"context": "When calling asserts.is_Quat(quat: Quat)",
"fullname": "test_when_calling_is_Quat",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
} ],
"passed": 26,
"path": "res://tests/unit/is_instance.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/is_instance.test.gd",
"tags": [  ],
"test": ExtResource( 6 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 26
}, {
"context": "Given an Is Not Instance of class/type Assertion",
"methods": [ {
"assertions": [ {
"actual": "Null is not builtin: Color",
"context": "Then it passes",
"expected": "Null is not builtin: Color",
"success": true
} ],
"context": "when calling asserts.is_not_Color(null)",
"fullname": "test_when_calling_is_not_Color",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Basis",
"context": "Then it passes",
"expected": "Null is not builtin: Basis",
"success": true
} ],
"context": "when calling asserts.is_not_Basis(null)",
"fullname": "test_when_calling_is_not_Basis",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: bool",
"context": "Then it passes",
"expected": "Null is not builtin: bool",
"success": true
} ],
"context": "when calling asserts.is_not_bool(null)",
"fullname": "test_when_calling_is_not_bool",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Array",
"context": "Then it passes",
"expected": "Null is not builtin: Array",
"success": true
} ],
"context": "when calling asserts.is_not_Array(null)",
"fullname": "test_when_calling_is_not_Array",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: AABB",
"context": "Then it passes",
"expected": "Null is not builtin: AABB",
"success": true
} ],
"context": "when calling asserts.is_not_AABB(null)",
"fullname": "test_when_calling_is_not_AABB",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Rect2",
"context": "Then it passes",
"expected": "Null is not builtin: Rect2",
"success": true
} ],
"context": "when calling asserts.is_not_Rect2(null)",
"fullname": "test_when_calling_is_not_Rect2",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: RID",
"context": "Then it passes",
"expected": "Null is not builtin: RID",
"success": true
} ],
"context": "when calling asserts.is_not_RID(null)",
"fullname": "test_when_calling_is_not_RID",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Dictionary",
"context": "Then it passes",
"expected": "Null is not builtin: Dictionary",
"success": true
} ],
"context": "when calling asserts.is_not_Dictionary(null)",
"fullname": "test_when_calling_is_not_Dictionary",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: int",
"context": "Then it passes",
"expected": "Null is not builtin: int",
"success": true
} ],
"context": "when calling asserts.is_not_int(null)",
"fullname": "test_when_calling_is_not_int",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: PoolVector3Array",
"context": "Then it passes",
"expected": "Null is not builtin: PoolVector3Array",
"success": true
} ],
"context": "when calling asserts.is_not_PoolVector3Array(null)",
"fullname": "test_when_calling_is_not_PoolVector3Array",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: String",
"context": "Then it passes",
"expected": "Null is not builtin: String",
"success": true
} ],
"context": "when calling asserts.is_not_String(null)",
"fullname": "test_when_calling_is_not_String",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: float",
"context": "Then it passes",
"expected": "Null is not builtin: float",
"success": true
} ],
"context": "when calling asserts.is_not_float(null)",
"fullname": "test_when_calling_is_not_float",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Object",
"context": "Then it passes",
"expected": "Null is not builtin: Object",
"success": true
} ],
"context": "when calling asserts.is_not_Object(null)",
"fullname": "test_when_calling_is_not_Object",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: PoolIntArray",
"context": "Then it passes",
"expected": "Null is not builtin: PoolIntArray",
"success": true
} ],
"context": "when calling asserts.is_not_PoolIntArray(null)",
"fullname": "test_when_calling_is_not_PoolIntArray",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: PoolStringArray",
"context": "Then it passes",
"expected": "Null is not builtin: PoolStringArray",
"success": true
} ],
"context": "when calling asserts.is_not_PoolStringArray(null)",
"fullname": "test_when_calling_is_not_PoolStringArray",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: PoolVector2Array",
"context": "Then it passes",
"expected": "Null is not builtin: PoolVector2Array",
"success": true
} ],
"context": "when calling asserts.is_not_PoolVector2Array(null)",
"fullname": "test_when_calling_is_not_PoolVector2Array",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: NodePath",
"context": "Then it passes",
"expected": "Null is not builtin: NodePath",
"success": true
} ],
"context": "when calling asserts.is_not_NodePath(null)",
"fullname": "test_when_calling_is_not_NodePath",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: PoolColorArray",
"context": "Then it passes",
"expected": "Null is not builtin: PoolColorArray",
"success": true
} ],
"context": "when calling asserts.is_not_PoolColorArray(null)",
"fullname": "test_when_calling_is_not_PoolColorArray",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Plane",
"context": "Then it passes",
"expected": "Null is not builtin: Plane",
"success": true
} ],
"context": "when calling asserts.is_not_Plane(null)",
"fullname": "test_when_calling_is_not_Plane",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: PoolRealArray",
"context": "Then it passes",
"expected": "Null is not builtin: PoolRealArray",
"success": true
} ],
"context": "when calling asserts.is_not_PoolRealArray(null)",
"fullname": "test_when_calling_is_not_PoolRealArray",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: PoolByteArray",
"context": "Then it passes",
"expected": "Null is not builtin: PoolByteArray",
"success": true
} ],
"context": "when calling asserts.is_not_PoolByteArray(null)",
"fullname": "test_when_calling_is_not_PoolByteArray",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Quat",
"context": "Then it passes",
"expected": "Null is not builtin: Quat",
"success": true
} ],
"context": "when calling asserts.is_not_Quat(null)",
"fullname": "test_when_calling_is_not_Quat",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Transform",
"context": "Then it passes",
"expected": "Null is not builtin: Transform",
"success": true
} ],
"context": "when calling asserts.is_not_Transform(null)",
"fullname": "test_when_calling_is_not_Transform",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Transform2D",
"context": "Then it passes",
"expected": "Null is not builtin: Transform2D",
"success": true
} ],
"context": "when calling asserts.is_not_Transform2D(null)",
"fullname": "test_when_calling_is_not_Transform2D",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Vector3",
"context": "Then it passes",
"expected": "Null is not builtin: Vector3",
"success": true
} ],
"context": "when calling asserts.is_not_Vector3(null)",
"fullname": "test_when_calling_is_not_Vector3",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Vector2",
"context": "Then it passes",
"expected": "Null is not builtin: Vector2",
"success": true
} ],
"context": "when calling asserts.is_not_Vector2(null)",
"fullname": "test_when_calling_is_not_Vector2",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 26,
"path": "res://tests/unit/is_not_instance.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/is_not_instance.test.gd",
"tags": [  ],
"test": ExtResource( 2 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 26
}, {
"context": "Given a Null Assertion",
"methods": [ {
"assertions": [ {
"actual": "|null| Null == null",
"context": "Then it passes",
"expected": "|null| Null == null",
"success": true
} ],
"context": "When calling asserts.is_null(null)",
"fullname": "test_when_calling_null_is_null",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|Object| [Deleted Object] == null",
"context": "A Freed Node is null in Engine 3.2.2 or greater",
"expected": "|Object| [Deleted Object] == null",
"success": true
} ],
"context": "When calling freed object is null",
"fullname": "test_when_calling_freed_object_is_not_null",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|Object| [Node:1784] != null",
"context": "Then it passes",
"expected": "|Object| [Node:1784] != null",
"success": true
} ],
"context": "When calling Node is not null",
"fullname": "test_when_calling_node_is_not_null",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 3,
"path": "res://tests/unit/null.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/null.test.gd",
"tags": [  ],
"test": ExtResource( 12 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 3
}, {
"context": "Given an Object Assertion",
"methods": [ {
"assertions": [ {
"actual": "[Node:1786] does not have meta: bad_meta",
"context": "Then it passes",
"expected": "[Node:1786] does not have meta: bad_meta",
"success": true
} ],
"context": "When calling asserts.object_does_not_have_meta()",
"fullname": "test_when_calling_does_not_have_meta",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is freed from memory",
"context": "Then it passes",
"expected": "Null is freed from memory",
"success": true
} ],
"context": "When calling asserts.is_freed(freed_object",
"fullname": "test_when_calling_freed_object_is_freed",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:1792] is not freed",
"context": "Then it passes",
"expected": "[Node:1792] is not freed",
"success": true
} ],
"context": "When calling asserts.is_not_freed(unfreed_object)",
"fullname": "test_when_calling_unfreed_object_is_not_freed",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:1786] has meta: dummy",
"context": "Then it passes",
"expected": "[Node:1786] has meta: dummy",
"success": true
}, {
"actual": "[Node:1786] has meta: dummy",
"context": "Then it passes",
"expected": "[Node:1786] has meta: dummy",
"success": true
} ],
"context": "When calling asserts.object_has_meta() after adding metadata",
"fullname": "test_when_calling_has_meta_after_adding_metadata",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "[Node:1786] does not have meta: confusing",
"context": "Then it passes",
"expected": "[Node:1786] does not have meta: confusing",
"success": true
} ],
"context": "When calling asserts.object_has_meta with real key but null val",
"fullname": "test_when_calling_does_not_have_meta_real_key_null_value_pair",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:1786] does not have user signal: builtin_dummy",
"context": "Then it passes",
"expected": "[Node:1786] does not have user signal: builtin_dummy",
"success": true
} ],
"context": "When calling does not have user signal with class signal",
"fullname": "test_when_calling_does_not_have_user_signal_with_class_signal_constant",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:1786] does not have user signal: false_signal",
"context": "Then it passes",
"expected": "[Node:1786] does not have user signal: false_signal",
"success": true
} ],
"context": "When calling obj_does_not_have_user_signal with fake signal",
"fullname": "test_when_calling_does_not_have_user_signal",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:1799] is queued for deletion",
"context": "Then it passes",
"expected": "[Node:1799] is queued for deletion",
"success": true
} ],
"context": "When calling asserts.object_is_queued for deletion after calling queue_free",
"fullname": "test_when_calling_obj_is_queued_for_deletion_after_calling_queue_free",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:1786] has user signal: dummy_signal",
"context": "Then it passes",
"expected": "[Node:1786] has user signal: dummy_signal",
"success": true
} ],
"context": "When calling obj_has_user_signal after adding a signal",
"fullname": "test_when_calling_has_user_signal_after_adding_a_signal",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:1802] is not queued for deletion",
"context": "Then it passes",
"expected": "[Node:1802] is not queued for deletion",
"success": true
} ],
"context": "When calling asserts.object_is_not_for_queued_deletion after not calling queue free()",
"fullname": "test_when_calling_obj_is_not_for_queued_deletion_after_not_calling_queue_free",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:1804] is not blocking signals",
"context": "Then it passes",
"expected": "[Node:1804] is not blocking signals",
"success": true
} ],
"context": "When calling is not blocking signals while not blocking signals",
"fullname": "test_is_not_blocking_signals",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:1806] is blocking signals",
"context": "Then it passes",
"expected": "[Node:1806] is blocking signals",
"success": true
} ],
"context": "When calling is blocking signals while blocking signals",
"fullname": "test_is_blocking_signals",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:1786] has method: title",
"context": "Then it passes",
"expected": "[Node:1786] has method: title",
"success": true
} ],
"context": "When calling has_method('title')",
"fullname": "test_when_calling_has_method_title",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:1786].builtin_dummy is not connected to [Node:1786].title",
"context": "Then it passes",
"expected": "[Node:1786].builtin_dummy is not connected to [Node:1786].title",
"success": true
} ],
"context": "When calling asserts object is not connected with an invalid connection",
"fullname": "test_when_calling_obj_is_not_connected_with_an_invalid_connection",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:1786].builtin_dummy is connected to [Node:1786].title",
"context": "Then it passes",
"expected": "[Node:1786].builtin_dummy is connected to [Node:1786].title",
"success": true
} ],
"context": "When calling asserts object is connected with a valid connection",
"fullname": "test_when_calling_obj_is_connected_with_a_real_connection",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 15,
"path": "res://tests/unit/object.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/object.test.gd",
"tags": [  ],
"test": ExtResource( 7 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 15
}, {
"context": "Given the Addition Operator",
"methods": [ {
"assertions": [ {
"actual": "|int| 4 is equal to |int| 4",
"context": "",
"expected": "|int| 4 is equal to |int| 4",
"success": true
} ],
"context": "When we add 2 to 2 we get 4",
"fullname": "test_add",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 8 is equal to |int| 8",
"context": "",
"expected": "|int| 8 is equal to |int| 8",
"success": true
} ],
"context": "When we add 5 to 3 we get 8",
"fullname": "test_add",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 13 is equal to |int| 13",
"context": "",
"expected": "|int| 13 is equal to |int| 13",
"success": true
} ],
"context": "When we add 7 to 6 we get 13",
"fullname": "test_add",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 0 is equal to |int| 0",
"context": "",
"expected": "|int| 0 is equal to |int| 0",
"success": true
} ],
"context": "When we subtract 2 from 2 we get 0",
"fullname": "test_subtract",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 2 is equal to |int| 2",
"context": "",
"expected": "|int| 2 is equal to |int| 2",
"success": true
} ],
"context": "When we subtract 5 from 3 we get 2",
"fullname": "test_subtract",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 1 is equal to |int| 1",
"context": "",
"expected": "|int| 1 is equal to |int| 1",
"success": true
} ],
"context": "When we subtract 7 from 6 we get 1",
"fullname": "test_subtract",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 6,
"path": "res://tests/unit/parameters.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/parameters.test.gd",
"tags": [  ],
"test": ExtResource( 16 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 6
}, {
"context": "Given A Range Assertion",
"methods": [ {
"assertions": [ {
"actual": "0 is in range(0, 10)",
"context": "Then it passes",
"expected": "0 is in range(0, 10)",
"success": true
} ],
"context": "When calling is (0) in range(0, 10)",
"fullname": "test_when_calling_is_in_range",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "10 is not in range(0, 10)",
"context": "Then it passes",
"expected": "10 is not in range(0, 10)",
"success": true
} ],
"context": "When calling is (10) not in range (in range(0, 10)",
"fullname": "test_when_calling_is_not_in_range",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 2,
"path": "res://tests/unit/range.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/range.test.gd",
"tags": [  ],
"test": ExtResource( 15 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 2
}, {
"context": "Given a String Assertion",
"methods": [ {
"assertions": [ {
"actual": "impsum does not begin with bleh lorem",
"context": "Then it passes",
"expected": "impsum does not begin with bleh lorem",
"success": true
} ],
"context": "When calling asserts.string_does_not_begin_with('lorem', 'impsum')",
"fullname": "test_when_calling_string_does_not_begin_with",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "lorem impsum begins with lorem",
"context": "Then it passes",
"expected": "lorem impsum begins with lorem",
"success": true
} ],
"context": "When calling asserts.string_begins_with('lorem', 'lorem impsum')",
"fullname": "test_when_calling_string_begins_with",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "lorem impsum contains em im",
"context": "Then it passes",
"expected": "lorem impsum contains em im",
"success": true
} ],
"context": "When calling asserts.string_contains('em im', 'lorem impsum')",
"fullname": "test_when_calling_string_contains",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "impsum does not contain beem im",
"context": "Then it passes",
"expected": "impsum does not contain beem im",
"success": true
} ],
"context": "When calling asserts.string_does_not_contain('em im', 'impsum')",
"fullname": "test_when_calling_string_does_not_contain",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "lorem impsum ends with impsum",
"context": "Then it passes",
"expected": "lorem impsum ends with impsum",
"success": true
} ],
"context": "When calling asserts.string_ends_with('impsum', 'lorem impsum')",
"fullname": "test_when_calling_string_ends_with",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "impsum does not end with lorem",
"context": "Then it passes",
"expected": "impsum does not end with lorem",
"success": true
} ],
"context": "When calling asserts.string_does_not_end_with('lorem', 'impsum')",
"fullname": "test_when_calling_string_does_not_end_with",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 6,
"path": "res://tests/unit/string.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/string.test.gd",
"tags": [  ],
"test": ExtResource( 9 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 6
}, {
"context": "Dummy Passing Test",
"methods": [ {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Passing!",
"expected": "|bool| True == true",
"success": true
} ],
"context": "This method passes",
"fullname": "test_this_method_passes",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 1,
"path": "res://tests/unit/suite.test.gd.DummyOne",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/suite.test.gd.DummyOne",
"tags": [  ],
"test": SubResource( 25 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 1
}, {
"context": "Dummy Test 2",
"methods": [ {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Passing!",
"expected": "|bool| True == true",
"success": true
} ],
"context": "This method passes",
"fullname": "test_this_method_passes",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 1,
"path": "res://tests/unit/suite.test.gd.DummyTwo",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/suite.test.gd.DummyTwo",
"tags": [  ],
"test": SubResource( 26 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 1
}, {
"context": "Given a Test Script",
"methods": [ {
"assertions": [ {
"actual": "|bool| True == true",
"context": "",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|int| 2 is equal to |int| 2",
"context": "",
"expected": "|int| 2 is equal to |int| 2",
"success": true
} ],
"context": " when we omit context we can see expected and got under method",
"fullname": "test_when_we_omit_context_we_can_see_expected_and_got_under_method",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "if the test didn't break this works",
"expected": "|bool| True == true",
"success": true
} ],
"context": " we can omit describe",
"fullname": "test_we_can_omit_describe",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 10 is greater than |int| 1",
"context": "We get an array of multiple values back",
"expected": "|int| 10 is greater than |int| 1",
"success": true
}, {
"actual": "|int| 0 is not equal to |int| 9",
"context": "With different values",
"expected": "|int| 0 != |int| 9",
"success": true
}, {
"actual": "|int| 10 is greater than |int| 1",
"context": "And we can track multiple properties",
"expected": "|int| 10 is greater than |int| 1",
"success": true
} ],
"context": "When we record properties",
"fullname": "test_we_can_record_properties",
"passed": 3,
"success": true,
"time": 0.0,
"total": 3
} ],
"passed": 3,
"path": "res://tests/unit/test.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/test.test.gd",
"tags": [  ],
"test": ExtResource( 19 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 3
}, {
"context": "Given a Signal Watcher",
"methods": [ {
"assertions": [ {
"actual": "signal: multiple was emitted from [Node:1853] 2",
"context": "Then we can track how many times we emitted it",
"expected": "signal: multiple was emitted from [Node:1853] 2",
"success": true
} ],
"context": "When we watch and signal and emit it multiple times",
"fullname": "test_When_we_watch_a_signal_and_emit_it_multiple_times",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Signal: example was emitted from [Node:1853] with arguments: [1, 20, 5]",
"context": "Then it captures any arguments that where passed when the signal was emitted",
"expected": "Signal: example was emitted from [Node:1853] with arguments: [1, 20, 5]",
"success": true
} ],
"context": "When we watch a signal from an object with no bound variables",
"fullname": "test_When_we_watch_a_signal_from_an_object_with_no_bound_variables",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "signal: example was emitted from [Node:1853]",
"context": "Then it captures the emitted signal",
"expected": "signal: example was emitted from [Node:1853]",
"success": true
} ],
"context": "When we watch and emit a signal",
"fullname": "test_When_we_watch_and_emit_a_signal",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Signal: example was not emitted from [Node:1853]",
"context": "Then it does not capture the non-emitted signal",
"expected": "Signal: example was not emitted from [Node:1853]",
"success": true
} ],
"context": "When we watch and do not emit a signal",
"fullname": "test_When_we_watch_and_do_not_emit_a_signal",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 4,
"path": "res://tests/unit/watcher.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/watcher.test.gd",
"tags": [  ],
"test": ExtResource( 17 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 4
}, {
"context": "Given a Yield",
"methods": [ {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then we set var a to true",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then we set var b to true",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we yield in start twice",
"fullname": "test_When_we_yield_in_start",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then we set var c to true",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then we set var d to true",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we yield in pre thrice",
"fullname": "test_When_we_yield_in_pre",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then we set var e to true",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then we set var f to true",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we yield twice in execute",
"fullname": "test_When_we_yield_in_execute",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then the yielder is paused",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then the timeout signal of the yielder is disconnected",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then our signal to the yielder is disconnected",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When the yielder heres our signal",
"fullname": "test_When_the_yielder_hears_our_signal",
"passed": 3,
"success": true,
"time": 0.0,
"total": 3
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then the yielder is unpaused",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then the timeout signal of the yielder is connected",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then our signal is connected to the yielder",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we call until signal",
"fullname": "test_When_we_call_until_signal",
"passed": 3,
"success": true,
"time": 0.0,
"total": 3
}, {
"assertions": [ {
"actual": "[100, Null, Null, Null, Null, Null] is builtin: Array",
"context": "Then we get an array",
"expected": "[100, Null, Null, Null, Null, Null] is builtin: Array",
"success": true
}, {
"actual": "|int| 6 is equal to |int| 6",
"context": "Of size 6",
"expected": "|int| 6 is equal to |int| 6",
"success": true
}, {
"actual": "|int| 100 is equal to |int| 100",
"context": "Where element 0 is 100",
"expected": "|int| 100 is equal to |int| 100",
"success": true
} ],
"context": "When yield(self.yield_value()) returns",
"fullname": "test_When_we_yield_we_get_the_return_value",
"passed": 3,
"success": true,
"time": 0.0,
"total": 3
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then the timeout signal is disconnected",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then the signal-signal is disconnected",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When it is finished",
"fullname": "test_When_yielder_is_finished_signals_are_disconnected",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then yielder is not active",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When asserting against a test",
"fullname": "test_Yielder_is_not_active_when_asserting",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then yielder is unpaused",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "The timeout signal of the yielder is connected",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we call until_timeout (with 1.0)",
"fullname": "test_When_we_call_until_timeout",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then the yielder is paused",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "The timeout signal of the yielder is not connected",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When the yielder times out on until_timeout(0.1)",
"fullname": "test_When_the_yielder_times_out",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then the yielder is paused",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When a signal being yielded on is emitted",
"fullname": "test_When_a_signal_being_yielded_on_is_emitted_the_yielder_is_stopped",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 11,
"path": "res://tests/unit/yield.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/yield.test.gd",
"tags": [  ],
"test": ExtResource( 18 ),
"yield_time": 1.9
},
"success": true,
"time_taken": 0.0,
"total": 11
} ],
1611526177: [ {
"context": "Given a Boolean Assertion",
"methods": [ {
"assertions": [ {
"actual": "|bool| False == false",
"context": "Then it passes",
"expected": "|bool| False == false",
"success": true
} ],
"context": "When calling asserts.is_false(false)",
"fullname": "test_when_calling_asserts_is_false",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| True != false",
"context": "",
"expected": "|bool| True == false",
"success": false
} ],
"context": " intentional failure",
"fullname": "test_intentional_failure",
"passed": 0,
"success": false,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then it passes",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When calling asserts.is_true(true)",
"fullname": "test_when_calling_asserts_is_true",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 2,
"path": "res://tests/unit/boolean.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/boolean.test.gd",
"tags": [  ],
"test": ExtResource( 11 ),
"yield_time": 0.0
},
"success": false,
"time_taken": 0.0,
"total": 3
} ],
1611526366: [ {
"context": "Given a Boolean Assertion",
"methods": [ {
"assertions": [ {
"actual": "|bool| False == false",
"context": "Then it passes",
"expected": "|bool| False == false",
"success": true
} ],
"context": "When calling asserts.is_false(false)",
"fullname": "test_when_calling_asserts_is_false",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| True != false",
"context": "",
"expected": "|bool| True == false",
"success": false
} ],
"context": " intentional failure",
"fullname": "test_intentional_failure",
"passed": 0,
"success": false,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then it passes",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When calling asserts.is_true(true)",
"fullname": "test_when_calling_asserts_is_true",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 2,
"path": "res://tests/integration/boolean.test.gd",
"source": {
"containers": [ "res://tests/integration", "res://tests" ],
"method": "",
"path": "res://tests/integration/boolean.test.gd",
"tags": [  ],
"test": ExtResource( 20 ),
"yield_time": 0.0
},
"success": false,
"time_taken": 0.0,
"total": 3
}, {
"context": "Default Args",
"methods": [ {
"assertions": [ {
"actual": "|bool| True == true",
"context": "If this method can be reached then we have doubled a script with default argument(s) properly!",
"expected": "|bool| True == true",
"success": true
} ],
"context": " default arguments of interpolate property",
"fullname": "test_default_arguments_of_interpolate_property",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 1,
"path": "res://tests/integration/default_args.test.gd",
"source": {
"containers": [ "res://tests/integration", "res://tests" ],
"method": "",
"path": "res://tests/integration/default_args.test.gd",
"tags": [  ],
"test": ExtResource( 10 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 1
}, {
"context": "Given is_on_floor",
"methods": [ {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then it can be stubbed",
"expected": "|bool| True == true",
"success": true
} ],
"context": "From a user-defined script",
"fullname": "test_stubbing_is_on_floor_method_from_user_defined_class",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then it can be stubbed",
"expected": "|bool| True == true",
"success": true
} ],
"context": "From a child node of a scene without scripts",
"fullname": "test_stubbing_is_on_floor_as_child_node_with_no_script",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then it can be stubbed",
"expected": "|bool| True == true",
"success": true
} ],
"context": "From a built-in KinematicBody2D2",
"fullname": "test_stubbing_is_on_floor_method_from_builtin_class2",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 3,
"path": "res://tests/integration/on_floor.test.gd",
"source": {
"containers": [ "res://tests/integration", "res://tests" ],
"method": "",
"path": "res://tests/integration/on_floor.test.gd",
"tags": [  ],
"test": ExtResource( 5 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 3
}, {
"context": "Given a Scene Director",
"methods": [ {
"assertions": [ {
"actual": "|Dictionary| {.:[Reference:1365], A:[Reference:1366], A/B:[Reference:1368], C:[Reference:1367], C/D:[Reference:1369]} is not equal to |Dictionary| {.:[Reference:1379], A:[Reference:1380], A/B:[Reference:1382], C:[Reference:1381], C/D:[Reference:1383]}",
"context": "Then they do not share resources",
"expected": "|Dictionary| {.:[Reference:1365], A:[Reference:1366], A/B:[Reference:1368], C:[Reference:1367], C/D:[Reference:1369]} != |Dictionary| {.:[Reference:1379], A:[Reference:1380], A/B:[Reference:1382], C:[Reference:1381], C/D:[Reference:1383]}",
"success": true
} ],
"context": "When we create two of it for the same scene",
"fullname": "test_When_we_create_two_of_it_for_the_same_scene",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 9999 is equal to |int| 9999",
"context": "Then we get the stubbed return value",
"expected": "|int| 9999 is equal to |int| 9999",
"success": true
} ],
"context": "When we call a method from the root node that we stubbed",
"fullname": "test_When_we_call_a_method_from_the_root_node_that_we_stubbed",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 999 is equal to |int| 999",
"context": "Then we get the stubbed return value",
"expected": "|int| 999 is equal to |int| 999",
"success": true
} ],
"context": "When we call a method from a child node that we stubbed",
"fullname": "test_When_we_call_a_method_from_a_child_node_that_we_stubbed",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|NodePath| A is equal to |NodePath| A",
"context": "We have the correct NodePath Set",
"expected": "|NodePath| A is equal to |NodePath| A",
"success": true
} ],
"context": "When we add it to the tree it runs",
"fullname": "test_When_we_add_it_to_the_tree_it_runs",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 99 is equal to |int| 99",
"context": "Then we get the stubbed return value",
"expected": "|int| 99 is equal to |int| 99",
"success": true
} ],
"context": "When we call a method from a grandchild node that we stubbed",
"fullname": "test_When_we_call_a_method_from_a_grandchild_node_that_we_stubbed",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 5,
"path": "res://tests/integration/scene_director.test.gd",
"source": {
"containers": [ "res://tests/integration", "res://tests" ],
"method": "",
"path": "res://tests/integration/scene_director.test.gd",
"tags": [  ],
"test": ExtResource( 4 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 5
}, {
"context": "Given a Script Director",
"methods": [ {
"assertions": [ {
"actual": "[Reference:1523] is instance of class: [GDScript:1516]",
"context": "Then we get that inner class back",
"expected": "[Reference:1523] is instance of class: [GDScript:1516]",
"success": true
} ],
"context": "When we double an inner class",
"fullname": "test_When_we_double_an_inner_class",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|Dictionary| {_enter_tree:{arguments:, default_arguments:}, _exit_tree:{arguments:, default_arguments:}, _get:{arguments:a, default_arguments:a}, _get_configuration_warning:{arguments:, default_arguments:}, _get_editor_description:{arguments:, default_arguments:}, _get_import_path:{arguments:, default_arguments:}, _get_property_list:{arguments:, default_arguments:}, _init:{arguments:, default_arguments:}, _input:{arguments:a, default_arguments:a}, _notification:{arguments:a, default_arguments:a}, _physics_process:{arguments:a, default_arguments:a}, _process:{arguments:a, default_arguments:a}, _ready:{arguments:, default_arguments:}, _set:{arguments:a, b, default_arguments:a, b}, _set_editor_description:{arguments:a, default_arguments:a}, _set_import_path:{arguments:a, default_arguments:a}, _to_string:{arguments:, default_arguments:}, _unhandled_input:{arguments:a, default_arguments:a}, _unhandled_key_input:{arguments:a, default_arguments:a}, add:{arguments:a, b, default_arguments:a, b}, add_child:{arguments:a, b, default_arguments:a, b = False}, add_child_below_node:{arguments:a, b, c, default_arguments:a, b, c = False}, add_to_group:{arguments:a, b, default_arguments:a, b = False}, add_user_signal:{arguments:a, b, default_arguments:a, b = []}, call:{arguments:a, default_arguments:a}, call_deferred:{arguments:a, default_arguments:a}, callv:{arguments:a, b, default_arguments:a, b}, can_process:{arguments:, default_arguments:}, can_translate_messages:{arguments:, default_arguments:}, connect:{arguments:a, b, c, d, e, default_arguments:a, b, c, d = [], e = 0}, disconnect:{arguments:a, b, c, default_arguments:a, b, c}, divide:{arguments:a, b, default_arguments:a, b}, duplicate:{arguments:a, default_arguments:a = 15}, emit_signal:{arguments:a, default_arguments:a}, find_node:{arguments:a, b, c, default_arguments:a, b = True, c = True}, find_parent:{arguments:a, default_arguments:a}, free:{arguments:, default_arguments:}, get:{arguments:a, default_arguments:a}, get_child:{arguments:a, default_arguments:a}, get_child_count:{arguments:, default_arguments:}, get_children:{arguments:, default_arguments:}, get_class:{arguments:, default_arguments:}, get_custom_multiplayer:{arguments:, default_arguments:}, get_filename:{arguments:, default_arguments:}, get_groups:{arguments:, default_arguments:}, get_incoming_connections:{arguments:, default_arguments:}, get_index:{arguments:, default_arguments:}, get_indexed:{arguments:a, default_arguments:a}, get_instance_id:{arguments:, default_arguments:}, get_meta:{arguments:a, default_arguments:a}, get_meta_list:{arguments:, default_arguments:}, get_method_list:{arguments:, default_arguments:}, get_multiplayer:{arguments:, default_arguments:}, get_name:{arguments:, default_arguments:}, get_network_master:{arguments:, default_arguments:}, get_node:{arguments:a, default_arguments:a}, get_node_and_resource:{arguments:a, default_arguments:a}, get_node_or_null:{arguments:a, default_arguments:a}, get_owner:{arguments:, default_arguments:}, get_parent:{arguments:, default_arguments:}, get_path:{arguments:, default_arguments:}, get_path_to:{arguments:a, default_arguments:a}, get_pause_mode:{arguments:, default_arguments:}, get_physics_process_delta_time:{arguments:, default_arguments:}, get_position_in_parent:{arguments:, default_arguments:}, get_process_delta_time:{arguments:, default_arguments:}, get_process_priority:{arguments:, default_arguments:}, get_property_list:{arguments:, default_arguments:}, get_scene_instance_load_placeholder:{arguments:, default_arguments:}, get_script:{arguments:, default_arguments:}, get_signal_connection_list:{arguments:a, default_arguments:a}, get_signal_list:{arguments:, default_arguments:}, get_tree:{arguments:, default_arguments:}, get_viewport:{arguments:, default_arguments:}, has_meta:{arguments:a, default_arguments:a}, has_method:{arguments:a, default_arguments:a}, has_node:{arguments:a, default_arguments:a}, has_node_and_resource:{arguments:a, default_arguments:a}, has_signal:{arguments:a, default_arguments:a}, has_user_signal:{arguments:a, default_arguments:a}, is_a_parent_of:{arguments:a, default_arguments:a}, is_blocking_signals:{arguments:, default_arguments:}, is_class:{arguments:a, default_arguments:a}, is_connected:{arguments:a, b, c, default_arguments:a, b, c}, is_displayed_folded:{arguments:, default_arguments:}, is_greater_than:{arguments:a, default_arguments:a}, is_in_group:{arguments:a, default_arguments:a}, is_inside_tree:{arguments:, default_arguments:}, is_network_master:{arguments:, default_arguments:}, is_physics_processing:{arguments:, default_arguments:}, is_physics_processing_internal:{arguments:, default_arguments:}, is_processing:{arguments:, default_arguments:}, is_processing_input:{arguments:, default_arguments:}, is_processing_internal:{arguments:, default_arguments:}, is_processing_unhandled_input:{arguments:, default_arguments:}, is_processing_unhandled_key_input:{arguments:, default_arguments:}, is_queued_for_deletion:{arguments:, default_arguments:}, math_fight:{arguments:, default_arguments:}, move_child:{arguments:a, b, default_arguments:a, b}, multiply:{arguments:a, b, default_arguments:a, b}, notification:{arguments:a, b, default_arguments:a, b = False}, pi:{arguments:, default_arguments:}, print_stray_nodes:{arguments:, default_arguments:}, print_tree:{arguments:, default_arguments:}, print_tree_pretty:{arguments:, default_arguments:}, propagate_call:{arguments:a, b, c, default_arguments:a, b = [], c = False}, propagate_notification:{arguments:a, default_arguments:a}, property_list_changed_notify:{arguments:, default_arguments:}, queue_free:{arguments:, default_arguments:}, raise:{arguments:, default_arguments:}, remove_and_skip:{arguments:, default_arguments:}, remove_child:{arguments:a, default_arguments:a}, remove_from_group:{arguments:a, default_arguments:a}, remove_meta:{arguments:a, default_arguments:a}, replace_by:{arguments:a, b, default_arguments:a, b = False}, request_ready:{arguments:, default_arguments:}, rpc:{arguments:a, default_arguments:a}, rpc_config:{arguments:a, b, default_arguments:a, b}, rpc_id:{arguments:a, b, default_arguments:a, b}, rpc_unreliable:{arguments:a, default_arguments:a}, rpc_unreliable_id:{arguments:a, b, default_arguments:a, b}, rset:{arguments:a, b, default_arguments:a, b}, rset_config:{arguments:a, b, default_arguments:a, b}, rset_id:{arguments:a, b, c, default_arguments:a, b, c}, rset_unreliable:{arguments:a, b, default_arguments:a, b}, rset_unreliable_id:{arguments:a, b, c, default_arguments:a, b, c}, set:{arguments:a, b, default_arguments:a, b}, set_block_signals:{arguments:a, default_arguments:a}, set_custom_multiplayer:{arguments:a, default_arguments:a}, set_deferred:{arguments:a, b, default_arguments:a, b}, set_display_folded:{arguments:a, default_arguments:a}, set_filename:{arguments:a, default_arguments:a}, set_indexed:{arguments:a, b, default_arguments:a, b}, set_message_translation:{arguments:a, default_arguments:a}, set_meta:{arguments:a, b, default_arguments:a, b}, set_name:{arguments:a, default_arguments:a}, set_network_master:{arguments:a, b, default_arguments:a, b = True}, set_owner:{arguments:a, default_arguments:a}, set_pause_mode:{arguments:a, default_arguments:a}, set_physics_process:{arguments:a, default_arguments:a}, set_physics_process_internal:{arguments:a, default_arguments:a}, set_process:{arguments:a, default_arguments:a}, set_process_input:{arguments:a, default_arguments:a}, set_process_internal:{arguments:a, default_arguments:a}, set_process_priority:{arguments:a, default_arguments:a}, set_process_unhandled_input:{arguments:a, default_arguments:a}, set_process_unhandled_key_input:{arguments:a, default_arguments:a}, set_scene_instance_load_placeholder:{arguments:a, default_arguments:a}, set_script:{arguments:a, default_arguments:a}, subtract:{arguments:a, b, default_arguments:a, b}, sum:{arguments:a, default_arguments:a}, to_string:{arguments:, default_arguments:}, tr:{arguments:a, default_arguments:a}, update_configuration_warning:{arguments:, default_arguments:}} is not equal to |Dictionary| {_enter_tree:{arguments:, default_arguments:}, _exit_tree:{arguments:, default_arguments:}, _get:{arguments:a, default_arguments:a}, _get_configuration_warning:{arguments:, default_arguments:}, _get_editor_description:{arguments:, default_arguments:}, _get_import_path:{arguments:, default_arguments:}, _get_property_list:{arguments:, default_arguments:}, _init:{arguments:, default_arguments:}, _input:{arguments:a, default_arguments:a}, _notification:{arguments:a, default_arguments:a}, _physics_process:{arguments:a, default_arguments:a}, _process:{arguments:a, default_arguments:a}, _ready:{arguments:, default_arguments:}, _set:{arguments:a, b, default_arguments:a, b}, _set_editor_description:{arguments:a, default_arguments:a}, _set_import_path:{arguments:a, default_arguments:a}, _to_string:{arguments:, default_arguments:}, _unhandled_input:{arguments:a, default_arguments:a}, _unhandled_key_input:{arguments:a, default_arguments:a}, add:{arguments:a, b, default_arguments:a, b}, add_child:{arguments:a, b, default_arguments:a, b = False}, add_child_below_node:{arguments:a, b, c, default_arguments:a, b, c = False}, add_to_group:{arguments:a, b, default_arguments:a, b = False}, add_user_signal:{arguments:a, b, default_arguments:a, b = []}, call:{arguments:a, default_arguments:a}, call_deferred:{arguments:a, default_arguments:a}, callv:{arguments:a, b, default_arguments:a, b}, can_process:{arguments:, default_arguments:}, can_translate_messages:{arguments:, default_arguments:}, connect:{arguments:a, b, c, d, e, default_arguments:a, b, c, d = [], e = 0}, disconnect:{arguments:a, b, c, default_arguments:a, b, c}, divide:{arguments:a, b, default_arguments:a, b}, duplicate:{arguments:a, default_arguments:a = 15}, emit_signal:{arguments:a, default_arguments:a}, find_node:{arguments:a, b, c, default_arguments:a, b = True, c = True}, find_parent:{arguments:a, default_arguments:a}, free:{arguments:, default_arguments:}, get:{arguments:a, default_arguments:a}, get_child:{arguments:a, default_arguments:a}, get_child_count:{arguments:, default_arguments:}, get_children:{arguments:, default_arguments:}, get_class:{arguments:, default_arguments:}, get_custom_multiplayer:{arguments:, default_arguments:}, get_filename:{arguments:, default_arguments:}, get_groups:{arguments:, default_arguments:}, get_incoming_connections:{arguments:, default_arguments:}, get_index:{arguments:, default_arguments:}, get_indexed:{arguments:a, default_arguments:a}, get_instance_id:{arguments:, default_arguments:}, get_meta:{arguments:a, default_arguments:a}, get_meta_list:{arguments:, default_arguments:}, get_method_list:{arguments:, default_arguments:}, get_multiplayer:{arguments:, default_arguments:}, get_name:{arguments:, default_arguments:}, get_network_master:{arguments:, default_arguments:}, get_node:{arguments:a, default_arguments:a}, get_node_and_resource:{arguments:a, default_arguments:a}, get_node_or_null:{arguments:a, default_arguments:a}, get_owner:{arguments:, default_arguments:}, get_parent:{arguments:, default_arguments:}, get_path:{arguments:, default_arguments:}, get_path_to:{arguments:a, default_arguments:a}, get_pause_mode:{arguments:, default_arguments:}, get_physics_process_delta_time:{arguments:, default_arguments:}, get_position_in_parent:{arguments:, default_arguments:}, get_process_delta_time:{arguments:, default_arguments:}, get_process_priority:{arguments:, default_arguments:}, get_property_list:{arguments:, default_arguments:}, get_scene_instance_load_placeholder:{arguments:, default_arguments:}, get_script:{arguments:, default_arguments:}, get_signal_connection_list:{arguments:a, default_arguments:a}, get_signal_list:{arguments:, default_arguments:}, get_tree:{arguments:, default_arguments:}, get_viewport:{arguments:, default_arguments:}, has_meta:{arguments:a, default_arguments:a}, has_method:{arguments:a, default_arguments:a}, has_node:{arguments:a, default_arguments:a}, has_node_and_resource:{arguments:a, default_arguments:a}, has_signal:{arguments:a, default_arguments:a}, has_user_signal:{arguments:a, default_arguments:a}, is_a_parent_of:{arguments:a, default_arguments:a}, is_blocking_signals:{arguments:, default_arguments:}, is_class:{arguments:a, default_arguments:a}, is_connected:{arguments:a, b, c, default_arguments:a, b, c}, is_displayed_folded:{arguments:, default_arguments:}, is_greater_than:{arguments:a, default_arguments:a}, is_in_group:{arguments:a, default_arguments:a}, is_inside_tree:{arguments:, default_arguments:}, is_network_master:{arguments:, default_arguments:}, is_physics_processing:{arguments:, default_arguments:}, is_physics_processing_internal:{arguments:, default_arguments:}, is_processing:{arguments:, default_arguments:}, is_processing_input:{arguments:, default_arguments:}, is_processing_internal:{arguments:, default_arguments:}, is_processing_unhandled_input:{arguments:, default_arguments:}, is_processing_unhandled_key_input:{arguments:, default_arguments:}, is_queued_for_deletion:{arguments:, default_arguments:}, math_fight:{arguments:, default_arguments:}, move_child:{arguments:a, b, default_arguments:a, b}, multiply:{arguments:a, b, default_arguments:a, b}, notification:{arguments:a, b, default_arguments:a, b = False}, pi:{arguments:, default_arguments:}, print_stray_nodes:{arguments:, default_arguments:}, print_tree:{arguments:, default_arguments:}, print_tree_pretty:{arguments:, default_arguments:}, propagate_call:{arguments:a, b, c, default_arguments:a, b = [], c = False}, propagate_notification:{arguments:a, default_arguments:a}, property_list_changed_notify:{arguments:, default_arguments:}, queue_free:{arguments:, default_arguments:}, raise:{arguments:, default_arguments:}, remove_and_skip:{arguments:, default_arguments:}, remove_child:{arguments:a, default_arguments:a}, remove_from_group:{arguments:a, default_arguments:a}, remove_meta:{arguments:a, default_arguments:a}, replace_by:{arguments:a, b, default_arguments:a, b = False}, request_ready:{arguments:, default_arguments:}, rpc:{arguments:a, default_arguments:a}, rpc_config:{arguments:a, b, default_arguments:a, b}, rpc_id:{arguments:a, b, default_arguments:a, b}, rpc_unreliable:{arguments:a, default_arguments:a}, rpc_unreliable_id:{arguments:a, b, default_arguments:a, b}, rset:{arguments:a, b, default_arguments:a, b}, rset_config:{arguments:a, b, default_arguments:a, b}, rset_id:{arguments:a, b, c, default_arguments:a, b, c}, rset_unreliable:{arguments:a, b, default_arguments:a, b}, rset_unreliable_id:{arguments:a, b, c, default_arguments:a, b, c}, set:{arguments:a, b, default_arguments:a, b}, set_block_signals:{arguments:a, default_arguments:a}, set_custom_multiplayer:{arguments:a, default_arguments:a}, set_deferred:{arguments:a, b, default_arguments:a, b}, set_display_folded:{arguments:a, default_arguments:a}, set_filename:{arguments:a, default_arguments:a}, set_indexed:{arguments:a, b, default_arguments:a, b}, set_message_translation:{arguments:a, default_arguments:a}, set_meta:{arguments:a, b, default_arguments:a, b}, set_name:{arguments:a, default_arguments:a}, set_network_master:{arguments:a, b, default_arguments:a, b = True}, set_owner:{arguments:a, default_arguments:a}, set_pause_mode:{arguments:a, default_arguments:a}, set_physics_process:{arguments:a, default_arguments:a}, set_physics_process_internal:{arguments:a, default_arguments:a}, set_process:{arguments:a, default_arguments:a}, set_process_input:{arguments:a, default_arguments:a}, set_process_internal:{arguments:a, default_arguments:a}, set_process_priority:{arguments:a, default_arguments:a}, set_process_unhandled_input:{arguments:a, default_arguments:a}, set_process_unhandled_key_input:{arguments:a, default_arguments:a}, set_scene_instance_load_placeholder:{arguments:a, default_arguments:a}, set_script:{arguments:a, default_arguments:a}, subtract:{arguments:a, b, default_arguments:a, b}, sum:{arguments:a, default_arguments:a}, to_string:{arguments:, default_arguments:}, tr:{arguments:a, default_arguments:a}, update_configuration_warning:{arguments:, default_arguments:}}",
"context": "Then they do not share resources",
"expected": "|Dictionary| {_enter_tree:{arguments:, default_arguments:}, _exit_tree:{arguments:, default_arguments:}, _get:{arguments:a, default_arguments:a}, _get_configuration_warning:{arguments:, default_arguments:}, _get_editor_description:{arguments:, default_arguments:}, _get_import_path:{arguments:, default_arguments:}, _get_property_list:{arguments:, default_arguments:}, _init:{arguments:, default_arguments:}, _input:{arguments:a, default_arguments:a}, _notification:{arguments:a, default_arguments:a}, _physics_process:{arguments:a, default_arguments:a}, _process:{arguments:a, default_arguments:a}, _ready:{arguments:, default_arguments:}, _set:{arguments:a, b, default_arguments:a, b}, _set_editor_description:{arguments:a, default_arguments:a}, _set_import_path:{arguments:a, default_arguments:a}, _to_string:{arguments:, default_arguments:}, _unhandled_input:{arguments:a, default_arguments:a}, _unhandled_key_input:{arguments:a, default_arguments:a}, add:{arguments:a, b, default_arguments:a, b}, add_child:{arguments:a, b, default_arguments:a, b = False}, add_child_below_node:{arguments:a, b, c, default_arguments:a, b, c = False}, add_to_group:{arguments:a, b, default_arguments:a, b = False}, add_user_signal:{arguments:a, b, default_arguments:a, b = []}, call:{arguments:a, default_arguments:a}, call_deferred:{arguments:a, default_arguments:a}, callv:{arguments:a, b, default_arguments:a, b}, can_process:{arguments:, default_arguments:}, can_translate_messages:{arguments:, default_arguments:}, connect:{arguments:a, b, c, d, e, default_arguments:a, b, c, d = [], e = 0}, disconnect:{arguments:a, b, c, default_arguments:a, b, c}, divide:{arguments:a, b, default_arguments:a, b}, duplicate:{arguments:a, default_arguments:a = 15}, emit_signal:{arguments:a, default_arguments:a}, find_node:{arguments:a, b, c, default_arguments:a, b = True, c = True}, find_parent:{arguments:a, default_arguments:a}, free:{arguments:, default_arguments:}, get:{arguments:a, default_arguments:a}, get_child:{arguments:a, default_arguments:a}, get_child_count:{arguments:, default_arguments:}, get_children:{arguments:, default_arguments:}, get_class:{arguments:, default_arguments:}, get_custom_multiplayer:{arguments:, default_arguments:}, get_filename:{arguments:, default_arguments:}, get_groups:{arguments:, default_arguments:}, get_incoming_connections:{arguments:, default_arguments:}, get_index:{arguments:, default_arguments:}, get_indexed:{arguments:a, default_arguments:a}, get_instance_id:{arguments:, default_arguments:}, get_meta:{arguments:a, default_arguments:a}, get_meta_list:{arguments:, default_arguments:}, get_method_list:{arguments:, default_arguments:}, get_multiplayer:{arguments:, default_arguments:}, get_name:{arguments:, default_arguments:}, get_network_master:{arguments:, default_arguments:}, get_node:{arguments:a, default_arguments:a}, get_node_and_resource:{arguments:a, default_arguments:a}, get_node_or_null:{arguments:a, default_arguments:a}, get_owner:{arguments:, default_arguments:}, get_parent:{arguments:, default_arguments:}, get_path:{arguments:, default_arguments:}, get_path_to:{arguments:a, default_arguments:a}, get_pause_mode:{arguments:, default_arguments:}, get_physics_process_delta_time:{arguments:, default_arguments:}, get_position_in_parent:{arguments:, default_arguments:}, get_process_delta_time:{arguments:, default_arguments:}, get_process_priority:{arguments:, default_arguments:}, get_property_list:{arguments:, default_arguments:}, get_scene_instance_load_placeholder:{arguments:, default_arguments:}, get_script:{arguments:, default_arguments:}, get_signal_connection_list:{arguments:a, default_arguments:a}, get_signal_list:{arguments:, default_arguments:}, get_tree:{arguments:, default_arguments:}, get_viewport:{arguments:, default_arguments:}, has_meta:{arguments:a, default_arguments:a}, has_method:{arguments:a, default_arguments:a}, has_node:{arguments:a, default_arguments:a}, has_node_and_resource:{arguments:a, default_arguments:a}, has_signal:{arguments:a, default_arguments:a}, has_user_signal:{arguments:a, default_arguments:a}, is_a_parent_of:{arguments:a, default_arguments:a}, is_blocking_signals:{arguments:, default_arguments:}, is_class:{arguments:a, default_arguments:a}, is_connected:{arguments:a, b, c, default_arguments:a, b, c}, is_displayed_folded:{arguments:, default_arguments:}, is_greater_than:{arguments:a, default_arguments:a}, is_in_group:{arguments:a, default_arguments:a}, is_inside_tree:{arguments:, default_arguments:}, is_network_master:{arguments:, default_arguments:}, is_physics_processing:{arguments:, default_arguments:}, is_physics_processing_internal:{arguments:, default_arguments:}, is_processing:{arguments:, default_arguments:}, is_processing_input:{arguments:, default_arguments:}, is_processing_internal:{arguments:, default_arguments:}, is_processing_unhandled_input:{arguments:, default_arguments:}, is_processing_unhandled_key_input:{arguments:, default_arguments:}, is_queued_for_deletion:{arguments:, default_arguments:}, math_fight:{arguments:, default_arguments:}, move_child:{arguments:a, b, default_arguments:a, b}, multiply:{arguments:a, b, default_arguments:a, b}, notification:{arguments:a, b, default_arguments:a, b = False}, pi:{arguments:, default_arguments:}, print_stray_nodes:{arguments:, default_arguments:}, print_tree:{arguments:, default_arguments:}, print_tree_pretty:{arguments:, default_arguments:}, propagate_call:{arguments:a, b, c, default_arguments:a, b = [], c = False}, propagate_notification:{arguments:a, default_arguments:a}, property_list_changed_notify:{arguments:, default_arguments:}, queue_free:{arguments:, default_arguments:}, raise:{arguments:, default_arguments:}, remove_and_skip:{arguments:, default_arguments:}, remove_child:{arguments:a, default_arguments:a}, remove_from_group:{arguments:a, default_arguments:a}, remove_meta:{arguments:a, default_arguments:a}, replace_by:{arguments:a, b, default_arguments:a, b = False}, request_ready:{arguments:, default_arguments:}, rpc:{arguments:a, default_arguments:a}, rpc_config:{arguments:a, b, default_arguments:a, b}, rpc_id:{arguments:a, b, default_arguments:a, b}, rpc_unreliable:{arguments:a, default_arguments:a}, rpc_unreliable_id:{arguments:a, b, default_arguments:a, b}, rset:{arguments:a, b, default_arguments:a, b}, rset_config:{arguments:a, b, default_arguments:a, b}, rset_id:{arguments:a, b, c, default_arguments:a, b, c}, rset_unreliable:{arguments:a, b, default_arguments:a, b}, rset_unreliable_id:{arguments:a, b, c, default_arguments:a, b, c}, set:{arguments:a, b, default_arguments:a, b}, set_block_signals:{arguments:a, default_arguments:a}, set_custom_multiplayer:{arguments:a, default_arguments:a}, set_deferred:{arguments:a, b, default_arguments:a, b}, set_display_folded:{arguments:a, default_arguments:a}, set_filename:{arguments:a, default_arguments:a}, set_indexed:{arguments:a, b, default_arguments:a, b}, set_message_translation:{arguments:a, default_arguments:a}, set_meta:{arguments:a, b, default_arguments:a, b}, set_name:{arguments:a, default_arguments:a}, set_network_master:{arguments:a, b, default_arguments:a, b = True}, set_owner:{arguments:a, default_arguments:a}, set_pause_mode:{arguments:a, default_arguments:a}, set_physics_process:{arguments:a, default_arguments:a}, set_physics_process_internal:{arguments:a, default_arguments:a}, set_process:{arguments:a, default_arguments:a}, set_process_input:{arguments:a, default_arguments:a}, set_process_internal:{arguments:a, default_arguments:a}, set_process_priority:{arguments:a, default_arguments:a}, set_process_unhandled_input:{arguments:a, default_arguments:a}, set_process_unhandled_key_input:{arguments:a, default_arguments:a}, set_scene_instance_load_placeholder:{arguments:a, default_arguments:a}, set_script:{arguments:a, default_arguments:a}, subtract:{arguments:a, b, default_arguments:a, b}, sum:{arguments:a, default_arguments:a}, to_string:{arguments:, default_arguments:}, tr:{arguments:a, default_arguments:a}, update_configuration_warning:{arguments:, default_arguments:}} != |Dictionary| {_enter_tree:{arguments:, default_arguments:}, _exit_tree:{arguments:, default_arguments:}, _get:{arguments:a, default_arguments:a}, _get_configuration_warning:{arguments:, default_arguments:}, _get_editor_description:{arguments:, default_arguments:}, _get_import_path:{arguments:, default_arguments:}, _get_property_list:{arguments:, default_arguments:}, _init:{arguments:, default_arguments:}, _input:{arguments:a, default_arguments:a}, _notification:{arguments:a, default_arguments:a}, _physics_process:{arguments:a, default_arguments:a}, _process:{arguments:a, default_arguments:a}, _ready:{arguments:, default_arguments:}, _set:{arguments:a, b, default_arguments:a, b}, _set_editor_description:{arguments:a, default_arguments:a}, _set_import_path:{arguments:a, default_arguments:a}, _to_string:{arguments:, default_arguments:}, _unhandled_input:{arguments:a, default_arguments:a}, _unhandled_key_input:{arguments:a, default_arguments:a}, add:{arguments:a, b, default_arguments:a, b}, add_child:{arguments:a, b, default_arguments:a, b = False}, add_child_below_node:{arguments:a, b, c, default_arguments:a, b, c = False}, add_to_group:{arguments:a, b, default_arguments:a, b = False}, add_user_signal:{arguments:a, b, default_arguments:a, b = []}, call:{arguments:a, default_arguments:a}, call_deferred:{arguments:a, default_arguments:a}, callv:{arguments:a, b, default_arguments:a, b}, can_process:{arguments:, default_arguments:}, can_translate_messages:{arguments:, default_arguments:}, connect:{arguments:a, b, c, d, e, default_arguments:a, b, c, d = [], e = 0}, disconnect:{arguments:a, b, c, default_arguments:a, b, c}, divide:{arguments:a, b, default_arguments:a, b}, duplicate:{arguments:a, default_arguments:a = 15}, emit_signal:{arguments:a, default_arguments:a}, find_node:{arguments:a, b, c, default_arguments:a, b = True, c = True}, find_parent:{arguments:a, default_arguments:a}, free:{arguments:, default_arguments:}, get:{arguments:a, default_arguments:a}, get_child:{arguments:a, default_arguments:a}, get_child_count:{arguments:, default_arguments:}, get_children:{arguments:, default_arguments:}, get_class:{arguments:, default_arguments:}, get_custom_multiplayer:{arguments:, default_arguments:}, get_filename:{arguments:, default_arguments:}, get_groups:{arguments:, default_arguments:}, get_incoming_connections:{arguments:, default_arguments:}, get_index:{arguments:, default_arguments:}, get_indexed:{arguments:a, default_arguments:a}, get_instance_id:{arguments:, default_arguments:}, get_meta:{arguments:a, default_arguments:a}, get_meta_list:{arguments:, default_arguments:}, get_method_list:{arguments:, default_arguments:}, get_multiplayer:{arguments:, default_arguments:}, get_name:{arguments:, default_arguments:}, get_network_master:{arguments:, default_arguments:}, get_node:{arguments:a, default_arguments:a}, get_node_and_resource:{arguments:a, default_arguments:a}, get_node_or_null:{arguments:a, default_arguments:a}, get_owner:{arguments:, default_arguments:}, get_parent:{arguments:, default_arguments:}, get_path:{arguments:, default_arguments:}, get_path_to:{arguments:a, default_arguments:a}, get_pause_mode:{arguments:, default_arguments:}, get_physics_process_delta_time:{arguments:, default_arguments:}, get_position_in_parent:{arguments:, default_arguments:}, get_process_delta_time:{arguments:, default_arguments:}, get_process_priority:{arguments:, default_arguments:}, get_property_list:{arguments:, default_arguments:}, get_scene_instance_load_placeholder:{arguments:, default_arguments:}, get_script:{arguments:, default_arguments:}, get_signal_connection_list:{arguments:a, default_arguments:a}, get_signal_list:{arguments:, default_arguments:}, get_tree:{arguments:, default_arguments:}, get_viewport:{arguments:, default_arguments:}, has_meta:{arguments:a, default_arguments:a}, has_method:{arguments:a, default_arguments:a}, has_node:{arguments:a, default_arguments:a}, has_node_and_resource:{arguments:a, default_arguments:a}, has_signal:{arguments:a, default_arguments:a}, has_user_signal:{arguments:a, default_arguments:a}, is_a_parent_of:{arguments:a, default_arguments:a}, is_blocking_signals:{arguments:, default_arguments:}, is_class:{arguments:a, default_arguments:a}, is_connected:{arguments:a, b, c, default_arguments:a, b, c}, is_displayed_folded:{arguments:, default_arguments:}, is_greater_than:{arguments:a, default_arguments:a}, is_in_group:{arguments:a, default_arguments:a}, is_inside_tree:{arguments:, default_arguments:}, is_network_master:{arguments:, default_arguments:}, is_physics_processing:{arguments:, default_arguments:}, is_physics_processing_internal:{arguments:, default_arguments:}, is_processing:{arguments:, default_arguments:}, is_processing_input:{arguments:, default_arguments:}, is_processing_internal:{arguments:, default_arguments:}, is_processing_unhandled_input:{arguments:, default_arguments:}, is_processing_unhandled_key_input:{arguments:, default_arguments:}, is_queued_for_deletion:{arguments:, default_arguments:}, math_fight:{arguments:, default_arguments:}, move_child:{arguments:a, b, default_arguments:a, b}, multiply:{arguments:a, b, default_arguments:a, b}, notification:{arguments:a, b, default_arguments:a, b = False}, pi:{arguments:, default_arguments:}, print_stray_nodes:{arguments:, default_arguments:}, print_tree:{arguments:, default_arguments:}, print_tree_pretty:{arguments:, default_arguments:}, propagate_call:{arguments:a, b, c, default_arguments:a, b = [], c = False}, propagate_notification:{arguments:a, default_arguments:a}, property_list_changed_notify:{arguments:, default_arguments:}, queue_free:{arguments:, default_arguments:}, raise:{arguments:, default_arguments:}, remove_and_skip:{arguments:, default_arguments:}, remove_child:{arguments:a, default_arguments:a}, remove_from_group:{arguments:a, default_arguments:a}, remove_meta:{arguments:a, default_arguments:a}, replace_by:{arguments:a, b, default_arguments:a, b = False}, request_ready:{arguments:, default_arguments:}, rpc:{arguments:a, default_arguments:a}, rpc_config:{arguments:a, b, default_arguments:a, b}, rpc_id:{arguments:a, b, default_arguments:a, b}, rpc_unreliable:{arguments:a, default_arguments:a}, rpc_unreliable_id:{arguments:a, b, default_arguments:a, b}, rset:{arguments:a, b, default_arguments:a, b}, rset_config:{arguments:a, b, default_arguments:a, b}, rset_id:{arguments:a, b, c, default_arguments:a, b, c}, rset_unreliable:{arguments:a, b, default_arguments:a, b}, rset_unreliable_id:{arguments:a, b, c, default_arguments:a, b, c}, set:{arguments:a, b, default_arguments:a, b}, set_block_signals:{arguments:a, default_arguments:a}, set_custom_multiplayer:{arguments:a, default_arguments:a}, set_deferred:{arguments:a, b, default_arguments:a, b}, set_display_folded:{arguments:a, default_arguments:a}, set_filename:{arguments:a, default_arguments:a}, set_indexed:{arguments:a, b, default_arguments:a, b}, set_message_translation:{arguments:a, default_arguments:a}, set_meta:{arguments:a, b, default_arguments:a, b}, set_name:{arguments:a, default_arguments:a}, set_network_master:{arguments:a, b, default_arguments:a, b = True}, set_owner:{arguments:a, default_arguments:a}, set_pause_mode:{arguments:a, default_arguments:a}, set_physics_process:{arguments:a, default_arguments:a}, set_physics_process_internal:{arguments:a, default_arguments:a}, set_process:{arguments:a, default_arguments:a}, set_process_input:{arguments:a, default_arguments:a}, set_process_internal:{arguments:a, default_arguments:a}, set_process_priority:{arguments:a, default_arguments:a}, set_process_unhandled_input:{arguments:a, default_arguments:a}, set_process_unhandled_key_input:{arguments:a, default_arguments:a}, set_scene_instance_load_placeholder:{arguments:a, default_arguments:a}, set_script:{arguments:a, default_arguments:a}, subtract:{arguments:a, b, default_arguments:a, b}, sum:{arguments:a, default_arguments:a}, to_string:{arguments:, default_arguments:}, tr:{arguments:a, default_arguments:a}, update_configuration_warning:{arguments:, default_arguments:}}",
"success": true
} ],
"context": "When we create two of it for the same script",
"fullname": "test_When_we_create_two_of_it_for_the_same_script",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|Object| [Node:1535] is equal to |Object| [Node:1535]",
"context": "Then we get the same double back",
"expected": "|Object| [Node:1535] is equal to |Object| [Node:1535]",
"success": true
} ],
"context": "When we call the double the second time",
"fullname": "test_When_we_call_double_a_second_time_on",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 3,
"path": "res://tests/integration/script_director.test.gd",
"source": {
"containers": [ "res://tests/integration", "res://tests" ],
"method": "",
"path": "res://tests/integration/script_director.test.gd",
"tags": [  ],
"test": ExtResource( 13 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 3
}, {
"context": "Given a Test Double",
"methods": [ {
"assertions": [ {
"actual": "|int| 4 is equal to |int| 4",
"context": "Then we get the correct result",
"expected": "|int| 4 is equal to |int| 4",
"success": true
} ],
"context": "When we call an add(x, y) method that we haven't directed",
"fullname": "test_When_we_call_an_add_method_that_we_have_not_directed",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|null| Null == null",
"context": "Then we get null",
"expected": "|null| Null == null",
"success": true
} ],
"context": "When we call a method that we have dummied",
"fullname": "test_When_we_call_a_method_that_we_have_dummied",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then it returns true",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we call a method that we have stubbed to return true",
"fullname": "test_When_we_call_a_method_that_we_have_stubbed_to_return_true",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|Object| [Node:1558] is equal to |Object| [Node:1558]",
"context": "Then it returns that same node",
"expected": "|Object| [Node:1558] is equal to |Object| [Node:1558]",
"success": true
} ],
"context": "When we call a method that we have stubbed to return a node",
"fullname": "test_When_we_call_a_method_that_we_have_stubbed_to_return_a_node",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "add was called",
"context": "Then we can see that it was called at least once",
"expected": "add was called",
"success": true
} ],
"context": "When we call a method that we are spying on",
"fullname": "test_When_we_call_a_method_that_we_are_spying_on",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "method: add was called with arguments: [10, 10]",
"context": "Then we can see that it was called with those arguments",
"expected": "method: add was called with arguments: [10, 10]",
"success": true
} ],
"context": "When we pass arguments to a method call that we are spying on",
"fullname": "test_When_we_pass_arguments_to_a_method_call_that_we_are_spying_on",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|String| Jackie is equal to |String| Jackie",
"context": "Then we can double the object successfully",
"expected": "|String| Jackie is equal to |String| Jackie",
"success": true
} ],
"context": "When we pass in dependecies on direct",
"fullname": "test_When_we_pass_in_deps_on_direct",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 99 is equal to |int| 99",
"context": "Then it affects the state of the double",
"expected": "|int| 99 is equal to |int| 99",
"success": true
} ],
"context": "When we pass a funcref as a subcall",
"fullname": "test_When_we_pass_a_funcref_as_a_subcall",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 9999 is equal to |int| 9999",
"context": "Then it returns the corresponding value when the pattern matches",
"expected": "|int| 9999 is equal to |int| 9999",
"success": true
} ],
"context": "When we call a method that was stubbed with an argument pattern that includes a non-primitive object",
"fullname": "test_When_we_call_a_method_that_was_stubbed_with_an_argument_pattern_that_includes_a_non_primitive_object",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| True is equal to |bool| True",
"context": "Then we can call it",
"expected": "|bool| True is equal to |bool| True",
"success": true
} ],
"context": "When we stubbed a keyworded method by passing in the correct keyword",
"fullname": "test_When_we_stubbed_a_keyword_method_by_passing_in_the_correct_keyword",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "(1, 1) is builtin: Vector2",
"context": "Then we can call methods on it",
"expected": "(1, 1) is builtin: Vector2",
"success": true
} ],
"context": "When we double an inner class",
"fullname": "test_When_we_double_an_inner_class",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 100 is equal to |int| 100",
"context": "Then it returns the default stubbed value when the arguments don't match any pattern",
"expected": "|int| 100 is equal to |int| 100",
"success": true
}, {
"actual": "|int| 1000 is equal to |int| 1000",
"context": "Then it returns the the corresponding value to the pattern the arguments matched",
"expected": "|int| 1000 is equal to |int| 1000",
"success": true
} ],
"context": "When we call a method that was stubbed to return different values based on argument patterns",
"fullname": "test_When_we_call_a_method_that_was_stubbed_to_return_different_values_based_on_argument_patterns",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|int| 4 is equal to |int| 4",
"context": "Then it calls its super implementation by default",
"expected": "|int| 4 is equal to |int| 4",
"success": true
}, {
"actual": "|int| 9999 is equal to |int| 9999",
"context": "Then it does not call its super implementation when arguments patterns match a different return value",
"expected": "|int| 9999 is equal to |int| 9999",
"success": true
} ],
"context": "When we call a method that we stubbed to call its super implementation by default",
"fullname": "test_When_we_call_a_method_that_we_stubbed_to_call_its_super_implementation_by_default",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|String| Jackie is equal to |String| Jackie",
"context": "Then we can double the object successfully",
"expected": "|String| Jackie is equal to |String| Jackie",
"success": true
} ],
"context": "When we pass in dependecies on double",
"fullname": "test_When_we_pass_in_deps_on_double",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 99 is equal to |int| 99",
"context": "Then it returns a value",
"expected": "|int| 99 is equal to |int| 99",
"success": true
} ],
"context": "When we pass a funcref as a subcall that returns",
"fullname": "test_When_we_pass_a_funcref_as_a_subcall_that_returns_a_value",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 9999 is equal to |int| 9999",
"context": "Then it returns the corresponding value when the partial pattern matches",
"expected": "|int| 9999 is equal to |int| 9999",
"success": true
} ],
"context": "When we call a method that was stubbed with a partial (ie using any()) argument pattern",
"fullname": "test_When_we_call_a_method_that_was_stubbed_with_a_partial_argument_pattern",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|Array| [10, 5] is equal to |Array| [10, 5]",
"context": "Then it returns a value",
"expected": "|Array| [10, 5] is equal to |Array| [10, 5]",
"success": true
} ],
"context": "When we pass an Object with a call_func function",
"fullname": "test_When_we_pass_an_object_with_callfunc_method_as_a_subcall",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|float| 6.283185 is equal to |float| 6.283185",
"context": "Then we can call the static methods of that inner double",
"expected": "|float| 6.283185 is equal to |float| 6.283185",
"success": true
} ],
"context": "When we add an doubled inner class to it",
"fullname": "test_When_we_add_a_doubled_inner_class_to_it",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|null| Null == null",
"context": "Then we get the stubbed value back",
"expected": "|null| Null == null",
"success": true
} ],
"context": "When we stub a method of a doubled inner class",
"fullname": "test_When_we_stub_a_method_of_a_double_inner_class",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 19,
"path": "res://tests/integration/test_double.test.gd",
"source": {
"containers": [ "res://tests/integration", "res://tests" ],
"method": "",
"path": "res://tests/integration/test_double.test.gd",
"tags": [  ],
"test": ExtResource( 14 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 19
}, {
"context": "Given a Boolean Assertion",
"methods": [ {
"assertions": [ {
"actual": "|bool| False == false",
"context": "Then it passes",
"expected": "|bool| False == false",
"success": true
} ],
"context": "When calling asserts.is_false(false)",
"fullname": "test_when_calling_asserts_is_false",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| True != false",
"context": "",
"expected": "|bool| True == false",
"success": false
} ],
"context": " intentional failure",
"fullname": "test_intentional_failure",
"passed": 0,
"success": false,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then it passes",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When calling asserts.is_true(true)",
"fullname": "test_when_calling_asserts_is_true",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 2,
"path": "res://tests/unit/boolean.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/boolean.test.gd",
"tags": [  ],
"test": ExtResource( 11 ),
"yield_time": 0.0
},
"success": false,
"time_taken": 0.0,
"total": 3
}, {
"context": "Given an Equality Assertion",
"methods": [ {
"assertions": [ {
"actual": "|int| 2 is greater than |int| 1",
"context": "Then it passes",
"expected": "|int| 2 is greater than |int| 1",
"success": true
} ],
"context": "When calling asserts.is_greater_than(2, 1)",
"fullname": "test_when_calling_is_greater_than",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 1 is equal or less than |int| 1",
"context": "Then it passes!",
"expected": "|int| 1 is equal or less than |int| 1",
"success": true
} ],
"context": "When calling asserts.is_equal_or_less_than(1, 1)",
"fullname": "test_when_calling_is_equal_or_less_than_with_equal_values",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 1 is less than |int| 2",
"context": "Then it passes",
"expected": "|int| 1 is less than |int| 2",
"success": true
} ],
"context": "When calling asserts.is_less_than(2, 1)",
"fullname": "test_when_calling_is_less_than",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 2 is equal or greater |int| 1",
"context": "Then it passes",
"expected": "|int| 2 is equal or greater |int| 1",
"success": true
} ],
"context": "When calling asserts.is_equal_or_greater_than(2, 1)",
"fullname": "test_when_calling_is_equal_or_greater_than",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 1 is equal or greater |int| 1",
"context": "Then it passes",
"expected": "|int| 1 is equal or greater |int| 1",
"success": true
} ],
"context": "When calling asserts.is_equal_or_greater_than(1, 1)",
"fullname": "test_when_calling_is_equal_or_greater_than_with_equal_values",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 5 is not equal to |int| 6",
"context": "Then it passes",
"expected": "|int| 5 != |int| 6",
"success": true
} ],
"context": "When callign asserts.is_not_equal(5, 6)",
"fullname": "test_when_calling_is_not_equal",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 1 is equal to |int| 1",
"context": "Then it passes",
"expected": "|int| 1 is equal to |int| 1",
"success": true
} ],
"context": "When calling asserts.is_equal(1, 1)",
"fullname": "test_when_calling_is_equal",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 7,
"path": "res://tests/unit/equality.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/equality.test.gd",
"tags": [  ],
"test": ExtResource( 8 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 7
}, {
"context": "Given A File Assertion",
"methods": [ {
"assertions": [ {
"actual": "res://tests/unit/file.test.gd exists",
"context": "Then it passes",
"expected": "res://tests/unit/file.test.gd exists",
"success": true
} ],
"context": "When calling asserts.file_exists when the file is this suite",
"fullname": "test_when_calling_file_exists_when_file_is_self",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "res://somefile.gd does not exist",
"context": "Then it passes",
"expected": "res://somefile.gd does not exist",
"success": true
} ],
"context": "When calling asserts.file_does_not_exist when there is no file",
"fullname": "test_when_calling_file_does_not_exist_when_there_is_no_file",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": " does not exist",
"context": "Then it passes",
"expected": " does not exist",
"success": true
} ],
"context": "When calling asserts file does not exist when path is empty",
"fullname": "test_when_calling_file_does_not_exist_when_path_is_empty",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 3,
"path": "res://tests/unit/file.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/file.test.gd",
"tags": [  ],
"test": ExtResource( 3 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 3
}, {
"context": "Given an Is Instance of class/type Assertion",
"methods": [ {
"assertions": [ {
"actual": "|Plane| 0, 0, 0, 0 != null",
"context": "plane is not null",
"expected": "|Plane| 0, 0, 0, 0 != null",
"success": true
}, {
"actual": "0, 0, 0, 0 is builtin: Plane",
"context": "then it passes",
"expected": "0, 0, 0, 0 is builtin: Plane",
"success": true
} ],
"context": "When calling asserts.is_Plane(plane: Plane())",
"fullname": "test_when_calling_is_Plane",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|Object| [Node:1702] != null",
"context": "node is not null",
"expected": "|Object| [Node:1702] != null",
"success": true
}, {
"actual": "[Node:1702] is builtin: Object",
"context": "An instance of node is an Object",
"expected": "[Node:1702] is builtin: Object",
"success": true
} ],
"context": "When calling is asserts.object(node: Node)",
"fullname": "test_when_calling_is_object",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|PoolByteArray| [PoolByteArray] != null",
"context": "bytes is not null",
"expected": "|PoolByteArray| [PoolByteArray] != null",
"success": true
}, {
"actual": "[PoolByteArray] is builtin: PoolByteArray",
"context": "Then it passes",
"expected": "[PoolByteArray] is builtin: PoolByteArray",
"success": true
} ],
"context": "When calling asserts.is_PoolByteArray(bytes: PoolByteArray)",
"fullname": "test_when_calling_is_PoolByteArray",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|PoolColorArray| [PoolColorArray] != null",
"context": "colors is not null",
"expected": "|PoolColorArray| [PoolColorArray] != null",
"success": true
}, {
"actual": "[PoolColorArray] is builtin: PoolColorArray",
"context": "Then it passes",
"expected": "[PoolColorArray] is builtin: PoolColorArray",
"success": true
} ],
"context": "When calling asserts.is_PoolColorArray(colors: PoolColorArray)",
"fullname": "test_when_calling_is_PoolColorArray",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|Basis| ((1, 0, 0), (0, 1, 0), (0, 0, 1)) != null",
"context": "basis is not null",
"expected": "|Basis| ((1, 0, 0), (0, 1, 0), (0, 0, 1)) != null",
"success": true
}, {
"actual": "((1, 0, 0), (0, 1, 0), (0, 0, 1)) is builtin: Basis",
"context": "Then it passes",
"expected": "((1, 0, 0), (0, 1, 0), (0, 0, 1)) is builtin: Basis",
"success": true
} ],
"context": "When calling asserts.is_basis(basis: Basis",
"fullname": "test_when_calling_is_Basis",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|NodePath| . != null",
"context": "@'Parent/Child' is not null",
"expected": "|NodePath| . != null",
"success": true
}, {
"actual": ". is builtin: NodePath",
"context": "Then it passes",
"expected": ". is builtin: NodePath",
"success": true
} ],
"context": "When calling asserts.is_NodePath(@'Parent/Child')",
"fullname": "test_when_calling_is_NodePath",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|AABB| 0, 0, 0 - 0, 0, 0 != null",
"context": "AABB is not null",
"expected": "|AABB| 0, 0, 0 - 0, 0, 0 != null",
"success": true
}, {
"actual": "0, 0, 0 - 0, 0, 0 is builtin: AABB",
"context": "Then it passes",
"expected": "0, 0, 0 - 0, 0, 0 is builtin: AABB",
"success": true
} ],
"context": "When calling asserts.is_AABB(aabb: AABB)",
"fullname": "test_when_calling_is_AABB",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|Color| 0,0,0,1 != null",
"context": "color is not null",
"expected": "|Color| 0,0,0,1 != null",
"success": true
}, {
"actual": "0,0,0,1 is builtin: Color",
"context": "Then it passes",
"expected": "0,0,0,1 is builtin: Color",
"success": true
} ],
"context": "When calling asserts.is_color(color: Color)",
"fullname": "test_when_calling_is_Color",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "1 is builtin: float",
"context": "Then it passes",
"expected": "1 is builtin: float",
"success": true
} ],
"context": "When calling asserts.is_float(1.0)",
"fullname": "test_when_calling_is_float",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|Array| [] != null",
"context": "array is not null",
"expected": "|Array| [] != null",
"success": true
}, {
"actual": "[] is builtin: Array",
"context": "Then it passes",
"expected": "[] is builtin: Array",
"success": true
} ],
"context": "When calling asserts.is_Array(array: Array)",
"fullname": "test_when_calling_is_Array",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "True is builtin: bool",
"context": "Then it passes",
"expected": "True is builtin: bool",
"success": true
} ],
"context": "When calling asserts.is_bool(true)",
"fullname": "test_when_calling_is_bool",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "{} is builtin: Dictionary",
"context": "Then it passes",
"expected": "{} is builtin: Dictionary",
"success": true
} ],
"context": "When calling asserts.is_Dictionary({})",
"fullname": "test_when_calling_is_Dictionary",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "1 is builtin: int",
"context": "Then it passes",
"expected": "1 is builtin: int",
"success": true
} ],
"context": "When callign asserts.is_int(1)",
"fullname": "test_when_calling_is_int",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|PoolStringArray| [] != null",
"context": "strs is not null",
"expected": "|PoolStringArray| [] != null",
"success": true
}, {
"actual": "[] is builtin: PoolStringArray",
"context": "Then it passes",
"expected": "[] is builtin: PoolStringArray",
"success": true
} ],
"context": "When calling is asserts.is_PoolStringArray(strs: PoolStringArray)",
"fullname": "test_when_calling_is_PoolStringArray",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|PoolRealArray| [] != null",
"context": "reals is not null",
"expected": "|PoolRealArray| [] != null",
"success": true
}, {
"actual": "[] is builtin: PoolRealArray",
"context": "Then it passes",
"expected": "[] is builtin: PoolRealArray",
"success": true
} ],
"context": "When calling is asserts.is_PoolRealArray(reals: PoolRealArray)",
"fullname": "test_when_calling_is_PoolRealArray",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|Quat| (0, 0, 0, 1) != null",
"context": "quat is not null",
"expected": "|Quat| (0, 0, 0, 1) != null",
"success": true
}, {
"actual": "(0, 0, 0, 1) is builtin: Quat",
"context": "Then it passes",
"expected": "(0, 0, 0, 1) is builtin: Quat",
"success": true
} ],
"context": "When calling asserts.is_Quat(quat: Quat)",
"fullname": "test_when_calling_is_Quat",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|Transform| 1, 0, 0, 0, 1, 0, 0, 0, 1 - 0, 0, 0 != null",
"context": "transform is not null",
"expected": "|Transform| 1, 0, 0, 0, 1, 0, 0, 0, 1 - 0, 0, 0 != null",
"success": true
}, {
"actual": "1, 0, 0, 0, 1, 0, 0, 0, 1 - 0, 0, 0 is builtin: Transform",
"context": "Then it passes",
"expected": "1, 0, 0, 0, 1, 0, 0, 0, 1 - 0, 0, 0 is builtin: Transform",
"success": true
} ],
"context": "When calling asserts.is_Transform(transform: Transform)",
"fullname": "test_when_calling_is_Transform",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|Rect2| (0, 0, 0, 0) != null",
"context": "rect2 is not null",
"expected": "|Rect2| (0, 0, 0, 0) != null",
"success": true
}, {
"actual": "(0, 0, 0, 0) is builtin: Rect2",
"context": "Then it passes",
"expected": "(0, 0, 0, 0) is builtin: Rect2",
"success": true
} ],
"context": "When calling asserts.is_Rect2(rect2: Rect2)",
"fullname": "test_when_calling_is_Rect2",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|PoolIntArray| [] != null",
"context": "ints is not null",
"expected": "|PoolIntArray| [] != null",
"success": true
}, {
"actual": "[] is builtin: PoolIntArray",
"context": "Then it passes",
"expected": "[] is builtin: PoolIntArray",
"success": true
} ],
"context": "When calling asserts.is_PoolIntArray(ints: PoolIntArray)",
"fullname": "test_when_calling_is_PoolIntArray",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|Transform2D| ((1, 0), (0, 1), (0, 0)) != null",
"context": "transform2D is not null",
"expected": "|Transform2D| ((1, 0), (0, 1), (0, 0)) != null",
"success": true
}, {
"actual": "((1, 0), (0, 1), (0, 0)) is builtin: Transform2D",
"context": "Then it passes",
"expected": "((1, 0), (0, 1), (0, 0)) is builtin: Transform2D",
"success": true
} ],
"context": "When calling asserts.is_Transform(transform2D: Transform2D)",
"fullname": "test_when_calling_is_Transform2D",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|RID| [RID] != null",
"context": "rid is not null",
"expected": "|RID| [RID] != null",
"success": true
}, {
"actual": "[RID] is builtin: RID",
"context": "Then it passes",
"expected": "[RID] is builtin: RID",
"success": true
} ],
"context": "When calling asserts.is_RID(rid: RID)",
"fullname": "test_when_calling_is_RID",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|PoolVector3Array| [] != null",
"context": "vec3s is not null",
"expected": "|PoolVector3Array| [] != null",
"success": true
}, {
"actual": "[] is builtin: PoolVector3Array",
"context": "Then it passes",
"expected": "[] is builtin: PoolVector3Array",
"success": true
} ],
"context": "When calling is asserts.is_PoolVector3Array(vec3s: PoolVector3Array)",
"fullname": "test_when_calling_is_PoolVector3Array",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|PoolVector2Array| [] != null",
"context": "vec2s is not null",
"expected": "|PoolVector2Array| [] != null",
"success": true
}, {
"actual": "[] is builtin: PoolVector2Array",
"context": "Then it passes",
"expected": "[] is builtin: PoolVector2Array",
"success": true
} ],
"context": "When calling is asserts.is_PoolVector2Array(vec2s: PoolVector2Array)",
"fullname": "test_when_calling_is_PoolVector2Array",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|String|  != null",
"context": "strs is not null",
"expected": "|String|  != null",
"success": true
}, {
"actual": " is builtin: String",
"context": "Then it passes",
"expected": " is builtin: String",
"success": true
} ],
"context": "When calling asserts.is_string(strs: String)",
"fullname": "test_when_calling_is_string",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|Vector2| (0, 0) != null",
"context": "vec2 is not null",
"expected": "|Vector2| (0, 0) != null",
"success": true
}, {
"actual": "(0, 0) is builtin: Vector2",
"context": "Then it passes",
"expected": "(0, 0) is builtin: Vector2",
"success": true
} ],
"context": "When calling asserts.is_Vector2(vec2)",
"fullname": "test_when_calling_is_Vector2",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|Vector3| (0, 0, 0) != null",
"context": "vec3 is not null",
"expected": "|Vector3| (0, 0, 0) != null",
"success": true
}, {
"actual": "(0, 0, 0) is builtin: Vector3",
"context": "Then it passes",
"expected": "(0, 0, 0) is builtin: Vector3",
"success": true
} ],
"context": "When calling asserts.is_Vector3(vec3: Vector3",
"fullname": "test_when_calling_is_Vector3",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
} ],
"passed": 26,
"path": "res://tests/unit/is_instance.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/is_instance.test.gd",
"tags": [  ],
"test": ExtResource( 6 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 26
}, {
"context": "Given an Is Not Instance of class/type Assertion",
"methods": [ {
"assertions": [ {
"actual": "Null is not builtin: AABB",
"context": "Then it passes",
"expected": "Null is not builtin: AABB",
"success": true
} ],
"context": "when calling asserts.is_not_AABB(null)",
"fullname": "test_when_calling_is_not_AABB",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Color",
"context": "Then it passes",
"expected": "Null is not builtin: Color",
"success": true
} ],
"context": "when calling asserts.is_not_Color(null)",
"fullname": "test_when_calling_is_not_Color",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Array",
"context": "Then it passes",
"expected": "Null is not builtin: Array",
"success": true
} ],
"context": "when calling asserts.is_not_Array(null)",
"fullname": "test_when_calling_is_not_Array",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Basis",
"context": "Then it passes",
"expected": "Null is not builtin: Basis",
"success": true
} ],
"context": "when calling asserts.is_not_Basis(null)",
"fullname": "test_when_calling_is_not_Basis",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: bool",
"context": "Then it passes",
"expected": "Null is not builtin: bool",
"success": true
} ],
"context": "when calling asserts.is_not_bool(null)",
"fullname": "test_when_calling_is_not_bool",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Plane",
"context": "Then it passes",
"expected": "Null is not builtin: Plane",
"success": true
} ],
"context": "when calling asserts.is_not_Plane(null)",
"fullname": "test_when_calling_is_not_Plane",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: float",
"context": "Then it passes",
"expected": "Null is not builtin: float",
"success": true
} ],
"context": "when calling asserts.is_not_float(null)",
"fullname": "test_when_calling_is_not_float",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: PoolRealArray",
"context": "Then it passes",
"expected": "Null is not builtin: PoolRealArray",
"success": true
} ],
"context": "when calling asserts.is_not_PoolRealArray(null)",
"fullname": "test_when_calling_is_not_PoolRealArray",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: PoolStringArray",
"context": "Then it passes",
"expected": "Null is not builtin: PoolStringArray",
"success": true
} ],
"context": "when calling asserts.is_not_PoolStringArray(null)",
"fullname": "test_when_calling_is_not_PoolStringArray",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Quat",
"context": "Then it passes",
"expected": "Null is not builtin: Quat",
"success": true
} ],
"context": "when calling asserts.is_not_Quat(null)",
"fullname": "test_when_calling_is_not_Quat",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Rect2",
"context": "Then it passes",
"expected": "Null is not builtin: Rect2",
"success": true
} ],
"context": "when calling asserts.is_not_Rect2(null)",
"fullname": "test_when_calling_is_not_Rect2",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Object",
"context": "Then it passes",
"expected": "Null is not builtin: Object",
"success": true
} ],
"context": "when calling asserts.is_not_Object(null)",
"fullname": "test_when_calling_is_not_Object",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: PoolByteArray",
"context": "Then it passes",
"expected": "Null is not builtin: PoolByteArray",
"success": true
} ],
"context": "when calling asserts.is_not_PoolByteArray(null)",
"fullname": "test_when_calling_is_not_PoolByteArray",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: int",
"context": "Then it passes",
"expected": "Null is not builtin: int",
"success": true
} ],
"context": "when calling asserts.is_not_int(null)",
"fullname": "test_when_calling_is_not_int",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: PoolColorArray",
"context": "Then it passes",
"expected": "Null is not builtin: PoolColorArray",
"success": true
} ],
"context": "when calling asserts.is_not_PoolColorArray(null)",
"fullname": "test_when_calling_is_not_PoolColorArray",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: PoolVector3Array",
"context": "Then it passes",
"expected": "Null is not builtin: PoolVector3Array",
"success": true
} ],
"context": "when calling asserts.is_not_PoolVector3Array(null)",
"fullname": "test_when_calling_is_not_PoolVector3Array",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Dictionary",
"context": "Then it passes",
"expected": "Null is not builtin: Dictionary",
"success": true
} ],
"context": "when calling asserts.is_not_Dictionary(null)",
"fullname": "test_when_calling_is_not_Dictionary",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: NodePath",
"context": "Then it passes",
"expected": "Null is not builtin: NodePath",
"success": true
} ],
"context": "when calling asserts.is_not_NodePath(null)",
"fullname": "test_when_calling_is_not_NodePath",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: PoolIntArray",
"context": "Then it passes",
"expected": "Null is not builtin: PoolIntArray",
"success": true
} ],
"context": "when calling asserts.is_not_PoolIntArray(null)",
"fullname": "test_when_calling_is_not_PoolIntArray",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: PoolVector2Array",
"context": "Then it passes",
"expected": "Null is not builtin: PoolVector2Array",
"success": true
} ],
"context": "when calling asserts.is_not_PoolVector2Array(null)",
"fullname": "test_when_calling_is_not_PoolVector2Array",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: String",
"context": "Then it passes",
"expected": "Null is not builtin: String",
"success": true
} ],
"context": "when calling asserts.is_not_String(null)",
"fullname": "test_when_calling_is_not_String",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Vector3",
"context": "Then it passes",
"expected": "Null is not builtin: Vector3",
"success": true
} ],
"context": "when calling asserts.is_not_Vector3(null)",
"fullname": "test_when_calling_is_not_Vector3",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Transform",
"context": "Then it passes",
"expected": "Null is not builtin: Transform",
"success": true
} ],
"context": "when calling asserts.is_not_Transform(null)",
"fullname": "test_when_calling_is_not_Transform",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Transform2D",
"context": "Then it passes",
"expected": "Null is not builtin: Transform2D",
"success": true
} ],
"context": "when calling asserts.is_not_Transform2D(null)",
"fullname": "test_when_calling_is_not_Transform2D",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Vector2",
"context": "Then it passes",
"expected": "Null is not builtin: Vector2",
"success": true
} ],
"context": "when calling asserts.is_not_Vector2(null)",
"fullname": "test_when_calling_is_not_Vector2",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: RID",
"context": "Then it passes",
"expected": "Null is not builtin: RID",
"success": true
} ],
"context": "when calling asserts.is_not_RID(null)",
"fullname": "test_when_calling_is_not_RID",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 26,
"path": "res://tests/unit/is_not_instance.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/is_not_instance.test.gd",
"tags": [  ],
"test": ExtResource( 2 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 26
}, {
"context": "Given a Null Assertion",
"methods": [ {
"assertions": [ {
"actual": "|Object| [Deleted Object] == null",
"context": "A Freed Node is null in Engine 3.2.2 or greater",
"expected": "|Object| [Deleted Object] == null",
"success": true
} ],
"context": "When calling freed object is null",
"fullname": "test_when_calling_freed_object_is_not_null",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|null| Null == null",
"context": "Then it passes",
"expected": "|null| Null == null",
"success": true
} ],
"context": "When calling asserts.is_null(null)",
"fullname": "test_when_calling_null_is_null",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|Object| [Node:1784] != null",
"context": "Then it passes",
"expected": "|Object| [Node:1784] != null",
"success": true
} ],
"context": "When calling Node is not null",
"fullname": "test_when_calling_node_is_not_null",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 3,
"path": "res://tests/unit/null.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/null.test.gd",
"tags": [  ],
"test": ExtResource( 12 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 3
}, {
"context": "Given an Object Assertion",
"methods": [ {
"assertions": [ {
"actual": "Null is freed from memory",
"context": "Then it passes",
"expected": "Null is freed from memory",
"success": true
} ],
"context": "When calling asserts.is_freed(freed_object",
"fullname": "test_when_calling_freed_object_is_freed",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:1786] has meta: dummy",
"context": "Then it passes",
"expected": "[Node:1786] has meta: dummy",
"success": true
}, {
"actual": "[Node:1786] has meta: dummy",
"context": "Then it passes",
"expected": "[Node:1786] has meta: dummy",
"success": true
} ],
"context": "When calling asserts.object_has_meta() after adding metadata",
"fullname": "test_when_calling_has_meta_after_adding_metadata",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "[Node:1793] is not freed",
"context": "Then it passes",
"expected": "[Node:1793] is not freed",
"success": true
} ],
"context": "When calling asserts.is_not_freed(unfreed_object)",
"fullname": "test_when_calling_unfreed_object_is_not_freed",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:1786] does not have meta: bad_meta",
"context": "Then it passes",
"expected": "[Node:1786] does not have meta: bad_meta",
"success": true
} ],
"context": "When calling asserts.object_does_not_have_meta()",
"fullname": "test_when_calling_does_not_have_meta",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:1796] is queued for deletion",
"context": "Then it passes",
"expected": "[Node:1796] is queued for deletion",
"success": true
} ],
"context": "When calling asserts.object_is_queued for deletion after calling queue_free",
"fullname": "test_when_calling_obj_is_queued_for_deletion_after_calling_queue_free",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:1798] is not queued for deletion",
"context": "Then it passes",
"expected": "[Node:1798] is not queued for deletion",
"success": true
} ],
"context": "When calling asserts.object_is_not_for_queued_deletion after not calling queue free()",
"fullname": "test_when_calling_obj_is_not_for_queued_deletion_after_not_calling_queue_free",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:1786] does not have user signal: builtin_dummy",
"context": "Then it passes",
"expected": "[Node:1786] does not have user signal: builtin_dummy",
"success": true
} ],
"context": "When calling does not have user signal with class signal",
"fullname": "test_when_calling_does_not_have_user_signal_with_class_signal_constant",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:1801] is blocking signals",
"context": "Then it passes",
"expected": "[Node:1801] is blocking signals",
"success": true
} ],
"context": "When calling is blocking signals while blocking signals",
"fullname": "test_is_blocking_signals",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:1786] does not have meta: confusing",
"context": "Then it passes",
"expected": "[Node:1786] does not have meta: confusing",
"success": true
} ],
"context": "When calling asserts.object_has_meta with real key but null val",
"fullname": "test_when_calling_does_not_have_meta_real_key_null_value_pair",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:1786].builtin_dummy is not connected to [Node:1786].title",
"context": "Then it passes",
"expected": "[Node:1786].builtin_dummy is not connected to [Node:1786].title",
"success": true
} ],
"context": "When calling asserts object is not connected with an invalid connection",
"fullname": "test_when_calling_obj_is_not_connected_with_an_invalid_connection",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:1786] has method: title",
"context": "Then it passes",
"expected": "[Node:1786] has method: title",
"success": true
} ],
"context": "When calling has_method('title')",
"fullname": "test_when_calling_has_method_title",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:1786].builtin_dummy is connected to [Node:1786].title",
"context": "Then it passes",
"expected": "[Node:1786].builtin_dummy is connected to [Node:1786].title",
"success": true
} ],
"context": "When calling asserts object is connected with a valid connection",
"fullname": "test_when_calling_obj_is_connected_with_a_real_connection",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:1786] does not have user signal: false_signal",
"context": "Then it passes",
"expected": "[Node:1786] does not have user signal: false_signal",
"success": true
} ],
"context": "When calling obj_does_not_have_user_signal with fake signal",
"fullname": "test_when_calling_does_not_have_user_signal",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:1808] is not blocking signals",
"context": "Then it passes",
"expected": "[Node:1808] is not blocking signals",
"success": true
} ],
"context": "When calling is not blocking signals while not blocking signals",
"fullname": "test_is_not_blocking_signals",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:1786] has user signal: dummy_signal",
"context": "Then it passes",
"expected": "[Node:1786] has user signal: dummy_signal",
"success": true
} ],
"context": "When calling obj_has_user_signal after adding a signal",
"fullname": "test_when_calling_has_user_signal_after_adding_a_signal",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 15,
"path": "res://tests/unit/object.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/object.test.gd",
"tags": [  ],
"test": ExtResource( 7 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 15
}, {
"context": "Given the Addition Operator",
"methods": [ {
"assertions": [ {
"actual": "|int| 4 is equal to |int| 4",
"context": "",
"expected": "|int| 4 is equal to |int| 4",
"success": true
} ],
"context": "When we add 2 to 2 we get 4",
"fullname": "test_add",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 8 is equal to |int| 8",
"context": "",
"expected": "|int| 8 is equal to |int| 8",
"success": true
} ],
"context": "When we add 5 to 3 we get 8",
"fullname": "test_add",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 13 is equal to |int| 13",
"context": "",
"expected": "|int| 13 is equal to |int| 13",
"success": true
} ],
"context": "When we add 7 to 6 we get 13",
"fullname": "test_add",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 0 is equal to |int| 0",
"context": "",
"expected": "|int| 0 is equal to |int| 0",
"success": true
} ],
"context": "When we subtract 2 from 2 we get 0",
"fullname": "test_subtract",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 2 is equal to |int| 2",
"context": "",
"expected": "|int| 2 is equal to |int| 2",
"success": true
} ],
"context": "When we subtract 5 from 3 we get 2",
"fullname": "test_subtract",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 1 is equal to |int| 1",
"context": "",
"expected": "|int| 1 is equal to |int| 1",
"success": true
} ],
"context": "When we subtract 7 from 6 we get 1",
"fullname": "test_subtract",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 6,
"path": "res://tests/unit/parameters.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/parameters.test.gd",
"tags": [  ],
"test": ExtResource( 16 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 6
}, {
"context": "Given A Range Assertion",
"methods": [ {
"assertions": [ {
"actual": "0 is in range(0, 10)",
"context": "Then it passes",
"expected": "0 is in range(0, 10)",
"success": true
} ],
"context": "When calling is (0) in range(0, 10)",
"fullname": "test_when_calling_is_in_range",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "10 is not in range(0, 10)",
"context": "Then it passes",
"expected": "10 is not in range(0, 10)",
"success": true
} ],
"context": "When calling is (10) not in range (in range(0, 10)",
"fullname": "test_when_calling_is_not_in_range",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 2,
"path": "res://tests/unit/range.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/range.test.gd",
"tags": [  ],
"test": ExtResource( 15 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 2
}, {
"context": "Given a String Assertion",
"methods": [ {
"assertions": [ {
"actual": "lorem impsum contains em im",
"context": "Then it passes",
"expected": "lorem impsum contains em im",
"success": true
} ],
"context": "When calling asserts.string_contains('em im', 'lorem impsum')",
"fullname": "test_when_calling_string_contains",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "impsum does not begin with bleh lorem",
"context": "Then it passes",
"expected": "impsum does not begin with bleh lorem",
"success": true
} ],
"context": "When calling asserts.string_does_not_begin_with('lorem', 'impsum')",
"fullname": "test_when_calling_string_does_not_begin_with",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "lorem impsum begins with lorem",
"context": "Then it passes",
"expected": "lorem impsum begins with lorem",
"success": true
} ],
"context": "When calling asserts.string_begins_with('lorem', 'lorem impsum')",
"fullname": "test_when_calling_string_begins_with",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "impsum does not contain beem im",
"context": "Then it passes",
"expected": "impsum does not contain beem im",
"success": true
} ],
"context": "When calling asserts.string_does_not_contain('em im', 'impsum')",
"fullname": "test_when_calling_string_does_not_contain",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "lorem impsum ends with impsum",
"context": "Then it passes",
"expected": "lorem impsum ends with impsum",
"success": true
} ],
"context": "When calling asserts.string_ends_with('impsum', 'lorem impsum')",
"fullname": "test_when_calling_string_ends_with",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "impsum does not end with lorem",
"context": "Then it passes",
"expected": "impsum does not end with lorem",
"success": true
} ],
"context": "When calling asserts.string_does_not_end_with('lorem', 'impsum')",
"fullname": "test_when_calling_string_does_not_end_with",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 6,
"path": "res://tests/unit/string.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/string.test.gd",
"tags": [  ],
"test": ExtResource( 9 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 6
}, {
"context": "Dummy Passing Test",
"methods": [ {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Passing!",
"expected": "|bool| True == true",
"success": true
} ],
"context": "This method passes",
"fullname": "test_this_method_passes",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 1,
"path": "res://tests/unit/suite.test.gd.DummyOne",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/suite.test.gd.DummyOne",
"tags": [  ],
"test": SubResource( 27 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 1
}, {
"context": "Dummy Test 2",
"methods": [ {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Passing!",
"expected": "|bool| True == true",
"success": true
} ],
"context": "This method passes",
"fullname": "test_this_method_passes",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 1,
"path": "res://tests/unit/suite.test.gd.DummyTwo",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/suite.test.gd.DummyTwo",
"tags": [  ],
"test": SubResource( 28 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 1
}, {
"context": "Given a Test Script",
"methods": [ {
"assertions": [ {
"actual": "|bool| True == true",
"context": "if the test didn't break this works",
"expected": "|bool| True == true",
"success": true
} ],
"context": " we can omit describe",
"fullname": "test_we_can_omit_describe",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|int| 2 is equal to |int| 2",
"context": "",
"expected": "|int| 2 is equal to |int| 2",
"success": true
} ],
"context": " when we omit context we can see expected and got under method",
"fullname": "test_when_we_omit_context_we_can_see_expected_and_got_under_method",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|int| 10 is greater than |int| 1",
"context": "We get an array of multiple values back",
"expected": "|int| 10 is greater than |int| 1",
"success": true
}, {
"actual": "|int| 0 is not equal to |int| 9",
"context": "With different values",
"expected": "|int| 0 != |int| 9",
"success": true
}, {
"actual": "|int| 10 is greater than |int| 1",
"context": "And we can track multiple properties",
"expected": "|int| 10 is greater than |int| 1",
"success": true
} ],
"context": "When we record properties",
"fullname": "test_we_can_record_properties",
"passed": 3,
"success": true,
"time": 0.0,
"total": 3
} ],
"passed": 3,
"path": "res://tests/unit/test.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/test.test.gd",
"tags": [  ],
"test": ExtResource( 19 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 3
}, {
"context": "Given a Signal Watcher",
"methods": [ {
"assertions": [ {
"actual": "signal: multiple was emitted from [Node:1853] 2",
"context": "Then we can track how many times we emitted it",
"expected": "signal: multiple was emitted from [Node:1853] 2",
"success": true
} ],
"context": "When we watch and signal and emit it multiple times",
"fullname": "test_When_we_watch_a_signal_and_emit_it_multiple_times",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Signal: example was not emitted from [Node:1853]",
"context": "Then it does not capture the non-emitted signal",
"expected": "Signal: example was not emitted from [Node:1853]",
"success": true
} ],
"context": "When we watch and do not emit a signal",
"fullname": "test_When_we_watch_and_do_not_emit_a_signal",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "signal: example was emitted from [Node:1853]",
"context": "Then it captures the emitted signal",
"expected": "signal: example was emitted from [Node:1853]",
"success": true
} ],
"context": "When we watch and emit a signal",
"fullname": "test_When_we_watch_and_emit_a_signal",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Signal: example was emitted from [Node:1853] with arguments: [1, 20, 5]",
"context": "Then it captures any arguments that where passed when the signal was emitted",
"expected": "Signal: example was emitted from [Node:1853] with arguments: [1, 20, 5]",
"success": true
} ],
"context": "When we watch a signal from an object with no bound variables",
"fullname": "test_When_we_watch_a_signal_from_an_object_with_no_bound_variables",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 4,
"path": "res://tests/unit/watcher.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/watcher.test.gd",
"tags": [  ],
"test": ExtResource( 17 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 4
}, {
"context": "Given a Yield",
"methods": [ {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then we set var a to true",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then we set var b to true",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we yield in start twice",
"fullname": "test_When_we_yield_in_start",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then we set var c to true",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then we set var d to true",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we yield in pre thrice",
"fullname": "test_When_we_yield_in_pre",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then we set var e to true",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then we set var f to true",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we yield twice in execute",
"fullname": "test_When_we_yield_in_execute",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then the yielder is unpaused",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then the timeout signal of the yielder is connected",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then our signal is connected to the yielder",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we call until signal",
"fullname": "test_When_we_call_until_signal",
"passed": 3,
"success": true,
"time": 0.0,
"total": 3
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then the timeout signal is disconnected",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then the signal-signal is disconnected",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When it is finished",
"fullname": "test_When_yielder_is_finished_signals_are_disconnected",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then the yielder is paused",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "The timeout signal of the yielder is not connected",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When the yielder times out on until_timeout(0.1)",
"fullname": "test_When_the_yielder_times_out",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then yielder is unpaused",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "The timeout signal of the yielder is connected",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we call until_timeout (with 1.0)",
"fullname": "test_When_we_call_until_timeout",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "[100, Null, Null, Null, Null, Null] is builtin: Array",
"context": "Then we get an array",
"expected": "[100, Null, Null, Null, Null, Null] is builtin: Array",
"success": true
}, {
"actual": "|int| 6 is equal to |int| 6",
"context": "Of size 6",
"expected": "|int| 6 is equal to |int| 6",
"success": true
}, {
"actual": "|int| 100 is equal to |int| 100",
"context": "Where element 0 is 100",
"expected": "|int| 100 is equal to |int| 100",
"success": true
} ],
"context": "When yield(self.yield_value()) returns",
"fullname": "test_When_we_yield_we_get_the_return_value",
"passed": 3,
"success": true,
"time": 0.0,
"total": 3
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then the yielder is paused",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When a signal being yielded on is emitted",
"fullname": "test_When_a_signal_being_yielded_on_is_emitted_the_yielder_is_stopped",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then the yielder is paused",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then the timeout signal of the yielder is disconnected",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then our signal to the yielder is disconnected",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When the yielder heres our signal",
"fullname": "test_When_the_yielder_hears_our_signal",
"passed": 3,
"success": true,
"time": 0.0,
"total": 3
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then yielder is not active",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When asserting against a test",
"fullname": "test_Yielder_is_not_active_when_asserting",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 11,
"path": "res://tests/unit/yield.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/yield.test.gd",
"tags": [  ],
"test": ExtResource( 18 ),
"yield_time": 1.9
},
"success": true,
"time_taken": 0.0,
"total": 11
} ],
1611526508: [ {
"context": "Given a Boolean Assertion",
"methods": [ {
"assertions": [ {
"actual": "|bool| False == false",
"context": "Then it passes",
"expected": "|bool| False == false",
"success": true
} ],
"context": "When calling asserts.is_false(false)",
"fullname": "test_when_calling_asserts_is_false",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| True != false",
"context": "",
"expected": "|bool| True == false",
"success": false
} ],
"context": " intentional failure",
"fullname": "test_intentional_failure",
"passed": 0,
"success": false,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then it passes",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When calling asserts.is_true(true)",
"fullname": "test_when_calling_asserts_is_true",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 2,
"path": "res://tests/unit/boolean.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/boolean.test.gd",
"tags": [  ],
"test": ExtResource( 11 ),
"yield_time": 0.0
},
"success": false,
"time_taken": 0.0,
"total": 3
} ],
1611527701: [ {
"context": "Given a Boolean Assertion",
"methods": [ {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then it passes",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When calling asserts.is_true(true)",
"fullname": "test_when_calling_asserts_is_true",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| False == false",
"context": "Then it passes",
"expected": "|bool| False == false",
"success": true
} ],
"context": "When calling asserts.is_false(false)",
"fullname": "test_when_calling_asserts_is_false",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| True != false",
"context": "",
"expected": "|bool| True == false",
"success": false
} ],
"context": " intentional failure",
"fullname": "test_intentional_failure",
"passed": 0,
"success": false,
"time": 0.0,
"total": 1
} ],
"passed": 2,
"path": "res://tests/unit/boolean.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/boolean.test.gd",
"tags": [  ],
"test": ExtResource( 11 ),
"yield_time": 0.0
},
"success": false,
"time_taken": 0.0,
"total": 3
} ],
1611527788: [ {
"context": "Given a Boolean Assertion",
"methods": [ {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then it passes",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When calling asserts.is_true(true)",
"fullname": "test_when_calling_asserts_is_true",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| False == false",
"context": "Then it passes",
"expected": "|bool| False == false",
"success": true
} ],
"context": "When calling asserts.is_false(false)",
"fullname": "test_when_calling_asserts_is_false",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| True != false",
"context": "",
"expected": "|bool| True == false",
"success": false
} ],
"context": " intentional failure",
"fullname": "test_intentional_failure",
"passed": 0,
"success": false,
"time": 0.0,
"total": 1
} ],
"passed": 2,
"path": "res://tests/unit/boolean.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/boolean.test.gd",
"tags": [  ],
"test": ExtResource( 11 ),
"yield_time": 0.0
},
"success": false,
"time_taken": 0.0,
"total": 3
} ],
1611527815: [ {
"context": "Given A File Assertion",
"methods": [ {
"assertions": [ {
"actual": "res://tests/unit/file.test.gd exists",
"context": "Then it passes",
"expected": "res://tests/unit/file.test.gd exists",
"success": true
} ],
"context": "When calling asserts.file_exists when the file is this suite",
"fullname": "test_when_calling_file_exists_when_file_is_self",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "res://somefile.gd does not exist",
"context": "Then it passes",
"expected": "res://somefile.gd does not exist",
"success": true
} ],
"context": "When calling asserts.file_does_not_exist when there is no file",
"fullname": "test_when_calling_file_does_not_exist_when_there_is_no_file",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": " does not exist",
"context": "Then it passes",
"expected": " does not exist",
"success": true
} ],
"context": "When calling asserts file does not exist when path is empty",
"fullname": "test_when_calling_file_does_not_exist_when_path_is_empty",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 3,
"path": "res://tests/unit/file.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/file.test.gd",
"tags": [  ],
"test": ExtResource( 3 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 3
} ],
1611528015: [ {
"context": "Given a Boolean Assertion",
"methods": [ {
"assertions": [ {
"actual": "|bool| True != false",
"context": "",
"expected": "|bool| True == false",
"success": false
} ],
"context": " intentional failure",
"fullname": "test_intentional_failure",
"passed": 0,
"success": false,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then it passes",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When calling asserts.is_true(true)",
"fullname": "test_when_calling_asserts_is_true",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| False == false",
"context": "Then it passes",
"expected": "|bool| False == false",
"success": true
} ],
"context": "When calling asserts.is_false(false)",
"fullname": "test_when_calling_asserts_is_false",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 2,
"path": "res://tests/integration/boolean.test.gd",
"source": {
"containers": [ "res://tests/integration", "res://tests" ],
"method": "",
"path": "res://tests/integration/boolean.test.gd",
"tags": [  ],
"test": ExtResource( 20 ),
"yield_time": 0.0
},
"success": false,
"time_taken": 0.0,
"total": 3
}, {
"context": "Default Args",
"methods": [ {
"assertions": [ {
"actual": "|bool| True == true",
"context": "If this method can be reached then we have doubled a script with default argument(s) properly!",
"expected": "|bool| True == true",
"success": true
} ],
"context": " default arguments of interpolate property",
"fullname": "test_default_arguments_of_interpolate_property",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 1,
"path": "res://tests/integration/default_args.test.gd",
"source": {
"containers": [ "res://tests/integration", "res://tests" ],
"method": "",
"path": "res://tests/integration/default_args.test.gd",
"tags": [  ],
"test": ExtResource( 10 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 1
}, {
"context": "Given is_on_floor",
"methods": [ {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then it can be stubbed",
"expected": "|bool| True == true",
"success": true
} ],
"context": "From a built-in KinematicBody2D2",
"fullname": "test_stubbing_is_on_floor_method_from_builtin_class2",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then it can be stubbed",
"expected": "|bool| True == true",
"success": true
} ],
"context": "From a user-defined script",
"fullname": "test_stubbing_is_on_floor_method_from_user_defined_class",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then it can be stubbed",
"expected": "|bool| True == true",
"success": true
} ],
"context": "From a child node of a scene without scripts",
"fullname": "test_stubbing_is_on_floor_as_child_node_with_no_script",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 3,
"path": "res://tests/integration/on_floor.test.gd",
"source": {
"containers": [ "res://tests/integration", "res://tests" ],
"method": "",
"path": "res://tests/integration/on_floor.test.gd",
"tags": [  ],
"test": ExtResource( 5 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 3
}, {
"context": "Given a Scene Director",
"methods": [ {
"assertions": [ {
"actual": "|Dictionary| {.:[Reference:1365], A:[Reference:1366], A/B:[Reference:1368], C:[Reference:1367], C/D:[Reference:1369]} is not equal to |Dictionary| {.:[Reference:1379], A:[Reference:1380], A/B:[Reference:1382], C:[Reference:1381], C/D:[Reference:1383]}",
"context": "Then they do not share resources",
"expected": "|Dictionary| {.:[Reference:1365], A:[Reference:1366], A/B:[Reference:1368], C:[Reference:1367], C/D:[Reference:1369]} != |Dictionary| {.:[Reference:1379], A:[Reference:1380], A/B:[Reference:1382], C:[Reference:1381], C/D:[Reference:1383]}",
"success": true
} ],
"context": "When we create two of it for the same scene",
"fullname": "test_When_we_create_two_of_it_for_the_same_scene",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 9999 is equal to |int| 9999",
"context": "Then we get the stubbed return value",
"expected": "|int| 9999 is equal to |int| 9999",
"success": true
} ],
"context": "When we call a method from the root node that we stubbed",
"fullname": "test_When_we_call_a_method_from_the_root_node_that_we_stubbed",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 999 is equal to |int| 999",
"context": "Then we get the stubbed return value",
"expected": "|int| 999 is equal to |int| 999",
"success": true
} ],
"context": "When we call a method from a child node that we stubbed",
"fullname": "test_When_we_call_a_method_from_a_child_node_that_we_stubbed",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 99 is equal to |int| 99",
"context": "Then we get the stubbed return value",
"expected": "|int| 99 is equal to |int| 99",
"success": true
} ],
"context": "When we call a method from a grandchild node that we stubbed",
"fullname": "test_When_we_call_a_method_from_a_grandchild_node_that_we_stubbed",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|NodePath| A is equal to |NodePath| A",
"context": "We have the correct NodePath Set",
"expected": "|NodePath| A is equal to |NodePath| A",
"success": true
} ],
"context": "When we add it to the tree it runs",
"fullname": "test_When_we_add_it_to_the_tree_it_runs",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 5,
"path": "res://tests/integration/scene_director.test.gd",
"source": {
"containers": [ "res://tests/integration", "res://tests" ],
"method": "",
"path": "res://tests/integration/scene_director.test.gd",
"tags": [  ],
"test": ExtResource( 4 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 5
}, {
"context": "Given a Script Director",
"methods": [ {
"assertions": [ {
"actual": "[Reference:1523] is instance of class: [GDScript:1516]",
"context": "Then we get that inner class back",
"expected": "[Reference:1523] is instance of class: [GDScript:1516]",
"success": true
} ],
"context": "When we double an inner class",
"fullname": "test_When_we_double_an_inner_class",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|Dictionary| {_enter_tree:{arguments:, default_arguments:}, _exit_tree:{arguments:, default_arguments:}, _get:{arguments:a, default_arguments:a}, _get_configuration_warning:{arguments:, default_arguments:}, _get_editor_description:{arguments:, default_arguments:}, _get_import_path:{arguments:, default_arguments:}, _get_property_list:{arguments:, default_arguments:}, _init:{arguments:, default_arguments:}, _input:{arguments:a, default_arguments:a}, _notification:{arguments:a, default_arguments:a}, _physics_process:{arguments:a, default_arguments:a}, _process:{arguments:a, default_arguments:a}, _ready:{arguments:, default_arguments:}, _set:{arguments:a, b, default_arguments:a, b}, _set_editor_description:{arguments:a, default_arguments:a}, _set_import_path:{arguments:a, default_arguments:a}, _to_string:{arguments:, default_arguments:}, _unhandled_input:{arguments:a, default_arguments:a}, _unhandled_key_input:{arguments:a, default_arguments:a}, add:{arguments:a, b, default_arguments:a, b}, add_child:{arguments:a, b, default_arguments:a, b = False}, add_child_below_node:{arguments:a, b, c, default_arguments:a, b, c = False}, add_to_group:{arguments:a, b, default_arguments:a, b = False}, add_user_signal:{arguments:a, b, default_arguments:a, b = []}, call:{arguments:a, default_arguments:a}, call_deferred:{arguments:a, default_arguments:a}, callv:{arguments:a, b, default_arguments:a, b}, can_process:{arguments:, default_arguments:}, can_translate_messages:{arguments:, default_arguments:}, connect:{arguments:a, b, c, d, e, default_arguments:a, b, c, d = [], e = 0}, disconnect:{arguments:a, b, c, default_arguments:a, b, c}, divide:{arguments:a, b, default_arguments:a, b}, duplicate:{arguments:a, default_arguments:a = 15}, emit_signal:{arguments:a, default_arguments:a}, find_node:{arguments:a, b, c, default_arguments:a, b = True, c = True}, find_parent:{arguments:a, default_arguments:a}, free:{arguments:, default_arguments:}, get:{arguments:a, default_arguments:a}, get_child:{arguments:a, default_arguments:a}, get_child_count:{arguments:, default_arguments:}, get_children:{arguments:, default_arguments:}, get_class:{arguments:, default_arguments:}, get_custom_multiplayer:{arguments:, default_arguments:}, get_filename:{arguments:, default_arguments:}, get_groups:{arguments:, default_arguments:}, get_incoming_connections:{arguments:, default_arguments:}, get_index:{arguments:, default_arguments:}, get_indexed:{arguments:a, default_arguments:a}, get_instance_id:{arguments:, default_arguments:}, get_meta:{arguments:a, default_arguments:a}, get_meta_list:{arguments:, default_arguments:}, get_method_list:{arguments:, default_arguments:}, get_multiplayer:{arguments:, default_arguments:}, get_name:{arguments:, default_arguments:}, get_network_master:{arguments:, default_arguments:}, get_node:{arguments:a, default_arguments:a}, get_node_and_resource:{arguments:a, default_arguments:a}, get_node_or_null:{arguments:a, default_arguments:a}, get_owner:{arguments:, default_arguments:}, get_parent:{arguments:, default_arguments:}, get_path:{arguments:, default_arguments:}, get_path_to:{arguments:a, default_arguments:a}, get_pause_mode:{arguments:, default_arguments:}, get_physics_process_delta_time:{arguments:, default_arguments:}, get_position_in_parent:{arguments:, default_arguments:}, get_process_delta_time:{arguments:, default_arguments:}, get_process_priority:{arguments:, default_arguments:}, get_property_list:{arguments:, default_arguments:}, get_scene_instance_load_placeholder:{arguments:, default_arguments:}, get_script:{arguments:, default_arguments:}, get_signal_connection_list:{arguments:a, default_arguments:a}, get_signal_list:{arguments:, default_arguments:}, get_tree:{arguments:, default_arguments:}, get_viewport:{arguments:, default_arguments:}, has_meta:{arguments:a, default_arguments:a}, has_method:{arguments:a, default_arguments:a}, has_node:{arguments:a, default_arguments:a}, has_node_and_resource:{arguments:a, default_arguments:a}, has_signal:{arguments:a, default_arguments:a}, has_user_signal:{arguments:a, default_arguments:a}, is_a_parent_of:{arguments:a, default_arguments:a}, is_blocking_signals:{arguments:, default_arguments:}, is_class:{arguments:a, default_arguments:a}, is_connected:{arguments:a, b, c, default_arguments:a, b, c}, is_displayed_folded:{arguments:, default_arguments:}, is_greater_than:{arguments:a, default_arguments:a}, is_in_group:{arguments:a, default_arguments:a}, is_inside_tree:{arguments:, default_arguments:}, is_network_master:{arguments:, default_arguments:}, is_physics_processing:{arguments:, default_arguments:}, is_physics_processing_internal:{arguments:, default_arguments:}, is_processing:{arguments:, default_arguments:}, is_processing_input:{arguments:, default_arguments:}, is_processing_internal:{arguments:, default_arguments:}, is_processing_unhandled_input:{arguments:, default_arguments:}, is_processing_unhandled_key_input:{arguments:, default_arguments:}, is_queued_for_deletion:{arguments:, default_arguments:}, math_fight:{arguments:, default_arguments:}, move_child:{arguments:a, b, default_arguments:a, b}, multiply:{arguments:a, b, default_arguments:a, b}, notification:{arguments:a, b, default_arguments:a, b = False}, pi:{arguments:, default_arguments:}, print_stray_nodes:{arguments:, default_arguments:}, print_tree:{arguments:, default_arguments:}, print_tree_pretty:{arguments:, default_arguments:}, propagate_call:{arguments:a, b, c, default_arguments:a, b = [], c = False}, propagate_notification:{arguments:a, default_arguments:a}, property_list_changed_notify:{arguments:, default_arguments:}, queue_free:{arguments:, default_arguments:}, raise:{arguments:, default_arguments:}, remove_and_skip:{arguments:, default_arguments:}, remove_child:{arguments:a, default_arguments:a}, remove_from_group:{arguments:a, default_arguments:a}, remove_meta:{arguments:a, default_arguments:a}, replace_by:{arguments:a, b, default_arguments:a, b = False}, request_ready:{arguments:, default_arguments:}, rpc:{arguments:a, default_arguments:a}, rpc_config:{arguments:a, b, default_arguments:a, b}, rpc_id:{arguments:a, b, default_arguments:a, b}, rpc_unreliable:{arguments:a, default_arguments:a}, rpc_unreliable_id:{arguments:a, b, default_arguments:a, b}, rset:{arguments:a, b, default_arguments:a, b}, rset_config:{arguments:a, b, default_arguments:a, b}, rset_id:{arguments:a, b, c, default_arguments:a, b, c}, rset_unreliable:{arguments:a, b, default_arguments:a, b}, rset_unreliable_id:{arguments:a, b, c, default_arguments:a, b, c}, set:{arguments:a, b, default_arguments:a, b}, set_block_signals:{arguments:a, default_arguments:a}, set_custom_multiplayer:{arguments:a, default_arguments:a}, set_deferred:{arguments:a, b, default_arguments:a, b}, set_display_folded:{arguments:a, default_arguments:a}, set_filename:{arguments:a, default_arguments:a}, set_indexed:{arguments:a, b, default_arguments:a, b}, set_message_translation:{arguments:a, default_arguments:a}, set_meta:{arguments:a, b, default_arguments:a, b}, set_name:{arguments:a, default_arguments:a}, set_network_master:{arguments:a, b, default_arguments:a, b = True}, set_owner:{arguments:a, default_arguments:a}, set_pause_mode:{arguments:a, default_arguments:a}, set_physics_process:{arguments:a, default_arguments:a}, set_physics_process_internal:{arguments:a, default_arguments:a}, set_process:{arguments:a, default_arguments:a}, set_process_input:{arguments:a, default_arguments:a}, set_process_internal:{arguments:a, default_arguments:a}, set_process_priority:{arguments:a, default_arguments:a}, set_process_unhandled_input:{arguments:a, default_arguments:a}, set_process_unhandled_key_input:{arguments:a, default_arguments:a}, set_scene_instance_load_placeholder:{arguments:a, default_arguments:a}, set_script:{arguments:a, default_arguments:a}, subtract:{arguments:a, b, default_arguments:a, b}, sum:{arguments:a, default_arguments:a}, to_string:{arguments:, default_arguments:}, tr:{arguments:a, default_arguments:a}, update_configuration_warning:{arguments:, default_arguments:}} is not equal to |Dictionary| {_enter_tree:{arguments:, default_arguments:}, _exit_tree:{arguments:, default_arguments:}, _get:{arguments:a, default_arguments:a}, _get_configuration_warning:{arguments:, default_arguments:}, _get_editor_description:{arguments:, default_arguments:}, _get_import_path:{arguments:, default_arguments:}, _get_property_list:{arguments:, default_arguments:}, _init:{arguments:, default_arguments:}, _input:{arguments:a, default_arguments:a}, _notification:{arguments:a, default_arguments:a}, _physics_process:{arguments:a, default_arguments:a}, _process:{arguments:a, default_arguments:a}, _ready:{arguments:, default_arguments:}, _set:{arguments:a, b, default_arguments:a, b}, _set_editor_description:{arguments:a, default_arguments:a}, _set_import_path:{arguments:a, default_arguments:a}, _to_string:{arguments:, default_arguments:}, _unhandled_input:{arguments:a, default_arguments:a}, _unhandled_key_input:{arguments:a, default_arguments:a}, add:{arguments:a, b, default_arguments:a, b}, add_child:{arguments:a, b, default_arguments:a, b = False}, add_child_below_node:{arguments:a, b, c, default_arguments:a, b, c = False}, add_to_group:{arguments:a, b, default_arguments:a, b = False}, add_user_signal:{arguments:a, b, default_arguments:a, b = []}, call:{arguments:a, default_arguments:a}, call_deferred:{arguments:a, default_arguments:a}, callv:{arguments:a, b, default_arguments:a, b}, can_process:{arguments:, default_arguments:}, can_translate_messages:{arguments:, default_arguments:}, connect:{arguments:a, b, c, d, e, default_arguments:a, b, c, d = [], e = 0}, disconnect:{arguments:a, b, c, default_arguments:a, b, c}, divide:{arguments:a, b, default_arguments:a, b}, duplicate:{arguments:a, default_arguments:a = 15}, emit_signal:{arguments:a, default_arguments:a}, find_node:{arguments:a, b, c, default_arguments:a, b = True, c = True}, find_parent:{arguments:a, default_arguments:a}, free:{arguments:, default_arguments:}, get:{arguments:a, default_arguments:a}, get_child:{arguments:a, default_arguments:a}, get_child_count:{arguments:, default_arguments:}, get_children:{arguments:, default_arguments:}, get_class:{arguments:, default_arguments:}, get_custom_multiplayer:{arguments:, default_arguments:}, get_filename:{arguments:, default_arguments:}, get_groups:{arguments:, default_arguments:}, get_incoming_connections:{arguments:, default_arguments:}, get_index:{arguments:, default_arguments:}, get_indexed:{arguments:a, default_arguments:a}, get_instance_id:{arguments:, default_arguments:}, get_meta:{arguments:a, default_arguments:a}, get_meta_list:{arguments:, default_arguments:}, get_method_list:{arguments:, default_arguments:}, get_multiplayer:{arguments:, default_arguments:}, get_name:{arguments:, default_arguments:}, get_network_master:{arguments:, default_arguments:}, get_node:{arguments:a, default_arguments:a}, get_node_and_resource:{arguments:a, default_arguments:a}, get_node_or_null:{arguments:a, default_arguments:a}, get_owner:{arguments:, default_arguments:}, get_parent:{arguments:, default_arguments:}, get_path:{arguments:, default_arguments:}, get_path_to:{arguments:a, default_arguments:a}, get_pause_mode:{arguments:, default_arguments:}, get_physics_process_delta_time:{arguments:, default_arguments:}, get_position_in_parent:{arguments:, default_arguments:}, get_process_delta_time:{arguments:, default_arguments:}, get_process_priority:{arguments:, default_arguments:}, get_property_list:{arguments:, default_arguments:}, get_scene_instance_load_placeholder:{arguments:, default_arguments:}, get_script:{arguments:, default_arguments:}, get_signal_connection_list:{arguments:a, default_arguments:a}, get_signal_list:{arguments:, default_arguments:}, get_tree:{arguments:, default_arguments:}, get_viewport:{arguments:, default_arguments:}, has_meta:{arguments:a, default_arguments:a}, has_method:{arguments:a, default_arguments:a}, has_node:{arguments:a, default_arguments:a}, has_node_and_resource:{arguments:a, default_arguments:a}, has_signal:{arguments:a, default_arguments:a}, has_user_signal:{arguments:a, default_arguments:a}, is_a_parent_of:{arguments:a, default_arguments:a}, is_blocking_signals:{arguments:, default_arguments:}, is_class:{arguments:a, default_arguments:a}, is_connected:{arguments:a, b, c, default_arguments:a, b, c}, is_displayed_folded:{arguments:, default_arguments:}, is_greater_than:{arguments:a, default_arguments:a}, is_in_group:{arguments:a, default_arguments:a}, is_inside_tree:{arguments:, default_arguments:}, is_network_master:{arguments:, default_arguments:}, is_physics_processing:{arguments:, default_arguments:}, is_physics_processing_internal:{arguments:, default_arguments:}, is_processing:{arguments:, default_arguments:}, is_processing_input:{arguments:, default_arguments:}, is_processing_internal:{arguments:, default_arguments:}, is_processing_unhandled_input:{arguments:, default_arguments:}, is_processing_unhandled_key_input:{arguments:, default_arguments:}, is_queued_for_deletion:{arguments:, default_arguments:}, math_fight:{arguments:, default_arguments:}, move_child:{arguments:a, b, default_arguments:a, b}, multiply:{arguments:a, b, default_arguments:a, b}, notification:{arguments:a, b, default_arguments:a, b = False}, pi:{arguments:, default_arguments:}, print_stray_nodes:{arguments:, default_arguments:}, print_tree:{arguments:, default_arguments:}, print_tree_pretty:{arguments:, default_arguments:}, propagate_call:{arguments:a, b, c, default_arguments:a, b = [], c = False}, propagate_notification:{arguments:a, default_arguments:a}, property_list_changed_notify:{arguments:, default_arguments:}, queue_free:{arguments:, default_arguments:}, raise:{arguments:, default_arguments:}, remove_and_skip:{arguments:, default_arguments:}, remove_child:{arguments:a, default_arguments:a}, remove_from_group:{arguments:a, default_arguments:a}, remove_meta:{arguments:a, default_arguments:a}, replace_by:{arguments:a, b, default_arguments:a, b = False}, request_ready:{arguments:, default_arguments:}, rpc:{arguments:a, default_arguments:a}, rpc_config:{arguments:a, b, default_arguments:a, b}, rpc_id:{arguments:a, b, default_arguments:a, b}, rpc_unreliable:{arguments:a, default_arguments:a}, rpc_unreliable_id:{arguments:a, b, default_arguments:a, b}, rset:{arguments:a, b, default_arguments:a, b}, rset_config:{arguments:a, b, default_arguments:a, b}, rset_id:{arguments:a, b, c, default_arguments:a, b, c}, rset_unreliable:{arguments:a, b, default_arguments:a, b}, rset_unreliable_id:{arguments:a, b, c, default_arguments:a, b, c}, set:{arguments:a, b, default_arguments:a, b}, set_block_signals:{arguments:a, default_arguments:a}, set_custom_multiplayer:{arguments:a, default_arguments:a}, set_deferred:{arguments:a, b, default_arguments:a, b}, set_display_folded:{arguments:a, default_arguments:a}, set_filename:{arguments:a, default_arguments:a}, set_indexed:{arguments:a, b, default_arguments:a, b}, set_message_translation:{arguments:a, default_arguments:a}, set_meta:{arguments:a, b, default_arguments:a, b}, set_name:{arguments:a, default_arguments:a}, set_network_master:{arguments:a, b, default_arguments:a, b = True}, set_owner:{arguments:a, default_arguments:a}, set_pause_mode:{arguments:a, default_arguments:a}, set_physics_process:{arguments:a, default_arguments:a}, set_physics_process_internal:{arguments:a, default_arguments:a}, set_process:{arguments:a, default_arguments:a}, set_process_input:{arguments:a, default_arguments:a}, set_process_internal:{arguments:a, default_arguments:a}, set_process_priority:{arguments:a, default_arguments:a}, set_process_unhandled_input:{arguments:a, default_arguments:a}, set_process_unhandled_key_input:{arguments:a, default_arguments:a}, set_scene_instance_load_placeholder:{arguments:a, default_arguments:a}, set_script:{arguments:a, default_arguments:a}, subtract:{arguments:a, b, default_arguments:a, b}, sum:{arguments:a, default_arguments:a}, to_string:{arguments:, default_arguments:}, tr:{arguments:a, default_arguments:a}, update_configuration_warning:{arguments:, default_arguments:}}",
"context": "Then they do not share resources",
"expected": "|Dictionary| {_enter_tree:{arguments:, default_arguments:}, _exit_tree:{arguments:, default_arguments:}, _get:{arguments:a, default_arguments:a}, _get_configuration_warning:{arguments:, default_arguments:}, _get_editor_description:{arguments:, default_arguments:}, _get_import_path:{arguments:, default_arguments:}, _get_property_list:{arguments:, default_arguments:}, _init:{arguments:, default_arguments:}, _input:{arguments:a, default_arguments:a}, _notification:{arguments:a, default_arguments:a}, _physics_process:{arguments:a, default_arguments:a}, _process:{arguments:a, default_arguments:a}, _ready:{arguments:, default_arguments:}, _set:{arguments:a, b, default_arguments:a, b}, _set_editor_description:{arguments:a, default_arguments:a}, _set_import_path:{arguments:a, default_arguments:a}, _to_string:{arguments:, default_arguments:}, _unhandled_input:{arguments:a, default_arguments:a}, _unhandled_key_input:{arguments:a, default_arguments:a}, add:{arguments:a, b, default_arguments:a, b}, add_child:{arguments:a, b, default_arguments:a, b = False}, add_child_below_node:{arguments:a, b, c, default_arguments:a, b, c = False}, add_to_group:{arguments:a, b, default_arguments:a, b = False}, add_user_signal:{arguments:a, b, default_arguments:a, b = []}, call:{arguments:a, default_arguments:a}, call_deferred:{arguments:a, default_arguments:a}, callv:{arguments:a, b, default_arguments:a, b}, can_process:{arguments:, default_arguments:}, can_translate_messages:{arguments:, default_arguments:}, connect:{arguments:a, b, c, d, e, default_arguments:a, b, c, d = [], e = 0}, disconnect:{arguments:a, b, c, default_arguments:a, b, c}, divide:{arguments:a, b, default_arguments:a, b}, duplicate:{arguments:a, default_arguments:a = 15}, emit_signal:{arguments:a, default_arguments:a}, find_node:{arguments:a, b, c, default_arguments:a, b = True, c = True}, find_parent:{arguments:a, default_arguments:a}, free:{arguments:, default_arguments:}, get:{arguments:a, default_arguments:a}, get_child:{arguments:a, default_arguments:a}, get_child_count:{arguments:, default_arguments:}, get_children:{arguments:, default_arguments:}, get_class:{arguments:, default_arguments:}, get_custom_multiplayer:{arguments:, default_arguments:}, get_filename:{arguments:, default_arguments:}, get_groups:{arguments:, default_arguments:}, get_incoming_connections:{arguments:, default_arguments:}, get_index:{arguments:, default_arguments:}, get_indexed:{arguments:a, default_arguments:a}, get_instance_id:{arguments:, default_arguments:}, get_meta:{arguments:a, default_arguments:a}, get_meta_list:{arguments:, default_arguments:}, get_method_list:{arguments:, default_arguments:}, get_multiplayer:{arguments:, default_arguments:}, get_name:{arguments:, default_arguments:}, get_network_master:{arguments:, default_arguments:}, get_node:{arguments:a, default_arguments:a}, get_node_and_resource:{arguments:a, default_arguments:a}, get_node_or_null:{arguments:a, default_arguments:a}, get_owner:{arguments:, default_arguments:}, get_parent:{arguments:, default_arguments:}, get_path:{arguments:, default_arguments:}, get_path_to:{arguments:a, default_arguments:a}, get_pause_mode:{arguments:, default_arguments:}, get_physics_process_delta_time:{arguments:, default_arguments:}, get_position_in_parent:{arguments:, default_arguments:}, get_process_delta_time:{arguments:, default_arguments:}, get_process_priority:{arguments:, default_arguments:}, get_property_list:{arguments:, default_arguments:}, get_scene_instance_load_placeholder:{arguments:, default_arguments:}, get_script:{arguments:, default_arguments:}, get_signal_connection_list:{arguments:a, default_arguments:a}, get_signal_list:{arguments:, default_arguments:}, get_tree:{arguments:, default_arguments:}, get_viewport:{arguments:, default_arguments:}, has_meta:{arguments:a, default_arguments:a}, has_method:{arguments:a, default_arguments:a}, has_node:{arguments:a, default_arguments:a}, has_node_and_resource:{arguments:a, default_arguments:a}, has_signal:{arguments:a, default_arguments:a}, has_user_signal:{arguments:a, default_arguments:a}, is_a_parent_of:{arguments:a, default_arguments:a}, is_blocking_signals:{arguments:, default_arguments:}, is_class:{arguments:a, default_arguments:a}, is_connected:{arguments:a, b, c, default_arguments:a, b, c}, is_displayed_folded:{arguments:, default_arguments:}, is_greater_than:{arguments:a, default_arguments:a}, is_in_group:{arguments:a, default_arguments:a}, is_inside_tree:{arguments:, default_arguments:}, is_network_master:{arguments:, default_arguments:}, is_physics_processing:{arguments:, default_arguments:}, is_physics_processing_internal:{arguments:, default_arguments:}, is_processing:{arguments:, default_arguments:}, is_processing_input:{arguments:, default_arguments:}, is_processing_internal:{arguments:, default_arguments:}, is_processing_unhandled_input:{arguments:, default_arguments:}, is_processing_unhandled_key_input:{arguments:, default_arguments:}, is_queued_for_deletion:{arguments:, default_arguments:}, math_fight:{arguments:, default_arguments:}, move_child:{arguments:a, b, default_arguments:a, b}, multiply:{arguments:a, b, default_arguments:a, b}, notification:{arguments:a, b, default_arguments:a, b = False}, pi:{arguments:, default_arguments:}, print_stray_nodes:{arguments:, default_arguments:}, print_tree:{arguments:, default_arguments:}, print_tree_pretty:{arguments:, default_arguments:}, propagate_call:{arguments:a, b, c, default_arguments:a, b = [], c = False}, propagate_notification:{arguments:a, default_arguments:a}, property_list_changed_notify:{arguments:, default_arguments:}, queue_free:{arguments:, default_arguments:}, raise:{arguments:, default_arguments:}, remove_and_skip:{arguments:, default_arguments:}, remove_child:{arguments:a, default_arguments:a}, remove_from_group:{arguments:a, default_arguments:a}, remove_meta:{arguments:a, default_arguments:a}, replace_by:{arguments:a, b, default_arguments:a, b = False}, request_ready:{arguments:, default_arguments:}, rpc:{arguments:a, default_arguments:a}, rpc_config:{arguments:a, b, default_arguments:a, b}, rpc_id:{arguments:a, b, default_arguments:a, b}, rpc_unreliable:{arguments:a, default_arguments:a}, rpc_unreliable_id:{arguments:a, b, default_arguments:a, b}, rset:{arguments:a, b, default_arguments:a, b}, rset_config:{arguments:a, b, default_arguments:a, b}, rset_id:{arguments:a, b, c, default_arguments:a, b, c}, rset_unreliable:{arguments:a, b, default_arguments:a, b}, rset_unreliable_id:{arguments:a, b, c, default_arguments:a, b, c}, set:{arguments:a, b, default_arguments:a, b}, set_block_signals:{arguments:a, default_arguments:a}, set_custom_multiplayer:{arguments:a, default_arguments:a}, set_deferred:{arguments:a, b, default_arguments:a, b}, set_display_folded:{arguments:a, default_arguments:a}, set_filename:{arguments:a, default_arguments:a}, set_indexed:{arguments:a, b, default_arguments:a, b}, set_message_translation:{arguments:a, default_arguments:a}, set_meta:{arguments:a, b, default_arguments:a, b}, set_name:{arguments:a, default_arguments:a}, set_network_master:{arguments:a, b, default_arguments:a, b = True}, set_owner:{arguments:a, default_arguments:a}, set_pause_mode:{arguments:a, default_arguments:a}, set_physics_process:{arguments:a, default_arguments:a}, set_physics_process_internal:{arguments:a, default_arguments:a}, set_process:{arguments:a, default_arguments:a}, set_process_input:{arguments:a, default_arguments:a}, set_process_internal:{arguments:a, default_arguments:a}, set_process_priority:{arguments:a, default_arguments:a}, set_process_unhandled_input:{arguments:a, default_arguments:a}, set_process_unhandled_key_input:{arguments:a, default_arguments:a}, set_scene_instance_load_placeholder:{arguments:a, default_arguments:a}, set_script:{arguments:a, default_arguments:a}, subtract:{arguments:a, b, default_arguments:a, b}, sum:{arguments:a, default_arguments:a}, to_string:{arguments:, default_arguments:}, tr:{arguments:a, default_arguments:a}, update_configuration_warning:{arguments:, default_arguments:}} != |Dictionary| {_enter_tree:{arguments:, default_arguments:}, _exit_tree:{arguments:, default_arguments:}, _get:{arguments:a, default_arguments:a}, _get_configuration_warning:{arguments:, default_arguments:}, _get_editor_description:{arguments:, default_arguments:}, _get_import_path:{arguments:, default_arguments:}, _get_property_list:{arguments:, default_arguments:}, _init:{arguments:, default_arguments:}, _input:{arguments:a, default_arguments:a}, _notification:{arguments:a, default_arguments:a}, _physics_process:{arguments:a, default_arguments:a}, _process:{arguments:a, default_arguments:a}, _ready:{arguments:, default_arguments:}, _set:{arguments:a, b, default_arguments:a, b}, _set_editor_description:{arguments:a, default_arguments:a}, _set_import_path:{arguments:a, default_arguments:a}, _to_string:{arguments:, default_arguments:}, _unhandled_input:{arguments:a, default_arguments:a}, _unhandled_key_input:{arguments:a, default_arguments:a}, add:{arguments:a, b, default_arguments:a, b}, add_child:{arguments:a, b, default_arguments:a, b = False}, add_child_below_node:{arguments:a, b, c, default_arguments:a, b, c = False}, add_to_group:{arguments:a, b, default_arguments:a, b = False}, add_user_signal:{arguments:a, b, default_arguments:a, b = []}, call:{arguments:a, default_arguments:a}, call_deferred:{arguments:a, default_arguments:a}, callv:{arguments:a, b, default_arguments:a, b}, can_process:{arguments:, default_arguments:}, can_translate_messages:{arguments:, default_arguments:}, connect:{arguments:a, b, c, d, e, default_arguments:a, b, c, d = [], e = 0}, disconnect:{arguments:a, b, c, default_arguments:a, b, c}, divide:{arguments:a, b, default_arguments:a, b}, duplicate:{arguments:a, default_arguments:a = 15}, emit_signal:{arguments:a, default_arguments:a}, find_node:{arguments:a, b, c, default_arguments:a, b = True, c = True}, find_parent:{arguments:a, default_arguments:a}, free:{arguments:, default_arguments:}, get:{arguments:a, default_arguments:a}, get_child:{arguments:a, default_arguments:a}, get_child_count:{arguments:, default_arguments:}, get_children:{arguments:, default_arguments:}, get_class:{arguments:, default_arguments:}, get_custom_multiplayer:{arguments:, default_arguments:}, get_filename:{arguments:, default_arguments:}, get_groups:{arguments:, default_arguments:}, get_incoming_connections:{arguments:, default_arguments:}, get_index:{arguments:, default_arguments:}, get_indexed:{arguments:a, default_arguments:a}, get_instance_id:{arguments:, default_arguments:}, get_meta:{arguments:a, default_arguments:a}, get_meta_list:{arguments:, default_arguments:}, get_method_list:{arguments:, default_arguments:}, get_multiplayer:{arguments:, default_arguments:}, get_name:{arguments:, default_arguments:}, get_network_master:{arguments:, default_arguments:}, get_node:{arguments:a, default_arguments:a}, get_node_and_resource:{arguments:a, default_arguments:a}, get_node_or_null:{arguments:a, default_arguments:a}, get_owner:{arguments:, default_arguments:}, get_parent:{arguments:, default_arguments:}, get_path:{arguments:, default_arguments:}, get_path_to:{arguments:a, default_arguments:a}, get_pause_mode:{arguments:, default_arguments:}, get_physics_process_delta_time:{arguments:, default_arguments:}, get_position_in_parent:{arguments:, default_arguments:}, get_process_delta_time:{arguments:, default_arguments:}, get_process_priority:{arguments:, default_arguments:}, get_property_list:{arguments:, default_arguments:}, get_scene_instance_load_placeholder:{arguments:, default_arguments:}, get_script:{arguments:, default_arguments:}, get_signal_connection_list:{arguments:a, default_arguments:a}, get_signal_list:{arguments:, default_arguments:}, get_tree:{arguments:, default_arguments:}, get_viewport:{arguments:, default_arguments:}, has_meta:{arguments:a, default_arguments:a}, has_method:{arguments:a, default_arguments:a}, has_node:{arguments:a, default_arguments:a}, has_node_and_resource:{arguments:a, default_arguments:a}, has_signal:{arguments:a, default_arguments:a}, has_user_signal:{arguments:a, default_arguments:a}, is_a_parent_of:{arguments:a, default_arguments:a}, is_blocking_signals:{arguments:, default_arguments:}, is_class:{arguments:a, default_arguments:a}, is_connected:{arguments:a, b, c, default_arguments:a, b, c}, is_displayed_folded:{arguments:, default_arguments:}, is_greater_than:{arguments:a, default_arguments:a}, is_in_group:{arguments:a, default_arguments:a}, is_inside_tree:{arguments:, default_arguments:}, is_network_master:{arguments:, default_arguments:}, is_physics_processing:{arguments:, default_arguments:}, is_physics_processing_internal:{arguments:, default_arguments:}, is_processing:{arguments:, default_arguments:}, is_processing_input:{arguments:, default_arguments:}, is_processing_internal:{arguments:, default_arguments:}, is_processing_unhandled_input:{arguments:, default_arguments:}, is_processing_unhandled_key_input:{arguments:, default_arguments:}, is_queued_for_deletion:{arguments:, default_arguments:}, math_fight:{arguments:, default_arguments:}, move_child:{arguments:a, b, default_arguments:a, b}, multiply:{arguments:a, b, default_arguments:a, b}, notification:{arguments:a, b, default_arguments:a, b = False}, pi:{arguments:, default_arguments:}, print_stray_nodes:{arguments:, default_arguments:}, print_tree:{arguments:, default_arguments:}, print_tree_pretty:{arguments:, default_arguments:}, propagate_call:{arguments:a, b, c, default_arguments:a, b = [], c = False}, propagate_notification:{arguments:a, default_arguments:a}, property_list_changed_notify:{arguments:, default_arguments:}, queue_free:{arguments:, default_arguments:}, raise:{arguments:, default_arguments:}, remove_and_skip:{arguments:, default_arguments:}, remove_child:{arguments:a, default_arguments:a}, remove_from_group:{arguments:a, default_arguments:a}, remove_meta:{arguments:a, default_arguments:a}, replace_by:{arguments:a, b, default_arguments:a, b = False}, request_ready:{arguments:, default_arguments:}, rpc:{arguments:a, default_arguments:a}, rpc_config:{arguments:a, b, default_arguments:a, b}, rpc_id:{arguments:a, b, default_arguments:a, b}, rpc_unreliable:{arguments:a, default_arguments:a}, rpc_unreliable_id:{arguments:a, b, default_arguments:a, b}, rset:{arguments:a, b, default_arguments:a, b}, rset_config:{arguments:a, b, default_arguments:a, b}, rset_id:{arguments:a, b, c, default_arguments:a, b, c}, rset_unreliable:{arguments:a, b, default_arguments:a, b}, rset_unreliable_id:{arguments:a, b, c, default_arguments:a, b, c}, set:{arguments:a, b, default_arguments:a, b}, set_block_signals:{arguments:a, default_arguments:a}, set_custom_multiplayer:{arguments:a, default_arguments:a}, set_deferred:{arguments:a, b, default_arguments:a, b}, set_display_folded:{arguments:a, default_arguments:a}, set_filename:{arguments:a, default_arguments:a}, set_indexed:{arguments:a, b, default_arguments:a, b}, set_message_translation:{arguments:a, default_arguments:a}, set_meta:{arguments:a, b, default_arguments:a, b}, set_name:{arguments:a, default_arguments:a}, set_network_master:{arguments:a, b, default_arguments:a, b = True}, set_owner:{arguments:a, default_arguments:a}, set_pause_mode:{arguments:a, default_arguments:a}, set_physics_process:{arguments:a, default_arguments:a}, set_physics_process_internal:{arguments:a, default_arguments:a}, set_process:{arguments:a, default_arguments:a}, set_process_input:{arguments:a, default_arguments:a}, set_process_internal:{arguments:a, default_arguments:a}, set_process_priority:{arguments:a, default_arguments:a}, set_process_unhandled_input:{arguments:a, default_arguments:a}, set_process_unhandled_key_input:{arguments:a, default_arguments:a}, set_scene_instance_load_placeholder:{arguments:a, default_arguments:a}, set_script:{arguments:a, default_arguments:a}, subtract:{arguments:a, b, default_arguments:a, b}, sum:{arguments:a, default_arguments:a}, to_string:{arguments:, default_arguments:}, tr:{arguments:a, default_arguments:a}, update_configuration_warning:{arguments:, default_arguments:}}",
"success": true
} ],
"context": "When we create two of it for the same script",
"fullname": "test_When_we_create_two_of_it_for_the_same_script",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|Object| [Node:1535] is equal to |Object| [Node:1535]",
"context": "Then we get the same double back",
"expected": "|Object| [Node:1535] is equal to |Object| [Node:1535]",
"success": true
} ],
"context": "When we call the double the second time",
"fullname": "test_When_we_call_double_a_second_time_on",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 3,
"path": "res://tests/integration/script_director.test.gd",
"source": {
"containers": [ "res://tests/integration", "res://tests" ],
"method": "",
"path": "res://tests/integration/script_director.test.gd",
"tags": [  ],
"test": ExtResource( 13 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 3
}, {
"context": "Given a Test Double",
"methods": [ {
"assertions": [ {
"actual": "|int| 100 is equal to |int| 100",
"context": "Then it returns the default stubbed value when the arguments don't match any pattern",
"expected": "|int| 100 is equal to |int| 100",
"success": true
}, {
"actual": "|int| 1000 is equal to |int| 1000",
"context": "Then it returns the the corresponding value to the pattern the arguments matched",
"expected": "|int| 1000 is equal to |int| 1000",
"success": true
} ],
"context": "When we call a method that was stubbed to return different values based on argument patterns",
"fullname": "test_When_we_call_a_method_that_was_stubbed_to_return_different_values_based_on_argument_patterns",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "add was called",
"context": "Then we can see that it was called at least once",
"expected": "add was called",
"success": true
} ],
"context": "When we call a method that we are spying on",
"fullname": "test_When_we_call_a_method_that_we_are_spying_on",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "(1, 1) is builtin: Vector2",
"context": "Then we can call methods on it",
"expected": "(1, 1) is builtin: Vector2",
"success": true
} ],
"context": "When we double an inner class",
"fullname": "test_When_we_double_an_inner_class",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|String| Jackie is equal to |String| Jackie",
"context": "Then we can double the object successfully",
"expected": "|String| Jackie is equal to |String| Jackie",
"success": true
} ],
"context": "When we pass in dependecies on direct",
"fullname": "test_When_we_pass_in_deps_on_direct",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 4 is equal to |int| 4",
"context": "Then we get the correct result",
"expected": "|int| 4 is equal to |int| 4",
"success": true
} ],
"context": "When we call an add(x, y) method that we haven't directed",
"fullname": "test_When_we_call_an_add_method_that_we_have_not_directed",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| True is equal to |bool| True",
"context": "Then we can call it",
"expected": "|bool| True is equal to |bool| True",
"success": true
} ],
"context": "When we stubbed a keyworded method by passing in the correct keyword",
"fullname": "test_When_we_stubbed_a_keyword_method_by_passing_in_the_correct_keyword",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then it returns true",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we call a method that we have stubbed to return true",
"fullname": "test_When_we_call_a_method_that_we_have_stubbed_to_return_true",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 9999 is equal to |int| 9999",
"context": "Then it returns the corresponding value when the partial pattern matches",
"expected": "|int| 9999 is equal to |int| 9999",
"success": true
} ],
"context": "When we call a method that was stubbed with a partial (ie using any()) argument pattern",
"fullname": "test_When_we_call_a_method_that_was_stubbed_with_a_partial_argument_pattern",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|null| Null == null",
"context": "Then we get null",
"expected": "|null| Null == null",
"success": true
} ],
"context": "When we call a method that we have dummied",
"fullname": "test_When_we_call_a_method_that_we_have_dummied",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|String| Jackie is equal to |String| Jackie",
"context": "Then we can double the object successfully",
"expected": "|String| Jackie is equal to |String| Jackie",
"success": true
} ],
"context": "When we pass in dependecies on double",
"fullname": "test_When_we_pass_in_deps_on_double",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 99 is equal to |int| 99",
"context": "Then it affects the state of the double",
"expected": "|int| 99 is equal to |int| 99",
"success": true
} ],
"context": "When we pass a funcref as a subcall",
"fullname": "test_When_we_pass_a_funcref_as_a_subcall",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 99 is equal to |int| 99",
"context": "Then it returns a value",
"expected": "|int| 99 is equal to |int| 99",
"success": true
} ],
"context": "When we pass a funcref as a subcall that returns",
"fullname": "test_When_we_pass_a_funcref_as_a_subcall_that_returns_a_value",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|Array| [10, 5] is equal to |Array| [10, 5]",
"context": "Then it returns a value",
"expected": "|Array| [10, 5] is equal to |Array| [10, 5]",
"success": true
} ],
"context": "When we pass an Object with a call_func function",
"fullname": "test_When_we_pass_an_object_with_callfunc_method_as_a_subcall",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "method: add was called with arguments: [10, 10]",
"context": "Then we can see that it was called with those arguments",
"expected": "method: add was called with arguments: [10, 10]",
"success": true
} ],
"context": "When we pass arguments to a method call that we are spying on",
"fullname": "test_When_we_pass_arguments_to_a_method_call_that_we_are_spying_on",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|null| Null == null",
"context": "Then we get the stubbed value back",
"expected": "|null| Null == null",
"success": true
} ],
"context": "When we stub a method of a doubled inner class",
"fullname": "test_When_we_stub_a_method_of_a_double_inner_class",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|Object| [Node:1643] is equal to |Object| [Node:1643]",
"context": "Then it returns that same node",
"expected": "|Object| [Node:1643] is equal to |Object| [Node:1643]",
"success": true
} ],
"context": "When we call a method that we have stubbed to return a node",
"fullname": "test_When_we_call_a_method_that_we_have_stubbed_to_return_a_node",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 9999 is equal to |int| 9999",
"context": "Then it returns the corresponding value when the pattern matches",
"expected": "|int| 9999 is equal to |int| 9999",
"success": true
} ],
"context": "When we call a method that was stubbed with an argument pattern that includes a non-primitive object",
"fullname": "test_When_we_call_a_method_that_was_stubbed_with_an_argument_pattern_that_includes_a_non_primitive_object",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 4 is equal to |int| 4",
"context": "Then it calls its super implementation by default",
"expected": "|int| 4 is equal to |int| 4",
"success": true
}, {
"actual": "|int| 9999 is equal to |int| 9999",
"context": "Then it does not call its super implementation when arguments patterns match a different return value",
"expected": "|int| 9999 is equal to |int| 9999",
"success": true
} ],
"context": "When we call a method that we stubbed to call its super implementation by default",
"fullname": "test_When_we_call_a_method_that_we_stubbed_to_call_its_super_implementation_by_default",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|float| 6.283185 is equal to |float| 6.283185",
"context": "Then we can call the static methods of that inner double",
"expected": "|float| 6.283185 is equal to |float| 6.283185",
"success": true
} ],
"context": "When we add an doubled inner class to it",
"fullname": "test_When_we_add_a_doubled_inner_class_to_it",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 19,
"path": "res://tests/integration/test_double.test.gd",
"source": {
"containers": [ "res://tests/integration", "res://tests" ],
"method": "",
"path": "res://tests/integration/test_double.test.gd",
"tags": [  ],
"test": ExtResource( 14 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 19
}, {
"context": "Given a Boolean Assertion",
"methods": [ {
"assertions": [ {
"actual": "|bool| True != false",
"context": "",
"expected": "|bool| True == false",
"success": false
} ],
"context": " intentional failure",
"fullname": "test_intentional_failure",
"passed": 0,
"success": false,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then it passes",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When calling asserts.is_true(true)",
"fullname": "test_when_calling_asserts_is_true",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| False == false",
"context": "Then it passes",
"expected": "|bool| False == false",
"success": true
} ],
"context": "When calling asserts.is_false(false)",
"fullname": "test_when_calling_asserts_is_false",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 2,
"path": "res://tests/unit/boolean.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/boolean.test.gd",
"tags": [  ],
"test": ExtResource( 11 ),
"yield_time": 0.0
},
"success": false,
"time_taken": 0.0,
"total": 3
}, {
"context": "Given an Equality Assertion",
"methods": [ {
"assertions": [ {
"actual": "|int| 1 is equal or greater |int| 1",
"context": "Then it passes",
"expected": "|int| 1 is equal or greater |int| 1",
"success": true
} ],
"context": "When calling asserts.is_equal_or_greater_than(1, 1)",
"fullname": "test_when_calling_is_equal_or_greater_than_with_equal_values",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 5 is not equal to |int| 6",
"context": "Then it passes",
"expected": "|int| 5 != |int| 6",
"success": true
} ],
"context": "When callign asserts.is_not_equal(5, 6)",
"fullname": "test_when_calling_is_not_equal",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 1 is equal or less than |int| 1",
"context": "Then it passes!",
"expected": "|int| 1 is equal or less than |int| 1",
"success": true
} ],
"context": "When calling asserts.is_equal_or_less_than(1, 1)",
"fullname": "test_when_calling_is_equal_or_less_than_with_equal_values",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 1 is equal to |int| 1",
"context": "Then it passes",
"expected": "|int| 1 is equal to |int| 1",
"success": true
} ],
"context": "When calling asserts.is_equal(1, 1)",
"fullname": "test_when_calling_is_equal",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 1 is less than |int| 2",
"context": "Then it passes",
"expected": "|int| 1 is less than |int| 2",
"success": true
} ],
"context": "When calling asserts.is_less_than(2, 1)",
"fullname": "test_when_calling_is_less_than",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 2 is greater than |int| 1",
"context": "Then it passes",
"expected": "|int| 2 is greater than |int| 1",
"success": true
} ],
"context": "When calling asserts.is_greater_than(2, 1)",
"fullname": "test_when_calling_is_greater_than",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 2 is equal or greater |int| 1",
"context": "Then it passes",
"expected": "|int| 2 is equal or greater |int| 1",
"success": true
} ],
"context": "When calling asserts.is_equal_or_greater_than(2, 1)",
"fullname": "test_when_calling_is_equal_or_greater_than",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 7,
"path": "res://tests/unit/equality.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/equality.test.gd",
"tags": [  ],
"test": ExtResource( 8 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 7
}, {
"context": "Given A File Assertion",
"methods": [ {
"assertions": [ {
"actual": "res://tests/unit/file.test.gd exists",
"context": "Then it passes",
"expected": "res://tests/unit/file.test.gd exists",
"success": true
} ],
"context": "When calling asserts.file_exists when the file is this suite",
"fullname": "test_when_calling_file_exists_when_file_is_self",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "res://somefile.gd does not exist",
"context": "Then it passes",
"expected": "res://somefile.gd does not exist",
"success": true
} ],
"context": "When calling asserts.file_does_not_exist when there is no file",
"fullname": "test_when_calling_file_does_not_exist_when_there_is_no_file",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": " does not exist",
"context": "Then it passes",
"expected": " does not exist",
"success": true
} ],
"context": "When calling asserts file does not exist when path is empty",
"fullname": "test_when_calling_file_does_not_exist_when_path_is_empty",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 3,
"path": "res://tests/unit/file.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/file.test.gd",
"tags": [  ],
"test": ExtResource( 3 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 3
}, {
"context": "Given an Is Instance of class/type Assertion",
"methods": [ {
"assertions": [ {
"actual": "|String|  != null",
"context": "strs is not null",
"expected": "|String|  != null",
"success": true
}, {
"actual": " is builtin: String",
"context": "Then it passes",
"expected": " is builtin: String",
"success": true
} ],
"context": "When calling asserts.is_string(strs: String)",
"fullname": "test_when_calling_is_string",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|PoolColorArray| [PoolColorArray] != null",
"context": "colors is not null",
"expected": "|PoolColorArray| [PoolColorArray] != null",
"success": true
}, {
"actual": "[PoolColorArray] is builtin: PoolColorArray",
"context": "Then it passes",
"expected": "[PoolColorArray] is builtin: PoolColorArray",
"success": true
} ],
"context": "When calling asserts.is_PoolColorArray(colors: PoolColorArray)",
"fullname": "test_when_calling_is_PoolColorArray",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|Transform| 1, 0, 0, 0, 1, 0, 0, 0, 1 - 0, 0, 0 != null",
"context": "transform is not null",
"expected": "|Transform| 1, 0, 0, 0, 1, 0, 0, 0, 1 - 0, 0, 0 != null",
"success": true
}, {
"actual": "1, 0, 0, 0, 1, 0, 0, 0, 1 - 0, 0, 0 is builtin: Transform",
"context": "Then it passes",
"expected": "1, 0, 0, 0, 1, 0, 0, 0, 1 - 0, 0, 0 is builtin: Transform",
"success": true
} ],
"context": "When calling asserts.is_Transform(transform: Transform)",
"fullname": "test_when_calling_is_Transform",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|Rect2| (0, 0, 0, 0) != null",
"context": "rect2 is not null",
"expected": "|Rect2| (0, 0, 0, 0) != null",
"success": true
}, {
"actual": "(0, 0, 0, 0) is builtin: Rect2",
"context": "Then it passes",
"expected": "(0, 0, 0, 0) is builtin: Rect2",
"success": true
} ],
"context": "When calling asserts.is_Rect2(rect2: Rect2)",
"fullname": "test_when_calling_is_Rect2",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|PoolRealArray| [] != null",
"context": "reals is not null",
"expected": "|PoolRealArray| [] != null",
"success": true
}, {
"actual": "[] is builtin: PoolRealArray",
"context": "Then it passes",
"expected": "[] is builtin: PoolRealArray",
"success": true
} ],
"context": "When calling is asserts.is_PoolRealArray(reals: PoolRealArray)",
"fullname": "test_when_calling_is_PoolRealArray",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|Transform2D| ((1, 0), (0, 1), (0, 0)) != null",
"context": "transform2D is not null",
"expected": "|Transform2D| ((1, 0), (0, 1), (0, 0)) != null",
"success": true
}, {
"actual": "((1, 0), (0, 1), (0, 0)) is builtin: Transform2D",
"context": "Then it passes",
"expected": "((1, 0), (0, 1), (0, 0)) is builtin: Transform2D",
"success": true
} ],
"context": "When calling asserts.is_Transform(transform2D: Transform2D)",
"fullname": "test_when_calling_is_Transform2D",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|Color| 0,0,0,1 != null",
"context": "color is not null",
"expected": "|Color| 0,0,0,1 != null",
"success": true
}, {
"actual": "0,0,0,1 is builtin: Color",
"context": "Then it passes",
"expected": "0,0,0,1 is builtin: Color",
"success": true
} ],
"context": "When calling asserts.is_color(color: Color)",
"fullname": "test_when_calling_is_Color",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|AABB| 0, 0, 0 - 0, 0, 0 != null",
"context": "AABB is not null",
"expected": "|AABB| 0, 0, 0 - 0, 0, 0 != null",
"success": true
}, {
"actual": "0, 0, 0 - 0, 0, 0 is builtin: AABB",
"context": "Then it passes",
"expected": "0, 0, 0 - 0, 0, 0 is builtin: AABB",
"success": true
} ],
"context": "When calling asserts.is_AABB(aabb: AABB)",
"fullname": "test_when_calling_is_AABB",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "{} is builtin: Dictionary",
"context": "Then it passes",
"expected": "{} is builtin: Dictionary",
"success": true
} ],
"context": "When calling asserts.is_Dictionary({})",
"fullname": "test_when_calling_is_Dictionary",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "1 is builtin: float",
"context": "Then it passes",
"expected": "1 is builtin: float",
"success": true
} ],
"context": "When calling asserts.is_float(1.0)",
"fullname": "test_when_calling_is_float",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|PoolVector2Array| [] != null",
"context": "vec2s is not null",
"expected": "|PoolVector2Array| [] != null",
"success": true
}, {
"actual": "[] is builtin: PoolVector2Array",
"context": "Then it passes",
"expected": "[] is builtin: PoolVector2Array",
"success": true
} ],
"context": "When calling is asserts.is_PoolVector2Array(vec2s: PoolVector2Array)",
"fullname": "test_when_calling_is_PoolVector2Array",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|Object| [Node:1720] != null",
"context": "node is not null",
"expected": "|Object| [Node:1720] != null",
"success": true
}, {
"actual": "[Node:1720] is builtin: Object",
"context": "An instance of node is an Object",
"expected": "[Node:1720] is builtin: Object",
"success": true
} ],
"context": "When calling is asserts.object(node: Node)",
"fullname": "test_when_calling_is_object",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "True is builtin: bool",
"context": "Then it passes",
"expected": "True is builtin: bool",
"success": true
} ],
"context": "When calling asserts.is_bool(true)",
"fullname": "test_when_calling_is_bool",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|PoolByteArray| [PoolByteArray] != null",
"context": "bytes is not null",
"expected": "|PoolByteArray| [PoolByteArray] != null",
"success": true
}, {
"actual": "[PoolByteArray] is builtin: PoolByteArray",
"context": "Then it passes",
"expected": "[PoolByteArray] is builtin: PoolByteArray",
"success": true
} ],
"context": "When calling asserts.is_PoolByteArray(bytes: PoolByteArray)",
"fullname": "test_when_calling_is_PoolByteArray",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|PoolIntArray| [] != null",
"context": "ints is not null",
"expected": "|PoolIntArray| [] != null",
"success": true
}, {
"actual": "[] is builtin: PoolIntArray",
"context": "Then it passes",
"expected": "[] is builtin: PoolIntArray",
"success": true
} ],
"context": "When calling asserts.is_PoolIntArray(ints: PoolIntArray)",
"fullname": "test_when_calling_is_PoolIntArray",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|PoolVector3Array| [] != null",
"context": "vec3s is not null",
"expected": "|PoolVector3Array| [] != null",
"success": true
}, {
"actual": "[] is builtin: PoolVector3Array",
"context": "Then it passes",
"expected": "[] is builtin: PoolVector3Array",
"success": true
} ],
"context": "When calling is asserts.is_PoolVector3Array(vec3s: PoolVector3Array)",
"fullname": "test_when_calling_is_PoolVector3Array",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|Array| [] != null",
"context": "array is not null",
"expected": "|Array| [] != null",
"success": true
}, {
"actual": "[] is builtin: Array",
"context": "Then it passes",
"expected": "[] is builtin: Array",
"success": true
} ],
"context": "When calling asserts.is_Array(array: Array)",
"fullname": "test_when_calling_is_Array",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|PoolStringArray| [] != null",
"context": "strs is not null",
"expected": "|PoolStringArray| [] != null",
"success": true
}, {
"actual": "[] is builtin: PoolStringArray",
"context": "Then it passes",
"expected": "[] is builtin: PoolStringArray",
"success": true
} ],
"context": "When calling is asserts.is_PoolStringArray(strs: PoolStringArray)",
"fullname": "test_when_calling_is_PoolStringArray",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "1 is builtin: int",
"context": "Then it passes",
"expected": "1 is builtin: int",
"success": true
} ],
"context": "When callign asserts.is_int(1)",
"fullname": "test_when_calling_is_int",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|NodePath| . != null",
"context": "@'Parent/Child' is not null",
"expected": "|NodePath| . != null",
"success": true
}, {
"actual": ". is builtin: NodePath",
"context": "Then it passes",
"expected": ". is builtin: NodePath",
"success": true
} ],
"context": "When calling asserts.is_NodePath(@'Parent/Child')",
"fullname": "test_when_calling_is_NodePath",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|Quat| (0, 0, 0, 1) != null",
"context": "quat is not null",
"expected": "|Quat| (0, 0, 0, 1) != null",
"success": true
}, {
"actual": "(0, 0, 0, 1) is builtin: Quat",
"context": "Then it passes",
"expected": "(0, 0, 0, 1) is builtin: Quat",
"success": true
} ],
"context": "When calling asserts.is_Quat(quat: Quat)",
"fullname": "test_when_calling_is_Quat",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|Basis| ((1, 0, 0), (0, 1, 0), (0, 0, 1)) != null",
"context": "basis is not null",
"expected": "|Basis| ((1, 0, 0), (0, 1, 0), (0, 0, 1)) != null",
"success": true
}, {
"actual": "((1, 0, 0), (0, 1, 0), (0, 0, 1)) is builtin: Basis",
"context": "Then it passes",
"expected": "((1, 0, 0), (0, 1, 0), (0, 0, 1)) is builtin: Basis",
"success": true
} ],
"context": "When calling asserts.is_basis(basis: Basis",
"fullname": "test_when_calling_is_Basis",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|Plane| 0, 0, 0, 0 != null",
"context": "plane is not null",
"expected": "|Plane| 0, 0, 0, 0 != null",
"success": true
}, {
"actual": "0, 0, 0, 0 is builtin: Plane",
"context": "then it passes",
"expected": "0, 0, 0, 0 is builtin: Plane",
"success": true
} ],
"context": "When calling asserts.is_Plane(plane: Plane())",
"fullname": "test_when_calling_is_Plane",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|RID| [RID] != null",
"context": "rid is not null",
"expected": "|RID| [RID] != null",
"success": true
}, {
"actual": "[RID] is builtin: RID",
"context": "Then it passes",
"expected": "[RID] is builtin: RID",
"success": true
} ],
"context": "When calling asserts.is_RID(rid: RID)",
"fullname": "test_when_calling_is_RID",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|Vector3| (0, 0, 0) != null",
"context": "vec3 is not null",
"expected": "|Vector3| (0, 0, 0) != null",
"success": true
}, {
"actual": "(0, 0, 0) is builtin: Vector3",
"context": "Then it passes",
"expected": "(0, 0, 0) is builtin: Vector3",
"success": true
} ],
"context": "When calling asserts.is_Vector3(vec3: Vector3",
"fullname": "test_when_calling_is_Vector3",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|Vector2| (0, 0) != null",
"context": "vec2 is not null",
"expected": "|Vector2| (0, 0) != null",
"success": true
}, {
"actual": "(0, 0) is builtin: Vector2",
"context": "Then it passes",
"expected": "(0, 0) is builtin: Vector2",
"success": true
} ],
"context": "When calling asserts.is_Vector2(vec2)",
"fullname": "test_when_calling_is_Vector2",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
} ],
"passed": 26,
"path": "res://tests/unit/is_instance.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/is_instance.test.gd",
"tags": [  ],
"test": ExtResource( 6 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 26
}, {
"context": "Given an Is Not Instance of class/type Assertion",
"methods": [ {
"assertions": [ {
"actual": "Null is not builtin: PoolByteArray",
"context": "Then it passes",
"expected": "Null is not builtin: PoolByteArray",
"success": true
} ],
"context": "when calling asserts.is_not_PoolByteArray(null)",
"fullname": "test_when_calling_is_not_PoolByteArray",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Object",
"context": "Then it passes",
"expected": "Null is not builtin: Object",
"success": true
} ],
"context": "when calling asserts.is_not_Object(null)",
"fullname": "test_when_calling_is_not_Object",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: AABB",
"context": "Then it passes",
"expected": "Null is not builtin: AABB",
"success": true
} ],
"context": "when calling asserts.is_not_AABB(null)",
"fullname": "test_when_calling_is_not_AABB",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: int",
"context": "Then it passes",
"expected": "Null is not builtin: int",
"success": true
} ],
"context": "when calling asserts.is_not_int(null)",
"fullname": "test_when_calling_is_not_int",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: PoolColorArray",
"context": "Then it passes",
"expected": "Null is not builtin: PoolColorArray",
"success": true
} ],
"context": "when calling asserts.is_not_PoolColorArray(null)",
"fullname": "test_when_calling_is_not_PoolColorArray",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: PoolIntArray",
"context": "Then it passes",
"expected": "Null is not builtin: PoolIntArray",
"success": true
} ],
"context": "when calling asserts.is_not_PoolIntArray(null)",
"fullname": "test_when_calling_is_not_PoolIntArray",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: PoolRealArray",
"context": "Then it passes",
"expected": "Null is not builtin: PoolRealArray",
"success": true
} ],
"context": "when calling asserts.is_not_PoolRealArray(null)",
"fullname": "test_when_calling_is_not_PoolRealArray",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: NodePath",
"context": "Then it passes",
"expected": "Null is not builtin: NodePath",
"success": true
} ],
"context": "when calling asserts.is_not_NodePath(null)",
"fullname": "test_when_calling_is_not_NodePath",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: float",
"context": "Then it passes",
"expected": "Null is not builtin: float",
"success": true
} ],
"context": "when calling asserts.is_not_float(null)",
"fullname": "test_when_calling_is_not_float",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Array",
"context": "Then it passes",
"expected": "Null is not builtin: Array",
"success": true
} ],
"context": "when calling asserts.is_not_Array(null)",
"fullname": "test_when_calling_is_not_Array",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: bool",
"context": "Then it passes",
"expected": "Null is not builtin: bool",
"success": true
} ],
"context": "when calling asserts.is_not_bool(null)",
"fullname": "test_when_calling_is_not_bool",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Basis",
"context": "Then it passes",
"expected": "Null is not builtin: Basis",
"success": true
} ],
"context": "when calling asserts.is_not_Basis(null)",
"fullname": "test_when_calling_is_not_Basis",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Color",
"context": "Then it passes",
"expected": "Null is not builtin: Color",
"success": true
} ],
"context": "when calling asserts.is_not_Color(null)",
"fullname": "test_when_calling_is_not_Color",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Dictionary",
"context": "Then it passes",
"expected": "Null is not builtin: Dictionary",
"success": true
} ],
"context": "when calling asserts.is_not_Dictionary(null)",
"fullname": "test_when_calling_is_not_Dictionary",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Plane",
"context": "Then it passes",
"expected": "Null is not builtin: Plane",
"success": true
} ],
"context": "when calling asserts.is_not_Plane(null)",
"fullname": "test_when_calling_is_not_Plane",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Quat",
"context": "Then it passes",
"expected": "Null is not builtin: Quat",
"success": true
} ],
"context": "when calling asserts.is_not_Quat(null)",
"fullname": "test_when_calling_is_not_Quat",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Vector2",
"context": "Then it passes",
"expected": "Null is not builtin: Vector2",
"success": true
} ],
"context": "when calling asserts.is_not_Vector2(null)",
"fullname": "test_when_calling_is_not_Vector2",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Transform",
"context": "Then it passes",
"expected": "Null is not builtin: Transform",
"success": true
} ],
"context": "when calling asserts.is_not_Transform(null)",
"fullname": "test_when_calling_is_not_Transform",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: PoolStringArray",
"context": "Then it passes",
"expected": "Null is not builtin: PoolStringArray",
"success": true
} ],
"context": "when calling asserts.is_not_PoolStringArray(null)",
"fullname": "test_when_calling_is_not_PoolStringArray",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: RID",
"context": "Then it passes",
"expected": "Null is not builtin: RID",
"success": true
} ],
"context": "when calling asserts.is_not_RID(null)",
"fullname": "test_when_calling_is_not_RID",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: String",
"context": "Then it passes",
"expected": "Null is not builtin: String",
"success": true
} ],
"context": "when calling asserts.is_not_String(null)",
"fullname": "test_when_calling_is_not_String",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: PoolVector2Array",
"context": "Then it passes",
"expected": "Null is not builtin: PoolVector2Array",
"success": true
} ],
"context": "when calling asserts.is_not_PoolVector2Array(null)",
"fullname": "test_when_calling_is_not_PoolVector2Array",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: PoolVector3Array",
"context": "Then it passes",
"expected": "Null is not builtin: PoolVector3Array",
"success": true
} ],
"context": "when calling asserts.is_not_PoolVector3Array(null)",
"fullname": "test_when_calling_is_not_PoolVector3Array",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Rect2",
"context": "Then it passes",
"expected": "Null is not builtin: Rect2",
"success": true
} ],
"context": "when calling asserts.is_not_Rect2(null)",
"fullname": "test_when_calling_is_not_Rect2",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Transform2D",
"context": "Then it passes",
"expected": "Null is not builtin: Transform2D",
"success": true
} ],
"context": "when calling asserts.is_not_Transform2D(null)",
"fullname": "test_when_calling_is_not_Transform2D",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Vector3",
"context": "Then it passes",
"expected": "Null is not builtin: Vector3",
"success": true
} ],
"context": "when calling asserts.is_not_Vector3(null)",
"fullname": "test_when_calling_is_not_Vector3",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 26,
"path": "res://tests/unit/is_not_instance.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/is_not_instance.test.gd",
"tags": [  ],
"test": ExtResource( 2 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 26
}, {
"context": "Given a Null Assertion",
"methods": [ {
"assertions": [ {
"actual": "|null| Null == null",
"context": "Then it passes",
"expected": "|null| Null == null",
"success": true
} ],
"context": "When calling asserts.is_null(null)",
"fullname": "test_when_calling_null_is_null",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|Object| [Node:1782] != null",
"context": "Then it passes",
"expected": "|Object| [Node:1782] != null",
"success": true
} ],
"context": "When calling Node is not null",
"fullname": "test_when_calling_node_is_not_null",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|Object| [Deleted Object] == null",
"context": "A Freed Node is null in Engine 3.2.2 or greater",
"expected": "|Object| [Deleted Object] == null",
"success": true
} ],
"context": "When calling freed object is null",
"fullname": "test_when_calling_freed_object_is_not_null",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 3,
"path": "res://tests/unit/null.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/null.test.gd",
"tags": [  ],
"test": ExtResource( 12 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 3
}, {
"context": "Given an Object Assertion",
"methods": [ {
"assertions": [ {
"actual": "[Node:1786] does not have meta: bad_meta",
"context": "Then it passes",
"expected": "[Node:1786] does not have meta: bad_meta",
"success": true
} ],
"context": "When calling asserts.object_does_not_have_meta()",
"fullname": "test_when_calling_does_not_have_meta",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:1786] does not have user signal: false_signal",
"context": "Then it passes",
"expected": "[Node:1786] does not have user signal: false_signal",
"success": true
} ],
"context": "When calling obj_does_not_have_user_signal with fake signal",
"fullname": "test_when_calling_does_not_have_user_signal",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:1791] is not freed",
"context": "Then it passes",
"expected": "[Node:1791] is not freed",
"success": true
} ],
"context": "When calling asserts.is_not_freed(unfreed_object)",
"fullname": "test_when_calling_unfreed_object_is_not_freed",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:1786] has user signal: dummy_signal",
"context": "Then it passes",
"expected": "[Node:1786] has user signal: dummy_signal",
"success": true
} ],
"context": "When calling obj_has_user_signal after adding a signal",
"fullname": "test_when_calling_has_user_signal_after_adding_a_signal",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:1794] is queued for deletion",
"context": "Then it passes",
"expected": "[Node:1794] is queued for deletion",
"success": true
} ],
"context": "When calling asserts.object_is_queued for deletion after calling queue_free",
"fullname": "test_when_calling_obj_is_queued_for_deletion_after_calling_queue_free",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:1786] has meta: dummy",
"context": "Then it passes",
"expected": "[Node:1786] has meta: dummy",
"success": true
}, {
"actual": "[Node:1786] has meta: dummy",
"context": "Then it passes",
"expected": "[Node:1786] has meta: dummy",
"success": true
} ],
"context": "When calling asserts.object_has_meta() after adding metadata",
"fullname": "test_when_calling_has_meta_after_adding_metadata",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "[Node:1786] has method: title",
"context": "Then it passes",
"expected": "[Node:1786] has method: title",
"success": true
} ],
"context": "When calling has_method('title')",
"fullname": "test_when_calling_has_method_title",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:1786].builtin_dummy is connected to [Node:1786].title",
"context": "Then it passes",
"expected": "[Node:1786].builtin_dummy is connected to [Node:1786].title",
"success": true
} ],
"context": "When calling asserts object is connected with a valid connection",
"fullname": "test_when_calling_obj_is_connected_with_a_real_connection",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:1786] does not have meta: confusing",
"context": "Then it passes",
"expected": "[Node:1786] does not have meta: confusing",
"success": true
} ],
"context": "When calling asserts.object_has_meta with real key but null val",
"fullname": "test_when_calling_does_not_have_meta_real_key_null_value_pair",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:1801] is not queued for deletion",
"context": "Then it passes",
"expected": "[Node:1801] is not queued for deletion",
"success": true
} ],
"context": "When calling asserts.object_is_not_for_queued_deletion after not calling queue free()",
"fullname": "test_when_calling_obj_is_not_for_queued_deletion_after_not_calling_queue_free",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:1803] is not blocking signals",
"context": "Then it passes",
"expected": "[Node:1803] is not blocking signals",
"success": true
} ],
"context": "When calling is not blocking signals while not blocking signals",
"fullname": "test_is_not_blocking_signals",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is freed from memory",
"context": "Then it passes",
"expected": "Null is freed from memory",
"success": true
} ],
"context": "When calling asserts.is_freed(freed_object",
"fullname": "test_when_calling_freed_object_is_freed",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:1807] is blocking signals",
"context": "Then it passes",
"expected": "[Node:1807] is blocking signals",
"success": true
} ],
"context": "When calling is blocking signals while blocking signals",
"fullname": "test_is_blocking_signals",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:1786].builtin_dummy is not connected to [Node:1786].title",
"context": "Then it passes",
"expected": "[Node:1786].builtin_dummy is not connected to [Node:1786].title",
"success": true
} ],
"context": "When calling asserts object is not connected with an invalid connection",
"fullname": "test_when_calling_obj_is_not_connected_with_an_invalid_connection",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:1786] does not have user signal: builtin_dummy",
"context": "Then it passes",
"expected": "[Node:1786] does not have user signal: builtin_dummy",
"success": true
} ],
"context": "When calling does not have user signal with class signal",
"fullname": "test_when_calling_does_not_have_user_signal_with_class_signal_constant",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 15,
"path": "res://tests/unit/object.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/object.test.gd",
"tags": [  ],
"test": ExtResource( 7 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 15
}, {
"context": "Given the Addition Operator",
"methods": [ {
"assertions": [ {
"actual": "|int| 4 is equal to |int| 4",
"context": "",
"expected": "|int| 4 is equal to |int| 4",
"success": true
} ],
"context": "When we add 2 to 2 we get 4",
"fullname": "test_add",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 8 is equal to |int| 8",
"context": "",
"expected": "|int| 8 is equal to |int| 8",
"success": true
} ],
"context": "When we add 5 to 3 we get 8",
"fullname": "test_add",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 13 is equal to |int| 13",
"context": "",
"expected": "|int| 13 is equal to |int| 13",
"success": true
} ],
"context": "When we add 7 to 6 we get 13",
"fullname": "test_add",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 0 is equal to |int| 0",
"context": "",
"expected": "|int| 0 is equal to |int| 0",
"success": true
} ],
"context": "When we subtract 2 from 2 we get 0",
"fullname": "test_subtract",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 2 is equal to |int| 2",
"context": "",
"expected": "|int| 2 is equal to |int| 2",
"success": true
} ],
"context": "When we subtract 5 from 3 we get 2",
"fullname": "test_subtract",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 1 is equal to |int| 1",
"context": "",
"expected": "|int| 1 is equal to |int| 1",
"success": true
} ],
"context": "When we subtract 7 from 6 we get 1",
"fullname": "test_subtract",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 6,
"path": "res://tests/unit/parameters.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/parameters.test.gd",
"tags": [  ],
"test": ExtResource( 16 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 6
}, {
"context": "Given A Range Assertion",
"methods": [ {
"assertions": [ {
"actual": "10 is not in range(0, 10)",
"context": "Then it passes",
"expected": "10 is not in range(0, 10)",
"success": true
} ],
"context": "When calling is (10) not in range (in range(0, 10)",
"fullname": "test_when_calling_is_not_in_range",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "0 is in range(0, 10)",
"context": "Then it passes",
"expected": "0 is in range(0, 10)",
"success": true
} ],
"context": "When calling is (0) in range(0, 10)",
"fullname": "test_when_calling_is_in_range",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 2,
"path": "res://tests/unit/range.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/range.test.gd",
"tags": [  ],
"test": ExtResource( 15 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 2
}, {
"context": "Given a String Assertion",
"methods": [ {
"assertions": [ {
"actual": "impsum does not end with lorem",
"context": "Then it passes",
"expected": "impsum does not end with lorem",
"success": true
} ],
"context": "When calling asserts.string_does_not_end_with('lorem', 'impsum')",
"fullname": "test_when_calling_string_does_not_end_with",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "lorem impsum begins with lorem",
"context": "Then it passes",
"expected": "lorem impsum begins with lorem",
"success": true
} ],
"context": "When calling asserts.string_begins_with('lorem', 'lorem impsum')",
"fullname": "test_when_calling_string_begins_with",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "impsum does not contain beem im",
"context": "Then it passes",
"expected": "impsum does not contain beem im",
"success": true
} ],
"context": "When calling asserts.string_does_not_contain('em im', 'impsum')",
"fullname": "test_when_calling_string_does_not_contain",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "lorem impsum contains em im",
"context": "Then it passes",
"expected": "lorem impsum contains em im",
"success": true
} ],
"context": "When calling asserts.string_contains('em im', 'lorem impsum')",
"fullname": "test_when_calling_string_contains",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "impsum does not begin with bleh lorem",
"context": "Then it passes",
"expected": "impsum does not begin with bleh lorem",
"success": true
} ],
"context": "When calling asserts.string_does_not_begin_with('lorem', 'impsum')",
"fullname": "test_when_calling_string_does_not_begin_with",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "lorem impsum ends with impsum",
"context": "Then it passes",
"expected": "lorem impsum ends with impsum",
"success": true
} ],
"context": "When calling asserts.string_ends_with('impsum', 'lorem impsum')",
"fullname": "test_when_calling_string_ends_with",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 6,
"path": "res://tests/unit/string.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/string.test.gd",
"tags": [  ],
"test": ExtResource( 9 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 6
}, {
"context": "Dummy Passing Test",
"methods": [ {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Passing!",
"expected": "|bool| True == true",
"success": true
} ],
"context": "This method passes",
"fullname": "test_this_method_passes",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 1,
"path": "res://tests/unit/suite.test.gd.DummyOne",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/suite.test.gd.DummyOne",
"tags": [  ],
"test": SubResource( 29 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 1
}, {
"context": "Dummy Test 2",
"methods": [ {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Passing!",
"expected": "|bool| True == true",
"success": true
} ],
"context": "This method passes",
"fullname": "test_this_method_passes",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 1,
"path": "res://tests/unit/suite.test.gd.DummyTwo",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/suite.test.gd.DummyTwo",
"tags": [  ],
"test": SubResource( 30 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 1
}, {
"context": "Given a Test Script",
"methods": [ {
"assertions": [ {
"actual": "|int| 10 is greater than |int| 1",
"context": "We get an array of multiple values back",
"expected": "|int| 10 is greater than |int| 1",
"success": true
}, {
"actual": "|int| 0 is not equal to |int| 9",
"context": "With different values",
"expected": "|int| 0 != |int| 9",
"success": true
}, {
"actual": "|int| 10 is greater than |int| 1",
"context": "And we can track multiple properties",
"expected": "|int| 10 is greater than |int| 1",
"success": true
} ],
"context": "When we record properties",
"fullname": "test_we_can_record_properties",
"passed": 3,
"success": true,
"time": 0.0,
"total": 3
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|int| 2 is equal to |int| 2",
"context": "",
"expected": "|int| 2 is equal to |int| 2",
"success": true
} ],
"context": " when we omit context we can see expected and got under method",
"fullname": "test_when_we_omit_context_we_can_see_expected_and_got_under_method",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "if the test didn't break this works",
"expected": "|bool| True == true",
"success": true
} ],
"context": " we can omit describe",
"fullname": "test_we_can_omit_describe",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 3,
"path": "res://tests/unit/test.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/test.test.gd",
"tags": [  ],
"test": ExtResource( 19 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 3
}, {
"context": "Given a Signal Watcher",
"methods": [ {
"assertions": [ {
"actual": "signal: example was emitted from [Node:1853]",
"context": "Then it captures the emitted signal",
"expected": "signal: example was emitted from [Node:1853]",
"success": true
} ],
"context": "When we watch and emit a signal",
"fullname": "test_When_we_watch_and_emit_a_signal",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Signal: example was not emitted from [Node:1853]",
"context": "Then it does not capture the non-emitted signal",
"expected": "Signal: example was not emitted from [Node:1853]",
"success": true
} ],
"context": "When we watch and do not emit a signal",
"fullname": "test_When_we_watch_and_do_not_emit_a_signal",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Signal: example was emitted from [Node:1853] with arguments: [1, 20, 5]",
"context": "Then it captures any arguments that where passed when the signal was emitted",
"expected": "Signal: example was emitted from [Node:1853] with arguments: [1, 20, 5]",
"success": true
} ],
"context": "When we watch a signal from an object with no bound variables",
"fullname": "test_When_we_watch_a_signal_from_an_object_with_no_bound_variables",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "signal: multiple was emitted from [Node:1853] 2",
"context": "Then we can track how many times we emitted it",
"expected": "signal: multiple was emitted from [Node:1853] 2",
"success": true
} ],
"context": "When we watch and signal and emit it multiple times",
"fullname": "test_When_we_watch_a_signal_and_emit_it_multiple_times",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 4,
"path": "res://tests/unit/watcher.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/watcher.test.gd",
"tags": [  ],
"test": ExtResource( 17 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 4
}, {
"context": "Given a Yield",
"methods": [ {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then the yielder is paused",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then the timeout signal of the yielder is disconnected",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then our signal to the yielder is disconnected",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When the yielder heres our signal",
"fullname": "test_When_the_yielder_hears_our_signal",
"passed": 3,
"success": true,
"time": 0.0,
"total": 3
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then we set var a to true",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then we set var b to true",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we yield in start twice",
"fullname": "test_When_we_yield_in_start",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then we set var c to true",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then we set var d to true",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we yield in pre thrice",
"fullname": "test_When_we_yield_in_pre",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then we set var e to true",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then we set var f to true",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we yield twice in execute",
"fullname": "test_When_we_yield_in_execute",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then the yielder is paused",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When a signal being yielded on is emitted",
"fullname": "test_When_a_signal_being_yielded_on_is_emitted_the_yielder_is_stopped",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[100, Null, Null, Null, Null, Null] is builtin: Array",
"context": "Then we get an array",
"expected": "[100, Null, Null, Null, Null, Null] is builtin: Array",
"success": true
}, {
"actual": "|int| 6 is equal to |int| 6",
"context": "Of size 6",
"expected": "|int| 6 is equal to |int| 6",
"success": true
}, {
"actual": "|int| 100 is equal to |int| 100",
"context": "Where element 0 is 100",
"expected": "|int| 100 is equal to |int| 100",
"success": true
} ],
"context": "When yield(self.yield_value()) returns",
"fullname": "test_When_we_yield_we_get_the_return_value",
"passed": 3,
"success": true,
"time": 0.0,
"total": 3
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then the timeout signal is disconnected",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then the signal-signal is disconnected",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When it is finished",
"fullname": "test_When_yielder_is_finished_signals_are_disconnected",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then yielder is unpaused",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "The timeout signal of the yielder is connected",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we call until_timeout (with 1.0)",
"fullname": "test_When_we_call_until_timeout",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then yielder is not active",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When asserting against a test",
"fullname": "test_Yielder_is_not_active_when_asserting",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then the yielder is unpaused",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then the timeout signal of the yielder is connected",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then our signal is connected to the yielder",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we call until signal",
"fullname": "test_When_we_call_until_signal",
"passed": 3,
"success": true,
"time": 0.0,
"total": 3
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then the yielder is paused",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "The timeout signal of the yielder is not connected",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When the yielder times out on until_timeout(0.1)",
"fullname": "test_When_the_yielder_times_out",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
} ],
"passed": 11,
"path": "res://tests/unit/yield.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/yield.test.gd",
"tags": [  ],
"test": ExtResource( 18 ),
"yield_time": 1.9
},
"success": true,
"time_taken": 0.0,
"total": 11
} ],
1611528039: [  ],
1611528082: [  ],
1611528682: [ {
"context": "Given a Boolean Assertion",
"methods": [ {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then it passes",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When calling asserts.is_true(true)",
"fullname": "test_when_calling_asserts_is_true",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| False == false",
"context": "Then it passes",
"expected": "|bool| False == false",
"success": true
} ],
"context": "When calling asserts.is_false(false)",
"fullname": "test_when_calling_asserts_is_false",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| True != false",
"context": "",
"expected": "|bool| True == false",
"success": false
} ],
"context": " intentional failure",
"fullname": "test_intentional_failure",
"passed": 0,
"success": false,
"time": 0.0,
"total": 1
} ],
"passed": 2,
"path": "res://tests/integration/boolean.test.gd",
"source": {
"containers": [ "res://tests/integration", "res://tests" ],
"method": "",
"path": "res://tests/integration/boolean.test.gd",
"tags": [  ],
"test": ExtResource( 20 ),
"yield_time": 0.0
},
"success": false,
"time_taken": 0.0,
"total": 3
}, {
"context": "Default Args",
"methods": [ {
"assertions": [ {
"actual": "|bool| True == true",
"context": "If this method can be reached then we have doubled a script with default argument(s) properly!",
"expected": "|bool| True == true",
"success": true
} ],
"context": " default arguments of interpolate property",
"fullname": "test_default_arguments_of_interpolate_property",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 1,
"path": "res://tests/integration/default_args.test.gd",
"source": {
"containers": [ "res://tests/integration", "res://tests" ],
"method": "",
"path": "res://tests/integration/default_args.test.gd",
"tags": [  ],
"test": ExtResource( 10 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 1
}, {
"context": "Given is_on_floor",
"methods": [ {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then it can be stubbed",
"expected": "|bool| True == true",
"success": true
} ],
"context": "From a child node of a scene without scripts",
"fullname": "test_stubbing_is_on_floor_as_child_node_with_no_script",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then it can be stubbed",
"expected": "|bool| True == true",
"success": true
} ],
"context": "From a user-defined script",
"fullname": "test_stubbing_is_on_floor_method_from_user_defined_class",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then it can be stubbed",
"expected": "|bool| True == true",
"success": true
} ],
"context": "From a built-in KinematicBody2D2",
"fullname": "test_stubbing_is_on_floor_method_from_builtin_class2",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 3,
"path": "res://tests/integration/on_floor.test.gd",
"source": {
"containers": [ "res://tests/integration", "res://tests" ],
"method": "",
"path": "res://tests/integration/on_floor.test.gd",
"tags": [  ],
"test": ExtResource( 5 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 3
}, {
"context": "Given a Scene Director",
"methods": [ {
"assertions": [ {
"actual": "|int| 999 is equal to |int| 999",
"context": "Then we get the stubbed return value",
"expected": "|int| 999 is equal to |int| 999",
"success": true
} ],
"context": "When we call a method from a child node that we stubbed",
"fullname": "test_When_we_call_a_method_from_a_child_node_that_we_stubbed",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|Dictionary| {.:[Reference:1396], A:[Reference:1397], A/B:[Reference:1399], C:[Reference:1398], C/D:[Reference:1400]} is not equal to |Dictionary| {.:[Reference:1410], A:[Reference:1411], A/B:[Reference:1413], C:[Reference:1412], C/D:[Reference:1414]}",
"context": "Then they do not share resources",
"expected": "|Dictionary| {.:[Reference:1396], A:[Reference:1397], A/B:[Reference:1399], C:[Reference:1398], C/D:[Reference:1400]} != |Dictionary| {.:[Reference:1410], A:[Reference:1411], A/B:[Reference:1413], C:[Reference:1412], C/D:[Reference:1414]}",
"success": true
} ],
"context": "When we create two of it for the same scene",
"fullname": "test_When_we_create_two_of_it_for_the_same_scene",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 9999 is equal to |int| 9999",
"context": "Then we get the stubbed return value",
"expected": "|int| 9999 is equal to |int| 9999",
"success": true
} ],
"context": "When we call a method from the root node that we stubbed",
"fullname": "test_When_we_call_a_method_from_the_root_node_that_we_stubbed",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|NodePath| A is equal to |NodePath| A",
"context": "We have the correct NodePath Set",
"expected": "|NodePath| A is equal to |NodePath| A",
"success": true
} ],
"context": "When we add it to the tree it runs",
"fullname": "test_When_we_add_it_to_the_tree_it_runs",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 99 is equal to |int| 99",
"context": "Then we get the stubbed return value",
"expected": "|int| 99 is equal to |int| 99",
"success": true
} ],
"context": "When we call a method from a grandchild node that we stubbed",
"fullname": "test_When_we_call_a_method_from_a_grandchild_node_that_we_stubbed",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 5,
"path": "res://tests/integration/scene_director.test.gd",
"source": {
"containers": [ "res://tests/integration", "res://tests" ],
"method": "",
"path": "res://tests/integration/scene_director.test.gd",
"tags": [  ],
"test": ExtResource( 4 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 5
}, {
"context": "Given a Script Director",
"methods": [ {
"assertions": [ {
"actual": "[Reference:1523] is instance of class: [GDScript:1516]",
"context": "Then we get that inner class back",
"expected": "[Reference:1523] is instance of class: [GDScript:1516]",
"success": true
} ],
"context": "When we double an inner class",
"fullname": "test_When_we_double_an_inner_class",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|Object| [Node:1530] is equal to |Object| [Node:1530]",
"context": "Then we get the same double back",
"expected": "|Object| [Node:1530] is equal to |Object| [Node:1530]",
"success": true
} ],
"context": "When we call the double the second time",
"fullname": "test_When_we_call_double_a_second_time_on",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|Dictionary| {_enter_tree:{arguments:, default_arguments:}, _exit_tree:{arguments:, default_arguments:}, _get:{arguments:a, default_arguments:a}, _get_configuration_warning:{arguments:, default_arguments:}, _get_editor_description:{arguments:, default_arguments:}, _get_import_path:{arguments:, default_arguments:}, _get_property_list:{arguments:, default_arguments:}, _init:{arguments:, default_arguments:}, _input:{arguments:a, default_arguments:a}, _notification:{arguments:a, default_arguments:a}, _physics_process:{arguments:a, default_arguments:a}, _process:{arguments:a, default_arguments:a}, _ready:{arguments:, default_arguments:}, _set:{arguments:a, b, default_arguments:a, b}, _set_editor_description:{arguments:a, default_arguments:a}, _set_import_path:{arguments:a, default_arguments:a}, _to_string:{arguments:, default_arguments:}, _unhandled_input:{arguments:a, default_arguments:a}, _unhandled_key_input:{arguments:a, default_arguments:a}, add:{arguments:a, b, default_arguments:a, b}, add_child:{arguments:a, b, default_arguments:a, b = False}, add_child_below_node:{arguments:a, b, c, default_arguments:a, b, c = False}, add_to_group:{arguments:a, b, default_arguments:a, b = False}, add_user_signal:{arguments:a, b, default_arguments:a, b = []}, call:{arguments:a, default_arguments:a}, call_deferred:{arguments:a, default_arguments:a}, callv:{arguments:a, b, default_arguments:a, b}, can_process:{arguments:, default_arguments:}, can_translate_messages:{arguments:, default_arguments:}, connect:{arguments:a, b, c, d, e, default_arguments:a, b, c, d = [], e = 0}, disconnect:{arguments:a, b, c, default_arguments:a, b, c}, divide:{arguments:a, b, default_arguments:a, b}, duplicate:{arguments:a, default_arguments:a = 15}, emit_signal:{arguments:a, default_arguments:a}, find_node:{arguments:a, b, c, default_arguments:a, b = True, c = True}, find_parent:{arguments:a, default_arguments:a}, free:{arguments:, default_arguments:}, get:{arguments:a, default_arguments:a}, get_child:{arguments:a, default_arguments:a}, get_child_count:{arguments:, default_arguments:}, get_children:{arguments:, default_arguments:}, get_class:{arguments:, default_arguments:}, get_custom_multiplayer:{arguments:, default_arguments:}, get_filename:{arguments:, default_arguments:}, get_groups:{arguments:, default_arguments:}, get_incoming_connections:{arguments:, default_arguments:}, get_index:{arguments:, default_arguments:}, get_indexed:{arguments:a, default_arguments:a}, get_instance_id:{arguments:, default_arguments:}, get_meta:{arguments:a, default_arguments:a}, get_meta_list:{arguments:, default_arguments:}, get_method_list:{arguments:, default_arguments:}, get_multiplayer:{arguments:, default_arguments:}, get_name:{arguments:, default_arguments:}, get_network_master:{arguments:, default_arguments:}, get_node:{arguments:a, default_arguments:a}, get_node_and_resource:{arguments:a, default_arguments:a}, get_node_or_null:{arguments:a, default_arguments:a}, get_owner:{arguments:, default_arguments:}, get_parent:{arguments:, default_arguments:}, get_path:{arguments:, default_arguments:}, get_path_to:{arguments:a, default_arguments:a}, get_pause_mode:{arguments:, default_arguments:}, get_physics_process_delta_time:{arguments:, default_arguments:}, get_position_in_parent:{arguments:, default_arguments:}, get_process_delta_time:{arguments:, default_arguments:}, get_process_priority:{arguments:, default_arguments:}, get_property_list:{arguments:, default_arguments:}, get_scene_instance_load_placeholder:{arguments:, default_arguments:}, get_script:{arguments:, default_arguments:}, get_signal_connection_list:{arguments:a, default_arguments:a}, get_signal_list:{arguments:, default_arguments:}, get_tree:{arguments:, default_arguments:}, get_viewport:{arguments:, default_arguments:}, has_meta:{arguments:a, default_arguments:a}, has_method:{arguments:a, default_arguments:a}, has_node:{arguments:a, default_arguments:a}, has_node_and_resource:{arguments:a, default_arguments:a}, has_signal:{arguments:a, default_arguments:a}, has_user_signal:{arguments:a, default_arguments:a}, is_a_parent_of:{arguments:a, default_arguments:a}, is_blocking_signals:{arguments:, default_arguments:}, is_class:{arguments:a, default_arguments:a}, is_connected:{arguments:a, b, c, default_arguments:a, b, c}, is_displayed_folded:{arguments:, default_arguments:}, is_greater_than:{arguments:a, default_arguments:a}, is_in_group:{arguments:a, default_arguments:a}, is_inside_tree:{arguments:, default_arguments:}, is_network_master:{arguments:, default_arguments:}, is_physics_processing:{arguments:, default_arguments:}, is_physics_processing_internal:{arguments:, default_arguments:}, is_processing:{arguments:, default_arguments:}, is_processing_input:{arguments:, default_arguments:}, is_processing_internal:{arguments:, default_arguments:}, is_processing_unhandled_input:{arguments:, default_arguments:}, is_processing_unhandled_key_input:{arguments:, default_arguments:}, is_queued_for_deletion:{arguments:, default_arguments:}, math_fight:{arguments:, default_arguments:}, move_child:{arguments:a, b, default_arguments:a, b}, multiply:{arguments:a, b, default_arguments:a, b}, notification:{arguments:a, b, default_arguments:a, b = False}, pi:{arguments:, default_arguments:}, print_stray_nodes:{arguments:, default_arguments:}, print_tree:{arguments:, default_arguments:}, print_tree_pretty:{arguments:, default_arguments:}, propagate_call:{arguments:a, b, c, default_arguments:a, b = [], c = False}, propagate_notification:{arguments:a, default_arguments:a}, property_list_changed_notify:{arguments:, default_arguments:}, queue_free:{arguments:, default_arguments:}, raise:{arguments:, default_arguments:}, remove_and_skip:{arguments:, default_arguments:}, remove_child:{arguments:a, default_arguments:a}, remove_from_group:{arguments:a, default_arguments:a}, remove_meta:{arguments:a, default_arguments:a}, replace_by:{arguments:a, b, default_arguments:a, b = False}, request_ready:{arguments:, default_arguments:}, rpc:{arguments:a, default_arguments:a}, rpc_config:{arguments:a, b, default_arguments:a, b}, rpc_id:{arguments:a, b, default_arguments:a, b}, rpc_unreliable:{arguments:a, default_arguments:a}, rpc_unreliable_id:{arguments:a, b, default_arguments:a, b}, rset:{arguments:a, b, default_arguments:a, b}, rset_config:{arguments:a, b, default_arguments:a, b}, rset_id:{arguments:a, b, c, default_arguments:a, b, c}, rset_unreliable:{arguments:a, b, default_arguments:a, b}, rset_unreliable_id:{arguments:a, b, c, default_arguments:a, b, c}, set:{arguments:a, b, default_arguments:a, b}, set_block_signals:{arguments:a, default_arguments:a}, set_custom_multiplayer:{arguments:a, default_arguments:a}, set_deferred:{arguments:a, b, default_arguments:a, b}, set_display_folded:{arguments:a, default_arguments:a}, set_filename:{arguments:a, default_arguments:a}, set_indexed:{arguments:a, b, default_arguments:a, b}, set_message_translation:{arguments:a, default_arguments:a}, set_meta:{arguments:a, b, default_arguments:a, b}, set_name:{arguments:a, default_arguments:a}, set_network_master:{arguments:a, b, default_arguments:a, b = True}, set_owner:{arguments:a, default_arguments:a}, set_pause_mode:{arguments:a, default_arguments:a}, set_physics_process:{arguments:a, default_arguments:a}, set_physics_process_internal:{arguments:a, default_arguments:a}, set_process:{arguments:a, default_arguments:a}, set_process_input:{arguments:a, default_arguments:a}, set_process_internal:{arguments:a, default_arguments:a}, set_process_priority:{arguments:a, default_arguments:a}, set_process_unhandled_input:{arguments:a, default_arguments:a}, set_process_unhandled_key_input:{arguments:a, default_arguments:a}, set_scene_instance_load_placeholder:{arguments:a, default_arguments:a}, set_script:{arguments:a, default_arguments:a}, subtract:{arguments:a, b, default_arguments:a, b}, sum:{arguments:a, default_arguments:a}, to_string:{arguments:, default_arguments:}, tr:{arguments:a, default_arguments:a}, update_configuration_warning:{arguments:, default_arguments:}} is not equal to |Dictionary| {_enter_tree:{arguments:, default_arguments:}, _exit_tree:{arguments:, default_arguments:}, _get:{arguments:a, default_arguments:a}, _get_configuration_warning:{arguments:, default_arguments:}, _get_editor_description:{arguments:, default_arguments:}, _get_import_path:{arguments:, default_arguments:}, _get_property_list:{arguments:, default_arguments:}, _init:{arguments:, default_arguments:}, _input:{arguments:a, default_arguments:a}, _notification:{arguments:a, default_arguments:a}, _physics_process:{arguments:a, default_arguments:a}, _process:{arguments:a, default_arguments:a}, _ready:{arguments:, default_arguments:}, _set:{arguments:a, b, default_arguments:a, b}, _set_editor_description:{arguments:a, default_arguments:a}, _set_import_path:{arguments:a, default_arguments:a}, _to_string:{arguments:, default_arguments:}, _unhandled_input:{arguments:a, default_arguments:a}, _unhandled_key_input:{arguments:a, default_arguments:a}, add:{arguments:a, b, default_arguments:a, b}, add_child:{arguments:a, b, default_arguments:a, b = False}, add_child_below_node:{arguments:a, b, c, default_arguments:a, b, c = False}, add_to_group:{arguments:a, b, default_arguments:a, b = False}, add_user_signal:{arguments:a, b, default_arguments:a, b = []}, call:{arguments:a, default_arguments:a}, call_deferred:{arguments:a, default_arguments:a}, callv:{arguments:a, b, default_arguments:a, b}, can_process:{arguments:, default_arguments:}, can_translate_messages:{arguments:, default_arguments:}, connect:{arguments:a, b, c, d, e, default_arguments:a, b, c, d = [], e = 0}, disconnect:{arguments:a, b, c, default_arguments:a, b, c}, divide:{arguments:a, b, default_arguments:a, b}, duplicate:{arguments:a, default_arguments:a = 15}, emit_signal:{arguments:a, default_arguments:a}, find_node:{arguments:a, b, c, default_arguments:a, b = True, c = True}, find_parent:{arguments:a, default_arguments:a}, free:{arguments:, default_arguments:}, get:{arguments:a, default_arguments:a}, get_child:{arguments:a, default_arguments:a}, get_child_count:{arguments:, default_arguments:}, get_children:{arguments:, default_arguments:}, get_class:{arguments:, default_arguments:}, get_custom_multiplayer:{arguments:, default_arguments:}, get_filename:{arguments:, default_arguments:}, get_groups:{arguments:, default_arguments:}, get_incoming_connections:{arguments:, default_arguments:}, get_index:{arguments:, default_arguments:}, get_indexed:{arguments:a, default_arguments:a}, get_instance_id:{arguments:, default_arguments:}, get_meta:{arguments:a, default_arguments:a}, get_meta_list:{arguments:, default_arguments:}, get_method_list:{arguments:, default_arguments:}, get_multiplayer:{arguments:, default_arguments:}, get_name:{arguments:, default_arguments:}, get_network_master:{arguments:, default_arguments:}, get_node:{arguments:a, default_arguments:a}, get_node_and_resource:{arguments:a, default_arguments:a}, get_node_or_null:{arguments:a, default_arguments:a}, get_owner:{arguments:, default_arguments:}, get_parent:{arguments:, default_arguments:}, get_path:{arguments:, default_arguments:}, get_path_to:{arguments:a, default_arguments:a}, get_pause_mode:{arguments:, default_arguments:}, get_physics_process_delta_time:{arguments:, default_arguments:}, get_position_in_parent:{arguments:, default_arguments:}, get_process_delta_time:{arguments:, default_arguments:}, get_process_priority:{arguments:, default_arguments:}, get_property_list:{arguments:, default_arguments:}, get_scene_instance_load_placeholder:{arguments:, default_arguments:}, get_script:{arguments:, default_arguments:}, get_signal_connection_list:{arguments:a, default_arguments:a}, get_signal_list:{arguments:, default_arguments:}, get_tree:{arguments:, default_arguments:}, get_viewport:{arguments:, default_arguments:}, has_meta:{arguments:a, default_arguments:a}, has_method:{arguments:a, default_arguments:a}, has_node:{arguments:a, default_arguments:a}, has_node_and_resource:{arguments:a, default_arguments:a}, has_signal:{arguments:a, default_arguments:a}, has_user_signal:{arguments:a, default_arguments:a}, is_a_parent_of:{arguments:a, default_arguments:a}, is_blocking_signals:{arguments:, default_arguments:}, is_class:{arguments:a, default_arguments:a}, is_connected:{arguments:a, b, c, default_arguments:a, b, c}, is_displayed_folded:{arguments:, default_arguments:}, is_greater_than:{arguments:a, default_arguments:a}, is_in_group:{arguments:a, default_arguments:a}, is_inside_tree:{arguments:, default_arguments:}, is_network_master:{arguments:, default_arguments:}, is_physics_processing:{arguments:, default_arguments:}, is_physics_processing_internal:{arguments:, default_arguments:}, is_processing:{arguments:, default_arguments:}, is_processing_input:{arguments:, default_arguments:}, is_processing_internal:{arguments:, default_arguments:}, is_processing_unhandled_input:{arguments:, default_arguments:}, is_processing_unhandled_key_input:{arguments:, default_arguments:}, is_queued_for_deletion:{arguments:, default_arguments:}, math_fight:{arguments:, default_arguments:}, move_child:{arguments:a, b, default_arguments:a, b}, multiply:{arguments:a, b, default_arguments:a, b}, notification:{arguments:a, b, default_arguments:a, b = False}, pi:{arguments:, default_arguments:}, print_stray_nodes:{arguments:, default_arguments:}, print_tree:{arguments:, default_arguments:}, print_tree_pretty:{arguments:, default_arguments:}, propagate_call:{arguments:a, b, c, default_arguments:a, b = [], c = False}, propagate_notification:{arguments:a, default_arguments:a}, property_list_changed_notify:{arguments:, default_arguments:}, queue_free:{arguments:, default_arguments:}, raise:{arguments:, default_arguments:}, remove_and_skip:{arguments:, default_arguments:}, remove_child:{arguments:a, default_arguments:a}, remove_from_group:{arguments:a, default_arguments:a}, remove_meta:{arguments:a, default_arguments:a}, replace_by:{arguments:a, b, default_arguments:a, b = False}, request_ready:{arguments:, default_arguments:}, rpc:{arguments:a, default_arguments:a}, rpc_config:{arguments:a, b, default_arguments:a, b}, rpc_id:{arguments:a, b, default_arguments:a, b}, rpc_unreliable:{arguments:a, default_arguments:a}, rpc_unreliable_id:{arguments:a, b, default_arguments:a, b}, rset:{arguments:a, b, default_arguments:a, b}, rset_config:{arguments:a, b, default_arguments:a, b}, rset_id:{arguments:a, b, c, default_arguments:a, b, c}, rset_unreliable:{arguments:a, b, default_arguments:a, b}, rset_unreliable_id:{arguments:a, b, c, default_arguments:a, b, c}, set:{arguments:a, b, default_arguments:a, b}, set_block_signals:{arguments:a, default_arguments:a}, set_custom_multiplayer:{arguments:a, default_arguments:a}, set_deferred:{arguments:a, b, default_arguments:a, b}, set_display_folded:{arguments:a, default_arguments:a}, set_filename:{arguments:a, default_arguments:a}, set_indexed:{arguments:a, b, default_arguments:a, b}, set_message_translation:{arguments:a, default_arguments:a}, set_meta:{arguments:a, b, default_arguments:a, b}, set_name:{arguments:a, default_arguments:a}, set_network_master:{arguments:a, b, default_arguments:a, b = True}, set_owner:{arguments:a, default_arguments:a}, set_pause_mode:{arguments:a, default_arguments:a}, set_physics_process:{arguments:a, default_arguments:a}, set_physics_process_internal:{arguments:a, default_arguments:a}, set_process:{arguments:a, default_arguments:a}, set_process_input:{arguments:a, default_arguments:a}, set_process_internal:{arguments:a, default_arguments:a}, set_process_priority:{arguments:a, default_arguments:a}, set_process_unhandled_input:{arguments:a, default_arguments:a}, set_process_unhandled_key_input:{arguments:a, default_arguments:a}, set_scene_instance_load_placeholder:{arguments:a, default_arguments:a}, set_script:{arguments:a, default_arguments:a}, subtract:{arguments:a, b, default_arguments:a, b}, sum:{arguments:a, default_arguments:a}, to_string:{arguments:, default_arguments:}, tr:{arguments:a, default_arguments:a}, update_configuration_warning:{arguments:, default_arguments:}}",
"context": "Then they do not share resources",
"expected": "|Dictionary| {_enter_tree:{arguments:, default_arguments:}, _exit_tree:{arguments:, default_arguments:}, _get:{arguments:a, default_arguments:a}, _get_configuration_warning:{arguments:, default_arguments:}, _get_editor_description:{arguments:, default_arguments:}, _get_import_path:{arguments:, default_arguments:}, _get_property_list:{arguments:, default_arguments:}, _init:{arguments:, default_arguments:}, _input:{arguments:a, default_arguments:a}, _notification:{arguments:a, default_arguments:a}, _physics_process:{arguments:a, default_arguments:a}, _process:{arguments:a, default_arguments:a}, _ready:{arguments:, default_arguments:}, _set:{arguments:a, b, default_arguments:a, b}, _set_editor_description:{arguments:a, default_arguments:a}, _set_import_path:{arguments:a, default_arguments:a}, _to_string:{arguments:, default_arguments:}, _unhandled_input:{arguments:a, default_arguments:a}, _unhandled_key_input:{arguments:a, default_arguments:a}, add:{arguments:a, b, default_arguments:a, b}, add_child:{arguments:a, b, default_arguments:a, b = False}, add_child_below_node:{arguments:a, b, c, default_arguments:a, b, c = False}, add_to_group:{arguments:a, b, default_arguments:a, b = False}, add_user_signal:{arguments:a, b, default_arguments:a, b = []}, call:{arguments:a, default_arguments:a}, call_deferred:{arguments:a, default_arguments:a}, callv:{arguments:a, b, default_arguments:a, b}, can_process:{arguments:, default_arguments:}, can_translate_messages:{arguments:, default_arguments:}, connect:{arguments:a, b, c, d, e, default_arguments:a, b, c, d = [], e = 0}, disconnect:{arguments:a, b, c, default_arguments:a, b, c}, divide:{arguments:a, b, default_arguments:a, b}, duplicate:{arguments:a, default_arguments:a = 15}, emit_signal:{arguments:a, default_arguments:a}, find_node:{arguments:a, b, c, default_arguments:a, b = True, c = True}, find_parent:{arguments:a, default_arguments:a}, free:{arguments:, default_arguments:}, get:{arguments:a, default_arguments:a}, get_child:{arguments:a, default_arguments:a}, get_child_count:{arguments:, default_arguments:}, get_children:{arguments:, default_arguments:}, get_class:{arguments:, default_arguments:}, get_custom_multiplayer:{arguments:, default_arguments:}, get_filename:{arguments:, default_arguments:}, get_groups:{arguments:, default_arguments:}, get_incoming_connections:{arguments:, default_arguments:}, get_index:{arguments:, default_arguments:}, get_indexed:{arguments:a, default_arguments:a}, get_instance_id:{arguments:, default_arguments:}, get_meta:{arguments:a, default_arguments:a}, get_meta_list:{arguments:, default_arguments:}, get_method_list:{arguments:, default_arguments:}, get_multiplayer:{arguments:, default_arguments:}, get_name:{arguments:, default_arguments:}, get_network_master:{arguments:, default_arguments:}, get_node:{arguments:a, default_arguments:a}, get_node_and_resource:{arguments:a, default_arguments:a}, get_node_or_null:{arguments:a, default_arguments:a}, get_owner:{arguments:, default_arguments:}, get_parent:{arguments:, default_arguments:}, get_path:{arguments:, default_arguments:}, get_path_to:{arguments:a, default_arguments:a}, get_pause_mode:{arguments:, default_arguments:}, get_physics_process_delta_time:{arguments:, default_arguments:}, get_position_in_parent:{arguments:, default_arguments:}, get_process_delta_time:{arguments:, default_arguments:}, get_process_priority:{arguments:, default_arguments:}, get_property_list:{arguments:, default_arguments:}, get_scene_instance_load_placeholder:{arguments:, default_arguments:}, get_script:{arguments:, default_arguments:}, get_signal_connection_list:{arguments:a, default_arguments:a}, get_signal_list:{arguments:, default_arguments:}, get_tree:{arguments:, default_arguments:}, get_viewport:{arguments:, default_arguments:}, has_meta:{arguments:a, default_arguments:a}, has_method:{arguments:a, default_arguments:a}, has_node:{arguments:a, default_arguments:a}, has_node_and_resource:{arguments:a, default_arguments:a}, has_signal:{arguments:a, default_arguments:a}, has_user_signal:{arguments:a, default_arguments:a}, is_a_parent_of:{arguments:a, default_arguments:a}, is_blocking_signals:{arguments:, default_arguments:}, is_class:{arguments:a, default_arguments:a}, is_connected:{arguments:a, b, c, default_arguments:a, b, c}, is_displayed_folded:{arguments:, default_arguments:}, is_greater_than:{arguments:a, default_arguments:a}, is_in_group:{arguments:a, default_arguments:a}, is_inside_tree:{arguments:, default_arguments:}, is_network_master:{arguments:, default_arguments:}, is_physics_processing:{arguments:, default_arguments:}, is_physics_processing_internal:{arguments:, default_arguments:}, is_processing:{arguments:, default_arguments:}, is_processing_input:{arguments:, default_arguments:}, is_processing_internal:{arguments:, default_arguments:}, is_processing_unhandled_input:{arguments:, default_arguments:}, is_processing_unhandled_key_input:{arguments:, default_arguments:}, is_queued_for_deletion:{arguments:, default_arguments:}, math_fight:{arguments:, default_arguments:}, move_child:{arguments:a, b, default_arguments:a, b}, multiply:{arguments:a, b, default_arguments:a, b}, notification:{arguments:a, b, default_arguments:a, b = False}, pi:{arguments:, default_arguments:}, print_stray_nodes:{arguments:, default_arguments:}, print_tree:{arguments:, default_arguments:}, print_tree_pretty:{arguments:, default_arguments:}, propagate_call:{arguments:a, b, c, default_arguments:a, b = [], c = False}, propagate_notification:{arguments:a, default_arguments:a}, property_list_changed_notify:{arguments:, default_arguments:}, queue_free:{arguments:, default_arguments:}, raise:{arguments:, default_arguments:}, remove_and_skip:{arguments:, default_arguments:}, remove_child:{arguments:a, default_arguments:a}, remove_from_group:{arguments:a, default_arguments:a}, remove_meta:{arguments:a, default_arguments:a}, replace_by:{arguments:a, b, default_arguments:a, b = False}, request_ready:{arguments:, default_arguments:}, rpc:{arguments:a, default_arguments:a}, rpc_config:{arguments:a, b, default_arguments:a, b}, rpc_id:{arguments:a, b, default_arguments:a, b}, rpc_unreliable:{arguments:a, default_arguments:a}, rpc_unreliable_id:{arguments:a, b, default_arguments:a, b}, rset:{arguments:a, b, default_arguments:a, b}, rset_config:{arguments:a, b, default_arguments:a, b}, rset_id:{arguments:a, b, c, default_arguments:a, b, c}, rset_unreliable:{arguments:a, b, default_arguments:a, b}, rset_unreliable_id:{arguments:a, b, c, default_arguments:a, b, c}, set:{arguments:a, b, default_arguments:a, b}, set_block_signals:{arguments:a, default_arguments:a}, set_custom_multiplayer:{arguments:a, default_arguments:a}, set_deferred:{arguments:a, b, default_arguments:a, b}, set_display_folded:{arguments:a, default_arguments:a}, set_filename:{arguments:a, default_arguments:a}, set_indexed:{arguments:a, b, default_arguments:a, b}, set_message_translation:{arguments:a, default_arguments:a}, set_meta:{arguments:a, b, default_arguments:a, b}, set_name:{arguments:a, default_arguments:a}, set_network_master:{arguments:a, b, default_arguments:a, b = True}, set_owner:{arguments:a, default_arguments:a}, set_pause_mode:{arguments:a, default_arguments:a}, set_physics_process:{arguments:a, default_arguments:a}, set_physics_process_internal:{arguments:a, default_arguments:a}, set_process:{arguments:a, default_arguments:a}, set_process_input:{arguments:a, default_arguments:a}, set_process_internal:{arguments:a, default_arguments:a}, set_process_priority:{arguments:a, default_arguments:a}, set_process_unhandled_input:{arguments:a, default_arguments:a}, set_process_unhandled_key_input:{arguments:a, default_arguments:a}, set_scene_instance_load_placeholder:{arguments:a, default_arguments:a}, set_script:{arguments:a, default_arguments:a}, subtract:{arguments:a, b, default_arguments:a, b}, sum:{arguments:a, default_arguments:a}, to_string:{arguments:, default_arguments:}, tr:{arguments:a, default_arguments:a}, update_configuration_warning:{arguments:, default_arguments:}} != |Dictionary| {_enter_tree:{arguments:, default_arguments:}, _exit_tree:{arguments:, default_arguments:}, _get:{arguments:a, default_arguments:a}, _get_configuration_warning:{arguments:, default_arguments:}, _get_editor_description:{arguments:, default_arguments:}, _get_import_path:{arguments:, default_arguments:}, _get_property_list:{arguments:, default_arguments:}, _init:{arguments:, default_arguments:}, _input:{arguments:a, default_arguments:a}, _notification:{arguments:a, default_arguments:a}, _physics_process:{arguments:a, default_arguments:a}, _process:{arguments:a, default_arguments:a}, _ready:{arguments:, default_arguments:}, _set:{arguments:a, b, default_arguments:a, b}, _set_editor_description:{arguments:a, default_arguments:a}, _set_import_path:{arguments:a, default_arguments:a}, _to_string:{arguments:, default_arguments:}, _unhandled_input:{arguments:a, default_arguments:a}, _unhandled_key_input:{arguments:a, default_arguments:a}, add:{arguments:a, b, default_arguments:a, b}, add_child:{arguments:a, b, default_arguments:a, b = False}, add_child_below_node:{arguments:a, b, c, default_arguments:a, b, c = False}, add_to_group:{arguments:a, b, default_arguments:a, b = False}, add_user_signal:{arguments:a, b, default_arguments:a, b = []}, call:{arguments:a, default_arguments:a}, call_deferred:{arguments:a, default_arguments:a}, callv:{arguments:a, b, default_arguments:a, b}, can_process:{arguments:, default_arguments:}, can_translate_messages:{arguments:, default_arguments:}, connect:{arguments:a, b, c, d, e, default_arguments:a, b, c, d = [], e = 0}, disconnect:{arguments:a, b, c, default_arguments:a, b, c}, divide:{arguments:a, b, default_arguments:a, b}, duplicate:{arguments:a, default_arguments:a = 15}, emit_signal:{arguments:a, default_arguments:a}, find_node:{arguments:a, b, c, default_arguments:a, b = True, c = True}, find_parent:{arguments:a, default_arguments:a}, free:{arguments:, default_arguments:}, get:{arguments:a, default_arguments:a}, get_child:{arguments:a, default_arguments:a}, get_child_count:{arguments:, default_arguments:}, get_children:{arguments:, default_arguments:}, get_class:{arguments:, default_arguments:}, get_custom_multiplayer:{arguments:, default_arguments:}, get_filename:{arguments:, default_arguments:}, get_groups:{arguments:, default_arguments:}, get_incoming_connections:{arguments:, default_arguments:}, get_index:{arguments:, default_arguments:}, get_indexed:{arguments:a, default_arguments:a}, get_instance_id:{arguments:, default_arguments:}, get_meta:{arguments:a, default_arguments:a}, get_meta_list:{arguments:, default_arguments:}, get_method_list:{arguments:, default_arguments:}, get_multiplayer:{arguments:, default_arguments:}, get_name:{arguments:, default_arguments:}, get_network_master:{arguments:, default_arguments:}, get_node:{arguments:a, default_arguments:a}, get_node_and_resource:{arguments:a, default_arguments:a}, get_node_or_null:{arguments:a, default_arguments:a}, get_owner:{arguments:, default_arguments:}, get_parent:{arguments:, default_arguments:}, get_path:{arguments:, default_arguments:}, get_path_to:{arguments:a, default_arguments:a}, get_pause_mode:{arguments:, default_arguments:}, get_physics_process_delta_time:{arguments:, default_arguments:}, get_position_in_parent:{arguments:, default_arguments:}, get_process_delta_time:{arguments:, default_arguments:}, get_process_priority:{arguments:, default_arguments:}, get_property_list:{arguments:, default_arguments:}, get_scene_instance_load_placeholder:{arguments:, default_arguments:}, get_script:{arguments:, default_arguments:}, get_signal_connection_list:{arguments:a, default_arguments:a}, get_signal_list:{arguments:, default_arguments:}, get_tree:{arguments:, default_arguments:}, get_viewport:{arguments:, default_arguments:}, has_meta:{arguments:a, default_arguments:a}, has_method:{arguments:a, default_arguments:a}, has_node:{arguments:a, default_arguments:a}, has_node_and_resource:{arguments:a, default_arguments:a}, has_signal:{arguments:a, default_arguments:a}, has_user_signal:{arguments:a, default_arguments:a}, is_a_parent_of:{arguments:a, default_arguments:a}, is_blocking_signals:{arguments:, default_arguments:}, is_class:{arguments:a, default_arguments:a}, is_connected:{arguments:a, b, c, default_arguments:a, b, c}, is_displayed_folded:{arguments:, default_arguments:}, is_greater_than:{arguments:a, default_arguments:a}, is_in_group:{arguments:a, default_arguments:a}, is_inside_tree:{arguments:, default_arguments:}, is_network_master:{arguments:, default_arguments:}, is_physics_processing:{arguments:, default_arguments:}, is_physics_processing_internal:{arguments:, default_arguments:}, is_processing:{arguments:, default_arguments:}, is_processing_input:{arguments:, default_arguments:}, is_processing_internal:{arguments:, default_arguments:}, is_processing_unhandled_input:{arguments:, default_arguments:}, is_processing_unhandled_key_input:{arguments:, default_arguments:}, is_queued_for_deletion:{arguments:, default_arguments:}, math_fight:{arguments:, default_arguments:}, move_child:{arguments:a, b, default_arguments:a, b}, multiply:{arguments:a, b, default_arguments:a, b}, notification:{arguments:a, b, default_arguments:a, b = False}, pi:{arguments:, default_arguments:}, print_stray_nodes:{arguments:, default_arguments:}, print_tree:{arguments:, default_arguments:}, print_tree_pretty:{arguments:, default_arguments:}, propagate_call:{arguments:a, b, c, default_arguments:a, b = [], c = False}, propagate_notification:{arguments:a, default_arguments:a}, property_list_changed_notify:{arguments:, default_arguments:}, queue_free:{arguments:, default_arguments:}, raise:{arguments:, default_arguments:}, remove_and_skip:{arguments:, default_arguments:}, remove_child:{arguments:a, default_arguments:a}, remove_from_group:{arguments:a, default_arguments:a}, remove_meta:{arguments:a, default_arguments:a}, replace_by:{arguments:a, b, default_arguments:a, b = False}, request_ready:{arguments:, default_arguments:}, rpc:{arguments:a, default_arguments:a}, rpc_config:{arguments:a, b, default_arguments:a, b}, rpc_id:{arguments:a, b, default_arguments:a, b}, rpc_unreliable:{arguments:a, default_arguments:a}, rpc_unreliable_id:{arguments:a, b, default_arguments:a, b}, rset:{arguments:a, b, default_arguments:a, b}, rset_config:{arguments:a, b, default_arguments:a, b}, rset_id:{arguments:a, b, c, default_arguments:a, b, c}, rset_unreliable:{arguments:a, b, default_arguments:a, b}, rset_unreliable_id:{arguments:a, b, c, default_arguments:a, b, c}, set:{arguments:a, b, default_arguments:a, b}, set_block_signals:{arguments:a, default_arguments:a}, set_custom_multiplayer:{arguments:a, default_arguments:a}, set_deferred:{arguments:a, b, default_arguments:a, b}, set_display_folded:{arguments:a, default_arguments:a}, set_filename:{arguments:a, default_arguments:a}, set_indexed:{arguments:a, b, default_arguments:a, b}, set_message_translation:{arguments:a, default_arguments:a}, set_meta:{arguments:a, b, default_arguments:a, b}, set_name:{arguments:a, default_arguments:a}, set_network_master:{arguments:a, b, default_arguments:a, b = True}, set_owner:{arguments:a, default_arguments:a}, set_pause_mode:{arguments:a, default_arguments:a}, set_physics_process:{arguments:a, default_arguments:a}, set_physics_process_internal:{arguments:a, default_arguments:a}, set_process:{arguments:a, default_arguments:a}, set_process_input:{arguments:a, default_arguments:a}, set_process_internal:{arguments:a, default_arguments:a}, set_process_priority:{arguments:a, default_arguments:a}, set_process_unhandled_input:{arguments:a, default_arguments:a}, set_process_unhandled_key_input:{arguments:a, default_arguments:a}, set_scene_instance_load_placeholder:{arguments:a, default_arguments:a}, set_script:{arguments:a, default_arguments:a}, subtract:{arguments:a, b, default_arguments:a, b}, sum:{arguments:a, default_arguments:a}, to_string:{arguments:, default_arguments:}, tr:{arguments:a, default_arguments:a}, update_configuration_warning:{arguments:, default_arguments:}}",
"success": true
} ],
"context": "When we create two of it for the same script",
"fullname": "test_When_we_create_two_of_it_for_the_same_script",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 3,
"path": "res://tests/integration/script_director.test.gd",
"source": {
"containers": [ "res://tests/integration", "res://tests" ],
"method": "",
"path": "res://tests/integration/script_director.test.gd",
"tags": [  ],
"test": ExtResource( 13 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 3
}, {
"context": "Given a Test Double",
"methods": [ {
"assertions": [ {
"actual": "|null| Null == null",
"context": "Then we get null",
"expected": "|null| Null == null",
"success": true
} ],
"context": "When we call a method that we have dummied",
"fullname": "test_When_we_call_a_method_that_we_have_dummied",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|Object| [Node:1545] is equal to |Object| [Node:1545]",
"context": "Then it returns that same node",
"expected": "|Object| [Node:1545] is equal to |Object| [Node:1545]",
"success": true
} ],
"context": "When we call a method that we have stubbed to return a node",
"fullname": "test_When_we_call_a_method_that_we_have_stubbed_to_return_a_node",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "add was called",
"context": "Then we can see that it was called at least once",
"expected": "add was called",
"success": true
} ],
"context": "When we call a method that we are spying on",
"fullname": "test_When_we_call_a_method_that_we_are_spying_on",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "method: add was called with arguments: [10, 10]",
"context": "Then we can see that it was called with those arguments",
"expected": "method: add was called with arguments: [10, 10]",
"success": true
} ],
"context": "When we pass arguments to a method call that we are spying on",
"fullname": "test_When_we_pass_arguments_to_a_method_call_that_we_are_spying_on",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 4 is equal to |int| 4",
"context": "Then it calls its super implementation by default",
"expected": "|int| 4 is equal to |int| 4",
"success": true
}, {
"actual": "|int| 9999 is equal to |int| 9999",
"context": "Then it does not call its super implementation when arguments patterns match a different return value",
"expected": "|int| 9999 is equal to |int| 9999",
"success": true
} ],
"context": "When we call a method that we stubbed to call its super implementation by default",
"fullname": "test_When_we_call_a_method_that_we_stubbed_to_call_its_super_implementation_by_default",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|int| 9999 is equal to |int| 9999",
"context": "Then it returns the corresponding value when the pattern matches",
"expected": "|int| 9999 is equal to |int| 9999",
"success": true
} ],
"context": "When we call a method that was stubbed with an argument pattern that includes a non-primitive object",
"fullname": "test_When_we_call_a_method_that_was_stubbed_with_an_argument_pattern_that_includes_a_non_primitive_object",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 100 is equal to |int| 100",
"context": "Then it returns the default stubbed value when the arguments don't match any pattern",
"expected": "|int| 100 is equal to |int| 100",
"success": true
}, {
"actual": "|int| 1000 is equal to |int| 1000",
"context": "Then it returns the the corresponding value to the pattern the arguments matched",
"expected": "|int| 1000 is equal to |int| 1000",
"success": true
} ],
"context": "When we call a method that was stubbed to return different values based on argument patterns",
"fullname": "test_When_we_call_a_method_that_was_stubbed_to_return_different_values_based_on_argument_patterns",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|int| 9999 is equal to |int| 9999",
"context": "Then it returns the corresponding value when the partial pattern matches",
"expected": "|int| 9999 is equal to |int| 9999",
"success": true
} ],
"context": "When we call a method that was stubbed with a partial (ie using any()) argument pattern",
"fullname": "test_When_we_call_a_method_that_was_stubbed_with_a_partial_argument_pattern",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 4 is equal to |int| 4",
"context": "Then we get the correct result",
"expected": "|int| 4 is equal to |int| 4",
"success": true
} ],
"context": "When we call an add(x, y) method that we haven't directed",
"fullname": "test_When_we_call_an_add_method_that_we_have_not_directed",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then it returns true",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we call a method that we have stubbed to return true",
"fullname": "test_When_we_call_a_method_that_we_have_stubbed_to_return_true",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|float| 6.283185 is equal to |float| 6.283185",
"context": "Then we can call the static methods of that inner double",
"expected": "|float| 6.283185 is equal to |float| 6.283185",
"success": true
} ],
"context": "When we add an doubled inner class to it",
"fullname": "test_When_we_add_a_doubled_inner_class_to_it",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|String| Jackie is equal to |String| Jackie",
"context": "Then we can double the object successfully",
"expected": "|String| Jackie is equal to |String| Jackie",
"success": true
} ],
"context": "When we pass in dependecies on double",
"fullname": "test_When_we_pass_in_deps_on_double",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|String| Jackie is equal to |String| Jackie",
"context": "Then we can double the object successfully",
"expected": "|String| Jackie is equal to |String| Jackie",
"success": true
} ],
"context": "When we pass in dependecies on direct",
"fullname": "test_When_we_pass_in_deps_on_direct",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|Array| [10, 5] is equal to |Array| [10, 5]",
"context": "Then it returns a value",
"expected": "|Array| [10, 5] is equal to |Array| [10, 5]",
"success": true
} ],
"context": "When we pass an Object with a call_func function",
"fullname": "test_When_we_pass_an_object_with_callfunc_method_as_a_subcall",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "(1, 1) is builtin: Vector2",
"context": "Then we can call methods on it",
"expected": "(1, 1) is builtin: Vector2",
"success": true
} ],
"context": "When we double an inner class",
"fullname": "test_When_we_double_an_inner_class",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|null| Null == null",
"context": "Then we get the stubbed value back",
"expected": "|null| Null == null",
"success": true
} ],
"context": "When we stub a method of a doubled inner class",
"fullname": "test_When_we_stub_a_method_of_a_double_inner_class",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 99 is equal to |int| 99",
"context": "Then it affects the state of the double",
"expected": "|int| 99 is equal to |int| 99",
"success": true
} ],
"context": "When we pass a funcref as a subcall",
"fullname": "test_When_we_pass_a_funcref_as_a_subcall",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| True is equal to |bool| True",
"context": "Then we can call it",
"expected": "|bool| True is equal to |bool| True",
"success": true
} ],
"context": "When we stubbed a keyworded method by passing in the correct keyword",
"fullname": "test_When_we_stubbed_a_keyword_method_by_passing_in_the_correct_keyword",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 99 is equal to |int| 99",
"context": "Then it returns a value",
"expected": "|int| 99 is equal to |int| 99",
"success": true
} ],
"context": "When we pass a funcref as a subcall that returns",
"fullname": "test_When_we_pass_a_funcref_as_a_subcall_that_returns_a_value",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 19,
"path": "res://tests/integration/test_double.test.gd",
"source": {
"containers": [ "res://tests/integration", "res://tests" ],
"method": "",
"path": "res://tests/integration/test_double.test.gd",
"tags": [  ],
"test": ExtResource( 14 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 19
}, {
"context": "Given a Boolean Assertion",
"methods": [ {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then it passes",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When calling asserts.is_true(true)",
"fullname": "test_when_calling_asserts_is_true",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| False == false",
"context": "Then it passes",
"expected": "|bool| False == false",
"success": true
} ],
"context": "When calling asserts.is_false(false)",
"fullname": "test_when_calling_asserts_is_false",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| True != false",
"context": "",
"expected": "|bool| True == false",
"success": false
} ],
"context": " intentional failure",
"fullname": "test_intentional_failure",
"passed": 0,
"success": false,
"time": 0.0,
"total": 1
} ],
"passed": 2,
"path": "res://tests/unit/boolean.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/boolean.test.gd",
"tags": [  ],
"test": ExtResource( 11 ),
"yield_time": 0.0
},
"success": false,
"time_taken": 0.0,
"total": 3
}, {
"context": "Given an Equality Assertion",
"methods": [ {
"assertions": [ {
"actual": "|int| 1 is equal or less than |int| 1",
"context": "Then it passes!",
"expected": "|int| 1 is equal or less than |int| 1",
"success": true
} ],
"context": "When calling asserts.is_equal_or_less_than(1, 1)",
"fullname": "test_when_calling_is_equal_or_less_than_with_equal_values",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 1 is less than |int| 2",
"context": "Then it passes",
"expected": "|int| 1 is less than |int| 2",
"success": true
} ],
"context": "When calling asserts.is_less_than(2, 1)",
"fullname": "test_when_calling_is_less_than",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 5 is not equal to |int| 6",
"context": "Then it passes",
"expected": "|int| 5 != |int| 6",
"success": true
} ],
"context": "When callign asserts.is_not_equal(5, 6)",
"fullname": "test_when_calling_is_not_equal",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 2 is equal or greater |int| 1",
"context": "Then it passes",
"expected": "|int| 2 is equal or greater |int| 1",
"success": true
} ],
"context": "When calling asserts.is_equal_or_greater_than(2, 1)",
"fullname": "test_when_calling_is_equal_or_greater_than",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 1 is equal or greater |int| 1",
"context": "Then it passes",
"expected": "|int| 1 is equal or greater |int| 1",
"success": true
} ],
"context": "When calling asserts.is_equal_or_greater_than(1, 1)",
"fullname": "test_when_calling_is_equal_or_greater_than_with_equal_values",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 2 is greater than |int| 1",
"context": "Then it passes",
"expected": "|int| 2 is greater than |int| 1",
"success": true
} ],
"context": "When calling asserts.is_greater_than(2, 1)",
"fullname": "test_when_calling_is_greater_than",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 1 is equal to |int| 1",
"context": "Then it passes",
"expected": "|int| 1 is equal to |int| 1",
"success": true
} ],
"context": "When calling asserts.is_equal(1, 1)",
"fullname": "test_when_calling_is_equal",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 7,
"path": "res://tests/unit/equality.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/equality.test.gd",
"tags": [  ],
"test": ExtResource( 8 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 7
}, {
"context": "Given A File Assertion",
"methods": [ {
"assertions": [ {
"actual": " does not exist",
"context": "Then it passes",
"expected": " does not exist",
"success": true
} ],
"context": "When calling asserts file does not exist when path is empty",
"fullname": "test_when_calling_file_does_not_exist_when_path_is_empty",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "res://tests/unit/file.test.gd exists",
"context": "Then it passes",
"expected": "res://tests/unit/file.test.gd exists",
"success": true
} ],
"context": "When calling asserts.file_exists when the file is this suite",
"fullname": "test_when_calling_file_exists_when_file_is_self",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "res://somefile.gd does not exist",
"context": "Then it passes",
"expected": "res://somefile.gd does not exist",
"success": true
} ],
"context": "When calling asserts.file_does_not_exist when there is no file",
"fullname": "test_when_calling_file_does_not_exist_when_there_is_no_file",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 3,
"path": "res://tests/unit/file.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/file.test.gd",
"tags": [  ],
"test": ExtResource( 3 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 3
}, {
"context": "Given an Is Instance of class/type Assertion",
"methods": [ {
"assertions": [ {
"actual": "|Array| [] != null",
"context": "array is not null",
"expected": "|Array| [] != null",
"success": true
}, {
"actual": "[] is builtin: Array",
"context": "Then it passes",
"expected": "[] is builtin: Array",
"success": true
} ],
"context": "When calling asserts.is_Array(array: Array)",
"fullname": "test_when_calling_is_Array",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|Basis| ((1, 0, 0), (0, 1, 0), (0, 0, 1)) != null",
"context": "basis is not null",
"expected": "|Basis| ((1, 0, 0), (0, 1, 0), (0, 0, 1)) != null",
"success": true
}, {
"actual": "((1, 0, 0), (0, 1, 0), (0, 0, 1)) is builtin: Basis",
"context": "Then it passes",
"expected": "((1, 0, 0), (0, 1, 0), (0, 0, 1)) is builtin: Basis",
"success": true
} ],
"context": "When calling asserts.is_basis(basis: Basis",
"fullname": "test_when_calling_is_Basis",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "True is builtin: bool",
"context": "Then it passes",
"expected": "True is builtin: bool",
"success": true
} ],
"context": "When calling asserts.is_bool(true)",
"fullname": "test_when_calling_is_bool",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|Color| 0,0,0,1 != null",
"context": "color is not null",
"expected": "|Color| 0,0,0,1 != null",
"success": true
}, {
"actual": "0,0,0,1 is builtin: Color",
"context": "Then it passes",
"expected": "0,0,0,1 is builtin: Color",
"success": true
} ],
"context": "When calling asserts.is_color(color: Color)",
"fullname": "test_when_calling_is_Color",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "{} is builtin: Dictionary",
"context": "Then it passes",
"expected": "{} is builtin: Dictionary",
"success": true
} ],
"context": "When calling asserts.is_Dictionary({})",
"fullname": "test_when_calling_is_Dictionary",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "1 is builtin: float",
"context": "Then it passes",
"expected": "1 is builtin: float",
"success": true
} ],
"context": "When calling asserts.is_float(1.0)",
"fullname": "test_when_calling_is_float",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "1 is builtin: int",
"context": "Then it passes",
"expected": "1 is builtin: int",
"success": true
} ],
"context": "When callign asserts.is_int(1)",
"fullname": "test_when_calling_is_int",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|NodePath| . != null",
"context": "@'Parent/Child' is not null",
"expected": "|NodePath| . != null",
"success": true
}, {
"actual": ". is builtin: NodePath",
"context": "Then it passes",
"expected": ". is builtin: NodePath",
"success": true
} ],
"context": "When calling asserts.is_NodePath(@'Parent/Child')",
"fullname": "test_when_calling_is_NodePath",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|Object| [Node:1710] != null",
"context": "node is not null",
"expected": "|Object| [Node:1710] != null",
"success": true
}, {
"actual": "[Node:1710] is builtin: Object",
"context": "An instance of node is an Object",
"expected": "[Node:1710] is builtin: Object",
"success": true
} ],
"context": "When calling is asserts.object(node: Node)",
"fullname": "test_when_calling_is_object",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|Plane| 0, 0, 0, 0 != null",
"context": "plane is not null",
"expected": "|Plane| 0, 0, 0, 0 != null",
"success": true
}, {
"actual": "0, 0, 0, 0 is builtin: Plane",
"context": "then it passes",
"expected": "0, 0, 0, 0 is builtin: Plane",
"success": true
} ],
"context": "When calling asserts.is_Plane(plane: Plane())",
"fullname": "test_when_calling_is_Plane",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|AABB| 0, 0, 0 - 0, 0, 0 != null",
"context": "AABB is not null",
"expected": "|AABB| 0, 0, 0 - 0, 0, 0 != null",
"success": true
}, {
"actual": "0, 0, 0 - 0, 0, 0 is builtin: AABB",
"context": "Then it passes",
"expected": "0, 0, 0 - 0, 0, 0 is builtin: AABB",
"success": true
} ],
"context": "When calling asserts.is_AABB(aabb: AABB)",
"fullname": "test_when_calling_is_AABB",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|PoolRealArray| [] != null",
"context": "reals is not null",
"expected": "|PoolRealArray| [] != null",
"success": true
}, {
"actual": "[] is builtin: PoolRealArray",
"context": "Then it passes",
"expected": "[] is builtin: PoolRealArray",
"success": true
} ],
"context": "When calling is asserts.is_PoolRealArray(reals: PoolRealArray)",
"fullname": "test_when_calling_is_PoolRealArray",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|PoolVector2Array| [] != null",
"context": "vec2s is not null",
"expected": "|PoolVector2Array| [] != null",
"success": true
}, {
"actual": "[] is builtin: PoolVector2Array",
"context": "Then it passes",
"expected": "[] is builtin: PoolVector2Array",
"success": true
} ],
"context": "When calling is asserts.is_PoolVector2Array(vec2s: PoolVector2Array)",
"fullname": "test_when_calling_is_PoolVector2Array",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|Transform| 1, 0, 0, 0, 1, 0, 0, 0, 1 - 0, 0, 0 != null",
"context": "transform is not null",
"expected": "|Transform| 1, 0, 0, 0, 1, 0, 0, 0, 1 - 0, 0, 0 != null",
"success": true
}, {
"actual": "1, 0, 0, 0, 1, 0, 0, 0, 1 - 0, 0, 0 is builtin: Transform",
"context": "Then it passes",
"expected": "1, 0, 0, 0, 1, 0, 0, 0, 1 - 0, 0, 0 is builtin: Transform",
"success": true
} ],
"context": "When calling asserts.is_Transform(transform: Transform)",
"fullname": "test_when_calling_is_Transform",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|PoolByteArray| [PoolByteArray] != null",
"context": "bytes is not null",
"expected": "|PoolByteArray| [PoolByteArray] != null",
"success": true
}, {
"actual": "[PoolByteArray] is builtin: PoolByteArray",
"context": "Then it passes",
"expected": "[PoolByteArray] is builtin: PoolByteArray",
"success": true
} ],
"context": "When calling asserts.is_PoolByteArray(bytes: PoolByteArray)",
"fullname": "test_when_calling_is_PoolByteArray",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|Vector2| (0, 0) != null",
"context": "vec2 is not null",
"expected": "|Vector2| (0, 0) != null",
"success": true
}, {
"actual": "(0, 0) is builtin: Vector2",
"context": "Then it passes",
"expected": "(0, 0) is builtin: Vector2",
"success": true
} ],
"context": "When calling asserts.is_Vector2(vec2)",
"fullname": "test_when_calling_is_Vector2",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|Quat| (0, 0, 0, 1) != null",
"context": "quat is not null",
"expected": "|Quat| (0, 0, 0, 1) != null",
"success": true
}, {
"actual": "(0, 0, 0, 1) is builtin: Quat",
"context": "Then it passes",
"expected": "(0, 0, 0, 1) is builtin: Quat",
"success": true
} ],
"context": "When calling asserts.is_Quat(quat: Quat)",
"fullname": "test_when_calling_is_Quat",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|Transform2D| ((1, 0), (0, 1), (0, 0)) != null",
"context": "transform2D is not null",
"expected": "|Transform2D| ((1, 0), (0, 1), (0, 0)) != null",
"success": true
}, {
"actual": "((1, 0), (0, 1), (0, 0)) is builtin: Transform2D",
"context": "Then it passes",
"expected": "((1, 0), (0, 1), (0, 0)) is builtin: Transform2D",
"success": true
} ],
"context": "When calling asserts.is_Transform(transform2D: Transform2D)",
"fullname": "test_when_calling_is_Transform2D",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|PoolColorArray| [PoolColorArray] != null",
"context": "colors is not null",
"expected": "|PoolColorArray| [PoolColorArray] != null",
"success": true
}, {
"actual": "[PoolColorArray] is builtin: PoolColorArray",
"context": "Then it passes",
"expected": "[PoolColorArray] is builtin: PoolColorArray",
"success": true
} ],
"context": "When calling asserts.is_PoolColorArray(colors: PoolColorArray)",
"fullname": "test_when_calling_is_PoolColorArray",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|Rect2| (0, 0, 0, 0) != null",
"context": "rect2 is not null",
"expected": "|Rect2| (0, 0, 0, 0) != null",
"success": true
}, {
"actual": "(0, 0, 0, 0) is builtin: Rect2",
"context": "Then it passes",
"expected": "(0, 0, 0, 0) is builtin: Rect2",
"success": true
} ],
"context": "When calling asserts.is_Rect2(rect2: Rect2)",
"fullname": "test_when_calling_is_Rect2",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|RID| [RID] != null",
"context": "rid is not null",
"expected": "|RID| [RID] != null",
"success": true
}, {
"actual": "[RID] is builtin: RID",
"context": "Then it passes",
"expected": "[RID] is builtin: RID",
"success": true
} ],
"context": "When calling asserts.is_RID(rid: RID)",
"fullname": "test_when_calling_is_RID",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|PoolIntArray| [] != null",
"context": "ints is not null",
"expected": "|PoolIntArray| [] != null",
"success": true
}, {
"actual": "[] is builtin: PoolIntArray",
"context": "Then it passes",
"expected": "[] is builtin: PoolIntArray",
"success": true
} ],
"context": "When calling asserts.is_PoolIntArray(ints: PoolIntArray)",
"fullname": "test_when_calling_is_PoolIntArray",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|Vector3| (0, 0, 0) != null",
"context": "vec3 is not null",
"expected": "|Vector3| (0, 0, 0) != null",
"success": true
}, {
"actual": "(0, 0, 0) is builtin: Vector3",
"context": "Then it passes",
"expected": "(0, 0, 0) is builtin: Vector3",
"success": true
} ],
"context": "When calling asserts.is_Vector3(vec3: Vector3",
"fullname": "test_when_calling_is_Vector3",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|PoolStringArray| [] != null",
"context": "strs is not null",
"expected": "|PoolStringArray| [] != null",
"success": true
}, {
"actual": "[] is builtin: PoolStringArray",
"context": "Then it passes",
"expected": "[] is builtin: PoolStringArray",
"success": true
} ],
"context": "When calling is asserts.is_PoolStringArray(strs: PoolStringArray)",
"fullname": "test_when_calling_is_PoolStringArray",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|PoolVector3Array| [] != null",
"context": "vec3s is not null",
"expected": "|PoolVector3Array| [] != null",
"success": true
}, {
"actual": "[] is builtin: PoolVector3Array",
"context": "Then it passes",
"expected": "[] is builtin: PoolVector3Array",
"success": true
} ],
"context": "When calling is asserts.is_PoolVector3Array(vec3s: PoolVector3Array)",
"fullname": "test_when_calling_is_PoolVector3Array",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|String|  != null",
"context": "strs is not null",
"expected": "|String|  != null",
"success": true
}, {
"actual": " is builtin: String",
"context": "Then it passes",
"expected": " is builtin: String",
"success": true
} ],
"context": "When calling asserts.is_string(strs: String)",
"fullname": "test_when_calling_is_string",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
} ],
"passed": 26,
"path": "res://tests/unit/is_instance.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/is_instance.test.gd",
"tags": [  ],
"test": ExtResource( 6 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 26
}, {
"context": "Given an Is Not Instance of class/type Assertion",
"methods": [ {
"assertions": [ {
"actual": "Null is not builtin: bool",
"context": "Then it passes",
"expected": "Null is not builtin: bool",
"success": true
} ],
"context": "when calling asserts.is_not_bool(null)",
"fullname": "test_when_calling_is_not_bool",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: int",
"context": "Then it passes",
"expected": "Null is not builtin: int",
"success": true
} ],
"context": "when calling asserts.is_not_int(null)",
"fullname": "test_when_calling_is_not_int",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: PoolByteArray",
"context": "Then it passes",
"expected": "Null is not builtin: PoolByteArray",
"success": true
} ],
"context": "when calling asserts.is_not_PoolByteArray(null)",
"fullname": "test_when_calling_is_not_PoolByteArray",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: PoolIntArray",
"context": "Then it passes",
"expected": "Null is not builtin: PoolIntArray",
"success": true
} ],
"context": "when calling asserts.is_not_PoolIntArray(null)",
"fullname": "test_when_calling_is_not_PoolIntArray",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: PoolRealArray",
"context": "Then it passes",
"expected": "Null is not builtin: PoolRealArray",
"success": true
} ],
"context": "when calling asserts.is_not_PoolRealArray(null)",
"fullname": "test_when_calling_is_not_PoolRealArray",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: PoolColorArray",
"context": "Then it passes",
"expected": "Null is not builtin: PoolColorArray",
"success": true
} ],
"context": "when calling asserts.is_not_PoolColorArray(null)",
"fullname": "test_when_calling_is_not_PoolColorArray",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Dictionary",
"context": "Then it passes",
"expected": "Null is not builtin: Dictionary",
"success": true
} ],
"context": "when calling asserts.is_not_Dictionary(null)",
"fullname": "test_when_calling_is_not_Dictionary",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Color",
"context": "Then it passes",
"expected": "Null is not builtin: Color",
"success": true
} ],
"context": "when calling asserts.is_not_Color(null)",
"fullname": "test_when_calling_is_not_Color",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: NodePath",
"context": "Then it passes",
"expected": "Null is not builtin: NodePath",
"success": true
} ],
"context": "when calling asserts.is_not_NodePath(null)",
"fullname": "test_when_calling_is_not_NodePath",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Object",
"context": "Then it passes",
"expected": "Null is not builtin: Object",
"success": true
} ],
"context": "when calling asserts.is_not_Object(null)",
"fullname": "test_when_calling_is_not_Object",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: float",
"context": "Then it passes",
"expected": "Null is not builtin: float",
"success": true
} ],
"context": "when calling asserts.is_not_float(null)",
"fullname": "test_when_calling_is_not_float",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Plane",
"context": "Then it passes",
"expected": "Null is not builtin: Plane",
"success": true
} ],
"context": "when calling asserts.is_not_Plane(null)",
"fullname": "test_when_calling_is_not_Plane",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: AABB",
"context": "Then it passes",
"expected": "Null is not builtin: AABB",
"success": true
} ],
"context": "when calling asserts.is_not_AABB(null)",
"fullname": "test_when_calling_is_not_AABB",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Array",
"context": "Then it passes",
"expected": "Null is not builtin: Array",
"success": true
} ],
"context": "when calling asserts.is_not_Array(null)",
"fullname": "test_when_calling_is_not_Array",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Basis",
"context": "Then it passes",
"expected": "Null is not builtin: Basis",
"success": true
} ],
"context": "when calling asserts.is_not_Basis(null)",
"fullname": "test_when_calling_is_not_Basis",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: PoolStringArray",
"context": "Then it passes",
"expected": "Null is not builtin: PoolStringArray",
"success": true
} ],
"context": "when calling asserts.is_not_PoolStringArray(null)",
"fullname": "test_when_calling_is_not_PoolStringArray",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Rect2",
"context": "Then it passes",
"expected": "Null is not builtin: Rect2",
"success": true
} ],
"context": "when calling asserts.is_not_Rect2(null)",
"fullname": "test_when_calling_is_not_Rect2",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: String",
"context": "Then it passes",
"expected": "Null is not builtin: String",
"success": true
} ],
"context": "when calling asserts.is_not_String(null)",
"fullname": "test_when_calling_is_not_String",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Quat",
"context": "Then it passes",
"expected": "Null is not builtin: Quat",
"success": true
} ],
"context": "when calling asserts.is_not_Quat(null)",
"fullname": "test_when_calling_is_not_Quat",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Vector3",
"context": "Then it passes",
"expected": "Null is not builtin: Vector3",
"success": true
} ],
"context": "when calling asserts.is_not_Vector3(null)",
"fullname": "test_when_calling_is_not_Vector3",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: RID",
"context": "Then it passes",
"expected": "Null is not builtin: RID",
"success": true
} ],
"context": "when calling asserts.is_not_RID(null)",
"fullname": "test_when_calling_is_not_RID",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: PoolVector3Array",
"context": "Then it passes",
"expected": "Null is not builtin: PoolVector3Array",
"success": true
} ],
"context": "when calling asserts.is_not_PoolVector3Array(null)",
"fullname": "test_when_calling_is_not_PoolVector3Array",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Vector2",
"context": "Then it passes",
"expected": "Null is not builtin: Vector2",
"success": true
} ],
"context": "when calling asserts.is_not_Vector2(null)",
"fullname": "test_when_calling_is_not_Vector2",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Transform2D",
"context": "Then it passes",
"expected": "Null is not builtin: Transform2D",
"success": true
} ],
"context": "when calling asserts.is_not_Transform2D(null)",
"fullname": "test_when_calling_is_not_Transform2D",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: PoolVector2Array",
"context": "Then it passes",
"expected": "Null is not builtin: PoolVector2Array",
"success": true
} ],
"context": "when calling asserts.is_not_PoolVector2Array(null)",
"fullname": "test_when_calling_is_not_PoolVector2Array",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Transform",
"context": "Then it passes",
"expected": "Null is not builtin: Transform",
"success": true
} ],
"context": "when calling asserts.is_not_Transform(null)",
"fullname": "test_when_calling_is_not_Transform",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 26,
"path": "res://tests/unit/is_not_instance.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/is_not_instance.test.gd",
"tags": [  ],
"test": ExtResource( 2 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 26
}, {
"context": "Given a Null Assertion",
"methods": [ {
"assertions": [ {
"actual": "|Object| [Node:1779] != null",
"context": "Then it passes",
"expected": "|Object| [Node:1779] != null",
"success": true
} ],
"context": "When calling Node is not null",
"fullname": "test_when_calling_node_is_not_null",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|null| Null == null",
"context": "Then it passes",
"expected": "|null| Null == null",
"success": true
} ],
"context": "When calling asserts.is_null(null)",
"fullname": "test_when_calling_null_is_null",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|Object| [Deleted Object] == null",
"context": "A Freed Node is null in Engine 3.2.2 or greater",
"expected": "|Object| [Deleted Object] == null",
"success": true
} ],
"context": "When calling freed object is null",
"fullname": "test_when_calling_freed_object_is_not_null",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 3,
"path": "res://tests/unit/null.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/null.test.gd",
"tags": [  ],
"test": ExtResource( 12 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 3
}, {
"context": "Given an Object Assertion",
"methods": [ {
"assertions": [ {
"actual": "[Node:1784] has meta: dummy",
"context": "Then it passes",
"expected": "[Node:1784] has meta: dummy",
"success": true
}, {
"actual": "[Node:1784] has meta: dummy",
"context": "Then it passes",
"expected": "[Node:1784] has meta: dummy",
"success": true
} ],
"context": "When calling asserts.object_has_meta() after adding metadata",
"fullname": "test_when_calling_has_meta_after_adding_metadata",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "[Node:1784] has method: title",
"context": "Then it passes",
"expected": "[Node:1784] has method: title",
"success": true
} ],
"context": "When calling has_method('title')",
"fullname": "test_when_calling_has_method_title",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:1784] does not have user signal: builtin_dummy",
"context": "Then it passes",
"expected": "[Node:1784] does not have user signal: builtin_dummy",
"success": true
} ],
"context": "When calling does not have user signal with class signal",
"fullname": "test_when_calling_does_not_have_user_signal_with_class_signal_constant",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:1791] is queued for deletion",
"context": "Then it passes",
"expected": "[Node:1791] is queued for deletion",
"success": true
} ],
"context": "When calling asserts.object_is_queued for deletion after calling queue_free",
"fullname": "test_when_calling_obj_is_queued_for_deletion_after_calling_queue_free",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:1793] is not queued for deletion",
"context": "Then it passes",
"expected": "[Node:1793] is not queued for deletion",
"success": true
} ],
"context": "When calling asserts.object_is_not_for_queued_deletion after not calling queue free()",
"fullname": "test_when_calling_obj_is_not_for_queued_deletion_after_not_calling_queue_free",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:1784] does not have meta: confusing",
"context": "Then it passes",
"expected": "[Node:1784] does not have meta: confusing",
"success": true
} ],
"context": "When calling asserts.object_has_meta with real key but null val",
"fullname": "test_when_calling_does_not_have_meta_real_key_null_value_pair",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:1784] does not have user signal: false_signal",
"context": "Then it passes",
"expected": "[Node:1784] does not have user signal: false_signal",
"success": true
} ],
"context": "When calling obj_does_not_have_user_signal with fake signal",
"fullname": "test_when_calling_does_not_have_user_signal",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:1784].builtin_dummy is not connected to [Node:1784].title",
"context": "Then it passes",
"expected": "[Node:1784].builtin_dummy is not connected to [Node:1784].title",
"success": true
} ],
"context": "When calling asserts object is not connected with an invalid connection",
"fullname": "test_when_calling_obj_is_not_connected_with_an_invalid_connection",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:1798] is not blocking signals",
"context": "Then it passes",
"expected": "[Node:1798] is not blocking signals",
"success": true
} ],
"context": "When calling is not blocking signals while not blocking signals",
"fullname": "test_is_not_blocking_signals",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:1784] does not have meta: bad_meta",
"context": "Then it passes",
"expected": "[Node:1784] does not have meta: bad_meta",
"success": true
} ],
"context": "When calling asserts.object_does_not_have_meta()",
"fullname": "test_when_calling_does_not_have_meta",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:1801] is blocking signals",
"context": "Then it passes",
"expected": "[Node:1801] is blocking signals",
"success": true
} ],
"context": "When calling is blocking signals while blocking signals",
"fullname": "test_is_blocking_signals",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is freed from memory",
"context": "Then it passes",
"expected": "Null is freed from memory",
"success": true
} ],
"context": "When calling asserts.is_freed(freed_object",
"fullname": "test_when_calling_freed_object_is_freed",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:1784].builtin_dummy is connected to [Node:1784].title",
"context": "Then it passes",
"expected": "[Node:1784].builtin_dummy is connected to [Node:1784].title",
"success": true
} ],
"context": "When calling asserts object is connected with a valid connection",
"fullname": "test_when_calling_obj_is_connected_with_a_real_connection",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:1806] is not freed",
"context": "Then it passes",
"expected": "[Node:1806] is not freed",
"success": true
} ],
"context": "When calling asserts.is_not_freed(unfreed_object)",
"fullname": "test_when_calling_unfreed_object_is_not_freed",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:1784] has user signal: dummy_signal",
"context": "Then it passes",
"expected": "[Node:1784] has user signal: dummy_signal",
"success": true
} ],
"context": "When calling obj_has_user_signal after adding a signal",
"fullname": "test_when_calling_has_user_signal_after_adding_a_signal",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 15,
"path": "res://tests/unit/object.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/object.test.gd",
"tags": [  ],
"test": ExtResource( 7 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 15
}, {
"context": "Given the Addition Operator",
"methods": [ {
"assertions": [ {
"actual": "|int| 0 is equal to |int| 0",
"context": "",
"expected": "|int| 0 is equal to |int| 0",
"success": true
} ],
"context": "When we subtract 2 from 2 we get 0",
"fullname": "test_subtract",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 2 is equal to |int| 2",
"context": "",
"expected": "|int| 2 is equal to |int| 2",
"success": true
} ],
"context": "When we subtract 5 from 3 we get 2",
"fullname": "test_subtract",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 1 is equal to |int| 1",
"context": "",
"expected": "|int| 1 is equal to |int| 1",
"success": true
} ],
"context": "When we subtract 7 from 6 we get 1",
"fullname": "test_subtract",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 4 is equal to |int| 4",
"context": "",
"expected": "|int| 4 is equal to |int| 4",
"success": true
} ],
"context": "When we add 2 to 2 we get 4",
"fullname": "test_add",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 8 is equal to |int| 8",
"context": "",
"expected": "|int| 8 is equal to |int| 8",
"success": true
} ],
"context": "When we add 5 to 3 we get 8",
"fullname": "test_add",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 13 is equal to |int| 13",
"context": "",
"expected": "|int| 13 is equal to |int| 13",
"success": true
} ],
"context": "When we add 7 to 6 we get 13",
"fullname": "test_add",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 6,
"path": "res://tests/unit/parameters.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/parameters.test.gd",
"tags": [  ],
"test": ExtResource( 16 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 6
}, {
"context": "Given A Range Assertion",
"methods": [ {
"assertions": [ {
"actual": "10 is not in range(0, 10)",
"context": "Then it passes",
"expected": "10 is not in range(0, 10)",
"success": true
} ],
"context": "When calling is (10) not in range (in range(0, 10)",
"fullname": "test_when_calling_is_not_in_range",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "0 is in range(0, 10)",
"context": "Then it passes",
"expected": "0 is in range(0, 10)",
"success": true
} ],
"context": "When calling is (0) in range(0, 10)",
"fullname": "test_when_calling_is_in_range",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 2,
"path": "res://tests/unit/range.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/range.test.gd",
"tags": [  ],
"test": ExtResource( 15 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 2
}, {
"context": "Given a String Assertion",
"methods": [ {
"assertions": [ {
"actual": "lorem impsum begins with lorem",
"context": "Then it passes",
"expected": "lorem impsum begins with lorem",
"success": true
} ],
"context": "When calling asserts.string_begins_with('lorem', 'lorem impsum')",
"fullname": "test_when_calling_string_begins_with",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "impsum does not end with lorem",
"context": "Then it passes",
"expected": "impsum does not end with lorem",
"success": true
} ],
"context": "When calling asserts.string_does_not_end_with('lorem', 'impsum')",
"fullname": "test_when_calling_string_does_not_end_with",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "lorem impsum ends with impsum",
"context": "Then it passes",
"expected": "lorem impsum ends with impsum",
"success": true
} ],
"context": "When calling asserts.string_ends_with('impsum', 'lorem impsum')",
"fullname": "test_when_calling_string_ends_with",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "lorem impsum contains em im",
"context": "Then it passes",
"expected": "lorem impsum contains em im",
"success": true
} ],
"context": "When calling asserts.string_contains('em im', 'lorem impsum')",
"fullname": "test_when_calling_string_contains",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "impsum does not contain beem im",
"context": "Then it passes",
"expected": "impsum does not contain beem im",
"success": true
} ],
"context": "When calling asserts.string_does_not_contain('em im', 'impsum')",
"fullname": "test_when_calling_string_does_not_contain",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "impsum does not begin with bleh lorem",
"context": "Then it passes",
"expected": "impsum does not begin with bleh lorem",
"success": true
} ],
"context": "When calling asserts.string_does_not_begin_with('lorem', 'impsum')",
"fullname": "test_when_calling_string_does_not_begin_with",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 6,
"path": "res://tests/unit/string.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/string.test.gd",
"tags": [  ],
"test": ExtResource( 9 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 6
}, {
"context": "Dummy Passing Test",
"methods": [ {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Passing!",
"expected": "|bool| True == true",
"success": true
} ],
"context": "This method passes",
"fullname": "test_this_method_passes",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 1,
"path": "res://tests/unit/suite.test.gd.DummyOne",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/suite.test.gd.DummyOne",
"tags": [  ],
"test": SubResource( 31 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 1
}, {
"context": "Dummy Test 2",
"methods": [ {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Passing!",
"expected": "|bool| True == true",
"success": true
} ],
"context": "This method passes",
"fullname": "test_this_method_passes",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 1,
"path": "res://tests/unit/suite.test.gd.DummyTwo",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/suite.test.gd.DummyTwo",
"tags": [  ],
"test": SubResource( 32 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 1
}, {
"context": "Given a Test Script",
"methods": [ {
"assertions": [ {
"actual": "|bool| True == true",
"context": "",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|int| 2 is equal to |int| 2",
"context": "",
"expected": "|int| 2 is equal to |int| 2",
"success": true
} ],
"context": " when we omit context we can see expected and got under method",
"fullname": "test_when_we_omit_context_we_can_see_expected_and_got_under_method",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "if the test didn't break this works",
"expected": "|bool| True == true",
"success": true
} ],
"context": " we can omit describe",
"fullname": "test_we_can_omit_describe",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 10 is greater than |int| 1",
"context": "We get an array of multiple values back",
"expected": "|int| 10 is greater than |int| 1",
"success": true
}, {
"actual": "|int| 0 is not equal to |int| 9",
"context": "With different values",
"expected": "|int| 0 != |int| 9",
"success": true
}, {
"actual": "|int| 10 is greater than |int| 1",
"context": "And we can track multiple properties",
"expected": "|int| 10 is greater than |int| 1",
"success": true
} ],
"context": "When we record properties",
"fullname": "test_we_can_record_properties",
"passed": 3,
"success": true,
"time": 0.0,
"total": 3
} ],
"passed": 3,
"path": "res://tests/unit/test.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/test.test.gd",
"tags": [  ],
"test": ExtResource( 19 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 3
}, {
"context": "Given a Signal Watcher",
"methods": [ {
"assertions": [ {
"actual": "signal: multiple was emitted from [Node:1851] 2",
"context": "Then we can track how many times we emitted it",
"expected": "signal: multiple was emitted from [Node:1851] 2",
"success": true
} ],
"context": "When we watch and signal and emit it multiple times",
"fullname": "test_When_we_watch_a_signal_and_emit_it_multiple_times",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Signal: example was not emitted from [Node:1851]",
"context": "Then it does not capture the non-emitted signal",
"expected": "Signal: example was not emitted from [Node:1851]",
"success": true
} ],
"context": "When we watch and do not emit a signal",
"fullname": "test_When_we_watch_and_do_not_emit_a_signal",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "signal: example was emitted from [Node:1851]",
"context": "Then it captures the emitted signal",
"expected": "signal: example was emitted from [Node:1851]",
"success": true
} ],
"context": "When we watch and emit a signal",
"fullname": "test_When_we_watch_and_emit_a_signal",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Signal: example was emitted from [Node:1851] with arguments: [1, 20, 5]",
"context": "Then it captures any arguments that where passed when the signal was emitted",
"expected": "Signal: example was emitted from [Node:1851] with arguments: [1, 20, 5]",
"success": true
} ],
"context": "When we watch a signal from an object with no bound variables",
"fullname": "test_When_we_watch_a_signal_from_an_object_with_no_bound_variables",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 4,
"path": "res://tests/unit/watcher.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/watcher.test.gd",
"tags": [  ],
"test": ExtResource( 17 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 4
}, {
"context": "Given a Yield",
"methods": [ {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then the timeout signal is disconnected",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then the signal-signal is disconnected",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When it is finished",
"fullname": "test_When_yielder_is_finished_signals_are_disconnected",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then the yielder is paused",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When a signal being yielded on is emitted",
"fullname": "test_When_a_signal_being_yielded_on_is_emitted_the_yielder_is_stopped",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then the yielder is paused",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then the timeout signal of the yielder is disconnected",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then our signal to the yielder is disconnected",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When the yielder heres our signal",
"fullname": "test_When_the_yielder_hears_our_signal",
"passed": 3,
"success": true,
"time": 0.0,
"total": 3
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then we set var c to true",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then we set var d to true",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we yield in pre thrice",
"fullname": "test_When_we_yield_in_pre",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "[100, Null, Null, Null, Null, Null] is builtin: Array",
"context": "Then we get an array",
"expected": "[100, Null, Null, Null, Null, Null] is builtin: Array",
"success": true
}, {
"actual": "|int| 6 is equal to |int| 6",
"context": "Of size 6",
"expected": "|int| 6 is equal to |int| 6",
"success": true
}, {
"actual": "|int| 100 is equal to |int| 100",
"context": "Where element 0 is 100",
"expected": "|int| 100 is equal to |int| 100",
"success": true
} ],
"context": "When yield(self.yield_value()) returns",
"fullname": "test_When_we_yield_we_get_the_return_value",
"passed": 3,
"success": true,
"time": 0.0,
"total": 3
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then we set var e to true",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then we set var f to true",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we yield twice in execute",
"fullname": "test_When_we_yield_in_execute",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then yielder is not active",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When asserting against a test",
"fullname": "test_Yielder_is_not_active_when_asserting",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then yielder is unpaused",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "The timeout signal of the yielder is connected",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we call until_timeout (with 1.0)",
"fullname": "test_When_we_call_until_timeout",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then the yielder is unpaused",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then the timeout signal of the yielder is connected",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then our signal is connected to the yielder",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we call until signal",
"fullname": "test_When_we_call_until_signal",
"passed": 3,
"success": true,
"time": 0.0,
"total": 3
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then we set var a to true",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then we set var b to true",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we yield in start twice",
"fullname": "test_When_we_yield_in_start",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then the yielder is paused",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "The timeout signal of the yielder is not connected",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When the yielder times out on until_timeout(0.1)",
"fullname": "test_When_the_yielder_times_out",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
} ],
"passed": 11,
"path": "res://tests/unit/yield.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/yield.test.gd",
"tags": [  ],
"test": ExtResource( 18 ),
"yield_time": 1.9
},
"success": true,
"time_taken": 0.0,
"total": 11
} ],
1611528847: [ {
"context": "Given a Boolean Assertion",
"methods": [ {
"assertions": [ {
"actual": "|bool| False == false",
"context": "Then it passes",
"expected": "|bool| False == false",
"success": true
} ],
"context": "When calling asserts.is_false(false)",
"fullname": "test_when_calling_asserts_is_false",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| True != false",
"context": "",
"expected": "|bool| True == false",
"success": false
} ],
"context": " intentional failure",
"fullname": "test_intentional_failure",
"passed": 0,
"success": false,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then it passes",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When calling asserts.is_true(true)",
"fullname": "test_when_calling_asserts_is_true",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 2,
"path": "res://tests/unit/boolean.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/boolean.test.gd",
"tags": [  ],
"test": ExtResource( 11 ),
"yield_time": 0.0
},
"success": false,
"time_taken": 0.0,
"total": 3
} ],
1611528858: [ {
"context": "Given a Boolean Assertion",
"methods": [ {
"assertions": [ {
"actual": "|bool| False == false",
"context": "Then it passes",
"expected": "|bool| False == false",
"success": true
} ],
"context": "When calling asserts.is_false(false)",
"fullname": "test_when_calling_asserts_is_false",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then it passes",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When calling asserts.is_true(true)",
"fullname": "test_when_calling_asserts_is_true",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| True != false",
"context": "",
"expected": "|bool| True == false",
"success": false
} ],
"context": " intentional failure",
"fullname": "test_intentional_failure",
"passed": 0,
"success": false,
"time": 0.0,
"total": 1
} ],
"passed": 2,
"path": "res://tests/unit/boolean.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/boolean.test.gd",
"tags": [  ],
"test": ExtResource( 11 ),
"yield_time": 0.0
},
"success": false,
"time_taken": 0.0,
"total": 3
} ],
1611529395: [ {
"context": "Given a Boolean Assertion",
"methods": [ {
"assertions": [ {
"actual": "|bool| False == false",
"context": "Then it passes",
"expected": "|bool| False == false",
"success": true
} ],
"context": "When calling asserts.is_false(false)",
"fullname": "test_when_calling_asserts_is_false",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then it passes",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When calling asserts.is_true(true)",
"fullname": "test_when_calling_asserts_is_true",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| True != false",
"context": "",
"expected": "|bool| True == false",
"success": false
} ],
"context": " intentional failure",
"fullname": "test_intentional_failure",
"passed": 0,
"success": false,
"time": 0.0,
"total": 1
} ],
"passed": 2,
"path": "res://tests/integration/boolean.test.gd",
"source": {
"containers": [ "res://tests/integration", "res://tests" ],
"method": "",
"path": "res://tests/integration/boolean.test.gd",
"tags": [  ],
"test": ExtResource( 20 ),
"yield_time": 0.0
},
"success": false,
"time_taken": 0.0,
"total": 3
}, {
"context": "Default Args",
"methods": [ {
"assertions": [ {
"actual": "|bool| True == true",
"context": "If this method can be reached then we have doubled a script with default argument(s) properly!",
"expected": "|bool| True == true",
"success": true
} ],
"context": " default arguments of interpolate property",
"fullname": "test_default_arguments_of_interpolate_property",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 1,
"path": "res://tests/integration/default_args.test.gd",
"source": {
"containers": [ "res://tests/integration", "res://tests" ],
"method": "",
"path": "res://tests/integration/default_args.test.gd",
"tags": [  ],
"test": ExtResource( 10 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 1
}, {
"context": "Given is_on_floor",
"methods": [ {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then it can be stubbed",
"expected": "|bool| True == true",
"success": true
} ],
"context": "From a user-defined script",
"fullname": "test_stubbing_is_on_floor_method_from_user_defined_class",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then it can be stubbed",
"expected": "|bool| True == true",
"success": true
} ],
"context": "From a built-in KinematicBody2D2",
"fullname": "test_stubbing_is_on_floor_method_from_builtin_class2",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then it can be stubbed",
"expected": "|bool| True == true",
"success": true
} ],
"context": "From a child node of a scene without scripts",
"fullname": "test_stubbing_is_on_floor_as_child_node_with_no_script",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 3,
"path": "res://tests/integration/on_floor.test.gd",
"source": {
"containers": [ "res://tests/integration", "res://tests" ],
"method": "",
"path": "res://tests/integration/on_floor.test.gd",
"tags": [  ],
"test": ExtResource( 5 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 3
}, {
"context": "Given a Scene Director",
"methods": [ {
"assertions": [ {
"actual": "|Dictionary| {.:[Reference:1365], A:[Reference:1366], A/B:[Reference:1368], C:[Reference:1367], C/D:[Reference:1369]} is not equal to |Dictionary| {.:[Reference:1379], A:[Reference:1380], A/B:[Reference:1382], C:[Reference:1381], C/D:[Reference:1383]}",
"context": "Then they do not share resources",
"expected": "|Dictionary| {.:[Reference:1365], A:[Reference:1366], A/B:[Reference:1368], C:[Reference:1367], C/D:[Reference:1369]} != |Dictionary| {.:[Reference:1379], A:[Reference:1380], A/B:[Reference:1382], C:[Reference:1381], C/D:[Reference:1383]}",
"success": true
} ],
"context": "When we create two of it for the same scene",
"fullname": "test_When_we_create_two_of_it_for_the_same_scene",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 9999 is equal to |int| 9999",
"context": "Then we get the stubbed return value",
"expected": "|int| 9999 is equal to |int| 9999",
"success": true
} ],
"context": "When we call a method from the root node that we stubbed",
"fullname": "test_When_we_call_a_method_from_the_root_node_that_we_stubbed",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 999 is equal to |int| 999",
"context": "Then we get the stubbed return value",
"expected": "|int| 999 is equal to |int| 999",
"success": true
} ],
"context": "When we call a method from a child node that we stubbed",
"fullname": "test_When_we_call_a_method_from_a_child_node_that_we_stubbed",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|NodePath| A is equal to |NodePath| A",
"context": "We have the correct NodePath Set",
"expected": "|NodePath| A is equal to |NodePath| A",
"success": true
} ],
"context": "When we add it to the tree it runs",
"fullname": "test_When_we_add_it_to_the_tree_it_runs",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 99 is equal to |int| 99",
"context": "Then we get the stubbed return value",
"expected": "|int| 99 is equal to |int| 99",
"success": true
} ],
"context": "When we call a method from a grandchild node that we stubbed",
"fullname": "test_When_we_call_a_method_from_a_grandchild_node_that_we_stubbed",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 5,
"path": "res://tests/integration/scene_director.test.gd",
"source": {
"containers": [ "res://tests/integration", "res://tests" ],
"method": "",
"path": "res://tests/integration/scene_director.test.gd",
"tags": [  ],
"test": ExtResource( 4 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 5
}, {
"context": "Given a Script Director",
"methods": [ {
"assertions": [ {
"actual": "[Reference:1523] is instance of class: [GDScript:1516]",
"context": "Then we get that inner class back",
"expected": "[Reference:1523] is instance of class: [GDScript:1516]",
"success": true
} ],
"context": "When we double an inner class",
"fullname": "test_When_we_double_an_inner_class",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|Object| [Node:1530] is equal to |Object| [Node:1530]",
"context": "Then we get the same double back",
"expected": "|Object| [Node:1530] is equal to |Object| [Node:1530]",
"success": true
} ],
"context": "When we call the double the second time",
"fullname": "test_When_we_call_double_a_second_time_on",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|Dictionary| {_enter_tree:{arguments:, default_arguments:}, _exit_tree:{arguments:, default_arguments:}, _get:{arguments:a, default_arguments:a}, _get_configuration_warning:{arguments:, default_arguments:}, _get_editor_description:{arguments:, default_arguments:}, _get_import_path:{arguments:, default_arguments:}, _get_property_list:{arguments:, default_arguments:}, _init:{arguments:, default_arguments:}, _input:{arguments:a, default_arguments:a}, _notification:{arguments:a, default_arguments:a}, _physics_process:{arguments:a, default_arguments:a}, _process:{arguments:a, default_arguments:a}, _ready:{arguments:, default_arguments:}, _set:{arguments:a, b, default_arguments:a, b}, _set_editor_description:{arguments:a, default_arguments:a}, _set_import_path:{arguments:a, default_arguments:a}, _to_string:{arguments:, default_arguments:}, _unhandled_input:{arguments:a, default_arguments:a}, _unhandled_key_input:{arguments:a, default_arguments:a}, add:{arguments:a, b, default_arguments:a, b}, add_child:{arguments:a, b, default_arguments:a, b = False}, add_child_below_node:{arguments:a, b, c, default_arguments:a, b, c = False}, add_to_group:{arguments:a, b, default_arguments:a, b = False}, add_user_signal:{arguments:a, b, default_arguments:a, b = []}, call:{arguments:a, default_arguments:a}, call_deferred:{arguments:a, default_arguments:a}, callv:{arguments:a, b, default_arguments:a, b}, can_process:{arguments:, default_arguments:}, can_translate_messages:{arguments:, default_arguments:}, connect:{arguments:a, b, c, d, e, default_arguments:a, b, c, d = [], e = 0}, disconnect:{arguments:a, b, c, default_arguments:a, b, c}, divide:{arguments:a, b, default_arguments:a, b}, duplicate:{arguments:a, default_arguments:a = 15}, emit_signal:{arguments:a, default_arguments:a}, find_node:{arguments:a, b, c, default_arguments:a, b = True, c = True}, find_parent:{arguments:a, default_arguments:a}, free:{arguments:, default_arguments:}, get:{arguments:a, default_arguments:a}, get_child:{arguments:a, default_arguments:a}, get_child_count:{arguments:, default_arguments:}, get_children:{arguments:, default_arguments:}, get_class:{arguments:, default_arguments:}, get_custom_multiplayer:{arguments:, default_arguments:}, get_filename:{arguments:, default_arguments:}, get_groups:{arguments:, default_arguments:}, get_incoming_connections:{arguments:, default_arguments:}, get_index:{arguments:, default_arguments:}, get_indexed:{arguments:a, default_arguments:a}, get_instance_id:{arguments:, default_arguments:}, get_meta:{arguments:a, default_arguments:a}, get_meta_list:{arguments:, default_arguments:}, get_method_list:{arguments:, default_arguments:}, get_multiplayer:{arguments:, default_arguments:}, get_name:{arguments:, default_arguments:}, get_network_master:{arguments:, default_arguments:}, get_node:{arguments:a, default_arguments:a}, get_node_and_resource:{arguments:a, default_arguments:a}, get_node_or_null:{arguments:a, default_arguments:a}, get_owner:{arguments:, default_arguments:}, get_parent:{arguments:, default_arguments:}, get_path:{arguments:, default_arguments:}, get_path_to:{arguments:a, default_arguments:a}, get_pause_mode:{arguments:, default_arguments:}, get_physics_process_delta_time:{arguments:, default_arguments:}, get_position_in_parent:{arguments:, default_arguments:}, get_process_delta_time:{arguments:, default_arguments:}, get_process_priority:{arguments:, default_arguments:}, get_property_list:{arguments:, default_arguments:}, get_scene_instance_load_placeholder:{arguments:, default_arguments:}, get_script:{arguments:, default_arguments:}, get_signal_connection_list:{arguments:a, default_arguments:a}, get_signal_list:{arguments:, default_arguments:}, get_tree:{arguments:, default_arguments:}, get_viewport:{arguments:, default_arguments:}, has_meta:{arguments:a, default_arguments:a}, has_method:{arguments:a, default_arguments:a}, has_node:{arguments:a, default_arguments:a}, has_node_and_resource:{arguments:a, default_arguments:a}, has_signal:{arguments:a, default_arguments:a}, has_user_signal:{arguments:a, default_arguments:a}, is_a_parent_of:{arguments:a, default_arguments:a}, is_blocking_signals:{arguments:, default_arguments:}, is_class:{arguments:a, default_arguments:a}, is_connected:{arguments:a, b, c, default_arguments:a, b, c}, is_displayed_folded:{arguments:, default_arguments:}, is_greater_than:{arguments:a, default_arguments:a}, is_in_group:{arguments:a, default_arguments:a}, is_inside_tree:{arguments:, default_arguments:}, is_network_master:{arguments:, default_arguments:}, is_physics_processing:{arguments:, default_arguments:}, is_physics_processing_internal:{arguments:, default_arguments:}, is_processing:{arguments:, default_arguments:}, is_processing_input:{arguments:, default_arguments:}, is_processing_internal:{arguments:, default_arguments:}, is_processing_unhandled_input:{arguments:, default_arguments:}, is_processing_unhandled_key_input:{arguments:, default_arguments:}, is_queued_for_deletion:{arguments:, default_arguments:}, math_fight:{arguments:, default_arguments:}, move_child:{arguments:a, b, default_arguments:a, b}, multiply:{arguments:a, b, default_arguments:a, b}, notification:{arguments:a, b, default_arguments:a, b = False}, pi:{arguments:, default_arguments:}, print_stray_nodes:{arguments:, default_arguments:}, print_tree:{arguments:, default_arguments:}, print_tree_pretty:{arguments:, default_arguments:}, propagate_call:{arguments:a, b, c, default_arguments:a, b = [], c = False}, propagate_notification:{arguments:a, default_arguments:a}, property_list_changed_notify:{arguments:, default_arguments:}, queue_free:{arguments:, default_arguments:}, raise:{arguments:, default_arguments:}, remove_and_skip:{arguments:, default_arguments:}, remove_child:{arguments:a, default_arguments:a}, remove_from_group:{arguments:a, default_arguments:a}, remove_meta:{arguments:a, default_arguments:a}, replace_by:{arguments:a, b, default_arguments:a, b = False}, request_ready:{arguments:, default_arguments:}, rpc:{arguments:a, default_arguments:a}, rpc_config:{arguments:a, b, default_arguments:a, b}, rpc_id:{arguments:a, b, default_arguments:a, b}, rpc_unreliable:{arguments:a, default_arguments:a}, rpc_unreliable_id:{arguments:a, b, default_arguments:a, b}, rset:{arguments:a, b, default_arguments:a, b}, rset_config:{arguments:a, b, default_arguments:a, b}, rset_id:{arguments:a, b, c, default_arguments:a, b, c}, rset_unreliable:{arguments:a, b, default_arguments:a, b}, rset_unreliable_id:{arguments:a, b, c, default_arguments:a, b, c}, set:{arguments:a, b, default_arguments:a, b}, set_block_signals:{arguments:a, default_arguments:a}, set_custom_multiplayer:{arguments:a, default_arguments:a}, set_deferred:{arguments:a, b, default_arguments:a, b}, set_display_folded:{arguments:a, default_arguments:a}, set_filename:{arguments:a, default_arguments:a}, set_indexed:{arguments:a, b, default_arguments:a, b}, set_message_translation:{arguments:a, default_arguments:a}, set_meta:{arguments:a, b, default_arguments:a, b}, set_name:{arguments:a, default_arguments:a}, set_network_master:{arguments:a, b, default_arguments:a, b = True}, set_owner:{arguments:a, default_arguments:a}, set_pause_mode:{arguments:a, default_arguments:a}, set_physics_process:{arguments:a, default_arguments:a}, set_physics_process_internal:{arguments:a, default_arguments:a}, set_process:{arguments:a, default_arguments:a}, set_process_input:{arguments:a, default_arguments:a}, set_process_internal:{arguments:a, default_arguments:a}, set_process_priority:{arguments:a, default_arguments:a}, set_process_unhandled_input:{arguments:a, default_arguments:a}, set_process_unhandled_key_input:{arguments:a, default_arguments:a}, set_scene_instance_load_placeholder:{arguments:a, default_arguments:a}, set_script:{arguments:a, default_arguments:a}, subtract:{arguments:a, b, default_arguments:a, b}, sum:{arguments:a, default_arguments:a}, to_string:{arguments:, default_arguments:}, tr:{arguments:a, default_arguments:a}, update_configuration_warning:{arguments:, default_arguments:}} is not equal to |Dictionary| {_enter_tree:{arguments:, default_arguments:}, _exit_tree:{arguments:, default_arguments:}, _get:{arguments:a, default_arguments:a}, _get_configuration_warning:{arguments:, default_arguments:}, _get_editor_description:{arguments:, default_arguments:}, _get_import_path:{arguments:, default_arguments:}, _get_property_list:{arguments:, default_arguments:}, _init:{arguments:, default_arguments:}, _input:{arguments:a, default_arguments:a}, _notification:{arguments:a, default_arguments:a}, _physics_process:{arguments:a, default_arguments:a}, _process:{arguments:a, default_arguments:a}, _ready:{arguments:, default_arguments:}, _set:{arguments:a, b, default_arguments:a, b}, _set_editor_description:{arguments:a, default_arguments:a}, _set_import_path:{arguments:a, default_arguments:a}, _to_string:{arguments:, default_arguments:}, _unhandled_input:{arguments:a, default_arguments:a}, _unhandled_key_input:{arguments:a, default_arguments:a}, add:{arguments:a, b, default_arguments:a, b}, add_child:{arguments:a, b, default_arguments:a, b = False}, add_child_below_node:{arguments:a, b, c, default_arguments:a, b, c = False}, add_to_group:{arguments:a, b, default_arguments:a, b = False}, add_user_signal:{arguments:a, b, default_arguments:a, b = []}, call:{arguments:a, default_arguments:a}, call_deferred:{arguments:a, default_arguments:a}, callv:{arguments:a, b, default_arguments:a, b}, can_process:{arguments:, default_arguments:}, can_translate_messages:{arguments:, default_arguments:}, connect:{arguments:a, b, c, d, e, default_arguments:a, b, c, d = [], e = 0}, disconnect:{arguments:a, b, c, default_arguments:a, b, c}, divide:{arguments:a, b, default_arguments:a, b}, duplicate:{arguments:a, default_arguments:a = 15}, emit_signal:{arguments:a, default_arguments:a}, find_node:{arguments:a, b, c, default_arguments:a, b = True, c = True}, find_parent:{arguments:a, default_arguments:a}, free:{arguments:, default_arguments:}, get:{arguments:a, default_arguments:a}, get_child:{arguments:a, default_arguments:a}, get_child_count:{arguments:, default_arguments:}, get_children:{arguments:, default_arguments:}, get_class:{arguments:, default_arguments:}, get_custom_multiplayer:{arguments:, default_arguments:}, get_filename:{arguments:, default_arguments:}, get_groups:{arguments:, default_arguments:}, get_incoming_connections:{arguments:, default_arguments:}, get_index:{arguments:, default_arguments:}, get_indexed:{arguments:a, default_arguments:a}, get_instance_id:{arguments:, default_arguments:}, get_meta:{arguments:a, default_arguments:a}, get_meta_list:{arguments:, default_arguments:}, get_method_list:{arguments:, default_arguments:}, get_multiplayer:{arguments:, default_arguments:}, get_name:{arguments:, default_arguments:}, get_network_master:{arguments:, default_arguments:}, get_node:{arguments:a, default_arguments:a}, get_node_and_resource:{arguments:a, default_arguments:a}, get_node_or_null:{arguments:a, default_arguments:a}, get_owner:{arguments:, default_arguments:}, get_parent:{arguments:, default_arguments:}, get_path:{arguments:, default_arguments:}, get_path_to:{arguments:a, default_arguments:a}, get_pause_mode:{arguments:, default_arguments:}, get_physics_process_delta_time:{arguments:, default_arguments:}, get_position_in_parent:{arguments:, default_arguments:}, get_process_delta_time:{arguments:, default_arguments:}, get_process_priority:{arguments:, default_arguments:}, get_property_list:{arguments:, default_arguments:}, get_scene_instance_load_placeholder:{arguments:, default_arguments:}, get_script:{arguments:, default_arguments:}, get_signal_connection_list:{arguments:a, default_arguments:a}, get_signal_list:{arguments:, default_arguments:}, get_tree:{arguments:, default_arguments:}, get_viewport:{arguments:, default_arguments:}, has_meta:{arguments:a, default_arguments:a}, has_method:{arguments:a, default_arguments:a}, has_node:{arguments:a, default_arguments:a}, has_node_and_resource:{arguments:a, default_arguments:a}, has_signal:{arguments:a, default_arguments:a}, has_user_signal:{arguments:a, default_arguments:a}, is_a_parent_of:{arguments:a, default_arguments:a}, is_blocking_signals:{arguments:, default_arguments:}, is_class:{arguments:a, default_arguments:a}, is_connected:{arguments:a, b, c, default_arguments:a, b, c}, is_displayed_folded:{arguments:, default_arguments:}, is_greater_than:{arguments:a, default_arguments:a}, is_in_group:{arguments:a, default_arguments:a}, is_inside_tree:{arguments:, default_arguments:}, is_network_master:{arguments:, default_arguments:}, is_physics_processing:{arguments:, default_arguments:}, is_physics_processing_internal:{arguments:, default_arguments:}, is_processing:{arguments:, default_arguments:}, is_processing_input:{arguments:, default_arguments:}, is_processing_internal:{arguments:, default_arguments:}, is_processing_unhandled_input:{arguments:, default_arguments:}, is_processing_unhandled_key_input:{arguments:, default_arguments:}, is_queued_for_deletion:{arguments:, default_arguments:}, math_fight:{arguments:, default_arguments:}, move_child:{arguments:a, b, default_arguments:a, b}, multiply:{arguments:a, b, default_arguments:a, b}, notification:{arguments:a, b, default_arguments:a, b = False}, pi:{arguments:, default_arguments:}, print_stray_nodes:{arguments:, default_arguments:}, print_tree:{arguments:, default_arguments:}, print_tree_pretty:{arguments:, default_arguments:}, propagate_call:{arguments:a, b, c, default_arguments:a, b = [], c = False}, propagate_notification:{arguments:a, default_arguments:a}, property_list_changed_notify:{arguments:, default_arguments:}, queue_free:{arguments:, default_arguments:}, raise:{arguments:, default_arguments:}, remove_and_skip:{arguments:, default_arguments:}, remove_child:{arguments:a, default_arguments:a}, remove_from_group:{arguments:a, default_arguments:a}, remove_meta:{arguments:a, default_arguments:a}, replace_by:{arguments:a, b, default_arguments:a, b = False}, request_ready:{arguments:, default_arguments:}, rpc:{arguments:a, default_arguments:a}, rpc_config:{arguments:a, b, default_arguments:a, b}, rpc_id:{arguments:a, b, default_arguments:a, b}, rpc_unreliable:{arguments:a, default_arguments:a}, rpc_unreliable_id:{arguments:a, b, default_arguments:a, b}, rset:{arguments:a, b, default_arguments:a, b}, rset_config:{arguments:a, b, default_arguments:a, b}, rset_id:{arguments:a, b, c, default_arguments:a, b, c}, rset_unreliable:{arguments:a, b, default_arguments:a, b}, rset_unreliable_id:{arguments:a, b, c, default_arguments:a, b, c}, set:{arguments:a, b, default_arguments:a, b}, set_block_signals:{arguments:a, default_arguments:a}, set_custom_multiplayer:{arguments:a, default_arguments:a}, set_deferred:{arguments:a, b, default_arguments:a, b}, set_display_folded:{arguments:a, default_arguments:a}, set_filename:{arguments:a, default_arguments:a}, set_indexed:{arguments:a, b, default_arguments:a, b}, set_message_translation:{arguments:a, default_arguments:a}, set_meta:{arguments:a, b, default_arguments:a, b}, set_name:{arguments:a, default_arguments:a}, set_network_master:{arguments:a, b, default_arguments:a, b = True}, set_owner:{arguments:a, default_arguments:a}, set_pause_mode:{arguments:a, default_arguments:a}, set_physics_process:{arguments:a, default_arguments:a}, set_physics_process_internal:{arguments:a, default_arguments:a}, set_process:{arguments:a, default_arguments:a}, set_process_input:{arguments:a, default_arguments:a}, set_process_internal:{arguments:a, default_arguments:a}, set_process_priority:{arguments:a, default_arguments:a}, set_process_unhandled_input:{arguments:a, default_arguments:a}, set_process_unhandled_key_input:{arguments:a, default_arguments:a}, set_scene_instance_load_placeholder:{arguments:a, default_arguments:a}, set_script:{arguments:a, default_arguments:a}, subtract:{arguments:a, b, default_arguments:a, b}, sum:{arguments:a, default_arguments:a}, to_string:{arguments:, default_arguments:}, tr:{arguments:a, default_arguments:a}, update_configuration_warning:{arguments:, default_arguments:}}",
"context": "Then they do not share resources",
"expected": "|Dictionary| {_enter_tree:{arguments:, default_arguments:}, _exit_tree:{arguments:, default_arguments:}, _get:{arguments:a, default_arguments:a}, _get_configuration_warning:{arguments:, default_arguments:}, _get_editor_description:{arguments:, default_arguments:}, _get_import_path:{arguments:, default_arguments:}, _get_property_list:{arguments:, default_arguments:}, _init:{arguments:, default_arguments:}, _input:{arguments:a, default_arguments:a}, _notification:{arguments:a, default_arguments:a}, _physics_process:{arguments:a, default_arguments:a}, _process:{arguments:a, default_arguments:a}, _ready:{arguments:, default_arguments:}, _set:{arguments:a, b, default_arguments:a, b}, _set_editor_description:{arguments:a, default_arguments:a}, _set_import_path:{arguments:a, default_arguments:a}, _to_string:{arguments:, default_arguments:}, _unhandled_input:{arguments:a, default_arguments:a}, _unhandled_key_input:{arguments:a, default_arguments:a}, add:{arguments:a, b, default_arguments:a, b}, add_child:{arguments:a, b, default_arguments:a, b = False}, add_child_below_node:{arguments:a, b, c, default_arguments:a, b, c = False}, add_to_group:{arguments:a, b, default_arguments:a, b = False}, add_user_signal:{arguments:a, b, default_arguments:a, b = []}, call:{arguments:a, default_arguments:a}, call_deferred:{arguments:a, default_arguments:a}, callv:{arguments:a, b, default_arguments:a, b}, can_process:{arguments:, default_arguments:}, can_translate_messages:{arguments:, default_arguments:}, connect:{arguments:a, b, c, d, e, default_arguments:a, b, c, d = [], e = 0}, disconnect:{arguments:a, b, c, default_arguments:a, b, c}, divide:{arguments:a, b, default_arguments:a, b}, duplicate:{arguments:a, default_arguments:a = 15}, emit_signal:{arguments:a, default_arguments:a}, find_node:{arguments:a, b, c, default_arguments:a, b = True, c = True}, find_parent:{arguments:a, default_arguments:a}, free:{arguments:, default_arguments:}, get:{arguments:a, default_arguments:a}, get_child:{arguments:a, default_arguments:a}, get_child_count:{arguments:, default_arguments:}, get_children:{arguments:, default_arguments:}, get_class:{arguments:, default_arguments:}, get_custom_multiplayer:{arguments:, default_arguments:}, get_filename:{arguments:, default_arguments:}, get_groups:{arguments:, default_arguments:}, get_incoming_connections:{arguments:, default_arguments:}, get_index:{arguments:, default_arguments:}, get_indexed:{arguments:a, default_arguments:a}, get_instance_id:{arguments:, default_arguments:}, get_meta:{arguments:a, default_arguments:a}, get_meta_list:{arguments:, default_arguments:}, get_method_list:{arguments:, default_arguments:}, get_multiplayer:{arguments:, default_arguments:}, get_name:{arguments:, default_arguments:}, get_network_master:{arguments:, default_arguments:}, get_node:{arguments:a, default_arguments:a}, get_node_and_resource:{arguments:a, default_arguments:a}, get_node_or_null:{arguments:a, default_arguments:a}, get_owner:{arguments:, default_arguments:}, get_parent:{arguments:, default_arguments:}, get_path:{arguments:, default_arguments:}, get_path_to:{arguments:a, default_arguments:a}, get_pause_mode:{arguments:, default_arguments:}, get_physics_process_delta_time:{arguments:, default_arguments:}, get_position_in_parent:{arguments:, default_arguments:}, get_process_delta_time:{arguments:, default_arguments:}, get_process_priority:{arguments:, default_arguments:}, get_property_list:{arguments:, default_arguments:}, get_scene_instance_load_placeholder:{arguments:, default_arguments:}, get_script:{arguments:, default_arguments:}, get_signal_connection_list:{arguments:a, default_arguments:a}, get_signal_list:{arguments:, default_arguments:}, get_tree:{arguments:, default_arguments:}, get_viewport:{arguments:, default_arguments:}, has_meta:{arguments:a, default_arguments:a}, has_method:{arguments:a, default_arguments:a}, has_node:{arguments:a, default_arguments:a}, has_node_and_resource:{arguments:a, default_arguments:a}, has_signal:{arguments:a, default_arguments:a}, has_user_signal:{arguments:a, default_arguments:a}, is_a_parent_of:{arguments:a, default_arguments:a}, is_blocking_signals:{arguments:, default_arguments:}, is_class:{arguments:a, default_arguments:a}, is_connected:{arguments:a, b, c, default_arguments:a, b, c}, is_displayed_folded:{arguments:, default_arguments:}, is_greater_than:{arguments:a, default_arguments:a}, is_in_group:{arguments:a, default_arguments:a}, is_inside_tree:{arguments:, default_arguments:}, is_network_master:{arguments:, default_arguments:}, is_physics_processing:{arguments:, default_arguments:}, is_physics_processing_internal:{arguments:, default_arguments:}, is_processing:{arguments:, default_arguments:}, is_processing_input:{arguments:, default_arguments:}, is_processing_internal:{arguments:, default_arguments:}, is_processing_unhandled_input:{arguments:, default_arguments:}, is_processing_unhandled_key_input:{arguments:, default_arguments:}, is_queued_for_deletion:{arguments:, default_arguments:}, math_fight:{arguments:, default_arguments:}, move_child:{arguments:a, b, default_arguments:a, b}, multiply:{arguments:a, b, default_arguments:a, b}, notification:{arguments:a, b, default_arguments:a, b = False}, pi:{arguments:, default_arguments:}, print_stray_nodes:{arguments:, default_arguments:}, print_tree:{arguments:, default_arguments:}, print_tree_pretty:{arguments:, default_arguments:}, propagate_call:{arguments:a, b, c, default_arguments:a, b = [], c = False}, propagate_notification:{arguments:a, default_arguments:a}, property_list_changed_notify:{arguments:, default_arguments:}, queue_free:{arguments:, default_arguments:}, raise:{arguments:, default_arguments:}, remove_and_skip:{arguments:, default_arguments:}, remove_child:{arguments:a, default_arguments:a}, remove_from_group:{arguments:a, default_arguments:a}, remove_meta:{arguments:a, default_arguments:a}, replace_by:{arguments:a, b, default_arguments:a, b = False}, request_ready:{arguments:, default_arguments:}, rpc:{arguments:a, default_arguments:a}, rpc_config:{arguments:a, b, default_arguments:a, b}, rpc_id:{arguments:a, b, default_arguments:a, b}, rpc_unreliable:{arguments:a, default_arguments:a}, rpc_unreliable_id:{arguments:a, b, default_arguments:a, b}, rset:{arguments:a, b, default_arguments:a, b}, rset_config:{arguments:a, b, default_arguments:a, b}, rset_id:{arguments:a, b, c, default_arguments:a, b, c}, rset_unreliable:{arguments:a, b, default_arguments:a, b}, rset_unreliable_id:{arguments:a, b, c, default_arguments:a, b, c}, set:{arguments:a, b, default_arguments:a, b}, set_block_signals:{arguments:a, default_arguments:a}, set_custom_multiplayer:{arguments:a, default_arguments:a}, set_deferred:{arguments:a, b, default_arguments:a, b}, set_display_folded:{arguments:a, default_arguments:a}, set_filename:{arguments:a, default_arguments:a}, set_indexed:{arguments:a, b, default_arguments:a, b}, set_message_translation:{arguments:a, default_arguments:a}, set_meta:{arguments:a, b, default_arguments:a, b}, set_name:{arguments:a, default_arguments:a}, set_network_master:{arguments:a, b, default_arguments:a, b = True}, set_owner:{arguments:a, default_arguments:a}, set_pause_mode:{arguments:a, default_arguments:a}, set_physics_process:{arguments:a, default_arguments:a}, set_physics_process_internal:{arguments:a, default_arguments:a}, set_process:{arguments:a, default_arguments:a}, set_process_input:{arguments:a, default_arguments:a}, set_process_internal:{arguments:a, default_arguments:a}, set_process_priority:{arguments:a, default_arguments:a}, set_process_unhandled_input:{arguments:a, default_arguments:a}, set_process_unhandled_key_input:{arguments:a, default_arguments:a}, set_scene_instance_load_placeholder:{arguments:a, default_arguments:a}, set_script:{arguments:a, default_arguments:a}, subtract:{arguments:a, b, default_arguments:a, b}, sum:{arguments:a, default_arguments:a}, to_string:{arguments:, default_arguments:}, tr:{arguments:a, default_arguments:a}, update_configuration_warning:{arguments:, default_arguments:}} != |Dictionary| {_enter_tree:{arguments:, default_arguments:}, _exit_tree:{arguments:, default_arguments:}, _get:{arguments:a, default_arguments:a}, _get_configuration_warning:{arguments:, default_arguments:}, _get_editor_description:{arguments:, default_arguments:}, _get_import_path:{arguments:, default_arguments:}, _get_property_list:{arguments:, default_arguments:}, _init:{arguments:, default_arguments:}, _input:{arguments:a, default_arguments:a}, _notification:{arguments:a, default_arguments:a}, _physics_process:{arguments:a, default_arguments:a}, _process:{arguments:a, default_arguments:a}, _ready:{arguments:, default_arguments:}, _set:{arguments:a, b, default_arguments:a, b}, _set_editor_description:{arguments:a, default_arguments:a}, _set_import_path:{arguments:a, default_arguments:a}, _to_string:{arguments:, default_arguments:}, _unhandled_input:{arguments:a, default_arguments:a}, _unhandled_key_input:{arguments:a, default_arguments:a}, add:{arguments:a, b, default_arguments:a, b}, add_child:{arguments:a, b, default_arguments:a, b = False}, add_child_below_node:{arguments:a, b, c, default_arguments:a, b, c = False}, add_to_group:{arguments:a, b, default_arguments:a, b = False}, add_user_signal:{arguments:a, b, default_arguments:a, b = []}, call:{arguments:a, default_arguments:a}, call_deferred:{arguments:a, default_arguments:a}, callv:{arguments:a, b, default_arguments:a, b}, can_process:{arguments:, default_arguments:}, can_translate_messages:{arguments:, default_arguments:}, connect:{arguments:a, b, c, d, e, default_arguments:a, b, c, d = [], e = 0}, disconnect:{arguments:a, b, c, default_arguments:a, b, c}, divide:{arguments:a, b, default_arguments:a, b}, duplicate:{arguments:a, default_arguments:a = 15}, emit_signal:{arguments:a, default_arguments:a}, find_node:{arguments:a, b, c, default_arguments:a, b = True, c = True}, find_parent:{arguments:a, default_arguments:a}, free:{arguments:, default_arguments:}, get:{arguments:a, default_arguments:a}, get_child:{arguments:a, default_arguments:a}, get_child_count:{arguments:, default_arguments:}, get_children:{arguments:, default_arguments:}, get_class:{arguments:, default_arguments:}, get_custom_multiplayer:{arguments:, default_arguments:}, get_filename:{arguments:, default_arguments:}, get_groups:{arguments:, default_arguments:}, get_incoming_connections:{arguments:, default_arguments:}, get_index:{arguments:, default_arguments:}, get_indexed:{arguments:a, default_arguments:a}, get_instance_id:{arguments:, default_arguments:}, get_meta:{arguments:a, default_arguments:a}, get_meta_list:{arguments:, default_arguments:}, get_method_list:{arguments:, default_arguments:}, get_multiplayer:{arguments:, default_arguments:}, get_name:{arguments:, default_arguments:}, get_network_master:{arguments:, default_arguments:}, get_node:{arguments:a, default_arguments:a}, get_node_and_resource:{arguments:a, default_arguments:a}, get_node_or_null:{arguments:a, default_arguments:a}, get_owner:{arguments:, default_arguments:}, get_parent:{arguments:, default_arguments:}, get_path:{arguments:, default_arguments:}, get_path_to:{arguments:a, default_arguments:a}, get_pause_mode:{arguments:, default_arguments:}, get_physics_process_delta_time:{arguments:, default_arguments:}, get_position_in_parent:{arguments:, default_arguments:}, get_process_delta_time:{arguments:, default_arguments:}, get_process_priority:{arguments:, default_arguments:}, get_property_list:{arguments:, default_arguments:}, get_scene_instance_load_placeholder:{arguments:, default_arguments:}, get_script:{arguments:, default_arguments:}, get_signal_connection_list:{arguments:a, default_arguments:a}, get_signal_list:{arguments:, default_arguments:}, get_tree:{arguments:, default_arguments:}, get_viewport:{arguments:, default_arguments:}, has_meta:{arguments:a, default_arguments:a}, has_method:{arguments:a, default_arguments:a}, has_node:{arguments:a, default_arguments:a}, has_node_and_resource:{arguments:a, default_arguments:a}, has_signal:{arguments:a, default_arguments:a}, has_user_signal:{arguments:a, default_arguments:a}, is_a_parent_of:{arguments:a, default_arguments:a}, is_blocking_signals:{arguments:, default_arguments:}, is_class:{arguments:a, default_arguments:a}, is_connected:{arguments:a, b, c, default_arguments:a, b, c}, is_displayed_folded:{arguments:, default_arguments:}, is_greater_than:{arguments:a, default_arguments:a}, is_in_group:{arguments:a, default_arguments:a}, is_inside_tree:{arguments:, default_arguments:}, is_network_master:{arguments:, default_arguments:}, is_physics_processing:{arguments:, default_arguments:}, is_physics_processing_internal:{arguments:, default_arguments:}, is_processing:{arguments:, default_arguments:}, is_processing_input:{arguments:, default_arguments:}, is_processing_internal:{arguments:, default_arguments:}, is_processing_unhandled_input:{arguments:, default_arguments:}, is_processing_unhandled_key_input:{arguments:, default_arguments:}, is_queued_for_deletion:{arguments:, default_arguments:}, math_fight:{arguments:, default_arguments:}, move_child:{arguments:a, b, default_arguments:a, b}, multiply:{arguments:a, b, default_arguments:a, b}, notification:{arguments:a, b, default_arguments:a, b = False}, pi:{arguments:, default_arguments:}, print_stray_nodes:{arguments:, default_arguments:}, print_tree:{arguments:, default_arguments:}, print_tree_pretty:{arguments:, default_arguments:}, propagate_call:{arguments:a, b, c, default_arguments:a, b = [], c = False}, propagate_notification:{arguments:a, default_arguments:a}, property_list_changed_notify:{arguments:, default_arguments:}, queue_free:{arguments:, default_arguments:}, raise:{arguments:, default_arguments:}, remove_and_skip:{arguments:, default_arguments:}, remove_child:{arguments:a, default_arguments:a}, remove_from_group:{arguments:a, default_arguments:a}, remove_meta:{arguments:a, default_arguments:a}, replace_by:{arguments:a, b, default_arguments:a, b = False}, request_ready:{arguments:, default_arguments:}, rpc:{arguments:a, default_arguments:a}, rpc_config:{arguments:a, b, default_arguments:a, b}, rpc_id:{arguments:a, b, default_arguments:a, b}, rpc_unreliable:{arguments:a, default_arguments:a}, rpc_unreliable_id:{arguments:a, b, default_arguments:a, b}, rset:{arguments:a, b, default_arguments:a, b}, rset_config:{arguments:a, b, default_arguments:a, b}, rset_id:{arguments:a, b, c, default_arguments:a, b, c}, rset_unreliable:{arguments:a, b, default_arguments:a, b}, rset_unreliable_id:{arguments:a, b, c, default_arguments:a, b, c}, set:{arguments:a, b, default_arguments:a, b}, set_block_signals:{arguments:a, default_arguments:a}, set_custom_multiplayer:{arguments:a, default_arguments:a}, set_deferred:{arguments:a, b, default_arguments:a, b}, set_display_folded:{arguments:a, default_arguments:a}, set_filename:{arguments:a, default_arguments:a}, set_indexed:{arguments:a, b, default_arguments:a, b}, set_message_translation:{arguments:a, default_arguments:a}, set_meta:{arguments:a, b, default_arguments:a, b}, set_name:{arguments:a, default_arguments:a}, set_network_master:{arguments:a, b, default_arguments:a, b = True}, set_owner:{arguments:a, default_arguments:a}, set_pause_mode:{arguments:a, default_arguments:a}, set_physics_process:{arguments:a, default_arguments:a}, set_physics_process_internal:{arguments:a, default_arguments:a}, set_process:{arguments:a, default_arguments:a}, set_process_input:{arguments:a, default_arguments:a}, set_process_internal:{arguments:a, default_arguments:a}, set_process_priority:{arguments:a, default_arguments:a}, set_process_unhandled_input:{arguments:a, default_arguments:a}, set_process_unhandled_key_input:{arguments:a, default_arguments:a}, set_scene_instance_load_placeholder:{arguments:a, default_arguments:a}, set_script:{arguments:a, default_arguments:a}, subtract:{arguments:a, b, default_arguments:a, b}, sum:{arguments:a, default_arguments:a}, to_string:{arguments:, default_arguments:}, tr:{arguments:a, default_arguments:a}, update_configuration_warning:{arguments:, default_arguments:}}",
"success": true
} ],
"context": "When we create two of it for the same script",
"fullname": "test_When_we_create_two_of_it_for_the_same_script",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 3,
"path": "res://tests/integration/script_director.test.gd",
"source": {
"containers": [ "res://tests/integration", "res://tests" ],
"method": "",
"path": "res://tests/integration/script_director.test.gd",
"tags": [  ],
"test": ExtResource( 13 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 3
}, {
"context": "Given a Test Double",
"methods": [ {
"assertions": [ {
"actual": "|int| 4 is equal to |int| 4",
"context": "Then it calls its super implementation by default",
"expected": "|int| 4 is equal to |int| 4",
"success": true
}, {
"actual": "|int| 9999 is equal to |int| 9999",
"context": "Then it does not call its super implementation when arguments patterns match a different return value",
"expected": "|int| 9999 is equal to |int| 9999",
"success": true
} ],
"context": "When we call a method that we stubbed to call its super implementation by default",
"fullname": "test_When_we_call_a_method_that_we_stubbed_to_call_its_super_implementation_by_default",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|null| Null == null",
"context": "Then we get the stubbed value back",
"expected": "|null| Null == null",
"success": true
} ],
"context": "When we stub a method of a doubled inner class",
"fullname": "test_When_we_stub_a_method_of_a_double_inner_class",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 9999 is equal to |int| 9999",
"context": "Then it returns the corresponding value when the partial pattern matches",
"expected": "|int| 9999 is equal to |int| 9999",
"success": true
} ],
"context": "When we call a method that was stubbed with a partial (ie using any()) argument pattern",
"fullname": "test_When_we_call_a_method_that_was_stubbed_with_a_partial_argument_pattern",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "(1, 1) is builtin: Vector2",
"context": "Then we can call methods on it",
"expected": "(1, 1) is builtin: Vector2",
"success": true
} ],
"context": "When we double an inner class",
"fullname": "test_When_we_double_an_inner_class",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 99 is equal to |int| 99",
"context": "Then it affects the state of the double",
"expected": "|int| 99 is equal to |int| 99",
"success": true
} ],
"context": "When we pass a funcref as a subcall",
"fullname": "test_When_we_pass_a_funcref_as_a_subcall",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then it returns true",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we call a method that we have stubbed to return true",
"fullname": "test_When_we_call_a_method_that_we_have_stubbed_to_return_true",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|null| Null == null",
"context": "Then we get null",
"expected": "|null| Null == null",
"success": true
} ],
"context": "When we call a method that we have dummied",
"fullname": "test_When_we_call_a_method_that_we_have_dummied",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|String| Jackie is equal to |String| Jackie",
"context": "Then we can double the object successfully",
"expected": "|String| Jackie is equal to |String| Jackie",
"success": true
} ],
"context": "When we pass in dependecies on double",
"fullname": "test_When_we_pass_in_deps_on_double",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|String| Jackie is equal to |String| Jackie",
"context": "Then we can double the object successfully",
"expected": "|String| Jackie is equal to |String| Jackie",
"success": true
} ],
"context": "When we pass in dependecies on direct",
"fullname": "test_When_we_pass_in_deps_on_direct",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|Array| [10, 5] is equal to |Array| [10, 5]",
"context": "Then it returns a value",
"expected": "|Array| [10, 5] is equal to |Array| [10, 5]",
"success": true
} ],
"context": "When we pass an Object with a call_func function",
"fullname": "test_When_we_pass_an_object_with_callfunc_method_as_a_subcall",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "add was called",
"context": "Then we can see that it was called at least once",
"expected": "add was called",
"success": true
} ],
"context": "When we call a method that we are spying on",
"fullname": "test_When_we_call_a_method_that_we_are_spying_on",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 99 is equal to |int| 99",
"context": "Then it returns a value",
"expected": "|int| 99 is equal to |int| 99",
"success": true
} ],
"context": "When we pass a funcref as a subcall that returns",
"fullname": "test_When_we_pass_a_funcref_as_a_subcall_that_returns_a_value",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 100 is equal to |int| 100",
"context": "Then it returns the default stubbed value when the arguments don't match any pattern",
"expected": "|int| 100 is equal to |int| 100",
"success": true
}, {
"actual": "|int| 1000 is equal to |int| 1000",
"context": "Then it returns the the corresponding value to the pattern the arguments matched",
"expected": "|int| 1000 is equal to |int| 1000",
"success": true
} ],
"context": "When we call a method that was stubbed to return different values based on argument patterns",
"fullname": "test_When_we_call_a_method_that_was_stubbed_to_return_different_values_based_on_argument_patterns",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|float| 6.283185 is equal to |float| 6.283185",
"context": "Then we can call the static methods of that inner double",
"expected": "|float| 6.283185 is equal to |float| 6.283185",
"success": true
} ],
"context": "When we add an doubled inner class to it",
"fullname": "test_When_we_add_a_doubled_inner_class_to_it",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| True is equal to |bool| True",
"context": "Then we can call it",
"expected": "|bool| True is equal to |bool| True",
"success": true
} ],
"context": "When we stubbed a keyworded method by passing in the correct keyword",
"fullname": "test_When_we_stubbed_a_keyword_method_by_passing_in_the_correct_keyword",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "method: add was called with arguments: [10, 10]",
"context": "Then we can see that it was called with those arguments",
"expected": "method: add was called with arguments: [10, 10]",
"success": true
} ],
"context": "When we pass arguments to a method call that we are spying on",
"fullname": "test_When_we_pass_arguments_to_a_method_call_that_we_are_spying_on",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|Object| [Node:1652] is equal to |Object| [Node:1652]",
"context": "Then it returns that same node",
"expected": "|Object| [Node:1652] is equal to |Object| [Node:1652]",
"success": true
} ],
"context": "When we call a method that we have stubbed to return a node",
"fullname": "test_When_we_call_a_method_that_we_have_stubbed_to_return_a_node",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 9999 is equal to |int| 9999",
"context": "Then it returns the corresponding value when the pattern matches",
"expected": "|int| 9999 is equal to |int| 9999",
"success": true
} ],
"context": "When we call a method that was stubbed with an argument pattern that includes a non-primitive object",
"fullname": "test_When_we_call_a_method_that_was_stubbed_with_an_argument_pattern_that_includes_a_non_primitive_object",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 4 is equal to |int| 4",
"context": "Then we get the correct result",
"expected": "|int| 4 is equal to |int| 4",
"success": true
} ],
"context": "When we call an add(x, y) method that we haven't directed",
"fullname": "test_When_we_call_an_add_method_that_we_have_not_directed",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 19,
"path": "res://tests/integration/test_double.test.gd",
"source": {
"containers": [ "res://tests/integration", "res://tests" ],
"method": "",
"path": "res://tests/integration/test_double.test.gd",
"tags": [  ],
"test": ExtResource( 14 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 19
}, {
"context": "Given a Boolean Assertion",
"methods": [ {
"assertions": [ {
"actual": "|bool| False == false",
"context": "Then it passes",
"expected": "|bool| False == false",
"success": true
} ],
"context": "When calling asserts.is_false(false)",
"fullname": "test_when_calling_asserts_is_false",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then it passes",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When calling asserts.is_true(true)",
"fullname": "test_when_calling_asserts_is_true",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| True != false",
"context": "",
"expected": "|bool| True == false",
"success": false
} ],
"context": " intentional failure",
"fullname": "test_intentional_failure",
"passed": 0,
"success": false,
"time": 0.0,
"total": 1
} ],
"passed": 2,
"path": "res://tests/unit/boolean.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/boolean.test.gd",
"tags": [  ],
"test": ExtResource( 11 ),
"yield_time": 0.0
},
"success": false,
"time_taken": 0.0,
"total": 3
}, {
"context": "Given an Equality Assertion",
"methods": [ {
"assertions": [ {
"actual": "|int| 1 is equal to |int| 1",
"context": "Then it passes",
"expected": "|int| 1 is equal to |int| 1",
"success": true
} ],
"context": "When calling asserts.is_equal(1, 1)",
"fullname": "test_when_calling_is_equal",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 2 is greater than |int| 1",
"context": "Then it passes",
"expected": "|int| 2 is greater than |int| 1",
"success": true
} ],
"context": "When calling asserts.is_greater_than(2, 1)",
"fullname": "test_when_calling_is_greater_than",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 1 is less than |int| 2",
"context": "Then it passes",
"expected": "|int| 1 is less than |int| 2",
"success": true
} ],
"context": "When calling asserts.is_less_than(2, 1)",
"fullname": "test_when_calling_is_less_than",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 1 is equal or less than |int| 1",
"context": "Then it passes!",
"expected": "|int| 1 is equal or less than |int| 1",
"success": true
} ],
"context": "When calling asserts.is_equal_or_less_than(1, 1)",
"fullname": "test_when_calling_is_equal_or_less_than_with_equal_values",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 2 is equal or greater |int| 1",
"context": "Then it passes",
"expected": "|int| 2 is equal or greater |int| 1",
"success": true
} ],
"context": "When calling asserts.is_equal_or_greater_than(2, 1)",
"fullname": "test_when_calling_is_equal_or_greater_than",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 1 is equal or greater |int| 1",
"context": "Then it passes",
"expected": "|int| 1 is equal or greater |int| 1",
"success": true
} ],
"context": "When calling asserts.is_equal_or_greater_than(1, 1)",
"fullname": "test_when_calling_is_equal_or_greater_than_with_equal_values",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 5 is not equal to |int| 6",
"context": "Then it passes",
"expected": "|int| 5 != |int| 6",
"success": true
} ],
"context": "When callign asserts.is_not_equal(5, 6)",
"fullname": "test_when_calling_is_not_equal",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 7,
"path": "res://tests/unit/equality.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/equality.test.gd",
"tags": [  ],
"test": ExtResource( 8 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 7
}, {
"context": "Given A File Assertion",
"methods": [ {
"assertions": [ {
"actual": "res://somefile.gd does not exist",
"context": "Then it passes",
"expected": "res://somefile.gd does not exist",
"success": true
} ],
"context": "When calling asserts.file_does_not_exist when there is no file",
"fullname": "test_when_calling_file_does_not_exist_when_there_is_no_file",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "res://tests/unit/file.test.gd exists",
"context": "Then it passes",
"expected": "res://tests/unit/file.test.gd exists",
"success": true
} ],
"context": "When calling asserts.file_exists when the file is this suite",
"fullname": "test_when_calling_file_exists_when_file_is_self",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": " does not exist",
"context": "Then it passes",
"expected": " does not exist",
"success": true
} ],
"context": "When calling asserts file does not exist when path is empty",
"fullname": "test_when_calling_file_does_not_exist_when_path_is_empty",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 3,
"path": "res://tests/unit/file.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/file.test.gd",
"tags": [  ],
"test": ExtResource( 3 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 3
}, {
"context": "Given an Is Instance of class/type Assertion",
"methods": [ {
"assertions": [ {
"actual": "|Array| [] != null",
"context": "array is not null",
"expected": "|Array| [] != null",
"success": true
}, {
"actual": "[] is builtin: Array",
"context": "Then it passes",
"expected": "[] is builtin: Array",
"success": true
} ],
"context": "When calling asserts.is_Array(array: Array)",
"fullname": "test_when_calling_is_Array",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "{} is builtin: Dictionary",
"context": "Then it passes",
"expected": "{} is builtin: Dictionary",
"success": true
} ],
"context": "When calling asserts.is_Dictionary({})",
"fullname": "test_when_calling_is_Dictionary",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|Color| 0,0,0,1 != null",
"context": "color is not null",
"expected": "|Color| 0,0,0,1 != null",
"success": true
}, {
"actual": "0,0,0,1 is builtin: Color",
"context": "Then it passes",
"expected": "0,0,0,1 is builtin: Color",
"success": true
} ],
"context": "When calling asserts.is_color(color: Color)",
"fullname": "test_when_calling_is_Color",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|AABB| 0, 0, 0 - 0, 0, 0 != null",
"context": "AABB is not null",
"expected": "|AABB| 0, 0, 0 - 0, 0, 0 != null",
"success": true
}, {
"actual": "0, 0, 0 - 0, 0, 0 is builtin: AABB",
"context": "Then it passes",
"expected": "0, 0, 0 - 0, 0, 0 is builtin: AABB",
"success": true
} ],
"context": "When calling asserts.is_AABB(aabb: AABB)",
"fullname": "test_when_calling_is_AABB",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "1 is builtin: float",
"context": "Then it passes",
"expected": "1 is builtin: float",
"success": true
} ],
"context": "When calling asserts.is_float(1.0)",
"fullname": "test_when_calling_is_float",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "True is builtin: bool",
"context": "Then it passes",
"expected": "True is builtin: bool",
"success": true
} ],
"context": "When calling asserts.is_bool(true)",
"fullname": "test_when_calling_is_bool",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|Basis| ((1, 0, 0), (0, 1, 0), (0, 0, 1)) != null",
"context": "basis is not null",
"expected": "|Basis| ((1, 0, 0), (0, 1, 0), (0, 0, 1)) != null",
"success": true
}, {
"actual": "((1, 0, 0), (0, 1, 0), (0, 0, 1)) is builtin: Basis",
"context": "Then it passes",
"expected": "((1, 0, 0), (0, 1, 0), (0, 0, 1)) is builtin: Basis",
"success": true
} ],
"context": "When calling asserts.is_basis(basis: Basis",
"fullname": "test_when_calling_is_Basis",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|Vector2| (0, 0) != null",
"context": "vec2 is not null",
"expected": "|Vector2| (0, 0) != null",
"success": true
}, {
"actual": "(0, 0) is builtin: Vector2",
"context": "Then it passes",
"expected": "(0, 0) is builtin: Vector2",
"success": true
} ],
"context": "When calling asserts.is_Vector2(vec2)",
"fullname": "test_when_calling_is_Vector2",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|Rect2| (0, 0, 0, 0) != null",
"context": "rect2 is not null",
"expected": "|Rect2| (0, 0, 0, 0) != null",
"success": true
}, {
"actual": "(0, 0, 0, 0) is builtin: Rect2",
"context": "Then it passes",
"expected": "(0, 0, 0, 0) is builtin: Rect2",
"success": true
} ],
"context": "When calling asserts.is_Rect2(rect2: Rect2)",
"fullname": "test_when_calling_is_Rect2",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|NodePath| . != null",
"context": "@'Parent/Child' is not null",
"expected": "|NodePath| . != null",
"success": true
}, {
"actual": ". is builtin: NodePath",
"context": "Then it passes",
"expected": ". is builtin: NodePath",
"success": true
} ],
"context": "When calling asserts.is_NodePath(@'Parent/Child')",
"fullname": "test_when_calling_is_NodePath",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|Plane| 0, 0, 0, 0 != null",
"context": "plane is not null",
"expected": "|Plane| 0, 0, 0, 0 != null",
"success": true
}, {
"actual": "0, 0, 0, 0 is builtin: Plane",
"context": "then it passes",
"expected": "0, 0, 0, 0 is builtin: Plane",
"success": true
} ],
"context": "When calling asserts.is_Plane(plane: Plane())",
"fullname": "test_when_calling_is_Plane",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|Vector3| (0, 0, 0) != null",
"context": "vec3 is not null",
"expected": "|Vector3| (0, 0, 0) != null",
"success": true
}, {
"actual": "(0, 0, 0) is builtin: Vector3",
"context": "Then it passes",
"expected": "(0, 0, 0) is builtin: Vector3",
"success": true
} ],
"context": "When calling asserts.is_Vector3(vec3: Vector3",
"fullname": "test_when_calling_is_Vector3",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|PoolStringArray| [] != null",
"context": "strs is not null",
"expected": "|PoolStringArray| [] != null",
"success": true
}, {
"actual": "[] is builtin: PoolStringArray",
"context": "Then it passes",
"expected": "[] is builtin: PoolStringArray",
"success": true
} ],
"context": "When calling is asserts.is_PoolStringArray(strs: PoolStringArray)",
"fullname": "test_when_calling_is_PoolStringArray",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|Transform2D| ((1, 0), (0, 1), (0, 0)) != null",
"context": "transform2D is not null",
"expected": "|Transform2D| ((1, 0), (0, 1), (0, 0)) != null",
"success": true
}, {
"actual": "((1, 0), (0, 1), (0, 0)) is builtin: Transform2D",
"context": "Then it passes",
"expected": "((1, 0), (0, 1), (0, 0)) is builtin: Transform2D",
"success": true
} ],
"context": "When calling asserts.is_Transform(transform2D: Transform2D)",
"fullname": "test_when_calling_is_Transform2D",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|Quat| (0, 0, 0, 1) != null",
"context": "quat is not null",
"expected": "|Quat| (0, 0, 0, 1) != null",
"success": true
}, {
"actual": "(0, 0, 0, 1) is builtin: Quat",
"context": "Then it passes",
"expected": "(0, 0, 0, 1) is builtin: Quat",
"success": true
} ],
"context": "When calling asserts.is_Quat(quat: Quat)",
"fullname": "test_when_calling_is_Quat",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "1 is builtin: int",
"context": "Then it passes",
"expected": "1 is builtin: int",
"success": true
} ],
"context": "When callign asserts.is_int(1)",
"fullname": "test_when_calling_is_int",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|PoolVector3Array| [] != null",
"context": "vec3s is not null",
"expected": "|PoolVector3Array| [] != null",
"success": true
}, {
"actual": "[] is builtin: PoolVector3Array",
"context": "Then it passes",
"expected": "[] is builtin: PoolVector3Array",
"success": true
} ],
"context": "When calling is asserts.is_PoolVector3Array(vec3s: PoolVector3Array)",
"fullname": "test_when_calling_is_PoolVector3Array",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|RID| [RID] != null",
"context": "rid is not null",
"expected": "|RID| [RID] != null",
"success": true
}, {
"actual": "[RID] is builtin: RID",
"context": "Then it passes",
"expected": "[RID] is builtin: RID",
"success": true
} ],
"context": "When calling asserts.is_RID(rid: RID)",
"fullname": "test_when_calling_is_RID",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|String|  != null",
"context": "strs is not null",
"expected": "|String|  != null",
"success": true
}, {
"actual": " is builtin: String",
"context": "Then it passes",
"expected": " is builtin: String",
"success": true
} ],
"context": "When calling asserts.is_string(strs: String)",
"fullname": "test_when_calling_is_string",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|PoolColorArray| [PoolColorArray] != null",
"context": "colors is not null",
"expected": "|PoolColorArray| [PoolColorArray] != null",
"success": true
}, {
"actual": "[PoolColorArray] is builtin: PoolColorArray",
"context": "Then it passes",
"expected": "[PoolColorArray] is builtin: PoolColorArray",
"success": true
} ],
"context": "When calling asserts.is_PoolColorArray(colors: PoolColorArray)",
"fullname": "test_when_calling_is_PoolColorArray",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|Object| [Node:1734] != null",
"context": "node is not null",
"expected": "|Object| [Node:1734] != null",
"success": true
}, {
"actual": "[Node:1734] is builtin: Object",
"context": "An instance of node is an Object",
"expected": "[Node:1734] is builtin: Object",
"success": true
} ],
"context": "When calling is asserts.object(node: Node)",
"fullname": "test_when_calling_is_object",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|PoolRealArray| [] != null",
"context": "reals is not null",
"expected": "|PoolRealArray| [] != null",
"success": true
}, {
"actual": "[] is builtin: PoolRealArray",
"context": "Then it passes",
"expected": "[] is builtin: PoolRealArray",
"success": true
} ],
"context": "When calling is asserts.is_PoolRealArray(reals: PoolRealArray)",
"fullname": "test_when_calling_is_PoolRealArray",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|Transform| 1, 0, 0, 0, 1, 0, 0, 0, 1 - 0, 0, 0 != null",
"context": "transform is not null",
"expected": "|Transform| 1, 0, 0, 0, 1, 0, 0, 0, 1 - 0, 0, 0 != null",
"success": true
}, {
"actual": "1, 0, 0, 0, 1, 0, 0, 0, 1 - 0, 0, 0 is builtin: Transform",
"context": "Then it passes",
"expected": "1, 0, 0, 0, 1, 0, 0, 0, 1 - 0, 0, 0 is builtin: Transform",
"success": true
} ],
"context": "When calling asserts.is_Transform(transform: Transform)",
"fullname": "test_when_calling_is_Transform",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|PoolByteArray| [PoolByteArray] != null",
"context": "bytes is not null",
"expected": "|PoolByteArray| [PoolByteArray] != null",
"success": true
}, {
"actual": "[PoolByteArray] is builtin: PoolByteArray",
"context": "Then it passes",
"expected": "[PoolByteArray] is builtin: PoolByteArray",
"success": true
} ],
"context": "When calling asserts.is_PoolByteArray(bytes: PoolByteArray)",
"fullname": "test_when_calling_is_PoolByteArray",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|PoolIntArray| [] != null",
"context": "ints is not null",
"expected": "|PoolIntArray| [] != null",
"success": true
}, {
"actual": "[] is builtin: PoolIntArray",
"context": "Then it passes",
"expected": "[] is builtin: PoolIntArray",
"success": true
} ],
"context": "When calling asserts.is_PoolIntArray(ints: PoolIntArray)",
"fullname": "test_when_calling_is_PoolIntArray",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|PoolVector2Array| [] != null",
"context": "vec2s is not null",
"expected": "|PoolVector2Array| [] != null",
"success": true
}, {
"actual": "[] is builtin: PoolVector2Array",
"context": "Then it passes",
"expected": "[] is builtin: PoolVector2Array",
"success": true
} ],
"context": "When calling is asserts.is_PoolVector2Array(vec2s: PoolVector2Array)",
"fullname": "test_when_calling_is_PoolVector2Array",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
} ],
"passed": 26,
"path": "res://tests/unit/is_instance.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/is_instance.test.gd",
"tags": [  ],
"test": ExtResource( 6 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 26
}, {
"context": "Given an Is Not Instance of class/type Assertion",
"methods": [ {
"assertions": [ {
"actual": "Null is not builtin: AABB",
"context": "Then it passes",
"expected": "Null is not builtin: AABB",
"success": true
} ],
"context": "when calling asserts.is_not_AABB(null)",
"fullname": "test_when_calling_is_not_AABB",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Basis",
"context": "Then it passes",
"expected": "Null is not builtin: Basis",
"success": true
} ],
"context": "when calling asserts.is_not_Basis(null)",
"fullname": "test_when_calling_is_not_Basis",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: bool",
"context": "Then it passes",
"expected": "Null is not builtin: bool",
"success": true
} ],
"context": "when calling asserts.is_not_bool(null)",
"fullname": "test_when_calling_is_not_bool",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: float",
"context": "Then it passes",
"expected": "Null is not builtin: float",
"success": true
} ],
"context": "when calling asserts.is_not_float(null)",
"fullname": "test_when_calling_is_not_float",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: int",
"context": "Then it passes",
"expected": "Null is not builtin: int",
"success": true
} ],
"context": "when calling asserts.is_not_int(null)",
"fullname": "test_when_calling_is_not_int",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: NodePath",
"context": "Then it passes",
"expected": "Null is not builtin: NodePath",
"success": true
} ],
"context": "when calling asserts.is_not_NodePath(null)",
"fullname": "test_when_calling_is_not_NodePath",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Color",
"context": "Then it passes",
"expected": "Null is not builtin: Color",
"success": true
} ],
"context": "when calling asserts.is_not_Color(null)",
"fullname": "test_when_calling_is_not_Color",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Dictionary",
"context": "Then it passes",
"expected": "Null is not builtin: Dictionary",
"success": true
} ],
"context": "when calling asserts.is_not_Dictionary(null)",
"fullname": "test_when_calling_is_not_Dictionary",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Array",
"context": "Then it passes",
"expected": "Null is not builtin: Array",
"success": true
} ],
"context": "when calling asserts.is_not_Array(null)",
"fullname": "test_when_calling_is_not_Array",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: PoolColorArray",
"context": "Then it passes",
"expected": "Null is not builtin: PoolColorArray",
"success": true
} ],
"context": "when calling asserts.is_not_PoolColorArray(null)",
"fullname": "test_when_calling_is_not_PoolColorArray",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: String",
"context": "Then it passes",
"expected": "Null is not builtin: String",
"success": true
} ],
"context": "when calling asserts.is_not_String(null)",
"fullname": "test_when_calling_is_not_String",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Transform",
"context": "Then it passes",
"expected": "Null is not builtin: Transform",
"success": true
} ],
"context": "when calling asserts.is_not_Transform(null)",
"fullname": "test_when_calling_is_not_Transform",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Plane",
"context": "Then it passes",
"expected": "Null is not builtin: Plane",
"success": true
} ],
"context": "when calling asserts.is_not_Plane(null)",
"fullname": "test_when_calling_is_not_Plane",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Object",
"context": "Then it passes",
"expected": "Null is not builtin: Object",
"success": true
} ],
"context": "when calling asserts.is_not_Object(null)",
"fullname": "test_when_calling_is_not_Object",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: PoolStringArray",
"context": "Then it passes",
"expected": "Null is not builtin: PoolStringArray",
"success": true
} ],
"context": "when calling asserts.is_not_PoolStringArray(null)",
"fullname": "test_when_calling_is_not_PoolStringArray",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: PoolRealArray",
"context": "Then it passes",
"expected": "Null is not builtin: PoolRealArray",
"success": true
} ],
"context": "when calling asserts.is_not_PoolRealArray(null)",
"fullname": "test_when_calling_is_not_PoolRealArray",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Transform2D",
"context": "Then it passes",
"expected": "Null is not builtin: Transform2D",
"success": true
} ],
"context": "when calling asserts.is_not_Transform2D(null)",
"fullname": "test_when_calling_is_not_Transform2D",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: PoolByteArray",
"context": "Then it passes",
"expected": "Null is not builtin: PoolByteArray",
"success": true
} ],
"context": "when calling asserts.is_not_PoolByteArray(null)",
"fullname": "test_when_calling_is_not_PoolByteArray",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: PoolIntArray",
"context": "Then it passes",
"expected": "Null is not builtin: PoolIntArray",
"success": true
} ],
"context": "when calling asserts.is_not_PoolIntArray(null)",
"fullname": "test_when_calling_is_not_PoolIntArray",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Rect2",
"context": "Then it passes",
"expected": "Null is not builtin: Rect2",
"success": true
} ],
"context": "when calling asserts.is_not_Rect2(null)",
"fullname": "test_when_calling_is_not_Rect2",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Vector3",
"context": "Then it passes",
"expected": "Null is not builtin: Vector3",
"success": true
} ],
"context": "when calling asserts.is_not_Vector3(null)",
"fullname": "test_when_calling_is_not_Vector3",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: RID",
"context": "Then it passes",
"expected": "Null is not builtin: RID",
"success": true
} ],
"context": "when calling asserts.is_not_RID(null)",
"fullname": "test_when_calling_is_not_RID",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: PoolVector2Array",
"context": "Then it passes",
"expected": "Null is not builtin: PoolVector2Array",
"success": true
} ],
"context": "when calling asserts.is_not_PoolVector2Array(null)",
"fullname": "test_when_calling_is_not_PoolVector2Array",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Quat",
"context": "Then it passes",
"expected": "Null is not builtin: Quat",
"success": true
} ],
"context": "when calling asserts.is_not_Quat(null)",
"fullname": "test_when_calling_is_not_Quat",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: PoolVector3Array",
"context": "Then it passes",
"expected": "Null is not builtin: PoolVector3Array",
"success": true
} ],
"context": "when calling asserts.is_not_PoolVector3Array(null)",
"fullname": "test_when_calling_is_not_PoolVector3Array",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Vector2",
"context": "Then it passes",
"expected": "Null is not builtin: Vector2",
"success": true
} ],
"context": "when calling asserts.is_not_Vector2(null)",
"fullname": "test_when_calling_is_not_Vector2",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 26,
"path": "res://tests/unit/is_not_instance.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/is_not_instance.test.gd",
"tags": [  ],
"test": ExtResource( 2 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 26
}, {
"context": "Given a Null Assertion",
"methods": [ {
"assertions": [ {
"actual": "|null| Null == null",
"context": "Then it passes",
"expected": "|null| Null == null",
"success": true
} ],
"context": "When calling asserts.is_null(null)",
"fullname": "test_when_calling_null_is_null",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|Object| [Node:1780] != null",
"context": "Then it passes",
"expected": "|Object| [Node:1780] != null",
"success": true
} ],
"context": "When calling Node is not null",
"fullname": "test_when_calling_node_is_not_null",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|Object| [Deleted Object] == null",
"context": "A Freed Node is null in Engine 3.2.2 or greater",
"expected": "|Object| [Deleted Object] == null",
"success": true
} ],
"context": "When calling freed object is null",
"fullname": "test_when_calling_freed_object_is_not_null",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 3,
"path": "res://tests/unit/null.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/null.test.gd",
"tags": [  ],
"test": ExtResource( 12 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 3
}, {
"context": "Given an Object Assertion",
"methods": [ {
"assertions": [ {
"actual": "[Node:1787] is queued for deletion",
"context": "Then it passes",
"expected": "[Node:1787] is queued for deletion",
"success": true
} ],
"context": "When calling asserts.object_is_queued for deletion after calling queue_free",
"fullname": "test_when_calling_obj_is_queued_for_deletion_after_calling_queue_free",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:1784].builtin_dummy is connected to [Node:1784].title",
"context": "Then it passes",
"expected": "[Node:1784].builtin_dummy is connected to [Node:1784].title",
"success": true
} ],
"context": "When calling asserts object is connected with a valid connection",
"fullname": "test_when_calling_obj_is_connected_with_a_real_connection",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:1790] is not blocking signals",
"context": "Then it passes",
"expected": "[Node:1790] is not blocking signals",
"success": true
} ],
"context": "When calling is not blocking signals while not blocking signals",
"fullname": "test_is_not_blocking_signals",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:1784] does not have meta: confusing",
"context": "Then it passes",
"expected": "[Node:1784] does not have meta: confusing",
"success": true
} ],
"context": "When calling asserts.object_has_meta with real key but null val",
"fullname": "test_when_calling_does_not_have_meta_real_key_null_value_pair",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:1793] is not freed",
"context": "Then it passes",
"expected": "[Node:1793] is not freed",
"success": true
} ],
"context": "When calling asserts.is_not_freed(unfreed_object)",
"fullname": "test_when_calling_unfreed_object_is_not_freed",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:1784] has user signal: dummy_signal",
"context": "Then it passes",
"expected": "[Node:1784] has user signal: dummy_signal",
"success": true
} ],
"context": "When calling obj_has_user_signal after adding a signal",
"fullname": "test_when_calling_has_user_signal_after_adding_a_signal",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:1784] has meta: dummy",
"context": "Then it passes",
"expected": "[Node:1784] has meta: dummy",
"success": true
}, {
"actual": "[Node:1784] has meta: dummy",
"context": "Then it passes",
"expected": "[Node:1784] has meta: dummy",
"success": true
} ],
"context": "When calling asserts.object_has_meta() after adding metadata",
"fullname": "test_when_calling_has_meta_after_adding_metadata",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "Null is freed from memory",
"context": "Then it passes",
"expected": "Null is freed from memory",
"success": true
} ],
"context": "When calling asserts.is_freed(freed_object",
"fullname": "test_when_calling_freed_object_is_freed",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:1784] does not have user signal: builtin_dummy",
"context": "Then it passes",
"expected": "[Node:1784] does not have user signal: builtin_dummy",
"success": true
} ],
"context": "When calling does not have user signal with class signal",
"fullname": "test_when_calling_does_not_have_user_signal_with_class_signal_constant",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:1801] is not queued for deletion",
"context": "Then it passes",
"expected": "[Node:1801] is not queued for deletion",
"success": true
} ],
"context": "When calling asserts.object_is_not_for_queued_deletion after not calling queue free()",
"fullname": "test_when_calling_obj_is_not_for_queued_deletion_after_not_calling_queue_free",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:1784].builtin_dummy is not connected to [Node:1784].title",
"context": "Then it passes",
"expected": "[Node:1784].builtin_dummy is not connected to [Node:1784].title",
"success": true
} ],
"context": "When calling asserts object is not connected with an invalid connection",
"fullname": "test_when_calling_obj_is_not_connected_with_an_invalid_connection",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:1804] is blocking signals",
"context": "Then it passes",
"expected": "[Node:1804] is blocking signals",
"success": true
} ],
"context": "When calling is blocking signals while blocking signals",
"fullname": "test_is_blocking_signals",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:1784] has method: title",
"context": "Then it passes",
"expected": "[Node:1784] has method: title",
"success": true
} ],
"context": "When calling has_method('title')",
"fullname": "test_when_calling_has_method_title",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:1784] does not have user signal: false_signal",
"context": "Then it passes",
"expected": "[Node:1784] does not have user signal: false_signal",
"success": true
} ],
"context": "When calling obj_does_not_have_user_signal with fake signal",
"fullname": "test_when_calling_does_not_have_user_signal",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:1784] does not have meta: bad_meta",
"context": "Then it passes",
"expected": "[Node:1784] does not have meta: bad_meta",
"success": true
} ],
"context": "When calling asserts.object_does_not_have_meta()",
"fullname": "test_when_calling_does_not_have_meta",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 15,
"path": "res://tests/unit/object.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/object.test.gd",
"tags": [  ],
"test": ExtResource( 7 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 15
}, {
"context": "Given the Addition Operator",
"methods": [ {
"assertions": [ {
"actual": "|int| 4 is equal to |int| 4",
"context": "",
"expected": "|int| 4 is equal to |int| 4",
"success": true
} ],
"context": "When we add 2 to 2 we get 4",
"fullname": "test_add",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 8 is equal to |int| 8",
"context": "",
"expected": "|int| 8 is equal to |int| 8",
"success": true
} ],
"context": "When we add 5 to 3 we get 8",
"fullname": "test_add",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 13 is equal to |int| 13",
"context": "",
"expected": "|int| 13 is equal to |int| 13",
"success": true
} ],
"context": "When we add 7 to 6 we get 13",
"fullname": "test_add",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 0 is equal to |int| 0",
"context": "",
"expected": "|int| 0 is equal to |int| 0",
"success": true
} ],
"context": "When we subtract 2 from 2 we get 0",
"fullname": "test_subtract",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 2 is equal to |int| 2",
"context": "",
"expected": "|int| 2 is equal to |int| 2",
"success": true
} ],
"context": "When we subtract 5 from 3 we get 2",
"fullname": "test_subtract",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 1 is equal to |int| 1",
"context": "",
"expected": "|int| 1 is equal to |int| 1",
"success": true
} ],
"context": "When we subtract 7 from 6 we get 1",
"fullname": "test_subtract",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 6,
"path": "res://tests/unit/parameters.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/parameters.test.gd",
"tags": [  ],
"test": ExtResource( 16 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 6
}, {
"context": "Given A Range Assertion",
"methods": [ {
"assertions": [ {
"actual": "0 is in range(0, 10)",
"context": "Then it passes",
"expected": "0 is in range(0, 10)",
"success": true
} ],
"context": "When calling is (0) in range(0, 10)",
"fullname": "test_when_calling_is_in_range",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "10 is not in range(0, 10)",
"context": "Then it passes",
"expected": "10 is not in range(0, 10)",
"success": true
} ],
"context": "When calling is (10) not in range (in range(0, 10)",
"fullname": "test_when_calling_is_not_in_range",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 2,
"path": "res://tests/unit/range.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/range.test.gd",
"tags": [  ],
"test": ExtResource( 15 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 2
}, {
"context": "Given a String Assertion",
"methods": [ {
"assertions": [ {
"actual": "lorem impsum contains em im",
"context": "Then it passes",
"expected": "lorem impsum contains em im",
"success": true
} ],
"context": "When calling asserts.string_contains('em im', 'lorem impsum')",
"fullname": "test_when_calling_string_contains",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "impsum does not end with lorem",
"context": "Then it passes",
"expected": "impsum does not end with lorem",
"success": true
} ],
"context": "When calling asserts.string_does_not_end_with('lorem', 'impsum')",
"fullname": "test_when_calling_string_does_not_end_with",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "lorem impsum begins with lorem",
"context": "Then it passes",
"expected": "lorem impsum begins with lorem",
"success": true
} ],
"context": "When calling asserts.string_begins_with('lorem', 'lorem impsum')",
"fullname": "test_when_calling_string_begins_with",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "lorem impsum ends with impsum",
"context": "Then it passes",
"expected": "lorem impsum ends with impsum",
"success": true
} ],
"context": "When calling asserts.string_ends_with('impsum', 'lorem impsum')",
"fullname": "test_when_calling_string_ends_with",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "impsum does not begin with bleh lorem",
"context": "Then it passes",
"expected": "impsum does not begin with bleh lorem",
"success": true
} ],
"context": "When calling asserts.string_does_not_begin_with('lorem', 'impsum')",
"fullname": "test_when_calling_string_does_not_begin_with",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "impsum does not contain beem im",
"context": "Then it passes",
"expected": "impsum does not contain beem im",
"success": true
} ],
"context": "When calling asserts.string_does_not_contain('em im', 'impsum')",
"fullname": "test_when_calling_string_does_not_contain",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 6,
"path": "res://tests/unit/string.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/string.test.gd",
"tags": [  ],
"test": ExtResource( 9 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 6
}, {
"context": "Dummy Passing Test",
"methods": [ {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Passing!",
"expected": "|bool| True == true",
"success": true
} ],
"context": "This method passes",
"fullname": "test_this_method_passes",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 1,
"path": "res://tests/unit/suite.test.gd.DummyOne",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/suite.test.gd.DummyOne",
"tags": [  ],
"test": SubResource( 33 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 1
}, {
"context": "Dummy Test 2",
"methods": [ {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Passing!",
"expected": "|bool| True == true",
"success": true
} ],
"context": "This method passes",
"fullname": "test_this_method_passes",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 1,
"path": "res://tests/unit/suite.test.gd.DummyTwo",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/suite.test.gd.DummyTwo",
"tags": [  ],
"test": SubResource( 34 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 1
}, {
"context": "Given a Test Script",
"methods": [ {
"assertions": [ {
"actual": "|bool| True == true",
"context": "",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|int| 2 is equal to |int| 2",
"context": "",
"expected": "|int| 2 is equal to |int| 2",
"success": true
} ],
"context": " when we omit context we can see expected and got under method",
"fullname": "test_when_we_omit_context_we_can_see_expected_and_got_under_method",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|int| 10 is greater than |int| 1",
"context": "We get an array of multiple values back",
"expected": "|int| 10 is greater than |int| 1",
"success": true
}, {
"actual": "|int| 0 is not equal to |int| 9",
"context": "With different values",
"expected": "|int| 0 != |int| 9",
"success": true
}, {
"actual": "|int| 10 is greater than |int| 1",
"context": "And we can track multiple properties",
"expected": "|int| 10 is greater than |int| 1",
"success": true
} ],
"context": "When we record properties",
"fullname": "test_we_can_record_properties",
"passed": 3,
"success": true,
"time": 0.0,
"total": 3
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "if the test didn't break this works",
"expected": "|bool| True == true",
"success": true
} ],
"context": " we can omit describe",
"fullname": "test_we_can_omit_describe",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 3,
"path": "res://tests/unit/test.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/test.test.gd",
"tags": [  ],
"test": ExtResource( 19 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 3
}, {
"context": "Given a Signal Watcher",
"methods": [ {
"assertions": [ {
"actual": "Signal: example was not emitted from [Node:1851]",
"context": "Then it does not capture the non-emitted signal",
"expected": "Signal: example was not emitted from [Node:1851]",
"success": true
} ],
"context": "When we watch and do not emit a signal",
"fullname": "test_When_we_watch_and_do_not_emit_a_signal",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Signal: example was emitted from [Node:1851] with arguments: [1, 20, 5]",
"context": "Then it captures any arguments that where passed when the signal was emitted",
"expected": "Signal: example was emitted from [Node:1851] with arguments: [1, 20, 5]",
"success": true
} ],
"context": "When we watch a signal from an object with no bound variables",
"fullname": "test_When_we_watch_a_signal_from_an_object_with_no_bound_variables",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "signal: multiple was emitted from [Node:1851] 2",
"context": "Then we can track how many times we emitted it",
"expected": "signal: multiple was emitted from [Node:1851] 2",
"success": true
} ],
"context": "When we watch and signal and emit it multiple times",
"fullname": "test_When_we_watch_a_signal_and_emit_it_multiple_times",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "signal: example was emitted from [Node:1851]",
"context": "Then it captures the emitted signal",
"expected": "signal: example was emitted from [Node:1851]",
"success": true
} ],
"context": "When we watch and emit a signal",
"fullname": "test_When_we_watch_and_emit_a_signal",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 4,
"path": "res://tests/unit/watcher.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/watcher.test.gd",
"tags": [  ],
"test": ExtResource( 17 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 4
}, {
"context": "Given a Yield",
"methods": [ {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then the yielder is paused",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then the timeout signal of the yielder is disconnected",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then our signal to the yielder is disconnected",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When the yielder heres our signal",
"fullname": "test_When_the_yielder_hears_our_signal",
"passed": 3,
"success": true,
"time": 0.0,
"total": 3
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then yielder is not active",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When asserting against a test",
"fullname": "test_Yielder_is_not_active_when_asserting",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then we set var c to true",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then we set var d to true",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we yield in pre thrice",
"fullname": "test_When_we_yield_in_pre",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then the yielder is unpaused",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then the timeout signal of the yielder is connected",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then our signal is connected to the yielder",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we call until signal",
"fullname": "test_When_we_call_until_signal",
"passed": 3,
"success": true,
"time": 0.0,
"total": 3
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then we set var a to true",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then we set var b to true",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we yield in start twice",
"fullname": "test_When_we_yield_in_start",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then the timeout signal is disconnected",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then the signal-signal is disconnected",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When it is finished",
"fullname": "test_When_yielder_is_finished_signals_are_disconnected",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "[100, Null, Null, Null, Null, Null] is builtin: Array",
"context": "Then we get an array",
"expected": "[100, Null, Null, Null, Null, Null] is builtin: Array",
"success": true
}, {
"actual": "|int| 6 is equal to |int| 6",
"context": "Of size 6",
"expected": "|int| 6 is equal to |int| 6",
"success": true
}, {
"actual": "|int| 100 is equal to |int| 100",
"context": "Where element 0 is 100",
"expected": "|int| 100 is equal to |int| 100",
"success": true
} ],
"context": "When yield(self.yield_value()) returns",
"fullname": "test_When_we_yield_we_get_the_return_value",
"passed": 3,
"success": true,
"time": 0.0,
"total": 3
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then we set var e to true",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then we set var f to true",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we yield twice in execute",
"fullname": "test_When_we_yield_in_execute",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then the yielder is paused",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When a signal being yielded on is emitted",
"fullname": "test_When_a_signal_being_yielded_on_is_emitted_the_yielder_is_stopped",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then the yielder is paused",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "The timeout signal of the yielder is not connected",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When the yielder times out on until_timeout(0.1)",
"fullname": "test_When_the_yielder_times_out",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then yielder is unpaused",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "The timeout signal of the yielder is connected",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we call until_timeout (with 1.0)",
"fullname": "test_When_we_call_until_timeout",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
} ],
"passed": 11,
"path": "res://tests/unit/yield.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/yield.test.gd",
"tags": [  ],
"test": ExtResource( 18 ),
"yield_time": 1.9
},
"success": true,
"time_taken": 0.0,
"total": 11
} ],
1611529554: [ {
"context": "Given a Boolean Assertion",
"methods": [ {
"assertions": [ {
"actual": "|bool| False == false",
"context": "Then it passes",
"expected": "|bool| False == false",
"success": true
} ],
"context": "When calling asserts.is_false(false)",
"fullname": "test_when_calling_asserts_is_false",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| True != false",
"context": "",
"expected": "|bool| True == false",
"success": false
} ],
"context": " intentional failure",
"fullname": "test_intentional_failure",
"passed": 0,
"success": false,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then it passes",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When calling asserts.is_true(true)",
"fullname": "test_when_calling_asserts_is_true",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 2,
"path": "res://tests/unit/boolean.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/boolean.test.gd",
"tags": [  ],
"test": ExtResource( 11 ),
"yield_time": 0.0
},
"success": false,
"time_taken": 0.0,
"total": 3
} ],
1611529609: [ {
"context": "Given a Boolean Assertion",
"methods": [ {
"assertions": [ {
"actual": "|bool| False == false",
"context": "Then it passes",
"expected": "|bool| False == false",
"success": true
} ],
"context": "When calling asserts.is_false(false)",
"fullname": "test_when_calling_asserts_is_false",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then it passes",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When calling asserts.is_true(true)",
"fullname": "test_when_calling_asserts_is_true",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| True != false",
"context": "",
"expected": "|bool| True == false",
"success": false
} ],
"context": " intentional failure",
"fullname": "test_intentional_failure",
"passed": 0,
"success": false,
"time": 0.0,
"total": 1
} ],
"passed": 2,
"path": "res://tests/unit/boolean.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/boolean.test.gd",
"tags": [  ],
"test": ExtResource( 11 ),
"yield_time": 0.0
},
"success": false,
"time_taken": 0.0,
"total": 3
} ],
1611529619: [  ],
1611529654: [ {
"context": "Given a Boolean Assertion",
"methods": [ {
"assertions": [ {
"actual": "|bool| False == false",
"context": "Then it passes",
"expected": "|bool| False == false",
"success": true
} ],
"context": "When calling asserts.is_false(false)",
"fullname": "test_when_calling_asserts_is_false",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| True != false",
"context": "",
"expected": "|bool| True == false",
"success": false
} ],
"context": " intentional failure",
"fullname": "test_intentional_failure",
"passed": 0,
"success": false,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then it passes",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When calling asserts.is_true(true)",
"fullname": "test_when_calling_asserts_is_true",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 2,
"path": "res://tests/unit/boolean.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/boolean.test.gd",
"tags": [  ],
"test": ExtResource( 11 ),
"yield_time": 0.0
},
"success": false,
"time_taken": 0.0,
"total": 3
} ],
1611529719: [ {
"context": "Given a Boolean Assertion",
"methods": [ {
"assertions": [ {
"actual": "|bool| True != false",
"context": "",
"expected": "|bool| True == false",
"success": false
} ],
"context": " intentional failure",
"fullname": "test_intentional_failure",
"passed": 0,
"success": false,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| False == false",
"context": "Then it passes",
"expected": "|bool| False == false",
"success": true
} ],
"context": "When calling asserts.is_false(false)",
"fullname": "test_when_calling_asserts_is_false",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then it passes",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When calling asserts.is_true(true)",
"fullname": "test_when_calling_asserts_is_true",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 2,
"path": "res://tests/unit/boolean.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/boolean.test.gd",
"tags": [  ],
"test": ExtResource( 11 ),
"yield_time": 0.0
},
"success": false,
"time_taken": 0.0,
"total": 3
} ],
1611530494: [  ],
1611530618: [ {
"context": "Given a Boolean Assertion",
"methods": [ {
"assertions": [ {
"actual": "|bool| True != false",
"context": "",
"expected": "|bool| True == false",
"success": false
} ],
"context": " intentional failure",
"fullname": "test_intentional_failure",
"passed": 0,
"success": false,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| False == false",
"context": "Then it passes",
"expected": "|bool| False == false",
"success": true
} ],
"context": "When calling asserts.is_false(false)",
"fullname": "test_when_calling_asserts_is_false",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then it passes",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When calling asserts.is_true(true)",
"fullname": "test_when_calling_asserts_is_true",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 2,
"path": "res://tests/unit/boolean.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/boolean.test.gd",
"tags": [  ],
"test": ExtResource( 11 ),
"yield_time": 0.0
},
"success": false,
"time_taken": 0.0,
"total": 3
} ],
1611530784: [ {
"context": "Given a Boolean Assertion",
"methods": [ {
"assertions": [ {
"actual": "|bool| False == false",
"context": "Then it passes",
"expected": "|bool| False == false",
"success": true
} ],
"context": "When calling asserts.is_false(false)",
"fullname": "test_when_calling_asserts_is_false",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| True != false",
"context": "",
"expected": "|bool| True == false",
"success": false
} ],
"context": " intentional failure",
"fullname": "test_intentional_failure",
"passed": 0,
"success": false,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then it passes",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When calling asserts.is_true(true)",
"fullname": "test_when_calling_asserts_is_true",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 2,
"path": "res://tests/unit/boolean.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/boolean.test.gd",
"tags": [  ],
"test": ExtResource( 11 ),
"yield_time": 0.0
},
"success": false,
"time_taken": 0.0,
"total": 3
} ],
1611530797: [  ],
1611530851: [ {
"context": "Given a Boolean Assertion",
"methods": [ {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then it passes",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When calling asserts.is_true(true)",
"fullname": "test_when_calling_asserts_is_true",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| False == false",
"context": "Then it passes",
"expected": "|bool| False == false",
"success": true
} ],
"context": "When calling asserts.is_false(false)",
"fullname": "test_when_calling_asserts_is_false",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| True != false",
"context": "",
"expected": "|bool| True == false",
"success": false
} ],
"context": " intentional failure",
"fullname": "test_intentional_failure",
"passed": 0,
"success": false,
"time": 0.0,
"total": 1
} ],
"passed": 2,
"path": "res://tests/unit/boolean.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/boolean.test.gd",
"tags": [  ],
"test": ExtResource( 11 ),
"yield_time": 0.0
},
"success": false,
"time_taken": 0.0,
"total": 3
} ],
1611530962: [ {
"context": "Given a Boolean Assertion",
"methods": [ {
"assertions": [ {
"actual": "|bool| True != false",
"context": "",
"expected": "|bool| True == false",
"success": false
} ],
"context": " intentional failure",
"fullname": "test_intentional_failure",
"passed": 0,
"success": false,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| False == false",
"context": "Then it passes",
"expected": "|bool| False == false",
"success": true
} ],
"context": "When calling asserts.is_false(false)",
"fullname": "test_when_calling_asserts_is_false",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then it passes",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When calling asserts.is_true(true)",
"fullname": "test_when_calling_asserts_is_true",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 2,
"path": "res://tests/unit/boolean.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/boolean.test.gd",
"tags": [  ],
"test": ExtResource( 11 ),
"yield_time": 0.0
},
"success": false,
"time_taken": 0.0,
"total": 3
} ],
1611531021: [  ],
1611531093: [  ],
1611531199: [  ],
1611531234: [ {
"context": "Given a Boolean Assertion",
"methods": [ {
"assertions": [ {
"actual": "|bool| True != false",
"context": "",
"expected": "|bool| True == false",
"success": false
} ],
"context": " intentional failure",
"fullname": "test_intentional_failure",
"passed": 0,
"success": false,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then it passes",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When calling asserts.is_true(true)",
"fullname": "test_when_calling_asserts_is_true",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| False == false",
"context": "Then it passes",
"expected": "|bool| False == false",
"success": true
} ],
"context": "When calling asserts.is_false(false)",
"fullname": "test_when_calling_asserts_is_false",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 2,
"path": "res://tests/unit/boolean.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/boolean.test.gd",
"tags": [  ],
"test": ExtResource( 11 ),
"yield_time": 0.0
},
"success": false,
"time_taken": 0.0,
"total": 3
} ],
1611531500: [ {
"context": "Given a Boolean Assertion",
"methods": [ {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then it passes",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When calling asserts.is_true(true)",
"fullname": "test_when_calling_asserts_is_true",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| True != false",
"context": "",
"expected": "|bool| True == false",
"success": false
} ],
"context": " intentional failure",
"fullname": "test_intentional_failure",
"passed": 0,
"success": false,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| False == false",
"context": "Then it passes",
"expected": "|bool| False == false",
"success": true
} ],
"context": "When calling asserts.is_false(false)",
"fullname": "test_when_calling_asserts_is_false",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 2,
"path": "res://tests/unit/boolean.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/boolean.test.gd",
"tags": [ "Windows", "Linux" ],
"test": ExtResource( 11 ),
"yield_time": 0.0
},
"success": false,
"time_taken": 0.0,
"total": 3
} ],
1611531539: [ {
"context": "Given a Boolean Assertion",
"methods": [ {
"assertions": [ {
"actual": "|bool| True != false",
"context": "",
"expected": "|bool| True == false",
"success": false
} ],
"context": " intentional failure",
"fullname": "test_intentional_failure",
"passed": 0,
"success": false,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| False == false",
"context": "Then it passes",
"expected": "|bool| False == false",
"success": true
} ],
"context": "When calling asserts.is_false(false)",
"fullname": "test_when_calling_asserts_is_false",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then it passes",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When calling asserts.is_true(true)",
"fullname": "test_when_calling_asserts_is_true",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 2,
"path": "res://tests/unit/boolean.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/boolean.test.gd",
"tags": [ "Windows", "Linux" ],
"test": ExtResource( 11 ),
"yield_time": 0.0
},
"success": false,
"time_taken": 0.0,
"total": 3
} ],
1611531568: [ {
"context": "Given a Boolean Assertion",
"methods": [ {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then it passes",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When calling asserts.is_true(true)",
"fullname": "test_when_calling_asserts_is_true",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| True != false",
"context": "",
"expected": "|bool| True == false",
"success": false
} ],
"context": " intentional failure",
"fullname": "test_intentional_failure",
"passed": 0,
"success": false,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| False == false",
"context": "Then it passes",
"expected": "|bool| False == false",
"success": true
} ],
"context": "When calling asserts.is_false(false)",
"fullname": "test_when_calling_asserts_is_false",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 2,
"path": "res://tests/unit/boolean.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/boolean.test.gd",
"tags": [ "Windows", "Linux" ],
"test": ExtResource( 11 ),
"yield_time": 0.0
},
"success": false,
"time_taken": 0.0,
"total": 3
} ],
1611531621: [ {
"context": "Given a Boolean Assertion",
"methods": [ {
"assertions": [ {
"actual": "|bool| True != false",
"context": "",
"expected": "|bool| True == false",
"success": false
} ],
"context": " intentional failure",
"fullname": "test_intentional_failure",
"passed": 0,
"success": false,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then it passes",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When calling asserts.is_true(true)",
"fullname": "test_when_calling_asserts_is_true",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| False == false",
"context": "Then it passes",
"expected": "|bool| False == false",
"success": true
} ],
"context": "When calling asserts.is_false(false)",
"fullname": "test_when_calling_asserts_is_false",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 2,
"path": "res://tests/unit/boolean.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/boolean.test.gd",
"tags": [ "Windows", "Linux" ],
"test": ExtResource( 11 ),
"yield_time": 0.0
},
"success": false,
"time_taken": 0.0,
"total": 3
} ],
1611531641: [  ],
1611532017: [ {
"context": "Given a Boolean Assertion",
"methods": [ {
"assertions": [ {
"actual": "|bool| True != false",
"context": "",
"expected": "|bool| True == false",
"success": false
} ],
"context": " intentional failure",
"fullname": "test_intentional_failure",
"passed": 0,
"success": false,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| False == false",
"context": "Then it passes",
"expected": "|bool| False == false",
"success": true
} ],
"context": "When calling asserts.is_false(false)",
"fullname": "test_when_calling_asserts_is_false",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then it passes",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When calling asserts.is_true(true)",
"fullname": "test_when_calling_asserts_is_true",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 2,
"path": "res://tests/integration/boolean.test.gd",
"source": {
"containers": [ "res://tests/integration", "res://tests" ],
"method": "",
"path": "res://tests/integration/boolean.test.gd",
"tags": [  ],
"test": ExtResource( 20 ),
"yield_time": 0.0
},
"success": false,
"time_taken": 0.0,
"total": 3
}, {
"context": "Default Args",
"methods": [ {
"assertions": [ {
"actual": "|bool| True == true",
"context": "If this method can be reached then we have doubled a script with default argument(s) properly!",
"expected": "|bool| True == true",
"success": true
} ],
"context": " default arguments of interpolate property",
"fullname": "test_default_arguments_of_interpolate_property",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 1,
"path": "res://tests/integration/default_args.test.gd",
"source": {
"containers": [ "res://tests/integration", "res://tests" ],
"method": "",
"path": "res://tests/integration/default_args.test.gd",
"tags": [  ],
"test": ExtResource( 10 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 1
}, {
"context": "Given is_on_floor",
"methods": [ {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then it can be stubbed",
"expected": "|bool| True == true",
"success": true
} ],
"context": "From a built-in KinematicBody2D2",
"fullname": "test_stubbing_is_on_floor_method_from_builtin_class2",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then it can be stubbed",
"expected": "|bool| True == true",
"success": true
} ],
"context": "From a child node of a scene without scripts",
"fullname": "test_stubbing_is_on_floor_as_child_node_with_no_script",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then it can be stubbed",
"expected": "|bool| True == true",
"success": true
} ],
"context": "From a user-defined script",
"fullname": "test_stubbing_is_on_floor_method_from_user_defined_class",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 3,
"path": "res://tests/integration/on_floor.test.gd",
"source": {
"containers": [ "res://tests/integration", "res://tests" ],
"method": "",
"path": "res://tests/integration/on_floor.test.gd",
"tags": [  ],
"test": ExtResource( 5 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 3
}, {
"context": "Given a Scene Director",
"methods": [ {
"assertions": [ {
"actual": "|int| 9999 is equal to |int| 9999",
"context": "Then we get the stubbed return value",
"expected": "|int| 9999 is equal to |int| 9999",
"success": true
} ],
"context": "When we call a method from the root node that we stubbed",
"fullname": "test_When_we_call_a_method_from_the_root_node_that_we_stubbed",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|Dictionary| {.:[Reference:1393], A:[Reference:1394], A/B:[Reference:1396], C:[Reference:1395], C/D:[Reference:1397]} is not equal to |Dictionary| {.:[Reference:1407], A:[Reference:1408], A/B:[Reference:1410], C:[Reference:1409], C/D:[Reference:1411]}",
"context": "Then they do not share resources",
"expected": "|Dictionary| {.:[Reference:1393], A:[Reference:1394], A/B:[Reference:1396], C:[Reference:1395], C/D:[Reference:1397]} != |Dictionary| {.:[Reference:1407], A:[Reference:1408], A/B:[Reference:1410], C:[Reference:1409], C/D:[Reference:1411]}",
"success": true
} ],
"context": "When we create two of it for the same scene",
"fullname": "test_When_we_create_two_of_it_for_the_same_scene",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 99 is equal to |int| 99",
"context": "Then we get the stubbed return value",
"expected": "|int| 99 is equal to |int| 99",
"success": true
} ],
"context": "When we call a method from a grandchild node that we stubbed",
"fullname": "test_When_we_call_a_method_from_a_grandchild_node_that_we_stubbed",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 999 is equal to |int| 999",
"context": "Then we get the stubbed return value",
"expected": "|int| 999 is equal to |int| 999",
"success": true
} ],
"context": "When we call a method from a child node that we stubbed",
"fullname": "test_When_we_call_a_method_from_a_child_node_that_we_stubbed",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|NodePath| A is equal to |NodePath| A",
"context": "We have the correct NodePath Set",
"expected": "|NodePath| A is equal to |NodePath| A",
"success": true
} ],
"context": "When we add it to the tree it runs",
"fullname": "test_When_we_add_it_to_the_tree_it_runs",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 5,
"path": "res://tests/integration/scene_director.test.gd",
"source": {
"containers": [ "res://tests/integration", "res://tests" ],
"method": "",
"path": "res://tests/integration/scene_director.test.gd",
"tags": [  ],
"test": ExtResource( 4 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 5
}, {
"context": "Given a Script Director",
"methods": [ {
"assertions": [ {
"actual": "[Reference:1520] is instance of class: [GDScript:1513]",
"context": "Then we get that inner class back",
"expected": "[Reference:1520] is instance of class: [GDScript:1513]",
"success": true
} ],
"context": "When we double an inner class",
"fullname": "test_When_we_double_an_inner_class",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|Dictionary| {_enter_tree:{arguments:, default_arguments:}, _exit_tree:{arguments:, default_arguments:}, _get:{arguments:a, default_arguments:a}, _get_configuration_warning:{arguments:, default_arguments:}, _get_editor_description:{arguments:, default_arguments:}, _get_import_path:{arguments:, default_arguments:}, _get_property_list:{arguments:, default_arguments:}, _init:{arguments:, default_arguments:}, _input:{arguments:a, default_arguments:a}, _notification:{arguments:a, default_arguments:a}, _physics_process:{arguments:a, default_arguments:a}, _process:{arguments:a, default_arguments:a}, _ready:{arguments:, default_arguments:}, _set:{arguments:a, b, default_arguments:a, b}, _set_editor_description:{arguments:a, default_arguments:a}, _set_import_path:{arguments:a, default_arguments:a}, _to_string:{arguments:, default_arguments:}, _unhandled_input:{arguments:a, default_arguments:a}, _unhandled_key_input:{arguments:a, default_arguments:a}, add:{arguments:a, b, default_arguments:a, b}, add_child:{arguments:a, b, default_arguments:a, b = False}, add_child_below_node:{arguments:a, b, c, default_arguments:a, b, c = False}, add_to_group:{arguments:a, b, default_arguments:a, b = False}, add_user_signal:{arguments:a, b, default_arguments:a, b = []}, call:{arguments:a, default_arguments:a}, call_deferred:{arguments:a, default_arguments:a}, callv:{arguments:a, b, default_arguments:a, b}, can_process:{arguments:, default_arguments:}, can_translate_messages:{arguments:, default_arguments:}, connect:{arguments:a, b, c, d, e, default_arguments:a, b, c, d = [], e = 0}, disconnect:{arguments:a, b, c, default_arguments:a, b, c}, divide:{arguments:a, b, default_arguments:a, b}, duplicate:{arguments:a, default_arguments:a = 15}, emit_signal:{arguments:a, default_arguments:a}, find_node:{arguments:a, b, c, default_arguments:a, b = True, c = True}, find_parent:{arguments:a, default_arguments:a}, free:{arguments:, default_arguments:}, get:{arguments:a, default_arguments:a}, get_child:{arguments:a, default_arguments:a}, get_child_count:{arguments:, default_arguments:}, get_children:{arguments:, default_arguments:}, get_class:{arguments:, default_arguments:}, get_custom_multiplayer:{arguments:, default_arguments:}, get_filename:{arguments:, default_arguments:}, get_groups:{arguments:, default_arguments:}, get_incoming_connections:{arguments:, default_arguments:}, get_index:{arguments:, default_arguments:}, get_indexed:{arguments:a, default_arguments:a}, get_instance_id:{arguments:, default_arguments:}, get_meta:{arguments:a, default_arguments:a}, get_meta_list:{arguments:, default_arguments:}, get_method_list:{arguments:, default_arguments:}, get_multiplayer:{arguments:, default_arguments:}, get_name:{arguments:, default_arguments:}, get_network_master:{arguments:, default_arguments:}, get_node:{arguments:a, default_arguments:a}, get_node_and_resource:{arguments:a, default_arguments:a}, get_node_or_null:{arguments:a, default_arguments:a}, get_owner:{arguments:, default_arguments:}, get_parent:{arguments:, default_arguments:}, get_path:{arguments:, default_arguments:}, get_path_to:{arguments:a, default_arguments:a}, get_pause_mode:{arguments:, default_arguments:}, get_physics_process_delta_time:{arguments:, default_arguments:}, get_position_in_parent:{arguments:, default_arguments:}, get_process_delta_time:{arguments:, default_arguments:}, get_process_priority:{arguments:, default_arguments:}, get_property_list:{arguments:, default_arguments:}, get_scene_instance_load_placeholder:{arguments:, default_arguments:}, get_script:{arguments:, default_arguments:}, get_signal_connection_list:{arguments:a, default_arguments:a}, get_signal_list:{arguments:, default_arguments:}, get_tree:{arguments:, default_arguments:}, get_viewport:{arguments:, default_arguments:}, has_meta:{arguments:a, default_arguments:a}, has_method:{arguments:a, default_arguments:a}, has_node:{arguments:a, default_arguments:a}, has_node_and_resource:{arguments:a, default_arguments:a}, has_signal:{arguments:a, default_arguments:a}, has_user_signal:{arguments:a, default_arguments:a}, is_a_parent_of:{arguments:a, default_arguments:a}, is_blocking_signals:{arguments:, default_arguments:}, is_class:{arguments:a, default_arguments:a}, is_connected:{arguments:a, b, c, default_arguments:a, b, c}, is_displayed_folded:{arguments:, default_arguments:}, is_greater_than:{arguments:a, default_arguments:a}, is_in_group:{arguments:a, default_arguments:a}, is_inside_tree:{arguments:, default_arguments:}, is_network_master:{arguments:, default_arguments:}, is_physics_processing:{arguments:, default_arguments:}, is_physics_processing_internal:{arguments:, default_arguments:}, is_processing:{arguments:, default_arguments:}, is_processing_input:{arguments:, default_arguments:}, is_processing_internal:{arguments:, default_arguments:}, is_processing_unhandled_input:{arguments:, default_arguments:}, is_processing_unhandled_key_input:{arguments:, default_arguments:}, is_queued_for_deletion:{arguments:, default_arguments:}, math_fight:{arguments:, default_arguments:}, move_child:{arguments:a, b, default_arguments:a, b}, multiply:{arguments:a, b, default_arguments:a, b}, notification:{arguments:a, b, default_arguments:a, b = False}, pi:{arguments:, default_arguments:}, print_stray_nodes:{arguments:, default_arguments:}, print_tree:{arguments:, default_arguments:}, print_tree_pretty:{arguments:, default_arguments:}, propagate_call:{arguments:a, b, c, default_arguments:a, b = [], c = False}, propagate_notification:{arguments:a, default_arguments:a}, property_list_changed_notify:{arguments:, default_arguments:}, queue_free:{arguments:, default_arguments:}, raise:{arguments:, default_arguments:}, remove_and_skip:{arguments:, default_arguments:}, remove_child:{arguments:a, default_arguments:a}, remove_from_group:{arguments:a, default_arguments:a}, remove_meta:{arguments:a, default_arguments:a}, replace_by:{arguments:a, b, default_arguments:a, b = False}, request_ready:{arguments:, default_arguments:}, rpc:{arguments:a, default_arguments:a}, rpc_config:{arguments:a, b, default_arguments:a, b}, rpc_id:{arguments:a, b, default_arguments:a, b}, rpc_unreliable:{arguments:a, default_arguments:a}, rpc_unreliable_id:{arguments:a, b, default_arguments:a, b}, rset:{arguments:a, b, default_arguments:a, b}, rset_config:{arguments:a, b, default_arguments:a, b}, rset_id:{arguments:a, b, c, default_arguments:a, b, c}, rset_unreliable:{arguments:a, b, default_arguments:a, b}, rset_unreliable_id:{arguments:a, b, c, default_arguments:a, b, c}, set:{arguments:a, b, default_arguments:a, b}, set_block_signals:{arguments:a, default_arguments:a}, set_custom_multiplayer:{arguments:a, default_arguments:a}, set_deferred:{arguments:a, b, default_arguments:a, b}, set_display_folded:{arguments:a, default_arguments:a}, set_filename:{arguments:a, default_arguments:a}, set_indexed:{arguments:a, b, default_arguments:a, b}, set_message_translation:{arguments:a, default_arguments:a}, set_meta:{arguments:a, b, default_arguments:a, b}, set_name:{arguments:a, default_arguments:a}, set_network_master:{arguments:a, b, default_arguments:a, b = True}, set_owner:{arguments:a, default_arguments:a}, set_pause_mode:{arguments:a, default_arguments:a}, set_physics_process:{arguments:a, default_arguments:a}, set_physics_process_internal:{arguments:a, default_arguments:a}, set_process:{arguments:a, default_arguments:a}, set_process_input:{arguments:a, default_arguments:a}, set_process_internal:{arguments:a, default_arguments:a}, set_process_priority:{arguments:a, default_arguments:a}, set_process_unhandled_input:{arguments:a, default_arguments:a}, set_process_unhandled_key_input:{arguments:a, default_arguments:a}, set_scene_instance_load_placeholder:{arguments:a, default_arguments:a}, set_script:{arguments:a, default_arguments:a}, subtract:{arguments:a, b, default_arguments:a, b}, sum:{arguments:a, default_arguments:a}, to_string:{arguments:, default_arguments:}, tr:{arguments:a, default_arguments:a}, update_configuration_warning:{arguments:, default_arguments:}} is not equal to |Dictionary| {_enter_tree:{arguments:, default_arguments:}, _exit_tree:{arguments:, default_arguments:}, _get:{arguments:a, default_arguments:a}, _get_configuration_warning:{arguments:, default_arguments:}, _get_editor_description:{arguments:, default_arguments:}, _get_import_path:{arguments:, default_arguments:}, _get_property_list:{arguments:, default_arguments:}, _init:{arguments:, default_arguments:}, _input:{arguments:a, default_arguments:a}, _notification:{arguments:a, default_arguments:a}, _physics_process:{arguments:a, default_arguments:a}, _process:{arguments:a, default_arguments:a}, _ready:{arguments:, default_arguments:}, _set:{arguments:a, b, default_arguments:a, b}, _set_editor_description:{arguments:a, default_arguments:a}, _set_import_path:{arguments:a, default_arguments:a}, _to_string:{arguments:, default_arguments:}, _unhandled_input:{arguments:a, default_arguments:a}, _unhandled_key_input:{arguments:a, default_arguments:a}, add:{arguments:a, b, default_arguments:a, b}, add_child:{arguments:a, b, default_arguments:a, b = False}, add_child_below_node:{arguments:a, b, c, default_arguments:a, b, c = False}, add_to_group:{arguments:a, b, default_arguments:a, b = False}, add_user_signal:{arguments:a, b, default_arguments:a, b = []}, call:{arguments:a, default_arguments:a}, call_deferred:{arguments:a, default_arguments:a}, callv:{arguments:a, b, default_arguments:a, b}, can_process:{arguments:, default_arguments:}, can_translate_messages:{arguments:, default_arguments:}, connect:{arguments:a, b, c, d, e, default_arguments:a, b, c, d = [], e = 0}, disconnect:{arguments:a, b, c, default_arguments:a, b, c}, divide:{arguments:a, b, default_arguments:a, b}, duplicate:{arguments:a, default_arguments:a = 15}, emit_signal:{arguments:a, default_arguments:a}, find_node:{arguments:a, b, c, default_arguments:a, b = True, c = True}, find_parent:{arguments:a, default_arguments:a}, free:{arguments:, default_arguments:}, get:{arguments:a, default_arguments:a}, get_child:{arguments:a, default_arguments:a}, get_child_count:{arguments:, default_arguments:}, get_children:{arguments:, default_arguments:}, get_class:{arguments:, default_arguments:}, get_custom_multiplayer:{arguments:, default_arguments:}, get_filename:{arguments:, default_arguments:}, get_groups:{arguments:, default_arguments:}, get_incoming_connections:{arguments:, default_arguments:}, get_index:{arguments:, default_arguments:}, get_indexed:{arguments:a, default_arguments:a}, get_instance_id:{arguments:, default_arguments:}, get_meta:{arguments:a, default_arguments:a}, get_meta_list:{arguments:, default_arguments:}, get_method_list:{arguments:, default_arguments:}, get_multiplayer:{arguments:, default_arguments:}, get_name:{arguments:, default_arguments:}, get_network_master:{arguments:, default_arguments:}, get_node:{arguments:a, default_arguments:a}, get_node_and_resource:{arguments:a, default_arguments:a}, get_node_or_null:{arguments:a, default_arguments:a}, get_owner:{arguments:, default_arguments:}, get_parent:{arguments:, default_arguments:}, get_path:{arguments:, default_arguments:}, get_path_to:{arguments:a, default_arguments:a}, get_pause_mode:{arguments:, default_arguments:}, get_physics_process_delta_time:{arguments:, default_arguments:}, get_position_in_parent:{arguments:, default_arguments:}, get_process_delta_time:{arguments:, default_arguments:}, get_process_priority:{arguments:, default_arguments:}, get_property_list:{arguments:, default_arguments:}, get_scene_instance_load_placeholder:{arguments:, default_arguments:}, get_script:{arguments:, default_arguments:}, get_signal_connection_list:{arguments:a, default_arguments:a}, get_signal_list:{arguments:, default_arguments:}, get_tree:{arguments:, default_arguments:}, get_viewport:{arguments:, default_arguments:}, has_meta:{arguments:a, default_arguments:a}, has_method:{arguments:a, default_arguments:a}, has_node:{arguments:a, default_arguments:a}, has_node_and_resource:{arguments:a, default_arguments:a}, has_signal:{arguments:a, default_arguments:a}, has_user_signal:{arguments:a, default_arguments:a}, is_a_parent_of:{arguments:a, default_arguments:a}, is_blocking_signals:{arguments:, default_arguments:}, is_class:{arguments:a, default_arguments:a}, is_connected:{arguments:a, b, c, default_arguments:a, b, c}, is_displayed_folded:{arguments:, default_arguments:}, is_greater_than:{arguments:a, default_arguments:a}, is_in_group:{arguments:a, default_arguments:a}, is_inside_tree:{arguments:, default_arguments:}, is_network_master:{arguments:, default_arguments:}, is_physics_processing:{arguments:, default_arguments:}, is_physics_processing_internal:{arguments:, default_arguments:}, is_processing:{arguments:, default_arguments:}, is_processing_input:{arguments:, default_arguments:}, is_processing_internal:{arguments:, default_arguments:}, is_processing_unhandled_input:{arguments:, default_arguments:}, is_processing_unhandled_key_input:{arguments:, default_arguments:}, is_queued_for_deletion:{arguments:, default_arguments:}, math_fight:{arguments:, default_arguments:}, move_child:{arguments:a, b, default_arguments:a, b}, multiply:{arguments:a, b, default_arguments:a, b}, notification:{arguments:a, b, default_arguments:a, b = False}, pi:{arguments:, default_arguments:}, print_stray_nodes:{arguments:, default_arguments:}, print_tree:{arguments:, default_arguments:}, print_tree_pretty:{arguments:, default_arguments:}, propagate_call:{arguments:a, b, c, default_arguments:a, b = [], c = False}, propagate_notification:{arguments:a, default_arguments:a}, property_list_changed_notify:{arguments:, default_arguments:}, queue_free:{arguments:, default_arguments:}, raise:{arguments:, default_arguments:}, remove_and_skip:{arguments:, default_arguments:}, remove_child:{arguments:a, default_arguments:a}, remove_from_group:{arguments:a, default_arguments:a}, remove_meta:{arguments:a, default_arguments:a}, replace_by:{arguments:a, b, default_arguments:a, b = False}, request_ready:{arguments:, default_arguments:}, rpc:{arguments:a, default_arguments:a}, rpc_config:{arguments:a, b, default_arguments:a, b}, rpc_id:{arguments:a, b, default_arguments:a, b}, rpc_unreliable:{arguments:a, default_arguments:a}, rpc_unreliable_id:{arguments:a, b, default_arguments:a, b}, rset:{arguments:a, b, default_arguments:a, b}, rset_config:{arguments:a, b, default_arguments:a, b}, rset_id:{arguments:a, b, c, default_arguments:a, b, c}, rset_unreliable:{arguments:a, b, default_arguments:a, b}, rset_unreliable_id:{arguments:a, b, c, default_arguments:a, b, c}, set:{arguments:a, b, default_arguments:a, b}, set_block_signals:{arguments:a, default_arguments:a}, set_custom_multiplayer:{arguments:a, default_arguments:a}, set_deferred:{arguments:a, b, default_arguments:a, b}, set_display_folded:{arguments:a, default_arguments:a}, set_filename:{arguments:a, default_arguments:a}, set_indexed:{arguments:a, b, default_arguments:a, b}, set_message_translation:{arguments:a, default_arguments:a}, set_meta:{arguments:a, b, default_arguments:a, b}, set_name:{arguments:a, default_arguments:a}, set_network_master:{arguments:a, b, default_arguments:a, b = True}, set_owner:{arguments:a, default_arguments:a}, set_pause_mode:{arguments:a, default_arguments:a}, set_physics_process:{arguments:a, default_arguments:a}, set_physics_process_internal:{arguments:a, default_arguments:a}, set_process:{arguments:a, default_arguments:a}, set_process_input:{arguments:a, default_arguments:a}, set_process_internal:{arguments:a, default_arguments:a}, set_process_priority:{arguments:a, default_arguments:a}, set_process_unhandled_input:{arguments:a, default_arguments:a}, set_process_unhandled_key_input:{arguments:a, default_arguments:a}, set_scene_instance_load_placeholder:{arguments:a, default_arguments:a}, set_script:{arguments:a, default_arguments:a}, subtract:{arguments:a, b, default_arguments:a, b}, sum:{arguments:a, default_arguments:a}, to_string:{arguments:, default_arguments:}, tr:{arguments:a, default_arguments:a}, update_configuration_warning:{arguments:, default_arguments:}}",
"context": "Then they do not share resources",
"expected": "|Dictionary| {_enter_tree:{arguments:, default_arguments:}, _exit_tree:{arguments:, default_arguments:}, _get:{arguments:a, default_arguments:a}, _get_configuration_warning:{arguments:, default_arguments:}, _get_editor_description:{arguments:, default_arguments:}, _get_import_path:{arguments:, default_arguments:}, _get_property_list:{arguments:, default_arguments:}, _init:{arguments:, default_arguments:}, _input:{arguments:a, default_arguments:a}, _notification:{arguments:a, default_arguments:a}, _physics_process:{arguments:a, default_arguments:a}, _process:{arguments:a, default_arguments:a}, _ready:{arguments:, default_arguments:}, _set:{arguments:a, b, default_arguments:a, b}, _set_editor_description:{arguments:a, default_arguments:a}, _set_import_path:{arguments:a, default_arguments:a}, _to_string:{arguments:, default_arguments:}, _unhandled_input:{arguments:a, default_arguments:a}, _unhandled_key_input:{arguments:a, default_arguments:a}, add:{arguments:a, b, default_arguments:a, b}, add_child:{arguments:a, b, default_arguments:a, b = False}, add_child_below_node:{arguments:a, b, c, default_arguments:a, b, c = False}, add_to_group:{arguments:a, b, default_arguments:a, b = False}, add_user_signal:{arguments:a, b, default_arguments:a, b = []}, call:{arguments:a, default_arguments:a}, call_deferred:{arguments:a, default_arguments:a}, callv:{arguments:a, b, default_arguments:a, b}, can_process:{arguments:, default_arguments:}, can_translate_messages:{arguments:, default_arguments:}, connect:{arguments:a, b, c, d, e, default_arguments:a, b, c, d = [], e = 0}, disconnect:{arguments:a, b, c, default_arguments:a, b, c}, divide:{arguments:a, b, default_arguments:a, b}, duplicate:{arguments:a, default_arguments:a = 15}, emit_signal:{arguments:a, default_arguments:a}, find_node:{arguments:a, b, c, default_arguments:a, b = True, c = True}, find_parent:{arguments:a, default_arguments:a}, free:{arguments:, default_arguments:}, get:{arguments:a, default_arguments:a}, get_child:{arguments:a, default_arguments:a}, get_child_count:{arguments:, default_arguments:}, get_children:{arguments:, default_arguments:}, get_class:{arguments:, default_arguments:}, get_custom_multiplayer:{arguments:, default_arguments:}, get_filename:{arguments:, default_arguments:}, get_groups:{arguments:, default_arguments:}, get_incoming_connections:{arguments:, default_arguments:}, get_index:{arguments:, default_arguments:}, get_indexed:{arguments:a, default_arguments:a}, get_instance_id:{arguments:, default_arguments:}, get_meta:{arguments:a, default_arguments:a}, get_meta_list:{arguments:, default_arguments:}, get_method_list:{arguments:, default_arguments:}, get_multiplayer:{arguments:, default_arguments:}, get_name:{arguments:, default_arguments:}, get_network_master:{arguments:, default_arguments:}, get_node:{arguments:a, default_arguments:a}, get_node_and_resource:{arguments:a, default_arguments:a}, get_node_or_null:{arguments:a, default_arguments:a}, get_owner:{arguments:, default_arguments:}, get_parent:{arguments:, default_arguments:}, get_path:{arguments:, default_arguments:}, get_path_to:{arguments:a, default_arguments:a}, get_pause_mode:{arguments:, default_arguments:}, get_physics_process_delta_time:{arguments:, default_arguments:}, get_position_in_parent:{arguments:, default_arguments:}, get_process_delta_time:{arguments:, default_arguments:}, get_process_priority:{arguments:, default_arguments:}, get_property_list:{arguments:, default_arguments:}, get_scene_instance_load_placeholder:{arguments:, default_arguments:}, get_script:{arguments:, default_arguments:}, get_signal_connection_list:{arguments:a, default_arguments:a}, get_signal_list:{arguments:, default_arguments:}, get_tree:{arguments:, default_arguments:}, get_viewport:{arguments:, default_arguments:}, has_meta:{arguments:a, default_arguments:a}, has_method:{arguments:a, default_arguments:a}, has_node:{arguments:a, default_arguments:a}, has_node_and_resource:{arguments:a, default_arguments:a}, has_signal:{arguments:a, default_arguments:a}, has_user_signal:{arguments:a, default_arguments:a}, is_a_parent_of:{arguments:a, default_arguments:a}, is_blocking_signals:{arguments:, default_arguments:}, is_class:{arguments:a, default_arguments:a}, is_connected:{arguments:a, b, c, default_arguments:a, b, c}, is_displayed_folded:{arguments:, default_arguments:}, is_greater_than:{arguments:a, default_arguments:a}, is_in_group:{arguments:a, default_arguments:a}, is_inside_tree:{arguments:, default_arguments:}, is_network_master:{arguments:, default_arguments:}, is_physics_processing:{arguments:, default_arguments:}, is_physics_processing_internal:{arguments:, default_arguments:}, is_processing:{arguments:, default_arguments:}, is_processing_input:{arguments:, default_arguments:}, is_processing_internal:{arguments:, default_arguments:}, is_processing_unhandled_input:{arguments:, default_arguments:}, is_processing_unhandled_key_input:{arguments:, default_arguments:}, is_queued_for_deletion:{arguments:, default_arguments:}, math_fight:{arguments:, default_arguments:}, move_child:{arguments:a, b, default_arguments:a, b}, multiply:{arguments:a, b, default_arguments:a, b}, notification:{arguments:a, b, default_arguments:a, b = False}, pi:{arguments:, default_arguments:}, print_stray_nodes:{arguments:, default_arguments:}, print_tree:{arguments:, default_arguments:}, print_tree_pretty:{arguments:, default_arguments:}, propagate_call:{arguments:a, b, c, default_arguments:a, b = [], c = False}, propagate_notification:{arguments:a, default_arguments:a}, property_list_changed_notify:{arguments:, default_arguments:}, queue_free:{arguments:, default_arguments:}, raise:{arguments:, default_arguments:}, remove_and_skip:{arguments:, default_arguments:}, remove_child:{arguments:a, default_arguments:a}, remove_from_group:{arguments:a, default_arguments:a}, remove_meta:{arguments:a, default_arguments:a}, replace_by:{arguments:a, b, default_arguments:a, b = False}, request_ready:{arguments:, default_arguments:}, rpc:{arguments:a, default_arguments:a}, rpc_config:{arguments:a, b, default_arguments:a, b}, rpc_id:{arguments:a, b, default_arguments:a, b}, rpc_unreliable:{arguments:a, default_arguments:a}, rpc_unreliable_id:{arguments:a, b, default_arguments:a, b}, rset:{arguments:a, b, default_arguments:a, b}, rset_config:{arguments:a, b, default_arguments:a, b}, rset_id:{arguments:a, b, c, default_arguments:a, b, c}, rset_unreliable:{arguments:a, b, default_arguments:a, b}, rset_unreliable_id:{arguments:a, b, c, default_arguments:a, b, c}, set:{arguments:a, b, default_arguments:a, b}, set_block_signals:{arguments:a, default_arguments:a}, set_custom_multiplayer:{arguments:a, default_arguments:a}, set_deferred:{arguments:a, b, default_arguments:a, b}, set_display_folded:{arguments:a, default_arguments:a}, set_filename:{arguments:a, default_arguments:a}, set_indexed:{arguments:a, b, default_arguments:a, b}, set_message_translation:{arguments:a, default_arguments:a}, set_meta:{arguments:a, b, default_arguments:a, b}, set_name:{arguments:a, default_arguments:a}, set_network_master:{arguments:a, b, default_arguments:a, b = True}, set_owner:{arguments:a, default_arguments:a}, set_pause_mode:{arguments:a, default_arguments:a}, set_physics_process:{arguments:a, default_arguments:a}, set_physics_process_internal:{arguments:a, default_arguments:a}, set_process:{arguments:a, default_arguments:a}, set_process_input:{arguments:a, default_arguments:a}, set_process_internal:{arguments:a, default_arguments:a}, set_process_priority:{arguments:a, default_arguments:a}, set_process_unhandled_input:{arguments:a, default_arguments:a}, set_process_unhandled_key_input:{arguments:a, default_arguments:a}, set_scene_instance_load_placeholder:{arguments:a, default_arguments:a}, set_script:{arguments:a, default_arguments:a}, subtract:{arguments:a, b, default_arguments:a, b}, sum:{arguments:a, default_arguments:a}, to_string:{arguments:, default_arguments:}, tr:{arguments:a, default_arguments:a}, update_configuration_warning:{arguments:, default_arguments:}} != |Dictionary| {_enter_tree:{arguments:, default_arguments:}, _exit_tree:{arguments:, default_arguments:}, _get:{arguments:a, default_arguments:a}, _get_configuration_warning:{arguments:, default_arguments:}, _get_editor_description:{arguments:, default_arguments:}, _get_import_path:{arguments:, default_arguments:}, _get_property_list:{arguments:, default_arguments:}, _init:{arguments:, default_arguments:}, _input:{arguments:a, default_arguments:a}, _notification:{arguments:a, default_arguments:a}, _physics_process:{arguments:a, default_arguments:a}, _process:{arguments:a, default_arguments:a}, _ready:{arguments:, default_arguments:}, _set:{arguments:a, b, default_arguments:a, b}, _set_editor_description:{arguments:a, default_arguments:a}, _set_import_path:{arguments:a, default_arguments:a}, _to_string:{arguments:, default_arguments:}, _unhandled_input:{arguments:a, default_arguments:a}, _unhandled_key_input:{arguments:a, default_arguments:a}, add:{arguments:a, b, default_arguments:a, b}, add_child:{arguments:a, b, default_arguments:a, b = False}, add_child_below_node:{arguments:a, b, c, default_arguments:a, b, c = False}, add_to_group:{arguments:a, b, default_arguments:a, b = False}, add_user_signal:{arguments:a, b, default_arguments:a, b = []}, call:{arguments:a, default_arguments:a}, call_deferred:{arguments:a, default_arguments:a}, callv:{arguments:a, b, default_arguments:a, b}, can_process:{arguments:, default_arguments:}, can_translate_messages:{arguments:, default_arguments:}, connect:{arguments:a, b, c, d, e, default_arguments:a, b, c, d = [], e = 0}, disconnect:{arguments:a, b, c, default_arguments:a, b, c}, divide:{arguments:a, b, default_arguments:a, b}, duplicate:{arguments:a, default_arguments:a = 15}, emit_signal:{arguments:a, default_arguments:a}, find_node:{arguments:a, b, c, default_arguments:a, b = True, c = True}, find_parent:{arguments:a, default_arguments:a}, free:{arguments:, default_arguments:}, get:{arguments:a, default_arguments:a}, get_child:{arguments:a, default_arguments:a}, get_child_count:{arguments:, default_arguments:}, get_children:{arguments:, default_arguments:}, get_class:{arguments:, default_arguments:}, get_custom_multiplayer:{arguments:, default_arguments:}, get_filename:{arguments:, default_arguments:}, get_groups:{arguments:, default_arguments:}, get_incoming_connections:{arguments:, default_arguments:}, get_index:{arguments:, default_arguments:}, get_indexed:{arguments:a, default_arguments:a}, get_instance_id:{arguments:, default_arguments:}, get_meta:{arguments:a, default_arguments:a}, get_meta_list:{arguments:, default_arguments:}, get_method_list:{arguments:, default_arguments:}, get_multiplayer:{arguments:, default_arguments:}, get_name:{arguments:, default_arguments:}, get_network_master:{arguments:, default_arguments:}, get_node:{arguments:a, default_arguments:a}, get_node_and_resource:{arguments:a, default_arguments:a}, get_node_or_null:{arguments:a, default_arguments:a}, get_owner:{arguments:, default_arguments:}, get_parent:{arguments:, default_arguments:}, get_path:{arguments:, default_arguments:}, get_path_to:{arguments:a, default_arguments:a}, get_pause_mode:{arguments:, default_arguments:}, get_physics_process_delta_time:{arguments:, default_arguments:}, get_position_in_parent:{arguments:, default_arguments:}, get_process_delta_time:{arguments:, default_arguments:}, get_process_priority:{arguments:, default_arguments:}, get_property_list:{arguments:, default_arguments:}, get_scene_instance_load_placeholder:{arguments:, default_arguments:}, get_script:{arguments:, default_arguments:}, get_signal_connection_list:{arguments:a, default_arguments:a}, get_signal_list:{arguments:, default_arguments:}, get_tree:{arguments:, default_arguments:}, get_viewport:{arguments:, default_arguments:}, has_meta:{arguments:a, default_arguments:a}, has_method:{arguments:a, default_arguments:a}, has_node:{arguments:a, default_arguments:a}, has_node_and_resource:{arguments:a, default_arguments:a}, has_signal:{arguments:a, default_arguments:a}, has_user_signal:{arguments:a, default_arguments:a}, is_a_parent_of:{arguments:a, default_arguments:a}, is_blocking_signals:{arguments:, default_arguments:}, is_class:{arguments:a, default_arguments:a}, is_connected:{arguments:a, b, c, default_arguments:a, b, c}, is_displayed_folded:{arguments:, default_arguments:}, is_greater_than:{arguments:a, default_arguments:a}, is_in_group:{arguments:a, default_arguments:a}, is_inside_tree:{arguments:, default_arguments:}, is_network_master:{arguments:, default_arguments:}, is_physics_processing:{arguments:, default_arguments:}, is_physics_processing_internal:{arguments:, default_arguments:}, is_processing:{arguments:, default_arguments:}, is_processing_input:{arguments:, default_arguments:}, is_processing_internal:{arguments:, default_arguments:}, is_processing_unhandled_input:{arguments:, default_arguments:}, is_processing_unhandled_key_input:{arguments:, default_arguments:}, is_queued_for_deletion:{arguments:, default_arguments:}, math_fight:{arguments:, default_arguments:}, move_child:{arguments:a, b, default_arguments:a, b}, multiply:{arguments:a, b, default_arguments:a, b}, notification:{arguments:a, b, default_arguments:a, b = False}, pi:{arguments:, default_arguments:}, print_stray_nodes:{arguments:, default_arguments:}, print_tree:{arguments:, default_arguments:}, print_tree_pretty:{arguments:, default_arguments:}, propagate_call:{arguments:a, b, c, default_arguments:a, b = [], c = False}, propagate_notification:{arguments:a, default_arguments:a}, property_list_changed_notify:{arguments:, default_arguments:}, queue_free:{arguments:, default_arguments:}, raise:{arguments:, default_arguments:}, remove_and_skip:{arguments:, default_arguments:}, remove_child:{arguments:a, default_arguments:a}, remove_from_group:{arguments:a, default_arguments:a}, remove_meta:{arguments:a, default_arguments:a}, replace_by:{arguments:a, b, default_arguments:a, b = False}, request_ready:{arguments:, default_arguments:}, rpc:{arguments:a, default_arguments:a}, rpc_config:{arguments:a, b, default_arguments:a, b}, rpc_id:{arguments:a, b, default_arguments:a, b}, rpc_unreliable:{arguments:a, default_arguments:a}, rpc_unreliable_id:{arguments:a, b, default_arguments:a, b}, rset:{arguments:a, b, default_arguments:a, b}, rset_config:{arguments:a, b, default_arguments:a, b}, rset_id:{arguments:a, b, c, default_arguments:a, b, c}, rset_unreliable:{arguments:a, b, default_arguments:a, b}, rset_unreliable_id:{arguments:a, b, c, default_arguments:a, b, c}, set:{arguments:a, b, default_arguments:a, b}, set_block_signals:{arguments:a, default_arguments:a}, set_custom_multiplayer:{arguments:a, default_arguments:a}, set_deferred:{arguments:a, b, default_arguments:a, b}, set_display_folded:{arguments:a, default_arguments:a}, set_filename:{arguments:a, default_arguments:a}, set_indexed:{arguments:a, b, default_arguments:a, b}, set_message_translation:{arguments:a, default_arguments:a}, set_meta:{arguments:a, b, default_arguments:a, b}, set_name:{arguments:a, default_arguments:a}, set_network_master:{arguments:a, b, default_arguments:a, b = True}, set_owner:{arguments:a, default_arguments:a}, set_pause_mode:{arguments:a, default_arguments:a}, set_physics_process:{arguments:a, default_arguments:a}, set_physics_process_internal:{arguments:a, default_arguments:a}, set_process:{arguments:a, default_arguments:a}, set_process_input:{arguments:a, default_arguments:a}, set_process_internal:{arguments:a, default_arguments:a}, set_process_priority:{arguments:a, default_arguments:a}, set_process_unhandled_input:{arguments:a, default_arguments:a}, set_process_unhandled_key_input:{arguments:a, default_arguments:a}, set_scene_instance_load_placeholder:{arguments:a, default_arguments:a}, set_script:{arguments:a, default_arguments:a}, subtract:{arguments:a, b, default_arguments:a, b}, sum:{arguments:a, default_arguments:a}, to_string:{arguments:, default_arguments:}, tr:{arguments:a, default_arguments:a}, update_configuration_warning:{arguments:, default_arguments:}}",
"success": true
} ],
"context": "When we create two of it for the same script",
"fullname": "test_When_we_create_two_of_it_for_the_same_script",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|Object| [Node:1532] is equal to |Object| [Node:1532]",
"context": "Then we get the same double back",
"expected": "|Object| [Node:1532] is equal to |Object| [Node:1532]",
"success": true
} ],
"context": "When we call the double the second time",
"fullname": "test_When_we_call_double_a_second_time_on",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 3,
"path": "res://tests/integration/script_director.test.gd",
"source": {
"containers": [ "res://tests/integration", "res://tests" ],
"method": "",
"path": "res://tests/integration/script_director.test.gd",
"tags": [  ],
"test": ExtResource( 13 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 3
}, {
"context": "Given a Test Double",
"methods": [ {
"assertions": [ {
"actual": "|int| 9999 is equal to |int| 9999",
"context": "Then it returns the corresponding value when the pattern matches",
"expected": "|int| 9999 is equal to |int| 9999",
"success": true
} ],
"context": "When we call a method that was stubbed with an argument pattern that includes a non-primitive object",
"fullname": "test_When_we_call_a_method_that_was_stubbed_with_an_argument_pattern_that_includes_a_non_primitive_object",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 9999 is equal to |int| 9999",
"context": "Then it returns the corresponding value when the partial pattern matches",
"expected": "|int| 9999 is equal to |int| 9999",
"success": true
} ],
"context": "When we call a method that was stubbed with a partial (ie using any()) argument pattern",
"fullname": "test_When_we_call_a_method_that_was_stubbed_with_a_partial_argument_pattern",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 4 is equal to |int| 4",
"context": "Then it calls its super implementation by default",
"expected": "|int| 4 is equal to |int| 4",
"success": true
}, {
"actual": "|int| 9999 is equal to |int| 9999",
"context": "Then it does not call its super implementation when arguments patterns match a different return value",
"expected": "|int| 9999 is equal to |int| 9999",
"success": true
} ],
"context": "When we call a method that we stubbed to call its super implementation by default",
"fullname": "test_When_we_call_a_method_that_we_stubbed_to_call_its_super_implementation_by_default",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|int| 4 is equal to |int| 4",
"context": "Then we get the correct result",
"expected": "|int| 4 is equal to |int| 4",
"success": true
} ],
"context": "When we call an add(x, y) method that we haven't directed",
"fullname": "test_When_we_call_an_add_method_that_we_have_not_directed",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "add was called",
"context": "Then we can see that it was called at least once",
"expected": "add was called",
"success": true
} ],
"context": "When we call a method that we are spying on",
"fullname": "test_When_we_call_a_method_that_we_are_spying_on",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|null| Null == null",
"context": "Then we get null",
"expected": "|null| Null == null",
"success": true
} ],
"context": "When we call a method that we have dummied",
"fullname": "test_When_we_call_a_method_that_we_have_dummied",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then it returns true",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we call a method that we have stubbed to return true",
"fullname": "test_When_we_call_a_method_that_we_have_stubbed_to_return_true",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|Object| [Node:1582] is equal to |Object| [Node:1582]",
"context": "Then it returns that same node",
"expected": "|Object| [Node:1582] is equal to |Object| [Node:1582]",
"success": true
} ],
"context": "When we call a method that we have stubbed to return a node",
"fullname": "test_When_we_call_a_method_that_we_have_stubbed_to_return_a_node",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "method: add was called with arguments: [10, 10]",
"context": "Then we can see that it was called with those arguments",
"expected": "method: add was called with arguments: [10, 10]",
"success": true
} ],
"context": "When we pass arguments to a method call that we are spying on",
"fullname": "test_When_we_pass_arguments_to_a_method_call_that_we_are_spying_on",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 100 is equal to |int| 100",
"context": "Then it returns the default stubbed value when the arguments don't match any pattern",
"expected": "|int| 100 is equal to |int| 100",
"success": true
}, {
"actual": "|int| 1000 is equal to |int| 1000",
"context": "Then it returns the the corresponding value to the pattern the arguments matched",
"expected": "|int| 1000 is equal to |int| 1000",
"success": true
} ],
"context": "When we call a method that was stubbed to return different values based on argument patterns",
"fullname": "test_When_we_call_a_method_that_was_stubbed_to_return_different_values_based_on_argument_patterns",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|float| 6.283185 is equal to |float| 6.283185",
"context": "Then we can call the static methods of that inner double",
"expected": "|float| 6.283185 is equal to |float| 6.283185",
"success": true
} ],
"context": "When we add an doubled inner class to it",
"fullname": "test_When_we_add_a_doubled_inner_class_to_it",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|String| Jackie is equal to |String| Jackie",
"context": "Then we can double the object successfully",
"expected": "|String| Jackie is equal to |String| Jackie",
"success": true
} ],
"context": "When we pass in dependecies on double",
"fullname": "test_When_we_pass_in_deps_on_double",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 99 is equal to |int| 99",
"context": "Then it returns a value",
"expected": "|int| 99 is equal to |int| 99",
"success": true
} ],
"context": "When we pass a funcref as a subcall that returns",
"fullname": "test_When_we_pass_a_funcref_as_a_subcall_that_returns_a_value",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|null| Null == null",
"context": "Then we get the stubbed value back",
"expected": "|null| Null == null",
"success": true
} ],
"context": "When we stub a method of a doubled inner class",
"fullname": "test_When_we_stub_a_method_of_a_double_inner_class",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|String| Jackie is equal to |String| Jackie",
"context": "Then we can double the object successfully",
"expected": "|String| Jackie is equal to |String| Jackie",
"success": true
} ],
"context": "When we pass in dependecies on direct",
"fullname": "test_When_we_pass_in_deps_on_direct",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 99 is equal to |int| 99",
"context": "Then it affects the state of the double",
"expected": "|int| 99 is equal to |int| 99",
"success": true
} ],
"context": "When we pass a funcref as a subcall",
"fullname": "test_When_we_pass_a_funcref_as_a_subcall",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|Array| [10, 5] is equal to |Array| [10, 5]",
"context": "Then it returns a value",
"expected": "|Array| [10, 5] is equal to |Array| [10, 5]",
"success": true
} ],
"context": "When we pass an Object with a call_func function",
"fullname": "test_When_we_pass_an_object_with_callfunc_method_as_a_subcall",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| True is equal to |bool| True",
"context": "Then we can call it",
"expected": "|bool| True is equal to |bool| True",
"success": true
} ],
"context": "When we stubbed a keyworded method by passing in the correct keyword",
"fullname": "test_When_we_stubbed_a_keyword_method_by_passing_in_the_correct_keyword",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "(1, 1) is builtin: Vector2",
"context": "Then we can call methods on it",
"expected": "(1, 1) is builtin: Vector2",
"success": true
} ],
"context": "When we double an inner class",
"fullname": "test_When_we_double_an_inner_class",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 19,
"path": "res://tests/integration/test_double.test.gd",
"source": {
"containers": [ "res://tests/integration", "res://tests" ],
"method": "",
"path": "res://tests/integration/test_double.test.gd",
"tags": [  ],
"test": ExtResource( 14 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 19
}, {
"context": "Given a Boolean Assertion",
"methods": [ {
"assertions": [ {
"actual": "|bool| True != false",
"context": "",
"expected": "|bool| True == false",
"success": false
} ],
"context": " intentional failure",
"fullname": "test_intentional_failure",
"passed": 0,
"success": false,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| False == false",
"context": "Then it passes",
"expected": "|bool| False == false",
"success": true
} ],
"context": "When calling asserts.is_false(false)",
"fullname": "test_when_calling_asserts_is_false",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then it passes",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When calling asserts.is_true(true)",
"fullname": "test_when_calling_asserts_is_true",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 2,
"path": "res://tests/unit/boolean.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/boolean.test.gd",
"tags": [ "Windows", "Linux" ],
"test": ExtResource( 11 ),
"yield_time": 0.0
},
"success": false,
"time_taken": 0.0,
"total": 3
}, {
"context": "Given an Equality Assertion",
"methods": [ {
"assertions": [ {
"actual": "|int| 1 is equal to |int| 1",
"context": "Then it passes",
"expected": "|int| 1 is equal to |int| 1",
"success": true
} ],
"context": "When calling asserts.is_equal(1, 1)",
"fullname": "test_when_calling_is_equal",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 2 is greater than |int| 1",
"context": "Then it passes",
"expected": "|int| 2 is greater than |int| 1",
"success": true
} ],
"context": "When calling asserts.is_greater_than(2, 1)",
"fullname": "test_when_calling_is_greater_than",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 1 is less than |int| 2",
"context": "Then it passes",
"expected": "|int| 1 is less than |int| 2",
"success": true
} ],
"context": "When calling asserts.is_less_than(2, 1)",
"fullname": "test_when_calling_is_less_than",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 1 is equal or less than |int| 1",
"context": "Then it passes!",
"expected": "|int| 1 is equal or less than |int| 1",
"success": true
} ],
"context": "When calling asserts.is_equal_or_less_than(1, 1)",
"fullname": "test_when_calling_is_equal_or_less_than_with_equal_values",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 1 is equal or greater |int| 1",
"context": "Then it passes",
"expected": "|int| 1 is equal or greater |int| 1",
"success": true
} ],
"context": "When calling asserts.is_equal_or_greater_than(1, 1)",
"fullname": "test_when_calling_is_equal_or_greater_than_with_equal_values",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 2 is equal or greater |int| 1",
"context": "Then it passes",
"expected": "|int| 2 is equal or greater |int| 1",
"success": true
} ],
"context": "When calling asserts.is_equal_or_greater_than(2, 1)",
"fullname": "test_when_calling_is_equal_or_greater_than",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 5 is not equal to |int| 6",
"context": "Then it passes",
"expected": "|int| 5 != |int| 6",
"success": true
} ],
"context": "When callign asserts.is_not_equal(5, 6)",
"fullname": "test_when_calling_is_not_equal",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 7,
"path": "res://tests/unit/equality.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/equality.test.gd",
"tags": [  ],
"test": ExtResource( 8 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 7
}, {
"context": "Given A File Assertion",
"methods": [ {
"assertions": [ {
"actual": "res://somefile.gd does not exist",
"context": "Then it passes",
"expected": "res://somefile.gd does not exist",
"success": true
} ],
"context": "When calling asserts.file_does_not_exist when there is no file",
"fullname": "test_when_calling_file_does_not_exist_when_there_is_no_file",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": " does not exist",
"context": "Then it passes",
"expected": " does not exist",
"success": true
} ],
"context": "When calling asserts file does not exist when path is empty",
"fullname": "test_when_calling_file_does_not_exist_when_path_is_empty",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "res://tests/unit/file.test.gd exists",
"context": "Then it passes",
"expected": "res://tests/unit/file.test.gd exists",
"success": true
} ],
"context": "When calling asserts.file_exists when the file is this suite",
"fullname": "test_when_calling_file_exists_when_file_is_self",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 3,
"path": "res://tests/unit/file.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/file.test.gd",
"tags": [  ],
"test": ExtResource( 3 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 3
}, {
"context": "Given an Is Instance of class/type Assertion",
"methods": [ {
"assertions": [ {
"actual": "|AABB| 0, 0, 0 - 0, 0, 0 != null",
"context": "AABB is not null",
"expected": "|AABB| 0, 0, 0 - 0, 0, 0 != null",
"success": true
}, {
"actual": "0, 0, 0 - 0, 0, 0 is builtin: AABB",
"context": "Then it passes",
"expected": "0, 0, 0 - 0, 0, 0 is builtin: AABB",
"success": true
} ],
"context": "When calling asserts.is_AABB(aabb: AABB)",
"fullname": "test_when_calling_is_AABB",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|Array| [] != null",
"context": "array is not null",
"expected": "|Array| [] != null",
"success": true
}, {
"actual": "[] is builtin: Array",
"context": "Then it passes",
"expected": "[] is builtin: Array",
"success": true
} ],
"context": "When calling asserts.is_Array(array: Array)",
"fullname": "test_when_calling_is_Array",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|Basis| ((1, 0, 0), (0, 1, 0), (0, 0, 1)) != null",
"context": "basis is not null",
"expected": "|Basis| ((1, 0, 0), (0, 1, 0), (0, 0, 1)) != null",
"success": true
}, {
"actual": "((1, 0, 0), (0, 1, 0), (0, 0, 1)) is builtin: Basis",
"context": "Then it passes",
"expected": "((1, 0, 0), (0, 1, 0), (0, 0, 1)) is builtin: Basis",
"success": true
} ],
"context": "When calling asserts.is_basis(basis: Basis",
"fullname": "test_when_calling_is_Basis",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|Rect2| (0, 0, 0, 0) != null",
"context": "rect2 is not null",
"expected": "|Rect2| (0, 0, 0, 0) != null",
"success": true
}, {
"actual": "(0, 0, 0, 0) is builtin: Rect2",
"context": "Then it passes",
"expected": "(0, 0, 0, 0) is builtin: Rect2",
"success": true
} ],
"context": "When calling asserts.is_Rect2(rect2: Rect2)",
"fullname": "test_when_calling_is_Rect2",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|PoolColorArray| [PoolColorArray] != null",
"context": "colors is not null",
"expected": "|PoolColorArray| [PoolColorArray] != null",
"success": true
}, {
"actual": "[PoolColorArray] is builtin: PoolColorArray",
"context": "Then it passes",
"expected": "[PoolColorArray] is builtin: PoolColorArray",
"success": true
} ],
"context": "When calling asserts.is_PoolColorArray(colors: PoolColorArray)",
"fullname": "test_when_calling_is_PoolColorArray",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|Transform2D| ((1, 0), (0, 1), (0, 0)) != null",
"context": "transform2D is not null",
"expected": "|Transform2D| ((1, 0), (0, 1), (0, 0)) != null",
"success": true
}, {
"actual": "((1, 0), (0, 1), (0, 0)) is builtin: Transform2D",
"context": "Then it passes",
"expected": "((1, 0), (0, 1), (0, 0)) is builtin: Transform2D",
"success": true
} ],
"context": "When calling asserts.is_Transform(transform2D: Transform2D)",
"fullname": "test_when_calling_is_Transform2D",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|RID| [RID] != null",
"context": "rid is not null",
"expected": "|RID| [RID] != null",
"success": true
}, {
"actual": "[RID] is builtin: RID",
"context": "Then it passes",
"expected": "[RID] is builtin: RID",
"success": true
} ],
"context": "When calling asserts.is_RID(rid: RID)",
"fullname": "test_when_calling_is_RID",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|Object| [Node:1711] != null",
"context": "node is not null",
"expected": "|Object| [Node:1711] != null",
"success": true
}, {
"actual": "[Node:1711] is builtin: Object",
"context": "An instance of node is an Object",
"expected": "[Node:1711] is builtin: Object",
"success": true
} ],
"context": "When calling is asserts.object(node: Node)",
"fullname": "test_when_calling_is_object",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|NodePath| . != null",
"context": "@'Parent/Child' is not null",
"expected": "|NodePath| . != null",
"success": true
}, {
"actual": ". is builtin: NodePath",
"context": "Then it passes",
"expected": ". is builtin: NodePath",
"success": true
} ],
"context": "When calling asserts.is_NodePath(@'Parent/Child')",
"fullname": "test_when_calling_is_NodePath",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|Quat| (0, 0, 0, 1) != null",
"context": "quat is not null",
"expected": "|Quat| (0, 0, 0, 1) != null",
"success": true
}, {
"actual": "(0, 0, 0, 1) is builtin: Quat",
"context": "Then it passes",
"expected": "(0, 0, 0, 1) is builtin: Quat",
"success": true
} ],
"context": "When calling asserts.is_Quat(quat: Quat)",
"fullname": "test_when_calling_is_Quat",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|PoolByteArray| [PoolByteArray] != null",
"context": "bytes is not null",
"expected": "|PoolByteArray| [PoolByteArray] != null",
"success": true
}, {
"actual": "[PoolByteArray] is builtin: PoolByteArray",
"context": "Then it passes",
"expected": "[PoolByteArray] is builtin: PoolByteArray",
"success": true
} ],
"context": "When calling asserts.is_PoolByteArray(bytes: PoolByteArray)",
"fullname": "test_when_calling_is_PoolByteArray",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "1 is builtin: float",
"context": "Then it passes",
"expected": "1 is builtin: float",
"success": true
} ],
"context": "When calling asserts.is_float(1.0)",
"fullname": "test_when_calling_is_float",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|PoolRealArray| [] != null",
"context": "reals is not null",
"expected": "|PoolRealArray| [] != null",
"success": true
}, {
"actual": "[] is builtin: PoolRealArray",
"context": "Then it passes",
"expected": "[] is builtin: PoolRealArray",
"success": true
} ],
"context": "When calling is asserts.is_PoolRealArray(reals: PoolRealArray)",
"fullname": "test_when_calling_is_PoolRealArray",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|Transform| 1, 0, 0, 0, 1, 0, 0, 0, 1 - 0, 0, 0 != null",
"context": "transform is not null",
"expected": "|Transform| 1, 0, 0, 0, 1, 0, 0, 0, 1 - 0, 0, 0 != null",
"success": true
}, {
"actual": "1, 0, 0, 0, 1, 0, 0, 0, 1 - 0, 0, 0 is builtin: Transform",
"context": "Then it passes",
"expected": "1, 0, 0, 0, 1, 0, 0, 0, 1 - 0, 0, 0 is builtin: Transform",
"success": true
} ],
"context": "When calling asserts.is_Transform(transform: Transform)",
"fullname": "test_when_calling_is_Transform",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|Vector2| (0, 0) != null",
"context": "vec2 is not null",
"expected": "|Vector2| (0, 0) != null",
"success": true
}, {
"actual": "(0, 0) is builtin: Vector2",
"context": "Then it passes",
"expected": "(0, 0) is builtin: Vector2",
"success": true
} ],
"context": "When calling asserts.is_Vector2(vec2)",
"fullname": "test_when_calling_is_Vector2",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "True is builtin: bool",
"context": "Then it passes",
"expected": "True is builtin: bool",
"success": true
} ],
"context": "When calling asserts.is_bool(true)",
"fullname": "test_when_calling_is_bool",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|PoolStringArray| [] != null",
"context": "strs is not null",
"expected": "|PoolStringArray| [] != null",
"success": true
}, {
"actual": "[] is builtin: PoolStringArray",
"context": "Then it passes",
"expected": "[] is builtin: PoolStringArray",
"success": true
} ],
"context": "When calling is asserts.is_PoolStringArray(strs: PoolStringArray)",
"fullname": "test_when_calling_is_PoolStringArray",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|PoolVector2Array| [] != null",
"context": "vec2s is not null",
"expected": "|PoolVector2Array| [] != null",
"success": true
}, {
"actual": "[] is builtin: PoolVector2Array",
"context": "Then it passes",
"expected": "[] is builtin: PoolVector2Array",
"success": true
} ],
"context": "When calling is asserts.is_PoolVector2Array(vec2s: PoolVector2Array)",
"fullname": "test_when_calling_is_PoolVector2Array",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|String|  != null",
"context": "strs is not null",
"expected": "|String|  != null",
"success": true
}, {
"actual": " is builtin: String",
"context": "Then it passes",
"expected": " is builtin: String",
"success": true
} ],
"context": "When calling asserts.is_string(strs: String)",
"fullname": "test_when_calling_is_string",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|Color| 0,0,0,1 != null",
"context": "color is not null",
"expected": "|Color| 0,0,0,1 != null",
"success": true
}, {
"actual": "0,0,0,1 is builtin: Color",
"context": "Then it passes",
"expected": "0,0,0,1 is builtin: Color",
"success": true
} ],
"context": "When calling asserts.is_color(color: Color)",
"fullname": "test_when_calling_is_Color",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "1 is builtin: int",
"context": "Then it passes",
"expected": "1 is builtin: int",
"success": true
} ],
"context": "When callign asserts.is_int(1)",
"fullname": "test_when_calling_is_int",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "{} is builtin: Dictionary",
"context": "Then it passes",
"expected": "{} is builtin: Dictionary",
"success": true
} ],
"context": "When calling asserts.is_Dictionary({})",
"fullname": "test_when_calling_is_Dictionary",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|PoolVector3Array| [] != null",
"context": "vec3s is not null",
"expected": "|PoolVector3Array| [] != null",
"success": true
}, {
"actual": "[] is builtin: PoolVector3Array",
"context": "Then it passes",
"expected": "[] is builtin: PoolVector3Array",
"success": true
} ],
"context": "When calling is asserts.is_PoolVector3Array(vec3s: PoolVector3Array)",
"fullname": "test_when_calling_is_PoolVector3Array",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|Vector3| (0, 0, 0) != null",
"context": "vec3 is not null",
"expected": "|Vector3| (0, 0, 0) != null",
"success": true
}, {
"actual": "(0, 0, 0) is builtin: Vector3",
"context": "Then it passes",
"expected": "(0, 0, 0) is builtin: Vector3",
"success": true
} ],
"context": "When calling asserts.is_Vector3(vec3: Vector3",
"fullname": "test_when_calling_is_Vector3",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|PoolIntArray| [] != null",
"context": "ints is not null",
"expected": "|PoolIntArray| [] != null",
"success": true
}, {
"actual": "[] is builtin: PoolIntArray",
"context": "Then it passes",
"expected": "[] is builtin: PoolIntArray",
"success": true
} ],
"context": "When calling asserts.is_PoolIntArray(ints: PoolIntArray)",
"fullname": "test_when_calling_is_PoolIntArray",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|Plane| 0, 0, 0, 0 != null",
"context": "plane is not null",
"expected": "|Plane| 0, 0, 0, 0 != null",
"success": true
}, {
"actual": "0, 0, 0, 0 is builtin: Plane",
"context": "then it passes",
"expected": "0, 0, 0, 0 is builtin: Plane",
"success": true
} ],
"context": "When calling asserts.is_Plane(plane: Plane())",
"fullname": "test_when_calling_is_Plane",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
} ],
"passed": 26,
"path": "res://tests/unit/is_instance.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/is_instance.test.gd",
"tags": [  ],
"test": ExtResource( 6 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 26
}, {
"context": "Given an Is Not Instance of class/type Assertion",
"methods": [ {
"assertions": [ {
"actual": "Null is not builtin: PoolRealArray",
"context": "Then it passes",
"expected": "Null is not builtin: PoolRealArray",
"success": true
} ],
"context": "when calling asserts.is_not_PoolRealArray(null)",
"fullname": "test_when_calling_is_not_PoolRealArray",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Array",
"context": "Then it passes",
"expected": "Null is not builtin: Array",
"success": true
} ],
"context": "when calling asserts.is_not_Array(null)",
"fullname": "test_when_calling_is_not_Array",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Basis",
"context": "Then it passes",
"expected": "Null is not builtin: Basis",
"success": true
} ],
"context": "when calling asserts.is_not_Basis(null)",
"fullname": "test_when_calling_is_not_Basis",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: PoolVector3Array",
"context": "Then it passes",
"expected": "Null is not builtin: PoolVector3Array",
"success": true
} ],
"context": "when calling asserts.is_not_PoolVector3Array(null)",
"fullname": "test_when_calling_is_not_PoolVector3Array",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Transform2D",
"context": "Then it passes",
"expected": "Null is not builtin: Transform2D",
"success": true
} ],
"context": "when calling asserts.is_not_Transform2D(null)",
"fullname": "test_when_calling_is_not_Transform2D",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Color",
"context": "Then it passes",
"expected": "Null is not builtin: Color",
"success": true
} ],
"context": "when calling asserts.is_not_Color(null)",
"fullname": "test_when_calling_is_not_Color",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Rect2",
"context": "Then it passes",
"expected": "Null is not builtin: Rect2",
"success": true
} ],
"context": "when calling asserts.is_not_Rect2(null)",
"fullname": "test_when_calling_is_not_Rect2",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: bool",
"context": "Then it passes",
"expected": "Null is not builtin: bool",
"success": true
} ],
"context": "when calling asserts.is_not_bool(null)",
"fullname": "test_when_calling_is_not_bool",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Dictionary",
"context": "Then it passes",
"expected": "Null is not builtin: Dictionary",
"success": true
} ],
"context": "when calling asserts.is_not_Dictionary(null)",
"fullname": "test_when_calling_is_not_Dictionary",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: NodePath",
"context": "Then it passes",
"expected": "Null is not builtin: NodePath",
"success": true
} ],
"context": "when calling asserts.is_not_NodePath(null)",
"fullname": "test_when_calling_is_not_NodePath",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Plane",
"context": "Then it passes",
"expected": "Null is not builtin: Plane",
"success": true
} ],
"context": "when calling asserts.is_not_Plane(null)",
"fullname": "test_when_calling_is_not_Plane",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: PoolByteArray",
"context": "Then it passes",
"expected": "Null is not builtin: PoolByteArray",
"success": true
} ],
"context": "when calling asserts.is_not_PoolByteArray(null)",
"fullname": "test_when_calling_is_not_PoolByteArray",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: PoolColorArray",
"context": "Then it passes",
"expected": "Null is not builtin: PoolColorArray",
"success": true
} ],
"context": "when calling asserts.is_not_PoolColorArray(null)",
"fullname": "test_when_calling_is_not_PoolColorArray",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: AABB",
"context": "Then it passes",
"expected": "Null is not builtin: AABB",
"success": true
} ],
"context": "when calling asserts.is_not_AABB(null)",
"fullname": "test_when_calling_is_not_AABB",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: int",
"context": "Then it passes",
"expected": "Null is not builtin: int",
"success": true
} ],
"context": "when calling asserts.is_not_int(null)",
"fullname": "test_when_calling_is_not_int",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: float",
"context": "Then it passes",
"expected": "Null is not builtin: float",
"success": true
} ],
"context": "when calling asserts.is_not_float(null)",
"fullname": "test_when_calling_is_not_float",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: PoolIntArray",
"context": "Then it passes",
"expected": "Null is not builtin: PoolIntArray",
"success": true
} ],
"context": "when calling asserts.is_not_PoolIntArray(null)",
"fullname": "test_when_calling_is_not_PoolIntArray",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: PoolStringArray",
"context": "Then it passes",
"expected": "Null is not builtin: PoolStringArray",
"success": true
} ],
"context": "when calling asserts.is_not_PoolStringArray(null)",
"fullname": "test_when_calling_is_not_PoolStringArray",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Quat",
"context": "Then it passes",
"expected": "Null is not builtin: Quat",
"success": true
} ],
"context": "when calling asserts.is_not_Quat(null)",
"fullname": "test_when_calling_is_not_Quat",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: RID",
"context": "Then it passes",
"expected": "Null is not builtin: RID",
"success": true
} ],
"context": "when calling asserts.is_not_RID(null)",
"fullname": "test_when_calling_is_not_RID",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: String",
"context": "Then it passes",
"expected": "Null is not builtin: String",
"success": true
} ],
"context": "when calling asserts.is_not_String(null)",
"fullname": "test_when_calling_is_not_String",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Transform",
"context": "Then it passes",
"expected": "Null is not builtin: Transform",
"success": true
} ],
"context": "when calling asserts.is_not_Transform(null)",
"fullname": "test_when_calling_is_not_Transform",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Object",
"context": "Then it passes",
"expected": "Null is not builtin: Object",
"success": true
} ],
"context": "when calling asserts.is_not_Object(null)",
"fullname": "test_when_calling_is_not_Object",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: PoolVector2Array",
"context": "Then it passes",
"expected": "Null is not builtin: PoolVector2Array",
"success": true
} ],
"context": "when calling asserts.is_not_PoolVector2Array(null)",
"fullname": "test_when_calling_is_not_PoolVector2Array",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Vector2",
"context": "Then it passes",
"expected": "Null is not builtin: Vector2",
"success": true
} ],
"context": "when calling asserts.is_not_Vector2(null)",
"fullname": "test_when_calling_is_not_Vector2",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is not builtin: Vector3",
"context": "Then it passes",
"expected": "Null is not builtin: Vector3",
"success": true
} ],
"context": "when calling asserts.is_not_Vector3(null)",
"fullname": "test_when_calling_is_not_Vector3",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 26,
"path": "res://tests/unit/is_not_instance.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/is_not_instance.test.gd",
"tags": [  ],
"test": ExtResource( 2 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 26
}, {
"context": "Given a Null Assertion",
"methods": [ {
"assertions": [ {
"actual": "|null| Null == null",
"context": "Then it passes",
"expected": "|null| Null == null",
"success": true
} ],
"context": "When calling asserts.is_null(null)",
"fullname": "test_when_calling_null_is_null",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|Object| [Deleted Object] == null",
"context": "A Freed Node is null in Engine 3.2.2 or greater",
"expected": "|Object| [Deleted Object] == null",
"success": true
} ],
"context": "When calling freed object is null",
"fullname": "test_when_calling_freed_object_is_not_null",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|Object| [Node:1781] != null",
"context": "Then it passes",
"expected": "|Object| [Node:1781] != null",
"success": true
} ],
"context": "When calling Node is not null",
"fullname": "test_when_calling_node_is_not_null",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 3,
"path": "res://tests/unit/null.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/null.test.gd",
"tags": [  ],
"test": ExtResource( 12 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 3
}, {
"context": "Given an Object Assertion",
"methods": [ {
"assertions": [ {
"actual": "[Node:1783] has meta: dummy",
"context": "Then it passes",
"expected": "[Node:1783] has meta: dummy",
"success": true
}, {
"actual": "[Node:1783] has meta: dummy",
"context": "Then it passes",
"expected": "[Node:1783] has meta: dummy",
"success": true
} ],
"context": "When calling asserts.object_has_meta() after adding metadata",
"fullname": "test_when_calling_has_meta_after_adding_metadata",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "[Node:1783] does not have meta: bad_meta",
"context": "Then it passes",
"expected": "[Node:1783] does not have meta: bad_meta",
"success": true
} ],
"context": "When calling asserts.object_does_not_have_meta()",
"fullname": "test_when_calling_does_not_have_meta",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:1783] does not have meta: confusing",
"context": "Then it passes",
"expected": "[Node:1783] does not have meta: confusing",
"success": true
} ],
"context": "When calling asserts.object_has_meta with real key but null val",
"fullname": "test_when_calling_does_not_have_meta_real_key_null_value_pair",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:1783] has method: title",
"context": "Then it passes",
"expected": "[Node:1783] has method: title",
"success": true
} ],
"context": "When calling has_method('title')",
"fullname": "test_when_calling_has_method_title",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Null is freed from memory",
"context": "Then it passes",
"expected": "Null is freed from memory",
"success": true
} ],
"context": "When calling asserts.is_freed(freed_object",
"fullname": "test_when_calling_freed_object_is_freed",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:1793] is not freed",
"context": "Then it passes",
"expected": "[Node:1793] is not freed",
"success": true
} ],
"context": "When calling asserts.is_not_freed(unfreed_object)",
"fullname": "test_when_calling_unfreed_object_is_not_freed",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:1783].builtin_dummy is connected to [Node:1783].title",
"context": "Then it passes",
"expected": "[Node:1783].builtin_dummy is connected to [Node:1783].title",
"success": true
} ],
"context": "When calling asserts object is connected with a valid connection",
"fullname": "test_when_calling_obj_is_connected_with_a_real_connection",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:1796] is not queued for deletion",
"context": "Then it passes",
"expected": "[Node:1796] is not queued for deletion",
"success": true
} ],
"context": "When calling asserts.object_is_not_for_queued_deletion after not calling queue free()",
"fullname": "test_when_calling_obj_is_not_for_queued_deletion_after_not_calling_queue_free",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:1783] has user signal: dummy_signal",
"context": "Then it passes",
"expected": "[Node:1783] has user signal: dummy_signal",
"success": true
} ],
"context": "When calling obj_has_user_signal after adding a signal",
"fullname": "test_when_calling_has_user_signal_after_adding_a_signal",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:1783] does not have user signal: false_signal",
"context": "Then it passes",
"expected": "[Node:1783] does not have user signal: false_signal",
"success": true
} ],
"context": "When calling obj_does_not_have_user_signal with fake signal",
"fullname": "test_when_calling_does_not_have_user_signal",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:1800] is blocking signals",
"context": "Then it passes",
"expected": "[Node:1800] is blocking signals",
"success": true
} ],
"context": "When calling is blocking signals while blocking signals",
"fullname": "test_is_blocking_signals",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:1802] is queued for deletion",
"context": "Then it passes",
"expected": "[Node:1802] is queued for deletion",
"success": true
} ],
"context": "When calling asserts.object_is_queued for deletion after calling queue_free",
"fullname": "test_when_calling_obj_is_queued_for_deletion_after_calling_queue_free",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:1804] is not blocking signals",
"context": "Then it passes",
"expected": "[Node:1804] is not blocking signals",
"success": true
} ],
"context": "When calling is not blocking signals while not blocking signals",
"fullname": "test_is_not_blocking_signals",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:1783] does not have user signal: builtin_dummy",
"context": "Then it passes",
"expected": "[Node:1783] does not have user signal: builtin_dummy",
"success": true
} ],
"context": "When calling does not have user signal with class signal",
"fullname": "test_when_calling_does_not_have_user_signal_with_class_signal_constant",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "[Node:1783].builtin_dummy is not connected to [Node:1783].title",
"context": "Then it passes",
"expected": "[Node:1783].builtin_dummy is not connected to [Node:1783].title",
"success": true
} ],
"context": "When calling asserts object is not connected with an invalid connection",
"fullname": "test_when_calling_obj_is_not_connected_with_an_invalid_connection",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 15,
"path": "res://tests/unit/object.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/object.test.gd",
"tags": [  ],
"test": ExtResource( 7 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 15
}, {
"context": "Given the Addition Operator",
"methods": [ {
"assertions": [ {
"actual": "|int| 4 is equal to |int| 4",
"context": "",
"expected": "|int| 4 is equal to |int| 4",
"success": true
} ],
"context": "When we add 2 to 2 we get 4",
"fullname": "test_add",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 8 is equal to |int| 8",
"context": "",
"expected": "|int| 8 is equal to |int| 8",
"success": true
} ],
"context": "When we add 5 to 3 we get 8",
"fullname": "test_add",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 13 is equal to |int| 13",
"context": "",
"expected": "|int| 13 is equal to |int| 13",
"success": true
} ],
"context": "When we add 7 to 6 we get 13",
"fullname": "test_add",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 0 is equal to |int| 0",
"context": "",
"expected": "|int| 0 is equal to |int| 0",
"success": true
} ],
"context": "When we subtract 2 from 2 we get 0",
"fullname": "test_subtract",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 2 is equal to |int| 2",
"context": "",
"expected": "|int| 2 is equal to |int| 2",
"success": true
} ],
"context": "When we subtract 5 from 3 we get 2",
"fullname": "test_subtract",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|int| 1 is equal to |int| 1",
"context": "",
"expected": "|int| 1 is equal to |int| 1",
"success": true
} ],
"context": "When we subtract 7 from 6 we get 1",
"fullname": "test_subtract",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 6,
"path": "res://tests/unit/parameters.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/parameters.test.gd",
"tags": [  ],
"test": ExtResource( 16 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 6
}, {
"context": "Given A Range Assertion",
"methods": [ {
"assertions": [ {
"actual": "0 is in range(0, 10)",
"context": "Then it passes",
"expected": "0 is in range(0, 10)",
"success": true
} ],
"context": "When calling is (0) in range(0, 10)",
"fullname": "test_when_calling_is_in_range",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "10 is not in range(0, 10)",
"context": "Then it passes",
"expected": "10 is not in range(0, 10)",
"success": true
} ],
"context": "When calling is (10) not in range (in range(0, 10)",
"fullname": "test_when_calling_is_not_in_range",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 2,
"path": "res://tests/unit/range.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/range.test.gd",
"tags": [  ],
"test": ExtResource( 15 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 2
}, {
"context": "Given a String Assertion",
"methods": [ {
"assertions": [ {
"actual": "lorem impsum begins with lorem",
"context": "Then it passes",
"expected": "lorem impsum begins with lorem",
"success": true
} ],
"context": "When calling asserts.string_begins_with('lorem', 'lorem impsum')",
"fullname": "test_when_calling_string_begins_with",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "lorem impsum contains em im",
"context": "Then it passes",
"expected": "lorem impsum contains em im",
"success": true
} ],
"context": "When calling asserts.string_contains('em im', 'lorem impsum')",
"fullname": "test_when_calling_string_contains",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "impsum does not begin with bleh lorem",
"context": "Then it passes",
"expected": "impsum does not begin with bleh lorem",
"success": true
} ],
"context": "When calling asserts.string_does_not_begin_with('lorem', 'impsum')",
"fullname": "test_when_calling_string_does_not_begin_with",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "impsum does not end with lorem",
"context": "Then it passes",
"expected": "impsum does not end with lorem",
"success": true
} ],
"context": "When calling asserts.string_does_not_end_with('lorem', 'impsum')",
"fullname": "test_when_calling_string_does_not_end_with",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "impsum does not contain beem im",
"context": "Then it passes",
"expected": "impsum does not contain beem im",
"success": true
} ],
"context": "When calling asserts.string_does_not_contain('em im', 'impsum')",
"fullname": "test_when_calling_string_does_not_contain",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "lorem impsum ends with impsum",
"context": "Then it passes",
"expected": "lorem impsum ends with impsum",
"success": true
} ],
"context": "When calling asserts.string_ends_with('impsum', 'lorem impsum')",
"fullname": "test_when_calling_string_ends_with",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 6,
"path": "res://tests/unit/string.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/string.test.gd",
"tags": [  ],
"test": ExtResource( 9 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 6
}, {
"context": "Dummy Passing Test",
"methods": [ {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Passing!",
"expected": "|bool| True == true",
"success": true
} ],
"context": "This method passes",
"fullname": "test_this_method_passes",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 1,
"path": "res://tests/unit/suite.test.gd.DummyOne",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/suite.test.gd.DummyOne",
"tags": [  ],
"test": SubResource( 35 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 1
}, {
"context": "Dummy Test 2",
"methods": [ {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Passing!",
"expected": "|bool| True == true",
"success": true
} ],
"context": "This method passes",
"fullname": "test_this_method_passes",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 1,
"path": "res://tests/unit/suite.test.gd.DummyTwo",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/suite.test.gd.DummyTwo",
"tags": [  ],
"test": SubResource( 36 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 1
}, {
"context": "Given a Test Script",
"methods": [ {
"assertions": [ {
"actual": "|bool| True == true",
"context": "if the test didn't break this works",
"expected": "|bool| True == true",
"success": true
} ],
"context": " we can omit describe",
"fullname": "test_we_can_omit_describe",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|int| 2 is equal to |int| 2",
"context": "",
"expected": "|int| 2 is equal to |int| 2",
"success": true
} ],
"context": " when we omit context we can see expected and got under method",
"fullname": "test_when_we_omit_context_we_can_see_expected_and_got_under_method",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|int| 10 is greater than |int| 1",
"context": "We get an array of multiple values back",
"expected": "|int| 10 is greater than |int| 1",
"success": true
}, {
"actual": "|int| 0 is not equal to |int| 9",
"context": "With different values",
"expected": "|int| 0 != |int| 9",
"success": true
}, {
"actual": "|int| 10 is greater than |int| 1",
"context": "And we can track multiple properties",
"expected": "|int| 10 is greater than |int| 1",
"success": true
} ],
"context": "When we record properties",
"fullname": "test_we_can_record_properties",
"passed": 3,
"success": true,
"time": 0.0,
"total": 3
} ],
"passed": 3,
"path": "res://tests/unit/test.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/test.test.gd",
"tags": [  ],
"test": ExtResource( 19 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 3
}, {
"context": "Given a Signal Watcher",
"methods": [ {
"assertions": [ {
"actual": "signal: multiple was emitted from [Node:1850] 2",
"context": "Then we can track how many times we emitted it",
"expected": "signal: multiple was emitted from [Node:1850] 2",
"success": true
} ],
"context": "When we watch and signal and emit it multiple times",
"fullname": "test_When_we_watch_a_signal_and_emit_it_multiple_times",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Signal: example was not emitted from [Node:1850]",
"context": "Then it does not capture the non-emitted signal",
"expected": "Signal: example was not emitted from [Node:1850]",
"success": true
} ],
"context": "When we watch and do not emit a signal",
"fullname": "test_When_we_watch_and_do_not_emit_a_signal",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "signal: example was emitted from [Node:1850]",
"context": "Then it captures the emitted signal",
"expected": "signal: example was emitted from [Node:1850]",
"success": true
} ],
"context": "When we watch and emit a signal",
"fullname": "test_When_we_watch_and_emit_a_signal",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "Signal: example was emitted from [Node:1850] with arguments: [1, 20, 5]",
"context": "Then it captures any arguments that where passed when the signal was emitted",
"expected": "Signal: example was emitted from [Node:1850] with arguments: [1, 20, 5]",
"success": true
} ],
"context": "When we watch a signal from an object with no bound variables",
"fullname": "test_When_we_watch_a_signal_from_an_object_with_no_bound_variables",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
} ],
"passed": 4,
"path": "res://tests/unit/watcher.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/watcher.test.gd",
"tags": [  ],
"test": ExtResource( 17 ),
"yield_time": 0.0
},
"success": true,
"time_taken": 0.0,
"total": 4
}, {
"context": "Given a Yield",
"methods": [ {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then the timeout signal is disconnected",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then the signal-signal is disconnected",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When it is finished",
"fullname": "test_When_yielder_is_finished_signals_are_disconnected",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then yielder is unpaused",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "The timeout signal of the yielder is connected",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we call until_timeout (with 1.0)",
"fullname": "test_When_we_call_until_timeout",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then the yielder is paused",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When a signal being yielded on is emitted",
"fullname": "test_When_a_signal_being_yielded_on_is_emitted_the_yielder_is_stopped",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then we set var e to true",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then we set var f to true",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we yield twice in execute",
"fullname": "test_When_we_yield_in_execute",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then the yielder is unpaused",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then the timeout signal of the yielder is connected",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then our signal is connected to the yielder",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we call until signal",
"fullname": "test_When_we_call_until_signal",
"passed": 3,
"success": true,
"time": 0.0,
"total": 3
}, {
"assertions": [ {
"actual": "[100, Null, Null, Null, Null, Null] is builtin: Array",
"context": "Then we get an array",
"expected": "[100, Null, Null, Null, Null, Null] is builtin: Array",
"success": true
}, {
"actual": "|int| 6 is equal to |int| 6",
"context": "Of size 6",
"expected": "|int| 6 is equal to |int| 6",
"success": true
}, {
"actual": "|int| 100 is equal to |int| 100",
"context": "Where element 0 is 100",
"expected": "|int| 100 is equal to |int| 100",
"success": true
} ],
"context": "When yield(self.yield_value()) returns",
"fullname": "test_When_we_yield_we_get_the_return_value",
"passed": 3,
"success": true,
"time": 0.0,
"total": 3
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then we set var a to true",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then we set var b to true",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we yield in start twice",
"fullname": "test_When_we_yield_in_start",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then we set var c to true",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then we set var d to true",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When we yield in pre thrice",
"fullname": "test_When_we_yield_in_pre",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then yielder is not active",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When asserting against a test",
"fullname": "test_Yielder_is_not_active_when_asserting",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then the yielder is paused",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "The timeout signal of the yielder is not connected",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When the yielder times out on until_timeout(0.1)",
"fullname": "test_When_the_yielder_times_out",
"passed": 2,
"success": true,
"time": 0.0,
"total": 2
}, {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then the yielder is paused",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then the timeout signal of the yielder is disconnected",
"expected": "|bool| True == true",
"success": true
}, {
"actual": "|bool| True == true",
"context": "Then our signal to the yielder is disconnected",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When the yielder heres our signal",
"fullname": "test_When_the_yielder_hears_our_signal",
"passed": 3,
"success": true,
"time": 0.0,
"total": 3
} ],
"passed": 11,
"path": "res://tests/unit/yield.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/yield.test.gd",
"tags": [  ],
"test": ExtResource( 18 ),
"yield_time": 1.9
},
"success": true,
"time_taken": 0.0,
"total": 11
} ],
1611570961: [ {
"context": "Given a Boolean Assertion",
"methods": [ {
"assertions": [ {
"actual": "|bool| True == true",
"context": "Then it passes",
"expected": "|bool| True == true",
"success": true
} ],
"context": "When calling asserts.is_true(true)",
"fullname": "test_when_calling_asserts_is_true",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| False == false",
"context": "Then it passes",
"expected": "|bool| False == false",
"success": true
} ],
"context": "When calling asserts.is_false(false)",
"fullname": "test_when_calling_asserts_is_false",
"passed": 1,
"success": true,
"time": 0.0,
"total": 1
}, {
"assertions": [ {
"actual": "|bool| True != false",
"context": "",
"expected": "|bool| True == false",
"success": false
} ],
"context": " intentional failure",
"fullname": "test_intentional_failure",
"passed": 0,
"success": false,
"time": 0.0,
"total": 1
} ],
"passed": 2,
"path": "res://tests/unit/boolean.test.gd",
"source": {
"containers": [ "res://tests/unit", "res://tests" ],
"method": "",
"path": "res://tests/unit/boolean.test.gd",
"tags": [  ],
"test": ExtResource( 11 ),
"yield_time": 0.0
},
"success": false,
"time_taken": 0.0,
"total": 3
} ]
}
current_key = 1611570961
